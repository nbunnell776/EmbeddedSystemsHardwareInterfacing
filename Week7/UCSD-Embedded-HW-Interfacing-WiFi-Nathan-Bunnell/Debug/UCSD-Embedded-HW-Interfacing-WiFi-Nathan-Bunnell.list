
UCSD-Embedded-HW-Interfacing-WiFi-Nathan-Bunnell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000860c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c38  0800879c  0800879c  0001879c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093d4  080093d4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080093d4  080093d4  000193d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093dc  080093dc  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093dc  080093dc  000193dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093e0  080093e0  000193e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080093e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001290  20000090  08009474  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001320  08009474  00021320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018779  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003014  00000000  00000000  00038839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  0003b850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a8  00000000  00000000  0003cb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029437  00000000  00000000  0003dcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015543  00000000  00000000  000670ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6d89  00000000  00000000  0007c642  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001733cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b60  00000000  00000000  00173420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008784 	.word	0x08008784

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08008784 	.word	0x08008784

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
	return 1;
 800057c:	2301      	movs	r3, #1
}
 800057e:	4618      	mov	r0, r3
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr

08000588 <_kill>:

int _kill(int pid, int sig)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000592:	f006 fded 	bl	8007170 <__errno>
 8000596:	4603      	mov	r3, r0
 8000598:	2216      	movs	r2, #22
 800059a:	601a      	str	r2, [r3, #0]
	return -1;
 800059c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <_exit>:

void _exit (int status)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80005b0:	f04f 31ff 	mov.w	r1, #4294967295
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f7ff ffe7 	bl	8000588 <_kill>
	while (1) {}		/* Make sure we hang here */
 80005ba:	e7fe      	b.n	80005ba <_exit+0x12>

080005bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
 80005cc:	e00a      	b.n	80005e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005ce:	f3af 8000 	nop.w
 80005d2:	4601      	mov	r1, r0
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	1c5a      	adds	r2, r3, #1
 80005d8:	60ba      	str	r2, [r7, #8]
 80005da:	b2ca      	uxtb	r2, r1
 80005dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	3301      	adds	r3, #1
 80005e2:	617b      	str	r3, [r7, #20]
 80005e4:	697a      	ldr	r2, [r7, #20]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	dbf0      	blt.n	80005ce <_read+0x12>
	}

return len;
 80005ec:	687b      	ldr	r3, [r7, #4]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3718      	adds	r7, #24
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005f6:	b580      	push	{r7, lr}
 80005f8:	b086      	sub	sp, #24
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	60f8      	str	r0, [r7, #12]
 80005fe:	60b9      	str	r1, [r7, #8]
 8000600:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]
 8000606:	e009      	b.n	800061c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	1c5a      	adds	r2, r3, #1
 800060c:	60ba      	str	r2, [r7, #8]
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	4618      	mov	r0, r3
 8000612:	f006 fd15 	bl	8007040 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	3301      	adds	r3, #1
 800061a:	617b      	str	r3, [r7, #20]
 800061c:	697a      	ldr	r2, [r7, #20]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	429a      	cmp	r2, r3
 8000622:	dbf1      	blt.n	8000608 <_write+0x12>
	}
	return len;
 8000624:	687b      	ldr	r3, [r7, #4]
}
 8000626:	4618      	mov	r0, r3
 8000628:	3718      	adds	r7, #24
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <_close>:

int _close(int file)
{
 800062e:	b480      	push	{r7}
 8000630:	b083      	sub	sp, #12
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
	return -1;
 8000636:	f04f 33ff 	mov.w	r3, #4294967295
}
 800063a:	4618      	mov	r0, r3
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr

08000646 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000646:	b480      	push	{r7}
 8000648:	b083      	sub	sp, #12
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
 800064e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000656:	605a      	str	r2, [r3, #4]
	return 0;
 8000658:	2300      	movs	r3, #0
}
 800065a:	4618      	mov	r0, r3
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr

08000666 <_isatty>:

int _isatty(int file)
{
 8000666:	b480      	push	{r7}
 8000668:	b083      	sub	sp, #12
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
	return 1;
 800066e:	2301      	movs	r3, #1
}
 8000670:	4618      	mov	r0, r3
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	607a      	str	r2, [r7, #4]
	return 0;
 8000688:	2300      	movs	r3, #0
}
 800068a:	4618      	mov	r0, r3
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
	...

08000698 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006a0:	4a14      	ldr	r2, [pc, #80]	; (80006f4 <_sbrk+0x5c>)
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <_sbrk+0x60>)
 80006a4:	1ad3      	subs	r3, r2, r3
 80006a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006ac:	4b13      	ldr	r3, [pc, #76]	; (80006fc <_sbrk+0x64>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d102      	bne.n	80006ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <_sbrk+0x64>)
 80006b6:	4a12      	ldr	r2, [pc, #72]	; (8000700 <_sbrk+0x68>)
 80006b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006ba:	4b10      	ldr	r3, [pc, #64]	; (80006fc <_sbrk+0x64>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4413      	add	r3, r2
 80006c2:	693a      	ldr	r2, [r7, #16]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d207      	bcs.n	80006d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006c8:	f006 fd52 	bl	8007170 <__errno>
 80006cc:	4603      	mov	r3, r0
 80006ce:	220c      	movs	r2, #12
 80006d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006d2:	f04f 33ff 	mov.w	r3, #4294967295
 80006d6:	e009      	b.n	80006ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006d8:	4b08      	ldr	r3, [pc, #32]	; (80006fc <_sbrk+0x64>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006de:	4b07      	ldr	r3, [pc, #28]	; (80006fc <_sbrk+0x64>)
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4413      	add	r3, r2
 80006e6:	4a05      	ldr	r2, [pc, #20]	; (80006fc <_sbrk+0x64>)
 80006e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006ea:	68fb      	ldr	r3, [r7, #12]
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	3718      	adds	r7, #24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20018000 	.word	0x20018000
 80006f8:	00000400 	.word	0x00000400
 80006fc:	200000ac 	.word	0x200000ac
 8000700:	20001320 	.word	0x20001320

08000704 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000704:	f8df d034 	ldr.w	sp, [pc, #52]	; 800073c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000708:	f006 fcfc 	bl	8007104 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800070c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800070e:	e003      	b.n	8000718 <LoopCopyDataInit>

08000710 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000710:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000712:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000714:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000716:	3104      	adds	r1, #4

08000718 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000718:	480a      	ldr	r0, [pc, #40]	; (8000744 <LoopForever+0xa>)
	ldr	r3, =_edata
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <LoopForever+0xe>)
	adds	r2, r0, r1
 800071c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800071e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000720:	d3f6      	bcc.n	8000710 <CopyDataInit>
	ldr	r2, =_sbss
 8000722:	4a0a      	ldr	r2, [pc, #40]	; (800074c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000724:	e002      	b.n	800072c <LoopFillZerobss>

08000726 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000726:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000728:	f842 3b04 	str.w	r3, [r2], #4

0800072c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800072c:	4b08      	ldr	r3, [pc, #32]	; (8000750 <LoopForever+0x16>)
	cmp	r2, r3
 800072e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000730:	d3f9      	bcc.n	8000726 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000732:	f006 fd23 	bl	800717c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000736:	f006 f885 	bl	8006844 <main>

0800073a <LoopForever>:

LoopForever:
    b LoopForever
 800073a:	e7fe      	b.n	800073a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800073c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000740:	080093e4 	.word	0x080093e4
	ldr	r0, =_sdata
 8000744:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000748:	20000090 	.word	0x20000090
	ldr	r2, =_sbss
 800074c:	20000090 	.word	0x20000090
	ldr	r3, = _ebss
 8000750:	20001320 	.word	0x20001320

08000754 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000754:	e7fe      	b.n	8000754 <ADC1_2_IRQHandler>
	...

08000758 <BSP_LED_Init>:
  * @param  Led  LED to be initialized. 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d10b      	bne.n	8000780 <BSP_LED_Init+0x28>
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <BSP_LED_Init+0x58>)
 800076a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076c:	4a10      	ldr	r2, [pc, #64]	; (80007b0 <BSP_LED_Init+0x58>)
 800076e:	f043 0302 	orr.w	r3, r3, #2
 8000772:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000774:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <BSP_LED_Init+0x58>)
 8000776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000778:	f003 0302 	and.w	r3, r3, #2
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8000780:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000784:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800078e:	2302      	movs	r3, #2
 8000790:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	4a07      	ldr	r2, [pc, #28]	; (80007b4 <BSP_LED_Init+0x5c>)
 8000796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800079a:	f107 020c 	add.w	r2, r7, #12
 800079e:	4611      	mov	r1, r2
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 fcc1 	bl	8001128 <HAL_GPIO_Init>
}
 80007a6:	bf00      	nop
 80007a8:	3720      	adds	r7, #32
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40021000 	.word	0x40021000
 80007b4:	20000000 	.word	0x20000000

080007b8 <BSP_LED_On>:
  * @param  Led  LED to be set on 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	4a06      	ldr	r2, [pc, #24]	; (80007e0 <BSP_LED_On+0x28>)
 80007c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ce:	b291      	uxth	r1, r2
 80007d0:	2201      	movs	r2, #1
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 fe6a 	bl	80014ac <HAL_GPIO_WritePin>
}
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000000 	.word	0x20000000

080007e4 <BSP_LED_Off>:
  * @param  Led  LED to be set off
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	4a06      	ldr	r2, [pc, #24]	; (800080c <BSP_LED_Off+0x28>)
 80007f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007fa:	b291      	uxth	r1, r2
 80007fc:	2200      	movs	r2, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 fe54 	bl	80014ac <HAL_GPIO_WritePin>
}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000000 	.word	0x20000000

08000810 <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	; 0x28
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	6039      	str	r1, [r7, #0]
 800081a:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d10b      	bne.n	800083a <BSP_COM_Init+0x2a>
 8000822:	4b2d      	ldr	r3, [pc, #180]	; (80008d8 <BSP_COM_Init+0xc8>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	4a2c      	ldr	r2, [pc, #176]	; (80008d8 <BSP_COM_Init+0xc8>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082e:	4b2a      	ldr	r3, [pc, #168]	; (80008d8 <BSP_COM_Init+0xc8>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d10b      	bne.n	8000858 <BSP_COM_Init+0x48>
 8000840:	4b25      	ldr	r3, [pc, #148]	; (80008d8 <BSP_COM_Init+0xc8>)
 8000842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000844:	4a24      	ldr	r2, [pc, #144]	; (80008d8 <BSP_COM_Init+0xc8>)
 8000846:	f043 0302 	orr.w	r3, r3, #2
 800084a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084c:	4b22      	ldr	r3, [pc, #136]	; (80008d8 <BSP_COM_Init+0xc8>)
 800084e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000850:	f003 0302 	and.w	r3, r3, #2
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d10b      	bne.n	8000876 <BSP_COM_Init+0x66>
 800085e:	4b1e      	ldr	r3, [pc, #120]	; (80008d8 <BSP_COM_Init+0xc8>)
 8000860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000862:	4a1d      	ldr	r2, [pc, #116]	; (80008d8 <BSP_COM_Init+0xc8>)
 8000864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000868:	6613      	str	r3, [r2, #96]	; 0x60
 800086a:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <BSP_COM_Init+0xc8>)
 800086c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800086e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 8000876:	2340      	movs	r3, #64	; 0x40
 8000878:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800087a:	2302      	movs	r3, #2
 800087c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800087e:	2302      	movs	r3, #2
 8000880:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8000886:	2307      	movs	r3, #7
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	4a13      	ldr	r2, [pc, #76]	; (80008dc <BSP_COM_Init+0xcc>)
 800088e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000892:	f107 0214 	add.w	r2, r7, #20
 8000896:	4611      	mov	r1, r2
 8000898:	4618      	mov	r0, r3
 800089a:	f000 fc45 	bl	8001128 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 800089e:	2380      	movs	r3, #128	; 0x80
 80008a0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 80008a6:	2307      	movs	r3, #7
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	4a0c      	ldr	r2, [pc, #48]	; (80008e0 <BSP_COM_Init+0xd0>)
 80008ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008b2:	f107 0214 	add.w	r2, r7, #20
 80008b6:	4611      	mov	r1, r2
 80008b8:	4618      	mov	r0, r3
 80008ba:	f000 fc35 	bl	8001128 <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	4a08      	ldr	r2, [pc, #32]	; (80008e4 <BSP_COM_Init+0xd4>)
 80008c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 80008ca:	6838      	ldr	r0, [r7, #0]
 80008cc:	f003 fcc1 	bl	8004252 <HAL_UART_Init>
}
 80008d0:	bf00      	nop
 80008d2:	3728      	adds	r7, #40	; 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40021000 	.word	0x40021000
 80008dc:	20000008 	.word	0x20000008
 80008e0:	2000000c 	.word	0x2000000c
 80008e4:	20000004 	.word	0x20000004

080008e8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	; 0x28
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80008f0:	4b27      	ldr	r3, [pc, #156]	; (8000990 <I2Cx_MspInit+0xa8>)
 80008f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f4:	4a26      	ldr	r2, [pc, #152]	; (8000990 <I2Cx_MspInit+0xa8>)
 80008f6:	f043 0302 	orr.w	r3, r3, #2
 80008fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fc:	4b24      	ldr	r3, [pc, #144]	; (8000990 <I2Cx_MspInit+0xa8>)
 80008fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000900:	f003 0302 	and.w	r3, r3, #2
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8000908:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800090c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800090e:	2312      	movs	r3, #18
 8000910:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000912:	2301      	movs	r3, #1
 8000914:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000916:	2303      	movs	r3, #3
 8000918:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800091a:	2304      	movs	r3, #4
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	4619      	mov	r1, r3
 8000924:	481b      	ldr	r0, [pc, #108]	; (8000994 <I2Cx_MspInit+0xac>)
 8000926:	f000 fbff 	bl	8001128 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	4619      	mov	r1, r3
 8000930:	4818      	ldr	r0, [pc, #96]	; (8000994 <I2Cx_MspInit+0xac>)
 8000932:	f000 fbf9 	bl	8001128 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8000936:	4b16      	ldr	r3, [pc, #88]	; (8000990 <I2Cx_MspInit+0xa8>)
 8000938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800093a:	4a15      	ldr	r2, [pc, #84]	; (8000990 <I2Cx_MspInit+0xa8>)
 800093c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000940:	6593      	str	r3, [r2, #88]	; 0x58
 8000942:	4b13      	ldr	r3, [pc, #76]	; (8000990 <I2Cx_MspInit+0xa8>)
 8000944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <I2Cx_MspInit+0xa8>)
 8000950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000952:	4a0f      	ldr	r2, [pc, #60]	; (8000990 <I2Cx_MspInit+0xa8>)
 8000954:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000958:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800095a:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <I2Cx_MspInit+0xa8>)
 800095c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800095e:	4a0c      	ldr	r2, [pc, #48]	; (8000990 <I2Cx_MspInit+0xa8>)
 8000960:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000964:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	210f      	movs	r1, #15
 800096a:	2021      	movs	r0, #33	; 0x21
 800096c:	f000 fb65 	bl	800103a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8000970:	2021      	movs	r0, #33	; 0x21
 8000972:	f000 fb7e 	bl	8001072 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	210f      	movs	r1, #15
 800097a:	2022      	movs	r0, #34	; 0x22
 800097c:	f000 fb5d 	bl	800103a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8000980:	2022      	movs	r0, #34	; 0x22
 8000982:	f000 fb76 	bl	8001072 <HAL_NVIC_EnableIRQ>
}
 8000986:	bf00      	nop
 8000988:	3728      	adds	r7, #40	; 0x28
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40021000 	.word	0x40021000
 8000994:	48000400 	.word	0x48000400

08000998 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4a12      	ldr	r2, [pc, #72]	; (80009ec <I2Cx_Init+0x54>)
 80009a4:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a11      	ldr	r2, [pc, #68]	; (80009f0 <I2Cx_Init+0x58>)
 80009aa:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2201      	movs	r2, #1
 80009b6:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2200      	movs	r2, #0
 80009bc:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2200      	movs	r2, #0
 80009c2:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f7ff ff89 	bl	80008e8 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f000 fd98 	bl	800150c <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80009dc:	2100      	movs	r1, #0
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f001 fab0 	bl	8001f44 <HAL_I2CEx_ConfigAnalogFilter>
}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40005800 	.word	0x40005800
 80009f0:	00702681 	.word	0x00702681

080009f4 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	; 0x28
 80009f8:	af04      	add	r7, sp, #16
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	4608      	mov	r0, r1
 80009fe:	4611      	mov	r1, r2
 8000a00:	461a      	mov	r2, r3
 8000a02:	4603      	mov	r3, r0
 8000a04:	72fb      	strb	r3, [r7, #11]
 8000a06:	460b      	mov	r3, r1
 8000a08:	813b      	strh	r3, [r7, #8]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000a12:	7afb      	ldrb	r3, [r7, #11]
 8000a14:	b299      	uxth	r1, r3
 8000a16:	88f8      	ldrh	r0, [r7, #6]
 8000a18:	893a      	ldrh	r2, [r7, #8]
 8000a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a1e:	9302      	str	r3, [sp, #8]
 8000a20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a22:	9301      	str	r3, [sp, #4]
 8000a24:	6a3b      	ldr	r3, [r7, #32]
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	4603      	mov	r3, r0
 8000a2a:	68f8      	ldr	r0, [r7, #12]
 8000a2c:	f000 ff54 	bl	80018d8 <HAL_I2C_Mem_Read>
 8000a30:	4603      	mov	r3, r0
 8000a32:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000a34:	7dfb      	ldrb	r3, [r7, #23]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d004      	beq.n	8000a44 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8000a3a:	7afb      	ldrb	r3, [r7, #11]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	68f8      	ldr	r0, [r7, #12]
 8000a40:	f000 f832 	bl	8000aa8 <I2Cx_Error>
  }
  return status;
 8000a44:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3718      	adds	r7, #24
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b08a      	sub	sp, #40	; 0x28
 8000a52:	af04      	add	r7, sp, #16
 8000a54:	60f8      	str	r0, [r7, #12]
 8000a56:	4608      	mov	r0, r1
 8000a58:	4611      	mov	r1, r2
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	72fb      	strb	r3, [r7, #11]
 8000a60:	460b      	mov	r3, r1
 8000a62:	813b      	strh	r3, [r7, #8]
 8000a64:	4613      	mov	r3, r2
 8000a66:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000a6c:	7afb      	ldrb	r3, [r7, #11]
 8000a6e:	b299      	uxth	r1, r3
 8000a70:	88f8      	ldrh	r0, [r7, #6]
 8000a72:	893a      	ldrh	r2, [r7, #8]
 8000a74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a78:	9302      	str	r3, [sp, #8]
 8000a7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a7c:	9301      	str	r3, [sp, #4]
 8000a7e:	6a3b      	ldr	r3, [r7, #32]
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	4603      	mov	r3, r0
 8000a84:	68f8      	ldr	r0, [r7, #12]
 8000a86:	f000 fe13 	bl	80016b0 <HAL_I2C_Mem_Write>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000a8e:	7dfb      	ldrb	r3, [r7, #23]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d004      	beq.n	8000a9e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8000a94:	7afb      	ldrb	r3, [r7, #11]
 8000a96:	4619      	mov	r1, r3
 8000a98:	68f8      	ldr	r0, [r7, #12]
 8000a9a:	f000 f805 	bl	8000aa8 <I2Cx_Error>
  }
  return status;
 8000a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3718      	adds	r7, #24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f000 fdb8 	bl	800162a <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff ff6c 	bl	8000998 <I2Cx_Init>
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8000acc:	4802      	ldr	r0, [pc, #8]	; (8000ad8 <SENSOR_IO_Init+0x10>)
 8000ace:	f7ff ff63 	bl	8000998 <I2Cx_Init>
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	2000095c 	.word	0x2000095c

08000adc <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af02      	add	r7, sp, #8
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
 8000ae6:	460b      	mov	r3, r1
 8000ae8:	71bb      	strb	r3, [r7, #6]
 8000aea:	4613      	mov	r3, r2
 8000aec:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8000aee:	79bb      	ldrb	r3, [r7, #6]
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	79f9      	ldrb	r1, [r7, #7]
 8000af4:	2301      	movs	r3, #1
 8000af6:	9301      	str	r3, [sp, #4]
 8000af8:	1d7b      	adds	r3, r7, #5
 8000afa:	9300      	str	r3, [sp, #0]
 8000afc:	2301      	movs	r3, #1
 8000afe:	4803      	ldr	r0, [pc, #12]	; (8000b0c <SENSOR_IO_Write+0x30>)
 8000b00:	f7ff ffa5 	bl	8000a4e <I2Cx_WriteMultiple>
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	2000095c 	.word	0x2000095c

08000b10 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af02      	add	r7, sp, #8
 8000b16:	4603      	mov	r3, r0
 8000b18:	460a      	mov	r2, r1
 8000b1a:	71fb      	strb	r3, [r7, #7]
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8000b24:	79bb      	ldrb	r3, [r7, #6]
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	79f9      	ldrb	r1, [r7, #7]
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	9301      	str	r3, [sp, #4]
 8000b2e:	f107 030f 	add.w	r3, r7, #15
 8000b32:	9300      	str	r3, [sp, #0]
 8000b34:	2301      	movs	r3, #1
 8000b36:	4804      	ldr	r0, [pc, #16]	; (8000b48 <SENSOR_IO_Read+0x38>)
 8000b38:	f7ff ff5c 	bl	80009f4 <I2Cx_ReadMultiple>

  return read_value;
 8000b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	2000095c 	.word	0x2000095c

08000b4c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af02      	add	r7, sp, #8
 8000b52:	603a      	str	r2, [r7, #0]
 8000b54:	461a      	mov	r2, r3
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	71bb      	strb	r3, [r7, #6]
 8000b5e:	4613      	mov	r3, r2
 8000b60:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8000b62:	79bb      	ldrb	r3, [r7, #6]
 8000b64:	b29a      	uxth	r2, r3
 8000b66:	79f9      	ldrb	r1, [r7, #7]
 8000b68:	88bb      	ldrh	r3, [r7, #4]
 8000b6a:	9301      	str	r3, [sp, #4]
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	9300      	str	r3, [sp, #0]
 8000b70:	2301      	movs	r3, #1
 8000b72:	4804      	ldr	r0, [pc, #16]	; (8000b84 <SENSOR_IO_ReadMultiple+0x38>)
 8000b74:	f7ff ff3e 	bl	80009f4 <I2Cx_ReadMultiple>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	b29b      	uxth	r3, r3
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	2000095c 	.word	0x2000095c

08000b88 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <BSP_TSENSOR_Init+0x30>)
 8000b94:	4a09      	ldr	r2, [pc, #36]	; (8000bbc <BSP_TSENSOR_Init+0x34>)
 8000b96:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8000b98:	f7ff ff96 	bl	8000ac8 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <BSP_TSENSOR_Init+0x30>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	20be      	movs	r0, #190	; 0xbe
 8000ba6:	4798      	blx	r3

  ret = TSENSOR_OK;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8000bac:	79fb      	ldrb	r3, [r7, #7]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200000b0 	.word	0x200000b0
 8000bbc:	20000010 	.word	0x20000010

08000bc0 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <BSP_TSENSOR_ReadTemp+0x18>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	68db      	ldr	r3, [r3, #12]
 8000bca:	20be      	movs	r0, #190	; 0xbe
 8000bcc:	4798      	blx	r3
 8000bce:	eef0 7a40 	vmov.f32	s15, s0
}
 8000bd2:	eeb0 0a67 	vmov.f32	s0, s15
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	200000b0 	.word	0x200000b0

08000bdc <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	6039      	str	r1, [r7, #0]
 8000be6:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8000be8:	88fb      	ldrh	r3, [r7, #6]
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	2120      	movs	r1, #32
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff ff8e 	bl	8000b10 <SENSOR_IO_Read>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8000bf8:	7bfb      	ldrb	r3, [r7, #15]
 8000bfa:	f023 0304 	bic.w	r3, r3, #4
 8000bfe:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
 8000c02:	f043 0304 	orr.w	r3, r3, #4
 8000c06:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8000c08:	7bfb      	ldrb	r3, [r7, #15]
 8000c0a:	f023 0303 	bic.w	r3, r3, #3
 8000c0e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8000c10:	7bfb      	ldrb	r3, [r7, #15]
 8000c12:	f043 0301 	orr.w	r3, r3, #1
 8000c16:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
 8000c1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c1e:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8000c20:	88fb      	ldrh	r3, [r7, #6]
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	7bfa      	ldrb	r2, [r7, #15]
 8000c26:	2120      	movs	r1, #32
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff ff57 	bl	8000adc <SENSOR_IO_Write>
}
 8000c2e:	bf00      	nop
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b088      	sub	sp, #32
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8000c40:	88fb      	ldrh	r3, [r7, #6]
 8000c42:	b2d8      	uxtb	r0, r3
 8000c44:	f107 0208 	add.w	r2, r7, #8
 8000c48:	2302      	movs	r3, #2
 8000c4a:	21b2      	movs	r1, #178	; 0xb2
 8000c4c:	f7ff ff7e 	bl	8000b4c <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8000c50:	88fb      	ldrh	r3, [r7, #6]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	2135      	movs	r1, #53	; 0x35
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff ff5a 	bl	8000b10 <SENSOR_IO_Read>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8000c60:	7ffb      	ldrb	r3, [r7, #31]
 8000c62:	021b      	lsls	r3, r3, #8
 8000c64:	b21b      	sxth	r3, r3
 8000c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000c6a:	b21a      	sxth	r2, r3
 8000c6c:	7a3b      	ldrb	r3, [r7, #8]
 8000c6e:	b21b      	sxth	r3, r3
 8000c70:	4313      	orrs	r3, r2
 8000c72:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8000c74:	7ffb      	ldrb	r3, [r7, #31]
 8000c76:	019b      	lsls	r3, r3, #6
 8000c78:	b21b      	sxth	r3, r3
 8000c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000c7e:	b21a      	sxth	r2, r3
 8000c80:	7a7b      	ldrb	r3, [r7, #9]
 8000c82:	b21b      	sxth	r3, r3
 8000c84:	4313      	orrs	r3, r2
 8000c86:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8000c88:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000c8c:	10db      	asrs	r3, r3, #3
 8000c8e:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8000c90:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000c94:	10db      	asrs	r3, r3, #3
 8000c96:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8000c98:	88fb      	ldrh	r3, [r7, #6]
 8000c9a:	b2d8      	uxtb	r0, r3
 8000c9c:	f107 0208 	add.w	r2, r7, #8
 8000ca0:	2304      	movs	r3, #4
 8000ca2:	21bc      	movs	r1, #188	; 0xbc
 8000ca4:	f7ff ff52 	bl	8000b4c <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000ca8:	7a7b      	ldrb	r3, [r7, #9]
 8000caa:	021b      	lsls	r3, r3, #8
 8000cac:	b21a      	sxth	r2, r3
 8000cae:	7a3b      	ldrb	r3, [r7, #8]
 8000cb0:	b21b      	sxth	r3, r3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8000cb6:	7afb      	ldrb	r3, [r7, #11]
 8000cb8:	021b      	lsls	r3, r3, #8
 8000cba:	b21a      	sxth	r2, r3
 8000cbc:	7abb      	ldrb	r3, [r7, #10]
 8000cbe:	b21b      	sxth	r3, r3
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8000cc4:	88fb      	ldrh	r3, [r7, #6]
 8000cc6:	b2d8      	uxtb	r0, r3
 8000cc8:	f107 0208 	add.w	r2, r7, #8
 8000ccc:	2302      	movs	r3, #2
 8000cce:	21aa      	movs	r1, #170	; 0xaa
 8000cd0:	f7ff ff3c 	bl	8000b4c <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000cd4:	7a7b      	ldrb	r3, [r7, #9]
 8000cd6:	021b      	lsls	r3, r3, #8
 8000cd8:	b21a      	sxth	r2, r3
 8000cda:	7a3b      	ldrb	r3, [r7, #8]
 8000cdc:	b21b      	sxth	r3, r3
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8000ce2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000ce6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000cea:	1ad3      	subs	r3, r2, r3
 8000cec:	ee07 3a90 	vmov	s15, r3
 8000cf0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cf4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000cf8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	ee07 3a90 	vmov	s15, r3
 8000d02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d06:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000d0a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000d0e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	ee07 3a90 	vmov	s15, r3
 8000d18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000d20:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000d24:	ee07 3a90 	vmov	s15, r3
 8000d28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d30:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	ee07 3a90 	vmov	s15, r3
}
 8000d3a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d3e:	3720      	adds	r7, #32
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d4e:	2003      	movs	r0, #3
 8000d50:	f000 f968 	bl	8001024 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d54:	2000      	movs	r0, #0
 8000d56:	f000 f815 	bl	8000d84 <HAL_InitTick>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d002      	beq.n	8000d66 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d60:	2301      	movs	r3, #1
 8000d62:	71fb      	strb	r3, [r7, #7]
 8000d64:	e001      	b.n	8000d6a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d66:	f000 f805 	bl	8000d74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
	...

08000d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d90:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <HAL_InitTick+0x6c>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d023      	beq.n	8000de0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d98:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <HAL_InitTick+0x70>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <HAL_InitTick+0x6c>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	4619      	mov	r1, r3
 8000da2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 f96d 	bl	800108e <HAL_SYSTICK_Config>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d10f      	bne.n	8000dda <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2b0f      	cmp	r3, #15
 8000dbe:	d809      	bhi.n	8000dd4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc8:	f000 f937 	bl	800103a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dcc:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <HAL_InitTick+0x74>)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6013      	str	r3, [r2, #0]
 8000dd2:	e007      	b.n	8000de4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	73fb      	strb	r3, [r7, #15]
 8000dd8:	e004      	b.n	8000de4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	73fb      	strb	r3, [r7, #15]
 8000dde:	e001      	b.n	8000de4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000024 	.word	0x20000024
 8000df4:	20000028 	.word	0x20000028
 8000df8:	20000020 	.word	0x20000020

08000dfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_IncTick+0x20>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_IncTick+0x24>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <HAL_IncTick+0x24>)
 8000e0e:	6013      	str	r3, [r2, #0]
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000024 	.word	0x20000024
 8000e20:	200009a8 	.word	0x200009a8

08000e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return uwTick;
 8000e28:	4b03      	ldr	r3, [pc, #12]	; (8000e38 <HAL_GetTick+0x14>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	200009a8 	.word	0x200009a8

08000e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e44:	f7ff ffee 	bl	8000e24 <HAL_GetTick>
 8000e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e54:	d005      	beq.n	8000e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <HAL_Delay+0x44>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4413      	add	r3, r2
 8000e60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e62:	bf00      	nop
 8000e64:	f7ff ffde 	bl	8000e24 <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d8f7      	bhi.n	8000e64 <HAL_Delay+0x28>
  {
  }
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000024 	.word	0x20000024

08000e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eb6:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	60d3      	str	r3, [r2, #12]
}
 8000ebc:	bf00      	nop
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed0:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	0a1b      	lsrs	r3, r3, #8
 8000ed6:	f003 0307 	and.w	r3, r3, #7
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	db0b      	blt.n	8000f12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	f003 021f 	and.w	r2, r3, #31
 8000f00:	4907      	ldr	r1, [pc, #28]	; (8000f20 <__NVIC_EnableIRQ+0x38>)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	095b      	lsrs	r3, r3, #5
 8000f08:	2001      	movs	r0, #1
 8000f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000e100 	.word	0xe000e100

08000f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	db0a      	blt.n	8000f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	490c      	ldr	r1, [pc, #48]	; (8000f70 <__NVIC_SetPriority+0x4c>)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	0112      	lsls	r2, r2, #4
 8000f44:	b2d2      	uxtb	r2, r2
 8000f46:	440b      	add	r3, r1
 8000f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f4c:	e00a      	b.n	8000f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4908      	ldr	r1, [pc, #32]	; (8000f74 <__NVIC_SetPriority+0x50>)
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	f003 030f 	and.w	r3, r3, #15
 8000f5a:	3b04      	subs	r3, #4
 8000f5c:	0112      	lsls	r2, r2, #4
 8000f5e:	b2d2      	uxtb	r2, r2
 8000f60:	440b      	add	r3, r1
 8000f62:	761a      	strb	r2, [r3, #24]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000e100 	.word	0xe000e100
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b089      	sub	sp, #36	; 0x24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f1c3 0307 	rsb	r3, r3, #7
 8000f92:	2b04      	cmp	r3, #4
 8000f94:	bf28      	it	cs
 8000f96:	2304      	movcs	r3, #4
 8000f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	2b06      	cmp	r3, #6
 8000fa0:	d902      	bls.n	8000fa8 <NVIC_EncodePriority+0x30>
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3b03      	subs	r3, #3
 8000fa6:	e000      	b.n	8000faa <NVIC_EncodePriority+0x32>
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fac:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	401a      	ands	r2, r3
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fca:	43d9      	mvns	r1, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	4313      	orrs	r3, r2
         );
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3724      	adds	r7, #36	; 0x24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
	...

08000fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ff0:	d301      	bcc.n	8000ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e00f      	b.n	8001016 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ff6:	4a0a      	ldr	r2, [pc, #40]	; (8001020 <SysTick_Config+0x40>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ffe:	210f      	movs	r1, #15
 8001000:	f04f 30ff 	mov.w	r0, #4294967295
 8001004:	f7ff ff8e 	bl	8000f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <SysTick_Config+0x40>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800100e:	4b04      	ldr	r3, [pc, #16]	; (8001020 <SysTick_Config+0x40>)
 8001010:	2207      	movs	r2, #7
 8001012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	e000e010 	.word	0xe000e010

08001024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff ff29 	bl	8000e84 <__NVIC_SetPriorityGrouping>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b086      	sub	sp, #24
 800103e:	af00      	add	r7, sp, #0
 8001040:	4603      	mov	r3, r0
 8001042:	60b9      	str	r1, [r7, #8]
 8001044:	607a      	str	r2, [r7, #4]
 8001046:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800104c:	f7ff ff3e 	bl	8000ecc <__NVIC_GetPriorityGrouping>
 8001050:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	68b9      	ldr	r1, [r7, #8]
 8001056:	6978      	ldr	r0, [r7, #20]
 8001058:	f7ff ff8e 	bl	8000f78 <NVIC_EncodePriority>
 800105c:	4602      	mov	r2, r0
 800105e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001062:	4611      	mov	r1, r2
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff5d 	bl	8000f24 <__NVIC_SetPriority>
}
 800106a:	bf00      	nop
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	4603      	mov	r3, r0
 800107a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800107c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff31 	bl	8000ee8 <__NVIC_EnableIRQ>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff ffa2 	bl	8000fe0 <SysTick_Config>
 800109c:	4603      	mov	r3, r0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b084      	sub	sp, #16
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010ae:	2300      	movs	r3, #0
 80010b0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d005      	beq.n	80010ca <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2204      	movs	r2, #4
 80010c2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	73fb      	strb	r3, [r7, #15]
 80010c8:	e029      	b.n	800111e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f022 020e 	bic.w	r2, r2, #14
 80010d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f022 0201 	bic.w	r2, r2, #1
 80010e8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	f003 021c 	and.w	r2, r3, #28
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	2101      	movs	r1, #1
 80010f8:	fa01 f202 	lsl.w	r2, r1, r2
 80010fc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2201      	movs	r2, #1
 8001102:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	4798      	blx	r3
    }
  }
  return status;
 800111e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001128:	b480      	push	{r7}
 800112a:	b087      	sub	sp, #28
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001136:	e17f      	b.n	8001438 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	2101      	movs	r1, #1
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	fa01 f303 	lsl.w	r3, r1, r3
 8001144:	4013      	ands	r3, r2
 8001146:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 8171 	beq.w	8001432 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d00b      	beq.n	8001170 <HAL_GPIO_Init+0x48>
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2b02      	cmp	r3, #2
 800115e:	d007      	beq.n	8001170 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001164:	2b11      	cmp	r3, #17
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	2b12      	cmp	r3, #18
 800116e:	d130      	bne.n	80011d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	2203      	movs	r2, #3
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	68da      	ldr	r2, [r3, #12]
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	4313      	orrs	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011a6:	2201      	movs	r2, #1
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	4013      	ands	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	091b      	lsrs	r3, r3, #4
 80011bc:	f003 0201 	and.w	r2, r3, #1
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 0303 	and.w	r3, r3, #3
 80011da:	2b03      	cmp	r3, #3
 80011dc:	d118      	bne.n	8001210 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80011e4:	2201      	movs	r2, #1
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4013      	ands	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	08db      	lsrs	r3, r3, #3
 80011fa:	f003 0201 	and.w	r2, r3, #1
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4313      	orrs	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	2203      	movs	r2, #3
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4313      	orrs	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2b02      	cmp	r3, #2
 8001246:	d003      	beq.n	8001250 <HAL_GPIO_Init+0x128>
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	2b12      	cmp	r3, #18
 800124e:	d123      	bne.n	8001298 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	08da      	lsrs	r2, r3, #3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3208      	adds	r2, #8
 8001258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	f003 0307 	and.w	r3, r3, #7
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	220f      	movs	r2, #15
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	691a      	ldr	r2, [r3, #16]
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	4313      	orrs	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	08da      	lsrs	r2, r3, #3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	3208      	adds	r2, #8
 8001292:	6939      	ldr	r1, [r7, #16]
 8001294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	2203      	movs	r2, #3
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4013      	ands	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 0203 	and.w	r2, r3, #3
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	f000 80ac 	beq.w	8001432 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012da:	4b5f      	ldr	r3, [pc, #380]	; (8001458 <HAL_GPIO_Init+0x330>)
 80012dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012de:	4a5e      	ldr	r2, [pc, #376]	; (8001458 <HAL_GPIO_Init+0x330>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6613      	str	r3, [r2, #96]	; 0x60
 80012e6:	4b5c      	ldr	r3, [pc, #368]	; (8001458 <HAL_GPIO_Init+0x330>)
 80012e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012f2:	4a5a      	ldr	r2, [pc, #360]	; (800145c <HAL_GPIO_Init+0x334>)
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	089b      	lsrs	r3, r3, #2
 80012f8:	3302      	adds	r3, #2
 80012fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	f003 0303 	and.w	r3, r3, #3
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	220f      	movs	r2, #15
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4013      	ands	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800131c:	d025      	beq.n	800136a <HAL_GPIO_Init+0x242>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a4f      	ldr	r2, [pc, #316]	; (8001460 <HAL_GPIO_Init+0x338>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d01f      	beq.n	8001366 <HAL_GPIO_Init+0x23e>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a4e      	ldr	r2, [pc, #312]	; (8001464 <HAL_GPIO_Init+0x33c>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d019      	beq.n	8001362 <HAL_GPIO_Init+0x23a>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a4d      	ldr	r2, [pc, #308]	; (8001468 <HAL_GPIO_Init+0x340>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d013      	beq.n	800135e <HAL_GPIO_Init+0x236>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a4c      	ldr	r2, [pc, #304]	; (800146c <HAL_GPIO_Init+0x344>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d00d      	beq.n	800135a <HAL_GPIO_Init+0x232>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a4b      	ldr	r2, [pc, #300]	; (8001470 <HAL_GPIO_Init+0x348>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d007      	beq.n	8001356 <HAL_GPIO_Init+0x22e>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a4a      	ldr	r2, [pc, #296]	; (8001474 <HAL_GPIO_Init+0x34c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d101      	bne.n	8001352 <HAL_GPIO_Init+0x22a>
 800134e:	2306      	movs	r3, #6
 8001350:	e00c      	b.n	800136c <HAL_GPIO_Init+0x244>
 8001352:	2307      	movs	r3, #7
 8001354:	e00a      	b.n	800136c <HAL_GPIO_Init+0x244>
 8001356:	2305      	movs	r3, #5
 8001358:	e008      	b.n	800136c <HAL_GPIO_Init+0x244>
 800135a:	2304      	movs	r3, #4
 800135c:	e006      	b.n	800136c <HAL_GPIO_Init+0x244>
 800135e:	2303      	movs	r3, #3
 8001360:	e004      	b.n	800136c <HAL_GPIO_Init+0x244>
 8001362:	2302      	movs	r3, #2
 8001364:	e002      	b.n	800136c <HAL_GPIO_Init+0x244>
 8001366:	2301      	movs	r3, #1
 8001368:	e000      	b.n	800136c <HAL_GPIO_Init+0x244>
 800136a:	2300      	movs	r3, #0
 800136c:	697a      	ldr	r2, [r7, #20]
 800136e:	f002 0203 	and.w	r2, r2, #3
 8001372:	0092      	lsls	r2, r2, #2
 8001374:	4093      	lsls	r3, r2
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800137c:	4937      	ldr	r1, [pc, #220]	; (800145c <HAL_GPIO_Init+0x334>)
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	089b      	lsrs	r3, r3, #2
 8001382:	3302      	adds	r3, #2
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800138a:	4b3b      	ldr	r3, [pc, #236]	; (8001478 <HAL_GPIO_Init+0x350>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	43db      	mvns	r3, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013ae:	4a32      	ldr	r2, [pc, #200]	; (8001478 <HAL_GPIO_Init+0x350>)
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80013b4:	4b30      	ldr	r3, [pc, #192]	; (8001478 <HAL_GPIO_Init+0x350>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	43db      	mvns	r3, r3
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	4013      	ands	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d003      	beq.n	80013d8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013d8:	4a27      	ldr	r2, [pc, #156]	; (8001478 <HAL_GPIO_Init+0x350>)
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013de:	4b26      	ldr	r3, [pc, #152]	; (8001478 <HAL_GPIO_Init+0x350>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	43db      	mvns	r3, r3
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	4313      	orrs	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001402:	4a1d      	ldr	r2, [pc, #116]	; (8001478 <HAL_GPIO_Init+0x350>)
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001408:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <HAL_GPIO_Init+0x350>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	43db      	mvns	r3, r3
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4013      	ands	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	4313      	orrs	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800142c:	4a12      	ldr	r2, [pc, #72]	; (8001478 <HAL_GPIO_Init+0x350>)
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	3301      	adds	r3, #1
 8001436:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	fa22 f303 	lsr.w	r3, r2, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	f47f ae78 	bne.w	8001138 <HAL_GPIO_Init+0x10>
  }
}
 8001448:	bf00      	nop
 800144a:	bf00      	nop
 800144c:	371c      	adds	r7, #28
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40021000 	.word	0x40021000
 800145c:	40010000 	.word	0x40010000
 8001460:	48000400 	.word	0x48000400
 8001464:	48000800 	.word	0x48000800
 8001468:	48000c00 	.word	0x48000c00
 800146c:	48001000 	.word	0x48001000
 8001470:	48001400 	.word	0x48001400
 8001474:	48001800 	.word	0x48001800
 8001478:	40010400 	.word	0x40010400

0800147c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	691a      	ldr	r2, [r3, #16]
 800148c:	887b      	ldrh	r3, [r7, #2]
 800148e:	4013      	ands	r3, r2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001494:	2301      	movs	r3, #1
 8001496:	73fb      	strb	r3, [r7, #15]
 8001498:	e001      	b.n	800149e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800149a:	2300      	movs	r3, #0
 800149c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800149e:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	807b      	strh	r3, [r7, #2]
 80014b8:	4613      	mov	r3, r2
 80014ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014bc:	787b      	ldrb	r3, [r7, #1]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014c2:	887a      	ldrh	r2, [r7, #2]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014c8:	e002      	b.n	80014d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014ca:	887a      	ldrh	r2, [r7, #2]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014e8:	695a      	ldr	r2, [r3, #20]
 80014ea:	88fb      	ldrh	r3, [r7, #6]
 80014ec:	4013      	ands	r3, r2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d006      	beq.n	8001500 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014f2:	4a05      	ldr	r2, [pc, #20]	; (8001508 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014f8:	88fb      	ldrh	r3, [r7, #6]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f005 fdb2 	bl	8007064 <HAL_GPIO_EXTI_Callback>
  }
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40010400 	.word	0x40010400

0800150c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e081      	b.n	8001622 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	d106      	bne.n	8001538 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f000 f8a8 	bl	8001688 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2224      	movs	r2, #36	; 0x24
 800153c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 0201 	bic.w	r2, r2, #1
 800154e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800155c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800156c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d107      	bne.n	8001586 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	e006      	b.n	8001594 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001592:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	2b02      	cmp	r3, #2
 800159a:	d104      	bne.n	80015a6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	6812      	ldr	r2, [r2, #0]
 80015b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68da      	ldr	r2, [r3, #12]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691a      	ldr	r2, [r3, #16]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	ea42 0103 	orr.w	r1, r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	021a      	lsls	r2, r3, #8
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	69d9      	ldr	r1, [r3, #28]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a1a      	ldr	r2, [r3, #32]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	430a      	orrs	r2, r1
 80015f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f042 0201 	orr.w	r2, r2, #1
 8001602:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2220      	movs	r2, #32
 800160e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d101      	bne.n	800163c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e021      	b.n	8001680 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2224      	movs	r2, #36	; 0x24
 8001640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 0201 	bic.w	r2, r2, #1
 8001652:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f000 f821 	bl	800169c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af02      	add	r7, sp, #8
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	4608      	mov	r0, r1
 80016ba:	4611      	mov	r1, r2
 80016bc:	461a      	mov	r2, r3
 80016be:	4603      	mov	r3, r0
 80016c0:	817b      	strh	r3, [r7, #10]
 80016c2:	460b      	mov	r3, r1
 80016c4:	813b      	strh	r3, [r7, #8]
 80016c6:	4613      	mov	r3, r2
 80016c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b20      	cmp	r3, #32
 80016d4:	f040 80f9 	bne.w	80018ca <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80016d8:	6a3b      	ldr	r3, [r7, #32]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d002      	beq.n	80016e4 <HAL_I2C_Mem_Write+0x34>
 80016de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d105      	bne.n	80016f0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e0ed      	b.n	80018cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d101      	bne.n	80016fe <HAL_I2C_Mem_Write+0x4e>
 80016fa:	2302      	movs	r3, #2
 80016fc:	e0e6      	b.n	80018cc <HAL_I2C_Mem_Write+0x21c>
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2201      	movs	r2, #1
 8001702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001706:	f7ff fb8d 	bl	8000e24 <HAL_GetTick>
 800170a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	2319      	movs	r3, #25
 8001712:	2201      	movs	r2, #1
 8001714:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f000 fac3 	bl	8001ca4 <I2C_WaitOnFlagUntilTimeout>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e0d1      	b.n	80018cc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2221      	movs	r2, #33	; 0x21
 800172c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2240      	movs	r2, #64	; 0x40
 8001734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2200      	movs	r2, #0
 800173c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6a3a      	ldr	r2, [r7, #32]
 8001742:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001748:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2200      	movs	r2, #0
 800174e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001750:	88f8      	ldrh	r0, [r7, #6]
 8001752:	893a      	ldrh	r2, [r7, #8]
 8001754:	8979      	ldrh	r1, [r7, #10]
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	9301      	str	r3, [sp, #4]
 800175a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	4603      	mov	r3, r0
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f000 f9d3 	bl	8001b0c <I2C_RequestMemoryWrite>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d005      	beq.n	8001778 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e0a9      	b.n	80018cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800177c:	b29b      	uxth	r3, r3
 800177e:	2bff      	cmp	r3, #255	; 0xff
 8001780:	d90e      	bls.n	80017a0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	22ff      	movs	r2, #255	; 0xff
 8001786:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800178c:	b2da      	uxtb	r2, r3
 800178e:	8979      	ldrh	r1, [r7, #10]
 8001790:	2300      	movs	r3, #0
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001798:	68f8      	ldr	r0, [r7, #12]
 800179a:	f000 fba5 	bl	8001ee8 <I2C_TransferConfig>
 800179e:	e00f      	b.n	80017c0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	8979      	ldrh	r1, [r7, #10]
 80017b2:	2300      	movs	r3, #0
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f000 fb94 	bl	8001ee8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	f000 faad 	bl	8001d24 <I2C_WaitOnTXISFlagUntilTimeout>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e07b      	b.n	80018cc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d8:	781a      	ldrb	r2, [r3, #0]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e4:	1c5a      	adds	r2, r3, #1
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	3b01      	subs	r3, #1
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017fc:	3b01      	subs	r3, #1
 80017fe:	b29a      	uxth	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001808:	b29b      	uxth	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d034      	beq.n	8001878 <HAL_I2C_Mem_Write+0x1c8>
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001812:	2b00      	cmp	r3, #0
 8001814:	d130      	bne.n	8001878 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800181c:	2200      	movs	r2, #0
 800181e:	2180      	movs	r1, #128	; 0x80
 8001820:	68f8      	ldr	r0, [r7, #12]
 8001822:	f000 fa3f 	bl	8001ca4 <I2C_WaitOnFlagUntilTimeout>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e04d      	b.n	80018cc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001834:	b29b      	uxth	r3, r3
 8001836:	2bff      	cmp	r3, #255	; 0xff
 8001838:	d90e      	bls.n	8001858 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	22ff      	movs	r2, #255	; 0xff
 800183e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001844:	b2da      	uxtb	r2, r3
 8001846:	8979      	ldrh	r1, [r7, #10]
 8001848:	2300      	movs	r3, #0
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001850:	68f8      	ldr	r0, [r7, #12]
 8001852:	f000 fb49 	bl	8001ee8 <I2C_TransferConfig>
 8001856:	e00f      	b.n	8001878 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800185c:	b29a      	uxth	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001866:	b2da      	uxtb	r2, r3
 8001868:	8979      	ldrh	r1, [r7, #10]
 800186a:	2300      	movs	r3, #0
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f000 fb38 	bl	8001ee8 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800187c:	b29b      	uxth	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d19e      	bne.n	80017c0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f000 fa8c 	bl	8001da4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e01a      	b.n	80018cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2220      	movs	r2, #32
 800189c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6859      	ldr	r1, [r3, #4]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <HAL_I2C_Mem_Write+0x224>)
 80018aa:	400b      	ands	r3, r1
 80018ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2220      	movs	r2, #32
 80018b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018c6:	2300      	movs	r3, #0
 80018c8:	e000      	b.n	80018cc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80018ca:	2302      	movs	r3, #2
  }
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	fe00e800 	.word	0xfe00e800

080018d8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af02      	add	r7, sp, #8
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	4608      	mov	r0, r1
 80018e2:	4611      	mov	r1, r2
 80018e4:	461a      	mov	r2, r3
 80018e6:	4603      	mov	r3, r0
 80018e8:	817b      	strh	r3, [r7, #10]
 80018ea:	460b      	mov	r3, r1
 80018ec:	813b      	strh	r3, [r7, #8]
 80018ee:	4613      	mov	r3, r2
 80018f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b20      	cmp	r3, #32
 80018fc:	f040 80fd 	bne.w	8001afa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001900:	6a3b      	ldr	r3, [r7, #32]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d002      	beq.n	800190c <HAL_I2C_Mem_Read+0x34>
 8001906:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001908:	2b00      	cmp	r3, #0
 800190a:	d105      	bne.n	8001918 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001912:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e0f1      	b.n	8001afc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800191e:	2b01      	cmp	r3, #1
 8001920:	d101      	bne.n	8001926 <HAL_I2C_Mem_Read+0x4e>
 8001922:	2302      	movs	r3, #2
 8001924:	e0ea      	b.n	8001afc <HAL_I2C_Mem_Read+0x224>
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2201      	movs	r2, #1
 800192a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800192e:	f7ff fa79 	bl	8000e24 <HAL_GetTick>
 8001932:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	2319      	movs	r3, #25
 800193a:	2201      	movs	r2, #1
 800193c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f000 f9af 	bl	8001ca4 <I2C_WaitOnFlagUntilTimeout>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e0d5      	b.n	8001afc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2222      	movs	r2, #34	; 0x22
 8001954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2240      	movs	r2, #64	; 0x40
 800195c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2200      	movs	r2, #0
 8001964:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6a3a      	ldr	r2, [r7, #32]
 800196a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001970:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001978:	88f8      	ldrh	r0, [r7, #6]
 800197a:	893a      	ldrh	r2, [r7, #8]
 800197c:	8979      	ldrh	r1, [r7, #10]
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	9301      	str	r3, [sp, #4]
 8001982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	4603      	mov	r3, r0
 8001988:	68f8      	ldr	r0, [r7, #12]
 800198a:	f000 f913 	bl	8001bb4 <I2C_RequestMemoryRead>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d005      	beq.n	80019a0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e0ad      	b.n	8001afc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	2bff      	cmp	r3, #255	; 0xff
 80019a8:	d90e      	bls.n	80019c8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	22ff      	movs	r2, #255	; 0xff
 80019ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	8979      	ldrh	r1, [r7, #10]
 80019b8:	4b52      	ldr	r3, [pc, #328]	; (8001b04 <HAL_I2C_Mem_Read+0x22c>)
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	f000 fa91 	bl	8001ee8 <I2C_TransferConfig>
 80019c6:	e00f      	b.n	80019e8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	8979      	ldrh	r1, [r7, #10]
 80019da:	4b4a      	ldr	r3, [pc, #296]	; (8001b04 <HAL_I2C_Mem_Read+0x22c>)
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	f000 fa80 	bl	8001ee8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ee:	2200      	movs	r2, #0
 80019f0:	2104      	movs	r1, #4
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f000 f956 	bl	8001ca4 <I2C_WaitOnFlagUntilTimeout>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e07c      	b.n	8001afc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a14:	1c5a      	adds	r2, r3, #1
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d034      	beq.n	8001aa8 <HAL_I2C_Mem_Read+0x1d0>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d130      	bne.n	8001aa8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2180      	movs	r1, #128	; 0x80
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	f000 f927 	bl	8001ca4 <I2C_WaitOnFlagUntilTimeout>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e04d      	b.n	8001afc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	2bff      	cmp	r3, #255	; 0xff
 8001a68:	d90e      	bls.n	8001a88 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	22ff      	movs	r2, #255	; 0xff
 8001a6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	8979      	ldrh	r1, [r7, #10]
 8001a78:	2300      	movs	r3, #0
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f000 fa31 	bl	8001ee8 <I2C_TransferConfig>
 8001a86:	e00f      	b.n	8001aa8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	8979      	ldrh	r1, [r7, #10]
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f000 fa20 	bl	8001ee8 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d19a      	bne.n	80019e8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f000 f974 	bl	8001da4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e01a      	b.n	8001afc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2220      	movs	r2, #32
 8001acc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6859      	ldr	r1, [r3, #4]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <HAL_I2C_Mem_Read+0x230>)
 8001ada:	400b      	ands	r3, r1
 8001adc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2220      	movs	r2, #32
 8001ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	e000      	b.n	8001afc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001afa:	2302      	movs	r3, #2
  }
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	80002400 	.word	0x80002400
 8001b08:	fe00e800 	.word	0xfe00e800

08001b0c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af02      	add	r7, sp, #8
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	4608      	mov	r0, r1
 8001b16:	4611      	mov	r1, r2
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	817b      	strh	r3, [r7, #10]
 8001b1e:	460b      	mov	r3, r1
 8001b20:	813b      	strh	r3, [r7, #8]
 8001b22:	4613      	mov	r3, r2
 8001b24:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001b26:	88fb      	ldrh	r3, [r7, #6]
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	8979      	ldrh	r1, [r7, #10]
 8001b2c:	4b20      	ldr	r3, [pc, #128]	; (8001bb0 <I2C_RequestMemoryWrite+0xa4>)
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f000 f9d7 	bl	8001ee8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b3a:	69fa      	ldr	r2, [r7, #28]
 8001b3c:	69b9      	ldr	r1, [r7, #24]
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f000 f8f0 	bl	8001d24 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e02c      	b.n	8001ba8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b4e:	88fb      	ldrh	r3, [r7, #6]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d105      	bne.n	8001b60 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b54:	893b      	ldrh	r3, [r7, #8]
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	629a      	str	r2, [r3, #40]	; 0x28
 8001b5e:	e015      	b.n	8001b8c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001b60:	893b      	ldrh	r3, [r7, #8]
 8001b62:	0a1b      	lsrs	r3, r3, #8
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b6e:	69fa      	ldr	r2, [r7, #28]
 8001b70:	69b9      	ldr	r1, [r7, #24]
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f000 f8d6 	bl	8001d24 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e012      	b.n	8001ba8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b82:	893b      	ldrh	r3, [r7, #8]
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	2200      	movs	r2, #0
 8001b94:	2180      	movs	r1, #128	; 0x80
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f000 f884 	bl	8001ca4 <I2C_WaitOnFlagUntilTimeout>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e000      	b.n	8001ba8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	80002000 	.word	0x80002000

08001bb4 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af02      	add	r7, sp, #8
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	4608      	mov	r0, r1
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	817b      	strh	r3, [r7, #10]
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	813b      	strh	r3, [r7, #8]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001bce:	88fb      	ldrh	r3, [r7, #6]
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	8979      	ldrh	r1, [r7, #10]
 8001bd4:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <I2C_RequestMemoryRead+0xa4>)
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	2300      	movs	r3, #0
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f000 f984 	bl	8001ee8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001be0:	69fa      	ldr	r2, [r7, #28]
 8001be2:	69b9      	ldr	r1, [r7, #24]
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f000 f89d 	bl	8001d24 <I2C_WaitOnTXISFlagUntilTimeout>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e02c      	b.n	8001c4e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001bf4:	88fb      	ldrh	r3, [r7, #6]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d105      	bne.n	8001c06 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001bfa:	893b      	ldrh	r3, [r7, #8]
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	629a      	str	r2, [r3, #40]	; 0x28
 8001c04:	e015      	b.n	8001c32 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c06:	893b      	ldrh	r3, [r7, #8]
 8001c08:	0a1b      	lsrs	r3, r3, #8
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c14:	69fa      	ldr	r2, [r7, #28]
 8001c16:	69b9      	ldr	r1, [r7, #24]
 8001c18:	68f8      	ldr	r0, [r7, #12]
 8001c1a:	f000 f883 	bl	8001d24 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e012      	b.n	8001c4e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c28:	893b      	ldrh	r3, [r7, #8]
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2140      	movs	r1, #64	; 0x40
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	f000 f831 	bl	8001ca4 <I2C_WaitOnFlagUntilTimeout>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e000      	b.n	8001c4e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	80002000 	.word	0x80002000

08001c5c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d103      	bne.n	8001c7a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2200      	movs	r2, #0
 8001c78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d007      	beq.n	8001c98 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	699a      	ldr	r2, [r3, #24]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 0201 	orr.w	r2, r2, #1
 8001c96:	619a      	str	r2, [r3, #24]
  }
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cb4:	e022      	b.n	8001cfc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cbc:	d01e      	beq.n	8001cfc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cbe:	f7ff f8b1 	bl	8000e24 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d302      	bcc.n	8001cd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d113      	bne.n	8001cfc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd8:	f043 0220 	orr.w	r2, r3, #32
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e00f      	b.n	8001d1c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	699a      	ldr	r2, [r3, #24]
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	4013      	ands	r3, r2
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	bf0c      	ite	eq
 8001d0c:	2301      	moveq	r3, #1
 8001d0e:	2300      	movne	r3, #0
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	461a      	mov	r2, r3
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d0cd      	beq.n	8001cb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d30:	e02c      	b.n	8001d8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	68b9      	ldr	r1, [r7, #8]
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f000 f870 	bl	8001e1c <I2C_IsAcknowledgeFailed>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e02a      	b.n	8001d9c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d4c:	d01e      	beq.n	8001d8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d4e:	f7ff f869 	bl	8000e24 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d302      	bcc.n	8001d64 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d113      	bne.n	8001d8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d68:	f043 0220 	orr.w	r2, r3, #32
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2220      	movs	r2, #32
 8001d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e007      	b.n	8001d9c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d1cb      	bne.n	8001d32 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001db0:	e028      	b.n	8001e04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	68b9      	ldr	r1, [r7, #8]
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	f000 f830 	bl	8001e1c <I2C_IsAcknowledgeFailed>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e026      	b.n	8001e14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dc6:	f7ff f82d 	bl	8000e24 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	68ba      	ldr	r2, [r7, #8]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d302      	bcc.n	8001ddc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d113      	bne.n	8001e04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de0:	f043 0220 	orr.w	r2, r3, #32
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2220      	movs	r2, #32
 8001dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e007      	b.n	8001e14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	f003 0320 	and.w	r3, r3, #32
 8001e0e:	2b20      	cmp	r3, #32
 8001e10:	d1cf      	bne.n	8001db2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	f003 0310 	and.w	r3, r3, #16
 8001e32:	2b10      	cmp	r3, #16
 8001e34:	d151      	bne.n	8001eda <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e36:	e022      	b.n	8001e7e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e3e:	d01e      	beq.n	8001e7e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e40:	f7fe fff0 	bl	8000e24 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d302      	bcc.n	8001e56 <I2C_IsAcknowledgeFailed+0x3a>
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d113      	bne.n	8001e7e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	f043 0220 	orr.w	r2, r3, #32
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2220      	movs	r2, #32
 8001e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e02e      	b.n	8001edc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	f003 0320 	and.w	r3, r3, #32
 8001e88:	2b20      	cmp	r3, #32
 8001e8a:	d1d5      	bne.n	8001e38 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2210      	movs	r2, #16
 8001e92:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2220      	movs	r2, #32
 8001e9a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e9c:	68f8      	ldr	r0, [r7, #12]
 8001e9e:	f7ff fedd 	bl	8001c5c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6859      	ldr	r1, [r3, #4]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <I2C_IsAcknowledgeFailed+0xc8>)
 8001eae:	400b      	ands	r3, r1
 8001eb0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	f043 0204 	orr.w	r2, r3, #4
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2220      	movs	r2, #32
 8001ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e000      	b.n	8001edc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	fe00e800 	.word	0xfe00e800

08001ee8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	607b      	str	r3, [r7, #4]
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	817b      	strh	r3, [r7, #10]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	0d5b      	lsrs	r3, r3, #21
 8001f04:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001f08:	4b0d      	ldr	r3, [pc, #52]	; (8001f40 <I2C_TransferConfig+0x58>)
 8001f0a:	430b      	orrs	r3, r1
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	ea02 0103 	and.w	r1, r2, r3
 8001f12:	897b      	ldrh	r3, [r7, #10]
 8001f14:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f18:	7a7b      	ldrb	r3, [r7, #9]
 8001f1a:	041b      	lsls	r3, r3, #16
 8001f1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001f20:	431a      	orrs	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	431a      	orrs	r2, r3
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	431a      	orrs	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001f32:	bf00      	nop
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	03ff63ff 	.word	0x03ff63ff

08001f44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b20      	cmp	r3, #32
 8001f58:	d138      	bne.n	8001fcc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d101      	bne.n	8001f68 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f64:	2302      	movs	r3, #2
 8001f66:	e032      	b.n	8001fce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2224      	movs	r2, #36	; 0x24
 8001f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0201 	bic.w	r2, r2, #1
 8001f86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f96:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6819      	ldr	r1, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f042 0201 	orr.w	r2, r2, #1
 8001fb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2220      	movs	r2, #32
 8001fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	e000      	b.n	8001fce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fcc:	2302      	movs	r3, #2
  }
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
	...

08001fdc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001fe0:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40007000 	.word	0x40007000

08001ff8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e3d4      	b.n	80027b4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800200a:	4ba1      	ldr	r3, [pc, #644]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 030c 	and.w	r3, r3, #12
 8002012:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002014:	4b9e      	ldr	r3, [pc, #632]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	f003 0303 	and.w	r3, r3, #3
 800201c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0310 	and.w	r3, r3, #16
 8002026:	2b00      	cmp	r3, #0
 8002028:	f000 80e4 	beq.w	80021f4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d007      	beq.n	8002042 <HAL_RCC_OscConfig+0x4a>
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	2b0c      	cmp	r3, #12
 8002036:	f040 808b 	bne.w	8002150 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	2b01      	cmp	r3, #1
 800203e:	f040 8087 	bne.w	8002150 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002042:	4b93      	ldr	r3, [pc, #588]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d005      	beq.n	800205a <HAL_RCC_OscConfig+0x62>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e3ac      	b.n	80027b4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a1a      	ldr	r2, [r3, #32]
 800205e:	4b8c      	ldr	r3, [pc, #560]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d004      	beq.n	8002074 <HAL_RCC_OscConfig+0x7c>
 800206a:	4b89      	ldr	r3, [pc, #548]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002072:	e005      	b.n	8002080 <HAL_RCC_OscConfig+0x88>
 8002074:	4b86      	ldr	r3, [pc, #536]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 8002076:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800207a:	091b      	lsrs	r3, r3, #4
 800207c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002080:	4293      	cmp	r3, r2
 8002082:	d223      	bcs.n	80020cc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	4618      	mov	r0, r3
 800208a:	f000 fd41 	bl	8002b10 <RCC_SetFlashLatencyFromMSIRange>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e38d      	b.n	80027b4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002098:	4b7d      	ldr	r3, [pc, #500]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a7c      	ldr	r2, [pc, #496]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 800209e:	f043 0308 	orr.w	r3, r3, #8
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	4b7a      	ldr	r3, [pc, #488]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	4977      	ldr	r1, [pc, #476]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020b6:	4b76      	ldr	r3, [pc, #472]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	021b      	lsls	r3, r3, #8
 80020c4:	4972      	ldr	r1, [pc, #456]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	604b      	str	r3, [r1, #4]
 80020ca:	e025      	b.n	8002118 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020cc:	4b70      	ldr	r3, [pc, #448]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a6f      	ldr	r2, [pc, #444]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 80020d2:	f043 0308 	orr.w	r3, r3, #8
 80020d6:	6013      	str	r3, [r2, #0]
 80020d8:	4b6d      	ldr	r3, [pc, #436]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	496a      	ldr	r1, [pc, #424]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020ea:	4b69      	ldr	r3, [pc, #420]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	021b      	lsls	r3, r3, #8
 80020f8:	4965      	ldr	r1, [pc, #404]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d109      	bne.n	8002118 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	4618      	mov	r0, r3
 800210a:	f000 fd01 	bl	8002b10 <RCC_SetFlashLatencyFromMSIRange>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e34d      	b.n	80027b4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002118:	f000 fc36 	bl	8002988 <HAL_RCC_GetSysClockFreq>
 800211c:	4602      	mov	r2, r0
 800211e:	4b5c      	ldr	r3, [pc, #368]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	091b      	lsrs	r3, r3, #4
 8002124:	f003 030f 	and.w	r3, r3, #15
 8002128:	495a      	ldr	r1, [pc, #360]	; (8002294 <HAL_RCC_OscConfig+0x29c>)
 800212a:	5ccb      	ldrb	r3, [r1, r3]
 800212c:	f003 031f 	and.w	r3, r3, #31
 8002130:	fa22 f303 	lsr.w	r3, r2, r3
 8002134:	4a58      	ldr	r2, [pc, #352]	; (8002298 <HAL_RCC_OscConfig+0x2a0>)
 8002136:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002138:	4b58      	ldr	r3, [pc, #352]	; (800229c <HAL_RCC_OscConfig+0x2a4>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe fe21 	bl	8000d84 <HAL_InitTick>
 8002142:	4603      	mov	r3, r0
 8002144:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002146:	7bfb      	ldrb	r3, [r7, #15]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d052      	beq.n	80021f2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800214c:	7bfb      	ldrb	r3, [r7, #15]
 800214e:	e331      	b.n	80027b4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d032      	beq.n	80021be <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002158:	4b4d      	ldr	r3, [pc, #308]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a4c      	ldr	r2, [pc, #304]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002164:	f7fe fe5e 	bl	8000e24 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800216c:	f7fe fe5a 	bl	8000e24 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e31a      	b.n	80027b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800217e:	4b44      	ldr	r3, [pc, #272]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f0      	beq.n	800216c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800218a:	4b41      	ldr	r3, [pc, #260]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a40      	ldr	r2, [pc, #256]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 8002190:	f043 0308 	orr.w	r3, r3, #8
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	4b3e      	ldr	r3, [pc, #248]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	493b      	ldr	r1, [pc, #236]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021a8:	4b39      	ldr	r3, [pc, #228]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	021b      	lsls	r3, r3, #8
 80021b6:	4936      	ldr	r1, [pc, #216]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	604b      	str	r3, [r1, #4]
 80021bc:	e01a      	b.n	80021f4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021be:	4b34      	ldr	r3, [pc, #208]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a33      	ldr	r2, [pc, #204]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 80021c4:	f023 0301 	bic.w	r3, r3, #1
 80021c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021ca:	f7fe fe2b 	bl	8000e24 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021d2:	f7fe fe27 	bl	8000e24 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e2e7      	b.n	80027b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021e4:	4b2a      	ldr	r3, [pc, #168]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1f0      	bne.n	80021d2 <HAL_RCC_OscConfig+0x1da>
 80021f0:	e000      	b.n	80021f4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d074      	beq.n	80022ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	2b08      	cmp	r3, #8
 8002204:	d005      	beq.n	8002212 <HAL_RCC_OscConfig+0x21a>
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	2b0c      	cmp	r3, #12
 800220a:	d10e      	bne.n	800222a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	2b03      	cmp	r3, #3
 8002210:	d10b      	bne.n	800222a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002212:	4b1f      	ldr	r3, [pc, #124]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d064      	beq.n	80022e8 <HAL_RCC_OscConfig+0x2f0>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d160      	bne.n	80022e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e2c4      	b.n	80027b4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002232:	d106      	bne.n	8002242 <HAL_RCC_OscConfig+0x24a>
 8002234:	4b16      	ldr	r3, [pc, #88]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a15      	ldr	r2, [pc, #84]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 800223a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	e01d      	b.n	800227e <HAL_RCC_OscConfig+0x286>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800224a:	d10c      	bne.n	8002266 <HAL_RCC_OscConfig+0x26e>
 800224c:	4b10      	ldr	r3, [pc, #64]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a0f      	ldr	r2, [pc, #60]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 8002252:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002256:	6013      	str	r3, [r2, #0]
 8002258:	4b0d      	ldr	r3, [pc, #52]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a0c      	ldr	r2, [pc, #48]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 800225e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002262:	6013      	str	r3, [r2, #0]
 8002264:	e00b      	b.n	800227e <HAL_RCC_OscConfig+0x286>
 8002266:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a09      	ldr	r2, [pc, #36]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 800226c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	4b07      	ldr	r3, [pc, #28]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a06      	ldr	r2, [pc, #24]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 8002278:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800227c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d01c      	beq.n	80022c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002286:	f7fe fdcd 	bl	8000e24 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800228c:	e011      	b.n	80022b2 <HAL_RCC_OscConfig+0x2ba>
 800228e:	bf00      	nop
 8002290:	40021000 	.word	0x40021000
 8002294:	08009240 	.word	0x08009240
 8002298:	20000028 	.word	0x20000028
 800229c:	20000020 	.word	0x20000020
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a0:	f7fe fdc0 	bl	8000e24 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b64      	cmp	r3, #100	; 0x64
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e280      	b.n	80027b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022b2:	4baf      	ldr	r3, [pc, #700]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0x2a8>
 80022be:	e014      	b.n	80022ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c0:	f7fe fdb0 	bl	8000e24 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c8:	f7fe fdac 	bl	8000e24 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b64      	cmp	r3, #100	; 0x64
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e26c      	b.n	80027b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022da:	4ba5      	ldr	r3, [pc, #660]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0x2d0>
 80022e6:	e000      	b.n	80022ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d060      	beq.n	80023b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	2b04      	cmp	r3, #4
 80022fa:	d005      	beq.n	8002308 <HAL_RCC_OscConfig+0x310>
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	2b0c      	cmp	r3, #12
 8002300:	d119      	bne.n	8002336 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	2b02      	cmp	r3, #2
 8002306:	d116      	bne.n	8002336 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002308:	4b99      	ldr	r3, [pc, #612]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002310:	2b00      	cmp	r3, #0
 8002312:	d005      	beq.n	8002320 <HAL_RCC_OscConfig+0x328>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e249      	b.n	80027b4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002320:	4b93      	ldr	r3, [pc, #588]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	061b      	lsls	r3, r3, #24
 800232e:	4990      	ldr	r1, [pc, #576]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 8002330:	4313      	orrs	r3, r2
 8002332:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002334:	e040      	b.n	80023b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d023      	beq.n	8002386 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800233e:	4b8c      	ldr	r3, [pc, #560]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a8b      	ldr	r2, [pc, #556]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 8002344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002348:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234a:	f7fe fd6b 	bl	8000e24 <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002352:	f7fe fd67 	bl	8000e24 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e227      	b.n	80027b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002364:	4b82      	ldr	r3, [pc, #520]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0f0      	beq.n	8002352 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002370:	4b7f      	ldr	r3, [pc, #508]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	061b      	lsls	r3, r3, #24
 800237e:	497c      	ldr	r1, [pc, #496]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 8002380:	4313      	orrs	r3, r2
 8002382:	604b      	str	r3, [r1, #4]
 8002384:	e018      	b.n	80023b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002386:	4b7a      	ldr	r3, [pc, #488]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a79      	ldr	r2, [pc, #484]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 800238c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002392:	f7fe fd47 	bl	8000e24 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239a:	f7fe fd43 	bl	8000e24 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e203      	b.n	80027b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023ac:	4b70      	ldr	r3, [pc, #448]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1f0      	bne.n	800239a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d03c      	beq.n	800243e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d01c      	beq.n	8002406 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023cc:	4b68      	ldr	r3, [pc, #416]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 80023ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023d2:	4a67      	ldr	r2, [pc, #412]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023dc:	f7fe fd22 	bl	8000e24 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e4:	f7fe fd1e 	bl	8000e24 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e1de      	b.n	80027b4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023f6:	4b5e      	ldr	r3, [pc, #376]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 80023f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0ef      	beq.n	80023e4 <HAL_RCC_OscConfig+0x3ec>
 8002404:	e01b      	b.n	800243e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002406:	4b5a      	ldr	r3, [pc, #360]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 8002408:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800240c:	4a58      	ldr	r2, [pc, #352]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 800240e:	f023 0301 	bic.w	r3, r3, #1
 8002412:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002416:	f7fe fd05 	bl	8000e24 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800241e:	f7fe fd01 	bl	8000e24 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e1c1      	b.n	80027b4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002430:	4b4f      	ldr	r3, [pc, #316]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 8002432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1ef      	bne.n	800241e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0304 	and.w	r3, r3, #4
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 80a6 	beq.w	8002598 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800244c:	2300      	movs	r3, #0
 800244e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002450:	4b47      	ldr	r3, [pc, #284]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 8002452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10d      	bne.n	8002478 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800245c:	4b44      	ldr	r3, [pc, #272]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 800245e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002460:	4a43      	ldr	r2, [pc, #268]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 8002462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002466:	6593      	str	r3, [r2, #88]	; 0x58
 8002468:	4b41      	ldr	r3, [pc, #260]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 800246a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002474:	2301      	movs	r3, #1
 8002476:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002478:	4b3e      	ldr	r3, [pc, #248]	; (8002574 <HAL_RCC_OscConfig+0x57c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002480:	2b00      	cmp	r3, #0
 8002482:	d118      	bne.n	80024b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002484:	4b3b      	ldr	r3, [pc, #236]	; (8002574 <HAL_RCC_OscConfig+0x57c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a3a      	ldr	r2, [pc, #232]	; (8002574 <HAL_RCC_OscConfig+0x57c>)
 800248a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002490:	f7fe fcc8 	bl	8000e24 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002498:	f7fe fcc4 	bl	8000e24 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e184      	b.n	80027b4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024aa:	4b32      	ldr	r3, [pc, #200]	; (8002574 <HAL_RCC_OscConfig+0x57c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0f0      	beq.n	8002498 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d108      	bne.n	80024d0 <HAL_RCC_OscConfig+0x4d8>
 80024be:	4b2c      	ldr	r3, [pc, #176]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 80024c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c4:	4a2a      	ldr	r2, [pc, #168]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024ce:	e024      	b.n	800251a <HAL_RCC_OscConfig+0x522>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	2b05      	cmp	r3, #5
 80024d6:	d110      	bne.n	80024fa <HAL_RCC_OscConfig+0x502>
 80024d8:	4b25      	ldr	r3, [pc, #148]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 80024da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024de:	4a24      	ldr	r2, [pc, #144]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 80024e0:	f043 0304 	orr.w	r3, r3, #4
 80024e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024e8:	4b21      	ldr	r3, [pc, #132]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 80024ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ee:	4a20      	ldr	r2, [pc, #128]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024f8:	e00f      	b.n	800251a <HAL_RCC_OscConfig+0x522>
 80024fa:	4b1d      	ldr	r3, [pc, #116]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 80024fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002500:	4a1b      	ldr	r2, [pc, #108]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 8002502:	f023 0301 	bic.w	r3, r3, #1
 8002506:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800250a:	4b19      	ldr	r3, [pc, #100]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 800250c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002510:	4a17      	ldr	r2, [pc, #92]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 8002512:	f023 0304 	bic.w	r3, r3, #4
 8002516:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d016      	beq.n	8002550 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002522:	f7fe fc7f 	bl	8000e24 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002528:	e00a      	b.n	8002540 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252a:	f7fe fc7b 	bl	8000e24 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	f241 3288 	movw	r2, #5000	; 0x1388
 8002538:	4293      	cmp	r3, r2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e139      	b.n	80027b4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002540:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <HAL_RCC_OscConfig+0x578>)
 8002542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0ed      	beq.n	800252a <HAL_RCC_OscConfig+0x532>
 800254e:	e01a      	b.n	8002586 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002550:	f7fe fc68 	bl	8000e24 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002556:	e00f      	b.n	8002578 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002558:	f7fe fc64 	bl	8000e24 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	f241 3288 	movw	r2, #5000	; 0x1388
 8002566:	4293      	cmp	r3, r2
 8002568:	d906      	bls.n	8002578 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e122      	b.n	80027b4 <HAL_RCC_OscConfig+0x7bc>
 800256e:	bf00      	nop
 8002570:	40021000 	.word	0x40021000
 8002574:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002578:	4b90      	ldr	r3, [pc, #576]	; (80027bc <HAL_RCC_OscConfig+0x7c4>)
 800257a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1e8      	bne.n	8002558 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002586:	7ffb      	ldrb	r3, [r7, #31]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d105      	bne.n	8002598 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800258c:	4b8b      	ldr	r3, [pc, #556]	; (80027bc <HAL_RCC_OscConfig+0x7c4>)
 800258e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002590:	4a8a      	ldr	r2, [pc, #552]	; (80027bc <HAL_RCC_OscConfig+0x7c4>)
 8002592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002596:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 8108 	beq.w	80027b2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	f040 80d0 	bne.w	800274c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80025ac:	4b83      	ldr	r3, [pc, #524]	; (80027bc <HAL_RCC_OscConfig+0x7c4>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f003 0203 	and.w	r2, r3, #3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025bc:	429a      	cmp	r2, r3
 80025be:	d130      	bne.n	8002622 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	3b01      	subs	r3, #1
 80025cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d127      	bne.n	8002622 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025de:	429a      	cmp	r2, r3
 80025e0:	d11f      	bne.n	8002622 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025ec:	2a07      	cmp	r2, #7
 80025ee:	bf14      	ite	ne
 80025f0:	2201      	movne	r2, #1
 80025f2:	2200      	moveq	r2, #0
 80025f4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d113      	bne.n	8002622 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002604:	085b      	lsrs	r3, r3, #1
 8002606:	3b01      	subs	r3, #1
 8002608:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800260a:	429a      	cmp	r2, r3
 800260c:	d109      	bne.n	8002622 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002618:	085b      	lsrs	r3, r3, #1
 800261a:	3b01      	subs	r3, #1
 800261c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800261e:	429a      	cmp	r2, r3
 8002620:	d06e      	beq.n	8002700 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	2b0c      	cmp	r3, #12
 8002626:	d069      	beq.n	80026fc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002628:	4b64      	ldr	r3, [pc, #400]	; (80027bc <HAL_RCC_OscConfig+0x7c4>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d105      	bne.n	8002640 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002634:	4b61      	ldr	r3, [pc, #388]	; (80027bc <HAL_RCC_OscConfig+0x7c4>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0b7      	b.n	80027b4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002644:	4b5d      	ldr	r3, [pc, #372]	; (80027bc <HAL_RCC_OscConfig+0x7c4>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a5c      	ldr	r2, [pc, #368]	; (80027bc <HAL_RCC_OscConfig+0x7c4>)
 800264a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800264e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002650:	f7fe fbe8 	bl	8000e24 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002658:	f7fe fbe4 	bl	8000e24 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e0a4      	b.n	80027b4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800266a:	4b54      	ldr	r3, [pc, #336]	; (80027bc <HAL_RCC_OscConfig+0x7c4>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f0      	bne.n	8002658 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002676:	4b51      	ldr	r3, [pc, #324]	; (80027bc <HAL_RCC_OscConfig+0x7c4>)
 8002678:	68da      	ldr	r2, [r3, #12]
 800267a:	4b51      	ldr	r3, [pc, #324]	; (80027c0 <HAL_RCC_OscConfig+0x7c8>)
 800267c:	4013      	ands	r3, r2
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002686:	3a01      	subs	r2, #1
 8002688:	0112      	lsls	r2, r2, #4
 800268a:	4311      	orrs	r1, r2
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002690:	0212      	lsls	r2, r2, #8
 8002692:	4311      	orrs	r1, r2
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002698:	0852      	lsrs	r2, r2, #1
 800269a:	3a01      	subs	r2, #1
 800269c:	0552      	lsls	r2, r2, #21
 800269e:	4311      	orrs	r1, r2
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026a4:	0852      	lsrs	r2, r2, #1
 80026a6:	3a01      	subs	r2, #1
 80026a8:	0652      	lsls	r2, r2, #25
 80026aa:	4311      	orrs	r1, r2
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026b0:	0912      	lsrs	r2, r2, #4
 80026b2:	0452      	lsls	r2, r2, #17
 80026b4:	430a      	orrs	r2, r1
 80026b6:	4941      	ldr	r1, [pc, #260]	; (80027bc <HAL_RCC_OscConfig+0x7c4>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026bc:	4b3f      	ldr	r3, [pc, #252]	; (80027bc <HAL_RCC_OscConfig+0x7c4>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a3e      	ldr	r2, [pc, #248]	; (80027bc <HAL_RCC_OscConfig+0x7c4>)
 80026c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026c8:	4b3c      	ldr	r3, [pc, #240]	; (80027bc <HAL_RCC_OscConfig+0x7c4>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	4a3b      	ldr	r2, [pc, #236]	; (80027bc <HAL_RCC_OscConfig+0x7c4>)
 80026ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026d4:	f7fe fba6 	bl	8000e24 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026dc:	f7fe fba2 	bl	8000e24 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e062      	b.n	80027b4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ee:	4b33      	ldr	r3, [pc, #204]	; (80027bc <HAL_RCC_OscConfig+0x7c4>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f0      	beq.n	80026dc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026fa:	e05a      	b.n	80027b2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e059      	b.n	80027b4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002700:	4b2e      	ldr	r3, [pc, #184]	; (80027bc <HAL_RCC_OscConfig+0x7c4>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d152      	bne.n	80027b2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800270c:	4b2b      	ldr	r3, [pc, #172]	; (80027bc <HAL_RCC_OscConfig+0x7c4>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a2a      	ldr	r2, [pc, #168]	; (80027bc <HAL_RCC_OscConfig+0x7c4>)
 8002712:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002716:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002718:	4b28      	ldr	r3, [pc, #160]	; (80027bc <HAL_RCC_OscConfig+0x7c4>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	4a27      	ldr	r2, [pc, #156]	; (80027bc <HAL_RCC_OscConfig+0x7c4>)
 800271e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002722:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002724:	f7fe fb7e 	bl	8000e24 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800272c:	f7fe fb7a 	bl	8000e24 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e03a      	b.n	80027b4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800273e:	4b1f      	ldr	r3, [pc, #124]	; (80027bc <HAL_RCC_OscConfig+0x7c4>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0f0      	beq.n	800272c <HAL_RCC_OscConfig+0x734>
 800274a:	e032      	b.n	80027b2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	2b0c      	cmp	r3, #12
 8002750:	d02d      	beq.n	80027ae <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002752:	4b1a      	ldr	r3, [pc, #104]	; (80027bc <HAL_RCC_OscConfig+0x7c4>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a19      	ldr	r2, [pc, #100]	; (80027bc <HAL_RCC_OscConfig+0x7c4>)
 8002758:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800275c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800275e:	4b17      	ldr	r3, [pc, #92]	; (80027bc <HAL_RCC_OscConfig+0x7c4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d105      	bne.n	8002776 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800276a:	4b14      	ldr	r3, [pc, #80]	; (80027bc <HAL_RCC_OscConfig+0x7c4>)
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	4a13      	ldr	r2, [pc, #76]	; (80027bc <HAL_RCC_OscConfig+0x7c4>)
 8002770:	f023 0303 	bic.w	r3, r3, #3
 8002774:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002776:	4b11      	ldr	r3, [pc, #68]	; (80027bc <HAL_RCC_OscConfig+0x7c4>)
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	4a10      	ldr	r2, [pc, #64]	; (80027bc <HAL_RCC_OscConfig+0x7c4>)
 800277c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002784:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002786:	f7fe fb4d 	bl	8000e24 <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800278c:	e008      	b.n	80027a0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800278e:	f7fe fb49 	bl	8000e24 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e009      	b.n	80027b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027a0:	4b06      	ldr	r3, [pc, #24]	; (80027bc <HAL_RCC_OscConfig+0x7c4>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1f0      	bne.n	800278e <HAL_RCC_OscConfig+0x796>
 80027ac:	e001      	b.n	80027b2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3720      	adds	r7, #32
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40021000 	.word	0x40021000
 80027c0:	f99d808c 	.word	0xf99d808c

080027c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e0c8      	b.n	800296a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027d8:	4b66      	ldr	r3, [pc, #408]	; (8002974 <HAL_RCC_ClockConfig+0x1b0>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d910      	bls.n	8002808 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e6:	4b63      	ldr	r3, [pc, #396]	; (8002974 <HAL_RCC_ClockConfig+0x1b0>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f023 0207 	bic.w	r2, r3, #7
 80027ee:	4961      	ldr	r1, [pc, #388]	; (8002974 <HAL_RCC_ClockConfig+0x1b0>)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f6:	4b5f      	ldr	r3, [pc, #380]	; (8002974 <HAL_RCC_ClockConfig+0x1b0>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	429a      	cmp	r2, r3
 8002802:	d001      	beq.n	8002808 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e0b0      	b.n	800296a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b00      	cmp	r3, #0
 8002812:	d04c      	beq.n	80028ae <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b03      	cmp	r3, #3
 800281a:	d107      	bne.n	800282c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800281c:	4b56      	ldr	r3, [pc, #344]	; (8002978 <HAL_RCC_ClockConfig+0x1b4>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d121      	bne.n	800286c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e09e      	b.n	800296a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b02      	cmp	r3, #2
 8002832:	d107      	bne.n	8002844 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002834:	4b50      	ldr	r3, [pc, #320]	; (8002978 <HAL_RCC_ClockConfig+0x1b4>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d115      	bne.n	800286c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e092      	b.n	800296a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d107      	bne.n	800285c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800284c:	4b4a      	ldr	r3, [pc, #296]	; (8002978 <HAL_RCC_ClockConfig+0x1b4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d109      	bne.n	800286c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e086      	b.n	800296a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800285c:	4b46      	ldr	r3, [pc, #280]	; (8002978 <HAL_RCC_ClockConfig+0x1b4>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e07e      	b.n	800296a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800286c:	4b42      	ldr	r3, [pc, #264]	; (8002978 <HAL_RCC_ClockConfig+0x1b4>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f023 0203 	bic.w	r2, r3, #3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	493f      	ldr	r1, [pc, #252]	; (8002978 <HAL_RCC_ClockConfig+0x1b4>)
 800287a:	4313      	orrs	r3, r2
 800287c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800287e:	f7fe fad1 	bl	8000e24 <HAL_GetTick>
 8002882:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002884:	e00a      	b.n	800289c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002886:	f7fe facd 	bl	8000e24 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	f241 3288 	movw	r2, #5000	; 0x1388
 8002894:	4293      	cmp	r3, r2
 8002896:	d901      	bls.n	800289c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e066      	b.n	800296a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800289c:	4b36      	ldr	r3, [pc, #216]	; (8002978 <HAL_RCC_ClockConfig+0x1b4>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 020c 	and.w	r2, r3, #12
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d1eb      	bne.n	8002886 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d008      	beq.n	80028cc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028ba:	4b2f      	ldr	r3, [pc, #188]	; (8002978 <HAL_RCC_ClockConfig+0x1b4>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	492c      	ldr	r1, [pc, #176]	; (8002978 <HAL_RCC_ClockConfig+0x1b4>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028cc:	4b29      	ldr	r3, [pc, #164]	; (8002974 <HAL_RCC_ClockConfig+0x1b0>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d210      	bcs.n	80028fc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028da:	4b26      	ldr	r3, [pc, #152]	; (8002974 <HAL_RCC_ClockConfig+0x1b0>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f023 0207 	bic.w	r2, r3, #7
 80028e2:	4924      	ldr	r1, [pc, #144]	; (8002974 <HAL_RCC_ClockConfig+0x1b0>)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ea:	4b22      	ldr	r3, [pc, #136]	; (8002974 <HAL_RCC_ClockConfig+0x1b0>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d001      	beq.n	80028fc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e036      	b.n	800296a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	d008      	beq.n	800291a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002908:	4b1b      	ldr	r3, [pc, #108]	; (8002978 <HAL_RCC_ClockConfig+0x1b4>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	4918      	ldr	r1, [pc, #96]	; (8002978 <HAL_RCC_ClockConfig+0x1b4>)
 8002916:	4313      	orrs	r3, r2
 8002918:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0308 	and.w	r3, r3, #8
 8002922:	2b00      	cmp	r3, #0
 8002924:	d009      	beq.n	800293a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002926:	4b14      	ldr	r3, [pc, #80]	; (8002978 <HAL_RCC_ClockConfig+0x1b4>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	4910      	ldr	r1, [pc, #64]	; (8002978 <HAL_RCC_ClockConfig+0x1b4>)
 8002936:	4313      	orrs	r3, r2
 8002938:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800293a:	f000 f825 	bl	8002988 <HAL_RCC_GetSysClockFreq>
 800293e:	4602      	mov	r2, r0
 8002940:	4b0d      	ldr	r3, [pc, #52]	; (8002978 <HAL_RCC_ClockConfig+0x1b4>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	091b      	lsrs	r3, r3, #4
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	490c      	ldr	r1, [pc, #48]	; (800297c <HAL_RCC_ClockConfig+0x1b8>)
 800294c:	5ccb      	ldrb	r3, [r1, r3]
 800294e:	f003 031f 	and.w	r3, r3, #31
 8002952:	fa22 f303 	lsr.w	r3, r2, r3
 8002956:	4a0a      	ldr	r2, [pc, #40]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002958:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800295a:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <HAL_RCC_ClockConfig+0x1c0>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f7fe fa10 	bl	8000d84 <HAL_InitTick>
 8002964:	4603      	mov	r3, r0
 8002966:	72fb      	strb	r3, [r7, #11]

  return status;
 8002968:	7afb      	ldrb	r3, [r7, #11]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40022000 	.word	0x40022000
 8002978:	40021000 	.word	0x40021000
 800297c:	08009240 	.word	0x08009240
 8002980:	20000028 	.word	0x20000028
 8002984:	20000020 	.word	0x20000020

08002988 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002988:	b480      	push	{r7}
 800298a:	b089      	sub	sp, #36	; 0x24
 800298c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800298e:	2300      	movs	r3, #0
 8002990:	61fb      	str	r3, [r7, #28]
 8002992:	2300      	movs	r3, #0
 8002994:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002996:	4b3e      	ldr	r3, [pc, #248]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029a0:	4b3b      	ldr	r3, [pc, #236]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x108>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f003 0303 	and.w	r3, r3, #3
 80029a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d005      	beq.n	80029bc <HAL_RCC_GetSysClockFreq+0x34>
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	2b0c      	cmp	r3, #12
 80029b4:	d121      	bne.n	80029fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d11e      	bne.n	80029fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029bc:	4b34      	ldr	r3, [pc, #208]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x108>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0308 	and.w	r3, r3, #8
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d107      	bne.n	80029d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029c8:	4b31      	ldr	r3, [pc, #196]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x108>)
 80029ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ce:	0a1b      	lsrs	r3, r3, #8
 80029d0:	f003 030f 	and.w	r3, r3, #15
 80029d4:	61fb      	str	r3, [r7, #28]
 80029d6:	e005      	b.n	80029e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029d8:	4b2d      	ldr	r3, [pc, #180]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x108>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	091b      	lsrs	r3, r3, #4
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80029e4:	4a2b      	ldr	r2, [pc, #172]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x10c>)
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10d      	bne.n	8002a10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029f8:	e00a      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	2b04      	cmp	r3, #4
 80029fe:	d102      	bne.n	8002a06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a00:	4b25      	ldr	r3, [pc, #148]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a02:	61bb      	str	r3, [r7, #24]
 8002a04:	e004      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d101      	bne.n	8002a10 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a0c:	4b23      	ldr	r3, [pc, #140]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x114>)
 8002a0e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	2b0c      	cmp	r3, #12
 8002a14:	d134      	bne.n	8002a80 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a16:	4b1e      	ldr	r3, [pc, #120]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d003      	beq.n	8002a2e <HAL_RCC_GetSysClockFreq+0xa6>
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	2b03      	cmp	r3, #3
 8002a2a:	d003      	beq.n	8002a34 <HAL_RCC_GetSysClockFreq+0xac>
 8002a2c:	e005      	b.n	8002a3a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a2e:	4b1a      	ldr	r3, [pc, #104]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a30:	617b      	str	r3, [r7, #20]
      break;
 8002a32:	e005      	b.n	8002a40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a34:	4b19      	ldr	r3, [pc, #100]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x114>)
 8002a36:	617b      	str	r3, [r7, #20]
      break;
 8002a38:	e002      	b.n	8002a40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	617b      	str	r3, [r7, #20]
      break;
 8002a3e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a40:	4b13      	ldr	r3, [pc, #76]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	091b      	lsrs	r3, r3, #4
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a4e:	4b10      	ldr	r3, [pc, #64]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	0a1b      	lsrs	r3, r3, #8
 8002a54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	fb02 f203 	mul.w	r2, r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a64:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a66:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	0e5b      	lsrs	r3, r3, #25
 8002a6c:	f003 0303 	and.w	r3, r3, #3
 8002a70:	3301      	adds	r3, #1
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a80:	69bb      	ldr	r3, [r7, #24]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3724      	adds	r7, #36	; 0x24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40021000 	.word	0x40021000
 8002a94:	08009258 	.word	0x08009258
 8002a98:	00f42400 	.word	0x00f42400
 8002a9c:	007a1200 	.word	0x007a1200

08002aa0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aa4:	4b03      	ldr	r3, [pc, #12]	; (8002ab4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	20000028 	.word	0x20000028

08002ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002abc:	f7ff fff0 	bl	8002aa0 <HAL_RCC_GetHCLKFreq>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	4b06      	ldr	r3, [pc, #24]	; (8002adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	0a1b      	lsrs	r3, r3, #8
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	4904      	ldr	r1, [pc, #16]	; (8002ae0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ace:	5ccb      	ldrb	r3, [r1, r3]
 8002ad0:	f003 031f 	and.w	r3, r3, #31
 8002ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	08009250 	.word	0x08009250

08002ae4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ae8:	f7ff ffda 	bl	8002aa0 <HAL_RCC_GetHCLKFreq>
 8002aec:	4602      	mov	r2, r0
 8002aee:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	0adb      	lsrs	r3, r3, #11
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	4904      	ldr	r1, [pc, #16]	; (8002b0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002afa:	5ccb      	ldrb	r3, [r1, r3]
 8002afc:	f003 031f 	and.w	r3, r3, #31
 8002b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	08009250 	.word	0x08009250

08002b10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b18:	2300      	movs	r3, #0
 8002b1a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b1c:	4b2a      	ldr	r3, [pc, #168]	; (8002bc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b28:	f7ff fa58 	bl	8001fdc <HAL_PWREx_GetVoltageRange>
 8002b2c:	6178      	str	r0, [r7, #20]
 8002b2e:	e014      	b.n	8002b5a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b30:	4b25      	ldr	r3, [pc, #148]	; (8002bc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b34:	4a24      	ldr	r2, [pc, #144]	; (8002bc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	6593      	str	r3, [r2, #88]	; 0x58
 8002b3c:	4b22      	ldr	r3, [pc, #136]	; (8002bc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b48:	f7ff fa48 	bl	8001fdc <HAL_PWREx_GetVoltageRange>
 8002b4c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b4e:	4b1e      	ldr	r3, [pc, #120]	; (8002bc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b52:	4a1d      	ldr	r2, [pc, #116]	; (8002bc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b58:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b60:	d10b      	bne.n	8002b7a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b80      	cmp	r3, #128	; 0x80
 8002b66:	d919      	bls.n	8002b9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2ba0      	cmp	r3, #160	; 0xa0
 8002b6c:	d902      	bls.n	8002b74 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b6e:	2302      	movs	r3, #2
 8002b70:	613b      	str	r3, [r7, #16]
 8002b72:	e013      	b.n	8002b9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b74:	2301      	movs	r3, #1
 8002b76:	613b      	str	r3, [r7, #16]
 8002b78:	e010      	b.n	8002b9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b80      	cmp	r3, #128	; 0x80
 8002b7e:	d902      	bls.n	8002b86 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b80:	2303      	movs	r3, #3
 8002b82:	613b      	str	r3, [r7, #16]
 8002b84:	e00a      	b.n	8002b9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b80      	cmp	r3, #128	; 0x80
 8002b8a:	d102      	bne.n	8002b92 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	613b      	str	r3, [r7, #16]
 8002b90:	e004      	b.n	8002b9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b70      	cmp	r3, #112	; 0x70
 8002b96:	d101      	bne.n	8002b9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b98:	2301      	movs	r3, #1
 8002b9a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f023 0207 	bic.w	r2, r3, #7
 8002ba4:	4909      	ldr	r1, [pc, #36]	; (8002bcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002bac:	4b07      	ldr	r3, [pc, #28]	; (8002bcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d001      	beq.n	8002bbe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e000      	b.n	8002bc0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	40022000 	.word	0x40022000

08002bd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e095      	b.n	8002d0e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d108      	bne.n	8002bfc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bf2:	d009      	beq.n	8002c08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	61da      	str	r2, [r3, #28]
 8002bfa:	e005      	b.n	8002c08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d106      	bne.n	8002c28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f89f 	bl	8002d66 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c3e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c48:	d902      	bls.n	8002c50 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	e002      	b.n	8002c56 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c54:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002c5e:	d007      	beq.n	8002c70 <HAL_SPI_Init+0xa0>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c68:	d002      	beq.n	8002c70 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c80:	431a      	orrs	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	431a      	orrs	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	69db      	ldr	r3, [r3, #28]
 8002ca4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb2:	ea42 0103 	orr.w	r1, r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	0c1b      	lsrs	r3, r3, #16
 8002ccc:	f003 0204 	and.w	r2, r3, #4
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	f003 0310 	and.w	r3, r3, #16
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002cec:	ea42 0103 	orr.w	r1, r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b082      	sub	sp, #8
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e01a      	b.n	8002d5e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d3e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f81a 	bl	8002d7a <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b088      	sub	sp, #32
 8002d92:	af02      	add	r7, sp, #8
 8002d94:	60f8      	str	r0, [r7, #12]
 8002d96:	60b9      	str	r1, [r7, #8]
 8002d98:	603b      	str	r3, [r7, #0]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002daa:	d112      	bne.n	8002dd2 <HAL_SPI_Receive+0x44>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10e      	bne.n	8002dd2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2204      	movs	r2, #4
 8002db8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002dbc:	88fa      	ldrh	r2, [r7, #6]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	68b9      	ldr	r1, [r7, #8]
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 f910 	bl	8002fee <HAL_SPI_TransmitReceive>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	e109      	b.n	8002fe6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d101      	bne.n	8002de0 <HAL_SPI_Receive+0x52>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	e102      	b.n	8002fe6 <HAL_SPI_Receive+0x258>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002de8:	f7fe f81c 	bl	8000e24 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d002      	beq.n	8002e00 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002dfe:	e0e9      	b.n	8002fd4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d002      	beq.n	8002e0c <HAL_SPI_Receive+0x7e>
 8002e06:	88fb      	ldrh	r3, [r7, #6]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d102      	bne.n	8002e12 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e10:	e0e0      	b.n	8002fd4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2204      	movs	r2, #4
 8002e16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	88fa      	ldrh	r2, [r7, #6]
 8002e2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	88fa      	ldrh	r2, [r7, #6]
 8002e32:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e5c:	d908      	bls.n	8002e70 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e6c:	605a      	str	r2, [r3, #4]
 8002e6e:	e007      	b.n	8002e80 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e7e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e88:	d10f      	bne.n	8002eaa <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ea8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb4:	2b40      	cmp	r3, #64	; 0x40
 8002eb6:	d007      	beq.n	8002ec8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ec6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ed0:	d867      	bhi.n	8002fa2 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002ed2:	e030      	b.n	8002f36 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d117      	bne.n	8002f12 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f103 020c 	add.w	r2, r3, #12
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	7812      	ldrb	r2, [r2, #0]
 8002ef0:	b2d2      	uxtb	r2, r2
 8002ef2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef8:	1c5a      	adds	r2, r3, #1
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	3b01      	subs	r3, #1
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002f10:	e011      	b.n	8002f36 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f12:	f7fd ff87 	bl	8000e24 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d803      	bhi.n	8002f2a <HAL_SPI_Receive+0x19c>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f28:	d102      	bne.n	8002f30 <HAL_SPI_Receive+0x1a2>
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d102      	bne.n	8002f36 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002f34:	e04e      	b.n	8002fd4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1c8      	bne.n	8002ed4 <HAL_SPI_Receive+0x146>
 8002f42:	e034      	b.n	8002fae <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d115      	bne.n	8002f7e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68da      	ldr	r2, [r3, #12]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	b292      	uxth	r2, r2
 8002f5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	1c9a      	adds	r2, r3, #2
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	3b01      	subs	r3, #1
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002f7c:	e011      	b.n	8002fa2 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f7e:	f7fd ff51 	bl	8000e24 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d803      	bhi.n	8002f96 <HAL_SPI_Receive+0x208>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f94:	d102      	bne.n	8002f9c <HAL_SPI_Receive+0x20e>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d102      	bne.n	8002fa2 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002fa0:	e018      	b.n	8002fd4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1ca      	bne.n	8002f44 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	6839      	ldr	r1, [r7, #0]
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f000 fffe 	bl	8003fb4 <SPI_EndRxTransaction>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d002      	beq.n	8002fc4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2220      	movs	r2, #32
 8002fc2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d002      	beq.n	8002fd2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	75fb      	strb	r3, [r7, #23]
 8002fd0:	e000      	b.n	8002fd4 <HAL_SPI_Receive+0x246>
  }

error :
 8002fd2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3718      	adds	r7, #24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b08a      	sub	sp, #40	; 0x28
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	60f8      	str	r0, [r7, #12]
 8002ff6:	60b9      	str	r1, [r7, #8]
 8002ff8:	607a      	str	r2, [r7, #4]
 8002ffa:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003000:	2300      	movs	r3, #0
 8003002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <HAL_SPI_TransmitReceive+0x26>
 8003010:	2302      	movs	r3, #2
 8003012:	e1fb      	b.n	800340c <HAL_SPI_TransmitReceive+0x41e>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800301c:	f7fd ff02 	bl	8000e24 <HAL_GetTick>
 8003020:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003028:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003030:	887b      	ldrh	r3, [r7, #2]
 8003032:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003034:	887b      	ldrh	r3, [r7, #2]
 8003036:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003038:	7efb      	ldrb	r3, [r7, #27]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d00e      	beq.n	800305c <HAL_SPI_TransmitReceive+0x6e>
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003044:	d106      	bne.n	8003054 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d102      	bne.n	8003054 <HAL_SPI_TransmitReceive+0x66>
 800304e:	7efb      	ldrb	r3, [r7, #27]
 8003050:	2b04      	cmp	r3, #4
 8003052:	d003      	beq.n	800305c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003054:	2302      	movs	r3, #2
 8003056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800305a:	e1cd      	b.n	80033f8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d005      	beq.n	800306e <HAL_SPI_TransmitReceive+0x80>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d002      	beq.n	800306e <HAL_SPI_TransmitReceive+0x80>
 8003068:	887b      	ldrh	r3, [r7, #2]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d103      	bne.n	8003076 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003074:	e1c0      	b.n	80033f8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b04      	cmp	r3, #4
 8003080:	d003      	beq.n	800308a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2205      	movs	r2, #5
 8003086:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	887a      	ldrh	r2, [r7, #2]
 800309a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	887a      	ldrh	r2, [r7, #2]
 80030a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	887a      	ldrh	r2, [r7, #2]
 80030b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	887a      	ldrh	r2, [r7, #2]
 80030b6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030cc:	d802      	bhi.n	80030d4 <HAL_SPI_TransmitReceive+0xe6>
 80030ce:	8a3b      	ldrh	r3, [r7, #16]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d908      	bls.n	80030e6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030e2:	605a      	str	r2, [r3, #4]
 80030e4:	e007      	b.n	80030f6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030f4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003100:	2b40      	cmp	r3, #64	; 0x40
 8003102:	d007      	beq.n	8003114 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003112:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800311c:	d97c      	bls.n	8003218 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d002      	beq.n	800312c <HAL_SPI_TransmitReceive+0x13e>
 8003126:	8a7b      	ldrh	r3, [r7, #18]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d169      	bne.n	8003200 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003130:	881a      	ldrh	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313c:	1c9a      	adds	r2, r3, #2
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003146:	b29b      	uxth	r3, r3
 8003148:	3b01      	subs	r3, #1
 800314a:	b29a      	uxth	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003150:	e056      	b.n	8003200 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b02      	cmp	r3, #2
 800315e:	d11b      	bne.n	8003198 <HAL_SPI_TransmitReceive+0x1aa>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003164:	b29b      	uxth	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d016      	beq.n	8003198 <HAL_SPI_TransmitReceive+0x1aa>
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	2b01      	cmp	r3, #1
 800316e:	d113      	bne.n	8003198 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003174:	881a      	ldrh	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003180:	1c9a      	adds	r2, r3, #2
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800318a:	b29b      	uxth	r3, r3
 800318c:	3b01      	subs	r3, #1
 800318e:	b29a      	uxth	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003194:	2300      	movs	r3, #0
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d11c      	bne.n	80031e0 <HAL_SPI_TransmitReceive+0x1f2>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d016      	beq.n	80031e0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68da      	ldr	r2, [r3, #12]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031bc:	b292      	uxth	r2, r2
 80031be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c4:	1c9a      	adds	r2, r3, #2
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	3b01      	subs	r3, #1
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031dc:	2301      	movs	r3, #1
 80031de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80031e0:	f7fd fe20 	bl	8000e24 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d807      	bhi.n	8003200 <HAL_SPI_TransmitReceive+0x212>
 80031f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f6:	d003      	beq.n	8003200 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80031fe:	e0fb      	b.n	80033f8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003204:	b29b      	uxth	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1a3      	bne.n	8003152 <HAL_SPI_TransmitReceive+0x164>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003210:	b29b      	uxth	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d19d      	bne.n	8003152 <HAL_SPI_TransmitReceive+0x164>
 8003216:	e0df      	b.n	80033d8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_SPI_TransmitReceive+0x23a>
 8003220:	8a7b      	ldrh	r3, [r7, #18]
 8003222:	2b01      	cmp	r3, #1
 8003224:	f040 80cb 	bne.w	80033be <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800322c:	b29b      	uxth	r3, r3
 800322e:	2b01      	cmp	r3, #1
 8003230:	d912      	bls.n	8003258 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003236:	881a      	ldrh	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003242:	1c9a      	adds	r2, r3, #2
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800324c:	b29b      	uxth	r3, r3
 800324e:	3b02      	subs	r3, #2
 8003250:	b29a      	uxth	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003256:	e0b2      	b.n	80033be <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	330c      	adds	r3, #12
 8003262:	7812      	ldrb	r2, [r2, #0]
 8003264:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326a:	1c5a      	adds	r2, r3, #1
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003274:	b29b      	uxth	r3, r3
 8003276:	3b01      	subs	r3, #1
 8003278:	b29a      	uxth	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800327e:	e09e      	b.n	80033be <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b02      	cmp	r3, #2
 800328c:	d134      	bne.n	80032f8 <HAL_SPI_TransmitReceive+0x30a>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003292:	b29b      	uxth	r3, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	d02f      	beq.n	80032f8 <HAL_SPI_TransmitReceive+0x30a>
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	2b01      	cmp	r3, #1
 800329c:	d12c      	bne.n	80032f8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d912      	bls.n	80032ce <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ac:	881a      	ldrh	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b8:	1c9a      	adds	r2, r3, #2
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	3b02      	subs	r3, #2
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032cc:	e012      	b.n	80032f4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	330c      	adds	r3, #12
 80032d8:	7812      	ldrb	r2, [r2, #0]
 80032da:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e0:	1c5a      	adds	r2, r3, #1
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	3b01      	subs	r3, #1
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b01      	cmp	r3, #1
 8003304:	d148      	bne.n	8003398 <HAL_SPI_TransmitReceive+0x3aa>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800330c:	b29b      	uxth	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d042      	beq.n	8003398 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003318:	b29b      	uxth	r3, r3
 800331a:	2b01      	cmp	r3, #1
 800331c:	d923      	bls.n	8003366 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68da      	ldr	r2, [r3, #12]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003328:	b292      	uxth	r2, r2
 800332a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	1c9a      	adds	r2, r3, #2
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800333c:	b29b      	uxth	r3, r3
 800333e:	3b02      	subs	r3, #2
 8003340:	b29a      	uxth	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800334e:	b29b      	uxth	r3, r3
 8003350:	2b01      	cmp	r3, #1
 8003352:	d81f      	bhi.n	8003394 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003362:	605a      	str	r2, [r3, #4]
 8003364:	e016      	b.n	8003394 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f103 020c 	add.w	r2, r3, #12
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	7812      	ldrb	r2, [r2, #0]
 8003374:	b2d2      	uxtb	r2, r2
 8003376:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337c:	1c5a      	adds	r2, r3, #1
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003388:	b29b      	uxth	r3, r3
 800338a:	3b01      	subs	r3, #1
 800338c:	b29a      	uxth	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003394:	2301      	movs	r3, #1
 8003396:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003398:	f7fd fd44 	bl	8000e24 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d803      	bhi.n	80033b0 <HAL_SPI_TransmitReceive+0x3c2>
 80033a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ae:	d102      	bne.n	80033b6 <HAL_SPI_TransmitReceive+0x3c8>
 80033b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d103      	bne.n	80033be <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80033bc:	e01c      	b.n	80033f8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f47f af5b 	bne.w	8003280 <HAL_SPI_TransmitReceive+0x292>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f47f af54 	bne.w	8003280 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033d8:	69fa      	ldr	r2, [r7, #28]
 80033da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 fe41 	bl	8004064 <SPI_EndRxTxTransaction>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d006      	beq.n	80033f6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2220      	movs	r2, #32
 80033f2:	661a      	str	r2, [r3, #96]	; 0x60
 80033f4:	e000      	b.n	80033f8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80033f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003408:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800340c:	4618      	mov	r0, r3
 800340e:	3728      	adds	r7, #40	; 0x28
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003414:	b480      	push	{r7}
 8003416:	b087      	sub	sp, #28
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	4613      	mov	r3, r2
 8003420:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003422:	2300      	movs	r3, #0
 8003424:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800342c:	2b01      	cmp	r3, #1
 800342e:	d101      	bne.n	8003434 <HAL_SPI_Transmit_IT+0x20>
 8003430:	2302      	movs	r3, #2
 8003432:	e072      	b.n	800351a <HAL_SPI_Transmit_IT+0x106>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d002      	beq.n	8003448 <HAL_SPI_Transmit_IT+0x34>
 8003442:	88fb      	ldrh	r3, [r7, #6]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d102      	bne.n	800344e <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800344c:	e060      	b.n	8003510 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b01      	cmp	r3, #1
 8003458:	d002      	beq.n	8003460 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 800345a:	2302      	movs	r3, #2
 800345c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800345e:	e057      	b.n	8003510 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2203      	movs	r2, #3
 8003464:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	88fa      	ldrh	r2, [r7, #6]
 8003478:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	88fa      	ldrh	r2, [r7, #6]
 800347e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034a4:	d903      	bls.n	80034ae <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	4a1f      	ldr	r2, [pc, #124]	; (8003528 <HAL_SPI_Transmit_IT+0x114>)
 80034aa:	651a      	str	r2, [r3, #80]	; 0x50
 80034ac:	e002      	b.n	80034b4 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	4a1e      	ldr	r2, [pc, #120]	; (800352c <HAL_SPI_Transmit_IT+0x118>)
 80034b2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034bc:	d10f      	bne.n	80034de <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80034ec:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f8:	2b40      	cmp	r3, #64	; 0x40
 80034fa:	d008      	beq.n	800350e <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	e000      	b.n	8003510 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 800350e:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003518:	7dfb      	ldrb	r3, [r7, #23]
}
 800351a:	4618      	mov	r0, r3
 800351c:	371c      	adds	r7, #28
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	08003d3b 	.word	0x08003d3b
 800352c:	08003cf5 	.word	0x08003cf5

08003530 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	4613      	mov	r3, r2
 800353c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800353e:	2300      	movs	r3, #0
 8003540:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d110      	bne.n	800356c <HAL_SPI_Receive_IT+0x3c>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003552:	d10b      	bne.n	800356c <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2204      	movs	r2, #4
 8003558:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800355c:	88fb      	ldrh	r3, [r7, #6]
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	68b9      	ldr	r1, [r7, #8]
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 f894 	bl	8003690 <HAL_SPI_TransmitReceive_IT>
 8003568:	4603      	mov	r3, r0
 800356a:	e089      	b.n	8003680 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <HAL_SPI_Receive_IT+0x4a>
 8003576:	2302      	movs	r3, #2
 8003578:	e082      	b.n	8003680 <HAL_SPI_Receive_IT+0x150>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b01      	cmp	r3, #1
 800358c:	d002      	beq.n	8003594 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800358e:	2302      	movs	r3, #2
 8003590:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003592:	e070      	b.n	8003676 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d002      	beq.n	80035a0 <HAL_SPI_Receive_IT+0x70>
 800359a:	88fb      	ldrh	r3, [r7, #6]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d102      	bne.n	80035a6 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035a4:	e067      	b.n	8003676 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2204      	movs	r2, #4
 80035aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	88fa      	ldrh	r2, [r7, #6]
 80035be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	88fa      	ldrh	r2, [r7, #6]
 80035c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035ea:	d90b      	bls.n	8003604 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035fa:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4a22      	ldr	r2, [pc, #136]	; (8003688 <HAL_SPI_Receive_IT+0x158>)
 8003600:	64da      	str	r2, [r3, #76]	; 0x4c
 8003602:	e00a      	b.n	800361a <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003612:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4a1d      	ldr	r2, [pc, #116]	; (800368c <HAL_SPI_Receive_IT+0x15c>)
 8003618:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003622:	d10f      	bne.n	8003644 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003632:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003642:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003652:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365e:	2b40      	cmp	r3, #64	; 0x40
 8003660:	d008      	beq.n	8003674 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	e000      	b.n	8003676 <HAL_SPI_Receive_IT+0x146>
  }

error :
 8003674:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800367e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	08003ca9 	.word	0x08003ca9
 800368c:	08003c59 	.word	0x08003c59

08003690 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8003690:	b480      	push	{r7}
 8003692:	b087      	sub	sp, #28
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
 800369c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800369e:	2300      	movs	r3, #0
 80036a0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d101      	bne.n	80036b0 <HAL_SPI_TransmitReceive_IT+0x20>
 80036ac:	2302      	movs	r3, #2
 80036ae:	e091      	b.n	80037d4 <HAL_SPI_TransmitReceive_IT+0x144>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80036be:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036c6:	7dbb      	ldrb	r3, [r7, #22]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d00d      	beq.n	80036e8 <HAL_SPI_TransmitReceive_IT+0x58>
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036d2:	d106      	bne.n	80036e2 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d102      	bne.n	80036e2 <HAL_SPI_TransmitReceive_IT+0x52>
 80036dc:	7dbb      	ldrb	r3, [r7, #22]
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d002      	beq.n	80036e8 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 80036e2:	2302      	movs	r3, #2
 80036e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80036e6:	e070      	b.n	80037ca <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d005      	beq.n	80036fa <HAL_SPI_TransmitReceive_IT+0x6a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <HAL_SPI_TransmitReceive_IT+0x6a>
 80036f4:	887b      	ldrh	r3, [r7, #2]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d102      	bne.n	8003700 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80036fe:	e064      	b.n	80037ca <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b04      	cmp	r3, #4
 800370a:	d003      	beq.n	8003714 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2205      	movs	r2, #5
 8003710:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	68ba      	ldr	r2, [r7, #8]
 800371e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	887a      	ldrh	r2, [r7, #2]
 8003724:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	887a      	ldrh	r2, [r7, #2]
 800372a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	887a      	ldrh	r2, [r7, #2]
 8003736:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	887a      	ldrh	r2, [r7, #2]
 800373e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800374a:	d906      	bls.n	800375a <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4a24      	ldr	r2, [pc, #144]	; (80037e0 <HAL_SPI_TransmitReceive_IT+0x150>)
 8003750:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	4a23      	ldr	r2, [pc, #140]	; (80037e4 <HAL_SPI_TransmitReceive_IT+0x154>)
 8003756:	651a      	str	r2, [r3, #80]	; 0x50
 8003758:	e005      	b.n	8003766 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	4a22      	ldr	r2, [pc, #136]	; (80037e8 <HAL_SPI_TransmitReceive_IT+0x158>)
 800375e:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	4a22      	ldr	r2, [pc, #136]	; (80037ec <HAL_SPI_TransmitReceive_IT+0x15c>)
 8003764:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800376e:	d802      	bhi.n	8003776 <HAL_SPI_TransmitReceive_IT+0xe6>
 8003770:	887b      	ldrh	r3, [r7, #2]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d908      	bls.n	8003788 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003784:	605a      	str	r2, [r3, #4]
 8003786:	e007      	b.n	8003798 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003796:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80037a6:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b2:	2b40      	cmp	r3, #64	; 0x40
 80037b4:	d008      	beq.n	80037c8 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	e000      	b.n	80037ca <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 80037c8:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80037d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	371c      	adds	r7, #28
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	08003b93 	.word	0x08003b93
 80037e4:	08003bf9 	.word	0x08003bf9
 80037e8:	08003a43 	.word	0x08003a43
 80037ec:	08003b01 	.word	0x08003b01

080037f0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b088      	sub	sp, #32
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	099b      	lsrs	r3, r3, #6
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10f      	bne.n	8003834 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00a      	beq.n	8003834 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	099b      	lsrs	r3, r3, #6
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d004      	beq.n	8003834 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	4798      	blx	r3
    return;
 8003832:	e0d7      	b.n	80039e4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	085b      	lsrs	r3, r3, #1
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00a      	beq.n	8003856 <HAL_SPI_IRQHandler+0x66>
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	09db      	lsrs	r3, r3, #7
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b00      	cmp	r3, #0
 800384a:	d004      	beq.n	8003856 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	4798      	blx	r3
    return;
 8003854:	e0c6      	b.n	80039e4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	095b      	lsrs	r3, r3, #5
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10c      	bne.n	800387c <HAL_SPI_IRQHandler+0x8c>
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	099b      	lsrs	r3, r3, #6
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b00      	cmp	r3, #0
 800386c:	d106      	bne.n	800387c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	0a1b      	lsrs	r3, r3, #8
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 80b4 	beq.w	80039e4 <HAL_SPI_IRQHandler+0x1f4>
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	095b      	lsrs	r3, r3, #5
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 80ad 	beq.w	80039e4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	099b      	lsrs	r3, r3, #6
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d023      	beq.n	80038de <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b03      	cmp	r3, #3
 80038a0:	d011      	beq.n	80038c6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038a6:	f043 0204 	orr.w	r2, r3, #4
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038ae:	2300      	movs	r3, #0
 80038b0:	617b      	str	r3, [r7, #20]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	617b      	str	r3, [r7, #20]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	617b      	str	r3, [r7, #20]
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	e00b      	b.n	80038de <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038c6:	2300      	movs	r3, #0
 80038c8:	613b      	str	r3, [r7, #16]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	613b      	str	r3, [r7, #16]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	613b      	str	r3, [r7, #16]
 80038da:	693b      	ldr	r3, [r7, #16]
        return;
 80038dc:	e082      	b.n	80039e4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	095b      	lsrs	r3, r3, #5
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d014      	beq.n	8003914 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ee:	f043 0201 	orr.w	r2, r3, #1
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80038f6:	2300      	movs	r3, #0
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	0a1b      	lsrs	r3, r3, #8
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00c      	beq.n	800393a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003924:	f043 0208 	orr.w	r2, r3, #8
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800392c:	2300      	movs	r3, #0
 800392e:	60bb      	str	r3, [r7, #8]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	60bb      	str	r3, [r7, #8]
 8003938:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800393e:	2b00      	cmp	r3, #0
 8003940:	d04f      	beq.n	80039e2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003950:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d104      	bne.n	800396e <HAL_SPI_IRQHandler+0x17e>
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d034      	beq.n	80039d8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0203 	bic.w	r2, r2, #3
 800397c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003982:	2b00      	cmp	r3, #0
 8003984:	d011      	beq.n	80039aa <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398a:	4a18      	ldr	r2, [pc, #96]	; (80039ec <HAL_SPI_IRQHandler+0x1fc>)
 800398c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003992:	4618      	mov	r0, r3
 8003994:	f7fd fb87 	bl	80010a6 <HAL_DMA_Abort_IT>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d005      	beq.n	80039aa <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d016      	beq.n	80039e0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b6:	4a0d      	ldr	r2, [pc, #52]	; (80039ec <HAL_SPI_IRQHandler+0x1fc>)
 80039b8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fd fb71 	bl	80010a6 <HAL_DMA_Abort_IT>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00a      	beq.n	80039e0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80039d6:	e003      	b.n	80039e0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f813 	bl	8003a04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80039de:	e000      	b.n	80039e2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80039e0:	bf00      	nop
    return;
 80039e2:	bf00      	nop
  }
}
 80039e4:	3720      	adds	r7, #32
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	08003a19 	.word	0x08003a19

080039f0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a24:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f7ff ffe5 	bl	8003a04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003a3a:	bf00      	nop
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b082      	sub	sp, #8
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d923      	bls.n	8003a9e <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68da      	ldr	r2, [r3, #12]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	b292      	uxth	r2, r2
 8003a62:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a68:	1c9a      	adds	r2, r3, #2
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	3b02      	subs	r3, #2
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d11f      	bne.n	8003acc <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a9a:	605a      	str	r2, [r3, #4]
 8003a9c:	e016      	b.n	8003acc <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f103 020c 	add.w	r2, r3, #12
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	7812      	ldrb	r2, [r2, #0]
 8003aac:	b2d2      	uxtb	r2, r2
 8003aae:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab4:	1c5a      	adds	r2, r3, #1
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10f      	bne.n	8003af8 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ae6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d102      	bne.n	8003af8 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 fafc 	bl	80040f0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003af8:	bf00      	nop
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d912      	bls.n	8003b38 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b16:	881a      	ldrh	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b22:	1c9a      	adds	r2, r3, #2
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	3b02      	subs	r3, #2
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b36:	e012      	b.n	8003b5e <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	330c      	adds	r3, #12
 8003b42:	7812      	ldrb	r2, [r2, #0]
 8003b44:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	3b01      	subs	r3, #1
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d110      	bne.n	8003b8a <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b76:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d102      	bne.n	8003b8a <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 fab3 	bl	80040f0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003b8a:	bf00      	nop
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b082      	sub	sp, #8
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68da      	ldr	r2, [r3, #12]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba4:	b292      	uxth	r2, r2
 8003ba6:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bac:	1c9a      	adds	r2, r3, #2
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10f      	bne.n	8003bf0 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bde:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d102      	bne.n	8003bf0 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 fa80 	bl	80040f0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003bf0:	bf00      	nop
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c04:	881a      	ldrh	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c10:	1c9a      	adds	r2, r3, #2
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d110      	bne.n	8003c50 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c3c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d102      	bne.n	8003c50 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 fa50 	bl	80040f0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003c50:	bf00      	nop
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f103 020c 	add.w	r2, r3, #12
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	7812      	ldrb	r2, [r2, #0]
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d102      	bne.n	8003ca0 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 fa6a 	bl	8004174 <SPI_CloseRx_ISR>
  }
}
 8003ca0:	bf00      	nop
 8003ca2:	3708      	adds	r7, #8
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68da      	ldr	r2, [r3, #12]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cba:	b292      	uxth	r2, r2
 8003cbc:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	1c9a      	adds	r2, r3, #2
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d102      	bne.n	8003cec <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 fa44 	bl	8004174 <SPI_CloseRx_ISR>
  }
}
 8003cec:	bf00      	nop
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	330c      	adds	r3, #12
 8003d06:	7812      	ldrb	r2, [r2, #0]
 8003d08:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0e:	1c5a      	adds	r2, r3, #1
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d102      	bne.n	8003d32 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 fa51 	bl	80041d4 <SPI_CloseTx_ISR>
  }
}
 8003d32:	bf00      	nop
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b082      	sub	sp, #8
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d46:	881a      	ldrh	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d52:	1c9a      	adds	r2, r3, #2
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d102      	bne.n	8003d76 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 fa2f 	bl	80041d4 <SPI_CloseTx_ISR>
  }
}
 8003d76:	bf00      	nop
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
	...

08003d80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b088      	sub	sp, #32
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	603b      	str	r3, [r7, #0]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d90:	f7fd f848 	bl	8000e24 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d98:	1a9b      	subs	r3, r3, r2
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003da0:	f7fd f840 	bl	8000e24 <HAL_GetTick>
 8003da4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003da6:	4b39      	ldr	r3, [pc, #228]	; (8003e8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	015b      	lsls	r3, r3, #5
 8003dac:	0d1b      	lsrs	r3, r3, #20
 8003dae:	69fa      	ldr	r2, [r7, #28]
 8003db0:	fb02 f303 	mul.w	r3, r2, r3
 8003db4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003db6:	e054      	b.n	8003e62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dbe:	d050      	beq.n	8003e62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003dc0:	f7fd f830 	bl	8000e24 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	69fa      	ldr	r2, [r7, #28]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d902      	bls.n	8003dd6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d13d      	bne.n	8003e52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003de4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dee:	d111      	bne.n	8003e14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003df8:	d004      	beq.n	8003e04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e02:	d107      	bne.n	8003e14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e1c:	d10f      	bne.n	8003e3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e017      	b.n	8003e82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	bf0c      	ite	eq
 8003e72:	2301      	moveq	r3, #1
 8003e74:	2300      	movne	r3, #0
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	461a      	mov	r2, r3
 8003e7a:	79fb      	ldrb	r3, [r7, #7]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d19b      	bne.n	8003db8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3720      	adds	r7, #32
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	20000028 	.word	0x20000028

08003e90 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b088      	sub	sp, #32
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
 8003e9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003e9e:	f7fc ffc1 	bl	8000e24 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea6:	1a9b      	subs	r3, r3, r2
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	4413      	add	r3, r2
 8003eac:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003eae:	f7fc ffb9 	bl	8000e24 <HAL_GetTick>
 8003eb2:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003eb4:	4b3e      	ldr	r3, [pc, #248]	; (8003fb0 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	00da      	lsls	r2, r3, #3
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	0d1b      	lsrs	r3, r3, #20
 8003ec4:	69fa      	ldr	r2, [r7, #28]
 8003ec6:	fb02 f303 	mul.w	r3, r2, r3
 8003eca:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8003ecc:	e062      	b.n	8003f94 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003ed4:	d109      	bne.n	8003eea <SPI_WaitFifoStateUntilTimeout+0x5a>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d106      	bne.n	8003eea <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	330c      	adds	r3, #12
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8003ee8:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef0:	d050      	beq.n	8003f94 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ef2:	f7fc ff97 	bl	8000e24 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	69fa      	ldr	r2, [r7, #28]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d902      	bls.n	8003f08 <SPI_WaitFifoStateUntilTimeout+0x78>
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d13d      	bne.n	8003f84 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f16:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f20:	d111      	bne.n	8003f46 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f2a:	d004      	beq.n	8003f36 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f34:	d107      	bne.n	8003f46 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f44:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f4e:	d10f      	bne.n	8003f70 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f6e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e010      	b.n	8003fa6 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	3b01      	subs	r3, #1
 8003f92:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689a      	ldr	r2, [r3, #8]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d194      	bne.n	8003ece <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3720      	adds	r7, #32
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	20000028 	.word	0x20000028

08003fb4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af02      	add	r7, sp, #8
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fc8:	d111      	bne.n	8003fee <SPI_EndRxTransaction+0x3a>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fd2:	d004      	beq.n	8003fde <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fdc:	d107      	bne.n	8003fee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fec:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	2180      	movs	r1, #128	; 0x80
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f7ff fec1 	bl	8003d80 <SPI_WaitFlagStateUntilTimeout>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d007      	beq.n	8004014 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004008:	f043 0220 	orr.w	r2, r3, #32
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e023      	b.n	800405c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800401c:	d11d      	bne.n	800405a <SPI_EndRxTransaction+0xa6>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004026:	d004      	beq.n	8004032 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004030:	d113      	bne.n	800405a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	2200      	movs	r2, #0
 800403a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f7ff ff26 	bl	8003e90 <SPI_WaitFifoStateUntilTimeout>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d007      	beq.n	800405a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800404e:	f043 0220 	orr.w	r2, r3, #32
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e000      	b.n	800405c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af02      	add	r7, sp, #8
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	2200      	movs	r2, #0
 8004078:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f7ff ff07 	bl	8003e90 <SPI_WaitFifoStateUntilTimeout>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d007      	beq.n	8004098 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800408c:	f043 0220 	orr.w	r2, r3, #32
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e027      	b.n	80040e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	2200      	movs	r2, #0
 80040a0:	2180      	movs	r1, #128	; 0x80
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f7ff fe6c 	bl	8003d80 <SPI_WaitFlagStateUntilTimeout>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d007      	beq.n	80040be <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040b2:	f043 0220 	orr.w	r2, r3, #32
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e014      	b.n	80040e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f7ff fee0 	bl	8003e90 <SPI_WaitFifoStateUntilTimeout>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d007      	beq.n	80040e6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040da:	f043 0220 	orr.w	r2, r3, #32
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e000      	b.n	80040e8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040f8:	f7fc fe94 	bl	8000e24 <HAL_GetTick>
 80040fc:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 0220 	bic.w	r2, r2, #32
 800410c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	2164      	movs	r1, #100	; 0x64
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f7ff ffa6 	bl	8004064 <SPI_EndRxTxTransaction>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d005      	beq.n	800412a <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004122:	f043 0220 	orr.w	r2, r3, #32
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800412e:	2b00      	cmp	r3, #0
 8004130:	d115      	bne.n	800415e <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b04      	cmp	r3, #4
 800413c:	d107      	bne.n	800414e <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f002 f9de 	bl	8006508 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800414c:	e00e      	b.n	800416c <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7ff fc4a 	bl	80039f0 <HAL_SPI_TxRxCpltCallback>
}
 800415c:	e006      	b.n	800416c <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f7ff fc4c 	bl	8003a04 <HAL_SPI_ErrorCallback>
}
 800416c:	bf00      	nop
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800418a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800418c:	f7fc fe4a 	bl	8000e24 <HAL_GetTick>
 8004190:	4603      	mov	r3, r0
 8004192:	461a      	mov	r2, r3
 8004194:	2164      	movs	r1, #100	; 0x64
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7ff ff0c 	bl	8003fb4 <SPI_EndRxTransaction>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d005      	beq.n	80041ae <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041a6:	f043 0220 	orr.w	r2, r3, #32
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d103      	bne.n	80041c6 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f002 f9a2 	bl	8006508 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80041c4:	e002      	b.n	80041cc <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7ff fc1c 	bl	8003a04 <HAL_SPI_ErrorCallback>
}
 80041cc:	bf00      	nop
 80041ce:	3708      	adds	r7, #8
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041dc:	f7fc fe22 	bl	8000e24 <HAL_GetTick>
 80041e0:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041f0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	2164      	movs	r1, #100	; 0x64
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7ff ff34 	bl	8004064 <SPI_EndRxTxTransaction>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d005      	beq.n	800420e <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004206:	f043 0220 	orr.w	r2, r3, #32
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10a      	bne.n	800422c <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004216:	2300      	movs	r3, #0
 8004218:	60bb      	str	r3, [r7, #8]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	60bb      	str	r3, [r7, #8]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	60bb      	str	r3, [r7, #8]
 800422a:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f7ff fbe1 	bl	8003a04 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8004242:	e002      	b.n	800424a <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f002 f973 	bl	8006530 <HAL_SPI_TxCpltCallback>
}
 800424a:	bf00      	nop
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b082      	sub	sp, #8
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e040      	b.n	80042e6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004268:	2b00      	cmp	r3, #0
 800426a:	d106      	bne.n	800427a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 f83a 	bl	80042ee <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2224      	movs	r2, #36	; 0x24
 800427e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 0201 	bic.w	r2, r2, #1
 800428e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 f8cb 	bl	800442c <UART_SetConfig>
 8004296:	4603      	mov	r3, r0
 8004298:	2b01      	cmp	r3, #1
 800429a:	d101      	bne.n	80042a0 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e022      	b.n	80042e6 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d002      	beq.n	80042ae <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 fb49 	bl	8004940 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042cc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f042 0201 	orr.w	r2, r2, #1
 80042dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 fbd0 	bl	8004a84 <UART_CheckIdleState>
 80042e4:	4603      	mov	r3, r0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80042f6:	bf00      	nop
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b08a      	sub	sp, #40	; 0x28
 8004306:	af02      	add	r7, sp, #8
 8004308:	60f8      	str	r0, [r7, #12]
 800430a:	60b9      	str	r1, [r7, #8]
 800430c:	603b      	str	r3, [r7, #0]
 800430e:	4613      	mov	r3, r2
 8004310:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004316:	2b20      	cmp	r3, #32
 8004318:	f040 8082 	bne.w	8004420 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d002      	beq.n	8004328 <HAL_UART_Transmit+0x26>
 8004322:	88fb      	ldrh	r3, [r7, #6]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e07a      	b.n	8004422 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004332:	2b01      	cmp	r3, #1
 8004334:	d101      	bne.n	800433a <HAL_UART_Transmit+0x38>
 8004336:	2302      	movs	r3, #2
 8004338:	e073      	b.n	8004422 <HAL_UART_Transmit+0x120>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2221      	movs	r2, #33	; 0x21
 800434e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004350:	f7fc fd68 	bl	8000e24 <HAL_GetTick>
 8004354:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	88fa      	ldrh	r2, [r7, #6]
 800435a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	88fa      	ldrh	r2, [r7, #6]
 8004362:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800436e:	d108      	bne.n	8004382 <HAL_UART_Transmit+0x80>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d104      	bne.n	8004382 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004378:	2300      	movs	r3, #0
 800437a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	61bb      	str	r3, [r7, #24]
 8004380:	e003      	b.n	800438a <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004386:	2300      	movs	r3, #0
 8004388:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004392:	e02d      	b.n	80043f0 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	9300      	str	r3, [sp, #0]
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	2200      	movs	r2, #0
 800439c:	2180      	movs	r1, #128	; 0x80
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f000 fbb9 	bl	8004b16 <UART_WaitOnFlagUntilTimeout>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e039      	b.n	8004422 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10b      	bne.n	80043cc <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	881a      	ldrh	r2, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043c0:	b292      	uxth	r2, r2
 80043c2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	3302      	adds	r3, #2
 80043c8:	61bb      	str	r3, [r7, #24]
 80043ca:	e008      	b.n	80043de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	781a      	ldrb	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	b292      	uxth	r2, r2
 80043d6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	3301      	adds	r3, #1
 80043dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1cb      	bne.n	8004394 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	9300      	str	r3, [sp, #0]
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	2200      	movs	r2, #0
 8004404:	2140      	movs	r1, #64	; 0x40
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 fb85 	bl	8004b16 <UART_WaitOnFlagUntilTimeout>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e005      	b.n	8004422 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2220      	movs	r2, #32
 800441a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800441c:	2300      	movs	r3, #0
 800441e:	e000      	b.n	8004422 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004420:	2302      	movs	r3, #2
  }
}
 8004422:	4618      	mov	r0, r3
 8004424:	3720      	adds	r7, #32
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
	...

0800442c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800442c:	b5b0      	push	{r4, r5, r7, lr}
 800442e:	b088      	sub	sp, #32
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004434:	2300      	movs	r3, #0
 8004436:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	431a      	orrs	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	69db      	ldr	r3, [r3, #28]
 800444c:	4313      	orrs	r3, r2
 800444e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	4bad      	ldr	r3, [pc, #692]	; (800470c <UART_SetConfig+0x2e0>)
 8004458:	4013      	ands	r3, r2
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	6812      	ldr	r2, [r2, #0]
 800445e:	69f9      	ldr	r1, [r7, #28]
 8004460:	430b      	orrs	r3, r1
 8004462:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68da      	ldr	r2, [r3, #12]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	430a      	orrs	r2, r1
 8004478:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4aa2      	ldr	r2, [pc, #648]	; (8004710 <UART_SetConfig+0x2e4>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d004      	beq.n	8004494 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	69fa      	ldr	r2, [r7, #28]
 8004490:	4313      	orrs	r3, r2
 8004492:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	69fa      	ldr	r2, [r7, #28]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a99      	ldr	r2, [pc, #612]	; (8004714 <UART_SetConfig+0x2e8>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d121      	bne.n	80044f6 <UART_SetConfig+0xca>
 80044b2:	4b99      	ldr	r3, [pc, #612]	; (8004718 <UART_SetConfig+0x2ec>)
 80044b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b8:	f003 0303 	and.w	r3, r3, #3
 80044bc:	2b03      	cmp	r3, #3
 80044be:	d817      	bhi.n	80044f0 <UART_SetConfig+0xc4>
 80044c0:	a201      	add	r2, pc, #4	; (adr r2, 80044c8 <UART_SetConfig+0x9c>)
 80044c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c6:	bf00      	nop
 80044c8:	080044d9 	.word	0x080044d9
 80044cc:	080044e5 	.word	0x080044e5
 80044d0:	080044df 	.word	0x080044df
 80044d4:	080044eb 	.word	0x080044eb
 80044d8:	2301      	movs	r3, #1
 80044da:	76fb      	strb	r3, [r7, #27]
 80044dc:	e0e7      	b.n	80046ae <UART_SetConfig+0x282>
 80044de:	2302      	movs	r3, #2
 80044e0:	76fb      	strb	r3, [r7, #27]
 80044e2:	e0e4      	b.n	80046ae <UART_SetConfig+0x282>
 80044e4:	2304      	movs	r3, #4
 80044e6:	76fb      	strb	r3, [r7, #27]
 80044e8:	e0e1      	b.n	80046ae <UART_SetConfig+0x282>
 80044ea:	2308      	movs	r3, #8
 80044ec:	76fb      	strb	r3, [r7, #27]
 80044ee:	e0de      	b.n	80046ae <UART_SetConfig+0x282>
 80044f0:	2310      	movs	r3, #16
 80044f2:	76fb      	strb	r3, [r7, #27]
 80044f4:	e0db      	b.n	80046ae <UART_SetConfig+0x282>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a88      	ldr	r2, [pc, #544]	; (800471c <UART_SetConfig+0x2f0>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d132      	bne.n	8004566 <UART_SetConfig+0x13a>
 8004500:	4b85      	ldr	r3, [pc, #532]	; (8004718 <UART_SetConfig+0x2ec>)
 8004502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004506:	f003 030c 	and.w	r3, r3, #12
 800450a:	2b0c      	cmp	r3, #12
 800450c:	d828      	bhi.n	8004560 <UART_SetConfig+0x134>
 800450e:	a201      	add	r2, pc, #4	; (adr r2, 8004514 <UART_SetConfig+0xe8>)
 8004510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004514:	08004549 	.word	0x08004549
 8004518:	08004561 	.word	0x08004561
 800451c:	08004561 	.word	0x08004561
 8004520:	08004561 	.word	0x08004561
 8004524:	08004555 	.word	0x08004555
 8004528:	08004561 	.word	0x08004561
 800452c:	08004561 	.word	0x08004561
 8004530:	08004561 	.word	0x08004561
 8004534:	0800454f 	.word	0x0800454f
 8004538:	08004561 	.word	0x08004561
 800453c:	08004561 	.word	0x08004561
 8004540:	08004561 	.word	0x08004561
 8004544:	0800455b 	.word	0x0800455b
 8004548:	2300      	movs	r3, #0
 800454a:	76fb      	strb	r3, [r7, #27]
 800454c:	e0af      	b.n	80046ae <UART_SetConfig+0x282>
 800454e:	2302      	movs	r3, #2
 8004550:	76fb      	strb	r3, [r7, #27]
 8004552:	e0ac      	b.n	80046ae <UART_SetConfig+0x282>
 8004554:	2304      	movs	r3, #4
 8004556:	76fb      	strb	r3, [r7, #27]
 8004558:	e0a9      	b.n	80046ae <UART_SetConfig+0x282>
 800455a:	2308      	movs	r3, #8
 800455c:	76fb      	strb	r3, [r7, #27]
 800455e:	e0a6      	b.n	80046ae <UART_SetConfig+0x282>
 8004560:	2310      	movs	r3, #16
 8004562:	76fb      	strb	r3, [r7, #27]
 8004564:	e0a3      	b.n	80046ae <UART_SetConfig+0x282>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a6d      	ldr	r2, [pc, #436]	; (8004720 <UART_SetConfig+0x2f4>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d120      	bne.n	80045b2 <UART_SetConfig+0x186>
 8004570:	4b69      	ldr	r3, [pc, #420]	; (8004718 <UART_SetConfig+0x2ec>)
 8004572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004576:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800457a:	2b30      	cmp	r3, #48	; 0x30
 800457c:	d013      	beq.n	80045a6 <UART_SetConfig+0x17a>
 800457e:	2b30      	cmp	r3, #48	; 0x30
 8004580:	d814      	bhi.n	80045ac <UART_SetConfig+0x180>
 8004582:	2b20      	cmp	r3, #32
 8004584:	d009      	beq.n	800459a <UART_SetConfig+0x16e>
 8004586:	2b20      	cmp	r3, #32
 8004588:	d810      	bhi.n	80045ac <UART_SetConfig+0x180>
 800458a:	2b00      	cmp	r3, #0
 800458c:	d002      	beq.n	8004594 <UART_SetConfig+0x168>
 800458e:	2b10      	cmp	r3, #16
 8004590:	d006      	beq.n	80045a0 <UART_SetConfig+0x174>
 8004592:	e00b      	b.n	80045ac <UART_SetConfig+0x180>
 8004594:	2300      	movs	r3, #0
 8004596:	76fb      	strb	r3, [r7, #27]
 8004598:	e089      	b.n	80046ae <UART_SetConfig+0x282>
 800459a:	2302      	movs	r3, #2
 800459c:	76fb      	strb	r3, [r7, #27]
 800459e:	e086      	b.n	80046ae <UART_SetConfig+0x282>
 80045a0:	2304      	movs	r3, #4
 80045a2:	76fb      	strb	r3, [r7, #27]
 80045a4:	e083      	b.n	80046ae <UART_SetConfig+0x282>
 80045a6:	2308      	movs	r3, #8
 80045a8:	76fb      	strb	r3, [r7, #27]
 80045aa:	e080      	b.n	80046ae <UART_SetConfig+0x282>
 80045ac:	2310      	movs	r3, #16
 80045ae:	76fb      	strb	r3, [r7, #27]
 80045b0:	e07d      	b.n	80046ae <UART_SetConfig+0x282>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a5b      	ldr	r2, [pc, #364]	; (8004724 <UART_SetConfig+0x2f8>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d120      	bne.n	80045fe <UART_SetConfig+0x1d2>
 80045bc:	4b56      	ldr	r3, [pc, #344]	; (8004718 <UART_SetConfig+0x2ec>)
 80045be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80045c6:	2bc0      	cmp	r3, #192	; 0xc0
 80045c8:	d013      	beq.n	80045f2 <UART_SetConfig+0x1c6>
 80045ca:	2bc0      	cmp	r3, #192	; 0xc0
 80045cc:	d814      	bhi.n	80045f8 <UART_SetConfig+0x1cc>
 80045ce:	2b80      	cmp	r3, #128	; 0x80
 80045d0:	d009      	beq.n	80045e6 <UART_SetConfig+0x1ba>
 80045d2:	2b80      	cmp	r3, #128	; 0x80
 80045d4:	d810      	bhi.n	80045f8 <UART_SetConfig+0x1cc>
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <UART_SetConfig+0x1b4>
 80045da:	2b40      	cmp	r3, #64	; 0x40
 80045dc:	d006      	beq.n	80045ec <UART_SetConfig+0x1c0>
 80045de:	e00b      	b.n	80045f8 <UART_SetConfig+0x1cc>
 80045e0:	2300      	movs	r3, #0
 80045e2:	76fb      	strb	r3, [r7, #27]
 80045e4:	e063      	b.n	80046ae <UART_SetConfig+0x282>
 80045e6:	2302      	movs	r3, #2
 80045e8:	76fb      	strb	r3, [r7, #27]
 80045ea:	e060      	b.n	80046ae <UART_SetConfig+0x282>
 80045ec:	2304      	movs	r3, #4
 80045ee:	76fb      	strb	r3, [r7, #27]
 80045f0:	e05d      	b.n	80046ae <UART_SetConfig+0x282>
 80045f2:	2308      	movs	r3, #8
 80045f4:	76fb      	strb	r3, [r7, #27]
 80045f6:	e05a      	b.n	80046ae <UART_SetConfig+0x282>
 80045f8:	2310      	movs	r3, #16
 80045fa:	76fb      	strb	r3, [r7, #27]
 80045fc:	e057      	b.n	80046ae <UART_SetConfig+0x282>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a49      	ldr	r2, [pc, #292]	; (8004728 <UART_SetConfig+0x2fc>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d125      	bne.n	8004654 <UART_SetConfig+0x228>
 8004608:	4b43      	ldr	r3, [pc, #268]	; (8004718 <UART_SetConfig+0x2ec>)
 800460a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004612:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004616:	d017      	beq.n	8004648 <UART_SetConfig+0x21c>
 8004618:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800461c:	d817      	bhi.n	800464e <UART_SetConfig+0x222>
 800461e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004622:	d00b      	beq.n	800463c <UART_SetConfig+0x210>
 8004624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004628:	d811      	bhi.n	800464e <UART_SetConfig+0x222>
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <UART_SetConfig+0x20a>
 800462e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004632:	d006      	beq.n	8004642 <UART_SetConfig+0x216>
 8004634:	e00b      	b.n	800464e <UART_SetConfig+0x222>
 8004636:	2300      	movs	r3, #0
 8004638:	76fb      	strb	r3, [r7, #27]
 800463a:	e038      	b.n	80046ae <UART_SetConfig+0x282>
 800463c:	2302      	movs	r3, #2
 800463e:	76fb      	strb	r3, [r7, #27]
 8004640:	e035      	b.n	80046ae <UART_SetConfig+0x282>
 8004642:	2304      	movs	r3, #4
 8004644:	76fb      	strb	r3, [r7, #27]
 8004646:	e032      	b.n	80046ae <UART_SetConfig+0x282>
 8004648:	2308      	movs	r3, #8
 800464a:	76fb      	strb	r3, [r7, #27]
 800464c:	e02f      	b.n	80046ae <UART_SetConfig+0x282>
 800464e:	2310      	movs	r3, #16
 8004650:	76fb      	strb	r3, [r7, #27]
 8004652:	e02c      	b.n	80046ae <UART_SetConfig+0x282>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a2d      	ldr	r2, [pc, #180]	; (8004710 <UART_SetConfig+0x2e4>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d125      	bne.n	80046aa <UART_SetConfig+0x27e>
 800465e:	4b2e      	ldr	r3, [pc, #184]	; (8004718 <UART_SetConfig+0x2ec>)
 8004660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004664:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004668:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800466c:	d017      	beq.n	800469e <UART_SetConfig+0x272>
 800466e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004672:	d817      	bhi.n	80046a4 <UART_SetConfig+0x278>
 8004674:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004678:	d00b      	beq.n	8004692 <UART_SetConfig+0x266>
 800467a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800467e:	d811      	bhi.n	80046a4 <UART_SetConfig+0x278>
 8004680:	2b00      	cmp	r3, #0
 8004682:	d003      	beq.n	800468c <UART_SetConfig+0x260>
 8004684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004688:	d006      	beq.n	8004698 <UART_SetConfig+0x26c>
 800468a:	e00b      	b.n	80046a4 <UART_SetConfig+0x278>
 800468c:	2300      	movs	r3, #0
 800468e:	76fb      	strb	r3, [r7, #27]
 8004690:	e00d      	b.n	80046ae <UART_SetConfig+0x282>
 8004692:	2302      	movs	r3, #2
 8004694:	76fb      	strb	r3, [r7, #27]
 8004696:	e00a      	b.n	80046ae <UART_SetConfig+0x282>
 8004698:	2304      	movs	r3, #4
 800469a:	76fb      	strb	r3, [r7, #27]
 800469c:	e007      	b.n	80046ae <UART_SetConfig+0x282>
 800469e:	2308      	movs	r3, #8
 80046a0:	76fb      	strb	r3, [r7, #27]
 80046a2:	e004      	b.n	80046ae <UART_SetConfig+0x282>
 80046a4:	2310      	movs	r3, #16
 80046a6:	76fb      	strb	r3, [r7, #27]
 80046a8:	e001      	b.n	80046ae <UART_SetConfig+0x282>
 80046aa:	2310      	movs	r3, #16
 80046ac:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a17      	ldr	r2, [pc, #92]	; (8004710 <UART_SetConfig+0x2e4>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	f040 8087 	bne.w	80047c8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046ba:	7efb      	ldrb	r3, [r7, #27]
 80046bc:	2b08      	cmp	r3, #8
 80046be:	d837      	bhi.n	8004730 <UART_SetConfig+0x304>
 80046c0:	a201      	add	r2, pc, #4	; (adr r2, 80046c8 <UART_SetConfig+0x29c>)
 80046c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c6:	bf00      	nop
 80046c8:	080046ed 	.word	0x080046ed
 80046cc:	08004731 	.word	0x08004731
 80046d0:	080046f5 	.word	0x080046f5
 80046d4:	08004731 	.word	0x08004731
 80046d8:	080046fb 	.word	0x080046fb
 80046dc:	08004731 	.word	0x08004731
 80046e0:	08004731 	.word	0x08004731
 80046e4:	08004731 	.word	0x08004731
 80046e8:	08004703 	.word	0x08004703
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046ec:	f7fe f9e4 	bl	8002ab8 <HAL_RCC_GetPCLK1Freq>
 80046f0:	6178      	str	r0, [r7, #20]
        break;
 80046f2:	e022      	b.n	800473a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046f4:	4b0d      	ldr	r3, [pc, #52]	; (800472c <UART_SetConfig+0x300>)
 80046f6:	617b      	str	r3, [r7, #20]
        break;
 80046f8:	e01f      	b.n	800473a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046fa:	f7fe f945 	bl	8002988 <HAL_RCC_GetSysClockFreq>
 80046fe:	6178      	str	r0, [r7, #20]
        break;
 8004700:	e01b      	b.n	800473a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004706:	617b      	str	r3, [r7, #20]
        break;
 8004708:	e017      	b.n	800473a <UART_SetConfig+0x30e>
 800470a:	bf00      	nop
 800470c:	efff69f3 	.word	0xefff69f3
 8004710:	40008000 	.word	0x40008000
 8004714:	40013800 	.word	0x40013800
 8004718:	40021000 	.word	0x40021000
 800471c:	40004400 	.word	0x40004400
 8004720:	40004800 	.word	0x40004800
 8004724:	40004c00 	.word	0x40004c00
 8004728:	40005000 	.word	0x40005000
 800472c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004730:	2300      	movs	r3, #0
 8004732:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	76bb      	strb	r3, [r7, #26]
        break;
 8004738:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 80f1 	beq.w	8004924 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	4613      	mov	r3, r2
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	4413      	add	r3, r2
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	429a      	cmp	r2, r3
 8004750:	d305      	bcc.n	800475e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	429a      	cmp	r2, r3
 800475c:	d902      	bls.n	8004764 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	76bb      	strb	r3, [r7, #26]
 8004762:	e0df      	b.n	8004924 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	4618      	mov	r0, r3
 8004768:	f04f 0100 	mov.w	r1, #0
 800476c:	f04f 0200 	mov.w	r2, #0
 8004770:	f04f 0300 	mov.w	r3, #0
 8004774:	020b      	lsls	r3, r1, #8
 8004776:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800477a:	0202      	lsls	r2, r0, #8
 800477c:	6879      	ldr	r1, [r7, #4]
 800477e:	6849      	ldr	r1, [r1, #4]
 8004780:	0849      	lsrs	r1, r1, #1
 8004782:	4608      	mov	r0, r1
 8004784:	f04f 0100 	mov.w	r1, #0
 8004788:	1814      	adds	r4, r2, r0
 800478a:	eb43 0501 	adc.w	r5, r3, r1
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	461a      	mov	r2, r3
 8004794:	f04f 0300 	mov.w	r3, #0
 8004798:	4620      	mov	r0, r4
 800479a:	4629      	mov	r1, r5
 800479c:	f7fb fd70 	bl	8000280 <__aeabi_uldivmod>
 80047a0:	4602      	mov	r2, r0
 80047a2:	460b      	mov	r3, r1
 80047a4:	4613      	mov	r3, r2
 80047a6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047ae:	d308      	bcc.n	80047c2 <UART_SetConfig+0x396>
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047b6:	d204      	bcs.n	80047c2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	60da      	str	r2, [r3, #12]
 80047c0:	e0b0      	b.n	8004924 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	76bb      	strb	r3, [r7, #26]
 80047c6:	e0ad      	b.n	8004924 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047d0:	d15c      	bne.n	800488c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80047d2:	7efb      	ldrb	r3, [r7, #27]
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	d828      	bhi.n	800482a <UART_SetConfig+0x3fe>
 80047d8:	a201      	add	r2, pc, #4	; (adr r2, 80047e0 <UART_SetConfig+0x3b4>)
 80047da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047de:	bf00      	nop
 80047e0:	08004805 	.word	0x08004805
 80047e4:	0800480d 	.word	0x0800480d
 80047e8:	08004815 	.word	0x08004815
 80047ec:	0800482b 	.word	0x0800482b
 80047f0:	0800481b 	.word	0x0800481b
 80047f4:	0800482b 	.word	0x0800482b
 80047f8:	0800482b 	.word	0x0800482b
 80047fc:	0800482b 	.word	0x0800482b
 8004800:	08004823 	.word	0x08004823
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004804:	f7fe f958 	bl	8002ab8 <HAL_RCC_GetPCLK1Freq>
 8004808:	6178      	str	r0, [r7, #20]
        break;
 800480a:	e013      	b.n	8004834 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800480c:	f7fe f96a 	bl	8002ae4 <HAL_RCC_GetPCLK2Freq>
 8004810:	6178      	str	r0, [r7, #20]
        break;
 8004812:	e00f      	b.n	8004834 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004814:	4b49      	ldr	r3, [pc, #292]	; (800493c <UART_SetConfig+0x510>)
 8004816:	617b      	str	r3, [r7, #20]
        break;
 8004818:	e00c      	b.n	8004834 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800481a:	f7fe f8b5 	bl	8002988 <HAL_RCC_GetSysClockFreq>
 800481e:	6178      	str	r0, [r7, #20]
        break;
 8004820:	e008      	b.n	8004834 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004826:	617b      	str	r3, [r7, #20]
        break;
 8004828:	e004      	b.n	8004834 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800482a:	2300      	movs	r3, #0
 800482c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	76bb      	strb	r3, [r7, #26]
        break;
 8004832:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d074      	beq.n	8004924 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	005a      	lsls	r2, r3, #1
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	085b      	lsrs	r3, r3, #1
 8004844:	441a      	add	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	fbb2 f3f3 	udiv	r3, r2, r3
 800484e:	b29b      	uxth	r3, r3
 8004850:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	2b0f      	cmp	r3, #15
 8004856:	d916      	bls.n	8004886 <UART_SetConfig+0x45a>
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800485e:	d212      	bcs.n	8004886 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	b29b      	uxth	r3, r3
 8004864:	f023 030f 	bic.w	r3, r3, #15
 8004868:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	085b      	lsrs	r3, r3, #1
 800486e:	b29b      	uxth	r3, r3
 8004870:	f003 0307 	and.w	r3, r3, #7
 8004874:	b29a      	uxth	r2, r3
 8004876:	89fb      	ldrh	r3, [r7, #14]
 8004878:	4313      	orrs	r3, r2
 800487a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	89fa      	ldrh	r2, [r7, #14]
 8004882:	60da      	str	r2, [r3, #12]
 8004884:	e04e      	b.n	8004924 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	76bb      	strb	r3, [r7, #26]
 800488a:	e04b      	b.n	8004924 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800488c:	7efb      	ldrb	r3, [r7, #27]
 800488e:	2b08      	cmp	r3, #8
 8004890:	d827      	bhi.n	80048e2 <UART_SetConfig+0x4b6>
 8004892:	a201      	add	r2, pc, #4	; (adr r2, 8004898 <UART_SetConfig+0x46c>)
 8004894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004898:	080048bd 	.word	0x080048bd
 800489c:	080048c5 	.word	0x080048c5
 80048a0:	080048cd 	.word	0x080048cd
 80048a4:	080048e3 	.word	0x080048e3
 80048a8:	080048d3 	.word	0x080048d3
 80048ac:	080048e3 	.word	0x080048e3
 80048b0:	080048e3 	.word	0x080048e3
 80048b4:	080048e3 	.word	0x080048e3
 80048b8:	080048db 	.word	0x080048db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048bc:	f7fe f8fc 	bl	8002ab8 <HAL_RCC_GetPCLK1Freq>
 80048c0:	6178      	str	r0, [r7, #20]
        break;
 80048c2:	e013      	b.n	80048ec <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048c4:	f7fe f90e 	bl	8002ae4 <HAL_RCC_GetPCLK2Freq>
 80048c8:	6178      	str	r0, [r7, #20]
        break;
 80048ca:	e00f      	b.n	80048ec <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048cc:	4b1b      	ldr	r3, [pc, #108]	; (800493c <UART_SetConfig+0x510>)
 80048ce:	617b      	str	r3, [r7, #20]
        break;
 80048d0:	e00c      	b.n	80048ec <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048d2:	f7fe f859 	bl	8002988 <HAL_RCC_GetSysClockFreq>
 80048d6:	6178      	str	r0, [r7, #20]
        break;
 80048d8:	e008      	b.n	80048ec <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048de:	617b      	str	r3, [r7, #20]
        break;
 80048e0:	e004      	b.n	80048ec <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	76bb      	strb	r3, [r7, #26]
        break;
 80048ea:	bf00      	nop
    }

    if (pclk != 0U)
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d018      	beq.n	8004924 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	085a      	lsrs	r2, r3, #1
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	441a      	add	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	fbb2 f3f3 	udiv	r3, r2, r3
 8004904:	b29b      	uxth	r3, r3
 8004906:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	2b0f      	cmp	r3, #15
 800490c:	d908      	bls.n	8004920 <UART_SetConfig+0x4f4>
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004914:	d204      	bcs.n	8004920 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	60da      	str	r2, [r3, #12]
 800491e:	e001      	b.n	8004924 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004930:	7ebb      	ldrb	r3, [r7, #26]
}
 8004932:	4618      	mov	r0, r3
 8004934:	3720      	adds	r7, #32
 8004936:	46bd      	mov	sp, r7
 8004938:	bdb0      	pop	{r4, r5, r7, pc}
 800493a:	bf00      	nop
 800493c:	00f42400 	.word	0x00f42400

08004940 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00a      	beq.n	800496a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00a      	beq.n	800498c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00a      	beq.n	80049ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b2:	f003 0308 	and.w	r3, r3, #8
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00a      	beq.n	80049d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	430a      	orrs	r2, r1
 80049ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	f003 0310 	and.w	r3, r3, #16
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00a      	beq.n	80049f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	f003 0320 	and.w	r3, r3, #32
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00a      	beq.n	8004a14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d01a      	beq.n	8004a56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a3e:	d10a      	bne.n	8004a56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	430a      	orrs	r2, r1
 8004a54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00a      	beq.n	8004a78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	430a      	orrs	r2, r1
 8004a76:	605a      	str	r2, [r3, #4]
  }
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af02      	add	r7, sp, #8
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a94:	f7fc f9c6 	bl	8000e24 <HAL_GetTick>
 8004a98:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0308 	and.w	r3, r3, #8
 8004aa4:	2b08      	cmp	r3, #8
 8004aa6:	d10e      	bne.n	8004ac6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004aa8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f82d 	bl	8004b16 <UART_WaitOnFlagUntilTimeout>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e023      	b.n	8004b0e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0304 	and.w	r3, r3, #4
 8004ad0:	2b04      	cmp	r3, #4
 8004ad2:	d10e      	bne.n	8004af2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ad4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ad8:	9300      	str	r3, [sp, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f817 	bl	8004b16 <UART_WaitOnFlagUntilTimeout>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e00d      	b.n	8004b0e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2220      	movs	r2, #32
 8004af6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2220      	movs	r2, #32
 8004afc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b084      	sub	sp, #16
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	60f8      	str	r0, [r7, #12]
 8004b1e:	60b9      	str	r1, [r7, #8]
 8004b20:	603b      	str	r3, [r7, #0]
 8004b22:	4613      	mov	r3, r2
 8004b24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b26:	e05e      	b.n	8004be6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2e:	d05a      	beq.n	8004be6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b30:	f7fc f978 	bl	8000e24 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d302      	bcc.n	8004b46 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d11b      	bne.n	8004b7e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b54:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 0201 	bic.w	r2, r2, #1
 8004b64:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e043      	b.n	8004c06 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0304 	and.w	r3, r3, #4
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d02c      	beq.n	8004be6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	69db      	ldr	r3, [r3, #28]
 8004b92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b9a:	d124      	bne.n	8004be6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ba4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004bb4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689a      	ldr	r2, [r3, #8]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 0201 	bic.w	r2, r2, #1
 8004bc4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e00f      	b.n	8004c06 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	69da      	ldr	r2, [r3, #28]
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	4013      	ands	r3, r2
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	bf0c      	ite	eq
 8004bf6:	2301      	moveq	r3, #1
 8004bf8:	2300      	movne	r3, #0
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	79fb      	ldrb	r3, [r7, #7]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d091      	beq.n	8004b28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	4603      	mov	r3, r0
 8004c16:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8004c18:	79fb      	ldrb	r3, [r7, #7]
 8004c1a:	2b2f      	cmp	r3, #47	; 0x2f
 8004c1c:	d906      	bls.n	8004c2c <Hex2Num+0x1e>
 8004c1e:	79fb      	ldrb	r3, [r7, #7]
 8004c20:	2b39      	cmp	r3, #57	; 0x39
 8004c22:	d803      	bhi.n	8004c2c <Hex2Num+0x1e>
        return a - '0';
 8004c24:	79fb      	ldrb	r3, [r7, #7]
 8004c26:	3b30      	subs	r3, #48	; 0x30
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	e014      	b.n	8004c56 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8004c2c:	79fb      	ldrb	r3, [r7, #7]
 8004c2e:	2b60      	cmp	r3, #96	; 0x60
 8004c30:	d906      	bls.n	8004c40 <Hex2Num+0x32>
 8004c32:	79fb      	ldrb	r3, [r7, #7]
 8004c34:	2b66      	cmp	r3, #102	; 0x66
 8004c36:	d803      	bhi.n	8004c40 <Hex2Num+0x32>
        return (a - 'a') + 10;
 8004c38:	79fb      	ldrb	r3, [r7, #7]
 8004c3a:	3b57      	subs	r3, #87	; 0x57
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	e00a      	b.n	8004c56 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8004c40:	79fb      	ldrb	r3, [r7, #7]
 8004c42:	2b40      	cmp	r3, #64	; 0x40
 8004c44:	d906      	bls.n	8004c54 <Hex2Num+0x46>
 8004c46:	79fb      	ldrb	r3, [r7, #7]
 8004c48:	2b46      	cmp	r3, #70	; 0x46
 8004c4a:	d803      	bhi.n	8004c54 <Hex2Num+0x46>
        return (a - 'A') + 10;
 8004c4c:	79fb      	ldrb	r3, [r7, #7]
 8004c4e:	3b37      	subs	r3, #55	; 0x37
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	e000      	b.n	8004c56 <Hex2Num+0x48>
    }

    return 0;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b084      	sub	sp, #16
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
 8004c6a:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 8004c70:	2300      	movs	r3, #0
 8004c72:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8004c74:	e012      	b.n	8004c9c <ParseHexNumber+0x3a>
        sum <<= 4;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	011b      	lsls	r3, r3, #4
 8004c7a:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7ff ffc4 	bl	8004c0e <Hex2Num>
 8004c86:	4603      	mov	r3, r0
 8004c88:	461a      	mov	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	60fb      	str	r3, [r7, #12]
        ptr++;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3301      	adds	r3, #1
 8004c94:	607b      	str	r3, [r7, #4]
        i++;
 8004c96:	7afb      	ldrb	r3, [r7, #11]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	2b2f      	cmp	r3, #47	; 0x2f
 8004ca2:	d903      	bls.n	8004cac <ParseHexNumber+0x4a>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	2b39      	cmp	r3, #57	; 0x39
 8004caa:	d9e4      	bls.n	8004c76 <ParseHexNumber+0x14>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	2b60      	cmp	r3, #96	; 0x60
 8004cb2:	d903      	bls.n	8004cbc <ParseHexNumber+0x5a>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	2b66      	cmp	r3, #102	; 0x66
 8004cba:	d9dc      	bls.n	8004c76 <ParseHexNumber+0x14>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	2b40      	cmp	r3, #64	; 0x40
 8004cc2:	d903      	bls.n	8004ccc <ParseHexNumber+0x6a>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	2b46      	cmp	r3, #70	; 0x46
 8004cca:	d9d4      	bls.n	8004c76 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d002      	beq.n	8004cd8 <ParseHexNumber+0x76>
        *cnt = i;
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	7afa      	ldrb	r2, [r7, #11]
 8004cd6:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 8004cd8:	68fb      	ldr	r3, [r7, #12]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b085      	sub	sp, #20
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
 8004cea:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8004cec:	2300      	movs	r3, #0
 8004cee:	73fb      	strb	r3, [r7, #15]
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	2b2d      	cmp	r3, #45	; 0x2d
 8004cfe:	d119      	bne.n	8004d34 <ParseNumber+0x52>
        minus = 1;
 8004d00:	2301      	movs	r3, #1
 8004d02:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	3301      	adds	r3, #1
 8004d08:	607b      	str	r3, [r7, #4]
        i++;
 8004d0a:	7bbb      	ldrb	r3, [r7, #14]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8004d10:	e010      	b.n	8004d34 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	4613      	mov	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	3b30      	subs	r3, #48	; 0x30
 8004d24:	4413      	add	r3, r2
 8004d26:	60bb      	str	r3, [r7, #8]
        ptr++;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	607b      	str	r3, [r7, #4]
        i++;
 8004d2e:	7bbb      	ldrb	r3, [r7, #14]
 8004d30:	3301      	adds	r3, #1
 8004d32:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	2b2f      	cmp	r3, #47	; 0x2f
 8004d3a:	d903      	bls.n	8004d44 <ParseNumber+0x62>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	2b39      	cmp	r3, #57	; 0x39
 8004d42:	d9e6      	bls.n	8004d12 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d002      	beq.n	8004d50 <ParseNumber+0x6e>
        *cnt = i;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	7bba      	ldrb	r2, [r7, #14]
 8004d4e:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8004d50:	7bfb      	ldrb	r3, [r7, #15]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d002      	beq.n	8004d5c <ParseNumber+0x7a>
        return 0 - sum;
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	425b      	negs	r3, r3
 8004d5a:	e000      	b.n	8004d5e <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 8004d5c:	68bb      	ldr	r3, [r7, #8]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b084      	sub	sp, #16
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
 8004d72:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8004d74:	2300      	movs	r3, #0
 8004d76:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8004d78:	e019      	b.n	8004dae <ParseMAC+0x44>
    hexcnt = 1;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	2b3a      	cmp	r3, #58	; 0x3a
 8004d84:	d00e      	beq.n	8004da4 <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 8004d86:	f107 030e 	add.w	r3, r7, #14
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f7ff ff68 	bl	8004c62 <ParseHexNumber>
 8004d92:	4601      	mov	r1, r0
 8004d94:	7bfb      	ldrb	r3, [r7, #15]
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	73fa      	strb	r2, [r7, #15]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	4413      	add	r3, r2
 8004da0:	b2ca      	uxtb	r2, r1
 8004da2:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8004da4:	7bbb      	ldrb	r3, [r7, #14]
 8004da6:	461a      	mov	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4413      	add	r3, r2
 8004dac:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1e1      	bne.n	8004d7a <ParseMAC+0x10>
  }
}
 8004db6:	bf00      	nop
 8004db8:	bf00      	nop
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8004dce:	e019      	b.n	8004e04 <ParseIP+0x44>
    hexcnt = 1;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	2b2e      	cmp	r3, #46	; 0x2e
 8004dda:	d00e      	beq.n	8004dfa <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8004ddc:	f107 030e 	add.w	r3, r7, #14
 8004de0:	4619      	mov	r1, r3
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f7ff ff7d 	bl	8004ce2 <ParseNumber>
 8004de8:	4601      	mov	r1, r0
 8004dea:	7bfb      	ldrb	r3, [r7, #15]
 8004dec:	1c5a      	adds	r2, r3, #1
 8004dee:	73fa      	strb	r2, [r7, #15]
 8004df0:	461a      	mov	r2, r3
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	4413      	add	r3, r2
 8004df6:	b2ca      	uxtb	r2, r1
 8004df8:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8004dfa:	7bbb      	ldrb	r3, [r7, #14]
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4413      	add	r3, r2
 8004e02:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1e1      	bne.n	8004dd0 <ParseIP+0x10>
  }
}
 8004e0c:	bf00      	nop
 8004e0e:	bf00      	nop
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
	...

08004e18 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8004e22:	2300      	movs	r3, #0
 8004e24:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	3302      	adds	r3, #2
 8004e2a:	4934      	ldr	r1, [pc, #208]	; (8004efc <AT_ParseInfo+0xe4>)
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f002 fae7 	bl	8007400 <strtok>
 8004e32:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8004e34:	e05a      	b.n	8004eec <AT_ParseInfo+0xd4>
    switch (num++) {
 8004e36:	7afb      	ldrb	r3, [r7, #11]
 8004e38:	1c5a      	adds	r2, r3, #1
 8004e3a:	72fa      	strb	r2, [r7, #11]
 8004e3c:	2b06      	cmp	r3, #6
 8004e3e:	d84f      	bhi.n	8004ee0 <AT_ParseInfo+0xc8>
 8004e40:	a201      	add	r2, pc, #4	; (adr r2, 8004e48 <AT_ParseInfo+0x30>)
 8004e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e46:	bf00      	nop
 8004e48:	08004e65 	.word	0x08004e65
 8004e4c:	08004e73 	.word	0x08004e73
 8004e50:	08004e83 	.word	0x08004e83
 8004e54:	08004e93 	.word	0x08004e93
 8004e58:	08004ea3 	.word	0x08004ea3
 8004e5c:	08004eb3 	.word	0x08004eb3
 8004e60:	08004ec7 	.word	0x08004ec7
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2220      	movs	r2, #32
 8004e68:	68f9      	ldr	r1, [r7, #12]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f002 fa9d 	bl	80073aa <strncpy>
      break;
 8004e70:	e037      	b.n	8004ee2 <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	3320      	adds	r3, #32
 8004e76:	2218      	movs	r2, #24
 8004e78:	68f9      	ldr	r1, [r7, #12]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f002 fa95 	bl	80073aa <strncpy>
      break;
 8004e80:	e02f      	b.n	8004ee2 <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	3338      	adds	r3, #56	; 0x38
 8004e86:	2210      	movs	r2, #16
 8004e88:	68f9      	ldr	r1, [r7, #12]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f002 fa8d 	bl	80073aa <strncpy>
      break;
 8004e90:	e027      	b.n	8004ee2 <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	3348      	adds	r3, #72	; 0x48
 8004e96:	2210      	movs	r2, #16
 8004e98:	68f9      	ldr	r1, [r7, #12]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f002 fa85 	bl	80073aa <strncpy>
      break;
 8004ea0:	e01f      	b.n	8004ee2 <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	3358      	adds	r3, #88	; 0x58
 8004ea6:	2210      	movs	r2, #16
 8004ea8:	68f9      	ldr	r1, [r7, #12]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f002 fa7d 	bl	80073aa <strncpy>
      break;
 8004eb0:	e017      	b.n	8004ee2 <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f7ff ff14 	bl	8004ce2 <ParseNumber>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 8004ec4:	e00d      	b.n	8004ee2 <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 8004ec6:	490e      	ldr	r1, [pc, #56]	; (8004f00 <AT_ParseInfo+0xe8>)
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f002 fa99 	bl	8007400 <strtok>
 8004ece:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	3368      	adds	r3, #104	; 0x68
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	68f9      	ldr	r1, [r7, #12]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f002 fa66 	bl	80073aa <strncpy>
      break;
 8004ede:	e000      	b.n	8004ee2 <AT_ParseInfo+0xca>

    default: break;
 8004ee0:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8004ee2:	4906      	ldr	r1, [pc, #24]	; (8004efc <AT_ParseInfo+0xe4>)
 8004ee4:	2000      	movs	r0, #0
 8004ee6:	f002 fa8b 	bl	8007400 <strtok>
 8004eea:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1a1      	bne.n	8004e36 <AT_ParseInfo+0x1e>
  }
}
 8004ef2:	bf00      	nop
 8004ef4:	bf00      	nop
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	080087cc 	.word	0x080087cc
 8004f00:	080087d0 	.word	0x080087d0

08004f04 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	3302      	adds	r3, #2
 8004f16:	4952      	ldr	r1, [pc, #328]	; (8005060 <AT_ParseConnSettings+0x15c>)
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f002 fa71 	bl	8007400 <strtok>
 8004f1e:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8004f20:	e095      	b.n	800504e <AT_ParseConnSettings+0x14a>
    switch (num++) {
 8004f22:	7bfb      	ldrb	r3, [r7, #15]
 8004f24:	1c5a      	adds	r2, r3, #1
 8004f26:	73fa      	strb	r2, [r7, #15]
 8004f28:	2b0b      	cmp	r3, #11
 8004f2a:	d87f      	bhi.n	800502c <AT_ParseConnSettings+0x128>
 8004f2c:	a201      	add	r2, pc, #4	; (adr r2, 8004f34 <AT_ParseConnSettings+0x30>)
 8004f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f32:	bf00      	nop
 8004f34:	08004f65 	.word	0x08004f65
 8004f38:	08004f73 	.word	0x08004f73
 8004f3c:	08004f83 	.word	0x08004f83
 8004f40:	08004f97 	.word	0x08004f97
 8004f44:	08004fab 	.word	0x08004fab
 8004f48:	08004fbf 	.word	0x08004fbf
 8004f4c:	08004fcd 	.word	0x08004fcd
 8004f50:	08004fdb 	.word	0x08004fdb
 8004f54:	08004fe9 	.word	0x08004fe9
 8004f58:	08004ff7 	.word	0x08004ff7
 8004f5c:	08005005 	.word	0x08005005
 8004f60:	08005019 	.word	0x08005019
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	2221      	movs	r2, #33	; 0x21
 8004f68:	68b9      	ldr	r1, [r7, #8]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f002 fa1d 	bl	80073aa <strncpy>
      break;
 8004f70:	e05d      	b.n	800502e <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	3321      	adds	r3, #33	; 0x21
 8004f76:	2221      	movs	r2, #33	; 0x21
 8004f78:	68b9      	ldr	r1, [r7, #8]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f002 fa15 	bl	80073aa <strncpy>
      break;
 8004f80:	e055      	b.n	800502e <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8004f82:	2100      	movs	r1, #0
 8004f84:	68b8      	ldr	r0, [r7, #8]
 8004f86:	f7ff feac 	bl	8004ce2 <ParseNumber>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	b2da      	uxtb	r2, r3
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 8004f94:	e04b      	b.n	800502e <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8004f96:	2100      	movs	r1, #0
 8004f98:	68b8      	ldr	r0, [r7, #8]
 8004f9a:	f7ff fea2 	bl	8004ce2 <ParseNumber>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	b2da      	uxtb	r2, r3
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 8004fa8:	e041      	b.n	800502e <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8004faa:	2100      	movs	r1, #0
 8004fac:	68b8      	ldr	r0, [r7, #8]
 8004fae:	f7ff fe98 	bl	8004ce2 <ParseNumber>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	b2da      	uxtb	r2, r3
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8004fbc:	e037      	b.n	800502e <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	3348      	adds	r3, #72	; 0x48
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	68b8      	ldr	r0, [r7, #8]
 8004fc6:	f7ff fefb 	bl	8004dc0 <ParseIP>
      break;
 8004fca:	e030      	b.n	800502e <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	334c      	adds	r3, #76	; 0x4c
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	68b8      	ldr	r0, [r7, #8]
 8004fd4:	f7ff fef4 	bl	8004dc0 <ParseIP>
      break;
 8004fd8:	e029      	b.n	800502e <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	3350      	adds	r3, #80	; 0x50
 8004fde:	4619      	mov	r1, r3
 8004fe0:	68b8      	ldr	r0, [r7, #8]
 8004fe2:	f7ff feed 	bl	8004dc0 <ParseIP>
      break;
 8004fe6:	e022      	b.n	800502e <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	3354      	adds	r3, #84	; 0x54
 8004fec:	4619      	mov	r1, r3
 8004fee:	68b8      	ldr	r0, [r7, #8]
 8004ff0:	f7ff fee6 	bl	8004dc0 <ParseIP>
      break;
 8004ff4:	e01b      	b.n	800502e <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	3358      	adds	r3, #88	; 0x58
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	68b8      	ldr	r0, [r7, #8]
 8004ffe:	f7ff fedf 	bl	8004dc0 <ParseIP>
      break;
 8005002:	e014      	b.n	800502e <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8005004:	2100      	movs	r1, #0
 8005006:	68b8      	ldr	r0, [r7, #8]
 8005008:	f7ff fe6b 	bl	8004ce2 <ParseNumber>
 800500c:	4603      	mov	r3, r0
 800500e:	b2da      	uxtb	r2, r3
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 8005016:	e00a      	b.n	800502e <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8005018:	2100      	movs	r1, #0
 800501a:	68b8      	ldr	r0, [r7, #8]
 800501c:	f7ff fe61 	bl	8004ce2 <ParseNumber>
 8005020:	4603      	mov	r3, r0
 8005022:	b2da      	uxtb	r2, r3
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 800502a:	e000      	b.n	800502e <AT_ParseConnSettings+0x12a>

    default:
      break;
 800502c:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 800502e:	490c      	ldr	r1, [pc, #48]	; (8005060 <AT_ParseConnSettings+0x15c>)
 8005030:	2000      	movs	r0, #0
 8005032:	f002 f9e5 	bl	8007400 <strtok>
 8005036:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d007      	beq.n	800504e <AT_ParseConnSettings+0x14a>
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	3b01      	subs	r3, #1
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	2b2c      	cmp	r3, #44	; 0x2c
 8005046:	d102      	bne.n	800504e <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 8005048:	7bfb      	ldrb	r3, [r7, #15]
 800504a:	3301      	adds	r3, #1
 800504c:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	2b00      	cmp	r3, #0
 8005052:	f47f af66 	bne.w	8004f22 <AT_ParseConnSettings+0x1e>
    }
  }
}
 8005056:	bf00      	nop
 8005058:	bf00      	nop
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	080087cc 	.word	0x080087cc

08005064 <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	3302      	adds	r3, #2
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	2b31      	cmp	r3, #49	; 0x31
 8005076:	bf0c      	ite	eq
 8005078:	2301      	moveq	r3, #1
 800507a:	2300      	movne	r3, #0
 800507c:	b2db      	uxtb	r3, r3
 800507e:	461a      	mov	r2, r3
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	701a      	strb	r2, [r3, #0]
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8005090:	b590      	push	{r4, r7, lr}
 8005092:	b087      	sub	sp, #28
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
  int ret = 0;
 800509c:	2300      	movs	r3, #0
 800509e:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 80050a0:	2300      	movs	r3, #0
 80050a2:	82fb      	strh	r3, [r7, #22]
  LOCK_WIFI();

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 80050aa:	68b8      	ldr	r0, [r7, #8]
 80050ac:	f7fb f890 	bl	80001d0 <strlen>
 80050b0:	4603      	mov	r3, r0
 80050b2:	b299      	uxth	r1, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80050ba:	461a      	mov	r2, r3
 80050bc:	68b8      	ldr	r0, [r7, #8]
 80050be:	47a0      	blx	r4
 80050c0:	4603      	mov	r3, r0
 80050c2:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	dd3e      	ble.n	8005148 <AT_ExecuteCommand+0xb8>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 80050d6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	4798      	blx	r3
 80050de:	4603      	mov	r3, r0
 80050e0:	82fb      	strh	r3, [r7, #22]
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 80050e2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	dd27      	ble.n	800513a <AT_ExecuteCommand+0xaa>
 80050ea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80050ee:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80050f2:	dc22      	bgt.n	800513a <AT_ExecuteCommand+0xaa>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 80050f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80050f8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80050fc:	d105      	bne.n	800510a <AT_ExecuteCommand+0x7a>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 80050fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005102:	b29b      	uxth	r3, r3
 8005104:	3b01      	subs	r3, #1
 8005106:	b29b      	uxth	r3, r3
 8005108:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 800510a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	4413      	add	r3, r2
 8005112:	2200      	movs	r2, #0
 8005114:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 8005116:	490f      	ldr	r1, [pc, #60]	; (8005154 <AT_ExecuteCommand+0xc4>)
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f002 f959 	bl	80073d0 <strstr>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d001      	beq.n	8005128 <AT_ExecuteCommand+0x98>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8005124:	2300      	movs	r3, #0
 8005126:	e010      	b.n	800514a <AT_ExecuteCommand+0xba>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8005128:	490b      	ldr	r1, [pc, #44]	; (8005158 <AT_ExecuteCommand+0xc8>)
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f002 f950 	bl	80073d0 <strstr>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <AT_ExecuteCommand+0xaa>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8005136:	2305      	movs	r3, #5
 8005138:	e007      	b.n	800514a <AT_ExecuteCommand+0xba>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 800513a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800513e:	f113 0f04 	cmn.w	r3, #4
 8005142:	d101      	bne.n	8005148 <AT_ExecuteCommand+0xb8>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8005144:	2306      	movs	r3, #6
 8005146:	e000      	b.n	800514a <AT_ExecuteCommand+0xba>
    }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8005148:	2304      	movs	r3, #4
}
 800514a:	4618      	mov	r0, r3
 800514c:	371c      	adds	r7, #28
 800514e:	46bd      	mov	sp, r7
 8005150:	bd90      	pop	{r4, r7, pc}
 8005152:	bf00      	nop
 8005154:	080087e0 	.word	0x080087e0
 8005158:	080087ec 	.word	0x080087ec

0800515c <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
 8005168:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 800516a:	2300      	movs	r3, #0
 800516c:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 800516e:	2300      	movs	r3, #0
 8005170:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 8005172:	2300      	movs	r3, #0
 8005174:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  LOCK_WIFI();
  cmd_len = strlen((char*)cmd);
 8005176:	68b8      	ldr	r0, [r7, #8]
 8005178:	f7fb f82a 	bl	80001d0 <strlen>
 800517c:	4603      	mov	r3, r0
 800517e:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8005180:	8a7b      	ldrh	r3, [r7, #18]
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <AT_RequestSendData+0x32>
 800518a:	2302      	movs	r3, #2
 800518c:	e053      	b.n	8005236 <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800519a:	8a79      	ldrh	r1, [r7, #18]
 800519c:	68b8      	ldr	r0, [r7, #8]
 800519e:	4798      	blx	r3
 80051a0:	4603      	mov	r3, r0
 80051a2:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 80051a4:	8a3a      	ldrh	r2, [r7, #16]
 80051a6:	8a7b      	ldrh	r3, [r7, #18]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d143      	bne.n	8005234 <AT_RequestSendData+0xd8>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 80051b8:	8879      	ldrh	r1, [r7, #2]
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	4798      	blx	r3
 80051be:	4603      	mov	r3, r0
 80051c0:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 80051c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80051c6:	887b      	ldrh	r3, [r7, #2]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d131      	bne.n	8005230 <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 80051d8:	2100      	movs	r1, #0
 80051da:	6a38      	ldr	r0, [r7, #32]
 80051dc:	4798      	blx	r3
 80051de:	4603      	mov	r3, r0
 80051e0:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 80051e2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	dd19      	ble.n	800521e <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 80051ea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80051ee:	6a3a      	ldr	r2, [r7, #32]
 80051f0:	4413      	add	r3, r2
 80051f2:	2200      	movs	r2, #0
 80051f4:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 80051f6:	4912      	ldr	r1, [pc, #72]	; (8005240 <AT_RequestSendData+0xe4>)
 80051f8:	6a38      	ldr	r0, [r7, #32]
 80051fa:	f002 f8e9 	bl	80073d0 <strstr>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d001      	beq.n	8005208 <AT_RequestSendData+0xac>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8005204:	2300      	movs	r3, #0
 8005206:	e016      	b.n	8005236 <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8005208:	490e      	ldr	r1, [pc, #56]	; (8005244 <AT_RequestSendData+0xe8>)
 800520a:	6a38      	ldr	r0, [r7, #32]
 800520c:	f002 f8e0 	bl	80073d0 <strstr>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <AT_RequestSendData+0xbe>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8005216:	2305      	movs	r3, #5
 8005218:	e00d      	b.n	8005236 <AT_RequestSendData+0xda>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 800521a:	2302      	movs	r3, #2
 800521c:	e00b      	b.n	8005236 <AT_RequestSendData+0xda>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 800521e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005222:	f113 0f04 	cmn.w	r3, #4
 8005226:	d101      	bne.n	800522c <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 8005228:	2306      	movs	r3, #6
 800522a:	e004      	b.n	8005236 <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 800522c:	2302      	movs	r3, #2
 800522e:	e002      	b.n	8005236 <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8005230:	2302      	movs	r3, #2
 8005232:	e000      	b.n	8005236 <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8005234:	2304      	movs	r3, #4
}
 8005236:	4618      	mov	r0, r3
 8005238:	3718      	adds	r7, #24
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	080087e0 	.word	0x080087e0
 8005244:	080087ec 	.word	0x080087ec

08005248 <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8005248:	b590      	push	{r4, r7, lr}
 800524a:	b087      	sub	sp, #28
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
 8005254:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800525c:	613b      	str	r3, [r7, #16]

  LOCK_WIFI();
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8005264:	68b8      	ldr	r0, [r7, #8]
 8005266:	f7fa ffb3 	bl	80001d0 <strlen>
 800526a:	4603      	mov	r3, r0
 800526c:	b299      	uxth	r1, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8005274:	461a      	mov	r2, r3
 8005276:	68b8      	ldr	r0, [r7, #8]
 8005278:	47a0      	blx	r4
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	dd6f      	ble.n	8005360 <AT_RequestReceiveData+0x118>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800528c:	2100      	movs	r1, #0
 800528e:	6938      	ldr	r0, [r7, #16]
 8005290:	4798      	blx	r3
 8005292:	4603      	mov	r3, r0
 8005294:	617b      	str	r3, [r7, #20]
    if ((p[0]!='\r') || (p[1]!='\n'))
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	2b0d      	cmp	r3, #13
 800529c:	d104      	bne.n	80052a8 <AT_RequestReceiveData+0x60>
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	3301      	adds	r3, #1
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	2b0a      	cmp	r3, #10
 80052a6:	d001      	beq.n	80052ac <AT_RequestReceiveData+0x64>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
 80052a8:	2304      	movs	r3, #4
 80052aa:	e05a      	b.n	8005362 <AT_RequestReceiveData+0x11a>
    }
    len-=2;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	3b02      	subs	r3, #2
 80052b0:	617b      	str	r3, [r7, #20]
    p+=2;
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	3302      	adds	r3, #2
 80052b6:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	2b07      	cmp	r3, #7
 80052bc:	d94a      	bls.n	8005354 <AT_RequestReceiveData+0x10c>
    {
     while(len && (p[len-1]==0x15)) len--;
 80052be:	e002      	b.n	80052c6 <AT_RequestReceiveData+0x7e>
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	3b01      	subs	r3, #1
 80052c4:	617b      	str	r3, [r7, #20]
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d006      	beq.n	80052da <AT_RequestReceiveData+0x92>
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	3b01      	subs	r3, #1
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	4413      	add	r3, r2
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	2b15      	cmp	r3, #21
 80052d8:	d0f2      	beq.n	80052c0 <AT_RequestReceiveData+0x78>
     p[len] = '\0';
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	4413      	add	r3, r2
 80052e0:	2200      	movs	r2, #0
 80052e2:	701a      	strb	r2, [r3, #0]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	3b08      	subs	r3, #8
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	4413      	add	r3, r2
 80052ec:	491f      	ldr	r1, [pc, #124]	; (800536c <AT_RequestReceiveData+0x124>)
 80052ee:	4618      	mov	r0, r3
 80052f0:	f002 f86e 	bl	80073d0 <strstr>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d016      	beq.n	8005328 <AT_RequestReceiveData+0xe0>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	3b08      	subs	r3, #8
 8005300:	b29a      	uxth	r2, r3
 8005302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005304:	801a      	strh	r2, [r3, #0]
	   if (*ReadData > Reqlen)
 8005306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005308:	881b      	ldrh	r3, [r3, #0]
 800530a:	887a      	ldrh	r2, [r7, #2]
 800530c:	429a      	cmp	r2, r3
 800530e:	d202      	bcs.n	8005316 <AT_RequestReceiveData+0xce>
       {
         *ReadData = Reqlen;
 8005310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005312:	887a      	ldrh	r2, [r7, #2]
 8005314:	801a      	strh	r2, [r3, #0]
       }
       memcpy(pdata, p, *ReadData);
 8005316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005318:	881b      	ldrh	r3, [r3, #0]
 800531a:	461a      	mov	r2, r3
 800531c:	6939      	ldr	r1, [r7, #16]
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f001 ff5e 	bl	80071e0 <memcpy>
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_OK;
 8005324:	2300      	movs	r3, #0
 8005326:	e01c      	b.n	8005362 <AT_RequestReceiveData+0x11a>
     }
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	3b04      	subs	r3, #4
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	4413      	add	r3, r2
 8005330:	2204      	movs	r2, #4
 8005332:	490f      	ldr	r1, [pc, #60]	; (8005370 <AT_RequestReceiveData+0x128>)
 8005334:	4618      	mov	r0, r3
 8005336:	f001 ff45 	bl	80071c4 <memcmp>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d104      	bne.n	800534a <AT_RequestReceiveData+0x102>
     {
       *ReadData = 0;
 8005340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005342:	2200      	movs	r2, #0
 8005344:	801a      	strh	r2, [r3, #0]
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8005346:	2305      	movs	r3, #5
 8005348:	e00b      	b.n	8005362 <AT_RequestReceiveData+0x11a>
     }

     UNLOCK_WIFI();
     *ReadData = 0;
 800534a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534c:	2200      	movs	r2, #0
 800534e:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8005350:	2305      	movs	r3, #5
 8005352:	e006      	b.n	8005362 <AT_RequestReceiveData+0x11a>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f113 0f04 	cmn.w	r3, #4
 800535a:	d101      	bne.n	8005360 <AT_RequestReceiveData+0x118>
   {
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
 800535c:	2306      	movs	r3, #6
 800535e:	e000      	b.n	8005362 <AT_RequestReceiveData+0x11a>
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8005360:	2304      	movs	r3, #4
}
 8005362:	4618      	mov	r0, r3
 8005364:	371c      	adds	r7, #28
 8005366:	46bd      	mov	sp, r7
 8005368:	bd90      	pop	{r4, r7, pc}
 800536a:	bf00      	nop
 800536c:	080087e0 	.word	0x080087e0
 8005370:	080087f4 	.word	0x080087f4

08005374 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800537c:	2302      	movs	r3, #2
 800537e:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f247 5230 	movw	r2, #30000	; 0x7530
 8005386:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8005390:	2000      	movs	r0, #0
 8005392:	4798      	blx	r3
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d113      	bne.n	80053c2 <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80053a0:	461a      	mov	r2, r3
 80053a2:	490a      	ldr	r1, [pc, #40]	; (80053cc <ES_WIFI_Init+0x58>)
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f7ff fe73 	bl	8005090 <AT_ExecuteCommand>
 80053aa:	4603      	mov	r3, r0
 80053ac:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 80053ae:	7bfb      	ldrb	r3, [r7, #15]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d106      	bne.n	80053c2 <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80053ba:	4619      	mov	r1, r3
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f7ff fd2b 	bl	8004e18 <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
  return ret;
 80053c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	080087fc 	.word	0x080087fc

080053d0 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
 80053dc:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00b      	beq.n	80053fc <ES_WIFI_RegisterBusIO+0x2c>
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d008      	beq.n	80053fc <ES_WIFI_RegisterBusIO+0x2c>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d005      	beq.n	80053fc <ES_WIFI_RegisterBusIO+0x2c>
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d002      	beq.n	80053fc <ES_WIFI_RegisterBusIO+0x2c>
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 80053fc:	2302      	movs	r3, #2
 80053fe:	e014      	b.n	800542a <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	69ba      	ldr	r2, [r7, #24]
 8005414:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	69fa      	ldr	r2, [r7, #28]
 800541c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	683a      	ldr	r2, [r7, #0]
 8005424:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
	...

08005438 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
 8005444:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	4932      	ldr	r1, [pc, #200]	; (8005518 <ES_WIFI_Connect+0xe0>)
 8005450:	4618      	mov	r0, r3
 8005452:	f001 ff69 	bl	8007328 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005462:	461a      	mov	r2, r3
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f7ff fe13 	bl	8005090 <AT_ExecuteCommand>
 800546a:	4603      	mov	r3, r0
 800546c:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 800546e:	7dfb      	ldrb	r3, [r7, #23]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d14b      	bne.n	800550c <ES_WIFI_Connect+0xd4>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	4927      	ldr	r1, [pc, #156]	; (800551c <ES_WIFI_Connect+0xe4>)
 800547e:	4618      	mov	r0, r3
 8005480:	f001 ff52 	bl	8007328 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005490:	461a      	mov	r2, r3
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f7ff fdfc 	bl	8005090 <AT_ExecuteCommand>
 8005498:	4603      	mov	r3, r0
 800549a:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 800549c:	7dfb      	ldrb	r3, [r7, #23]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d134      	bne.n	800550c <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	78fa      	ldrb	r2, [r7, #3]
 80054a6:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80054b0:	78fa      	ldrb	r2, [r7, #3]
 80054b2:	491b      	ldr	r1, [pc, #108]	; (8005520 <ES_WIFI_Connect+0xe8>)
 80054b4:	4618      	mov	r0, r3
 80054b6:	f001 ff37 	bl	8007328 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80054c6:	461a      	mov	r2, r3
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f7ff fde1 	bl	8005090 <AT_ExecuteCommand>
 80054ce:	4603      	mov	r3, r0
 80054d0:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 80054d2:	7dfb      	ldrb	r3, [r7, #23]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d119      	bne.n	800550c <ES_WIFI_Connect+0xd4>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80054de:	4911      	ldr	r1, [pc, #68]	; (8005524 <ES_WIFI_Connect+0xec>)
 80054e0:	4618      	mov	r0, r3
 80054e2:	f001 ff21 	bl	8007328 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80054f2:	461a      	mov	r2, r3
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f7ff fdcb 	bl	8005090 <AT_ExecuteCommand>
 80054fa:	4603      	mov	r3, r0
 80054fc:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 80054fe:	7dfb      	ldrb	r3, [r7, #23]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d103      	bne.n	800550c <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 800550c:	7dfb      	ldrb	r3, [r7, #23]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3718      	adds	r7, #24
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	08008814 	.word	0x08008814
 800551c:	0800881c 	.word	0x0800881c
 8005520:	08008824 	.word	0x08008824
 8005524:	0800882c 	.word	0x0800882c

08005528 <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005536:	4911      	ldr	r1, [pc, #68]	; (800557c <ES_WIFI_IsConnected+0x54>)
 8005538:	4618      	mov	r0, r3
 800553a:	f001 fef5 	bl	8007328 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800554a:	461a      	mov	r2, r3
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f7ff fd9f 	bl	8005090 <AT_ExecuteCommand>
 8005552:	4603      	mov	r3, r0
 8005554:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8005556:	7bfb      	ldrb	r3, [r7, #15]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d108      	bne.n	800556e <ES_WIFI_IsConnected+0x46>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	33d2      	adds	r3, #210	; 0xd2
 8005566:	4619      	mov	r1, r3
 8005568:	4610      	mov	r0, r2
 800556a:	f7ff fd7b 	bl	8005064 <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	08008830 	.word	0x08008830

08005580 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800558e:	4910      	ldr	r1, [pc, #64]	; (80055d0 <ES_WIFI_GetNetworkSettings+0x50>)
 8005590:	4618      	mov	r0, r3
 8005592:	f001 fec9 	bl	8007328 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80055a2:	461a      	mov	r2, r3
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f7ff fd73 	bl	8005090 <AT_ExecuteCommand>
 80055aa:	4603      	mov	r3, r0
 80055ac:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 80055ae:	7bfb      	ldrb	r3, [r7, #15]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d108      	bne.n	80055c6 <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f503 7294 	add.w	r2, r3, #296	; 0x128
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	338d      	adds	r3, #141	; 0x8d
 80055be:	4619      	mov	r1, r3
 80055c0:	4610      	mov	r0, r2
 80055c2:	f7ff fc9f 	bl	8004f04 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();
  return ret;
 80055c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	08008838 	.word	0x08008838

080055d4 <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80055e4:	4912      	ldr	r1, [pc, #72]	; (8005630 <ES_WIFI_GetMACAddress+0x5c>)
 80055e6:	4618      	mov	r0, r3
 80055e8:	f001 fe9e 	bl	8007328 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80055f8:	461a      	mov	r2, r3
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7ff fd48 	bl	8005090 <AT_ExecuteCommand>
 8005600:	4603      	mov	r3, r0
 8005602:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8005604:	7bfb      	ldrb	r3, [r7, #15]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10c      	bne.n	8005624 <ES_WIFI_GetMACAddress+0x50>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005610:	3302      	adds	r3, #2
 8005612:	4908      	ldr	r1, [pc, #32]	; (8005634 <ES_WIFI_GetMACAddress+0x60>)
 8005614:	4618      	mov	r0, r3
 8005616:	f001 fef3 	bl	8007400 <strtok>
 800561a:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 800561c:	6839      	ldr	r1, [r7, #0]
 800561e:	68b8      	ldr	r0, [r7, #8]
 8005620:	f7ff fba3 	bl	8004d6a <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 8005624:	7bfb      	ldrb	r3, [r7, #15]
}
 8005626:	4618      	mov	r0, r3
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	08008888 	.word	0x08008888
 8005634:	0800888c 	.word	0x0800888c

08005638 <ES_WIFI_StartServerSingleConn>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartServerSingleConn(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8005642:	2300      	movs	r3, #0
 8005644:	73fb      	strb	r3, [r7, #15]
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	785b      	ldrb	r3, [r3, #1]
 8005650:	461a      	mov	r2, r3
 8005652:	4949      	ldr	r1, [pc, #292]	; (8005778 <ES_WIFI_StartServerSingleConn+0x140>)
 8005654:	f001 fe68 	bl	8007328 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005664:	461a      	mov	r2, r3
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7ff fd12 	bl	8005090 <AT_ExecuteCommand>
 800566c:	4603      	mov	r3, r0
 800566e:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 8005670:	7bfb      	ldrb	r3, [r7, #15]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <ES_WIFI_StartServerSingleConn+0x42>
  {
    UNLOCK_WIFI();
    return ret;
 8005676:	7bfb      	ldrb	r3, [r7, #15]
 8005678:	e079      	b.n	800576e <ES_WIFI_StartServerSingleConn+0x136>
  }

  if ((conn->Type != ES_WIFI_UDP_CONNECTION) && (conn->Type != ES_WIFI_UDP_LITE_CONNECTION))
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d016      	beq.n	80056b0 <ES_WIFI_StartServerSingleConn+0x78>
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	2b02      	cmp	r3, #2
 8005688:	d012      	beq.n	80056b0 <ES_WIFI_StartServerSingleConn+0x78>
  {
    sprintf((char*)Obj->CmdData,"PK=1,3000\r");
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005690:	493a      	ldr	r1, [pc, #232]	; (800577c <ES_WIFI_StartServerSingleConn+0x144>)
 8005692:	4618      	mov	r0, r3
 8005694:	f001 fe48 	bl	8007328 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80056a4:	461a      	mov	r2, r3
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f7ff fcf2 	bl	8005090 <AT_ExecuteCommand>
 80056ac:	4603      	mov	r3, r0
 80056ae:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == ES_WIFI_STATUS_OK)
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d15a      	bne.n	800576c <ES_WIFI_StartServerSingleConn+0x134>
  {
      sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	461a      	mov	r2, r3
 80056c2:	492f      	ldr	r1, [pc, #188]	; (8005780 <ES_WIFI_StartServerSingleConn+0x148>)
 80056c4:	f001 fe30 	bl	8007328 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80056d4:	461a      	mov	r2, r3
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7ff fcda 	bl	8005090 <AT_ExecuteCommand>
 80056dc:	4603      	mov	r3, r0
 80056de:	73fb      	strb	r3, [r7, #15]
      if(ret == ES_WIFI_STATUS_OK)
 80056e0:	7bfb      	ldrb	r3, [r7, #15]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d142      	bne.n	800576c <ES_WIFI_StartServerSingleConn+0x134>
      {
        sprintf((char*)Obj->CmdData,"P8=%d\r", conn->Backlog);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	7c1b      	ldrb	r3, [r3, #16]
 80056f0:	461a      	mov	r2, r3
 80056f2:	4924      	ldr	r1, [pc, #144]	; (8005784 <ES_WIFI_StartServerSingleConn+0x14c>)
 80056f4:	f001 fe18 	bl	8007328 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005704:	461a      	mov	r2, r3
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7ff fcc2 	bl	8005090 <AT_ExecuteCommand>
 800570c:	4603      	mov	r3, r0
 800570e:	73fb      	strb	r3, [r7, #15]
        if (ret == ES_WIFI_STATUS_OK)
 8005710:	7bfb      	ldrb	r3, [r7, #15]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d12a      	bne.n	800576c <ES_WIFI_StartServerSingleConn+0x134>
		    {
		      sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	889b      	ldrh	r3, [r3, #4]
 8005720:	461a      	mov	r2, r3
 8005722:	4919      	ldr	r1, [pc, #100]	; (8005788 <ES_WIFI_StartServerSingleConn+0x150>)
 8005724:	f001 fe00 	bl	8007328 <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005734:	461a      	mov	r2, r3
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7ff fcaa 	bl	8005090 <AT_ExecuteCommand>
 800573c:	4603      	mov	r3, r0
 800573e:	73fb      	strb	r3, [r7, #15]
          if (ret == ES_WIFI_STATUS_OK)
 8005740:	7bfb      	ldrb	r3, [r7, #15]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d112      	bne.n	800576c <ES_WIFI_StartServerSingleConn+0x134>
          {
            // multi accept mode
            sprintf((char*)Obj->CmdData,"P5=11\r");
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800574c:	490f      	ldr	r1, [pc, #60]	; (800578c <ES_WIFI_StartServerSingleConn+0x154>)
 800574e:	4618      	mov	r0, r3
 8005750:	f001 fdea 	bl	8007328 <siprintf>
            ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005760:	461a      	mov	r2, r3
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7ff fc94 	bl	8005090 <AT_ExecuteCommand>
 8005768:	4603      	mov	r3, r0
 800576a:	73fb      	strb	r3, [r7, #15]
          }
        }
      }
	}
  UNLOCK_WIFI();
  return ret;
 800576c:	7bfb      	ldrb	r3, [r7, #15]
}
 800576e:	4618      	mov	r0, r3
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	080088f0 	.word	0x080088f0
 800577c:	08008938 	.word	0x08008938
 8005780:	080088f8 	.word	0x080088f8
 8005784:	08008944 	.word	0x08008944
 8005788:	08008900 	.word	0x08008900
 800578c:	0800894c 	.word	0x0800894c

08005790 <ES_WIFI_WaitServerConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_WaitServerConnection(ES_WIFIObject_t *Obj,uint32_t timeout,ES_WIFI_Conn_t *conn)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b08a      	sub	sp, #40	; 0x28
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 800579c:	2300      	movs	r3, #0
 800579e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t      t;
  uint32_t      tlast;
  uint32_t      tstart;
  char          *ptr;

  tstart=HAL_GetTick();
 80057a2:	f7fb fb3f 	bl	8000e24 <HAL_GetTick>
 80057a6:	6278      	str	r0, [r7, #36]	; 0x24
  tlast=tstart+timeout;
 80057a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	4413      	add	r3, r2
 80057ae:	61fb      	str	r3, [r7, #28]
  if (tlast < tstart )
 80057b0:	69fa      	ldr	r2, [r7, #28]
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d201      	bcs.n	80057bc <ES_WIFI_WaitServerConnection+0x2c>
  {
	   tstart=0;
 80057b8:	2300      	movs	r3, #0
 80057ba:	627b      	str	r3, [r7, #36]	; 0x24

  do
  {
#if (ES_WIFI_USE_UART == 0)
    // mandatory to flush MR async messages
    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80057c2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80057c6:	2100      	movs	r1, #0
 80057c8:	4618      	mov	r0, r3
 80057ca:	f001 fd17 	bl	80071fc <memset>
    sprintf((char*)Obj->CmdData,"MR\r");
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80057d4:	4972      	ldr	r1, [pc, #456]	; (80059a0 <ES_WIFI_WaitServerConnection+0x210>)
 80057d6:	4618      	mov	r0, r3
 80057d8:	f001 fda6 	bl	8007328 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80057e8:	461a      	mov	r2, r3
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f7ff fc50 	bl	8005090 <AT_ExecuteCommand>
 80057f0:	4603      	mov	r3, r0
 80057f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if(ret == ES_WIFI_STATUS_OK)
 80057f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d136      	bne.n	800586c <ES_WIFI_WaitServerConnection+0xdc>
    {
      if((strstr((char *)Obj->CmdData, "[SOMA]")) && (strstr((char *)Obj->CmdData, "[EOMA]")))
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005804:	4967      	ldr	r1, [pc, #412]	; (80059a4 <ES_WIFI_WaitServerConnection+0x214>)
 8005806:	4618      	mov	r0, r3
 8005808:	f001 fde2 	bl	80073d0 <strstr>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d03b      	beq.n	800588a <ES_WIFI_WaitServerConnection+0xfa>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005818:	4963      	ldr	r1, [pc, #396]	; (80059a8 <ES_WIFI_WaitServerConnection+0x218>)
 800581a:	4618      	mov	r0, r3
 800581c:	f001 fdd8 	bl	80073d0 <strstr>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d031      	beq.n	800588a <ES_WIFI_WaitServerConnection+0xfa>
      {
        if(strstr((char *)Obj->CmdData, "Accepted"))
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800582c:	495f      	ldr	r1, [pc, #380]	; (80059ac <ES_WIFI_WaitServerConnection+0x21c>)
 800582e:	4618      	mov	r0, r3
 8005830:	f001 fdce 	bl	80073d0 <strstr>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d127      	bne.n	800588a <ES_WIFI_WaitServerConnection+0xfa>
        {
         //printf("SOMA Accepted\n");
        }
        else if(!strstr((char *)Obj->CmdData,"[SOMA][EOMA]"))
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005840:	495b      	ldr	r1, [pc, #364]	; (80059b0 <ES_WIFI_WaitServerConnection+0x220>)
 8005842:	4618      	mov	r0, r3
 8005844:	f001 fdc4 	bl	80073d0 <strstr>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d11d      	bne.n	800588a <ES_WIFI_WaitServerConnection+0xfa>
        {
          DEBUG("Bad MR stntax msg %s\n", Obj->CmdData);
 800584e:	f240 724c 	movw	r2, #1868	; 0x74c
 8005852:	4958      	ldr	r1, [pc, #352]	; (80059b4 <ES_WIFI_WaitServerConnection+0x224>)
 8005854:	4858      	ldr	r0, [pc, #352]	; (80059b8 <ES_WIFI_WaitServerConnection+0x228>)
 8005856:	f001 fcd9 	bl	800720c <iprintf>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005860:	4619      	mov	r1, r3
 8005862:	4856      	ldr	r0, [pc, #344]	; (80059bc <ES_WIFI_WaitServerConnection+0x22c>)
 8005864:	f001 fcd2 	bl	800720c <iprintf>
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 8005868:	2302      	movs	r3, #2
 800586a:	e095      	b.n	8005998 <ES_WIFI_WaitServerConnection+0x208>
        }
      }
    }
    else
    {
      DEBUG("MR command failed %s\n", Obj->CmdData);
 800586c:	f240 7254 	movw	r2, #1876	; 0x754
 8005870:	4950      	ldr	r1, [pc, #320]	; (80059b4 <ES_WIFI_WaitServerConnection+0x224>)
 8005872:	4851      	ldr	r0, [pc, #324]	; (80059b8 <ES_WIFI_WaitServerConnection+0x228>)
 8005874:	f001 fcca 	bl	800720c <iprintf>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800587e:	4619      	mov	r1, r3
 8005880:	484f      	ldr	r0, [pc, #316]	; (80059c0 <ES_WIFI_WaitServerConnection+0x230>)
 8005882:	f001 fcc3 	bl	800720c <iprintf>
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_ERROR;
 8005886:	2302      	movs	r3, #2
 8005888:	e086      	b.n	8005998 <ES_WIFI_WaitServerConnection+0x208>
    }
#endif

    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005890:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005894:	2100      	movs	r1, #0
 8005896:	4618      	mov	r0, r3
 8005898:	f001 fcb0 	bl	80071fc <memset>
    sprintf((char*)Obj->CmdData,"P?\r");
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80058a2:	4948      	ldr	r1, [pc, #288]	; (80059c4 <ES_WIFI_WaitServerConnection+0x234>)
 80058a4:	4618      	mov	r0, r3
 80058a6:	f001 fd3f 	bl	8007328 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80058b6:	461a      	mov	r2, r3
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f7ff fbe9 	bl	8005090 <AT_ExecuteCommand>
 80058be:	4603      	mov	r3, r0
 80058c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if(ret == ES_WIFI_STATUS_OK)
 80058c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d13f      	bne.n	800594c <ES_WIFI_WaitServerConnection+0x1bc>
    {
      if (strncmp((char *)Obj->CmdData, "\r\n0,0.0.0.0,",12)!=0)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80058d2:	220c      	movs	r2, #12
 80058d4:	493c      	ldr	r1, [pc, #240]	; (80059c8 <ES_WIFI_WaitServerConnection+0x238>)
 80058d6:	4618      	mov	r0, r3
 80058d8:	f001 fd55 	bl	8007386 <strncmp>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d043      	beq.n	800596a <ES_WIFI_WaitServerConnection+0x1da>
      {
        ptr = strtok((char *)Obj->CmdData + 2, ",");
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80058e8:	3302      	adds	r3, #2
 80058ea:	4938      	ldr	r1, [pc, #224]	; (80059cc <ES_WIFI_WaitServerConnection+0x23c>)
 80058ec:	4618      	mov	r0, r3
 80058ee:	f001 fd87 	bl	8007400 <strtok>
 80058f2:	6178      	str	r0, [r7, #20]
        ptr = strtok(0, ","); //port
 80058f4:	4935      	ldr	r1, [pc, #212]	; (80059cc <ES_WIFI_WaitServerConnection+0x23c>)
 80058f6:	2000      	movs	r0, #0
 80058f8:	f001 fd82 	bl	8007400 <strtok>
 80058fc:	6178      	str	r0, [r7, #20]
        ParseIP((char *)ptr, conn->RemoteIP);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	3306      	adds	r3, #6
 8005902:	4619      	mov	r1, r3
 8005904:	6978      	ldr	r0, [r7, #20]
 8005906:	f7ff fa5b 	bl	8004dc0 <ParseIP>
        ptr = strtok(0, ","); //port
 800590a:	4930      	ldr	r1, [pc, #192]	; (80059cc <ES_WIFI_WaitServerConnection+0x23c>)
 800590c:	2000      	movs	r0, #0
 800590e:	f001 fd77 	bl	8007400 <strtok>
 8005912:	6178      	str	r0, [r7, #20]
        conn->LocalPort=ParseNumber(ptr,0);
 8005914:	2100      	movs	r1, #0
 8005916:	6978      	ldr	r0, [r7, #20]
 8005918:	f7ff f9e3 	bl	8004ce2 <ParseNumber>
 800591c:	4603      	mov	r3, r0
 800591e:	b29a      	uxth	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	809a      	strh	r2, [r3, #4]
        ptr = strtok(0, ","); //ip
 8005924:	4929      	ldr	r1, [pc, #164]	; (80059cc <ES_WIFI_WaitServerConnection+0x23c>)
 8005926:	2000      	movs	r0, #0
 8005928:	f001 fd6a 	bl	8007400 <strtok>
 800592c:	6178      	str	r0, [r7, #20]
        ptr = strtok(0, ","); //remote port
 800592e:	4927      	ldr	r1, [pc, #156]	; (80059cc <ES_WIFI_WaitServerConnection+0x23c>)
 8005930:	2000      	movs	r0, #0
 8005932:	f001 fd65 	bl	8007400 <strtok>
 8005936:	6178      	str	r0, [r7, #20]
        conn->RemotePort=ParseNumber(ptr,0);
 8005938:	2100      	movs	r1, #0
 800593a:	6978      	ldr	r0, [r7, #20]
 800593c:	f7ff f9d1 	bl	8004ce2 <ParseNumber>
 8005940:	4603      	mov	r3, r0
 8005942:	b29a      	uxth	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	805a      	strh	r2, [r3, #2]
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8005948:	2300      	movs	r3, #0
 800594a:	e025      	b.n	8005998 <ES_WIFI_WaitServerConnection+0x208>
      }
    }
    else
    {
      DEBUG("P? command failed %s\n", Obj->CmdData);
 800594c:	f240 726f 	movw	r2, #1903	; 0x76f
 8005950:	4918      	ldr	r1, [pc, #96]	; (80059b4 <ES_WIFI_WaitServerConnection+0x224>)
 8005952:	4819      	ldr	r0, [pc, #100]	; (80059b8 <ES_WIFI_WaitServerConnection+0x228>)
 8005954:	f001 fc5a 	bl	800720c <iprintf>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800595e:	4619      	mov	r1, r3
 8005960:	481b      	ldr	r0, [pc, #108]	; (80059d0 <ES_WIFI_WaitServerConnection+0x240>)
 8005962:	f001 fc53 	bl	800720c <iprintf>
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_ERROR;
 8005966:	2302      	movs	r3, #2
 8005968:	e016      	b.n	8005998 <ES_WIFI_WaitServerConnection+0x208>
    }

    UNLOCK_WIFI();
    Obj->fops.IO_Delay(100);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8005970:	2064      	movs	r0, #100	; 0x64
 8005972:	4798      	blx	r3
    LOCK_WIFI();
    t = HAL_GetTick();
 8005974:	f7fb fa56 	bl	8000e24 <HAL_GetTick>
 8005978:	61b8      	str	r0, [r7, #24]
  }
  while ((timeout==0) ||((t < tlast) || (t < tstart)));
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	2b00      	cmp	r3, #0
 800597e:	f43f af1d 	beq.w	80057bc <ES_WIFI_WaitServerConnection+0x2c>
 8005982:	69ba      	ldr	r2, [r7, #24]
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	429a      	cmp	r2, r3
 8005988:	f4ff af18 	bcc.w	80057bc <ES_WIFI_WaitServerConnection+0x2c>
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005990:	429a      	cmp	r2, r3
 8005992:	f4ff af13 	bcc.w	80057bc <ES_WIFI_WaitServerConnection+0x2c>
  return ES_WIFI_STATUS_TIMEOUT;
 8005996:	2303      	movs	r3, #3
}
 8005998:	4618      	mov	r0, r3
 800599a:	3728      	adds	r7, #40	; 0x28
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	0800880c 	.word	0x0800880c
 80059a4:	08008954 	.word	0x08008954
 80059a8:	0800895c 	.word	0x0800895c
 80059ac:	08008964 	.word	0x08008964
 80059b0:	08008970 	.word	0x08008970
 80059b4:	08008980 	.word	0x08008980
 80059b8:	080089a0 	.word	0x080089a0
 80059bc:	080089a8 	.word	0x080089a8
 80059c0:	080089c0 	.word	0x080089c0
 80059c4:	080089d8 	.word	0x080089d8
 80059c8:	080089dc 	.word	0x080089dc
 80059cc:	080087cc 	.word	0x080087cc
 80059d0:	080089ec 	.word	0x080089ec

080059d4 <ES_WIFI_CloseServerConnection>:
  * @param  Obj: pointer to module handle
  * @param  socket:  server socket
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_CloseServerConnection(ES_WIFIObject_t *Obj, int socket)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	4925      	ldr	r1, [pc, #148]	; (8005a7c <ES_WIFI_CloseServerConnection+0xa8>)
 80059e8:	4618      	mov	r0, r3
 80059ea:	f001 fc9d 	bl	8007328 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80059fa:	461a      	mov	r2, r3
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f7ff fb47 	bl	8005090 <AT_ExecuteCommand>
 8005a02:	4603      	mov	r3, r0
 8005a04:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 8005a06:	7bfb      	ldrb	r3, [r7, #15]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00e      	beq.n	8005a2a <ES_WIFI_CloseServerConnection+0x56>
  {
    DEBUG(" Can not select socket %s\n", Obj->CmdData);
 8005a0c:	f240 728b 	movw	r2, #1931	; 0x78b
 8005a10:	491b      	ldr	r1, [pc, #108]	; (8005a80 <ES_WIFI_CloseServerConnection+0xac>)
 8005a12:	481c      	ldr	r0, [pc, #112]	; (8005a84 <ES_WIFI_CloseServerConnection+0xb0>)
 8005a14:	f001 fbfa 	bl	800720c <iprintf>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005a1e:	4619      	mov	r1, r3
 8005a20:	4819      	ldr	r0, [pc, #100]	; (8005a88 <ES_WIFI_CloseServerConnection+0xb4>)
 8005a22:	f001 fbf3 	bl	800720c <iprintf>
    UNLOCK_WIFI();
    return ret;
 8005a26:	7bfb      	ldrb	r3, [r7, #15]
 8005a28:	e023      	b.n	8005a72 <ES_WIFI_CloseServerConnection+0x9e>
  }

  sprintf((char*)Obj->CmdData,"P5=10\r");
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005a30:	4916      	ldr	r1, [pc, #88]	; (8005a8c <ES_WIFI_CloseServerConnection+0xb8>)
 8005a32:	4618      	mov	r0, r3
 8005a34:	f001 fc78 	bl	8007328 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005a44:	461a      	mov	r2, r3
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f7ff fb22 	bl	8005090 <AT_ExecuteCommand>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 8005a50:	7bfb      	ldrb	r3, [r7, #15]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00c      	beq.n	8005a70 <ES_WIFI_CloseServerConnection+0x9c>
  {
    DEBUG(" Open next failed %s\n", Obj->CmdData);
 8005a56:	f240 7294 	movw	r2, #1940	; 0x794
 8005a5a:	4909      	ldr	r1, [pc, #36]	; (8005a80 <ES_WIFI_CloseServerConnection+0xac>)
 8005a5c:	4809      	ldr	r0, [pc, #36]	; (8005a84 <ES_WIFI_CloseServerConnection+0xb0>)
 8005a5e:	f001 fbd5 	bl	800720c <iprintf>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4809      	ldr	r0, [pc, #36]	; (8005a90 <ES_WIFI_CloseServerConnection+0xbc>)
 8005a6c:	f001 fbce 	bl	800720c <iprintf>
  }

  UNLOCK_WIFI();
  return ret;
 8005a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3710      	adds	r7, #16
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	080088f0 	.word	0x080088f0
 8005a80:	08008980 	.word	0x08008980
 8005a84:	080089a0 	.word	0x080089a0
 8005a88:	08008a04 	.word	0x08008a04
 8005a8c:	08008a20 	.word	0x08008a20
 8005a90:	08008a28 	.word	0x08008a28

08005a94 <ES_WIFI_StopServerSingleConn>:
  * @brief  Stop a Server.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopServerSingleConn(ES_WIFIObject_t *Obj, int socket)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	4926      	ldr	r1, [pc, #152]	; (8005b40 <ES_WIFI_StopServerSingleConn+0xac>)
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f001 fc3d 	bl	8007328 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005aba:	461a      	mov	r2, r3
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f7ff fae7 	bl	8005090 <AT_ExecuteCommand>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 8005ac6:	7bfb      	ldrb	r3, [r7, #15]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00e      	beq.n	8005aea <ES_WIFI_StopServerSingleConn+0x56>
  {
    DEBUG("Selecting socket failed: %s\n", Obj->CmdData);
 8005acc:	f240 72aa 	movw	r2, #1962	; 0x7aa
 8005ad0:	491c      	ldr	r1, [pc, #112]	; (8005b44 <ES_WIFI_StopServerSingleConn+0xb0>)
 8005ad2:	481d      	ldr	r0, [pc, #116]	; (8005b48 <ES_WIFI_StopServerSingleConn+0xb4>)
 8005ad4:	f001 fb9a 	bl	800720c <iprintf>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005ade:	4619      	mov	r1, r3
 8005ae0:	481a      	ldr	r0, [pc, #104]	; (8005b4c <ES_WIFI_StopServerSingleConn+0xb8>)
 8005ae2:	f001 fb93 	bl	800720c <iprintf>
    UNLOCK_WIFI();
    return ret;
 8005ae6:	7bfb      	ldrb	r3, [r7, #15]
 8005ae8:	e025      	b.n	8005b36 <ES_WIFI_StopServerSingleConn+0xa2>
  }

  sprintf((char*)Obj->CmdData,"P5=0\r");
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005af0:	4917      	ldr	r1, [pc, #92]	; (8005b50 <ES_WIFI_StopServerSingleConn+0xbc>)
 8005af2:	4618      	mov	r0, r3
 8005af4:	f001 fc18 	bl	8007328 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005b04:	461a      	mov	r2, r3
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7ff fac2 	bl	8005090 <AT_ExecuteCommand>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 8005b10:	7bfb      	ldrb	r3, [r7, #15]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00e      	beq.n	8005b34 <ES_WIFI_StopServerSingleConn+0xa0>
  {
    DEBUG("Stopping server failed %s\n", Obj->CmdData);
 8005b16:	f240 72b3 	movw	r2, #1971	; 0x7b3
 8005b1a:	490a      	ldr	r1, [pc, #40]	; (8005b44 <ES_WIFI_StopServerSingleConn+0xb0>)
 8005b1c:	480a      	ldr	r0, [pc, #40]	; (8005b48 <ES_WIFI_StopServerSingleConn+0xb4>)
 8005b1e:	f001 fb75 	bl	800720c <iprintf>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005b28:	4619      	mov	r1, r3
 8005b2a:	480a      	ldr	r0, [pc, #40]	; (8005b54 <ES_WIFI_StopServerSingleConn+0xc0>)
 8005b2c:	f001 fb6e 	bl	800720c <iprintf>
    UNLOCK_WIFI();
    return ret;
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
 8005b32:	e000      	b.n	8005b36 <ES_WIFI_StopServerSingleConn+0xa2>
  }

  UNLOCK_WIFI();
  return ret;
 8005b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	080088f0 	.word	0x080088f0
 8005b44:	08008980 	.word	0x08008980
 8005b48:	080089a0 	.word	0x080089a0
 8005b4c:	08008a40 	.word	0x08008a40
 8005b50:	08008a60 	.word	0x08008a60
 8005b54:	08008a68 	.word	0x08008a68

08005b58 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b088      	sub	sp, #32
 8005b5c:	af02      	add	r7, sp, #8
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	607a      	str	r2, [r7, #4]
 8005b62:	461a      	mov	r2, r3
 8005b64:	460b      	mov	r3, r1
 8005b66:	72fb      	strb	r3, [r7, #11]
 8005b68:	4613      	mov	r3, r2
 8005b6a:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d102      	bne.n	8005b7c <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 8005b76:	2301      	movs	r3, #1
 8005b78:	617b      	str	r3, [r7, #20]
 8005b7a:	e001      	b.n	8005b80 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 8005b80:	893b      	ldrh	r3, [r7, #8]
 8005b82:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8005b86:	d302      	bcc.n	8005b8e <ES_WIFI_SendData+0x36>
 8005b88:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8005b8c:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 8005b8e:	6a3b      	ldr	r3, [r7, #32]
 8005b90:	893a      	ldrh	r2, [r7, #8]
 8005b92:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005b9a:	7afa      	ldrb	r2, [r7, #11]
 8005b9c:	4942      	ldr	r1, [pc, #264]	; (8005ca8 <ES_WIFI_SendData+0x150>)
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f001 fbc2 	bl	8007328 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f7ff fa6c 	bl	8005090 <AT_ExecuteCommand>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	74fb      	strb	r3, [r7, #19]
  if(ret == ES_WIFI_STATUS_OK)
 8005bbc:	7cfb      	ldrb	r3, [r7, #19]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d15e      	bne.n	8005c80 <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	4938      	ldr	r1, [pc, #224]	; (8005cac <ES_WIFI_SendData+0x154>)
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f001 fbab 	bl	8007328 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005bde:	461a      	mov	r2, r3
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f7ff fa55 	bl	8005090 <AT_ExecuteCommand>
 8005be6:	4603      	mov	r3, r0
 8005be8:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 8005bea:	7cfb      	ldrb	r3, [r7, #19]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d13d      	bne.n	8005c6c <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005bf6:	893a      	ldrh	r2, [r7, #8]
 8005bf8:	492d      	ldr	r1, [pc, #180]	; (8005cb0 <ES_WIFI_SendData+0x158>)
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f001 fb94 	bl	8007328 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005c0c:	893a      	ldrh	r2, [r7, #8]
 8005c0e:	9300      	str	r3, [sp, #0]
 8005c10:	4613      	mov	r3, r2
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f7ff faa1 	bl	800515c <AT_RequestSendData>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	74fb      	strb	r3, [r7, #19]

      if(ret == ES_WIFI_STATUS_OK)
 8005c1e:	7cfb      	ldrb	r3, [r7, #19]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d119      	bne.n	8005c58 <ES_WIFI_SendData+0x100>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005c2a:	4922      	ldr	r1, [pc, #136]	; (8005cb4 <ES_WIFI_SendData+0x15c>)
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f001 fbcf 	bl	80073d0 <strstr>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d02c      	beq.n	8005c92 <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 8005c38:	f640 0267 	movw	r2, #2151	; 0x867
 8005c3c:	491e      	ldr	r1, [pc, #120]	; (8005cb8 <ES_WIFI_SendData+0x160>)
 8005c3e:	481f      	ldr	r0, [pc, #124]	; (8005cbc <ES_WIFI_SendData+0x164>)
 8005c40:	f001 fae4 	bl	800720c <iprintf>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	481c      	ldr	r0, [pc, #112]	; (8005cc0 <ES_WIFI_SendData+0x168>)
 8005c4e:	f001 fadd 	bl	800720c <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 8005c52:	2302      	movs	r3, #2
 8005c54:	74fb      	strb	r3, [r7, #19]
 8005c56:	e01c      	b.n	8005c92 <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 8005c58:	f640 026d 	movw	r2, #2157	; 0x86d
 8005c5c:	4916      	ldr	r1, [pc, #88]	; (8005cb8 <ES_WIFI_SendData+0x160>)
 8005c5e:	4817      	ldr	r0, [pc, #92]	; (8005cbc <ES_WIFI_SendData+0x164>)
 8005c60:	f001 fad4 	bl	800720c <iprintf>
 8005c64:	4817      	ldr	r0, [pc, #92]	; (8005cc4 <ES_WIFI_SendData+0x16c>)
 8005c66:	f001 fb57 	bl	8007318 <puts>
 8005c6a:	e012      	b.n	8005c92 <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 8005c6c:	f640 0272 	movw	r2, #2162	; 0x872
 8005c70:	4911      	ldr	r1, [pc, #68]	; (8005cb8 <ES_WIFI_SendData+0x160>)
 8005c72:	4812      	ldr	r0, [pc, #72]	; (8005cbc <ES_WIFI_SendData+0x164>)
 8005c74:	f001 faca 	bl	800720c <iprintf>
 8005c78:	4813      	ldr	r0, [pc, #76]	; (8005cc8 <ES_WIFI_SendData+0x170>)
 8005c7a:	f001 fb4d 	bl	8007318 <puts>
 8005c7e:	e008      	b.n	8005c92 <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 8005c80:	f640 0277 	movw	r2, #2167	; 0x877
 8005c84:	490c      	ldr	r1, [pc, #48]	; (8005cb8 <ES_WIFI_SendData+0x160>)
 8005c86:	480d      	ldr	r0, [pc, #52]	; (8005cbc <ES_WIFI_SendData+0x164>)
 8005c88:	f001 fac0 	bl	800720c <iprintf>
 8005c8c:	480f      	ldr	r0, [pc, #60]	; (8005ccc <ES_WIFI_SendData+0x174>)
 8005c8e:	f001 fb43 	bl	8007318 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 8005c92:	7cfb      	ldrb	r3, [r7, #19]
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d102      	bne.n	8005c9e <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 8005c98:	6a3b      	ldr	r3, [r7, #32]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 8005c9e:	7cfb      	ldrb	r3, [r7, #19]
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3718      	adds	r7, #24
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	080088f0 	.word	0x080088f0
 8005cac:	08008aac 	.word	0x08008aac
 8005cb0:	08008ab4 	.word	0x08008ab4
 8005cb4:	08008ac0 	.word	0x08008ac0
 8005cb8:	08008980 	.word	0x08008980
 8005cbc:	080089a0 	.word	0x080089a0
 8005cc0:	08008ac8 	.word	0x08008ac8
 8005cc4:	08008ae4 	.word	0x08008ae4
 8005cc8:	08008b00 	.word	0x08008b00
 8005ccc:	08008b14 	.word	0x08008b14

08005cd0 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b088      	sub	sp, #32
 8005cd4:	af02      	add	r7, sp, #8
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	607a      	str	r2, [r7, #4]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	460b      	mov	r3, r1
 8005cde:	72fb      	strb	r3, [r7, #11]
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d102      	bne.n	8005cf4 <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	617b      	str	r3, [r7, #20]
 8005cf2:	e001      	b.n	8005cf8 <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 8005cf8:	893b      	ldrh	r3, [r7, #8]
 8005cfa:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8005cfe:	f200 808b 	bhi.w	8005e18 <ES_WIFI_ReceiveData+0x148>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005d08:	7afa      	ldrb	r2, [r7, #11]
 8005d0a:	4946      	ldr	r1, [pc, #280]	; (8005e24 <ES_WIFI_ReceiveData+0x154>)
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f001 fb0b 	bl	8007328 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005d1e:	461a      	mov	r2, r3
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f7ff f9b5 	bl	8005090 <AT_ExecuteCommand>
 8005d26:	4603      	mov	r3, r0
 8005d28:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 8005d2a:	7cfb      	ldrb	r3, [r7, #19]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d165      	bne.n	8005dfc <ES_WIFI_ReceiveData+0x12c>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005d36:	893a      	ldrh	r2, [r7, #8]
 8005d38:	493b      	ldr	r1, [pc, #236]	; (8005e28 <ES_WIFI_ReceiveData+0x158>)
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f001 faf4 	bl	8007328 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f7ff f99e 	bl	8005090 <AT_ExecuteCommand>
 8005d54:	4603      	mov	r3, r0
 8005d56:	74fb      	strb	r3, [r7, #19]
      if(ret == ES_WIFI_STATUS_OK)
 8005d58:	7cfb      	ldrb	r3, [r7, #19]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d141      	bne.n	8005de2 <ES_WIFI_ReceiveData+0x112>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	4931      	ldr	r1, [pc, #196]	; (8005e2c <ES_WIFI_ReceiveData+0x15c>)
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f001 fadd 	bl	8007328 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f7ff f987 	bl	8005090 <AT_ExecuteCommand>
 8005d82:	4603      	mov	r3, r0
 8005d84:	74fb      	strb	r3, [r7, #19]
        if(ret == ES_WIFI_STATUS_OK)
 8005d86:	7cfb      	ldrb	r3, [r7, #19]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d120      	bne.n	8005dce <ES_WIFI_ReceiveData+0xfe>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005d92:	4927      	ldr	r1, [pc, #156]	; (8005e30 <ES_WIFI_ReceiveData+0x160>)
 8005d94:	4618      	mov	r0, r3
 8005d96:	f001 fac7 	bl	8007328 <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8005da0:	893a      	ldrh	r2, [r7, #8]
 8005da2:	6a3b      	ldr	r3, [r7, #32]
 8005da4:	9300      	str	r3, [sp, #0]
 8005da6:	4613      	mov	r3, r2
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f7ff fa4c 	bl	8005248 <AT_RequestReceiveData>
 8005db0:	4603      	mov	r3, r0
 8005db2:	74fb      	strb	r3, [r7, #19]
          if (ret != ES_WIFI_STATUS_OK)
 8005db4:	7cfb      	ldrb	r3, [r7, #19]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d02e      	beq.n	8005e18 <ES_WIFI_ReceiveData+0x148>
          {
            DEBUG("AT_RequestReceiveData  failed\n");
 8005dba:	f640 1208 	movw	r2, #2312	; 0x908
 8005dbe:	491d      	ldr	r1, [pc, #116]	; (8005e34 <ES_WIFI_ReceiveData+0x164>)
 8005dc0:	481d      	ldr	r0, [pc, #116]	; (8005e38 <ES_WIFI_ReceiveData+0x168>)
 8005dc2:	f001 fa23 	bl	800720c <iprintf>
 8005dc6:	481d      	ldr	r0, [pc, #116]	; (8005e3c <ES_WIFI_ReceiveData+0x16c>)
 8005dc8:	f001 faa6 	bl	8007318 <puts>
 8005dcc:	e024      	b.n	8005e18 <ES_WIFI_ReceiveData+0x148>
          }
        }
        else
        {
         DEBUG("setting timeout failed\n");
 8005dce:	f640 120d 	movw	r2, #2317	; 0x90d
 8005dd2:	4918      	ldr	r1, [pc, #96]	; (8005e34 <ES_WIFI_ReceiveData+0x164>)
 8005dd4:	4818      	ldr	r0, [pc, #96]	; (8005e38 <ES_WIFI_ReceiveData+0x168>)
 8005dd6:	f001 fa19 	bl	800720c <iprintf>
 8005dda:	4819      	ldr	r0, [pc, #100]	; (8005e40 <ES_WIFI_ReceiveData+0x170>)
 8005ddc:	f001 fa9c 	bl	8007318 <puts>
 8005de0:	e01a      	b.n	8005e18 <ES_WIFI_ReceiveData+0x148>
        }
      }
      else
      {
        DEBUG("setting requested len failed\n");
 8005de2:	f640 1212 	movw	r2, #2322	; 0x912
 8005de6:	4913      	ldr	r1, [pc, #76]	; (8005e34 <ES_WIFI_ReceiveData+0x164>)
 8005de8:	4813      	ldr	r0, [pc, #76]	; (8005e38 <ES_WIFI_ReceiveData+0x168>)
 8005dea:	f001 fa0f 	bl	800720c <iprintf>
 8005dee:	4815      	ldr	r0, [pc, #84]	; (8005e44 <ES_WIFI_ReceiveData+0x174>)
 8005df0:	f001 fa92 	bl	8007318 <puts>
        *Receivedlen = 0;
 8005df4:	6a3b      	ldr	r3, [r7, #32]
 8005df6:	2200      	movs	r2, #0
 8005df8:	801a      	strh	r2, [r3, #0]
 8005dfa:	e00d      	b.n	8005e18 <ES_WIFI_ReceiveData+0x148>
      }
    }
    else
    {
      DEBUG("setting socket for read failed\n");
 8005dfc:	f640 1218 	movw	r2, #2328	; 0x918
 8005e00:	490c      	ldr	r1, [pc, #48]	; (8005e34 <ES_WIFI_ReceiveData+0x164>)
 8005e02:	480d      	ldr	r0, [pc, #52]	; (8005e38 <ES_WIFI_ReceiveData+0x168>)
 8005e04:	f001 fa02 	bl	800720c <iprintf>
 8005e08:	480f      	ldr	r0, [pc, #60]	; (8005e48 <ES_WIFI_ReceiveData+0x178>)
 8005e0a:	f001 fa85 	bl	8007318 <puts>
      issue15++;
 8005e0e:	4b0f      	ldr	r3, [pc, #60]	; (8005e4c <ES_WIFI_ReceiveData+0x17c>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	3301      	adds	r3, #1
 8005e14:	4a0d      	ldr	r2, [pc, #52]	; (8005e4c <ES_WIFI_ReceiveData+0x17c>)
 8005e16:	6013      	str	r3, [r2, #0]
    }
  }
  UNLOCK_WIFI();
  return ret;
 8005e18:	7cfb      	ldrb	r3, [r7, #19]
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3718      	adds	r7, #24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	080088f0 	.word	0x080088f0
 8005e28:	08008b38 	.word	0x08008b38
 8005e2c:	08008b40 	.word	0x08008b40
 8005e30:	08008b48 	.word	0x08008b48
 8005e34:	08008980 	.word	0x08008980
 8005e38:	080089a0 	.word	0x080089a0
 8005e3c:	08008b4c 	.word	0x08008b4c
 8005e40:	08008b6c 	.word	0x08008b6c
 8005e44:	08008b84 	.word	0x08008b84
 8005e48:	08008ba4 	.word	0x08008ba4
 8005e4c:	200000b4 	.word	0x200000b4

08005e50 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b08c      	sub	sp, #48	; 0x30
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 8005e58:	4b56      	ldr	r3, [pc, #344]	; (8005fb4 <SPI_WIFI_MspInit+0x164>)
 8005e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e5c:	4a55      	ldr	r2, [pc, #340]	; (8005fb4 <SPI_WIFI_MspInit+0x164>)
 8005e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e62:	6593      	str	r3, [r2, #88]	; 0x58
 8005e64:	4b53      	ldr	r3, [pc, #332]	; (8005fb4 <SPI_WIFI_MspInit+0x164>)
 8005e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e6c:	61bb      	str	r3, [r7, #24]
 8005e6e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e70:	4b50      	ldr	r3, [pc, #320]	; (8005fb4 <SPI_WIFI_MspInit+0x164>)
 8005e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e74:	4a4f      	ldr	r2, [pc, #316]	; (8005fb4 <SPI_WIFI_MspInit+0x164>)
 8005e76:	f043 0302 	orr.w	r3, r3, #2
 8005e7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e7c:	4b4d      	ldr	r3, [pc, #308]	; (8005fb4 <SPI_WIFI_MspInit+0x164>)
 8005e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e80:	f003 0302 	and.w	r3, r3, #2
 8005e84:	617b      	str	r3, [r7, #20]
 8005e86:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e88:	4b4a      	ldr	r3, [pc, #296]	; (8005fb4 <SPI_WIFI_MspInit+0x164>)
 8005e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e8c:	4a49      	ldr	r2, [pc, #292]	; (8005fb4 <SPI_WIFI_MspInit+0x164>)
 8005e8e:	f043 0304 	orr.w	r3, r3, #4
 8005e92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e94:	4b47      	ldr	r3, [pc, #284]	; (8005fb4 <SPI_WIFI_MspInit+0x164>)
 8005e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e98:	f003 0304 	and.w	r3, r3, #4
 8005e9c:	613b      	str	r3, [r7, #16]
 8005e9e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005ea0:	4b44      	ldr	r3, [pc, #272]	; (8005fb4 <SPI_WIFI_MspInit+0x164>)
 8005ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ea4:	4a43      	ldr	r2, [pc, #268]	; (8005fb4 <SPI_WIFI_MspInit+0x164>)
 8005ea6:	f043 0310 	orr.w	r3, r3, #16
 8005eaa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005eac:	4b41      	ldr	r3, [pc, #260]	; (8005fb4 <SPI_WIFI_MspInit+0x164>)
 8005eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eb0:	f003 0310 	and.w	r3, r3, #16
 8005eb4:	60fb      	str	r3, [r7, #12]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ebe:	483e      	ldr	r0, [pc, #248]	; (8005fb8 <SPI_WIFI_MspInit+0x168>)
 8005ec0:	f7fb faf4 	bl	80014ac <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8005ec4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ec8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8005ed6:	f107 031c 	add.w	r3, r7, #28
 8005eda:	4619      	mov	r1, r3
 8005edc:	4836      	ldr	r0, [pc, #216]	; (8005fb8 <SPI_WIFI_MspInit+0x168>)
 8005ede:	f7fb f923 	bl	8001128 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 8005ee2:	2302      	movs	r3, #2
 8005ee4:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8005ee6:	4b35      	ldr	r3, [pc, #212]	; (8005fbc <SPI_WIFI_MspInit+0x16c>)
 8005ee8:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8005eea:	2300      	movs	r3, #0
 8005eec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8005ef2:	f107 031c 	add.w	r3, r7, #28
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	4831      	ldr	r0, [pc, #196]	; (8005fc0 <SPI_WIFI_MspInit+0x170>)
 8005efa:	f7fb f915 	bl	8001128 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 8005efe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f02:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8005f04:	2301      	movs	r3, #1
 8005f06:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 8005f10:	2300      	movs	r3, #0
 8005f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8005f14:	f107 031c 	add.w	r3, r7, #28
 8005f18:	4619      	mov	r1, r3
 8005f1a:	4829      	ldr	r0, [pc, #164]	; (8005fc0 <SPI_WIFI_MspInit+0x170>)
 8005f1c:	f7fb f904 	bl	8001128 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 8005f20:	2201      	movs	r2, #1
 8005f22:	2101      	movs	r1, #1
 8005f24:	4826      	ldr	r0, [pc, #152]	; (8005fc0 <SPI_WIFI_MspInit+0x170>)
 8005f26:	f7fb fac1 	bl	80014ac <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8005f32:	2300      	movs	r3, #0
 8005f34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8005f36:	2301      	movs	r3, #1
 8005f38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8005f3a:	f107 031c 	add.w	r3, r7, #28
 8005f3e:	4619      	mov	r1, r3
 8005f40:	481f      	ldr	r0, [pc, #124]	; (8005fc0 <SPI_WIFI_MspInit+0x170>)
 8005f42:	f7fb f8f1 	bl	8001128 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8005f46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f4a:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8005f50:	2300      	movs	r3, #0
 8005f52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8005f54:	2301      	movs	r3, #1
 8005f56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8005f58:	2306      	movs	r3, #6
 8005f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8005f5c:	f107 031c 	add.w	r3, r7, #28
 8005f60:	4619      	mov	r1, r3
 8005f62:	4818      	ldr	r0, [pc, #96]	; (8005fc4 <SPI_WIFI_MspInit+0x174>)
 8005f64:	f7fb f8e0 	bl	8001128 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8005f68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f6c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8005f6e:	2302      	movs	r3, #2
 8005f70:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8005f72:	2300      	movs	r3, #0
 8005f74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8005f76:	2301      	movs	r3, #1
 8005f78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8005f7a:	2306      	movs	r3, #6
 8005f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8005f7e:	f107 031c 	add.w	r3, r7, #28
 8005f82:	4619      	mov	r1, r3
 8005f84:	480f      	ldr	r0, [pc, #60]	; (8005fc4 <SPI_WIFI_MspInit+0x174>)
 8005f86:	f7fb f8cf 	bl	8001128 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8005f8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005f8e:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8005f90:	2302      	movs	r3, #2
 8005f92:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8005f94:	2301      	movs	r3, #1
 8005f96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8005f9c:	2306      	movs	r3, #6
 8005f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8005fa0:	f107 031c 	add.w	r3, r7, #28
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	4807      	ldr	r0, [pc, #28]	; (8005fc4 <SPI_WIFI_MspInit+0x174>)
 8005fa8:	f7fb f8be 	bl	8001128 <HAL_GPIO_Init>
}
 8005fac:	bf00      	nop
 8005fae:	3730      	adds	r7, #48	; 0x30
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	40021000 	.word	0x40021000
 8005fb8:	48000400 	.word	0x48000400
 8005fbc:	10110000 	.word	0x10110000
 8005fc0:	48001000 	.word	0x48001000
 8005fc4:	48000800 	.word	0x48000800

08005fc8 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	4603      	mov	r3, r0
 8005fd0:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 8005fd6:	88fb      	ldrh	r3, [r7, #6]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d145      	bne.n	8006068 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 8005fdc:	4b27      	ldr	r3, [pc, #156]	; (800607c <SPI_WIFI_Init+0xb4>)
 8005fde:	4a28      	ldr	r2, [pc, #160]	; (8006080 <SPI_WIFI_Init+0xb8>)
 8005fe0:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 8005fe2:	4826      	ldr	r0, [pc, #152]	; (800607c <SPI_WIFI_Init+0xb4>)
 8005fe4:	f7ff ff34 	bl	8005e50 <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 8005fe8:	4b24      	ldr	r3, [pc, #144]	; (800607c <SPI_WIFI_Init+0xb4>)
 8005fea:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005fee:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8005ff0:	4b22      	ldr	r3, [pc, #136]	; (800607c <SPI_WIFI_Init+0xb4>)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8005ff6:	4b21      	ldr	r3, [pc, #132]	; (800607c <SPI_WIFI_Init+0xb4>)
 8005ff8:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8005ffc:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8005ffe:	4b1f      	ldr	r3, [pc, #124]	; (800607c <SPI_WIFI_Init+0xb4>)
 8006000:	2200      	movs	r2, #0
 8006002:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8006004:	4b1d      	ldr	r3, [pc, #116]	; (800607c <SPI_WIFI_Init+0xb4>)
 8006006:	2200      	movs	r2, #0
 8006008:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 800600a:	4b1c      	ldr	r3, [pc, #112]	; (800607c <SPI_WIFI_Init+0xb4>)
 800600c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006010:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8006012:	4b1a      	ldr	r3, [pc, #104]	; (800607c <SPI_WIFI_Init+0xb4>)
 8006014:	2210      	movs	r2, #16
 8006016:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8006018:	4b18      	ldr	r3, [pc, #96]	; (800607c <SPI_WIFI_Init+0xb4>)
 800601a:	2200      	movs	r2, #0
 800601c:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 800601e:	4b17      	ldr	r3, [pc, #92]	; (800607c <SPI_WIFI_Init+0xb4>)
 8006020:	2200      	movs	r2, #0
 8006022:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8006024:	4b15      	ldr	r3, [pc, #84]	; (800607c <SPI_WIFI_Init+0xb4>)
 8006026:	2200      	movs	r2, #0
 8006028:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 800602a:	4b14      	ldr	r3, [pc, #80]	; (800607c <SPI_WIFI_Init+0xb4>)
 800602c:	2200      	movs	r2, #0
 800602e:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8006030:	4812      	ldr	r0, [pc, #72]	; (800607c <SPI_WIFI_Init+0xb4>)
 8006032:	f7fc fdcd 	bl	8002bd0 <HAL_SPI_Init>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d002      	beq.n	8006042 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 800603c:	f04f 33ff 	mov.w	r3, #4294967295
 8006040:	e018      	b.n	8006074 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8006042:	2200      	movs	r2, #0
 8006044:	2100      	movs	r1, #0
 8006046:	2007      	movs	r0, #7
 8006048:	f7fa fff7 	bl	800103a <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 800604c:	2007      	movs	r0, #7
 800604e:	f7fb f810 	bl	8001072 <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8006052:	2200      	movs	r2, #0
 8006054:	2100      	movs	r1, #0
 8006056:	2033      	movs	r0, #51	; 0x33
 8006058:	f7fa ffef 	bl	800103a <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 800605c:	2033      	movs	r0, #51	; 0x33
 800605e:	f7fb f808 	bl	8001072 <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 8006062:	200a      	movs	r0, #10
 8006064:	f000 f9fe 	bl	8006464 <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 8006068:	f000 f80c 	bl	8006084 <SPI_WIFI_ResetModule>
 800606c:	4603      	mov	r3, r0
 800606e:	73fb      	strb	r3, [r7, #15]

  return rc;
 8006070:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	200009ac 	.word	0x200009ac
 8006080:	40003c00 	.word	0x40003c00

08006084 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 800608a:	f7fa fecb 	bl	8000e24 <HAL_GetTick>
 800608e:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8006090:	2300      	movs	r3, #0
 8006092:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 8006094:	2200      	movs	r2, #0
 8006096:	f44f 7180 	mov.w	r1, #256	; 0x100
 800609a:	4830      	ldr	r0, [pc, #192]	; (800615c <SPI_WIFI_ResetModule+0xd8>)
 800609c:	f7fb fa06 	bl	80014ac <HAL_GPIO_WritePin>
 80060a0:	200a      	movs	r0, #10
 80060a2:	f7fa fecb 	bl	8000e3c <HAL_Delay>
 80060a6:	2201      	movs	r2, #1
 80060a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80060ac:	482b      	ldr	r0, [pc, #172]	; (800615c <SPI_WIFI_ResetModule+0xd8>)
 80060ae:	f7fb f9fd 	bl	80014ac <HAL_GPIO_WritePin>
 80060b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80060b6:	f7fa fec1 	bl	8000e3c <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 80060ba:	2200      	movs	r2, #0
 80060bc:	2101      	movs	r1, #1
 80060be:	4827      	ldr	r0, [pc, #156]	; (800615c <SPI_WIFI_ResetModule+0xd8>)
 80060c0:	f7fb f9f4 	bl	80014ac <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80060c4:	200f      	movs	r0, #15
 80060c6:	f000 f9cd 	bl	8006464 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 80060ca:	e020      	b.n	800610e <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 80060cc:	7bfb      	ldrb	r3, [r7, #15]
 80060ce:	463a      	mov	r2, r7
 80060d0:	18d1      	adds	r1, r2, r3
 80060d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80060d6:	2201      	movs	r2, #1
 80060d8:	4821      	ldr	r0, [pc, #132]	; (8006160 <SPI_WIFI_ResetModule+0xdc>)
 80060da:	f7fc fe58 	bl	8002d8e <HAL_SPI_Receive>
 80060de:	4603      	mov	r3, r0
 80060e0:	71fb      	strb	r3, [r7, #7]
    count += 2;
 80060e2:	7bfb      	ldrb	r3, [r7, #15]
 80060e4:	3302      	adds	r3, #2
 80060e6:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 80060e8:	f7fa fe9c 	bl	8000e24 <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060f6:	d202      	bcs.n	80060fe <SPI_WIFI_ResetModule+0x7a>
 80060f8:	79fb      	ldrb	r3, [r7, #7]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d007      	beq.n	800610e <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 80060fe:	2201      	movs	r2, #1
 8006100:	2101      	movs	r1, #1
 8006102:	4816      	ldr	r0, [pc, #88]	; (800615c <SPI_WIFI_ResetModule+0xd8>)
 8006104:	f7fb f9d2 	bl	80014ac <HAL_GPIO_WritePin>
      return -1;
 8006108:	f04f 33ff 	mov.w	r3, #4294967295
 800610c:	e021      	b.n	8006152 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 800610e:	2102      	movs	r1, #2
 8006110:	4812      	ldr	r0, [pc, #72]	; (800615c <SPI_WIFI_ResetModule+0xd8>)
 8006112:	f7fb f9b3 	bl	800147c <HAL_GPIO_ReadPin>
 8006116:	4603      	mov	r3, r0
 8006118:	2b01      	cmp	r3, #1
 800611a:	d0d7      	beq.n	80060cc <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 800611c:	2201      	movs	r2, #1
 800611e:	2101      	movs	r1, #1
 8006120:	480e      	ldr	r0, [pc, #56]	; (800615c <SPI_WIFI_ResetModule+0xd8>)
 8006122:	f7fb f9c3 	bl	80014ac <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8006126:	783b      	ldrb	r3, [r7, #0]
 8006128:	2b15      	cmp	r3, #21
 800612a:	d10e      	bne.n	800614a <SPI_WIFI_ResetModule+0xc6>
 800612c:	787b      	ldrb	r3, [r7, #1]
 800612e:	2b15      	cmp	r3, #21
 8006130:	d10b      	bne.n	800614a <SPI_WIFI_ResetModule+0xc6>
 8006132:	78bb      	ldrb	r3, [r7, #2]
 8006134:	2b0d      	cmp	r3, #13
 8006136:	d108      	bne.n	800614a <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8006138:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 800613a:	2b0a      	cmp	r3, #10
 800613c:	d105      	bne.n	800614a <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 800613e:	793b      	ldrb	r3, [r7, #4]
 8006140:	2b3e      	cmp	r3, #62	; 0x3e
 8006142:	d102      	bne.n	800614a <SPI_WIFI_ResetModule+0xc6>
 8006144:	797b      	ldrb	r3, [r7, #5]
 8006146:	2b20      	cmp	r3, #32
 8006148:	d002      	beq.n	8006150 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 800614a:	f04f 33ff 	mov.w	r3, #4294967295
 800614e:	e000      	b.n	8006152 <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	48001000 	.word	0x48001000
 8006160:	200009ac 	.word	0x200009ac

08006164 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8006168:	4802      	ldr	r0, [pc, #8]	; (8006174 <SPI_WIFI_DeInit+0x10>)
 800616a:	f7fc fdd4 	bl	8002d16 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	bd80      	pop	{r7, pc}
 8006174:	200009ac 	.word	0x200009ac

08006178 <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8006180:	f7fa fe50 	bl	8000e24 <HAL_GetTick>
 8006184:	4603      	mov	r3, r0
 8006186:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 8006188:	e00a      	b.n	80061a0 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800618a:	f7fa fe4b 	bl	8000e24 <HAL_GetTick>
 800618e:	4602      	mov	r2, r0
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	1ad2      	subs	r2, r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	429a      	cmp	r2, r3
 8006198:	d902      	bls.n	80061a0 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 800619a:	f04f 33ff 	mov.w	r3, #4294967295
 800619e:	e007      	b.n	80061b0 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 80061a0:	2102      	movs	r1, #2
 80061a2:	4805      	ldr	r0, [pc, #20]	; (80061b8 <wait_cmddata_rdy_high+0x40>)
 80061a4:	f7fb f96a 	bl	800147c <HAL_GPIO_ReadPin>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d1ed      	bne.n	800618a <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3710      	adds	r7, #16
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	48001000 	.word	0x48001000

080061bc <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 80061c4:	f7fa fe2e 	bl	8000e24 <HAL_GetTick>
 80061c8:	4603      	mov	r3, r0
 80061ca:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 80061cc:	e00a      	b.n	80061e4 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80061ce:	f7fa fe29 	bl	8000e24 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	1ad2      	subs	r2, r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d902      	bls.n	80061e4 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 80061de:	f04f 33ff 	mov.w	r3, #4294967295
 80061e2:	e004      	b.n	80061ee <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 80061e4:	4b04      	ldr	r3, [pc, #16]	; (80061f8 <wait_cmddata_rdy_rising_event+0x3c>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d0f0      	beq.n	80061ce <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 80061ec:	2300      	movs	r3, #0
#endif
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	200000c0 	.word	0x200000c0

080061fc <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8006204:	f7fa fe0e 	bl	8000e24 <HAL_GetTick>
 8006208:	4603      	mov	r3, r0
 800620a:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 800620c:	e00a      	b.n	8006224 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800620e:	f7fa fe09 	bl	8000e24 <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	1ad2      	subs	r2, r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	429a      	cmp	r2, r3
 800621c:	d902      	bls.n	8006224 <wait_spi_rx_event+0x28>
    {
      return -1;
 800621e:	f04f 33ff 	mov.w	r3, #4294967295
 8006222:	e004      	b.n	800622e <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 8006224:	4b04      	ldr	r3, [pc, #16]	; (8006238 <wait_spi_rx_event+0x3c>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d0f0      	beq.n	800620e <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 800622c:	2300      	movs	r3, #0
#endif
}
 800622e:	4618      	mov	r0, r3
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	200000b8 	.word	0x200000b8

0800623c <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8006244:	f7fa fdee 	bl	8000e24 <HAL_GetTick>
 8006248:	4603      	mov	r3, r0
 800624a:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 800624c:	e00a      	b.n	8006264 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800624e:	f7fa fde9 	bl	8000e24 <HAL_GetTick>
 8006252:	4602      	mov	r2, r0
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	1ad2      	subs	r2, r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	429a      	cmp	r2, r3
 800625c:	d902      	bls.n	8006264 <wait_spi_tx_event+0x28>
    {
      return -1;
 800625e:	f04f 33ff 	mov.w	r3, #4294967295
 8006262:	e004      	b.n	800626e <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 8006264:	4b04      	ldr	r3, [pc, #16]	; (8006278 <wait_spi_tx_event+0x3c>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d0f0      	beq.n	800624e <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 800626c:	2300      	movs	r3, #0
#endif
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	200000bc 	.word	0x200000bc

0800627c <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b086      	sub	sp, #24
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	460b      	mov	r3, r1
 8006286:	607a      	str	r2, [r7, #4]
 8006288:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 800628a:	2300      	movs	r3, #0
 800628c:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 800628e:	2201      	movs	r2, #1
 8006290:	2101      	movs	r1, #1
 8006292:	4834      	ldr	r0, [pc, #208]	; (8006364 <SPI_WIFI_ReceiveData+0xe8>)
 8006294:	f7fb f90a 	bl	80014ac <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8006298:	2003      	movs	r0, #3
 800629a:	f000 f8e3 	bl	8006464 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7ff ff8b 	bl	80061bc <wait_cmddata_rdy_rising_event>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	da02      	bge.n	80062b2 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 80062ac:	f06f 0302 	mvn.w	r3, #2
 80062b0:	e054      	b.n	800635c <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 80062b2:	2200      	movs	r2, #0
 80062b4:	2101      	movs	r1, #1
 80062b6:	482b      	ldr	r0, [pc, #172]	; (8006364 <SPI_WIFI_ReceiveData+0xe8>)
 80062b8:	f7fb f8f8 	bl	80014ac <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80062bc:	200f      	movs	r0, #15
 80062be:	f000 f8d1 	bl	8006464 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 80062c2:	e03d      	b.n	8006340 <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 80062c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80062c8:	897b      	ldrh	r3, [r7, #10]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	db02      	blt.n	80062d4 <SPI_WIFI_ReceiveData+0x58>
 80062ce:	897b      	ldrh	r3, [r7, #10]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d13c      	bne.n	800634e <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 80062d4:	4b24      	ldr	r3, [pc, #144]	; (8006368 <SPI_WIFI_ReceiveData+0xec>)
 80062d6:	2201      	movs	r2, #1
 80062d8:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 80062da:	f107 0314 	add.w	r3, r7, #20
 80062de:	2201      	movs	r2, #1
 80062e0:	4619      	mov	r1, r3
 80062e2:	4822      	ldr	r0, [pc, #136]	; (800636c <SPI_WIFI_ReceiveData+0xf0>)
 80062e4:	f7fd f924 	bl	8003530 <HAL_SPI_Receive_IT>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d007      	beq.n	80062fe <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 80062ee:	2201      	movs	r2, #1
 80062f0:	2101      	movs	r1, #1
 80062f2:	481c      	ldr	r0, [pc, #112]	; (8006364 <SPI_WIFI_ReceiveData+0xe8>)
 80062f4:	f7fb f8da 	bl	80014ac <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 80062f8:	f04f 33ff 	mov.w	r3, #4294967295
 80062fc:	e02e      	b.n	800635c <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4618      	mov	r0, r3
 8006302:	f7ff ff7b 	bl	80061fc <wait_spi_rx_event>

      pData[0] = tmp[0];
 8006306:	7d3a      	ldrb	r2, [r7, #20]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	3301      	adds	r3, #1
 8006310:	7d7a      	ldrb	r2, [r7, #21]
 8006312:	701a      	strb	r2, [r3, #0]
      length += 2;
 8006314:	8afb      	ldrh	r3, [r7, #22]
 8006316:	3302      	adds	r3, #2
 8006318:	b29b      	uxth	r3, r3
 800631a:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	3302      	adds	r3, #2
 8006320:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 8006322:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006326:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800632a:	db09      	blt.n	8006340 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 800632c:	2201      	movs	r2, #1
 800632e:	2101      	movs	r1, #1
 8006330:	480c      	ldr	r0, [pc, #48]	; (8006364 <SPI_WIFI_ReceiveData+0xe8>)
 8006332:	f7fb f8bb 	bl	80014ac <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 8006336:	f7ff fea5 	bl	8006084 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 800633a:	f06f 0303 	mvn.w	r3, #3
 800633e:	e00d      	b.n	800635c <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 8006340:	2102      	movs	r1, #2
 8006342:	4808      	ldr	r0, [pc, #32]	; (8006364 <SPI_WIFI_ReceiveData+0xe8>)
 8006344:	f7fb f89a 	bl	800147c <HAL_GPIO_ReadPin>
 8006348:	4603      	mov	r3, r0
 800634a:	2b01      	cmp	r3, #1
 800634c:	d0ba      	beq.n	80062c4 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 800634e:	2201      	movs	r2, #1
 8006350:	2101      	movs	r1, #1
 8006352:	4804      	ldr	r0, [pc, #16]	; (8006364 <SPI_WIFI_ReceiveData+0xe8>)
 8006354:	f7fb f8aa 	bl	80014ac <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 8006358:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3718      	adds	r7, #24
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	48001000 	.word	0x48001000
 8006368:	200000b8 	.word	0x200000b8
 800636c:	200009ac 	.word	0x200009ac

08006370 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b086      	sub	sp, #24
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	460b      	mov	r3, r1
 800637a:	607a      	str	r2, [r7, #4]
 800637c:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4618      	mov	r0, r3
 8006382:	f7ff fef9 	bl	8006178 <wait_cmddata_rdy_high>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	da02      	bge.n	8006392 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 800638c:	f04f 33ff 	mov.w	r3, #4294967295
 8006390:	e04f      	b.n	8006432 <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 8006392:	4b2a      	ldr	r3, [pc, #168]	; (800643c <SPI_WIFI_SendData+0xcc>)
 8006394:	2201      	movs	r2, #1
 8006396:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8006398:	2200      	movs	r2, #0
 800639a:	2101      	movs	r1, #1
 800639c:	4828      	ldr	r0, [pc, #160]	; (8006440 <SPI_WIFI_SendData+0xd0>)
 800639e:	f7fb f885 	bl	80014ac <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80063a2:	200f      	movs	r0, #15
 80063a4:	f000 f85e 	bl	8006464 <SPI_WIFI_DelayUs>
  if (len > 1)
 80063a8:	897b      	ldrh	r3, [r7, #10]
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d919      	bls.n	80063e2 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 80063ae:	4b25      	ldr	r3, [pc, #148]	; (8006444 <SPI_WIFI_SendData+0xd4>)
 80063b0:	2201      	movs	r2, #1
 80063b2:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 80063b4:	897b      	ldrh	r3, [r7, #10]
 80063b6:	085b      	lsrs	r3, r3, #1
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	461a      	mov	r2, r3
 80063bc:	68f9      	ldr	r1, [r7, #12]
 80063be:	4822      	ldr	r0, [pc, #136]	; (8006448 <SPI_WIFI_SendData+0xd8>)
 80063c0:	f7fd f828 	bl	8003414 <HAL_SPI_Transmit_IT>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d007      	beq.n	80063da <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 80063ca:	2201      	movs	r2, #1
 80063cc:	2101      	movs	r1, #1
 80063ce:	481c      	ldr	r0, [pc, #112]	; (8006440 <SPI_WIFI_SendData+0xd0>)
 80063d0:	f7fb f86c 	bl	80014ac <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 80063d4:	f04f 33ff 	mov.w	r3, #4294967295
 80063d8:	e02b      	b.n	8006432 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4618      	mov	r0, r3
 80063de:	f7ff ff2d 	bl	800623c <wait_spi_tx_event>
  }
  
  if ( len & 1)
 80063e2:	897b      	ldrh	r3, [r7, #10]
 80063e4:	f003 0301 	and.w	r3, r3, #1
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d020      	beq.n	800642e <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 80063ec:	897b      	ldrh	r3, [r7, #10]
 80063ee:	3b01      	subs	r3, #1
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	4413      	add	r3, r2
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 80063f8:	230a      	movs	r3, #10
 80063fa:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 80063fc:	4b11      	ldr	r3, [pc, #68]	; (8006444 <SPI_WIFI_SendData+0xd4>)
 80063fe:	2201      	movs	r2, #1
 8006400:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8006402:	f107 0314 	add.w	r3, r7, #20
 8006406:	2201      	movs	r2, #1
 8006408:	4619      	mov	r1, r3
 800640a:	480f      	ldr	r0, [pc, #60]	; (8006448 <SPI_WIFI_SendData+0xd8>)
 800640c:	f7fd f802 	bl	8003414 <HAL_SPI_Transmit_IT>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d007      	beq.n	8006426 <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 8006416:	2201      	movs	r2, #1
 8006418:	2101      	movs	r1, #1
 800641a:	4809      	ldr	r0, [pc, #36]	; (8006440 <SPI_WIFI_SendData+0xd0>)
 800641c:	f7fb f846 	bl	80014ac <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8006420:	f04f 33ff 	mov.w	r3, #4294967295
 8006424:	e005      	b.n	8006432 <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4618      	mov	r0, r3
 800642a:	f7ff ff07 	bl	800623c <wait_spi_tx_event>
    
  }
  return len;
 800642e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8006432:	4618      	mov	r0, r3
 8006434:	3718      	adds	r7, #24
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	200000c0 	.word	0x200000c0
 8006440:	48001000 	.word	0x48001000
 8006444:	200000bc 	.word	0x200000bc
 8006448:	200009ac 	.word	0x200009ac

0800644c <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f7fa fcf1 	bl	8000e3c <HAL_Delay>
}
 800645a:	bf00      	nop
 800645c:	3708      	adds	r7, #8
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
	...

08006464 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 800646c:	2300      	movs	r3, #0
 800646e:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8006470:	2300      	movs	r3, #0
 8006472:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 8006474:	4b20      	ldr	r3, [pc, #128]	; (80064f8 <SPI_WIFI_DelayUs+0x94>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d122      	bne.n	80064c2 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 800647c:	4b1f      	ldr	r3, [pc, #124]	; (80064fc <SPI_WIFI_DelayUs+0x98>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a1f      	ldr	r2, [pc, #124]	; (8006500 <SPI_WIFI_DelayUs+0x9c>)
 8006482:	fba2 2303 	umull	r2, r3, r2, r3
 8006486:	099b      	lsrs	r3, r3, #6
 8006488:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 800648a:	2300      	movs	r3, #0
 800648c:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 8006492:	f7fa fcc7 	bl	8000e24 <HAL_GetTick>
 8006496:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 8006498:	e002      	b.n	80064a0 <SPI_WIFI_DelayUs+0x3c>
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	3b01      	subs	r3, #1
 800649e:	60bb      	str	r3, [r7, #8]
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1f9      	bne.n	800649a <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 80064a6:	f7fa fcbd 	bl	8000e24 <HAL_GetTick>
 80064aa:	4602      	mov	r2, r0
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	4a11      	ldr	r2, [pc, #68]	; (80064f8 <SPI_WIFI_DelayUs+0x94>)
 80064b2:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 80064b4:	4b10      	ldr	r3, [pc, #64]	; (80064f8 <SPI_WIFI_DelayUs+0x94>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d102      	bne.n	80064c2 <SPI_WIFI_DelayUs+0x5e>
 80064bc:	4b0e      	ldr	r3, [pc, #56]	; (80064f8 <SPI_WIFI_DelayUs+0x94>)
 80064be:	2201      	movs	r2, #1
 80064c0:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 80064c2:	4b0e      	ldr	r3, [pc, #56]	; (80064fc <SPI_WIFI_DelayUs+0x98>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a0f      	ldr	r2, [pc, #60]	; (8006504 <SPI_WIFI_DelayUs+0xa0>)
 80064c8:	fba2 2303 	umull	r2, r3, r2, r3
 80064cc:	0c9a      	lsrs	r2, r3, #18
 80064ce:	4b0a      	ldr	r3, [pc, #40]	; (80064f8 <SPI_WIFI_DelayUs+0x94>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d6:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	fb02 f303 	mul.w	r3, r2, r3
 80064e0:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 80064e2:	e002      	b.n	80064ea <SPI_WIFI_DelayUs+0x86>
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	3b01      	subs	r3, #1
 80064e8:	60bb      	str	r3, [r7, #8]
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1f9      	bne.n	80064e4 <SPI_WIFI_DelayUs+0x80>
  return;
 80064f0:	bf00      	nop
}
 80064f2:	3718      	adds	r7, #24
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	200000c4 	.word	0x200000c4
 80064fc:	20000028 	.word	0x20000028
 8006500:	10624dd3 	.word	0x10624dd3
 8006504:	431bde83 	.word	0x431bde83

08006508 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8006510:	4b06      	ldr	r3, [pc, #24]	; (800652c <HAL_SPI_RxCpltCallback+0x24>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d002      	beq.n	800651e <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8006518:	4b04      	ldr	r3, [pc, #16]	; (800652c <HAL_SPI_RxCpltCallback+0x24>)
 800651a:	2200      	movs	r2, #0
 800651c:	601a      	str	r2, [r3, #0]
  }
}
 800651e:	bf00      	nop
 8006520:	370c      	adds	r7, #12
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	200000b8 	.word	0x200000b8

08006530 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8006538:	4b06      	ldr	r3, [pc, #24]	; (8006554 <HAL_SPI_TxCpltCallback+0x24>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d002      	beq.n	8006546 <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8006540:	4b04      	ldr	r3, [pc, #16]	; (8006554 <HAL_SPI_TxCpltCallback+0x24>)
 8006542:	2200      	movs	r2, #0
 8006544:	601a      	str	r2, [r3, #0]
  }
}
 8006546:	bf00      	nop
 8006548:	370c      	adds	r7, #12
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	200000bc 	.word	0x200000bc

08006558 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8006558:	b480      	push	{r7}
 800655a:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 800655c:	4b05      	ldr	r3, [pc, #20]	; (8006574 <SPI_WIFI_ISR+0x1c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d102      	bne.n	800656a <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8006564:	4b03      	ldr	r3, [pc, #12]	; (8006574 <SPI_WIFI_ISR+0x1c>)
 8006566:	2200      	movs	r2, #0
 8006568:	601a      	str	r2, [r3, #0]
   }
}
 800656a:	bf00      	nop
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr
 8006574:	200000c0 	.word	0x200000c0

08006578 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8006582:	4b0d      	ldr	r3, [pc, #52]	; (80065b8 <WIFI_Init+0x40>)
 8006584:	9301      	str	r3, [sp, #4]
 8006586:	4b0d      	ldr	r3, [pc, #52]	; (80065bc <WIFI_Init+0x44>)
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	4b0d      	ldr	r3, [pc, #52]	; (80065c0 <WIFI_Init+0x48>)
 800658c:	4a0d      	ldr	r2, [pc, #52]	; (80065c4 <WIFI_Init+0x4c>)
 800658e:	490e      	ldr	r1, [pc, #56]	; (80065c8 <WIFI_Init+0x50>)
 8006590:	480e      	ldr	r0, [pc, #56]	; (80065cc <WIFI_Init+0x54>)
 8006592:	f7fe ff1d 	bl	80053d0 <ES_WIFI_RegisterBusIO>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d107      	bne.n	80065ac <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800659c:	480b      	ldr	r0, [pc, #44]	; (80065cc <WIFI_Init+0x54>)
 800659e:	f7fe fee9 	bl	8005374 <ES_WIFI_Init>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d101      	bne.n	80065ac <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 80065a8:	2300      	movs	r3, #0
 80065aa:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 80065ac:	79fb      	ldrb	r3, [r7, #7]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	0800627d 	.word	0x0800627d
 80065bc:	08006371 	.word	0x08006371
 80065c0:	0800644d 	.word	0x0800644d
 80065c4:	08006165 	.word	0x08006165
 80065c8:	08005fc9 	.word	0x08005fc9
 80065cc:	20000a10 	.word	0x20000a10

080065d0 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	4613      	mov	r3, r2
 80065dc:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 80065e2:	79fb      	ldrb	r3, [r7, #7]
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	68f9      	ldr	r1, [r7, #12]
 80065e8:	4809      	ldr	r0, [pc, #36]	; (8006610 <WIFI_Connect+0x40>)
 80065ea:	f7fe ff25 	bl	8005438 <ES_WIFI_Connect>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d107      	bne.n	8006604 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 80065f4:	4806      	ldr	r0, [pc, #24]	; (8006610 <WIFI_Connect+0x40>)
 80065f6:	f7fe ffc3 	bl	8005580 <ES_WIFI_GetNetworkSettings>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d101      	bne.n	8006604 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8006600:	2300      	movs	r3, #0
 8006602:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8006604:	7dfb      	ldrb	r3, [r7, #23]
}
 8006606:	4618      	mov	r0, r3
 8006608:	3718      	adds	r7, #24
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	20000a10 	.word	0x20000a10

08006614 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 8006620:	6879      	ldr	r1, [r7, #4]
 8006622:	4806      	ldr	r0, [pc, #24]	; (800663c <WIFI_GetMAC_Address+0x28>)
 8006624:	f7fe ffd6 	bl	80055d4 <ES_WIFI_GetMACAddress>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d101      	bne.n	8006632 <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 800662e:	2300      	movs	r3, #0
 8006630:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8006632:	7bfb      	ldrb	r3, [r7, #15]
}
 8006634:	4618      	mov	r0, r3
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	20000a10 	.word	0x20000a10

08006640 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 800664c:	4809      	ldr	r0, [pc, #36]	; (8006674 <WIFI_GetIP_Address+0x34>)
 800664e:	f7fe ff6b 	bl	8005528 <ES_WIFI_IsConnected>
 8006652:	4603      	mov	r3, r0
 8006654:	2b01      	cmp	r3, #1
 8006656:	d107      	bne.n	8006668 <WIFI_GetIP_Address+0x28>
 8006658:	4b06      	ldr	r3, [pc, #24]	; (8006674 <WIFI_GetIP_Address+0x34>)
 800665a:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 800665e:	461a      	mov	r2, r3
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 8006664:	2300      	movs	r3, #0
 8006666:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8006668:	7bfb      	ldrb	r3, [r7, #15]
}
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	20000a10 	.word	0x20000a10

08006678 <WIFI_StartServer>:
  * @param  name : name of the connection
  * @param  port : Remote port
  * @retval Operation status
  */
WIFI_Status_t WIFI_StartServer(uint32_t socket, WIFI_Protocol_t protocol, uint16_t backlog ,const char *name, uint16_t port)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b08a      	sub	sp, #40	; 0x28
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	607b      	str	r3, [r7, #4]
 8006682:	460b      	mov	r3, r1
 8006684:	72fb      	strb	r3, [r7, #11]
 8006686:	4613      	mov	r3, r2
 8006688:	813b      	strh	r3, [r7, #8]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  conn.Number = socket;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	b2db      	uxtb	r3, r3
 8006694:	747b      	strb	r3, [r7, #17]
  conn.LocalPort = port;
 8006696:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006698:	82bb      	strh	r3, [r7, #20]
  conn.Type = (protocol == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 800669a:	7afb      	ldrb	r3, [r7, #11]
 800669c:	2b00      	cmp	r3, #0
 800669e:	bf14      	ite	ne
 80066a0:	2301      	movne	r3, #1
 80066a2:	2300      	moveq	r3, #0
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	743b      	strb	r3, [r7, #16]
  conn.Backlog = backlog;
 80066a8:	893b      	ldrh	r3, [r7, #8]
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	f887 3020 	strb.w	r3, [r7, #32]
  if(ES_WIFI_StartServerSingleConn(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 80066b0:	f107 0310 	add.w	r3, r7, #16
 80066b4:	4619      	mov	r1, r3
 80066b6:	4807      	ldr	r0, [pc, #28]	; (80066d4 <WIFI_StartServer+0x5c>)
 80066b8:	f7fe ffbe 	bl	8005638 <ES_WIFI_StartServerSingleConn>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d102      	bne.n	80066c8 <WIFI_StartServer+0x50>
  {
    ret = WIFI_STATUS_OK;
 80066c2:	2300      	movs	r3, #0
 80066c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 80066c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3728      	adds	r7, #40	; 0x28
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	20000a10 	.word	0x20000a10

080066d8 <WIFI_WaitServerConnection>:
  * @brief  Wait for a client connection to the server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_WaitServerConnection(int socket,uint32_t Timeout,uint8_t *RemoteIp,uint16_t *RemotePort)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b08a      	sub	sp, #40	; 0x28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
 80066e4:	603b      	str	r3, [r7, #0]
  ES_WIFI_Conn_t conn;
  ES_WIFI_Status_t ret;
  
  conn.Number = socket;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	747b      	strb	r3, [r7, #17]

  ret = ES_WIFI_WaitServerConnection(&EsWifiObj,Timeout,&conn);
 80066ec:	f107 0310 	add.w	r3, r7, #16
 80066f0:	461a      	mov	r2, r3
 80066f2:	68b9      	ldr	r1, [r7, #8]
 80066f4:	4819      	ldr	r0, [pc, #100]	; (800675c <WIFI_WaitServerConnection+0x84>)
 80066f6:	f7ff f84b 	bl	8005790 <ES_WIFI_WaitServerConnection>
 80066fa:	4603      	mov	r3, r0
 80066fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ES_WIFI_STATUS_OK == ret)
 8006700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006704:	2b00      	cmp	r3, #0
 8006706:	d10f      	bne.n	8006728 <WIFI_WaitServerConnection+0x50>
  {
    if (RemotePort) *RemotePort=conn.RemotePort;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d002      	beq.n	8006714 <WIFI_WaitServerConnection+0x3c>
 800670e:	8a7a      	ldrh	r2, [r7, #18]
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	801a      	strh	r2, [r3, #0]
    if (RemoteIp)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d004      	beq.n	8006724 <WIFI_WaitServerConnection+0x4c>
 800671a:	f8d7 3016 	ldr.w	r3, [r7, #22]
 800671e:	461a      	mov	r2, r3
    {
      memcpy(RemoteIp,conn.RemoteIP,sizeof(conn.RemoteIP));
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	601a      	str	r2, [r3, #0]
    }
    return  WIFI_STATUS_OK;
 8006724:	2300      	movs	r3, #0
 8006726:	e014      	b.n	8006752 <WIFI_WaitServerConnection+0x7a>
  }
  
  if (ES_WIFI_STATUS_TIMEOUT ==ret)
 8006728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800672c:	2b03      	cmp	r3, #3
 800672e:	d10f      	bne.n	8006750 <WIFI_WaitServerConnection+0x78>
  {
    if (RemotePort) *RemotePort=0;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d002      	beq.n	800673c <WIFI_WaitServerConnection+0x64>
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2200      	movs	r2, #0
 800673a:	801a      	strh	r2, [r3, #0]
    if (RemoteIp)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d004      	beq.n	800674c <WIFI_WaitServerConnection+0x74>
    {
      memset(RemoteIp,0,sizeof(conn.RemoteIP));
 8006742:	2204      	movs	r2, #4
 8006744:	2100      	movs	r1, #0
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 fd58 	bl	80071fc <memset>
    }
    return  WIFI_STATUS_TIMEOUT;
 800674c:	2305      	movs	r3, #5
 800674e:	e000      	b.n	8006752 <WIFI_WaitServerConnection+0x7a>
  }

  return WIFI_STATUS_ERROR;
 8006750:	2301      	movs	r3, #1
}
 8006752:	4618      	mov	r0, r3
 8006754:	3728      	adds	r7, #40	; 0x28
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	20000a10 	.word	0x20000a10

08006760 <WIFI_CloseServerConnection>:
/**
  * @brief  Close current connection from a client  to the server
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseServerConnection(int socket)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	73fb      	strb	r3, [r7, #15]
  if (ES_WIFI_STATUS_OK == ES_WIFI_CloseServerConnection(&EsWifiObj,socket))
 800676c:	6879      	ldr	r1, [r7, #4]
 800676e:	4806      	ldr	r0, [pc, #24]	; (8006788 <WIFI_CloseServerConnection+0x28>)
 8006770:	f7ff f930 	bl	80059d4 <ES_WIFI_CloseServerConnection>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d101      	bne.n	800677e <WIFI_CloseServerConnection+0x1e>
  {
    ret = WIFI_STATUS_OK;
 800677a:	2300      	movs	r3, #0
 800677c:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800677e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006780:	4618      	mov	r0, r3
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	20000a10 	.word	0x20000a10

0800678c <WIFI_StopServer>:
  * @brief  Stop a server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_StopServer(uint32_t socket)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_StopServerSingleConn(&EsWifiObj,socket)== ES_WIFI_STATUS_OK)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4619      	mov	r1, r3
 800679c:	4806      	ldr	r0, [pc, #24]	; (80067b8 <WIFI_StopServer+0x2c>)
 800679e:	f7ff f979 	bl	8005a94 <ES_WIFI_StopServerSingleConn>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <WIFI_StopServer+0x20>
  {
    ret = WIFI_STATUS_OK;
 80067a8:	2300      	movs	r3, #0
 80067aa:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 80067ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	20000a10 	.word	0x20000a10

080067bc <WIFI_SendData>:
  * @param  SentDatalen : (OUT) length actually sent
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b088      	sub	sp, #32
 80067c0:	af02      	add	r7, sp, #8
 80067c2:	60b9      	str	r1, [r7, #8]
 80067c4:	607b      	str	r3, [r7, #4]
 80067c6:	4603      	mov	r3, r0
 80067c8:	73fb      	strb	r3, [r7, #15]
 80067ca:	4613      	mov	r3, r2
 80067cc:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 80067d2:	89ba      	ldrh	r2, [r7, #12]
 80067d4:	7bf9      	ldrb	r1, [r7, #15]
 80067d6:	6a3b      	ldr	r3, [r7, #32]
 80067d8:	9301      	str	r3, [sp, #4]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	4613      	mov	r3, r2
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	4806      	ldr	r0, [pc, #24]	; (80067fc <WIFI_SendData+0x40>)
 80067e4:	f7ff f9b8 	bl	8005b58 <ES_WIFI_SendData>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 80067f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3718      	adds	r7, #24
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	20000a10 	.word	0x20000a10

08006800 <WIFI_ReceiveData>:
  * @param  RcvDatalen : (OUT) length of the data actually received
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b088      	sub	sp, #32
 8006804:	af02      	add	r7, sp, #8
 8006806:	60b9      	str	r1, [r7, #8]
 8006808:	607b      	str	r3, [r7, #4]
 800680a:	4603      	mov	r3, r0
 800680c:	73fb      	strb	r3, [r7, #15]
 800680e:	4613      	mov	r3, r2
 8006810:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8006816:	89ba      	ldrh	r2, [r7, #12]
 8006818:	7bf9      	ldrb	r1, [r7, #15]
 800681a:	6a3b      	ldr	r3, [r7, #32]
 800681c:	9301      	str	r3, [sp, #4]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	4613      	mov	r3, r2
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	4806      	ldr	r0, [pc, #24]	; (8006840 <WIFI_ReceiveData+0x40>)
 8006828:	f7ff fa52 	bl	8005cd0 <ES_WIFI_ReceiveData>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d101      	bne.n	8006836 <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 8006832:	2300      	movs	r3, #0
 8006834:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 8006836:	7dfb      	ldrb	r3, [r7, #23]
}
 8006838:	4618      	mov	r0, r3
 800683a:	3718      	adds	r7, #24
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	20000a10 	.word	0x20000a10

08006844 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006848:	f7fa fa7c 	bl	8000d44 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800684c:	f000 fbbe 	bl	8006fcc <SystemClock_Config>

  /* Configure LED2 */
  BSP_LED_Init(LED2);
 8006850:	2000      	movs	r0, #0
 8006852:	f7f9 ff81 	bl	8000758 <BSP_LED_Init>
  //HAL_ADC_Start(&AdcHandle) ;

  /* WIFI Web Server demonstration */
#if defined (TERMINAL_USE)
  /* Initialize all configured peripherals */
  hDiscoUart.Instance = DISCOVERY_COM1;
 8006856:	4b16      	ldr	r3, [pc, #88]	; (80068b0 <main+0x6c>)
 8006858:	4a16      	ldr	r2, [pc, #88]	; (80068b4 <main+0x70>)
 800685a:	601a      	str	r2, [r3, #0]
  hDiscoUart.Init.BaudRate = 115200;
 800685c:	4b14      	ldr	r3, [pc, #80]	; (80068b0 <main+0x6c>)
 800685e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006862:	605a      	str	r2, [r3, #4]
  hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 8006864:	4b12      	ldr	r3, [pc, #72]	; (80068b0 <main+0x6c>)
 8006866:	2200      	movs	r2, #0
 8006868:	609a      	str	r2, [r3, #8]
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 800686a:	4b11      	ldr	r3, [pc, #68]	; (80068b0 <main+0x6c>)
 800686c:	2200      	movs	r2, #0
 800686e:	60da      	str	r2, [r3, #12]
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 8006870:	4b0f      	ldr	r3, [pc, #60]	; (80068b0 <main+0x6c>)
 8006872:	2200      	movs	r2, #0
 8006874:	611a      	str	r2, [r3, #16]
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 8006876:	4b0e      	ldr	r3, [pc, #56]	; (80068b0 <main+0x6c>)
 8006878:	220c      	movs	r2, #12
 800687a:	615a      	str	r2, [r3, #20]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800687c:	4b0c      	ldr	r3, [pc, #48]	; (80068b0 <main+0x6c>)
 800687e:	2200      	movs	r2, #0
 8006880:	619a      	str	r2, [r3, #24]
  hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 8006882:	4b0b      	ldr	r3, [pc, #44]	; (80068b0 <main+0x6c>)
 8006884:	2200      	movs	r2, #0
 8006886:	61da      	str	r2, [r3, #28]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006888:	4b09      	ldr	r3, [pc, #36]	; (80068b0 <main+0x6c>)
 800688a:	2200      	movs	r2, #0
 800688c:	621a      	str	r2, [r3, #32]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800688e:	4b08      	ldr	r3, [pc, #32]	; (80068b0 <main+0x6c>)
 8006890:	2200      	movs	r2, #0
 8006892:	625a      	str	r2, [r3, #36]	; 0x24


  BSP_COM_Init(COM1, &hDiscoUart);
 8006894:	4906      	ldr	r1, [pc, #24]	; (80068b0 <main+0x6c>)
 8006896:	2000      	movs	r0, #0
 8006898:	f7f9 ffba 	bl	8000810 <BSP_COM_Init>
  BSP_TSENSOR_Init();
 800689c:	f7fa f974 	bl	8000b88 <BSP_TSENSOR_Init>

  printf("****** WIFI Web Server demonstration****** \n\n");
 80068a0:	4805      	ldr	r0, [pc, #20]	; (80068b8 <main+0x74>)
 80068a2:	f000 fd39 	bl	8007318 <puts>

#endif /* TERMINAL_USE */

  wifi_server();
 80068a6:	f000 f887 	bl	80069b8 <wifi_server>
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	200008d8 	.word	0x200008d8
 80068b4:	40013800 	.word	0x40013800
 80068b8:	08008c58 	.word	0x08008c58

080068bc <wifi_start>:
  * @retval None
  */


static int wifi_start(void)
{
 80068bc:	b5b0      	push	{r4, r5, r7, lr}
 80068be:	b086      	sub	sp, #24
 80068c0:	af04      	add	r7, sp, #16
  uint8_t  MAC_Addr[6];

 /*Initialize and use WIFI module */
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 80068c2:	f7ff fe59 	bl	8006578 <WIFI_Init>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d123      	bne.n	8006914 <wifi_start+0x58>
  {
    LOG(("ES-WIFI Initialized.\n"));
 80068cc:	4814      	ldr	r0, [pc, #80]	; (8006920 <wifi_start+0x64>)
 80068ce:	f000 fd23 	bl	8007318 <puts>
    if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 80068d2:	463b      	mov	r3, r7
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7ff fe9d 	bl	8006614 <WIFI_GetMAC_Address>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d113      	bne.n	8006908 <wifi_start+0x4c>
    {
      LOG(("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n",
 80068e0:	783b      	ldrb	r3, [r7, #0]
 80068e2:	4618      	mov	r0, r3
 80068e4:	787b      	ldrb	r3, [r7, #1]
 80068e6:	461c      	mov	r4, r3
 80068e8:	78bb      	ldrb	r3, [r7, #2]
 80068ea:	461d      	mov	r5, r3
 80068ec:	78fb      	ldrb	r3, [r7, #3]
 80068ee:	793a      	ldrb	r2, [r7, #4]
 80068f0:	7979      	ldrb	r1, [r7, #5]
 80068f2:	9102      	str	r1, [sp, #8]
 80068f4:	9201      	str	r2, [sp, #4]
 80068f6:	9300      	str	r3, [sp, #0]
 80068f8:	462b      	mov	r3, r5
 80068fa:	4622      	mov	r2, r4
 80068fc:	4601      	mov	r1, r0
 80068fe:	4809      	ldr	r0, [pc, #36]	; (8006924 <wifi_start+0x68>)
 8006900:	f000 fc84 	bl	800720c <iprintf>
  }
  else
  {
    return -1;
  }
  return 0;
 8006904:	2300      	movs	r3, #0
 8006906:	e007      	b.n	8006918 <wifi_start+0x5c>
      LOG(("> ERROR : CANNOT get MAC address\n"));
 8006908:	4807      	ldr	r0, [pc, #28]	; (8006928 <wifi_start+0x6c>)
 800690a:	f000 fd05 	bl	8007318 <puts>
      return -1;
 800690e:	f04f 33ff 	mov.w	r3, #4294967295
 8006912:	e001      	b.n	8006918 <wifi_start+0x5c>
    return -1;
 8006914:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006918:	4618      	mov	r0, r3
 800691a:	3708      	adds	r7, #8
 800691c:	46bd      	mov	sp, r7
 800691e:	bdb0      	pop	{r4, r5, r7, pc}
 8006920:	08008c88 	.word	0x08008c88
 8006924:	08008ca0 	.word	0x08008ca0
 8006928:	08008ce0 	.word	0x08008ce0

0800692c <wifi_connect>:



int wifi_connect(void)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af02      	add	r7, sp, #8

  wifi_start();
 8006932:	f7ff ffc3 	bl	80068bc <wifi_start>

  LOG(("\nConnecting to %s , %s\n",SSID,PASSWORD));
 8006936:	4a19      	ldr	r2, [pc, #100]	; (800699c <wifi_connect+0x70>)
 8006938:	4919      	ldr	r1, [pc, #100]	; (80069a0 <wifi_connect+0x74>)
 800693a:	481a      	ldr	r0, [pc, #104]	; (80069a4 <wifi_connect+0x78>)
 800693c:	f000 fc66 	bl	800720c <iprintf>
  if( WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 8006940:	2203      	movs	r2, #3
 8006942:	4916      	ldr	r1, [pc, #88]	; (800699c <wifi_connect+0x70>)
 8006944:	4816      	ldr	r0, [pc, #88]	; (80069a0 <wifi_connect+0x74>)
 8006946:	f7ff fe43 	bl	80065d0 <WIFI_Connect>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d11d      	bne.n	800698c <wifi_connect+0x60>
  {
    if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 8006950:	4815      	ldr	r0, [pc, #84]	; (80069a8 <wifi_connect+0x7c>)
 8006952:	f7ff fe75 	bl	8006640 <WIFI_GetIP_Address>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d111      	bne.n	8006980 <wifi_connect+0x54>
    {
      LOG(("> es-wifi module connected: got IP Address : %d.%d.%d.%d\n",
 800695c:	4b12      	ldr	r3, [pc, #72]	; (80069a8 <wifi_connect+0x7c>)
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	4619      	mov	r1, r3
 8006962:	4b11      	ldr	r3, [pc, #68]	; (80069a8 <wifi_connect+0x7c>)
 8006964:	785b      	ldrb	r3, [r3, #1]
 8006966:	461a      	mov	r2, r3
 8006968:	4b0f      	ldr	r3, [pc, #60]	; (80069a8 <wifi_connect+0x7c>)
 800696a:	789b      	ldrb	r3, [r3, #2]
 800696c:	4618      	mov	r0, r3
 800696e:	4b0e      	ldr	r3, [pc, #56]	; (80069a8 <wifi_connect+0x7c>)
 8006970:	78db      	ldrb	r3, [r3, #3]
 8006972:	9300      	str	r3, [sp, #0]
 8006974:	4603      	mov	r3, r0
 8006976:	480d      	ldr	r0, [pc, #52]	; (80069ac <wifi_connect+0x80>)
 8006978:	f000 fc48 	bl	800720c <iprintf>
  else
  {
		 LOG(("ERROR : es-wifi module NOT connected\n"));
     return -1;
  }
  return 0;
 800697c:	2300      	movs	r3, #0
 800697e:	e00a      	b.n	8006996 <wifi_connect+0x6a>
		  LOG((" ERROR : es-wifi module CANNOT get IP address\n"));
 8006980:	480b      	ldr	r0, [pc, #44]	; (80069b0 <wifi_connect+0x84>)
 8006982:	f000 fcc9 	bl	8007318 <puts>
      return -1;
 8006986:	f04f 33ff 	mov.w	r3, #4294967295
 800698a:	e004      	b.n	8006996 <wifi_connect+0x6a>
		 LOG(("ERROR : es-wifi module NOT connected\n"));
 800698c:	4809      	ldr	r0, [pc, #36]	; (80069b4 <wifi_connect+0x88>)
 800698e:	f000 fcc3 	bl	8007318 <puts>
     return -1;
 8006992:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006996:	4618      	mov	r0, r3
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}
 800699c:	08008d04 	.word	0x08008d04
 80069a0:	08008d10 	.word	0x08008d10
 80069a4:	08008d18 	.word	0x08008d18
 80069a8:	200004c8 	.word	0x200004c8
 80069ac:	08008d30 	.word	0x08008d30
 80069b0:	08008d6c 	.word	0x08008d6c
 80069b4:	08008d9c 	.word	0x08008d9c

080069b8 <wifi_server>:

int wifi_server(void)
{
 80069b8:	b590      	push	{r4, r7, lr}
 80069ba:	b087      	sub	sp, #28
 80069bc:	af02      	add	r7, sp, #8
  bool StopServer = false;
 80069be:	2300      	movs	r3, #0
 80069c0:	73fb      	strb	r3, [r7, #15]

  LOG(("\nRunning HTML Server test\n"));
 80069c2:	483d      	ldr	r0, [pc, #244]	; (8006ab8 <wifi_server+0x100>)
 80069c4:	f000 fca8 	bl	8007318 <puts>
  if (wifi_connect()!=0) return -1;
 80069c8:	f7ff ffb0 	bl	800692c <wifi_connect>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d002      	beq.n	80069d8 <wifi_server+0x20>
 80069d2:	f04f 33ff 	mov.w	r3, #4294967295
 80069d6:	e06b      	b.n	8006ab0 <wifi_server+0xf8>


  if (WIFI_STATUS_OK!=WIFI_StartServer(SOCKET, WIFI_TCP_PROTOCOL, 1, "", PORT))
 80069d8:	2350      	movs	r3, #80	; 0x50
 80069da:	9300      	str	r3, [sp, #0]
 80069dc:	4b37      	ldr	r3, [pc, #220]	; (8006abc <wifi_server+0x104>)
 80069de:	2201      	movs	r2, #1
 80069e0:	2100      	movs	r1, #0
 80069e2:	2000      	movs	r0, #0
 80069e4:	f7ff fe48 	bl	8006678 <WIFI_StartServer>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d002      	beq.n	80069f4 <wifi_server+0x3c>
  {
    LOG(("ERROR: Cannot start server.\n"));
 80069ee:	4834      	ldr	r0, [pc, #208]	; (8006ac0 <wifi_server+0x108>)
 80069f0:	f000 fc92 	bl	8007318 <puts>
  }

  LOG(("Server is running and waiting for an HTTP  Client connection to %d.%d.%d.%d\n",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]));
 80069f4:	4b33      	ldr	r3, [pc, #204]	; (8006ac4 <wifi_server+0x10c>)
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	4619      	mov	r1, r3
 80069fa:	4b32      	ldr	r3, [pc, #200]	; (8006ac4 <wifi_server+0x10c>)
 80069fc:	785b      	ldrb	r3, [r3, #1]
 80069fe:	461a      	mov	r2, r3
 8006a00:	4b30      	ldr	r3, [pc, #192]	; (8006ac4 <wifi_server+0x10c>)
 8006a02:	789b      	ldrb	r3, [r3, #2]
 8006a04:	4618      	mov	r0, r3
 8006a06:	4b2f      	ldr	r3, [pc, #188]	; (8006ac4 <wifi_server+0x10c>)
 8006a08:	78db      	ldrb	r3, [r3, #3]
 8006a0a:	9300      	str	r3, [sp, #0]
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	482e      	ldr	r0, [pc, #184]	; (8006ac8 <wifi_server+0x110>)
 8006a10:	f000 fbfc 	bl	800720c <iprintf>
  {
    uint8_t RemoteIP[4];
    uint16_t RemotePort;


    while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET,1000,RemoteIP,&RemotePort))
 8006a14:	e00f      	b.n	8006a36 <wifi_server+0x7e>
    {
        LOG(("Waiting connection to  %d.%d.%d.%d\n",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]));
 8006a16:	4b2b      	ldr	r3, [pc, #172]	; (8006ac4 <wifi_server+0x10c>)
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	4b29      	ldr	r3, [pc, #164]	; (8006ac4 <wifi_server+0x10c>)
 8006a1e:	785b      	ldrb	r3, [r3, #1]
 8006a20:	461a      	mov	r2, r3
 8006a22:	4b28      	ldr	r3, [pc, #160]	; (8006ac4 <wifi_server+0x10c>)
 8006a24:	789b      	ldrb	r3, [r3, #2]
 8006a26:	4618      	mov	r0, r3
 8006a28:	4b26      	ldr	r3, [pc, #152]	; (8006ac4 <wifi_server+0x10c>)
 8006a2a:	78db      	ldrb	r3, [r3, #3]
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	4603      	mov	r3, r0
 8006a30:	4826      	ldr	r0, [pc, #152]	; (8006acc <wifi_server+0x114>)
 8006a32:	f000 fbeb 	bl	800720c <iprintf>
    while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET,1000,RemoteIP,&RemotePort))
 8006a36:	1dbb      	adds	r3, r7, #6
 8006a38:	f107 0208 	add.w	r2, r7, #8
 8006a3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006a40:	2000      	movs	r0, #0
 8006a42:	f7ff fe49 	bl	80066d8 <WIFI_WaitServerConnection>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d1e4      	bne.n	8006a16 <wifi_server+0x5e>

    }

    LOG(("Client connected %d.%d.%d.%d:%d\n",RemoteIP[0],RemoteIP[1],RemoteIP[2],RemoteIP[3],RemotePort));
 8006a4c:	7a3b      	ldrb	r3, [r7, #8]
 8006a4e:	4619      	mov	r1, r3
 8006a50:	7a7b      	ldrb	r3, [r7, #9]
 8006a52:	4618      	mov	r0, r3
 8006a54:	7abb      	ldrb	r3, [r7, #10]
 8006a56:	461c      	mov	r4, r3
 8006a58:	7afb      	ldrb	r3, [r7, #11]
 8006a5a:	88fa      	ldrh	r2, [r7, #6]
 8006a5c:	9201      	str	r2, [sp, #4]
 8006a5e:	9300      	str	r3, [sp, #0]
 8006a60:	4623      	mov	r3, r4
 8006a62:	4602      	mov	r2, r0
 8006a64:	481a      	ldr	r0, [pc, #104]	; (8006ad0 <wifi_server+0x118>)
 8006a66:	f000 fbd1 	bl	800720c <iprintf>

    StopServer=WebServerProcess();
 8006a6a:	f000 f839 	bl	8006ae0 <WebServerProcess>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	73fb      	strb	r3, [r7, #15]

    if(WIFI_CloseServerConnection(SOCKET) != WIFI_STATUS_OK)
 8006a72:	2000      	movs	r0, #0
 8006a74:	f7ff fe74 	bl	8006760 <WIFI_CloseServerConnection>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d005      	beq.n	8006a8a <wifi_server+0xd2>
    {
      LOG(("ERROR: failed to close current Server connection\n"));
 8006a7e:	4815      	ldr	r0, [pc, #84]	; (8006ad4 <wifi_server+0x11c>)
 8006a80:	f000 fc4a 	bl	8007318 <puts>
      return -1;
 8006a84:	f04f 33ff 	mov.w	r3, #4294967295
 8006a88:	e012      	b.n	8006ab0 <wifi_server+0xf8>
    }
  }
  while(StopServer == false);
 8006a8a:	7bfb      	ldrb	r3, [r7, #15]
 8006a8c:	f083 0301 	eor.w	r3, r3, #1
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1cf      	bne.n	8006a36 <wifi_server+0x7e>

  if (WIFI_STATUS_OK!=WIFI_StopServer(SOCKET))
 8006a96:	2000      	movs	r0, #0
 8006a98:	f7ff fe78 	bl	800678c <WIFI_StopServer>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d002      	beq.n	8006aa8 <wifi_server+0xf0>
  {
    LOG(("ERROR: Cannot stop server.\n"));
 8006aa2:	480d      	ldr	r0, [pc, #52]	; (8006ad8 <wifi_server+0x120>)
 8006aa4:	f000 fc38 	bl	8007318 <puts>
  }

  LOG(("Server is stop\n"));
 8006aa8:	480c      	ldr	r0, [pc, #48]	; (8006adc <wifi_server+0x124>)
 8006aaa:	f000 fc35 	bl	8007318 <puts>
  return 0;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3714      	adds	r7, #20
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd90      	pop	{r4, r7, pc}
 8006ab8:	08008dc4 	.word	0x08008dc4
 8006abc:	08008de0 	.word	0x08008de0
 8006ac0:	08008de4 	.word	0x08008de4
 8006ac4:	200004c8 	.word	0x200004c8
 8006ac8:	08008e00 	.word	0x08008e00
 8006acc:	08008e50 	.word	0x08008e50
 8006ad0:	08008e74 	.word	0x08008e74
 8006ad4:	08008e98 	.word	0x08008e98
 8006ad8:	08008ecc 	.word	0x08008ecc
 8006adc:	08008ee8 	.word	0x08008ee8

08006ae0 <WebServerProcess>:


static bool WebServerProcess(void)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af02      	add	r7, sp, #8
  uint8_t temp;
  uint16_t  respLen;
  static   uint8_t resp[1024];
  bool    stopserver=false;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	73fb      	strb	r3, [r7, #15]

  if (WIFI_STATUS_OK == WIFI_ReceiveData(SOCKET, resp, 1000, &respLen, WIFI_READ_TIMEOUT))
 8006aea:	f107 030c 	add.w	r3, r7, #12
 8006aee:	f242 7210 	movw	r2, #10000	; 0x2710
 8006af2:	9200      	str	r2, [sp, #0]
 8006af4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006af8:	4954      	ldr	r1, [pc, #336]	; (8006c4c <WebServerProcess+0x16c>)
 8006afa:	2000      	movs	r0, #0
 8006afc:	f7ff fe80 	bl	8006800 <WIFI_ReceiveData>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f040 809a 	bne.w	8006c3c <WebServerProcess+0x15c>
  {
   LOG(("get %d byte from server\n",respLen));
 8006b08:	89bb      	ldrh	r3, [r7, #12]
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	4850      	ldr	r0, [pc, #320]	; (8006c50 <WebServerProcess+0x170>)
 8006b0e:	f000 fb7d 	bl	800720c <iprintf>

   if( respLen > 0)
 8006b12:	89bb      	ldrh	r3, [r7, #12]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f000 8094 	beq.w	8006c42 <WebServerProcess+0x162>
   {
      if(strstr((char *)resp, "GET")) /* GET: put web page */
 8006b1a:	494e      	ldr	r1, [pc, #312]	; (8006c54 <WebServerProcess+0x174>)
 8006b1c:	484b      	ldr	r0, [pc, #300]	; (8006c4c <WebServerProcess+0x16c>)
 8006b1e:	f000 fc57 	bl	80073d0 <strstr>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d01c      	beq.n	8006b62 <WebServerProcess+0x82>
      {
        temp = (int) BSP_TSENSOR_ReadTemp();
 8006b28:	f7fa f84a 	bl	8000bc0 <BSP_TSENSOR_ReadTemp>
 8006b2c:	eef0 7a40 	vmov.f32	s15, s0
 8006b30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b34:	edc7 7a01 	vstr	s15, [r7, #4]
 8006b38:	793b      	ldrb	r3, [r7, #4]
 8006b3a:	73bb      	strb	r3, [r7, #14]
        if(SendWebPage(LedState, temp) != WIFI_STATUS_OK)
 8006b3c:	4b46      	ldr	r3, [pc, #280]	; (8006c58 <WebServerProcess+0x178>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	7bba      	ldrb	r2, [r7, #14]
 8006b44:	4611      	mov	r1, r2
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 f8a0 	bl	8006c8c <SendWebPage>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d003      	beq.n	8006b5a <WebServerProcess+0x7a>
        {
          LOG(("> ERROR : Cannot send web page\n"));
 8006b52:	4842      	ldr	r0, [pc, #264]	; (8006c5c <WebServerProcess+0x17c>)
 8006b54:	f000 fbe0 	bl	8007318 <puts>
 8006b58:	e073      	b.n	8006c42 <WebServerProcess+0x162>
        }
        else
        {
          LOG(("Send page after  GET command\n"));
 8006b5a:	4841      	ldr	r0, [pc, #260]	; (8006c60 <WebServerProcess+0x180>)
 8006b5c:	f000 fbdc 	bl	8007318 <puts>
 8006b60:	e06f      	b.n	8006c42 <WebServerProcess+0x162>
        }
       }
       else if(strstr((char *)resp, "POST"))/* POST: received info */
 8006b62:	4940      	ldr	r1, [pc, #256]	; (8006c64 <WebServerProcess+0x184>)
 8006b64:	4839      	ldr	r0, [pc, #228]	; (8006c4c <WebServerProcess+0x16c>)
 8006b66:	f000 fc33 	bl	80073d0 <strstr>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d068      	beq.n	8006c42 <WebServerProcess+0x162>
       {
         LOG(("Post request\n"));
 8006b70:	483d      	ldr	r0, [pc, #244]	; (8006c68 <WebServerProcess+0x188>)
 8006b72:	f000 fbd1 	bl	8007318 <puts>

         if(strstr((char *)resp, "radio"))
 8006b76:	493d      	ldr	r1, [pc, #244]	; (8006c6c <WebServerProcess+0x18c>)
 8006b78:	4834      	ldr	r0, [pc, #208]	; (8006c4c <WebServerProcess+0x16c>)
 8006b7a:	f000 fc29 	bl	80073d0 <strstr>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d024      	beq.n	8006bce <WebServerProcess+0xee>
         {
           if(strstr((char *)resp, "radio=0"))
 8006b84:	493a      	ldr	r1, [pc, #232]	; (8006c70 <WebServerProcess+0x190>)
 8006b86:	4831      	ldr	r0, [pc, #196]	; (8006c4c <WebServerProcess+0x16c>)
 8006b88:	f000 fc22 	bl	80073d0 <strstr>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d006      	beq.n	8006ba0 <WebServerProcess+0xc0>
           {
             LedState = 0;
 8006b92:	4b31      	ldr	r3, [pc, #196]	; (8006c58 <WebServerProcess+0x178>)
 8006b94:	2200      	movs	r2, #0
 8006b96:	601a      	str	r2, [r3, #0]
             BSP_LED_Off(LED2);
 8006b98:	2000      	movs	r0, #0
 8006b9a:	f7f9 fe23 	bl	80007e4 <BSP_LED_Off>
 8006b9e:	e00c      	b.n	8006bba <WebServerProcess+0xda>
           }
           else if(strstr((char *)resp, "radio=1"))
 8006ba0:	4934      	ldr	r1, [pc, #208]	; (8006c74 <WebServerProcess+0x194>)
 8006ba2:	482a      	ldr	r0, [pc, #168]	; (8006c4c <WebServerProcess+0x16c>)
 8006ba4:	f000 fc14 	bl	80073d0 <strstr>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d005      	beq.n	8006bba <WebServerProcess+0xda>
           {
             LedState = 1;
 8006bae:	4b2a      	ldr	r3, [pc, #168]	; (8006c58 <WebServerProcess+0x178>)
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	601a      	str	r2, [r3, #0]
             BSP_LED_On(LED2);
 8006bb4:	2000      	movs	r0, #0
 8006bb6:	f7f9 fdff 	bl	80007b8 <BSP_LED_On>
           }
           temp = (int) BSP_TSENSOR_ReadTemp();
 8006bba:	f7fa f801 	bl	8000bc0 <BSP_TSENSOR_ReadTemp>
 8006bbe:	eef0 7a40 	vmov.f32	s15, s0
 8006bc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006bc6:	edc7 7a01 	vstr	s15, [r7, #4]
 8006bca:	793b      	ldrb	r3, [r7, #4]
 8006bcc:	73bb      	strb	r3, [r7, #14]
         }
         if(strstr((char *)resp, "stop_server"))
 8006bce:	492a      	ldr	r1, [pc, #168]	; (8006c78 <WebServerProcess+0x198>)
 8006bd0:	481e      	ldr	r0, [pc, #120]	; (8006c4c <WebServerProcess+0x16c>)
 8006bd2:	f000 fbfd 	bl	80073d0 <strstr>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d012      	beq.n	8006c02 <WebServerProcess+0x122>
         {
           if(strstr((char *)resp, "stop_server=0"))
 8006bdc:	4927      	ldr	r1, [pc, #156]	; (8006c7c <WebServerProcess+0x19c>)
 8006bde:	481b      	ldr	r0, [pc, #108]	; (8006c4c <WebServerProcess+0x16c>)
 8006be0:	f000 fbf6 	bl	80073d0 <strstr>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d002      	beq.n	8006bf0 <WebServerProcess+0x110>
           {
             stopserver = false;
 8006bea:	2300      	movs	r3, #0
 8006bec:	73fb      	strb	r3, [r7, #15]
 8006bee:	e008      	b.n	8006c02 <WebServerProcess+0x122>
           }
           else if(strstr((char *)resp, "stop_server=1"))
 8006bf0:	4923      	ldr	r1, [pc, #140]	; (8006c80 <WebServerProcess+0x1a0>)
 8006bf2:	4816      	ldr	r0, [pc, #88]	; (8006c4c <WebServerProcess+0x16c>)
 8006bf4:	f000 fbec 	bl	80073d0 <strstr>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d001      	beq.n	8006c02 <WebServerProcess+0x122>
           {
             stopserver = true;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	73fb      	strb	r3, [r7, #15]
           }
         }
         temp = (int) BSP_TSENSOR_ReadTemp();
 8006c02:	f7f9 ffdd 	bl	8000bc0 <BSP_TSENSOR_ReadTemp>
 8006c06:	eef0 7a40 	vmov.f32	s15, s0
 8006c0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c0e:	edc7 7a01 	vstr	s15, [r7, #4]
 8006c12:	793b      	ldrb	r3, [r7, #4]
 8006c14:	73bb      	strb	r3, [r7, #14]
         if(SendWebPage(LedState, temp) != WIFI_STATUS_OK)
 8006c16:	4b10      	ldr	r3, [pc, #64]	; (8006c58 <WebServerProcess+0x178>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	7bba      	ldrb	r2, [r7, #14]
 8006c1e:	4611      	mov	r1, r2
 8006c20:	4618      	mov	r0, r3
 8006c22:	f000 f833 	bl	8006c8c <SendWebPage>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d003      	beq.n	8006c34 <WebServerProcess+0x154>
         {
           LOG(("> ERROR : Cannot send web page\n"));
 8006c2c:	480b      	ldr	r0, [pc, #44]	; (8006c5c <WebServerProcess+0x17c>)
 8006c2e:	f000 fb73 	bl	8007318 <puts>
 8006c32:	e006      	b.n	8006c42 <WebServerProcess+0x162>
         }
         else
         {
           LOG(("Send Page after POST command\n"));
 8006c34:	4813      	ldr	r0, [pc, #76]	; (8006c84 <WebServerProcess+0x1a4>)
 8006c36:	f000 fb6f 	bl	8007318 <puts>
 8006c3a:	e002      	b.n	8006c42 <WebServerProcess+0x162>
       }
     }
  }
  else
  {
    LOG(("Client close connection\n"));
 8006c3c:	4812      	ldr	r0, [pc, #72]	; (8006c88 <WebServerProcess+0x1a8>)
 8006c3e:	f000 fb6b 	bl	8007318 <puts>
  }
  return stopserver;
 8006c42:	7bfb      	ldrb	r3, [r7, #15]

 }
 8006c44:	4618      	mov	r0, r3
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	200004d0 	.word	0x200004d0
 8006c50:	08008ef8 	.word	0x08008ef8
 8006c54:	08008f14 	.word	0x08008f14
 8006c58:	200004cc 	.word	0x200004cc
 8006c5c:	08008f18 	.word	0x08008f18
 8006c60:	08008f38 	.word	0x08008f38
 8006c64:	08008f58 	.word	0x08008f58
 8006c68:	08008f60 	.word	0x08008f60
 8006c6c:	08008f70 	.word	0x08008f70
 8006c70:	08008f78 	.word	0x08008f78
 8006c74:	08008f80 	.word	0x08008f80
 8006c78:	08008f88 	.word	0x08008f88
 8006c7c:	08008f94 	.word	0x08008f94
 8006c80:	08008fa4 	.word	0x08008fa4
 8006c84:	08008fb4 	.word	0x08008fb4
 8006c88:	08008fd4 	.word	0x08008fd4

08006c8c <SendWebPage>:
  * @brief  Send HTML page
  * @param  None
  * @retval None
  */
static WIFI_Status_t SendWebPage(uint8_t ledIsOn, uint8_t temperature)
{
 8006c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c8e:	b093      	sub	sp, #76	; 0x4c
 8006c90:	af02      	add	r7, sp, #8
 8006c92:	4603      	mov	r3, r0
 8006c94:	460a      	mov	r2, r1
 8006c96:	71fb      	strb	r3, [r7, #7]
 8006c98:	4613      	mov	r3, r2
 8006c9a:	71bb      	strb	r3, [r7, #6]
  uint8_t  temp[50];
  uint16_t SentDataLength;
  WIFI_Status_t ret;

  /* construct web page content */
  strcpy((char *)http, (char *)"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nPragma: no-cache\r\n\r\n");
 8006c9c:	4abc      	ldr	r2, [pc, #752]	; (8006f90 <SendWebPage+0x304>)
 8006c9e:	4bbd      	ldr	r3, [pc, #756]	; (8006f94 <SendWebPage+0x308>)
 8006ca0:	4614      	mov	r4, r2
 8006ca2:	461d      	mov	r5, r3
 8006ca4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ca6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ca8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006caa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006cae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cb0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006cb4:	c407      	stmia	r4!, {r0, r1, r2}
 8006cb6:	8023      	strh	r3, [r4, #0]
 8006cb8:	3402      	adds	r4, #2
 8006cba:	0c1b      	lsrs	r3, r3, #16
 8006cbc:	7023      	strb	r3, [r4, #0]
  strcat((char *)http, (char *)"<html>\r\n<body>\r\n");
 8006cbe:	48b4      	ldr	r0, [pc, #720]	; (8006f90 <SendWebPage+0x304>)
 8006cc0:	f7f9 fa86 	bl	80001d0 <strlen>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	4bb1      	ldr	r3, [pc, #708]	; (8006f90 <SendWebPage+0x304>)
 8006cca:	4413      	add	r3, r2
 8006ccc:	4ab2      	ldr	r2, [pc, #712]	; (8006f98 <SendWebPage+0x30c>)
 8006cce:	461d      	mov	r5, r3
 8006cd0:	4614      	mov	r4, r2
 8006cd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006cd4:	6028      	str	r0, [r5, #0]
 8006cd6:	6069      	str	r1, [r5, #4]
 8006cd8:	60aa      	str	r2, [r5, #8]
 8006cda:	60eb      	str	r3, [r5, #12]
 8006cdc:	7823      	ldrb	r3, [r4, #0]
 8006cde:	742b      	strb	r3, [r5, #16]
  strcat((char *)http, (char *)"<title>STM32 Web Server</title>\r\n");
 8006ce0:	48ab      	ldr	r0, [pc, #684]	; (8006f90 <SendWebPage+0x304>)
 8006ce2:	f7f9 fa75 	bl	80001d0 <strlen>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	461a      	mov	r2, r3
 8006cea:	4ba9      	ldr	r3, [pc, #676]	; (8006f90 <SendWebPage+0x304>)
 8006cec:	4413      	add	r3, r2
 8006cee:	4aab      	ldr	r2, [pc, #684]	; (8006f9c <SendWebPage+0x310>)
 8006cf0:	4614      	mov	r4, r2
 8006cf2:	469c      	mov	ip, r3
 8006cf4:	f104 0e20 	add.w	lr, r4, #32
 8006cf8:	4665      	mov	r5, ip
 8006cfa:	4626      	mov	r6, r4
 8006cfc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006cfe:	6028      	str	r0, [r5, #0]
 8006d00:	6069      	str	r1, [r5, #4]
 8006d02:	60aa      	str	r2, [r5, #8]
 8006d04:	60eb      	str	r3, [r5, #12]
 8006d06:	3410      	adds	r4, #16
 8006d08:	f10c 0c10 	add.w	ip, ip, #16
 8006d0c:	4574      	cmp	r4, lr
 8006d0e:	d1f3      	bne.n	8006cf8 <SendWebPage+0x6c>
 8006d10:	4662      	mov	r2, ip
 8006d12:	4623      	mov	r3, r4
 8006d14:	881b      	ldrh	r3, [r3, #0]
 8006d16:	8013      	strh	r3, [r2, #0]
  strcat((char *)http, (char *)"<h2>InventekSys : Web Server using Es-Wifi with STM32</h2>\r\n");
 8006d18:	489d      	ldr	r0, [pc, #628]	; (8006f90 <SendWebPage+0x304>)
 8006d1a:	f7f9 fa59 	bl	80001d0 <strlen>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	461a      	mov	r2, r3
 8006d22:	4b9b      	ldr	r3, [pc, #620]	; (8006f90 <SendWebPage+0x304>)
 8006d24:	4413      	add	r3, r2
 8006d26:	4a9e      	ldr	r2, [pc, #632]	; (8006fa0 <SendWebPage+0x314>)
 8006d28:	4614      	mov	r4, r2
 8006d2a:	469c      	mov	ip, r3
 8006d2c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8006d30:	4665      	mov	r5, ip
 8006d32:	4626      	mov	r6, r4
 8006d34:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006d36:	6028      	str	r0, [r5, #0]
 8006d38:	6069      	str	r1, [r5, #4]
 8006d3a:	60aa      	str	r2, [r5, #8]
 8006d3c:	60eb      	str	r3, [r5, #12]
 8006d3e:	3410      	adds	r4, #16
 8006d40:	f10c 0c10 	add.w	ip, ip, #16
 8006d44:	4574      	cmp	r4, lr
 8006d46:	d1f3      	bne.n	8006d30 <SendWebPage+0xa4>
 8006d48:	4665      	mov	r5, ip
 8006d4a:	4623      	mov	r3, r4
 8006d4c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006d4e:	6028      	str	r0, [r5, #0]
 8006d50:	6069      	str	r1, [r5, #4]
 8006d52:	60aa      	str	r2, [r5, #8]
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	732b      	strb	r3, [r5, #12]
  strcat((char *)http, (char *)"<br /><hr>\r\n");
 8006d58:	488d      	ldr	r0, [pc, #564]	; (8006f90 <SendWebPage+0x304>)
 8006d5a:	f7f9 fa39 	bl	80001d0 <strlen>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	461a      	mov	r2, r3
 8006d62:	4b8b      	ldr	r3, [pc, #556]	; (8006f90 <SendWebPage+0x304>)
 8006d64:	4413      	add	r3, r2
 8006d66:	4a8f      	ldr	r2, [pc, #572]	; (8006fa4 <SendWebPage+0x318>)
 8006d68:	461c      	mov	r4, r3
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006d6e:	6020      	str	r0, [r4, #0]
 8006d70:	6061      	str	r1, [r4, #4]
 8006d72:	60a2      	str	r2, [r4, #8]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	7323      	strb	r3, [r4, #12]
  strcat((char *)http, (char *)"<p><form method=\"POST\"><strong>Temp: <input type=\"text\" value=\"");
 8006d78:	4885      	ldr	r0, [pc, #532]	; (8006f90 <SendWebPage+0x304>)
 8006d7a:	f7f9 fa29 	bl	80001d0 <strlen>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	461a      	mov	r2, r3
 8006d82:	4b83      	ldr	r3, [pc, #524]	; (8006f90 <SendWebPage+0x304>)
 8006d84:	4413      	add	r3, r2
 8006d86:	4a88      	ldr	r2, [pc, #544]	; (8006fa8 <SendWebPage+0x31c>)
 8006d88:	4614      	mov	r4, r2
 8006d8a:	469c      	mov	ip, r3
 8006d8c:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8006d90:	4665      	mov	r5, ip
 8006d92:	4626      	mov	r6, r4
 8006d94:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006d96:	6028      	str	r0, [r5, #0]
 8006d98:	6069      	str	r1, [r5, #4]
 8006d9a:	60aa      	str	r2, [r5, #8]
 8006d9c:	60eb      	str	r3, [r5, #12]
 8006d9e:	3410      	adds	r4, #16
 8006da0:	f10c 0c10 	add.w	ip, ip, #16
 8006da4:	4574      	cmp	r4, lr
 8006da6:	d1f3      	bne.n	8006d90 <SendWebPage+0x104>
  sprintf((char *)temp, "%d", temperature);
 8006da8:	79ba      	ldrb	r2, [r7, #6]
 8006daa:	f107 030c 	add.w	r3, r7, #12
 8006dae:	497f      	ldr	r1, [pc, #508]	; (8006fac <SendWebPage+0x320>)
 8006db0:	4618      	mov	r0, r3
 8006db2:	f000 fab9 	bl	8007328 <siprintf>
  strcat((char *)http, (char *)temp);
 8006db6:	f107 030c 	add.w	r3, r7, #12
 8006dba:	4619      	mov	r1, r3
 8006dbc:	4874      	ldr	r0, [pc, #464]	; (8006f90 <SendWebPage+0x304>)
 8006dbe:	f000 fad3 	bl	8007368 <strcat>
  strcat((char *)http, (char *)"\"> <sup>O</sup>C");
 8006dc2:	4873      	ldr	r0, [pc, #460]	; (8006f90 <SendWebPage+0x304>)
 8006dc4:	f7f9 fa04 	bl	80001d0 <strlen>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	461a      	mov	r2, r3
 8006dcc:	4b70      	ldr	r3, [pc, #448]	; (8006f90 <SendWebPage+0x304>)
 8006dce:	4413      	add	r3, r2
 8006dd0:	4a77      	ldr	r2, [pc, #476]	; (8006fb0 <SendWebPage+0x324>)
 8006dd2:	461d      	mov	r5, r3
 8006dd4:	4614      	mov	r4, r2
 8006dd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006dd8:	6028      	str	r0, [r5, #0]
 8006dda:	6069      	str	r1, [r5, #4]
 8006ddc:	60aa      	str	r2, [r5, #8]
 8006dde:	60eb      	str	r3, [r5, #12]
 8006de0:	7823      	ldrb	r3, [r4, #0]
 8006de2:	742b      	strb	r3, [r5, #16]

  if (ledIsOn)
 8006de4:	79fb      	ldrb	r3, [r7, #7]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d040      	beq.n	8006e6c <SendWebPage+0x1e0>
  {
    strcat((char *)http, (char *)"<p><input type=\"radio\" name=\"radio\" value=\"0\" >LED off");
 8006dea:	4869      	ldr	r0, [pc, #420]	; (8006f90 <SendWebPage+0x304>)
 8006dec:	f7f9 f9f0 	bl	80001d0 <strlen>
 8006df0:	4603      	mov	r3, r0
 8006df2:	461a      	mov	r2, r3
 8006df4:	4b66      	ldr	r3, [pc, #408]	; (8006f90 <SendWebPage+0x304>)
 8006df6:	4413      	add	r3, r2
 8006df8:	4a6e      	ldr	r2, [pc, #440]	; (8006fb4 <SendWebPage+0x328>)
 8006dfa:	4614      	mov	r4, r2
 8006dfc:	469c      	mov	ip, r3
 8006dfe:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8006e02:	4665      	mov	r5, ip
 8006e04:	4626      	mov	r6, r4
 8006e06:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006e08:	6028      	str	r0, [r5, #0]
 8006e0a:	6069      	str	r1, [r5, #4]
 8006e0c:	60aa      	str	r2, [r5, #8]
 8006e0e:	60eb      	str	r3, [r5, #12]
 8006e10:	3410      	adds	r4, #16
 8006e12:	f10c 0c10 	add.w	ip, ip, #16
 8006e16:	4574      	cmp	r4, lr
 8006e18:	d1f3      	bne.n	8006e02 <SendWebPage+0x176>
 8006e1a:	4663      	mov	r3, ip
 8006e1c:	4622      	mov	r2, r4
 8006e1e:	6810      	ldr	r0, [r2, #0]
 8006e20:	6018      	str	r0, [r3, #0]
 8006e22:	8891      	ldrh	r1, [r2, #4]
 8006e24:	7992      	ldrb	r2, [r2, #6]
 8006e26:	8099      	strh	r1, [r3, #4]
 8006e28:	719a      	strb	r2, [r3, #6]
    strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"1\" checked>LED on");
 8006e2a:	4859      	ldr	r0, [pc, #356]	; (8006f90 <SendWebPage+0x304>)
 8006e2c:	f7f9 f9d0 	bl	80001d0 <strlen>
 8006e30:	4603      	mov	r3, r0
 8006e32:	461a      	mov	r2, r3
 8006e34:	4b56      	ldr	r3, [pc, #344]	; (8006f90 <SendWebPage+0x304>)
 8006e36:	4413      	add	r3, r2
 8006e38:	4a5f      	ldr	r2, [pc, #380]	; (8006fb8 <SendWebPage+0x32c>)
 8006e3a:	4614      	mov	r4, r2
 8006e3c:	469c      	mov	ip, r3
 8006e3e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8006e42:	4665      	mov	r5, ip
 8006e44:	4626      	mov	r6, r4
 8006e46:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006e48:	6028      	str	r0, [r5, #0]
 8006e4a:	6069      	str	r1, [r5, #4]
 8006e4c:	60aa      	str	r2, [r5, #8]
 8006e4e:	60eb      	str	r3, [r5, #12]
 8006e50:	3410      	adds	r4, #16
 8006e52:	f10c 0c10 	add.w	ip, ip, #16
 8006e56:	4574      	cmp	r4, lr
 8006e58:	d1f3      	bne.n	8006e42 <SendWebPage+0x1b6>
 8006e5a:	4665      	mov	r5, ip
 8006e5c:	4623      	mov	r3, r4
 8006e5e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006e60:	6028      	str	r0, [r5, #0]
 8006e62:	6069      	str	r1, [r5, #4]
 8006e64:	60aa      	str	r2, [r5, #8]
 8006e66:	881b      	ldrh	r3, [r3, #0]
 8006e68:	81ab      	strh	r3, [r5, #12]
 8006e6a:	e03f      	b.n	8006eec <SendWebPage+0x260>
  }
  else
  {
    strcat((char *)http, (char *)"<p><input type=\"radio\" name=\"radio\" value=\"0\" checked>LED off");
 8006e6c:	4848      	ldr	r0, [pc, #288]	; (8006f90 <SendWebPage+0x304>)
 8006e6e:	f7f9 f9af 	bl	80001d0 <strlen>
 8006e72:	4603      	mov	r3, r0
 8006e74:	461a      	mov	r2, r3
 8006e76:	4b46      	ldr	r3, [pc, #280]	; (8006f90 <SendWebPage+0x304>)
 8006e78:	4413      	add	r3, r2
 8006e7a:	4a50      	ldr	r2, [pc, #320]	; (8006fbc <SendWebPage+0x330>)
 8006e7c:	4614      	mov	r4, r2
 8006e7e:	469c      	mov	ip, r3
 8006e80:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8006e84:	4665      	mov	r5, ip
 8006e86:	4626      	mov	r6, r4
 8006e88:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006e8a:	6028      	str	r0, [r5, #0]
 8006e8c:	6069      	str	r1, [r5, #4]
 8006e8e:	60aa      	str	r2, [r5, #8]
 8006e90:	60eb      	str	r3, [r5, #12]
 8006e92:	3410      	adds	r4, #16
 8006e94:	f10c 0c10 	add.w	ip, ip, #16
 8006e98:	4574      	cmp	r4, lr
 8006e9a:	d1f3      	bne.n	8006e84 <SendWebPage+0x1f8>
 8006e9c:	4665      	mov	r5, ip
 8006e9e:	4623      	mov	r3, r4
 8006ea0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006ea2:	6028      	str	r0, [r5, #0]
 8006ea4:	6069      	str	r1, [r5, #4]
 8006ea6:	60aa      	str	r2, [r5, #8]
 8006ea8:	881b      	ldrh	r3, [r3, #0]
 8006eaa:	81ab      	strh	r3, [r5, #12]
    strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"1\" >LED on");
 8006eac:	4838      	ldr	r0, [pc, #224]	; (8006f90 <SendWebPage+0x304>)
 8006eae:	f7f9 f98f 	bl	80001d0 <strlen>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	4b36      	ldr	r3, [pc, #216]	; (8006f90 <SendWebPage+0x304>)
 8006eb8:	4413      	add	r3, r2
 8006eba:	4a41      	ldr	r2, [pc, #260]	; (8006fc0 <SendWebPage+0x334>)
 8006ebc:	4614      	mov	r4, r2
 8006ebe:	469c      	mov	ip, r3
 8006ec0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8006ec4:	4665      	mov	r5, ip
 8006ec6:	4626      	mov	r6, r4
 8006ec8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006eca:	6028      	str	r0, [r5, #0]
 8006ecc:	6069      	str	r1, [r5, #4]
 8006ece:	60aa      	str	r2, [r5, #8]
 8006ed0:	60eb      	str	r3, [r5, #12]
 8006ed2:	3410      	adds	r4, #16
 8006ed4:	f10c 0c10 	add.w	ip, ip, #16
 8006ed8:	4574      	cmp	r4, lr
 8006eda:	d1f3      	bne.n	8006ec4 <SendWebPage+0x238>
 8006edc:	4663      	mov	r3, ip
 8006ede:	4622      	mov	r2, r4
 8006ee0:	6810      	ldr	r0, [r2, #0]
 8006ee2:	6018      	str	r0, [r3, #0]
 8006ee4:	8891      	ldrh	r1, [r2, #4]
 8006ee6:	7992      	ldrb	r2, [r2, #6]
 8006ee8:	8099      	strh	r1, [r3, #4]
 8006eea:	719a      	strb	r2, [r3, #6]
  }

  strcat((char *)http, (char *)"</strong><p><input type=\"submit\"></form></span>");
 8006eec:	4828      	ldr	r0, [pc, #160]	; (8006f90 <SendWebPage+0x304>)
 8006eee:	f7f9 f96f 	bl	80001d0 <strlen>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	4b26      	ldr	r3, [pc, #152]	; (8006f90 <SendWebPage+0x304>)
 8006ef8:	4413      	add	r3, r2
 8006efa:	4a32      	ldr	r2, [pc, #200]	; (8006fc4 <SendWebPage+0x338>)
 8006efc:	4614      	mov	r4, r2
 8006efe:	469c      	mov	ip, r3
 8006f00:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8006f04:	4665      	mov	r5, ip
 8006f06:	4626      	mov	r6, r4
 8006f08:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006f0a:	6028      	str	r0, [r5, #0]
 8006f0c:	6069      	str	r1, [r5, #4]
 8006f0e:	60aa      	str	r2, [r5, #8]
 8006f10:	60eb      	str	r3, [r5, #12]
 8006f12:	3410      	adds	r4, #16
 8006f14:	f10c 0c10 	add.w	ip, ip, #16
 8006f18:	4574      	cmp	r4, lr
 8006f1a:	d1f3      	bne.n	8006f04 <SendWebPage+0x278>
  strcat((char *)http, (char *)"</body>\r\n</html>\r\n");
 8006f1c:	481c      	ldr	r0, [pc, #112]	; (8006f90 <SendWebPage+0x304>)
 8006f1e:	f7f9 f957 	bl	80001d0 <strlen>
 8006f22:	4603      	mov	r3, r0
 8006f24:	461a      	mov	r2, r3
 8006f26:	4b1a      	ldr	r3, [pc, #104]	; (8006f90 <SendWebPage+0x304>)
 8006f28:	4413      	add	r3, r2
 8006f2a:	4a27      	ldr	r2, [pc, #156]	; (8006fc8 <SendWebPage+0x33c>)
 8006f2c:	461d      	mov	r5, r3
 8006f2e:	4614      	mov	r4, r2
 8006f30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006f32:	6028      	str	r0, [r5, #0]
 8006f34:	6069      	str	r1, [r5, #4]
 8006f36:	60aa      	str	r2, [r5, #8]
 8006f38:	60eb      	str	r3, [r5, #12]
 8006f3a:	8823      	ldrh	r3, [r4, #0]
 8006f3c:	78a2      	ldrb	r2, [r4, #2]
 8006f3e:	822b      	strh	r3, [r5, #16]
 8006f40:	4613      	mov	r3, r2
 8006f42:	74ab      	strb	r3, [r5, #18]

  ret = WIFI_SendData(0, (uint8_t *)http, strlen((char *)http), &SentDataLength, WIFI_WRITE_TIMEOUT);
 8006f44:	4812      	ldr	r0, [pc, #72]	; (8006f90 <SendWebPage+0x304>)
 8006f46:	f7f9 f943 	bl	80001d0 <strlen>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	f107 030a 	add.w	r3, r7, #10
 8006f52:	f242 7110 	movw	r1, #10000	; 0x2710
 8006f56:	9100      	str	r1, [sp, #0]
 8006f58:	490d      	ldr	r1, [pc, #52]	; (8006f90 <SendWebPage+0x304>)
 8006f5a:	2000      	movs	r0, #0
 8006f5c:	f7ff fc2e 	bl	80067bc <WIFI_SendData>
 8006f60:	4603      	mov	r3, r0
 8006f62:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if((ret == WIFI_STATUS_OK) && (SentDataLength != strlen((char *)http)))
 8006f66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d10a      	bne.n	8006f84 <SendWebPage+0x2f8>
 8006f6e:	897b      	ldrh	r3, [r7, #10]
 8006f70:	461c      	mov	r4, r3
 8006f72:	4807      	ldr	r0, [pc, #28]	; (8006f90 <SendWebPage+0x304>)
 8006f74:	f7f9 f92c 	bl	80001d0 <strlen>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	429c      	cmp	r4, r3
 8006f7c:	d002      	beq.n	8006f84 <SendWebPage+0x2f8>
  {
    ret = WIFI_STATUS_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return ret;
 8006f84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3744      	adds	r7, #68	; 0x44
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f90:	200000c8 	.word	0x200000c8
 8006f94:	08008fec 	.word	0x08008fec
 8006f98:	0800902c 	.word	0x0800902c
 8006f9c:	08009040 	.word	0x08009040
 8006fa0:	08009064 	.word	0x08009064
 8006fa4:	080090a4 	.word	0x080090a4
 8006fa8:	080090b4 	.word	0x080090b4
 8006fac:	080090f4 	.word	0x080090f4
 8006fb0:	080090f8 	.word	0x080090f8
 8006fb4:	0800910c 	.word	0x0800910c
 8006fb8:	08009144 	.word	0x08009144
 8006fbc:	08009184 	.word	0x08009184
 8006fc0:	080091c4 	.word	0x080091c4
 8006fc4:	080091fc 	.word	0x080091fc
 8006fc8:	0800922c 	.word	0x0800922c

08006fcc <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b096      	sub	sp, #88	; 0x58
 8006fd0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8006fd2:	2310      	movs	r3, #16
 8006fd4:	603b      	str	r3, [r7, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8006fda:	2360      	movs	r3, #96	; 0x60
 8006fdc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006fe2:	2302      	movs	r3, #2
 8006fe4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8006fea:	2301      	movs	r3, #1
 8006fec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 40;
 8006fee:	2328      	movs	r3, #40	; 0x28
 8006ff0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006ff2:	2302      	movs	r3, #2
 8006ff4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = 7;
 8006ff6:	2307      	movs	r3, #7
 8006ff8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006ffa:	2304      	movs	r3, #4
 8006ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006ffe:	463b      	mov	r3, r7
 8007000:	4618      	mov	r0, r3
 8007002:	f7fa fff9 	bl	8001ff8 <HAL_RCC_OscConfig>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d000      	beq.n	800700e <SystemClock_Config+0x42>
  {
    /* Initialization Error */
    while(1);
 800700c:	e7fe      	b.n	800700c <SystemClock_Config+0x40>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800700e:	230f      	movs	r3, #15
 8007010:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007012:	2303      	movs	r3, #3
 8007014:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007016:	2300      	movs	r3, #0
 8007018:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800701a:	2300      	movs	r3, #0
 800701c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800701e:	2300      	movs	r3, #0
 8007020:	657b      	str	r3, [r7, #84]	; 0x54
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8007022:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007026:	2104      	movs	r1, #4
 8007028:	4618      	mov	r0, r3
 800702a:	f7fb fbcb 	bl	80027c4 <HAL_RCC_ClockConfig>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d000      	beq.n	8007036 <SystemClock_Config+0x6a>
  {
    /* Initialization Error */
    while(1);
 8007034:	e7fe      	b.n	8007034 <SystemClock_Config+0x68>
  }
}
 8007036:	bf00      	nop
 8007038:	3758      	adds	r7, #88	; 0x58
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
	...

08007040 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 8007048:	1d39      	adds	r1, r7, #4
 800704a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800704e:	2201      	movs	r2, #1
 8007050:	4803      	ldr	r0, [pc, #12]	; (8007060 <__io_putchar+0x20>)
 8007052:	f7fd f956 	bl	8004302 <HAL_UART_Transmit>

  return ch;
 8007056:	687b      	ldr	r3, [r7, #4]
}
 8007058:	4618      	mov	r0, r3
 800705a:	3708      	adds	r7, #8
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}
 8007060:	200008d8 	.word	0x200008d8

08007064 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	4603      	mov	r3, r0
 800706c:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800706e:	88fb      	ldrh	r3, [r7, #6]
 8007070:	2b02      	cmp	r3, #2
 8007072:	d102      	bne.n	800707a <HAL_GPIO_EXTI_Callback+0x16>
  {
    case (GPIO_PIN_1):
    {
      SPI_WIFI_ISR();
 8007074:	f7ff fa70 	bl	8006558 <SPI_WIFI_ISR>
      break;
 8007078:	e000      	b.n	800707c <HAL_GPIO_EXTI_Callback+0x18>
    }
    default:
    {
      break;
 800707a:	bf00      	nop
    }
  }
}
 800707c:	bf00      	nop
 800707e:	3708      	adds	r7, #8
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <SPI3_IRQHandler>:
  * @brief  SPI3 line detection callback.
  * @param  None
  * @retval None
  */
void SPI3_IRQHandler(void)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8007088:	4802      	ldr	r0, [pc, #8]	; (8007094 <SPI3_IRQHandler+0x10>)
 800708a:	f7fc fbb1 	bl	80037f0 <HAL_SPI_IRQHandler>
}
 800708e:	bf00      	nop
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	200009ac 	.word	0x200009ac

08007098 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8007098:	b480      	push	{r7}
 800709a:	af00      	add	r7, sp, #0
}
 800709c:	bf00      	nop
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr

080070a6 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80070a6:	b480      	push	{r7}
 80070a8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80070aa:	e7fe      	b.n	80070aa <HardFault_Handler+0x4>

080070ac <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80070ac:	b480      	push	{r7}
 80070ae:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80070b0:	e7fe      	b.n	80070b0 <MemManage_Handler+0x4>

080070b2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80070b2:	b480      	push	{r7}
 80070b4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80070b6:	e7fe      	b.n	80070b6 <BusFault_Handler+0x4>

080070b8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80070b8:	b480      	push	{r7}
 80070ba:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80070bc:	e7fe      	b.n	80070bc <UsageFault_Handler+0x4>

080070be <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80070be:	b480      	push	{r7}
 80070c0:	af00      	add	r7, sp, #0
}
 80070c2:	bf00      	nop
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80070cc:	b480      	push	{r7}
 80070ce:	af00      	add	r7, sp, #0
}
 80070d0:	bf00      	nop
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80070da:	b480      	push	{r7}
 80070dc:	af00      	add	r7, sp, #0
}
 80070de:	bf00      	nop
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80070ec:	f7f9 fe86 	bl	8000dfc <HAL_IncTick>
}
 80070f0:	bf00      	nop
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <EXTI1_IRQHandler>:
  * @brief  This function handles external lines 1interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80070f8:	2002      	movs	r0, #2
 80070fa:	f7fa f9ef 	bl	80014dc <HAL_GPIO_EXTI_IRQHandler>
}
 80070fe:	bf00      	nop
 8007100:	bd80      	pop	{r7, pc}
	...

08007104 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007104:	b480      	push	{r7}
 8007106:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007108:	4b17      	ldr	r3, [pc, #92]	; (8007168 <SystemInit+0x64>)
 800710a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800710e:	4a16      	ldr	r2, [pc, #88]	; (8007168 <SystemInit+0x64>)
 8007110:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007114:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8007118:	4b14      	ldr	r3, [pc, #80]	; (800716c <SystemInit+0x68>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a13      	ldr	r2, [pc, #76]	; (800716c <SystemInit+0x68>)
 800711e:	f043 0301 	orr.w	r3, r3, #1
 8007122:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007124:	4b11      	ldr	r3, [pc, #68]	; (800716c <SystemInit+0x68>)
 8007126:	2200      	movs	r2, #0
 8007128:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800712a:	4b10      	ldr	r3, [pc, #64]	; (800716c <SystemInit+0x68>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a0f      	ldr	r2, [pc, #60]	; (800716c <SystemInit+0x68>)
 8007130:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8007134:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8007138:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 800713a:	4b0c      	ldr	r3, [pc, #48]	; (800716c <SystemInit+0x68>)
 800713c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007140:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007142:	4b0a      	ldr	r3, [pc, #40]	; (800716c <SystemInit+0x68>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a09      	ldr	r2, [pc, #36]	; (800716c <SystemInit+0x68>)
 8007148:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800714c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800714e:	4b07      	ldr	r3, [pc, #28]	; (800716c <SystemInit+0x68>)
 8007150:	2200      	movs	r2, #0
 8007152:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007154:	4b04      	ldr	r3, [pc, #16]	; (8007168 <SystemInit+0x64>)
 8007156:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800715a:	609a      	str	r2, [r3, #8]
#endif
}
 800715c:	bf00      	nop
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	e000ed00 	.word	0xe000ed00
 800716c:	40021000 	.word	0x40021000

08007170 <__errno>:
 8007170:	4b01      	ldr	r3, [pc, #4]	; (8007178 <__errno+0x8>)
 8007172:	6818      	ldr	r0, [r3, #0]
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	2000002c 	.word	0x2000002c

0800717c <__libc_init_array>:
 800717c:	b570      	push	{r4, r5, r6, lr}
 800717e:	4d0d      	ldr	r5, [pc, #52]	; (80071b4 <__libc_init_array+0x38>)
 8007180:	4c0d      	ldr	r4, [pc, #52]	; (80071b8 <__libc_init_array+0x3c>)
 8007182:	1b64      	subs	r4, r4, r5
 8007184:	10a4      	asrs	r4, r4, #2
 8007186:	2600      	movs	r6, #0
 8007188:	42a6      	cmp	r6, r4
 800718a:	d109      	bne.n	80071a0 <__libc_init_array+0x24>
 800718c:	4d0b      	ldr	r5, [pc, #44]	; (80071bc <__libc_init_array+0x40>)
 800718e:	4c0c      	ldr	r4, [pc, #48]	; (80071c0 <__libc_init_array+0x44>)
 8007190:	f001 faf8 	bl	8008784 <_init>
 8007194:	1b64      	subs	r4, r4, r5
 8007196:	10a4      	asrs	r4, r4, #2
 8007198:	2600      	movs	r6, #0
 800719a:	42a6      	cmp	r6, r4
 800719c:	d105      	bne.n	80071aa <__libc_init_array+0x2e>
 800719e:	bd70      	pop	{r4, r5, r6, pc}
 80071a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80071a4:	4798      	blx	r3
 80071a6:	3601      	adds	r6, #1
 80071a8:	e7ee      	b.n	8007188 <__libc_init_array+0xc>
 80071aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80071ae:	4798      	blx	r3
 80071b0:	3601      	adds	r6, #1
 80071b2:	e7f2      	b.n	800719a <__libc_init_array+0x1e>
 80071b4:	080093dc 	.word	0x080093dc
 80071b8:	080093dc 	.word	0x080093dc
 80071bc:	080093dc 	.word	0x080093dc
 80071c0:	080093e0 	.word	0x080093e0

080071c4 <memcmp>:
 80071c4:	b530      	push	{r4, r5, lr}
 80071c6:	3901      	subs	r1, #1
 80071c8:	2400      	movs	r4, #0
 80071ca:	42a2      	cmp	r2, r4
 80071cc:	d101      	bne.n	80071d2 <memcmp+0xe>
 80071ce:	2000      	movs	r0, #0
 80071d0:	e005      	b.n	80071de <memcmp+0x1a>
 80071d2:	5d03      	ldrb	r3, [r0, r4]
 80071d4:	3401      	adds	r4, #1
 80071d6:	5d0d      	ldrb	r5, [r1, r4]
 80071d8:	42ab      	cmp	r3, r5
 80071da:	d0f6      	beq.n	80071ca <memcmp+0x6>
 80071dc:	1b58      	subs	r0, r3, r5
 80071de:	bd30      	pop	{r4, r5, pc}

080071e0 <memcpy>:
 80071e0:	440a      	add	r2, r1
 80071e2:	4291      	cmp	r1, r2
 80071e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80071e8:	d100      	bne.n	80071ec <memcpy+0xc>
 80071ea:	4770      	bx	lr
 80071ec:	b510      	push	{r4, lr}
 80071ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071f6:	4291      	cmp	r1, r2
 80071f8:	d1f9      	bne.n	80071ee <memcpy+0xe>
 80071fa:	bd10      	pop	{r4, pc}

080071fc <memset>:
 80071fc:	4402      	add	r2, r0
 80071fe:	4603      	mov	r3, r0
 8007200:	4293      	cmp	r3, r2
 8007202:	d100      	bne.n	8007206 <memset+0xa>
 8007204:	4770      	bx	lr
 8007206:	f803 1b01 	strb.w	r1, [r3], #1
 800720a:	e7f9      	b.n	8007200 <memset+0x4>

0800720c <iprintf>:
 800720c:	b40f      	push	{r0, r1, r2, r3}
 800720e:	4b0a      	ldr	r3, [pc, #40]	; (8007238 <iprintf+0x2c>)
 8007210:	b513      	push	{r0, r1, r4, lr}
 8007212:	681c      	ldr	r4, [r3, #0]
 8007214:	b124      	cbz	r4, 8007220 <iprintf+0x14>
 8007216:	69a3      	ldr	r3, [r4, #24]
 8007218:	b913      	cbnz	r3, 8007220 <iprintf+0x14>
 800721a:	4620      	mov	r0, r4
 800721c:	f000 fb44 	bl	80078a8 <__sinit>
 8007220:	ab05      	add	r3, sp, #20
 8007222:	9a04      	ldr	r2, [sp, #16]
 8007224:	68a1      	ldr	r1, [r4, #8]
 8007226:	9301      	str	r3, [sp, #4]
 8007228:	4620      	mov	r0, r4
 800722a:	f000 fe8b 	bl	8007f44 <_vfiprintf_r>
 800722e:	b002      	add	sp, #8
 8007230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007234:	b004      	add	sp, #16
 8007236:	4770      	bx	lr
 8007238:	2000002c 	.word	0x2000002c

0800723c <_puts_r>:
 800723c:	b570      	push	{r4, r5, r6, lr}
 800723e:	460e      	mov	r6, r1
 8007240:	4605      	mov	r5, r0
 8007242:	b118      	cbz	r0, 800724c <_puts_r+0x10>
 8007244:	6983      	ldr	r3, [r0, #24]
 8007246:	b90b      	cbnz	r3, 800724c <_puts_r+0x10>
 8007248:	f000 fb2e 	bl	80078a8 <__sinit>
 800724c:	69ab      	ldr	r3, [r5, #24]
 800724e:	68ac      	ldr	r4, [r5, #8]
 8007250:	b913      	cbnz	r3, 8007258 <_puts_r+0x1c>
 8007252:	4628      	mov	r0, r5
 8007254:	f000 fb28 	bl	80078a8 <__sinit>
 8007258:	4b2c      	ldr	r3, [pc, #176]	; (800730c <_puts_r+0xd0>)
 800725a:	429c      	cmp	r4, r3
 800725c:	d120      	bne.n	80072a0 <_puts_r+0x64>
 800725e:	686c      	ldr	r4, [r5, #4]
 8007260:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007262:	07db      	lsls	r3, r3, #31
 8007264:	d405      	bmi.n	8007272 <_puts_r+0x36>
 8007266:	89a3      	ldrh	r3, [r4, #12]
 8007268:	0598      	lsls	r0, r3, #22
 800726a:	d402      	bmi.n	8007272 <_puts_r+0x36>
 800726c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800726e:	f000 fbcb 	bl	8007a08 <__retarget_lock_acquire_recursive>
 8007272:	89a3      	ldrh	r3, [r4, #12]
 8007274:	0719      	lsls	r1, r3, #28
 8007276:	d51d      	bpl.n	80072b4 <_puts_r+0x78>
 8007278:	6923      	ldr	r3, [r4, #16]
 800727a:	b1db      	cbz	r3, 80072b4 <_puts_r+0x78>
 800727c:	3e01      	subs	r6, #1
 800727e:	68a3      	ldr	r3, [r4, #8]
 8007280:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007284:	3b01      	subs	r3, #1
 8007286:	60a3      	str	r3, [r4, #8]
 8007288:	bb39      	cbnz	r1, 80072da <_puts_r+0x9e>
 800728a:	2b00      	cmp	r3, #0
 800728c:	da38      	bge.n	8007300 <_puts_r+0xc4>
 800728e:	4622      	mov	r2, r4
 8007290:	210a      	movs	r1, #10
 8007292:	4628      	mov	r0, r5
 8007294:	f000 f910 	bl	80074b8 <__swbuf_r>
 8007298:	3001      	adds	r0, #1
 800729a:	d011      	beq.n	80072c0 <_puts_r+0x84>
 800729c:	250a      	movs	r5, #10
 800729e:	e011      	b.n	80072c4 <_puts_r+0x88>
 80072a0:	4b1b      	ldr	r3, [pc, #108]	; (8007310 <_puts_r+0xd4>)
 80072a2:	429c      	cmp	r4, r3
 80072a4:	d101      	bne.n	80072aa <_puts_r+0x6e>
 80072a6:	68ac      	ldr	r4, [r5, #8]
 80072a8:	e7da      	b.n	8007260 <_puts_r+0x24>
 80072aa:	4b1a      	ldr	r3, [pc, #104]	; (8007314 <_puts_r+0xd8>)
 80072ac:	429c      	cmp	r4, r3
 80072ae:	bf08      	it	eq
 80072b0:	68ec      	ldreq	r4, [r5, #12]
 80072b2:	e7d5      	b.n	8007260 <_puts_r+0x24>
 80072b4:	4621      	mov	r1, r4
 80072b6:	4628      	mov	r0, r5
 80072b8:	f000 f950 	bl	800755c <__swsetup_r>
 80072bc:	2800      	cmp	r0, #0
 80072be:	d0dd      	beq.n	800727c <_puts_r+0x40>
 80072c0:	f04f 35ff 	mov.w	r5, #4294967295
 80072c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072c6:	07da      	lsls	r2, r3, #31
 80072c8:	d405      	bmi.n	80072d6 <_puts_r+0x9a>
 80072ca:	89a3      	ldrh	r3, [r4, #12]
 80072cc:	059b      	lsls	r3, r3, #22
 80072ce:	d402      	bmi.n	80072d6 <_puts_r+0x9a>
 80072d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072d2:	f000 fb9a 	bl	8007a0a <__retarget_lock_release_recursive>
 80072d6:	4628      	mov	r0, r5
 80072d8:	bd70      	pop	{r4, r5, r6, pc}
 80072da:	2b00      	cmp	r3, #0
 80072dc:	da04      	bge.n	80072e8 <_puts_r+0xac>
 80072de:	69a2      	ldr	r2, [r4, #24]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	dc06      	bgt.n	80072f2 <_puts_r+0xb6>
 80072e4:	290a      	cmp	r1, #10
 80072e6:	d004      	beq.n	80072f2 <_puts_r+0xb6>
 80072e8:	6823      	ldr	r3, [r4, #0]
 80072ea:	1c5a      	adds	r2, r3, #1
 80072ec:	6022      	str	r2, [r4, #0]
 80072ee:	7019      	strb	r1, [r3, #0]
 80072f0:	e7c5      	b.n	800727e <_puts_r+0x42>
 80072f2:	4622      	mov	r2, r4
 80072f4:	4628      	mov	r0, r5
 80072f6:	f000 f8df 	bl	80074b8 <__swbuf_r>
 80072fa:	3001      	adds	r0, #1
 80072fc:	d1bf      	bne.n	800727e <_puts_r+0x42>
 80072fe:	e7df      	b.n	80072c0 <_puts_r+0x84>
 8007300:	6823      	ldr	r3, [r4, #0]
 8007302:	250a      	movs	r5, #10
 8007304:	1c5a      	adds	r2, r3, #1
 8007306:	6022      	str	r2, [r4, #0]
 8007308:	701d      	strb	r5, [r3, #0]
 800730a:	e7db      	b.n	80072c4 <_puts_r+0x88>
 800730c:	08009360 	.word	0x08009360
 8007310:	08009380 	.word	0x08009380
 8007314:	08009340 	.word	0x08009340

08007318 <puts>:
 8007318:	4b02      	ldr	r3, [pc, #8]	; (8007324 <puts+0xc>)
 800731a:	4601      	mov	r1, r0
 800731c:	6818      	ldr	r0, [r3, #0]
 800731e:	f7ff bf8d 	b.w	800723c <_puts_r>
 8007322:	bf00      	nop
 8007324:	2000002c 	.word	0x2000002c

08007328 <siprintf>:
 8007328:	b40e      	push	{r1, r2, r3}
 800732a:	b500      	push	{lr}
 800732c:	b09c      	sub	sp, #112	; 0x70
 800732e:	ab1d      	add	r3, sp, #116	; 0x74
 8007330:	9002      	str	r0, [sp, #8]
 8007332:	9006      	str	r0, [sp, #24]
 8007334:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007338:	4809      	ldr	r0, [pc, #36]	; (8007360 <siprintf+0x38>)
 800733a:	9107      	str	r1, [sp, #28]
 800733c:	9104      	str	r1, [sp, #16]
 800733e:	4909      	ldr	r1, [pc, #36]	; (8007364 <siprintf+0x3c>)
 8007340:	f853 2b04 	ldr.w	r2, [r3], #4
 8007344:	9105      	str	r1, [sp, #20]
 8007346:	6800      	ldr	r0, [r0, #0]
 8007348:	9301      	str	r3, [sp, #4]
 800734a:	a902      	add	r1, sp, #8
 800734c:	f000 fcd0 	bl	8007cf0 <_svfiprintf_r>
 8007350:	9b02      	ldr	r3, [sp, #8]
 8007352:	2200      	movs	r2, #0
 8007354:	701a      	strb	r2, [r3, #0]
 8007356:	b01c      	add	sp, #112	; 0x70
 8007358:	f85d eb04 	ldr.w	lr, [sp], #4
 800735c:	b003      	add	sp, #12
 800735e:	4770      	bx	lr
 8007360:	2000002c 	.word	0x2000002c
 8007364:	ffff0208 	.word	0xffff0208

08007368 <strcat>:
 8007368:	b510      	push	{r4, lr}
 800736a:	4602      	mov	r2, r0
 800736c:	7814      	ldrb	r4, [r2, #0]
 800736e:	4613      	mov	r3, r2
 8007370:	3201      	adds	r2, #1
 8007372:	2c00      	cmp	r4, #0
 8007374:	d1fa      	bne.n	800736c <strcat+0x4>
 8007376:	3b01      	subs	r3, #1
 8007378:	f811 2b01 	ldrb.w	r2, [r1], #1
 800737c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007380:	2a00      	cmp	r2, #0
 8007382:	d1f9      	bne.n	8007378 <strcat+0x10>
 8007384:	bd10      	pop	{r4, pc}

08007386 <strncmp>:
 8007386:	b510      	push	{r4, lr}
 8007388:	b16a      	cbz	r2, 80073a6 <strncmp+0x20>
 800738a:	3901      	subs	r1, #1
 800738c:	1884      	adds	r4, r0, r2
 800738e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007392:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007396:	4293      	cmp	r3, r2
 8007398:	d103      	bne.n	80073a2 <strncmp+0x1c>
 800739a:	42a0      	cmp	r0, r4
 800739c:	d001      	beq.n	80073a2 <strncmp+0x1c>
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1f5      	bne.n	800738e <strncmp+0x8>
 80073a2:	1a98      	subs	r0, r3, r2
 80073a4:	bd10      	pop	{r4, pc}
 80073a6:	4610      	mov	r0, r2
 80073a8:	e7fc      	b.n	80073a4 <strncmp+0x1e>

080073aa <strncpy>:
 80073aa:	b510      	push	{r4, lr}
 80073ac:	3901      	subs	r1, #1
 80073ae:	4603      	mov	r3, r0
 80073b0:	b132      	cbz	r2, 80073c0 <strncpy+0x16>
 80073b2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80073b6:	f803 4b01 	strb.w	r4, [r3], #1
 80073ba:	3a01      	subs	r2, #1
 80073bc:	2c00      	cmp	r4, #0
 80073be:	d1f7      	bne.n	80073b0 <strncpy+0x6>
 80073c0:	441a      	add	r2, r3
 80073c2:	2100      	movs	r1, #0
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d100      	bne.n	80073ca <strncpy+0x20>
 80073c8:	bd10      	pop	{r4, pc}
 80073ca:	f803 1b01 	strb.w	r1, [r3], #1
 80073ce:	e7f9      	b.n	80073c4 <strncpy+0x1a>

080073d0 <strstr>:
 80073d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073d2:	780c      	ldrb	r4, [r1, #0]
 80073d4:	b164      	cbz	r4, 80073f0 <strstr+0x20>
 80073d6:	4603      	mov	r3, r0
 80073d8:	781a      	ldrb	r2, [r3, #0]
 80073da:	4618      	mov	r0, r3
 80073dc:	1c5e      	adds	r6, r3, #1
 80073de:	b90a      	cbnz	r2, 80073e4 <strstr+0x14>
 80073e0:	4610      	mov	r0, r2
 80073e2:	e005      	b.n	80073f0 <strstr+0x20>
 80073e4:	4294      	cmp	r4, r2
 80073e6:	d108      	bne.n	80073fa <strstr+0x2a>
 80073e8:	460d      	mov	r5, r1
 80073ea:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80073ee:	b902      	cbnz	r2, 80073f2 <strstr+0x22>
 80073f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073f2:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80073f6:	4297      	cmp	r7, r2
 80073f8:	d0f7      	beq.n	80073ea <strstr+0x1a>
 80073fa:	4633      	mov	r3, r6
 80073fc:	e7ec      	b.n	80073d8 <strstr+0x8>
	...

08007400 <strtok>:
 8007400:	4b16      	ldr	r3, [pc, #88]	; (800745c <strtok+0x5c>)
 8007402:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007404:	681e      	ldr	r6, [r3, #0]
 8007406:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8007408:	4605      	mov	r5, r0
 800740a:	b9fc      	cbnz	r4, 800744c <strtok+0x4c>
 800740c:	2050      	movs	r0, #80	; 0x50
 800740e:	9101      	str	r1, [sp, #4]
 8007410:	f000 fb60 	bl	8007ad4 <malloc>
 8007414:	9901      	ldr	r1, [sp, #4]
 8007416:	65b0      	str	r0, [r6, #88]	; 0x58
 8007418:	4602      	mov	r2, r0
 800741a:	b920      	cbnz	r0, 8007426 <strtok+0x26>
 800741c:	4b10      	ldr	r3, [pc, #64]	; (8007460 <strtok+0x60>)
 800741e:	4811      	ldr	r0, [pc, #68]	; (8007464 <strtok+0x64>)
 8007420:	2157      	movs	r1, #87	; 0x57
 8007422:	f000 f909 	bl	8007638 <__assert_func>
 8007426:	e9c0 4400 	strd	r4, r4, [r0]
 800742a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800742e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007432:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8007436:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800743a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800743e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8007442:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007446:	6184      	str	r4, [r0, #24]
 8007448:	7704      	strb	r4, [r0, #28]
 800744a:	6244      	str	r4, [r0, #36]	; 0x24
 800744c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800744e:	2301      	movs	r3, #1
 8007450:	4628      	mov	r0, r5
 8007452:	b002      	add	sp, #8
 8007454:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007458:	f000 b806 	b.w	8007468 <__strtok_r>
 800745c:	2000002c 	.word	0x2000002c
 8007460:	0800928c 	.word	0x0800928c
 8007464:	080092a3 	.word	0x080092a3

08007468 <__strtok_r>:
 8007468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800746a:	b908      	cbnz	r0, 8007470 <__strtok_r+0x8>
 800746c:	6810      	ldr	r0, [r2, #0]
 800746e:	b188      	cbz	r0, 8007494 <__strtok_r+0x2c>
 8007470:	4604      	mov	r4, r0
 8007472:	4620      	mov	r0, r4
 8007474:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007478:	460f      	mov	r7, r1
 800747a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800747e:	b91e      	cbnz	r6, 8007488 <__strtok_r+0x20>
 8007480:	b965      	cbnz	r5, 800749c <__strtok_r+0x34>
 8007482:	6015      	str	r5, [r2, #0]
 8007484:	4628      	mov	r0, r5
 8007486:	e005      	b.n	8007494 <__strtok_r+0x2c>
 8007488:	42b5      	cmp	r5, r6
 800748a:	d1f6      	bne.n	800747a <__strtok_r+0x12>
 800748c:	2b00      	cmp	r3, #0
 800748e:	d1f0      	bne.n	8007472 <__strtok_r+0xa>
 8007490:	6014      	str	r4, [r2, #0]
 8007492:	7003      	strb	r3, [r0, #0]
 8007494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007496:	461c      	mov	r4, r3
 8007498:	e00c      	b.n	80074b4 <__strtok_r+0x4c>
 800749a:	b915      	cbnz	r5, 80074a2 <__strtok_r+0x3a>
 800749c:	f814 3b01 	ldrb.w	r3, [r4], #1
 80074a0:	460e      	mov	r6, r1
 80074a2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80074a6:	42ab      	cmp	r3, r5
 80074a8:	d1f7      	bne.n	800749a <__strtok_r+0x32>
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d0f3      	beq.n	8007496 <__strtok_r+0x2e>
 80074ae:	2300      	movs	r3, #0
 80074b0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80074b4:	6014      	str	r4, [r2, #0]
 80074b6:	e7ed      	b.n	8007494 <__strtok_r+0x2c>

080074b8 <__swbuf_r>:
 80074b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ba:	460e      	mov	r6, r1
 80074bc:	4614      	mov	r4, r2
 80074be:	4605      	mov	r5, r0
 80074c0:	b118      	cbz	r0, 80074ca <__swbuf_r+0x12>
 80074c2:	6983      	ldr	r3, [r0, #24]
 80074c4:	b90b      	cbnz	r3, 80074ca <__swbuf_r+0x12>
 80074c6:	f000 f9ef 	bl	80078a8 <__sinit>
 80074ca:	4b21      	ldr	r3, [pc, #132]	; (8007550 <__swbuf_r+0x98>)
 80074cc:	429c      	cmp	r4, r3
 80074ce:	d12b      	bne.n	8007528 <__swbuf_r+0x70>
 80074d0:	686c      	ldr	r4, [r5, #4]
 80074d2:	69a3      	ldr	r3, [r4, #24]
 80074d4:	60a3      	str	r3, [r4, #8]
 80074d6:	89a3      	ldrh	r3, [r4, #12]
 80074d8:	071a      	lsls	r2, r3, #28
 80074da:	d52f      	bpl.n	800753c <__swbuf_r+0x84>
 80074dc:	6923      	ldr	r3, [r4, #16]
 80074de:	b36b      	cbz	r3, 800753c <__swbuf_r+0x84>
 80074e0:	6923      	ldr	r3, [r4, #16]
 80074e2:	6820      	ldr	r0, [r4, #0]
 80074e4:	1ac0      	subs	r0, r0, r3
 80074e6:	6963      	ldr	r3, [r4, #20]
 80074e8:	b2f6      	uxtb	r6, r6
 80074ea:	4283      	cmp	r3, r0
 80074ec:	4637      	mov	r7, r6
 80074ee:	dc04      	bgt.n	80074fa <__swbuf_r+0x42>
 80074f0:	4621      	mov	r1, r4
 80074f2:	4628      	mov	r0, r5
 80074f4:	f000 f944 	bl	8007780 <_fflush_r>
 80074f8:	bb30      	cbnz	r0, 8007548 <__swbuf_r+0x90>
 80074fa:	68a3      	ldr	r3, [r4, #8]
 80074fc:	3b01      	subs	r3, #1
 80074fe:	60a3      	str	r3, [r4, #8]
 8007500:	6823      	ldr	r3, [r4, #0]
 8007502:	1c5a      	adds	r2, r3, #1
 8007504:	6022      	str	r2, [r4, #0]
 8007506:	701e      	strb	r6, [r3, #0]
 8007508:	6963      	ldr	r3, [r4, #20]
 800750a:	3001      	adds	r0, #1
 800750c:	4283      	cmp	r3, r0
 800750e:	d004      	beq.n	800751a <__swbuf_r+0x62>
 8007510:	89a3      	ldrh	r3, [r4, #12]
 8007512:	07db      	lsls	r3, r3, #31
 8007514:	d506      	bpl.n	8007524 <__swbuf_r+0x6c>
 8007516:	2e0a      	cmp	r6, #10
 8007518:	d104      	bne.n	8007524 <__swbuf_r+0x6c>
 800751a:	4621      	mov	r1, r4
 800751c:	4628      	mov	r0, r5
 800751e:	f000 f92f 	bl	8007780 <_fflush_r>
 8007522:	b988      	cbnz	r0, 8007548 <__swbuf_r+0x90>
 8007524:	4638      	mov	r0, r7
 8007526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007528:	4b0a      	ldr	r3, [pc, #40]	; (8007554 <__swbuf_r+0x9c>)
 800752a:	429c      	cmp	r4, r3
 800752c:	d101      	bne.n	8007532 <__swbuf_r+0x7a>
 800752e:	68ac      	ldr	r4, [r5, #8]
 8007530:	e7cf      	b.n	80074d2 <__swbuf_r+0x1a>
 8007532:	4b09      	ldr	r3, [pc, #36]	; (8007558 <__swbuf_r+0xa0>)
 8007534:	429c      	cmp	r4, r3
 8007536:	bf08      	it	eq
 8007538:	68ec      	ldreq	r4, [r5, #12]
 800753a:	e7ca      	b.n	80074d2 <__swbuf_r+0x1a>
 800753c:	4621      	mov	r1, r4
 800753e:	4628      	mov	r0, r5
 8007540:	f000 f80c 	bl	800755c <__swsetup_r>
 8007544:	2800      	cmp	r0, #0
 8007546:	d0cb      	beq.n	80074e0 <__swbuf_r+0x28>
 8007548:	f04f 37ff 	mov.w	r7, #4294967295
 800754c:	e7ea      	b.n	8007524 <__swbuf_r+0x6c>
 800754e:	bf00      	nop
 8007550:	08009360 	.word	0x08009360
 8007554:	08009380 	.word	0x08009380
 8007558:	08009340 	.word	0x08009340

0800755c <__swsetup_r>:
 800755c:	4b32      	ldr	r3, [pc, #200]	; (8007628 <__swsetup_r+0xcc>)
 800755e:	b570      	push	{r4, r5, r6, lr}
 8007560:	681d      	ldr	r5, [r3, #0]
 8007562:	4606      	mov	r6, r0
 8007564:	460c      	mov	r4, r1
 8007566:	b125      	cbz	r5, 8007572 <__swsetup_r+0x16>
 8007568:	69ab      	ldr	r3, [r5, #24]
 800756a:	b913      	cbnz	r3, 8007572 <__swsetup_r+0x16>
 800756c:	4628      	mov	r0, r5
 800756e:	f000 f99b 	bl	80078a8 <__sinit>
 8007572:	4b2e      	ldr	r3, [pc, #184]	; (800762c <__swsetup_r+0xd0>)
 8007574:	429c      	cmp	r4, r3
 8007576:	d10f      	bne.n	8007598 <__swsetup_r+0x3c>
 8007578:	686c      	ldr	r4, [r5, #4]
 800757a:	89a3      	ldrh	r3, [r4, #12]
 800757c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007580:	0719      	lsls	r1, r3, #28
 8007582:	d42c      	bmi.n	80075de <__swsetup_r+0x82>
 8007584:	06dd      	lsls	r5, r3, #27
 8007586:	d411      	bmi.n	80075ac <__swsetup_r+0x50>
 8007588:	2309      	movs	r3, #9
 800758a:	6033      	str	r3, [r6, #0]
 800758c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007590:	81a3      	strh	r3, [r4, #12]
 8007592:	f04f 30ff 	mov.w	r0, #4294967295
 8007596:	e03e      	b.n	8007616 <__swsetup_r+0xba>
 8007598:	4b25      	ldr	r3, [pc, #148]	; (8007630 <__swsetup_r+0xd4>)
 800759a:	429c      	cmp	r4, r3
 800759c:	d101      	bne.n	80075a2 <__swsetup_r+0x46>
 800759e:	68ac      	ldr	r4, [r5, #8]
 80075a0:	e7eb      	b.n	800757a <__swsetup_r+0x1e>
 80075a2:	4b24      	ldr	r3, [pc, #144]	; (8007634 <__swsetup_r+0xd8>)
 80075a4:	429c      	cmp	r4, r3
 80075a6:	bf08      	it	eq
 80075a8:	68ec      	ldreq	r4, [r5, #12]
 80075aa:	e7e6      	b.n	800757a <__swsetup_r+0x1e>
 80075ac:	0758      	lsls	r0, r3, #29
 80075ae:	d512      	bpl.n	80075d6 <__swsetup_r+0x7a>
 80075b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075b2:	b141      	cbz	r1, 80075c6 <__swsetup_r+0x6a>
 80075b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075b8:	4299      	cmp	r1, r3
 80075ba:	d002      	beq.n	80075c2 <__swsetup_r+0x66>
 80075bc:	4630      	mov	r0, r6
 80075be:	f000 fa91 	bl	8007ae4 <_free_r>
 80075c2:	2300      	movs	r3, #0
 80075c4:	6363      	str	r3, [r4, #52]	; 0x34
 80075c6:	89a3      	ldrh	r3, [r4, #12]
 80075c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80075cc:	81a3      	strh	r3, [r4, #12]
 80075ce:	2300      	movs	r3, #0
 80075d0:	6063      	str	r3, [r4, #4]
 80075d2:	6923      	ldr	r3, [r4, #16]
 80075d4:	6023      	str	r3, [r4, #0]
 80075d6:	89a3      	ldrh	r3, [r4, #12]
 80075d8:	f043 0308 	orr.w	r3, r3, #8
 80075dc:	81a3      	strh	r3, [r4, #12]
 80075de:	6923      	ldr	r3, [r4, #16]
 80075e0:	b94b      	cbnz	r3, 80075f6 <__swsetup_r+0x9a>
 80075e2:	89a3      	ldrh	r3, [r4, #12]
 80075e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80075e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075ec:	d003      	beq.n	80075f6 <__swsetup_r+0x9a>
 80075ee:	4621      	mov	r1, r4
 80075f0:	4630      	mov	r0, r6
 80075f2:	f000 fa2f 	bl	8007a54 <__smakebuf_r>
 80075f6:	89a0      	ldrh	r0, [r4, #12]
 80075f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075fc:	f010 0301 	ands.w	r3, r0, #1
 8007600:	d00a      	beq.n	8007618 <__swsetup_r+0xbc>
 8007602:	2300      	movs	r3, #0
 8007604:	60a3      	str	r3, [r4, #8]
 8007606:	6963      	ldr	r3, [r4, #20]
 8007608:	425b      	negs	r3, r3
 800760a:	61a3      	str	r3, [r4, #24]
 800760c:	6923      	ldr	r3, [r4, #16]
 800760e:	b943      	cbnz	r3, 8007622 <__swsetup_r+0xc6>
 8007610:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007614:	d1ba      	bne.n	800758c <__swsetup_r+0x30>
 8007616:	bd70      	pop	{r4, r5, r6, pc}
 8007618:	0781      	lsls	r1, r0, #30
 800761a:	bf58      	it	pl
 800761c:	6963      	ldrpl	r3, [r4, #20]
 800761e:	60a3      	str	r3, [r4, #8]
 8007620:	e7f4      	b.n	800760c <__swsetup_r+0xb0>
 8007622:	2000      	movs	r0, #0
 8007624:	e7f7      	b.n	8007616 <__swsetup_r+0xba>
 8007626:	bf00      	nop
 8007628:	2000002c 	.word	0x2000002c
 800762c:	08009360 	.word	0x08009360
 8007630:	08009380 	.word	0x08009380
 8007634:	08009340 	.word	0x08009340

08007638 <__assert_func>:
 8007638:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800763a:	4614      	mov	r4, r2
 800763c:	461a      	mov	r2, r3
 800763e:	4b09      	ldr	r3, [pc, #36]	; (8007664 <__assert_func+0x2c>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4605      	mov	r5, r0
 8007644:	68d8      	ldr	r0, [r3, #12]
 8007646:	b14c      	cbz	r4, 800765c <__assert_func+0x24>
 8007648:	4b07      	ldr	r3, [pc, #28]	; (8007668 <__assert_func+0x30>)
 800764a:	9100      	str	r1, [sp, #0]
 800764c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007650:	4906      	ldr	r1, [pc, #24]	; (800766c <__assert_func+0x34>)
 8007652:	462b      	mov	r3, r5
 8007654:	f000 f9a6 	bl	80079a4 <fiprintf>
 8007658:	f000 ff9e 	bl	8008598 <abort>
 800765c:	4b04      	ldr	r3, [pc, #16]	; (8007670 <__assert_func+0x38>)
 800765e:	461c      	mov	r4, r3
 8007660:	e7f3      	b.n	800764a <__assert_func+0x12>
 8007662:	bf00      	nop
 8007664:	2000002c 	.word	0x2000002c
 8007668:	08009304 	.word	0x08009304
 800766c:	08009311 	.word	0x08009311
 8007670:	0800933f 	.word	0x0800933f

08007674 <__sflush_r>:
 8007674:	898a      	ldrh	r2, [r1, #12]
 8007676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800767a:	4605      	mov	r5, r0
 800767c:	0710      	lsls	r0, r2, #28
 800767e:	460c      	mov	r4, r1
 8007680:	d458      	bmi.n	8007734 <__sflush_r+0xc0>
 8007682:	684b      	ldr	r3, [r1, #4]
 8007684:	2b00      	cmp	r3, #0
 8007686:	dc05      	bgt.n	8007694 <__sflush_r+0x20>
 8007688:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800768a:	2b00      	cmp	r3, #0
 800768c:	dc02      	bgt.n	8007694 <__sflush_r+0x20>
 800768e:	2000      	movs	r0, #0
 8007690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007694:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007696:	2e00      	cmp	r6, #0
 8007698:	d0f9      	beq.n	800768e <__sflush_r+0x1a>
 800769a:	2300      	movs	r3, #0
 800769c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80076a0:	682f      	ldr	r7, [r5, #0]
 80076a2:	602b      	str	r3, [r5, #0]
 80076a4:	d032      	beq.n	800770c <__sflush_r+0x98>
 80076a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80076a8:	89a3      	ldrh	r3, [r4, #12]
 80076aa:	075a      	lsls	r2, r3, #29
 80076ac:	d505      	bpl.n	80076ba <__sflush_r+0x46>
 80076ae:	6863      	ldr	r3, [r4, #4]
 80076b0:	1ac0      	subs	r0, r0, r3
 80076b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076b4:	b10b      	cbz	r3, 80076ba <__sflush_r+0x46>
 80076b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80076b8:	1ac0      	subs	r0, r0, r3
 80076ba:	2300      	movs	r3, #0
 80076bc:	4602      	mov	r2, r0
 80076be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076c0:	6a21      	ldr	r1, [r4, #32]
 80076c2:	4628      	mov	r0, r5
 80076c4:	47b0      	blx	r6
 80076c6:	1c43      	adds	r3, r0, #1
 80076c8:	89a3      	ldrh	r3, [r4, #12]
 80076ca:	d106      	bne.n	80076da <__sflush_r+0x66>
 80076cc:	6829      	ldr	r1, [r5, #0]
 80076ce:	291d      	cmp	r1, #29
 80076d0:	d82c      	bhi.n	800772c <__sflush_r+0xb8>
 80076d2:	4a2a      	ldr	r2, [pc, #168]	; (800777c <__sflush_r+0x108>)
 80076d4:	40ca      	lsrs	r2, r1
 80076d6:	07d6      	lsls	r6, r2, #31
 80076d8:	d528      	bpl.n	800772c <__sflush_r+0xb8>
 80076da:	2200      	movs	r2, #0
 80076dc:	6062      	str	r2, [r4, #4]
 80076de:	04d9      	lsls	r1, r3, #19
 80076e0:	6922      	ldr	r2, [r4, #16]
 80076e2:	6022      	str	r2, [r4, #0]
 80076e4:	d504      	bpl.n	80076f0 <__sflush_r+0x7c>
 80076e6:	1c42      	adds	r2, r0, #1
 80076e8:	d101      	bne.n	80076ee <__sflush_r+0x7a>
 80076ea:	682b      	ldr	r3, [r5, #0]
 80076ec:	b903      	cbnz	r3, 80076f0 <__sflush_r+0x7c>
 80076ee:	6560      	str	r0, [r4, #84]	; 0x54
 80076f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076f2:	602f      	str	r7, [r5, #0]
 80076f4:	2900      	cmp	r1, #0
 80076f6:	d0ca      	beq.n	800768e <__sflush_r+0x1a>
 80076f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076fc:	4299      	cmp	r1, r3
 80076fe:	d002      	beq.n	8007706 <__sflush_r+0x92>
 8007700:	4628      	mov	r0, r5
 8007702:	f000 f9ef 	bl	8007ae4 <_free_r>
 8007706:	2000      	movs	r0, #0
 8007708:	6360      	str	r0, [r4, #52]	; 0x34
 800770a:	e7c1      	b.n	8007690 <__sflush_r+0x1c>
 800770c:	6a21      	ldr	r1, [r4, #32]
 800770e:	2301      	movs	r3, #1
 8007710:	4628      	mov	r0, r5
 8007712:	47b0      	blx	r6
 8007714:	1c41      	adds	r1, r0, #1
 8007716:	d1c7      	bne.n	80076a8 <__sflush_r+0x34>
 8007718:	682b      	ldr	r3, [r5, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d0c4      	beq.n	80076a8 <__sflush_r+0x34>
 800771e:	2b1d      	cmp	r3, #29
 8007720:	d001      	beq.n	8007726 <__sflush_r+0xb2>
 8007722:	2b16      	cmp	r3, #22
 8007724:	d101      	bne.n	800772a <__sflush_r+0xb6>
 8007726:	602f      	str	r7, [r5, #0]
 8007728:	e7b1      	b.n	800768e <__sflush_r+0x1a>
 800772a:	89a3      	ldrh	r3, [r4, #12]
 800772c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007730:	81a3      	strh	r3, [r4, #12]
 8007732:	e7ad      	b.n	8007690 <__sflush_r+0x1c>
 8007734:	690f      	ldr	r7, [r1, #16]
 8007736:	2f00      	cmp	r7, #0
 8007738:	d0a9      	beq.n	800768e <__sflush_r+0x1a>
 800773a:	0793      	lsls	r3, r2, #30
 800773c:	680e      	ldr	r6, [r1, #0]
 800773e:	bf08      	it	eq
 8007740:	694b      	ldreq	r3, [r1, #20]
 8007742:	600f      	str	r7, [r1, #0]
 8007744:	bf18      	it	ne
 8007746:	2300      	movne	r3, #0
 8007748:	eba6 0807 	sub.w	r8, r6, r7
 800774c:	608b      	str	r3, [r1, #8]
 800774e:	f1b8 0f00 	cmp.w	r8, #0
 8007752:	dd9c      	ble.n	800768e <__sflush_r+0x1a>
 8007754:	6a21      	ldr	r1, [r4, #32]
 8007756:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007758:	4643      	mov	r3, r8
 800775a:	463a      	mov	r2, r7
 800775c:	4628      	mov	r0, r5
 800775e:	47b0      	blx	r6
 8007760:	2800      	cmp	r0, #0
 8007762:	dc06      	bgt.n	8007772 <__sflush_r+0xfe>
 8007764:	89a3      	ldrh	r3, [r4, #12]
 8007766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800776a:	81a3      	strh	r3, [r4, #12]
 800776c:	f04f 30ff 	mov.w	r0, #4294967295
 8007770:	e78e      	b.n	8007690 <__sflush_r+0x1c>
 8007772:	4407      	add	r7, r0
 8007774:	eba8 0800 	sub.w	r8, r8, r0
 8007778:	e7e9      	b.n	800774e <__sflush_r+0xda>
 800777a:	bf00      	nop
 800777c:	20400001 	.word	0x20400001

08007780 <_fflush_r>:
 8007780:	b538      	push	{r3, r4, r5, lr}
 8007782:	690b      	ldr	r3, [r1, #16]
 8007784:	4605      	mov	r5, r0
 8007786:	460c      	mov	r4, r1
 8007788:	b913      	cbnz	r3, 8007790 <_fflush_r+0x10>
 800778a:	2500      	movs	r5, #0
 800778c:	4628      	mov	r0, r5
 800778e:	bd38      	pop	{r3, r4, r5, pc}
 8007790:	b118      	cbz	r0, 800779a <_fflush_r+0x1a>
 8007792:	6983      	ldr	r3, [r0, #24]
 8007794:	b90b      	cbnz	r3, 800779a <_fflush_r+0x1a>
 8007796:	f000 f887 	bl	80078a8 <__sinit>
 800779a:	4b14      	ldr	r3, [pc, #80]	; (80077ec <_fflush_r+0x6c>)
 800779c:	429c      	cmp	r4, r3
 800779e:	d11b      	bne.n	80077d8 <_fflush_r+0x58>
 80077a0:	686c      	ldr	r4, [r5, #4]
 80077a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d0ef      	beq.n	800778a <_fflush_r+0xa>
 80077aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80077ac:	07d0      	lsls	r0, r2, #31
 80077ae:	d404      	bmi.n	80077ba <_fflush_r+0x3a>
 80077b0:	0599      	lsls	r1, r3, #22
 80077b2:	d402      	bmi.n	80077ba <_fflush_r+0x3a>
 80077b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077b6:	f000 f927 	bl	8007a08 <__retarget_lock_acquire_recursive>
 80077ba:	4628      	mov	r0, r5
 80077bc:	4621      	mov	r1, r4
 80077be:	f7ff ff59 	bl	8007674 <__sflush_r>
 80077c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077c4:	07da      	lsls	r2, r3, #31
 80077c6:	4605      	mov	r5, r0
 80077c8:	d4e0      	bmi.n	800778c <_fflush_r+0xc>
 80077ca:	89a3      	ldrh	r3, [r4, #12]
 80077cc:	059b      	lsls	r3, r3, #22
 80077ce:	d4dd      	bmi.n	800778c <_fflush_r+0xc>
 80077d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077d2:	f000 f91a 	bl	8007a0a <__retarget_lock_release_recursive>
 80077d6:	e7d9      	b.n	800778c <_fflush_r+0xc>
 80077d8:	4b05      	ldr	r3, [pc, #20]	; (80077f0 <_fflush_r+0x70>)
 80077da:	429c      	cmp	r4, r3
 80077dc:	d101      	bne.n	80077e2 <_fflush_r+0x62>
 80077de:	68ac      	ldr	r4, [r5, #8]
 80077e0:	e7df      	b.n	80077a2 <_fflush_r+0x22>
 80077e2:	4b04      	ldr	r3, [pc, #16]	; (80077f4 <_fflush_r+0x74>)
 80077e4:	429c      	cmp	r4, r3
 80077e6:	bf08      	it	eq
 80077e8:	68ec      	ldreq	r4, [r5, #12]
 80077ea:	e7da      	b.n	80077a2 <_fflush_r+0x22>
 80077ec:	08009360 	.word	0x08009360
 80077f0:	08009380 	.word	0x08009380
 80077f4:	08009340 	.word	0x08009340

080077f8 <std>:
 80077f8:	2300      	movs	r3, #0
 80077fa:	b510      	push	{r4, lr}
 80077fc:	4604      	mov	r4, r0
 80077fe:	e9c0 3300 	strd	r3, r3, [r0]
 8007802:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007806:	6083      	str	r3, [r0, #8]
 8007808:	8181      	strh	r1, [r0, #12]
 800780a:	6643      	str	r3, [r0, #100]	; 0x64
 800780c:	81c2      	strh	r2, [r0, #14]
 800780e:	6183      	str	r3, [r0, #24]
 8007810:	4619      	mov	r1, r3
 8007812:	2208      	movs	r2, #8
 8007814:	305c      	adds	r0, #92	; 0x5c
 8007816:	f7ff fcf1 	bl	80071fc <memset>
 800781a:	4b05      	ldr	r3, [pc, #20]	; (8007830 <std+0x38>)
 800781c:	6263      	str	r3, [r4, #36]	; 0x24
 800781e:	4b05      	ldr	r3, [pc, #20]	; (8007834 <std+0x3c>)
 8007820:	62a3      	str	r3, [r4, #40]	; 0x28
 8007822:	4b05      	ldr	r3, [pc, #20]	; (8007838 <std+0x40>)
 8007824:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007826:	4b05      	ldr	r3, [pc, #20]	; (800783c <std+0x44>)
 8007828:	6224      	str	r4, [r4, #32]
 800782a:	6323      	str	r3, [r4, #48]	; 0x30
 800782c:	bd10      	pop	{r4, pc}
 800782e:	bf00      	nop
 8007830:	080084ed 	.word	0x080084ed
 8007834:	0800850f 	.word	0x0800850f
 8007838:	08008547 	.word	0x08008547
 800783c:	0800856b 	.word	0x0800856b

08007840 <_cleanup_r>:
 8007840:	4901      	ldr	r1, [pc, #4]	; (8007848 <_cleanup_r+0x8>)
 8007842:	f000 b8c1 	b.w	80079c8 <_fwalk_reent>
 8007846:	bf00      	nop
 8007848:	08007781 	.word	0x08007781

0800784c <__sfmoreglue>:
 800784c:	b570      	push	{r4, r5, r6, lr}
 800784e:	1e4a      	subs	r2, r1, #1
 8007850:	2568      	movs	r5, #104	; 0x68
 8007852:	4355      	muls	r5, r2
 8007854:	460e      	mov	r6, r1
 8007856:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800785a:	f000 f993 	bl	8007b84 <_malloc_r>
 800785e:	4604      	mov	r4, r0
 8007860:	b140      	cbz	r0, 8007874 <__sfmoreglue+0x28>
 8007862:	2100      	movs	r1, #0
 8007864:	e9c0 1600 	strd	r1, r6, [r0]
 8007868:	300c      	adds	r0, #12
 800786a:	60a0      	str	r0, [r4, #8]
 800786c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007870:	f7ff fcc4 	bl	80071fc <memset>
 8007874:	4620      	mov	r0, r4
 8007876:	bd70      	pop	{r4, r5, r6, pc}

08007878 <__sfp_lock_acquire>:
 8007878:	4801      	ldr	r0, [pc, #4]	; (8007880 <__sfp_lock_acquire+0x8>)
 800787a:	f000 b8c5 	b.w	8007a08 <__retarget_lock_acquire_recursive>
 800787e:	bf00      	nop
 8007880:	20001318 	.word	0x20001318

08007884 <__sfp_lock_release>:
 8007884:	4801      	ldr	r0, [pc, #4]	; (800788c <__sfp_lock_release+0x8>)
 8007886:	f000 b8c0 	b.w	8007a0a <__retarget_lock_release_recursive>
 800788a:	bf00      	nop
 800788c:	20001318 	.word	0x20001318

08007890 <__sinit_lock_acquire>:
 8007890:	4801      	ldr	r0, [pc, #4]	; (8007898 <__sinit_lock_acquire+0x8>)
 8007892:	f000 b8b9 	b.w	8007a08 <__retarget_lock_acquire_recursive>
 8007896:	bf00      	nop
 8007898:	20001313 	.word	0x20001313

0800789c <__sinit_lock_release>:
 800789c:	4801      	ldr	r0, [pc, #4]	; (80078a4 <__sinit_lock_release+0x8>)
 800789e:	f000 b8b4 	b.w	8007a0a <__retarget_lock_release_recursive>
 80078a2:	bf00      	nop
 80078a4:	20001313 	.word	0x20001313

080078a8 <__sinit>:
 80078a8:	b510      	push	{r4, lr}
 80078aa:	4604      	mov	r4, r0
 80078ac:	f7ff fff0 	bl	8007890 <__sinit_lock_acquire>
 80078b0:	69a3      	ldr	r3, [r4, #24]
 80078b2:	b11b      	cbz	r3, 80078bc <__sinit+0x14>
 80078b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078b8:	f7ff bff0 	b.w	800789c <__sinit_lock_release>
 80078bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80078c0:	6523      	str	r3, [r4, #80]	; 0x50
 80078c2:	4b13      	ldr	r3, [pc, #76]	; (8007910 <__sinit+0x68>)
 80078c4:	4a13      	ldr	r2, [pc, #76]	; (8007914 <__sinit+0x6c>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80078ca:	42a3      	cmp	r3, r4
 80078cc:	bf04      	itt	eq
 80078ce:	2301      	moveq	r3, #1
 80078d0:	61a3      	streq	r3, [r4, #24]
 80078d2:	4620      	mov	r0, r4
 80078d4:	f000 f820 	bl	8007918 <__sfp>
 80078d8:	6060      	str	r0, [r4, #4]
 80078da:	4620      	mov	r0, r4
 80078dc:	f000 f81c 	bl	8007918 <__sfp>
 80078e0:	60a0      	str	r0, [r4, #8]
 80078e2:	4620      	mov	r0, r4
 80078e4:	f000 f818 	bl	8007918 <__sfp>
 80078e8:	2200      	movs	r2, #0
 80078ea:	60e0      	str	r0, [r4, #12]
 80078ec:	2104      	movs	r1, #4
 80078ee:	6860      	ldr	r0, [r4, #4]
 80078f0:	f7ff ff82 	bl	80077f8 <std>
 80078f4:	68a0      	ldr	r0, [r4, #8]
 80078f6:	2201      	movs	r2, #1
 80078f8:	2109      	movs	r1, #9
 80078fa:	f7ff ff7d 	bl	80077f8 <std>
 80078fe:	68e0      	ldr	r0, [r4, #12]
 8007900:	2202      	movs	r2, #2
 8007902:	2112      	movs	r1, #18
 8007904:	f7ff ff78 	bl	80077f8 <std>
 8007908:	2301      	movs	r3, #1
 800790a:	61a3      	str	r3, [r4, #24]
 800790c:	e7d2      	b.n	80078b4 <__sinit+0xc>
 800790e:	bf00      	nop
 8007910:	08009288 	.word	0x08009288
 8007914:	08007841 	.word	0x08007841

08007918 <__sfp>:
 8007918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800791a:	4607      	mov	r7, r0
 800791c:	f7ff ffac 	bl	8007878 <__sfp_lock_acquire>
 8007920:	4b1e      	ldr	r3, [pc, #120]	; (800799c <__sfp+0x84>)
 8007922:	681e      	ldr	r6, [r3, #0]
 8007924:	69b3      	ldr	r3, [r6, #24]
 8007926:	b913      	cbnz	r3, 800792e <__sfp+0x16>
 8007928:	4630      	mov	r0, r6
 800792a:	f7ff ffbd 	bl	80078a8 <__sinit>
 800792e:	3648      	adds	r6, #72	; 0x48
 8007930:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007934:	3b01      	subs	r3, #1
 8007936:	d503      	bpl.n	8007940 <__sfp+0x28>
 8007938:	6833      	ldr	r3, [r6, #0]
 800793a:	b30b      	cbz	r3, 8007980 <__sfp+0x68>
 800793c:	6836      	ldr	r6, [r6, #0]
 800793e:	e7f7      	b.n	8007930 <__sfp+0x18>
 8007940:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007944:	b9d5      	cbnz	r5, 800797c <__sfp+0x64>
 8007946:	4b16      	ldr	r3, [pc, #88]	; (80079a0 <__sfp+0x88>)
 8007948:	60e3      	str	r3, [r4, #12]
 800794a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800794e:	6665      	str	r5, [r4, #100]	; 0x64
 8007950:	f000 f859 	bl	8007a06 <__retarget_lock_init_recursive>
 8007954:	f7ff ff96 	bl	8007884 <__sfp_lock_release>
 8007958:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800795c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007960:	6025      	str	r5, [r4, #0]
 8007962:	61a5      	str	r5, [r4, #24]
 8007964:	2208      	movs	r2, #8
 8007966:	4629      	mov	r1, r5
 8007968:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800796c:	f7ff fc46 	bl	80071fc <memset>
 8007970:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007974:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007978:	4620      	mov	r0, r4
 800797a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800797c:	3468      	adds	r4, #104	; 0x68
 800797e:	e7d9      	b.n	8007934 <__sfp+0x1c>
 8007980:	2104      	movs	r1, #4
 8007982:	4638      	mov	r0, r7
 8007984:	f7ff ff62 	bl	800784c <__sfmoreglue>
 8007988:	4604      	mov	r4, r0
 800798a:	6030      	str	r0, [r6, #0]
 800798c:	2800      	cmp	r0, #0
 800798e:	d1d5      	bne.n	800793c <__sfp+0x24>
 8007990:	f7ff ff78 	bl	8007884 <__sfp_lock_release>
 8007994:	230c      	movs	r3, #12
 8007996:	603b      	str	r3, [r7, #0]
 8007998:	e7ee      	b.n	8007978 <__sfp+0x60>
 800799a:	bf00      	nop
 800799c:	08009288 	.word	0x08009288
 80079a0:	ffff0001 	.word	0xffff0001

080079a4 <fiprintf>:
 80079a4:	b40e      	push	{r1, r2, r3}
 80079a6:	b503      	push	{r0, r1, lr}
 80079a8:	4601      	mov	r1, r0
 80079aa:	ab03      	add	r3, sp, #12
 80079ac:	4805      	ldr	r0, [pc, #20]	; (80079c4 <fiprintf+0x20>)
 80079ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80079b2:	6800      	ldr	r0, [r0, #0]
 80079b4:	9301      	str	r3, [sp, #4]
 80079b6:	f000 fac5 	bl	8007f44 <_vfiprintf_r>
 80079ba:	b002      	add	sp, #8
 80079bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80079c0:	b003      	add	sp, #12
 80079c2:	4770      	bx	lr
 80079c4:	2000002c 	.word	0x2000002c

080079c8 <_fwalk_reent>:
 80079c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079cc:	4606      	mov	r6, r0
 80079ce:	4688      	mov	r8, r1
 80079d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80079d4:	2700      	movs	r7, #0
 80079d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079da:	f1b9 0901 	subs.w	r9, r9, #1
 80079de:	d505      	bpl.n	80079ec <_fwalk_reent+0x24>
 80079e0:	6824      	ldr	r4, [r4, #0]
 80079e2:	2c00      	cmp	r4, #0
 80079e4:	d1f7      	bne.n	80079d6 <_fwalk_reent+0xe>
 80079e6:	4638      	mov	r0, r7
 80079e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079ec:	89ab      	ldrh	r3, [r5, #12]
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d907      	bls.n	8007a02 <_fwalk_reent+0x3a>
 80079f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80079f6:	3301      	adds	r3, #1
 80079f8:	d003      	beq.n	8007a02 <_fwalk_reent+0x3a>
 80079fa:	4629      	mov	r1, r5
 80079fc:	4630      	mov	r0, r6
 80079fe:	47c0      	blx	r8
 8007a00:	4307      	orrs	r7, r0
 8007a02:	3568      	adds	r5, #104	; 0x68
 8007a04:	e7e9      	b.n	80079da <_fwalk_reent+0x12>

08007a06 <__retarget_lock_init_recursive>:
 8007a06:	4770      	bx	lr

08007a08 <__retarget_lock_acquire_recursive>:
 8007a08:	4770      	bx	lr

08007a0a <__retarget_lock_release_recursive>:
 8007a0a:	4770      	bx	lr

08007a0c <__swhatbuf_r>:
 8007a0c:	b570      	push	{r4, r5, r6, lr}
 8007a0e:	460e      	mov	r6, r1
 8007a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a14:	2900      	cmp	r1, #0
 8007a16:	b096      	sub	sp, #88	; 0x58
 8007a18:	4614      	mov	r4, r2
 8007a1a:	461d      	mov	r5, r3
 8007a1c:	da07      	bge.n	8007a2e <__swhatbuf_r+0x22>
 8007a1e:	2300      	movs	r3, #0
 8007a20:	602b      	str	r3, [r5, #0]
 8007a22:	89b3      	ldrh	r3, [r6, #12]
 8007a24:	061a      	lsls	r2, r3, #24
 8007a26:	d410      	bmi.n	8007a4a <__swhatbuf_r+0x3e>
 8007a28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a2c:	e00e      	b.n	8007a4c <__swhatbuf_r+0x40>
 8007a2e:	466a      	mov	r2, sp
 8007a30:	f000 fdca 	bl	80085c8 <_fstat_r>
 8007a34:	2800      	cmp	r0, #0
 8007a36:	dbf2      	blt.n	8007a1e <__swhatbuf_r+0x12>
 8007a38:	9a01      	ldr	r2, [sp, #4]
 8007a3a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007a3e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007a42:	425a      	negs	r2, r3
 8007a44:	415a      	adcs	r2, r3
 8007a46:	602a      	str	r2, [r5, #0]
 8007a48:	e7ee      	b.n	8007a28 <__swhatbuf_r+0x1c>
 8007a4a:	2340      	movs	r3, #64	; 0x40
 8007a4c:	2000      	movs	r0, #0
 8007a4e:	6023      	str	r3, [r4, #0]
 8007a50:	b016      	add	sp, #88	; 0x58
 8007a52:	bd70      	pop	{r4, r5, r6, pc}

08007a54 <__smakebuf_r>:
 8007a54:	898b      	ldrh	r3, [r1, #12]
 8007a56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a58:	079d      	lsls	r5, r3, #30
 8007a5a:	4606      	mov	r6, r0
 8007a5c:	460c      	mov	r4, r1
 8007a5e:	d507      	bpl.n	8007a70 <__smakebuf_r+0x1c>
 8007a60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a64:	6023      	str	r3, [r4, #0]
 8007a66:	6123      	str	r3, [r4, #16]
 8007a68:	2301      	movs	r3, #1
 8007a6a:	6163      	str	r3, [r4, #20]
 8007a6c:	b002      	add	sp, #8
 8007a6e:	bd70      	pop	{r4, r5, r6, pc}
 8007a70:	ab01      	add	r3, sp, #4
 8007a72:	466a      	mov	r2, sp
 8007a74:	f7ff ffca 	bl	8007a0c <__swhatbuf_r>
 8007a78:	9900      	ldr	r1, [sp, #0]
 8007a7a:	4605      	mov	r5, r0
 8007a7c:	4630      	mov	r0, r6
 8007a7e:	f000 f881 	bl	8007b84 <_malloc_r>
 8007a82:	b948      	cbnz	r0, 8007a98 <__smakebuf_r+0x44>
 8007a84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a88:	059a      	lsls	r2, r3, #22
 8007a8a:	d4ef      	bmi.n	8007a6c <__smakebuf_r+0x18>
 8007a8c:	f023 0303 	bic.w	r3, r3, #3
 8007a90:	f043 0302 	orr.w	r3, r3, #2
 8007a94:	81a3      	strh	r3, [r4, #12]
 8007a96:	e7e3      	b.n	8007a60 <__smakebuf_r+0xc>
 8007a98:	4b0d      	ldr	r3, [pc, #52]	; (8007ad0 <__smakebuf_r+0x7c>)
 8007a9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007a9c:	89a3      	ldrh	r3, [r4, #12]
 8007a9e:	6020      	str	r0, [r4, #0]
 8007aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aa4:	81a3      	strh	r3, [r4, #12]
 8007aa6:	9b00      	ldr	r3, [sp, #0]
 8007aa8:	6163      	str	r3, [r4, #20]
 8007aaa:	9b01      	ldr	r3, [sp, #4]
 8007aac:	6120      	str	r0, [r4, #16]
 8007aae:	b15b      	cbz	r3, 8007ac8 <__smakebuf_r+0x74>
 8007ab0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ab4:	4630      	mov	r0, r6
 8007ab6:	f000 fd99 	bl	80085ec <_isatty_r>
 8007aba:	b128      	cbz	r0, 8007ac8 <__smakebuf_r+0x74>
 8007abc:	89a3      	ldrh	r3, [r4, #12]
 8007abe:	f023 0303 	bic.w	r3, r3, #3
 8007ac2:	f043 0301 	orr.w	r3, r3, #1
 8007ac6:	81a3      	strh	r3, [r4, #12]
 8007ac8:	89a0      	ldrh	r0, [r4, #12]
 8007aca:	4305      	orrs	r5, r0
 8007acc:	81a5      	strh	r5, [r4, #12]
 8007ace:	e7cd      	b.n	8007a6c <__smakebuf_r+0x18>
 8007ad0:	08007841 	.word	0x08007841

08007ad4 <malloc>:
 8007ad4:	4b02      	ldr	r3, [pc, #8]	; (8007ae0 <malloc+0xc>)
 8007ad6:	4601      	mov	r1, r0
 8007ad8:	6818      	ldr	r0, [r3, #0]
 8007ada:	f000 b853 	b.w	8007b84 <_malloc_r>
 8007ade:	bf00      	nop
 8007ae0:	2000002c 	.word	0x2000002c

08007ae4 <_free_r>:
 8007ae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ae6:	2900      	cmp	r1, #0
 8007ae8:	d048      	beq.n	8007b7c <_free_r+0x98>
 8007aea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007aee:	9001      	str	r0, [sp, #4]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f1a1 0404 	sub.w	r4, r1, #4
 8007af6:	bfb8      	it	lt
 8007af8:	18e4      	addlt	r4, r4, r3
 8007afa:	f000 fdb3 	bl	8008664 <__malloc_lock>
 8007afe:	4a20      	ldr	r2, [pc, #128]	; (8007b80 <_free_r+0x9c>)
 8007b00:	9801      	ldr	r0, [sp, #4]
 8007b02:	6813      	ldr	r3, [r2, #0]
 8007b04:	4615      	mov	r5, r2
 8007b06:	b933      	cbnz	r3, 8007b16 <_free_r+0x32>
 8007b08:	6063      	str	r3, [r4, #4]
 8007b0a:	6014      	str	r4, [r2, #0]
 8007b0c:	b003      	add	sp, #12
 8007b0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b12:	f000 bdad 	b.w	8008670 <__malloc_unlock>
 8007b16:	42a3      	cmp	r3, r4
 8007b18:	d90b      	bls.n	8007b32 <_free_r+0x4e>
 8007b1a:	6821      	ldr	r1, [r4, #0]
 8007b1c:	1862      	adds	r2, r4, r1
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	bf04      	itt	eq
 8007b22:	681a      	ldreq	r2, [r3, #0]
 8007b24:	685b      	ldreq	r3, [r3, #4]
 8007b26:	6063      	str	r3, [r4, #4]
 8007b28:	bf04      	itt	eq
 8007b2a:	1852      	addeq	r2, r2, r1
 8007b2c:	6022      	streq	r2, [r4, #0]
 8007b2e:	602c      	str	r4, [r5, #0]
 8007b30:	e7ec      	b.n	8007b0c <_free_r+0x28>
 8007b32:	461a      	mov	r2, r3
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	b10b      	cbz	r3, 8007b3c <_free_r+0x58>
 8007b38:	42a3      	cmp	r3, r4
 8007b3a:	d9fa      	bls.n	8007b32 <_free_r+0x4e>
 8007b3c:	6811      	ldr	r1, [r2, #0]
 8007b3e:	1855      	adds	r5, r2, r1
 8007b40:	42a5      	cmp	r5, r4
 8007b42:	d10b      	bne.n	8007b5c <_free_r+0x78>
 8007b44:	6824      	ldr	r4, [r4, #0]
 8007b46:	4421      	add	r1, r4
 8007b48:	1854      	adds	r4, r2, r1
 8007b4a:	42a3      	cmp	r3, r4
 8007b4c:	6011      	str	r1, [r2, #0]
 8007b4e:	d1dd      	bne.n	8007b0c <_free_r+0x28>
 8007b50:	681c      	ldr	r4, [r3, #0]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	6053      	str	r3, [r2, #4]
 8007b56:	4421      	add	r1, r4
 8007b58:	6011      	str	r1, [r2, #0]
 8007b5a:	e7d7      	b.n	8007b0c <_free_r+0x28>
 8007b5c:	d902      	bls.n	8007b64 <_free_r+0x80>
 8007b5e:	230c      	movs	r3, #12
 8007b60:	6003      	str	r3, [r0, #0]
 8007b62:	e7d3      	b.n	8007b0c <_free_r+0x28>
 8007b64:	6825      	ldr	r5, [r4, #0]
 8007b66:	1961      	adds	r1, r4, r5
 8007b68:	428b      	cmp	r3, r1
 8007b6a:	bf04      	itt	eq
 8007b6c:	6819      	ldreq	r1, [r3, #0]
 8007b6e:	685b      	ldreq	r3, [r3, #4]
 8007b70:	6063      	str	r3, [r4, #4]
 8007b72:	bf04      	itt	eq
 8007b74:	1949      	addeq	r1, r1, r5
 8007b76:	6021      	streq	r1, [r4, #0]
 8007b78:	6054      	str	r4, [r2, #4]
 8007b7a:	e7c7      	b.n	8007b0c <_free_r+0x28>
 8007b7c:	b003      	add	sp, #12
 8007b7e:	bd30      	pop	{r4, r5, pc}
 8007b80:	200008d0 	.word	0x200008d0

08007b84 <_malloc_r>:
 8007b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b86:	1ccd      	adds	r5, r1, #3
 8007b88:	f025 0503 	bic.w	r5, r5, #3
 8007b8c:	3508      	adds	r5, #8
 8007b8e:	2d0c      	cmp	r5, #12
 8007b90:	bf38      	it	cc
 8007b92:	250c      	movcc	r5, #12
 8007b94:	2d00      	cmp	r5, #0
 8007b96:	4606      	mov	r6, r0
 8007b98:	db01      	blt.n	8007b9e <_malloc_r+0x1a>
 8007b9a:	42a9      	cmp	r1, r5
 8007b9c:	d903      	bls.n	8007ba6 <_malloc_r+0x22>
 8007b9e:	230c      	movs	r3, #12
 8007ba0:	6033      	str	r3, [r6, #0]
 8007ba2:	2000      	movs	r0, #0
 8007ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ba6:	f000 fd5d 	bl	8008664 <__malloc_lock>
 8007baa:	4921      	ldr	r1, [pc, #132]	; (8007c30 <_malloc_r+0xac>)
 8007bac:	680a      	ldr	r2, [r1, #0]
 8007bae:	4614      	mov	r4, r2
 8007bb0:	b99c      	cbnz	r4, 8007bda <_malloc_r+0x56>
 8007bb2:	4f20      	ldr	r7, [pc, #128]	; (8007c34 <_malloc_r+0xb0>)
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	b923      	cbnz	r3, 8007bc2 <_malloc_r+0x3e>
 8007bb8:	4621      	mov	r1, r4
 8007bba:	4630      	mov	r0, r6
 8007bbc:	f000 fc86 	bl	80084cc <_sbrk_r>
 8007bc0:	6038      	str	r0, [r7, #0]
 8007bc2:	4629      	mov	r1, r5
 8007bc4:	4630      	mov	r0, r6
 8007bc6:	f000 fc81 	bl	80084cc <_sbrk_r>
 8007bca:	1c43      	adds	r3, r0, #1
 8007bcc:	d123      	bne.n	8007c16 <_malloc_r+0x92>
 8007bce:	230c      	movs	r3, #12
 8007bd0:	6033      	str	r3, [r6, #0]
 8007bd2:	4630      	mov	r0, r6
 8007bd4:	f000 fd4c 	bl	8008670 <__malloc_unlock>
 8007bd8:	e7e3      	b.n	8007ba2 <_malloc_r+0x1e>
 8007bda:	6823      	ldr	r3, [r4, #0]
 8007bdc:	1b5b      	subs	r3, r3, r5
 8007bde:	d417      	bmi.n	8007c10 <_malloc_r+0x8c>
 8007be0:	2b0b      	cmp	r3, #11
 8007be2:	d903      	bls.n	8007bec <_malloc_r+0x68>
 8007be4:	6023      	str	r3, [r4, #0]
 8007be6:	441c      	add	r4, r3
 8007be8:	6025      	str	r5, [r4, #0]
 8007bea:	e004      	b.n	8007bf6 <_malloc_r+0x72>
 8007bec:	6863      	ldr	r3, [r4, #4]
 8007bee:	42a2      	cmp	r2, r4
 8007bf0:	bf0c      	ite	eq
 8007bf2:	600b      	streq	r3, [r1, #0]
 8007bf4:	6053      	strne	r3, [r2, #4]
 8007bf6:	4630      	mov	r0, r6
 8007bf8:	f000 fd3a 	bl	8008670 <__malloc_unlock>
 8007bfc:	f104 000b 	add.w	r0, r4, #11
 8007c00:	1d23      	adds	r3, r4, #4
 8007c02:	f020 0007 	bic.w	r0, r0, #7
 8007c06:	1ac2      	subs	r2, r0, r3
 8007c08:	d0cc      	beq.n	8007ba4 <_malloc_r+0x20>
 8007c0a:	1a1b      	subs	r3, r3, r0
 8007c0c:	50a3      	str	r3, [r4, r2]
 8007c0e:	e7c9      	b.n	8007ba4 <_malloc_r+0x20>
 8007c10:	4622      	mov	r2, r4
 8007c12:	6864      	ldr	r4, [r4, #4]
 8007c14:	e7cc      	b.n	8007bb0 <_malloc_r+0x2c>
 8007c16:	1cc4      	adds	r4, r0, #3
 8007c18:	f024 0403 	bic.w	r4, r4, #3
 8007c1c:	42a0      	cmp	r0, r4
 8007c1e:	d0e3      	beq.n	8007be8 <_malloc_r+0x64>
 8007c20:	1a21      	subs	r1, r4, r0
 8007c22:	4630      	mov	r0, r6
 8007c24:	f000 fc52 	bl	80084cc <_sbrk_r>
 8007c28:	3001      	adds	r0, #1
 8007c2a:	d1dd      	bne.n	8007be8 <_malloc_r+0x64>
 8007c2c:	e7cf      	b.n	8007bce <_malloc_r+0x4a>
 8007c2e:	bf00      	nop
 8007c30:	200008d0 	.word	0x200008d0
 8007c34:	200008d4 	.word	0x200008d4

08007c38 <__ssputs_r>:
 8007c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c3c:	688e      	ldr	r6, [r1, #8]
 8007c3e:	429e      	cmp	r6, r3
 8007c40:	4682      	mov	sl, r0
 8007c42:	460c      	mov	r4, r1
 8007c44:	4690      	mov	r8, r2
 8007c46:	461f      	mov	r7, r3
 8007c48:	d838      	bhi.n	8007cbc <__ssputs_r+0x84>
 8007c4a:	898a      	ldrh	r2, [r1, #12]
 8007c4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c50:	d032      	beq.n	8007cb8 <__ssputs_r+0x80>
 8007c52:	6825      	ldr	r5, [r4, #0]
 8007c54:	6909      	ldr	r1, [r1, #16]
 8007c56:	eba5 0901 	sub.w	r9, r5, r1
 8007c5a:	6965      	ldr	r5, [r4, #20]
 8007c5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c64:	3301      	adds	r3, #1
 8007c66:	444b      	add	r3, r9
 8007c68:	106d      	asrs	r5, r5, #1
 8007c6a:	429d      	cmp	r5, r3
 8007c6c:	bf38      	it	cc
 8007c6e:	461d      	movcc	r5, r3
 8007c70:	0553      	lsls	r3, r2, #21
 8007c72:	d531      	bpl.n	8007cd8 <__ssputs_r+0xa0>
 8007c74:	4629      	mov	r1, r5
 8007c76:	f7ff ff85 	bl	8007b84 <_malloc_r>
 8007c7a:	4606      	mov	r6, r0
 8007c7c:	b950      	cbnz	r0, 8007c94 <__ssputs_r+0x5c>
 8007c7e:	230c      	movs	r3, #12
 8007c80:	f8ca 3000 	str.w	r3, [sl]
 8007c84:	89a3      	ldrh	r3, [r4, #12]
 8007c86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c8a:	81a3      	strh	r3, [r4, #12]
 8007c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c94:	6921      	ldr	r1, [r4, #16]
 8007c96:	464a      	mov	r2, r9
 8007c98:	f7ff faa2 	bl	80071e0 <memcpy>
 8007c9c:	89a3      	ldrh	r3, [r4, #12]
 8007c9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ca6:	81a3      	strh	r3, [r4, #12]
 8007ca8:	6126      	str	r6, [r4, #16]
 8007caa:	6165      	str	r5, [r4, #20]
 8007cac:	444e      	add	r6, r9
 8007cae:	eba5 0509 	sub.w	r5, r5, r9
 8007cb2:	6026      	str	r6, [r4, #0]
 8007cb4:	60a5      	str	r5, [r4, #8]
 8007cb6:	463e      	mov	r6, r7
 8007cb8:	42be      	cmp	r6, r7
 8007cba:	d900      	bls.n	8007cbe <__ssputs_r+0x86>
 8007cbc:	463e      	mov	r6, r7
 8007cbe:	4632      	mov	r2, r6
 8007cc0:	6820      	ldr	r0, [r4, #0]
 8007cc2:	4641      	mov	r1, r8
 8007cc4:	f000 fcb4 	bl	8008630 <memmove>
 8007cc8:	68a3      	ldr	r3, [r4, #8]
 8007cca:	6822      	ldr	r2, [r4, #0]
 8007ccc:	1b9b      	subs	r3, r3, r6
 8007cce:	4432      	add	r2, r6
 8007cd0:	60a3      	str	r3, [r4, #8]
 8007cd2:	6022      	str	r2, [r4, #0]
 8007cd4:	2000      	movs	r0, #0
 8007cd6:	e7db      	b.n	8007c90 <__ssputs_r+0x58>
 8007cd8:	462a      	mov	r2, r5
 8007cda:	f000 fccf 	bl	800867c <_realloc_r>
 8007cde:	4606      	mov	r6, r0
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	d1e1      	bne.n	8007ca8 <__ssputs_r+0x70>
 8007ce4:	6921      	ldr	r1, [r4, #16]
 8007ce6:	4650      	mov	r0, sl
 8007ce8:	f7ff fefc 	bl	8007ae4 <_free_r>
 8007cec:	e7c7      	b.n	8007c7e <__ssputs_r+0x46>
	...

08007cf0 <_svfiprintf_r>:
 8007cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf4:	4698      	mov	r8, r3
 8007cf6:	898b      	ldrh	r3, [r1, #12]
 8007cf8:	061b      	lsls	r3, r3, #24
 8007cfa:	b09d      	sub	sp, #116	; 0x74
 8007cfc:	4607      	mov	r7, r0
 8007cfe:	460d      	mov	r5, r1
 8007d00:	4614      	mov	r4, r2
 8007d02:	d50e      	bpl.n	8007d22 <_svfiprintf_r+0x32>
 8007d04:	690b      	ldr	r3, [r1, #16]
 8007d06:	b963      	cbnz	r3, 8007d22 <_svfiprintf_r+0x32>
 8007d08:	2140      	movs	r1, #64	; 0x40
 8007d0a:	f7ff ff3b 	bl	8007b84 <_malloc_r>
 8007d0e:	6028      	str	r0, [r5, #0]
 8007d10:	6128      	str	r0, [r5, #16]
 8007d12:	b920      	cbnz	r0, 8007d1e <_svfiprintf_r+0x2e>
 8007d14:	230c      	movs	r3, #12
 8007d16:	603b      	str	r3, [r7, #0]
 8007d18:	f04f 30ff 	mov.w	r0, #4294967295
 8007d1c:	e0d1      	b.n	8007ec2 <_svfiprintf_r+0x1d2>
 8007d1e:	2340      	movs	r3, #64	; 0x40
 8007d20:	616b      	str	r3, [r5, #20]
 8007d22:	2300      	movs	r3, #0
 8007d24:	9309      	str	r3, [sp, #36]	; 0x24
 8007d26:	2320      	movs	r3, #32
 8007d28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d30:	2330      	movs	r3, #48	; 0x30
 8007d32:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007edc <_svfiprintf_r+0x1ec>
 8007d36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d3a:	f04f 0901 	mov.w	r9, #1
 8007d3e:	4623      	mov	r3, r4
 8007d40:	469a      	mov	sl, r3
 8007d42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d46:	b10a      	cbz	r2, 8007d4c <_svfiprintf_r+0x5c>
 8007d48:	2a25      	cmp	r2, #37	; 0x25
 8007d4a:	d1f9      	bne.n	8007d40 <_svfiprintf_r+0x50>
 8007d4c:	ebba 0b04 	subs.w	fp, sl, r4
 8007d50:	d00b      	beq.n	8007d6a <_svfiprintf_r+0x7a>
 8007d52:	465b      	mov	r3, fp
 8007d54:	4622      	mov	r2, r4
 8007d56:	4629      	mov	r1, r5
 8007d58:	4638      	mov	r0, r7
 8007d5a:	f7ff ff6d 	bl	8007c38 <__ssputs_r>
 8007d5e:	3001      	adds	r0, #1
 8007d60:	f000 80aa 	beq.w	8007eb8 <_svfiprintf_r+0x1c8>
 8007d64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d66:	445a      	add	r2, fp
 8007d68:	9209      	str	r2, [sp, #36]	; 0x24
 8007d6a:	f89a 3000 	ldrb.w	r3, [sl]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	f000 80a2 	beq.w	8007eb8 <_svfiprintf_r+0x1c8>
 8007d74:	2300      	movs	r3, #0
 8007d76:	f04f 32ff 	mov.w	r2, #4294967295
 8007d7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d7e:	f10a 0a01 	add.w	sl, sl, #1
 8007d82:	9304      	str	r3, [sp, #16]
 8007d84:	9307      	str	r3, [sp, #28]
 8007d86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d8a:	931a      	str	r3, [sp, #104]	; 0x68
 8007d8c:	4654      	mov	r4, sl
 8007d8e:	2205      	movs	r2, #5
 8007d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d94:	4851      	ldr	r0, [pc, #324]	; (8007edc <_svfiprintf_r+0x1ec>)
 8007d96:	f7f8 fa23 	bl	80001e0 <memchr>
 8007d9a:	9a04      	ldr	r2, [sp, #16]
 8007d9c:	b9d8      	cbnz	r0, 8007dd6 <_svfiprintf_r+0xe6>
 8007d9e:	06d0      	lsls	r0, r2, #27
 8007da0:	bf44      	itt	mi
 8007da2:	2320      	movmi	r3, #32
 8007da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007da8:	0711      	lsls	r1, r2, #28
 8007daa:	bf44      	itt	mi
 8007dac:	232b      	movmi	r3, #43	; 0x2b
 8007dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007db2:	f89a 3000 	ldrb.w	r3, [sl]
 8007db6:	2b2a      	cmp	r3, #42	; 0x2a
 8007db8:	d015      	beq.n	8007de6 <_svfiprintf_r+0xf6>
 8007dba:	9a07      	ldr	r2, [sp, #28]
 8007dbc:	4654      	mov	r4, sl
 8007dbe:	2000      	movs	r0, #0
 8007dc0:	f04f 0c0a 	mov.w	ip, #10
 8007dc4:	4621      	mov	r1, r4
 8007dc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dca:	3b30      	subs	r3, #48	; 0x30
 8007dcc:	2b09      	cmp	r3, #9
 8007dce:	d94e      	bls.n	8007e6e <_svfiprintf_r+0x17e>
 8007dd0:	b1b0      	cbz	r0, 8007e00 <_svfiprintf_r+0x110>
 8007dd2:	9207      	str	r2, [sp, #28]
 8007dd4:	e014      	b.n	8007e00 <_svfiprintf_r+0x110>
 8007dd6:	eba0 0308 	sub.w	r3, r0, r8
 8007dda:	fa09 f303 	lsl.w	r3, r9, r3
 8007dde:	4313      	orrs	r3, r2
 8007de0:	9304      	str	r3, [sp, #16]
 8007de2:	46a2      	mov	sl, r4
 8007de4:	e7d2      	b.n	8007d8c <_svfiprintf_r+0x9c>
 8007de6:	9b03      	ldr	r3, [sp, #12]
 8007de8:	1d19      	adds	r1, r3, #4
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	9103      	str	r1, [sp, #12]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	bfbb      	ittet	lt
 8007df2:	425b      	neglt	r3, r3
 8007df4:	f042 0202 	orrlt.w	r2, r2, #2
 8007df8:	9307      	strge	r3, [sp, #28]
 8007dfa:	9307      	strlt	r3, [sp, #28]
 8007dfc:	bfb8      	it	lt
 8007dfe:	9204      	strlt	r2, [sp, #16]
 8007e00:	7823      	ldrb	r3, [r4, #0]
 8007e02:	2b2e      	cmp	r3, #46	; 0x2e
 8007e04:	d10c      	bne.n	8007e20 <_svfiprintf_r+0x130>
 8007e06:	7863      	ldrb	r3, [r4, #1]
 8007e08:	2b2a      	cmp	r3, #42	; 0x2a
 8007e0a:	d135      	bne.n	8007e78 <_svfiprintf_r+0x188>
 8007e0c:	9b03      	ldr	r3, [sp, #12]
 8007e0e:	1d1a      	adds	r2, r3, #4
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	9203      	str	r2, [sp, #12]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	bfb8      	it	lt
 8007e18:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e1c:	3402      	adds	r4, #2
 8007e1e:	9305      	str	r3, [sp, #20]
 8007e20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007eec <_svfiprintf_r+0x1fc>
 8007e24:	7821      	ldrb	r1, [r4, #0]
 8007e26:	2203      	movs	r2, #3
 8007e28:	4650      	mov	r0, sl
 8007e2a:	f7f8 f9d9 	bl	80001e0 <memchr>
 8007e2e:	b140      	cbz	r0, 8007e42 <_svfiprintf_r+0x152>
 8007e30:	2340      	movs	r3, #64	; 0x40
 8007e32:	eba0 000a 	sub.w	r0, r0, sl
 8007e36:	fa03 f000 	lsl.w	r0, r3, r0
 8007e3a:	9b04      	ldr	r3, [sp, #16]
 8007e3c:	4303      	orrs	r3, r0
 8007e3e:	3401      	adds	r4, #1
 8007e40:	9304      	str	r3, [sp, #16]
 8007e42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e46:	4826      	ldr	r0, [pc, #152]	; (8007ee0 <_svfiprintf_r+0x1f0>)
 8007e48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e4c:	2206      	movs	r2, #6
 8007e4e:	f7f8 f9c7 	bl	80001e0 <memchr>
 8007e52:	2800      	cmp	r0, #0
 8007e54:	d038      	beq.n	8007ec8 <_svfiprintf_r+0x1d8>
 8007e56:	4b23      	ldr	r3, [pc, #140]	; (8007ee4 <_svfiprintf_r+0x1f4>)
 8007e58:	bb1b      	cbnz	r3, 8007ea2 <_svfiprintf_r+0x1b2>
 8007e5a:	9b03      	ldr	r3, [sp, #12]
 8007e5c:	3307      	adds	r3, #7
 8007e5e:	f023 0307 	bic.w	r3, r3, #7
 8007e62:	3308      	adds	r3, #8
 8007e64:	9303      	str	r3, [sp, #12]
 8007e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e68:	4433      	add	r3, r6
 8007e6a:	9309      	str	r3, [sp, #36]	; 0x24
 8007e6c:	e767      	b.n	8007d3e <_svfiprintf_r+0x4e>
 8007e6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e72:	460c      	mov	r4, r1
 8007e74:	2001      	movs	r0, #1
 8007e76:	e7a5      	b.n	8007dc4 <_svfiprintf_r+0xd4>
 8007e78:	2300      	movs	r3, #0
 8007e7a:	3401      	adds	r4, #1
 8007e7c:	9305      	str	r3, [sp, #20]
 8007e7e:	4619      	mov	r1, r3
 8007e80:	f04f 0c0a 	mov.w	ip, #10
 8007e84:	4620      	mov	r0, r4
 8007e86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e8a:	3a30      	subs	r2, #48	; 0x30
 8007e8c:	2a09      	cmp	r2, #9
 8007e8e:	d903      	bls.n	8007e98 <_svfiprintf_r+0x1a8>
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d0c5      	beq.n	8007e20 <_svfiprintf_r+0x130>
 8007e94:	9105      	str	r1, [sp, #20]
 8007e96:	e7c3      	b.n	8007e20 <_svfiprintf_r+0x130>
 8007e98:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e9c:	4604      	mov	r4, r0
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e7f0      	b.n	8007e84 <_svfiprintf_r+0x194>
 8007ea2:	ab03      	add	r3, sp, #12
 8007ea4:	9300      	str	r3, [sp, #0]
 8007ea6:	462a      	mov	r2, r5
 8007ea8:	4b0f      	ldr	r3, [pc, #60]	; (8007ee8 <_svfiprintf_r+0x1f8>)
 8007eaa:	a904      	add	r1, sp, #16
 8007eac:	4638      	mov	r0, r7
 8007eae:	f3af 8000 	nop.w
 8007eb2:	1c42      	adds	r2, r0, #1
 8007eb4:	4606      	mov	r6, r0
 8007eb6:	d1d6      	bne.n	8007e66 <_svfiprintf_r+0x176>
 8007eb8:	89ab      	ldrh	r3, [r5, #12]
 8007eba:	065b      	lsls	r3, r3, #25
 8007ebc:	f53f af2c 	bmi.w	8007d18 <_svfiprintf_r+0x28>
 8007ec0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ec2:	b01d      	add	sp, #116	; 0x74
 8007ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec8:	ab03      	add	r3, sp, #12
 8007eca:	9300      	str	r3, [sp, #0]
 8007ecc:	462a      	mov	r2, r5
 8007ece:	4b06      	ldr	r3, [pc, #24]	; (8007ee8 <_svfiprintf_r+0x1f8>)
 8007ed0:	a904      	add	r1, sp, #16
 8007ed2:	4638      	mov	r0, r7
 8007ed4:	f000 f9d4 	bl	8008280 <_printf_i>
 8007ed8:	e7eb      	b.n	8007eb2 <_svfiprintf_r+0x1c2>
 8007eda:	bf00      	nop
 8007edc:	080093a0 	.word	0x080093a0
 8007ee0:	080093aa 	.word	0x080093aa
 8007ee4:	00000000 	.word	0x00000000
 8007ee8:	08007c39 	.word	0x08007c39
 8007eec:	080093a6 	.word	0x080093a6

08007ef0 <__sfputc_r>:
 8007ef0:	6893      	ldr	r3, [r2, #8]
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	b410      	push	{r4}
 8007ef8:	6093      	str	r3, [r2, #8]
 8007efa:	da08      	bge.n	8007f0e <__sfputc_r+0x1e>
 8007efc:	6994      	ldr	r4, [r2, #24]
 8007efe:	42a3      	cmp	r3, r4
 8007f00:	db01      	blt.n	8007f06 <__sfputc_r+0x16>
 8007f02:	290a      	cmp	r1, #10
 8007f04:	d103      	bne.n	8007f0e <__sfputc_r+0x1e>
 8007f06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f0a:	f7ff bad5 	b.w	80074b8 <__swbuf_r>
 8007f0e:	6813      	ldr	r3, [r2, #0]
 8007f10:	1c58      	adds	r0, r3, #1
 8007f12:	6010      	str	r0, [r2, #0]
 8007f14:	7019      	strb	r1, [r3, #0]
 8007f16:	4608      	mov	r0, r1
 8007f18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f1c:	4770      	bx	lr

08007f1e <__sfputs_r>:
 8007f1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f20:	4606      	mov	r6, r0
 8007f22:	460f      	mov	r7, r1
 8007f24:	4614      	mov	r4, r2
 8007f26:	18d5      	adds	r5, r2, r3
 8007f28:	42ac      	cmp	r4, r5
 8007f2a:	d101      	bne.n	8007f30 <__sfputs_r+0x12>
 8007f2c:	2000      	movs	r0, #0
 8007f2e:	e007      	b.n	8007f40 <__sfputs_r+0x22>
 8007f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f34:	463a      	mov	r2, r7
 8007f36:	4630      	mov	r0, r6
 8007f38:	f7ff ffda 	bl	8007ef0 <__sfputc_r>
 8007f3c:	1c43      	adds	r3, r0, #1
 8007f3e:	d1f3      	bne.n	8007f28 <__sfputs_r+0xa>
 8007f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f44 <_vfiprintf_r>:
 8007f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f48:	460d      	mov	r5, r1
 8007f4a:	b09d      	sub	sp, #116	; 0x74
 8007f4c:	4614      	mov	r4, r2
 8007f4e:	4698      	mov	r8, r3
 8007f50:	4606      	mov	r6, r0
 8007f52:	b118      	cbz	r0, 8007f5c <_vfiprintf_r+0x18>
 8007f54:	6983      	ldr	r3, [r0, #24]
 8007f56:	b90b      	cbnz	r3, 8007f5c <_vfiprintf_r+0x18>
 8007f58:	f7ff fca6 	bl	80078a8 <__sinit>
 8007f5c:	4b89      	ldr	r3, [pc, #548]	; (8008184 <_vfiprintf_r+0x240>)
 8007f5e:	429d      	cmp	r5, r3
 8007f60:	d11b      	bne.n	8007f9a <_vfiprintf_r+0x56>
 8007f62:	6875      	ldr	r5, [r6, #4]
 8007f64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f66:	07d9      	lsls	r1, r3, #31
 8007f68:	d405      	bmi.n	8007f76 <_vfiprintf_r+0x32>
 8007f6a:	89ab      	ldrh	r3, [r5, #12]
 8007f6c:	059a      	lsls	r2, r3, #22
 8007f6e:	d402      	bmi.n	8007f76 <_vfiprintf_r+0x32>
 8007f70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f72:	f7ff fd49 	bl	8007a08 <__retarget_lock_acquire_recursive>
 8007f76:	89ab      	ldrh	r3, [r5, #12]
 8007f78:	071b      	lsls	r3, r3, #28
 8007f7a:	d501      	bpl.n	8007f80 <_vfiprintf_r+0x3c>
 8007f7c:	692b      	ldr	r3, [r5, #16]
 8007f7e:	b9eb      	cbnz	r3, 8007fbc <_vfiprintf_r+0x78>
 8007f80:	4629      	mov	r1, r5
 8007f82:	4630      	mov	r0, r6
 8007f84:	f7ff faea 	bl	800755c <__swsetup_r>
 8007f88:	b1c0      	cbz	r0, 8007fbc <_vfiprintf_r+0x78>
 8007f8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f8c:	07dc      	lsls	r4, r3, #31
 8007f8e:	d50e      	bpl.n	8007fae <_vfiprintf_r+0x6a>
 8007f90:	f04f 30ff 	mov.w	r0, #4294967295
 8007f94:	b01d      	add	sp, #116	; 0x74
 8007f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f9a:	4b7b      	ldr	r3, [pc, #492]	; (8008188 <_vfiprintf_r+0x244>)
 8007f9c:	429d      	cmp	r5, r3
 8007f9e:	d101      	bne.n	8007fa4 <_vfiprintf_r+0x60>
 8007fa0:	68b5      	ldr	r5, [r6, #8]
 8007fa2:	e7df      	b.n	8007f64 <_vfiprintf_r+0x20>
 8007fa4:	4b79      	ldr	r3, [pc, #484]	; (800818c <_vfiprintf_r+0x248>)
 8007fa6:	429d      	cmp	r5, r3
 8007fa8:	bf08      	it	eq
 8007faa:	68f5      	ldreq	r5, [r6, #12]
 8007fac:	e7da      	b.n	8007f64 <_vfiprintf_r+0x20>
 8007fae:	89ab      	ldrh	r3, [r5, #12]
 8007fb0:	0598      	lsls	r0, r3, #22
 8007fb2:	d4ed      	bmi.n	8007f90 <_vfiprintf_r+0x4c>
 8007fb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fb6:	f7ff fd28 	bl	8007a0a <__retarget_lock_release_recursive>
 8007fba:	e7e9      	b.n	8007f90 <_vfiprintf_r+0x4c>
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	9309      	str	r3, [sp, #36]	; 0x24
 8007fc0:	2320      	movs	r3, #32
 8007fc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fca:	2330      	movs	r3, #48	; 0x30
 8007fcc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008190 <_vfiprintf_r+0x24c>
 8007fd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fd4:	f04f 0901 	mov.w	r9, #1
 8007fd8:	4623      	mov	r3, r4
 8007fda:	469a      	mov	sl, r3
 8007fdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fe0:	b10a      	cbz	r2, 8007fe6 <_vfiprintf_r+0xa2>
 8007fe2:	2a25      	cmp	r2, #37	; 0x25
 8007fe4:	d1f9      	bne.n	8007fda <_vfiprintf_r+0x96>
 8007fe6:	ebba 0b04 	subs.w	fp, sl, r4
 8007fea:	d00b      	beq.n	8008004 <_vfiprintf_r+0xc0>
 8007fec:	465b      	mov	r3, fp
 8007fee:	4622      	mov	r2, r4
 8007ff0:	4629      	mov	r1, r5
 8007ff2:	4630      	mov	r0, r6
 8007ff4:	f7ff ff93 	bl	8007f1e <__sfputs_r>
 8007ff8:	3001      	adds	r0, #1
 8007ffa:	f000 80aa 	beq.w	8008152 <_vfiprintf_r+0x20e>
 8007ffe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008000:	445a      	add	r2, fp
 8008002:	9209      	str	r2, [sp, #36]	; 0x24
 8008004:	f89a 3000 	ldrb.w	r3, [sl]
 8008008:	2b00      	cmp	r3, #0
 800800a:	f000 80a2 	beq.w	8008152 <_vfiprintf_r+0x20e>
 800800e:	2300      	movs	r3, #0
 8008010:	f04f 32ff 	mov.w	r2, #4294967295
 8008014:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008018:	f10a 0a01 	add.w	sl, sl, #1
 800801c:	9304      	str	r3, [sp, #16]
 800801e:	9307      	str	r3, [sp, #28]
 8008020:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008024:	931a      	str	r3, [sp, #104]	; 0x68
 8008026:	4654      	mov	r4, sl
 8008028:	2205      	movs	r2, #5
 800802a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800802e:	4858      	ldr	r0, [pc, #352]	; (8008190 <_vfiprintf_r+0x24c>)
 8008030:	f7f8 f8d6 	bl	80001e0 <memchr>
 8008034:	9a04      	ldr	r2, [sp, #16]
 8008036:	b9d8      	cbnz	r0, 8008070 <_vfiprintf_r+0x12c>
 8008038:	06d1      	lsls	r1, r2, #27
 800803a:	bf44      	itt	mi
 800803c:	2320      	movmi	r3, #32
 800803e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008042:	0713      	lsls	r3, r2, #28
 8008044:	bf44      	itt	mi
 8008046:	232b      	movmi	r3, #43	; 0x2b
 8008048:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800804c:	f89a 3000 	ldrb.w	r3, [sl]
 8008050:	2b2a      	cmp	r3, #42	; 0x2a
 8008052:	d015      	beq.n	8008080 <_vfiprintf_r+0x13c>
 8008054:	9a07      	ldr	r2, [sp, #28]
 8008056:	4654      	mov	r4, sl
 8008058:	2000      	movs	r0, #0
 800805a:	f04f 0c0a 	mov.w	ip, #10
 800805e:	4621      	mov	r1, r4
 8008060:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008064:	3b30      	subs	r3, #48	; 0x30
 8008066:	2b09      	cmp	r3, #9
 8008068:	d94e      	bls.n	8008108 <_vfiprintf_r+0x1c4>
 800806a:	b1b0      	cbz	r0, 800809a <_vfiprintf_r+0x156>
 800806c:	9207      	str	r2, [sp, #28]
 800806e:	e014      	b.n	800809a <_vfiprintf_r+0x156>
 8008070:	eba0 0308 	sub.w	r3, r0, r8
 8008074:	fa09 f303 	lsl.w	r3, r9, r3
 8008078:	4313      	orrs	r3, r2
 800807a:	9304      	str	r3, [sp, #16]
 800807c:	46a2      	mov	sl, r4
 800807e:	e7d2      	b.n	8008026 <_vfiprintf_r+0xe2>
 8008080:	9b03      	ldr	r3, [sp, #12]
 8008082:	1d19      	adds	r1, r3, #4
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	9103      	str	r1, [sp, #12]
 8008088:	2b00      	cmp	r3, #0
 800808a:	bfbb      	ittet	lt
 800808c:	425b      	neglt	r3, r3
 800808e:	f042 0202 	orrlt.w	r2, r2, #2
 8008092:	9307      	strge	r3, [sp, #28]
 8008094:	9307      	strlt	r3, [sp, #28]
 8008096:	bfb8      	it	lt
 8008098:	9204      	strlt	r2, [sp, #16]
 800809a:	7823      	ldrb	r3, [r4, #0]
 800809c:	2b2e      	cmp	r3, #46	; 0x2e
 800809e:	d10c      	bne.n	80080ba <_vfiprintf_r+0x176>
 80080a0:	7863      	ldrb	r3, [r4, #1]
 80080a2:	2b2a      	cmp	r3, #42	; 0x2a
 80080a4:	d135      	bne.n	8008112 <_vfiprintf_r+0x1ce>
 80080a6:	9b03      	ldr	r3, [sp, #12]
 80080a8:	1d1a      	adds	r2, r3, #4
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	9203      	str	r2, [sp, #12]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	bfb8      	it	lt
 80080b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80080b6:	3402      	adds	r4, #2
 80080b8:	9305      	str	r3, [sp, #20]
 80080ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80081a0 <_vfiprintf_r+0x25c>
 80080be:	7821      	ldrb	r1, [r4, #0]
 80080c0:	2203      	movs	r2, #3
 80080c2:	4650      	mov	r0, sl
 80080c4:	f7f8 f88c 	bl	80001e0 <memchr>
 80080c8:	b140      	cbz	r0, 80080dc <_vfiprintf_r+0x198>
 80080ca:	2340      	movs	r3, #64	; 0x40
 80080cc:	eba0 000a 	sub.w	r0, r0, sl
 80080d0:	fa03 f000 	lsl.w	r0, r3, r0
 80080d4:	9b04      	ldr	r3, [sp, #16]
 80080d6:	4303      	orrs	r3, r0
 80080d8:	3401      	adds	r4, #1
 80080da:	9304      	str	r3, [sp, #16]
 80080dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080e0:	482c      	ldr	r0, [pc, #176]	; (8008194 <_vfiprintf_r+0x250>)
 80080e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080e6:	2206      	movs	r2, #6
 80080e8:	f7f8 f87a 	bl	80001e0 <memchr>
 80080ec:	2800      	cmp	r0, #0
 80080ee:	d03f      	beq.n	8008170 <_vfiprintf_r+0x22c>
 80080f0:	4b29      	ldr	r3, [pc, #164]	; (8008198 <_vfiprintf_r+0x254>)
 80080f2:	bb1b      	cbnz	r3, 800813c <_vfiprintf_r+0x1f8>
 80080f4:	9b03      	ldr	r3, [sp, #12]
 80080f6:	3307      	adds	r3, #7
 80080f8:	f023 0307 	bic.w	r3, r3, #7
 80080fc:	3308      	adds	r3, #8
 80080fe:	9303      	str	r3, [sp, #12]
 8008100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008102:	443b      	add	r3, r7
 8008104:	9309      	str	r3, [sp, #36]	; 0x24
 8008106:	e767      	b.n	8007fd8 <_vfiprintf_r+0x94>
 8008108:	fb0c 3202 	mla	r2, ip, r2, r3
 800810c:	460c      	mov	r4, r1
 800810e:	2001      	movs	r0, #1
 8008110:	e7a5      	b.n	800805e <_vfiprintf_r+0x11a>
 8008112:	2300      	movs	r3, #0
 8008114:	3401      	adds	r4, #1
 8008116:	9305      	str	r3, [sp, #20]
 8008118:	4619      	mov	r1, r3
 800811a:	f04f 0c0a 	mov.w	ip, #10
 800811e:	4620      	mov	r0, r4
 8008120:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008124:	3a30      	subs	r2, #48	; 0x30
 8008126:	2a09      	cmp	r2, #9
 8008128:	d903      	bls.n	8008132 <_vfiprintf_r+0x1ee>
 800812a:	2b00      	cmp	r3, #0
 800812c:	d0c5      	beq.n	80080ba <_vfiprintf_r+0x176>
 800812e:	9105      	str	r1, [sp, #20]
 8008130:	e7c3      	b.n	80080ba <_vfiprintf_r+0x176>
 8008132:	fb0c 2101 	mla	r1, ip, r1, r2
 8008136:	4604      	mov	r4, r0
 8008138:	2301      	movs	r3, #1
 800813a:	e7f0      	b.n	800811e <_vfiprintf_r+0x1da>
 800813c:	ab03      	add	r3, sp, #12
 800813e:	9300      	str	r3, [sp, #0]
 8008140:	462a      	mov	r2, r5
 8008142:	4b16      	ldr	r3, [pc, #88]	; (800819c <_vfiprintf_r+0x258>)
 8008144:	a904      	add	r1, sp, #16
 8008146:	4630      	mov	r0, r6
 8008148:	f3af 8000 	nop.w
 800814c:	4607      	mov	r7, r0
 800814e:	1c78      	adds	r0, r7, #1
 8008150:	d1d6      	bne.n	8008100 <_vfiprintf_r+0x1bc>
 8008152:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008154:	07d9      	lsls	r1, r3, #31
 8008156:	d405      	bmi.n	8008164 <_vfiprintf_r+0x220>
 8008158:	89ab      	ldrh	r3, [r5, #12]
 800815a:	059a      	lsls	r2, r3, #22
 800815c:	d402      	bmi.n	8008164 <_vfiprintf_r+0x220>
 800815e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008160:	f7ff fc53 	bl	8007a0a <__retarget_lock_release_recursive>
 8008164:	89ab      	ldrh	r3, [r5, #12]
 8008166:	065b      	lsls	r3, r3, #25
 8008168:	f53f af12 	bmi.w	8007f90 <_vfiprintf_r+0x4c>
 800816c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800816e:	e711      	b.n	8007f94 <_vfiprintf_r+0x50>
 8008170:	ab03      	add	r3, sp, #12
 8008172:	9300      	str	r3, [sp, #0]
 8008174:	462a      	mov	r2, r5
 8008176:	4b09      	ldr	r3, [pc, #36]	; (800819c <_vfiprintf_r+0x258>)
 8008178:	a904      	add	r1, sp, #16
 800817a:	4630      	mov	r0, r6
 800817c:	f000 f880 	bl	8008280 <_printf_i>
 8008180:	e7e4      	b.n	800814c <_vfiprintf_r+0x208>
 8008182:	bf00      	nop
 8008184:	08009360 	.word	0x08009360
 8008188:	08009380 	.word	0x08009380
 800818c:	08009340 	.word	0x08009340
 8008190:	080093a0 	.word	0x080093a0
 8008194:	080093aa 	.word	0x080093aa
 8008198:	00000000 	.word	0x00000000
 800819c:	08007f1f 	.word	0x08007f1f
 80081a0:	080093a6 	.word	0x080093a6

080081a4 <_printf_common>:
 80081a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081a8:	4616      	mov	r6, r2
 80081aa:	4699      	mov	r9, r3
 80081ac:	688a      	ldr	r2, [r1, #8]
 80081ae:	690b      	ldr	r3, [r1, #16]
 80081b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081b4:	4293      	cmp	r3, r2
 80081b6:	bfb8      	it	lt
 80081b8:	4613      	movlt	r3, r2
 80081ba:	6033      	str	r3, [r6, #0]
 80081bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081c0:	4607      	mov	r7, r0
 80081c2:	460c      	mov	r4, r1
 80081c4:	b10a      	cbz	r2, 80081ca <_printf_common+0x26>
 80081c6:	3301      	adds	r3, #1
 80081c8:	6033      	str	r3, [r6, #0]
 80081ca:	6823      	ldr	r3, [r4, #0]
 80081cc:	0699      	lsls	r1, r3, #26
 80081ce:	bf42      	ittt	mi
 80081d0:	6833      	ldrmi	r3, [r6, #0]
 80081d2:	3302      	addmi	r3, #2
 80081d4:	6033      	strmi	r3, [r6, #0]
 80081d6:	6825      	ldr	r5, [r4, #0]
 80081d8:	f015 0506 	ands.w	r5, r5, #6
 80081dc:	d106      	bne.n	80081ec <_printf_common+0x48>
 80081de:	f104 0a19 	add.w	sl, r4, #25
 80081e2:	68e3      	ldr	r3, [r4, #12]
 80081e4:	6832      	ldr	r2, [r6, #0]
 80081e6:	1a9b      	subs	r3, r3, r2
 80081e8:	42ab      	cmp	r3, r5
 80081ea:	dc26      	bgt.n	800823a <_printf_common+0x96>
 80081ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80081f0:	1e13      	subs	r3, r2, #0
 80081f2:	6822      	ldr	r2, [r4, #0]
 80081f4:	bf18      	it	ne
 80081f6:	2301      	movne	r3, #1
 80081f8:	0692      	lsls	r2, r2, #26
 80081fa:	d42b      	bmi.n	8008254 <_printf_common+0xb0>
 80081fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008200:	4649      	mov	r1, r9
 8008202:	4638      	mov	r0, r7
 8008204:	47c0      	blx	r8
 8008206:	3001      	adds	r0, #1
 8008208:	d01e      	beq.n	8008248 <_printf_common+0xa4>
 800820a:	6823      	ldr	r3, [r4, #0]
 800820c:	68e5      	ldr	r5, [r4, #12]
 800820e:	6832      	ldr	r2, [r6, #0]
 8008210:	f003 0306 	and.w	r3, r3, #6
 8008214:	2b04      	cmp	r3, #4
 8008216:	bf08      	it	eq
 8008218:	1aad      	subeq	r5, r5, r2
 800821a:	68a3      	ldr	r3, [r4, #8]
 800821c:	6922      	ldr	r2, [r4, #16]
 800821e:	bf0c      	ite	eq
 8008220:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008224:	2500      	movne	r5, #0
 8008226:	4293      	cmp	r3, r2
 8008228:	bfc4      	itt	gt
 800822a:	1a9b      	subgt	r3, r3, r2
 800822c:	18ed      	addgt	r5, r5, r3
 800822e:	2600      	movs	r6, #0
 8008230:	341a      	adds	r4, #26
 8008232:	42b5      	cmp	r5, r6
 8008234:	d11a      	bne.n	800826c <_printf_common+0xc8>
 8008236:	2000      	movs	r0, #0
 8008238:	e008      	b.n	800824c <_printf_common+0xa8>
 800823a:	2301      	movs	r3, #1
 800823c:	4652      	mov	r2, sl
 800823e:	4649      	mov	r1, r9
 8008240:	4638      	mov	r0, r7
 8008242:	47c0      	blx	r8
 8008244:	3001      	adds	r0, #1
 8008246:	d103      	bne.n	8008250 <_printf_common+0xac>
 8008248:	f04f 30ff 	mov.w	r0, #4294967295
 800824c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008250:	3501      	adds	r5, #1
 8008252:	e7c6      	b.n	80081e2 <_printf_common+0x3e>
 8008254:	18e1      	adds	r1, r4, r3
 8008256:	1c5a      	adds	r2, r3, #1
 8008258:	2030      	movs	r0, #48	; 0x30
 800825a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800825e:	4422      	add	r2, r4
 8008260:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008264:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008268:	3302      	adds	r3, #2
 800826a:	e7c7      	b.n	80081fc <_printf_common+0x58>
 800826c:	2301      	movs	r3, #1
 800826e:	4622      	mov	r2, r4
 8008270:	4649      	mov	r1, r9
 8008272:	4638      	mov	r0, r7
 8008274:	47c0      	blx	r8
 8008276:	3001      	adds	r0, #1
 8008278:	d0e6      	beq.n	8008248 <_printf_common+0xa4>
 800827a:	3601      	adds	r6, #1
 800827c:	e7d9      	b.n	8008232 <_printf_common+0x8e>
	...

08008280 <_printf_i>:
 8008280:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008284:	460c      	mov	r4, r1
 8008286:	4691      	mov	r9, r2
 8008288:	7e27      	ldrb	r7, [r4, #24]
 800828a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800828c:	2f78      	cmp	r7, #120	; 0x78
 800828e:	4680      	mov	r8, r0
 8008290:	469a      	mov	sl, r3
 8008292:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008296:	d807      	bhi.n	80082a8 <_printf_i+0x28>
 8008298:	2f62      	cmp	r7, #98	; 0x62
 800829a:	d80a      	bhi.n	80082b2 <_printf_i+0x32>
 800829c:	2f00      	cmp	r7, #0
 800829e:	f000 80d8 	beq.w	8008452 <_printf_i+0x1d2>
 80082a2:	2f58      	cmp	r7, #88	; 0x58
 80082a4:	f000 80a3 	beq.w	80083ee <_printf_i+0x16e>
 80082a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80082ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80082b0:	e03a      	b.n	8008328 <_printf_i+0xa8>
 80082b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80082b6:	2b15      	cmp	r3, #21
 80082b8:	d8f6      	bhi.n	80082a8 <_printf_i+0x28>
 80082ba:	a001      	add	r0, pc, #4	; (adr r0, 80082c0 <_printf_i+0x40>)
 80082bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80082c0:	08008319 	.word	0x08008319
 80082c4:	0800832d 	.word	0x0800832d
 80082c8:	080082a9 	.word	0x080082a9
 80082cc:	080082a9 	.word	0x080082a9
 80082d0:	080082a9 	.word	0x080082a9
 80082d4:	080082a9 	.word	0x080082a9
 80082d8:	0800832d 	.word	0x0800832d
 80082dc:	080082a9 	.word	0x080082a9
 80082e0:	080082a9 	.word	0x080082a9
 80082e4:	080082a9 	.word	0x080082a9
 80082e8:	080082a9 	.word	0x080082a9
 80082ec:	08008439 	.word	0x08008439
 80082f0:	0800835d 	.word	0x0800835d
 80082f4:	0800841b 	.word	0x0800841b
 80082f8:	080082a9 	.word	0x080082a9
 80082fc:	080082a9 	.word	0x080082a9
 8008300:	0800845b 	.word	0x0800845b
 8008304:	080082a9 	.word	0x080082a9
 8008308:	0800835d 	.word	0x0800835d
 800830c:	080082a9 	.word	0x080082a9
 8008310:	080082a9 	.word	0x080082a9
 8008314:	08008423 	.word	0x08008423
 8008318:	680b      	ldr	r3, [r1, #0]
 800831a:	1d1a      	adds	r2, r3, #4
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	600a      	str	r2, [r1, #0]
 8008320:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008324:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008328:	2301      	movs	r3, #1
 800832a:	e0a3      	b.n	8008474 <_printf_i+0x1f4>
 800832c:	6825      	ldr	r5, [r4, #0]
 800832e:	6808      	ldr	r0, [r1, #0]
 8008330:	062e      	lsls	r6, r5, #24
 8008332:	f100 0304 	add.w	r3, r0, #4
 8008336:	d50a      	bpl.n	800834e <_printf_i+0xce>
 8008338:	6805      	ldr	r5, [r0, #0]
 800833a:	600b      	str	r3, [r1, #0]
 800833c:	2d00      	cmp	r5, #0
 800833e:	da03      	bge.n	8008348 <_printf_i+0xc8>
 8008340:	232d      	movs	r3, #45	; 0x2d
 8008342:	426d      	negs	r5, r5
 8008344:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008348:	485e      	ldr	r0, [pc, #376]	; (80084c4 <_printf_i+0x244>)
 800834a:	230a      	movs	r3, #10
 800834c:	e019      	b.n	8008382 <_printf_i+0x102>
 800834e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008352:	6805      	ldr	r5, [r0, #0]
 8008354:	600b      	str	r3, [r1, #0]
 8008356:	bf18      	it	ne
 8008358:	b22d      	sxthne	r5, r5
 800835a:	e7ef      	b.n	800833c <_printf_i+0xbc>
 800835c:	680b      	ldr	r3, [r1, #0]
 800835e:	6825      	ldr	r5, [r4, #0]
 8008360:	1d18      	adds	r0, r3, #4
 8008362:	6008      	str	r0, [r1, #0]
 8008364:	0628      	lsls	r0, r5, #24
 8008366:	d501      	bpl.n	800836c <_printf_i+0xec>
 8008368:	681d      	ldr	r5, [r3, #0]
 800836a:	e002      	b.n	8008372 <_printf_i+0xf2>
 800836c:	0669      	lsls	r1, r5, #25
 800836e:	d5fb      	bpl.n	8008368 <_printf_i+0xe8>
 8008370:	881d      	ldrh	r5, [r3, #0]
 8008372:	4854      	ldr	r0, [pc, #336]	; (80084c4 <_printf_i+0x244>)
 8008374:	2f6f      	cmp	r7, #111	; 0x6f
 8008376:	bf0c      	ite	eq
 8008378:	2308      	moveq	r3, #8
 800837a:	230a      	movne	r3, #10
 800837c:	2100      	movs	r1, #0
 800837e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008382:	6866      	ldr	r6, [r4, #4]
 8008384:	60a6      	str	r6, [r4, #8]
 8008386:	2e00      	cmp	r6, #0
 8008388:	bfa2      	ittt	ge
 800838a:	6821      	ldrge	r1, [r4, #0]
 800838c:	f021 0104 	bicge.w	r1, r1, #4
 8008390:	6021      	strge	r1, [r4, #0]
 8008392:	b90d      	cbnz	r5, 8008398 <_printf_i+0x118>
 8008394:	2e00      	cmp	r6, #0
 8008396:	d04d      	beq.n	8008434 <_printf_i+0x1b4>
 8008398:	4616      	mov	r6, r2
 800839a:	fbb5 f1f3 	udiv	r1, r5, r3
 800839e:	fb03 5711 	mls	r7, r3, r1, r5
 80083a2:	5dc7      	ldrb	r7, [r0, r7]
 80083a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083a8:	462f      	mov	r7, r5
 80083aa:	42bb      	cmp	r3, r7
 80083ac:	460d      	mov	r5, r1
 80083ae:	d9f4      	bls.n	800839a <_printf_i+0x11a>
 80083b0:	2b08      	cmp	r3, #8
 80083b2:	d10b      	bne.n	80083cc <_printf_i+0x14c>
 80083b4:	6823      	ldr	r3, [r4, #0]
 80083b6:	07df      	lsls	r7, r3, #31
 80083b8:	d508      	bpl.n	80083cc <_printf_i+0x14c>
 80083ba:	6923      	ldr	r3, [r4, #16]
 80083bc:	6861      	ldr	r1, [r4, #4]
 80083be:	4299      	cmp	r1, r3
 80083c0:	bfde      	ittt	le
 80083c2:	2330      	movle	r3, #48	; 0x30
 80083c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80083cc:	1b92      	subs	r2, r2, r6
 80083ce:	6122      	str	r2, [r4, #16]
 80083d0:	f8cd a000 	str.w	sl, [sp]
 80083d4:	464b      	mov	r3, r9
 80083d6:	aa03      	add	r2, sp, #12
 80083d8:	4621      	mov	r1, r4
 80083da:	4640      	mov	r0, r8
 80083dc:	f7ff fee2 	bl	80081a4 <_printf_common>
 80083e0:	3001      	adds	r0, #1
 80083e2:	d14c      	bne.n	800847e <_printf_i+0x1fe>
 80083e4:	f04f 30ff 	mov.w	r0, #4294967295
 80083e8:	b004      	add	sp, #16
 80083ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083ee:	4835      	ldr	r0, [pc, #212]	; (80084c4 <_printf_i+0x244>)
 80083f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80083f4:	6823      	ldr	r3, [r4, #0]
 80083f6:	680e      	ldr	r6, [r1, #0]
 80083f8:	061f      	lsls	r7, r3, #24
 80083fa:	f856 5b04 	ldr.w	r5, [r6], #4
 80083fe:	600e      	str	r6, [r1, #0]
 8008400:	d514      	bpl.n	800842c <_printf_i+0x1ac>
 8008402:	07d9      	lsls	r1, r3, #31
 8008404:	bf44      	itt	mi
 8008406:	f043 0320 	orrmi.w	r3, r3, #32
 800840a:	6023      	strmi	r3, [r4, #0]
 800840c:	b91d      	cbnz	r5, 8008416 <_printf_i+0x196>
 800840e:	6823      	ldr	r3, [r4, #0]
 8008410:	f023 0320 	bic.w	r3, r3, #32
 8008414:	6023      	str	r3, [r4, #0]
 8008416:	2310      	movs	r3, #16
 8008418:	e7b0      	b.n	800837c <_printf_i+0xfc>
 800841a:	6823      	ldr	r3, [r4, #0]
 800841c:	f043 0320 	orr.w	r3, r3, #32
 8008420:	6023      	str	r3, [r4, #0]
 8008422:	2378      	movs	r3, #120	; 0x78
 8008424:	4828      	ldr	r0, [pc, #160]	; (80084c8 <_printf_i+0x248>)
 8008426:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800842a:	e7e3      	b.n	80083f4 <_printf_i+0x174>
 800842c:	065e      	lsls	r6, r3, #25
 800842e:	bf48      	it	mi
 8008430:	b2ad      	uxthmi	r5, r5
 8008432:	e7e6      	b.n	8008402 <_printf_i+0x182>
 8008434:	4616      	mov	r6, r2
 8008436:	e7bb      	b.n	80083b0 <_printf_i+0x130>
 8008438:	680b      	ldr	r3, [r1, #0]
 800843a:	6826      	ldr	r6, [r4, #0]
 800843c:	6960      	ldr	r0, [r4, #20]
 800843e:	1d1d      	adds	r5, r3, #4
 8008440:	600d      	str	r5, [r1, #0]
 8008442:	0635      	lsls	r5, r6, #24
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	d501      	bpl.n	800844c <_printf_i+0x1cc>
 8008448:	6018      	str	r0, [r3, #0]
 800844a:	e002      	b.n	8008452 <_printf_i+0x1d2>
 800844c:	0671      	lsls	r1, r6, #25
 800844e:	d5fb      	bpl.n	8008448 <_printf_i+0x1c8>
 8008450:	8018      	strh	r0, [r3, #0]
 8008452:	2300      	movs	r3, #0
 8008454:	6123      	str	r3, [r4, #16]
 8008456:	4616      	mov	r6, r2
 8008458:	e7ba      	b.n	80083d0 <_printf_i+0x150>
 800845a:	680b      	ldr	r3, [r1, #0]
 800845c:	1d1a      	adds	r2, r3, #4
 800845e:	600a      	str	r2, [r1, #0]
 8008460:	681e      	ldr	r6, [r3, #0]
 8008462:	6862      	ldr	r2, [r4, #4]
 8008464:	2100      	movs	r1, #0
 8008466:	4630      	mov	r0, r6
 8008468:	f7f7 feba 	bl	80001e0 <memchr>
 800846c:	b108      	cbz	r0, 8008472 <_printf_i+0x1f2>
 800846e:	1b80      	subs	r0, r0, r6
 8008470:	6060      	str	r0, [r4, #4]
 8008472:	6863      	ldr	r3, [r4, #4]
 8008474:	6123      	str	r3, [r4, #16]
 8008476:	2300      	movs	r3, #0
 8008478:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800847c:	e7a8      	b.n	80083d0 <_printf_i+0x150>
 800847e:	6923      	ldr	r3, [r4, #16]
 8008480:	4632      	mov	r2, r6
 8008482:	4649      	mov	r1, r9
 8008484:	4640      	mov	r0, r8
 8008486:	47d0      	blx	sl
 8008488:	3001      	adds	r0, #1
 800848a:	d0ab      	beq.n	80083e4 <_printf_i+0x164>
 800848c:	6823      	ldr	r3, [r4, #0]
 800848e:	079b      	lsls	r3, r3, #30
 8008490:	d413      	bmi.n	80084ba <_printf_i+0x23a>
 8008492:	68e0      	ldr	r0, [r4, #12]
 8008494:	9b03      	ldr	r3, [sp, #12]
 8008496:	4298      	cmp	r0, r3
 8008498:	bfb8      	it	lt
 800849a:	4618      	movlt	r0, r3
 800849c:	e7a4      	b.n	80083e8 <_printf_i+0x168>
 800849e:	2301      	movs	r3, #1
 80084a0:	4632      	mov	r2, r6
 80084a2:	4649      	mov	r1, r9
 80084a4:	4640      	mov	r0, r8
 80084a6:	47d0      	blx	sl
 80084a8:	3001      	adds	r0, #1
 80084aa:	d09b      	beq.n	80083e4 <_printf_i+0x164>
 80084ac:	3501      	adds	r5, #1
 80084ae:	68e3      	ldr	r3, [r4, #12]
 80084b0:	9903      	ldr	r1, [sp, #12]
 80084b2:	1a5b      	subs	r3, r3, r1
 80084b4:	42ab      	cmp	r3, r5
 80084b6:	dcf2      	bgt.n	800849e <_printf_i+0x21e>
 80084b8:	e7eb      	b.n	8008492 <_printf_i+0x212>
 80084ba:	2500      	movs	r5, #0
 80084bc:	f104 0619 	add.w	r6, r4, #25
 80084c0:	e7f5      	b.n	80084ae <_printf_i+0x22e>
 80084c2:	bf00      	nop
 80084c4:	080093b1 	.word	0x080093b1
 80084c8:	080093c2 	.word	0x080093c2

080084cc <_sbrk_r>:
 80084cc:	b538      	push	{r3, r4, r5, lr}
 80084ce:	4d06      	ldr	r5, [pc, #24]	; (80084e8 <_sbrk_r+0x1c>)
 80084d0:	2300      	movs	r3, #0
 80084d2:	4604      	mov	r4, r0
 80084d4:	4608      	mov	r0, r1
 80084d6:	602b      	str	r3, [r5, #0]
 80084d8:	f7f8 f8de 	bl	8000698 <_sbrk>
 80084dc:	1c43      	adds	r3, r0, #1
 80084de:	d102      	bne.n	80084e6 <_sbrk_r+0x1a>
 80084e0:	682b      	ldr	r3, [r5, #0]
 80084e2:	b103      	cbz	r3, 80084e6 <_sbrk_r+0x1a>
 80084e4:	6023      	str	r3, [r4, #0]
 80084e6:	bd38      	pop	{r3, r4, r5, pc}
 80084e8:	2000131c 	.word	0x2000131c

080084ec <__sread>:
 80084ec:	b510      	push	{r4, lr}
 80084ee:	460c      	mov	r4, r1
 80084f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084f4:	f000 f8e8 	bl	80086c8 <_read_r>
 80084f8:	2800      	cmp	r0, #0
 80084fa:	bfab      	itete	ge
 80084fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80084fe:	89a3      	ldrhlt	r3, [r4, #12]
 8008500:	181b      	addge	r3, r3, r0
 8008502:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008506:	bfac      	ite	ge
 8008508:	6563      	strge	r3, [r4, #84]	; 0x54
 800850a:	81a3      	strhlt	r3, [r4, #12]
 800850c:	bd10      	pop	{r4, pc}

0800850e <__swrite>:
 800850e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008512:	461f      	mov	r7, r3
 8008514:	898b      	ldrh	r3, [r1, #12]
 8008516:	05db      	lsls	r3, r3, #23
 8008518:	4605      	mov	r5, r0
 800851a:	460c      	mov	r4, r1
 800851c:	4616      	mov	r6, r2
 800851e:	d505      	bpl.n	800852c <__swrite+0x1e>
 8008520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008524:	2302      	movs	r3, #2
 8008526:	2200      	movs	r2, #0
 8008528:	f000 f870 	bl	800860c <_lseek_r>
 800852c:	89a3      	ldrh	r3, [r4, #12]
 800852e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008532:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008536:	81a3      	strh	r3, [r4, #12]
 8008538:	4632      	mov	r2, r6
 800853a:	463b      	mov	r3, r7
 800853c:	4628      	mov	r0, r5
 800853e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008542:	f000 b817 	b.w	8008574 <_write_r>

08008546 <__sseek>:
 8008546:	b510      	push	{r4, lr}
 8008548:	460c      	mov	r4, r1
 800854a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800854e:	f000 f85d 	bl	800860c <_lseek_r>
 8008552:	1c43      	adds	r3, r0, #1
 8008554:	89a3      	ldrh	r3, [r4, #12]
 8008556:	bf15      	itete	ne
 8008558:	6560      	strne	r0, [r4, #84]	; 0x54
 800855a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800855e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008562:	81a3      	strheq	r3, [r4, #12]
 8008564:	bf18      	it	ne
 8008566:	81a3      	strhne	r3, [r4, #12]
 8008568:	bd10      	pop	{r4, pc}

0800856a <__sclose>:
 800856a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800856e:	f000 b81b 	b.w	80085a8 <_close_r>
	...

08008574 <_write_r>:
 8008574:	b538      	push	{r3, r4, r5, lr}
 8008576:	4d07      	ldr	r5, [pc, #28]	; (8008594 <_write_r+0x20>)
 8008578:	4604      	mov	r4, r0
 800857a:	4608      	mov	r0, r1
 800857c:	4611      	mov	r1, r2
 800857e:	2200      	movs	r2, #0
 8008580:	602a      	str	r2, [r5, #0]
 8008582:	461a      	mov	r2, r3
 8008584:	f7f8 f837 	bl	80005f6 <_write>
 8008588:	1c43      	adds	r3, r0, #1
 800858a:	d102      	bne.n	8008592 <_write_r+0x1e>
 800858c:	682b      	ldr	r3, [r5, #0]
 800858e:	b103      	cbz	r3, 8008592 <_write_r+0x1e>
 8008590:	6023      	str	r3, [r4, #0]
 8008592:	bd38      	pop	{r3, r4, r5, pc}
 8008594:	2000131c 	.word	0x2000131c

08008598 <abort>:
 8008598:	b508      	push	{r3, lr}
 800859a:	2006      	movs	r0, #6
 800859c:	f000 f8ce 	bl	800873c <raise>
 80085a0:	2001      	movs	r0, #1
 80085a2:	f7f8 f801 	bl	80005a8 <_exit>
	...

080085a8 <_close_r>:
 80085a8:	b538      	push	{r3, r4, r5, lr}
 80085aa:	4d06      	ldr	r5, [pc, #24]	; (80085c4 <_close_r+0x1c>)
 80085ac:	2300      	movs	r3, #0
 80085ae:	4604      	mov	r4, r0
 80085b0:	4608      	mov	r0, r1
 80085b2:	602b      	str	r3, [r5, #0]
 80085b4:	f7f8 f83b 	bl	800062e <_close>
 80085b8:	1c43      	adds	r3, r0, #1
 80085ba:	d102      	bne.n	80085c2 <_close_r+0x1a>
 80085bc:	682b      	ldr	r3, [r5, #0]
 80085be:	b103      	cbz	r3, 80085c2 <_close_r+0x1a>
 80085c0:	6023      	str	r3, [r4, #0]
 80085c2:	bd38      	pop	{r3, r4, r5, pc}
 80085c4:	2000131c 	.word	0x2000131c

080085c8 <_fstat_r>:
 80085c8:	b538      	push	{r3, r4, r5, lr}
 80085ca:	4d07      	ldr	r5, [pc, #28]	; (80085e8 <_fstat_r+0x20>)
 80085cc:	2300      	movs	r3, #0
 80085ce:	4604      	mov	r4, r0
 80085d0:	4608      	mov	r0, r1
 80085d2:	4611      	mov	r1, r2
 80085d4:	602b      	str	r3, [r5, #0]
 80085d6:	f7f8 f836 	bl	8000646 <_fstat>
 80085da:	1c43      	adds	r3, r0, #1
 80085dc:	d102      	bne.n	80085e4 <_fstat_r+0x1c>
 80085de:	682b      	ldr	r3, [r5, #0]
 80085e0:	b103      	cbz	r3, 80085e4 <_fstat_r+0x1c>
 80085e2:	6023      	str	r3, [r4, #0]
 80085e4:	bd38      	pop	{r3, r4, r5, pc}
 80085e6:	bf00      	nop
 80085e8:	2000131c 	.word	0x2000131c

080085ec <_isatty_r>:
 80085ec:	b538      	push	{r3, r4, r5, lr}
 80085ee:	4d06      	ldr	r5, [pc, #24]	; (8008608 <_isatty_r+0x1c>)
 80085f0:	2300      	movs	r3, #0
 80085f2:	4604      	mov	r4, r0
 80085f4:	4608      	mov	r0, r1
 80085f6:	602b      	str	r3, [r5, #0]
 80085f8:	f7f8 f835 	bl	8000666 <_isatty>
 80085fc:	1c43      	adds	r3, r0, #1
 80085fe:	d102      	bne.n	8008606 <_isatty_r+0x1a>
 8008600:	682b      	ldr	r3, [r5, #0]
 8008602:	b103      	cbz	r3, 8008606 <_isatty_r+0x1a>
 8008604:	6023      	str	r3, [r4, #0]
 8008606:	bd38      	pop	{r3, r4, r5, pc}
 8008608:	2000131c 	.word	0x2000131c

0800860c <_lseek_r>:
 800860c:	b538      	push	{r3, r4, r5, lr}
 800860e:	4d07      	ldr	r5, [pc, #28]	; (800862c <_lseek_r+0x20>)
 8008610:	4604      	mov	r4, r0
 8008612:	4608      	mov	r0, r1
 8008614:	4611      	mov	r1, r2
 8008616:	2200      	movs	r2, #0
 8008618:	602a      	str	r2, [r5, #0]
 800861a:	461a      	mov	r2, r3
 800861c:	f7f8 f82e 	bl	800067c <_lseek>
 8008620:	1c43      	adds	r3, r0, #1
 8008622:	d102      	bne.n	800862a <_lseek_r+0x1e>
 8008624:	682b      	ldr	r3, [r5, #0]
 8008626:	b103      	cbz	r3, 800862a <_lseek_r+0x1e>
 8008628:	6023      	str	r3, [r4, #0]
 800862a:	bd38      	pop	{r3, r4, r5, pc}
 800862c:	2000131c 	.word	0x2000131c

08008630 <memmove>:
 8008630:	4288      	cmp	r0, r1
 8008632:	b510      	push	{r4, lr}
 8008634:	eb01 0402 	add.w	r4, r1, r2
 8008638:	d902      	bls.n	8008640 <memmove+0x10>
 800863a:	4284      	cmp	r4, r0
 800863c:	4623      	mov	r3, r4
 800863e:	d807      	bhi.n	8008650 <memmove+0x20>
 8008640:	1e43      	subs	r3, r0, #1
 8008642:	42a1      	cmp	r1, r4
 8008644:	d008      	beq.n	8008658 <memmove+0x28>
 8008646:	f811 2b01 	ldrb.w	r2, [r1], #1
 800864a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800864e:	e7f8      	b.n	8008642 <memmove+0x12>
 8008650:	4402      	add	r2, r0
 8008652:	4601      	mov	r1, r0
 8008654:	428a      	cmp	r2, r1
 8008656:	d100      	bne.n	800865a <memmove+0x2a>
 8008658:	bd10      	pop	{r4, pc}
 800865a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800865e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008662:	e7f7      	b.n	8008654 <memmove+0x24>

08008664 <__malloc_lock>:
 8008664:	4801      	ldr	r0, [pc, #4]	; (800866c <__malloc_lock+0x8>)
 8008666:	f7ff b9cf 	b.w	8007a08 <__retarget_lock_acquire_recursive>
 800866a:	bf00      	nop
 800866c:	20001314 	.word	0x20001314

08008670 <__malloc_unlock>:
 8008670:	4801      	ldr	r0, [pc, #4]	; (8008678 <__malloc_unlock+0x8>)
 8008672:	f7ff b9ca 	b.w	8007a0a <__retarget_lock_release_recursive>
 8008676:	bf00      	nop
 8008678:	20001314 	.word	0x20001314

0800867c <_realloc_r>:
 800867c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800867e:	4607      	mov	r7, r0
 8008680:	4614      	mov	r4, r2
 8008682:	460e      	mov	r6, r1
 8008684:	b921      	cbnz	r1, 8008690 <_realloc_r+0x14>
 8008686:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800868a:	4611      	mov	r1, r2
 800868c:	f7ff ba7a 	b.w	8007b84 <_malloc_r>
 8008690:	b922      	cbnz	r2, 800869c <_realloc_r+0x20>
 8008692:	f7ff fa27 	bl	8007ae4 <_free_r>
 8008696:	4625      	mov	r5, r4
 8008698:	4628      	mov	r0, r5
 800869a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800869c:	f000 f86a 	bl	8008774 <_malloc_usable_size_r>
 80086a0:	42a0      	cmp	r0, r4
 80086a2:	d20f      	bcs.n	80086c4 <_realloc_r+0x48>
 80086a4:	4621      	mov	r1, r4
 80086a6:	4638      	mov	r0, r7
 80086a8:	f7ff fa6c 	bl	8007b84 <_malloc_r>
 80086ac:	4605      	mov	r5, r0
 80086ae:	2800      	cmp	r0, #0
 80086b0:	d0f2      	beq.n	8008698 <_realloc_r+0x1c>
 80086b2:	4631      	mov	r1, r6
 80086b4:	4622      	mov	r2, r4
 80086b6:	f7fe fd93 	bl	80071e0 <memcpy>
 80086ba:	4631      	mov	r1, r6
 80086bc:	4638      	mov	r0, r7
 80086be:	f7ff fa11 	bl	8007ae4 <_free_r>
 80086c2:	e7e9      	b.n	8008698 <_realloc_r+0x1c>
 80086c4:	4635      	mov	r5, r6
 80086c6:	e7e7      	b.n	8008698 <_realloc_r+0x1c>

080086c8 <_read_r>:
 80086c8:	b538      	push	{r3, r4, r5, lr}
 80086ca:	4d07      	ldr	r5, [pc, #28]	; (80086e8 <_read_r+0x20>)
 80086cc:	4604      	mov	r4, r0
 80086ce:	4608      	mov	r0, r1
 80086d0:	4611      	mov	r1, r2
 80086d2:	2200      	movs	r2, #0
 80086d4:	602a      	str	r2, [r5, #0]
 80086d6:	461a      	mov	r2, r3
 80086d8:	f7f7 ff70 	bl	80005bc <_read>
 80086dc:	1c43      	adds	r3, r0, #1
 80086de:	d102      	bne.n	80086e6 <_read_r+0x1e>
 80086e0:	682b      	ldr	r3, [r5, #0]
 80086e2:	b103      	cbz	r3, 80086e6 <_read_r+0x1e>
 80086e4:	6023      	str	r3, [r4, #0]
 80086e6:	bd38      	pop	{r3, r4, r5, pc}
 80086e8:	2000131c 	.word	0x2000131c

080086ec <_raise_r>:
 80086ec:	291f      	cmp	r1, #31
 80086ee:	b538      	push	{r3, r4, r5, lr}
 80086f0:	4604      	mov	r4, r0
 80086f2:	460d      	mov	r5, r1
 80086f4:	d904      	bls.n	8008700 <_raise_r+0x14>
 80086f6:	2316      	movs	r3, #22
 80086f8:	6003      	str	r3, [r0, #0]
 80086fa:	f04f 30ff 	mov.w	r0, #4294967295
 80086fe:	bd38      	pop	{r3, r4, r5, pc}
 8008700:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008702:	b112      	cbz	r2, 800870a <_raise_r+0x1e>
 8008704:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008708:	b94b      	cbnz	r3, 800871e <_raise_r+0x32>
 800870a:	4620      	mov	r0, r4
 800870c:	f000 f830 	bl	8008770 <_getpid_r>
 8008710:	462a      	mov	r2, r5
 8008712:	4601      	mov	r1, r0
 8008714:	4620      	mov	r0, r4
 8008716:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800871a:	f000 b817 	b.w	800874c <_kill_r>
 800871e:	2b01      	cmp	r3, #1
 8008720:	d00a      	beq.n	8008738 <_raise_r+0x4c>
 8008722:	1c59      	adds	r1, r3, #1
 8008724:	d103      	bne.n	800872e <_raise_r+0x42>
 8008726:	2316      	movs	r3, #22
 8008728:	6003      	str	r3, [r0, #0]
 800872a:	2001      	movs	r0, #1
 800872c:	e7e7      	b.n	80086fe <_raise_r+0x12>
 800872e:	2400      	movs	r4, #0
 8008730:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008734:	4628      	mov	r0, r5
 8008736:	4798      	blx	r3
 8008738:	2000      	movs	r0, #0
 800873a:	e7e0      	b.n	80086fe <_raise_r+0x12>

0800873c <raise>:
 800873c:	4b02      	ldr	r3, [pc, #8]	; (8008748 <raise+0xc>)
 800873e:	4601      	mov	r1, r0
 8008740:	6818      	ldr	r0, [r3, #0]
 8008742:	f7ff bfd3 	b.w	80086ec <_raise_r>
 8008746:	bf00      	nop
 8008748:	2000002c 	.word	0x2000002c

0800874c <_kill_r>:
 800874c:	b538      	push	{r3, r4, r5, lr}
 800874e:	4d07      	ldr	r5, [pc, #28]	; (800876c <_kill_r+0x20>)
 8008750:	2300      	movs	r3, #0
 8008752:	4604      	mov	r4, r0
 8008754:	4608      	mov	r0, r1
 8008756:	4611      	mov	r1, r2
 8008758:	602b      	str	r3, [r5, #0]
 800875a:	f7f7 ff15 	bl	8000588 <_kill>
 800875e:	1c43      	adds	r3, r0, #1
 8008760:	d102      	bne.n	8008768 <_kill_r+0x1c>
 8008762:	682b      	ldr	r3, [r5, #0]
 8008764:	b103      	cbz	r3, 8008768 <_kill_r+0x1c>
 8008766:	6023      	str	r3, [r4, #0]
 8008768:	bd38      	pop	{r3, r4, r5, pc}
 800876a:	bf00      	nop
 800876c:	2000131c 	.word	0x2000131c

08008770 <_getpid_r>:
 8008770:	f7f7 bf02 	b.w	8000578 <_getpid>

08008774 <_malloc_usable_size_r>:
 8008774:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008778:	1f18      	subs	r0, r3, #4
 800877a:	2b00      	cmp	r3, #0
 800877c:	bfbc      	itt	lt
 800877e:	580b      	ldrlt	r3, [r1, r0]
 8008780:	18c0      	addlt	r0, r0, r3
 8008782:	4770      	bx	lr

08008784 <_init>:
 8008784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008786:	bf00      	nop
 8008788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800878a:	bc08      	pop	{r3}
 800878c:	469e      	mov	lr, r3
 800878e:	4770      	bx	lr

08008790 <_fini>:
 8008790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008792:	bf00      	nop
 8008794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008796:	bc08      	pop	{r3}
 8008798:	469e      	mov	lr, r3
 800879a:	4770      	bx	lr


UCSD-Embedded-HW-Interfacing-BLE-Nathan-Bunnell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006128  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080062b0  080062b0  000162b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006328  08006328  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08006328  08006328  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006328  08006328  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006328  08006328  00016328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800632c  0800632c  0001632c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08006330  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000acc  20000018  08006348  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ae4  08006348  00020ae4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000259ce  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004fa9  00000000  00000000  00045a16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001698  00000000  00000000  0004a9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001478  00000000  00000000  0004c058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ca40  00000000  00000000  0004d4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000204f6  00000000  00000000  00059f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010bf54  00000000  00000000  0007a406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018635a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058c0  00000000  00000000  001863b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006298 	.word	0x08006298

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08006298 	.word	0x08006298

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <aci_gap_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

#if BLUENRG_MS
tBleStatus aci_gap_init(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b08c      	sub	sp, #48	; 0x30
 80001dc:	af00      	add	r7, sp, #0
 80001de:	603b      	str	r3, [r7, #0]
 80001e0:	4603      	mov	r3, r0
 80001e2:	71fb      	strb	r3, [r7, #7]
 80001e4:	460b      	mov	r3, r1
 80001e6:	71bb      	strb	r3, [r7, #6]
 80001e8:	4613      	mov	r3, r2
 80001ea:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp cp;
  gap_init_rp resp;
 
  cp.role = role;
 80001ec:	79fb      	ldrb	r3, [r7, #7]
 80001ee:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 80001f0:	79bb      	ldrb	r3, [r7, #6]
 80001f2:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 80001f4:	797b      	ldrb	r3, [r7, #5]
 80001f6:	75bb      	strb	r3, [r7, #22]
    
  Osal_MemSet(&resp, 0, sizeof(resp));
 80001f8:	f107 030c 	add.w	r3, r7, #12
 80001fc:	2207      	movs	r2, #7
 80001fe:	2100      	movs	r1, #0
 8000200:	4618      	mov	r0, r3
 8000202:	f000 fd5d 	bl	8000cc0 <Osal_MemSet>
  
  Osal_MemSet(&rq, 0, sizeof(rq));
 8000206:	f107 0318 	add.w	r3, r7, #24
 800020a:	2218      	movs	r2, #24
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f000 fd56 	bl	8000cc0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 8000214:	233f      	movs	r3, #63	; 0x3f
 8000216:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8000218:	238a      	movs	r3, #138	; 0x8a
 800021a:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 800021c:	f107 0314 	add.w	r3, r7, #20
 8000220:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8000222:	2303      	movs	r3, #3
 8000224:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 8000226:	f107 030c 	add.w	r3, r7, #12
 800022a:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 800022c:	2307      	movs	r3, #7
 800022e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8000230:	f107 0318 	add.w	r3, r7, #24
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f002 ffd8 	bl	80031ec <hci_send_req>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	da01      	bge.n	8000246 <aci_gap_init+0x6e>
    return BLE_STATUS_TIMEOUT;
 8000242:	23ff      	movs	r3, #255	; 0xff
 8000244:	e014      	b.n	8000270 <aci_gap_init+0x98>
  
  if (resp.status) {
 8000246:	7b3b      	ldrb	r3, [r7, #12]
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <aci_gap_init+0x78>
    return resp.status;
 800024c:	7b3b      	ldrb	r3, [r7, #12]
 800024e:	e00f      	b.n	8000270 <aci_gap_init+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 8000250:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8000254:	b29a      	uxth	r2, r3
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800025a:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 800025e:	b29a      	uxth	r2, r3
 8000260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000262:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8000264:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8000268:	b29a      	uxth	r2, r3
 800026a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800026c:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800026e:	2300      	movs	r3, #0
}
 8000270:	4618      	mov	r0, r3
 8000272:	3730      	adds	r7, #48	; 0x30
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}

08000278 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8000278:	b590      	push	{r4, r7, lr}
 800027a:	b095      	sub	sp, #84	; 0x54
 800027c:	af00      	add	r7, sp, #0
 800027e:	4604      	mov	r4, r0
 8000280:	4608      	mov	r0, r1
 8000282:	4611      	mov	r1, r2
 8000284:	461a      	mov	r2, r3
 8000286:	4623      	mov	r3, r4
 8000288:	71fb      	strb	r3, [r7, #7]
 800028a:	4603      	mov	r3, r0
 800028c:	80bb      	strh	r3, [r7, #4]
 800028e:	460b      	mov	r3, r1
 8000290:	807b      	strh	r3, [r7, #2]
 8000292:	4613      	mov	r3, r2
 8000294:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 8000296:	2300      	movs	r3, #0
 8000298:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 800029c:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 80002a0:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80002a4:	4413      	add	r3, r2
 80002a6:	330e      	adds	r3, #14
 80002a8:	2b28      	cmp	r3, #40	; 0x28
 80002aa:	d901      	bls.n	80002b0 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 80002ac:	2342      	movs	r3, #66	; 0x42
 80002ae:	e0dd      	b.n	800046c <aci_gap_set_discoverable+0x1f4>

  buffer[indx] = AdvType;
 80002b0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80002b4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80002b8:	4413      	add	r3, r2
 80002ba:	79fa      	ldrb	r2, [r7, #7]
 80002bc:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80002c0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80002c4:	3301      	adds	r3, #1
 80002c6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 80002ca:	88bb      	ldrh	r3, [r7, #4]
 80002cc:	80bb      	strh	r3, [r7, #4]
  Osal_MemCpy(buffer + indx, &AdvIntervMin, 2);
 80002ce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80002d2:	f107 0208 	add.w	r2, r7, #8
 80002d6:	4413      	add	r3, r2
 80002d8:	1d39      	adds	r1, r7, #4
 80002da:	2202      	movs	r2, #2
 80002dc:	4618      	mov	r0, r3
 80002de:	f000 fcdf 	bl	8000ca0 <Osal_MemCpy>
  indx +=  2;
 80002e2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80002e6:	3302      	adds	r3, #2
 80002e8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 80002ec:	887b      	ldrh	r3, [r7, #2]
 80002ee:	807b      	strh	r3, [r7, #2]
  Osal_MemCpy(buffer + indx, &AdvIntervMax, 2);
 80002f0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80002f4:	f107 0208 	add.w	r2, r7, #8
 80002f8:	4413      	add	r3, r2
 80002fa:	1cb9      	adds	r1, r7, #2
 80002fc:	2202      	movs	r2, #2
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 fcce 	bl	8000ca0 <Osal_MemCpy>
  indx +=  2;
 8000304:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000308:	3302      	adds	r3, #2
 800030a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 800030e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000312:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000316:	4413      	add	r3, r2
 8000318:	79ba      	ldrb	r2, [r7, #6]
 800031a:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800031e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000322:	3301      	adds	r3, #1
 8000324:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 8000328:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800032c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000330:	4413      	add	r3, r2
 8000332:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8000336:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800033a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800033e:	3301      	adds	r3, #1
 8000340:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 8000344:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000348:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800034c:	4413      	add	r3, r2
 800034e:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8000352:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8000356:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800035a:	3301      	adds	r3, #1
 800035c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  Osal_MemCpy(buffer + indx, LocalName, LocalNameLen);
 8000360:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000364:	f107 0208 	add.w	r2, r7, #8
 8000368:	4413      	add	r3, r2
 800036a:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800036e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000370:	4618      	mov	r0, r3
 8000372:	f000 fc95 	bl	8000ca0 <Osal_MemCpy>
  indx +=  LocalNameLen;
 8000376:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800037a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800037e:	4413      	add	r3, r2
 8000380:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 8000384:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000388:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800038c:	4413      	add	r3, r2
 800038e:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8000392:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8000396:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800039a:	3301      	adds	r3, #1
 800039c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  Osal_MemCpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 80003a0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80003a4:	f107 0208 	add.w	r2, r7, #8
 80003a8:	4413      	add	r3, r2
 80003aa:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 80003ae:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80003b0:	4618      	mov	r0, r3
 80003b2:	f000 fc75 	bl	8000ca0 <Osal_MemCpy>
  indx +=  ServiceUUIDLen;  
 80003b6:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80003ba:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80003be:	4413      	add	r3, r2
 80003c0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 80003c4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80003c8:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  Osal_MemCpy(buffer + indx, &SlaveConnIntervMin, 2);
 80003cc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80003d0:	f107 0208 	add.w	r2, r7, #8
 80003d4:	4413      	add	r3, r2
 80003d6:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80003da:	2202      	movs	r2, #2
 80003dc:	4618      	mov	r0, r3
 80003de:	f000 fc5f 	bl	8000ca0 <Osal_MemCpy>
  indx +=  2;
 80003e2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80003e6:	3302      	adds	r3, #2
 80003e8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 80003ec:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80003f0:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  Osal_MemCpy(buffer + indx, &SlaveConnIntervMax, 2);
 80003f4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80003f8:	f107 0208 	add.w	r2, r7, #8
 80003fc:	4413      	add	r3, r2
 80003fe:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000402:	2202      	movs	r2, #2
 8000404:	4618      	mov	r0, r3
 8000406:	f000 fc4b 	bl	8000ca0 <Osal_MemCpy>
  indx +=  2;    
 800040a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800040e:	3302      	adds	r3, #2
 8000410:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  Osal_MemSet(&rq, 0, sizeof(rq));
 8000414:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000418:	2218      	movs	r2, #24
 800041a:	2100      	movs	r1, #0
 800041c:	4618      	mov	r0, r3
 800041e:	f000 fc4f 	bl	8000cc0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 8000422:	233f      	movs	r3, #63	; 0x3f
 8000424:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8000426:	2383      	movs	r3, #131	; 0x83
 8000428:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 800042a:	f107 0308 	add.w	r3, r7, #8
 800042e:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 8000430:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000434:	b29b      	uxth	r3, r3
 8000436:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 800043a:	f107 0333 	add.w	r3, r7, #51	; 0x33
 800043e:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 8000440:	2301      	movs	r3, #1
 8000442:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 8000446:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800044a:	2100      	movs	r1, #0
 800044c:	4618      	mov	r0, r3
 800044e:	f002 fecd 	bl	80031ec <hci_send_req>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	da01      	bge.n	800045c <aci_gap_set_discoverable+0x1e4>
    return BLE_STATUS_TIMEOUT;
 8000458:	23ff      	movs	r3, #255	; 0xff
 800045a:	e007      	b.n	800046c <aci_gap_set_discoverable+0x1f4>

  if (status) {
 800045c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000460:	2b00      	cmp	r3, #0
 8000462:	d002      	beq.n	800046a <aci_gap_set_discoverable+0x1f2>
    return status;
 8000464:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000468:	e000      	b.n	800046c <aci_gap_set_discoverable+0x1f4>
  }

  return 0;
 800046a:	2300      	movs	r3, #0
}
 800046c:	4618      	mov	r0, r3
 800046e:	3754      	adds	r7, #84	; 0x54
 8000470:	46bd      	mov	sp, r7
 8000472:	bd90      	pop	{r4, r7, pc}

08000474 <aci_gap_set_io_capability>:
    
  return status;
}

tBleStatus aci_gap_set_io_capability(uint8_t io_capability)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b08a      	sub	sp, #40	; 0x28
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  gap_set_io_capability_cp cp;
    
  cp.io_capability = io_capability;
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	733b      	strb	r3, [r7, #12]

  Osal_MemSet(&rq, 0, sizeof(rq));
 8000482:	f107 0310 	add.w	r3, r7, #16
 8000486:	2218      	movs	r2, #24
 8000488:	2100      	movs	r1, #0
 800048a:	4618      	mov	r0, r3
 800048c:	f000 fc18 	bl	8000cc0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 8000490:	233f      	movs	r3, #63	; 0x3f
 8000492:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_GAP_SET_IO_CAPABILITY;
 8000494:	2385      	movs	r3, #133	; 0x85
 8000496:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 8000498:	f107 030c 	add.w	r3, r7, #12
 800049c:	61bb      	str	r3, [r7, #24]
  rq.clen = sizeof(cp);
 800049e:	2301      	movs	r3, #1
 80004a0:	83bb      	strh	r3, [r7, #28]
  rq.rparam = &status;
 80004a2:	f107 030f 	add.w	r3, r7, #15
 80004a6:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 80004a8:	2301      	movs	r3, #1
 80004aa:	84bb      	strh	r3, [r7, #36]	; 0x24
    
  if (hci_send_req(&rq, FALSE) < 0)
 80004ac:	f107 0310 	add.w	r3, r7, #16
 80004b0:	2100      	movs	r1, #0
 80004b2:	4618      	mov	r0, r3
 80004b4:	f002 fe9a 	bl	80031ec <hci_send_req>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	da01      	bge.n	80004c2 <aci_gap_set_io_capability+0x4e>
    return BLE_STATUS_TIMEOUT;
 80004be:	23ff      	movs	r3, #255	; 0xff
 80004c0:	e000      	b.n	80004c4 <aci_gap_set_io_capability+0x50>
    
  return status;
 80004c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	3728      	adds	r7, #40	; 0x28
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}

080004cc <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b090      	sub	sp, #64	; 0x40
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	603a      	str	r2, [r7, #0]
 80004d4:	461a      	mov	r2, r3
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]
 80004da:	460b      	mov	r3, r1
 80004dc:	71bb      	strb	r3, [r7, #6]
 80004de:	4613      	mov	r3, r2
 80004e0:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 80004e6:	79bb      	ldrb	r3, [r7, #6]
 80004e8:	737b      	strb	r3, [r7, #13]
  Osal_MemCpy(cp.oob_data, oob_data, 16);
 80004ea:	f107 030c 	add.w	r3, r7, #12
 80004ee:	3302      	adds	r3, #2
 80004f0:	2210      	movs	r2, #16
 80004f2:	6839      	ldr	r1, [r7, #0]
 80004f4:	4618      	mov	r0, r3
 80004f6:	f000 fbd3 	bl	8000ca0 <Osal_MemCpy>
  cp.min_encryption_key_size = min_encryption_key_size;
 80004fa:	797b      	ldrb	r3, [r7, #5]
 80004fc:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 80004fe:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000502:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 8000504:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000508:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 800050c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800050e:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 8000512:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000516:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  Osal_MemSet(&rq, 0, sizeof(rq));
 800051a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800051e:	2218      	movs	r2, #24
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f000 fbcc 	bl	8000cc0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 8000528:	233f      	movs	r3, #63	; 0x3f
 800052a:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 800052c:	2386      	movs	r3, #134	; 0x86
 800052e:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 8000536:	231a      	movs	r3, #26
 8000538:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 800053a:	f107 030b 	add.w	r3, r7, #11
 800053e:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 8000540:	2301      	movs	r3, #1
 8000542:	87bb      	strh	r3, [r7, #60]	; 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 8000544:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f002 fe4e 	bl	80031ec <hci_send_req>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	da01      	bge.n	800055a <aci_gap_set_auth_requirement+0x8e>
    return BLE_STATUS_TIMEOUT;
 8000556:	23ff      	movs	r3, #255	; 0xff
 8000558:	e005      	b.n	8000566 <aci_gap_set_auth_requirement+0x9a>

  if (status) {
 800055a:	7afb      	ldrb	r3, [r7, #11]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <aci_gap_set_auth_requirement+0x98>
    return status;
 8000560:	7afb      	ldrb	r3, [r7, #11]
 8000562:	e000      	b.n	8000566 <aci_gap_set_auth_requirement+0x9a>
  }
    
  return 0;
 8000564:	2300      	movs	r3, #0
}
 8000566:	4618      	mov	r0, r3
 8000568:	3740      	adds	r7, #64	; 0x40
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}

0800056e <aci_gap_configure_whitelist>:

  return resp.status;
}

tBleStatus aci_gap_configure_whitelist(void)
{
 800056e:	b580      	push	{r7, lr}
 8000570:	b088      	sub	sp, #32
 8000572:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  Osal_MemSet(&rq, 0, sizeof(rq));
 8000574:	f107 0308 	add.w	r3, r7, #8
 8000578:	2218      	movs	r2, #24
 800057a:	2100      	movs	r1, #0
 800057c:	4618      	mov	r0, r3
 800057e:	f000 fb9f 	bl	8000cc0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 8000582:	233f      	movs	r3, #63	; 0x3f
 8000584:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GAP_CONFIGURE_WHITELIST;
 8000586:	2392      	movs	r3, #146	; 0x92
 8000588:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800058a:	1dfb      	adds	r3, r7, #7
 800058c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800058e:	2301      	movs	r3, #1
 8000590:	83bb      	strh	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8000592:	f107 0308 	add.w	r3, r7, #8
 8000596:	2100      	movs	r1, #0
 8000598:	4618      	mov	r0, r3
 800059a:	f002 fe27 	bl	80031ec <hci_send_req>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	da01      	bge.n	80005a8 <aci_gap_configure_whitelist+0x3a>
    return BLE_STATUS_TIMEOUT;
 80005a4:	23ff      	movs	r3, #255	; 0xff
 80005a6:	e000      	b.n	80005aa <aci_gap_configure_whitelist+0x3c>

  return status;
 80005a8:	79fb      	ldrb	r3, [r7, #7]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3720      	adds	r7, #32
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 80005b2:	b580      	push	{r7, lr}
 80005b4:	b088      	sub	sp, #32
 80005b6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  Osal_MemSet(&rq, 0, sizeof(rq));
 80005b8:	f107 0308 	add.w	r3, r7, #8
 80005bc:	2218      	movs	r2, #24
 80005be:	2100      	movs	r1, #0
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 fb7d 	bl	8000cc0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 80005c6:	233f      	movs	r3, #63	; 0x3f
 80005c8:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 80005ca:	f240 1301 	movw	r3, #257	; 0x101
 80005ce:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80005d0:	1dfb      	adds	r3, r7, #7
 80005d2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80005d4:	2301      	movs	r3, #1
 80005d6:	83bb      	strh	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 80005d8:	f107 0308 	add.w	r3, r7, #8
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f002 fe04 	bl	80031ec <hci_send_req>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	da01      	bge.n	80005ee <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 80005ea:	23ff      	movs	r3, #255	; 0xff
 80005ec:	e000      	b.n	80005f0 <aci_gatt_init+0x3e>

  return status;
 80005ee:	79fb      	ldrb	r3, [r7, #7]
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3720      	adds	r7, #32
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b090      	sub	sp, #64	; 0x40
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6039      	str	r1, [r7, #0]
 8000600:	4611      	mov	r1, r2
 8000602:	461a      	mov	r2, r3
 8000604:	4603      	mov	r3, r0
 8000606:	71fb      	strb	r3, [r7, #7]
 8000608:	460b      	mov	r3, r1
 800060a:	71bb      	strb	r3, [r7, #6]
 800060c:	4613      	mov	r3, r2
 800060e:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 8000616:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800061a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800061e:	4413      	add	r3, r2
 8000620:	79fa      	ldrb	r2, [r7, #7]
 8000622:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8000626:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800062a:	3301      	adds	r3, #1
 800062c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	2b01      	cmp	r3, #1
 8000634:	d103      	bne.n	800063e <aci_gatt_add_serv+0x46>
    uuid_len = 2;
 8000636:	2302      	movs	r3, #2
 8000638:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800063c:	e002      	b.n	8000644 <aci_gatt_add_serv+0x4c>
  }
  else {
    uuid_len = 16;
 800063e:	2310      	movs	r3, #16
 8000640:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  Osal_MemCpy(buffer + indx, service_uuid, uuid_len);
 8000644:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000648:	f107 020c 	add.w	r2, r7, #12
 800064c:	4413      	add	r3, r2
 800064e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000652:	6839      	ldr	r1, [r7, #0]
 8000654:	4618      	mov	r0, r3
 8000656:	f000 fb23 	bl	8000ca0 <Osal_MemCpy>
  indx +=  uuid_len;
 800065a:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800065e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000662:	4413      	add	r3, r2
 8000664:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 8000668:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800066c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000670:	4413      	add	r3, r2
 8000672:	79ba      	ldrb	r2, [r7, #6]
 8000674:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8000678:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800067c:	3301      	adds	r3, #1
 800067e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 8000682:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000686:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800068a:	4413      	add	r3, r2
 800068c:	797a      	ldrb	r2, [r7, #5]
 800068e:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8000692:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000696:	3301      	adds	r3, #1
 8000698:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  Osal_MemSet(&resp, 0, sizeof(resp));
 800069c:	f107 0320 	add.w	r3, r7, #32
 80006a0:	2203      	movs	r2, #3
 80006a2:	2100      	movs	r1, #0
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 fb0b 	bl	8000cc0 <Osal_MemSet>

  Osal_MemSet(&rq, 0, sizeof(rq));
 80006aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ae:	2218      	movs	r2, #24
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 fb04 	bl	8000cc0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 80006b8:	233f      	movs	r3, #63	; 0x3f
 80006ba:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 80006bc:	f44f 7381 	mov.w	r3, #258	; 0x102
 80006c0:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 80006c8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 80006d0:	f107 0320 	add.w	r3, r7, #32
 80006d4:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 80006d6:	2303      	movs	r3, #3
 80006d8:	873b      	strh	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 80006da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006de:	2100      	movs	r1, #0
 80006e0:	4618      	mov	r0, r3
 80006e2:	f002 fd83 	bl	80031ec <hci_send_req>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	da01      	bge.n	80006f0 <aci_gatt_add_serv+0xf8>
    return BLE_STATUS_TIMEOUT;
 80006ec:	23ff      	movs	r3, #255	; 0xff
 80006ee:	e00c      	b.n	800070a <aci_gatt_add_serv+0x112>

  if (resp.status) {
 80006f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d002      	beq.n	80006fe <aci_gatt_add_serv+0x106>
    return resp.status;
 80006f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80006fc:	e005      	b.n	800070a <aci_gatt_add_serv+0x112>
  }
    
  *serviceHandle = btohs(resp.handle);
 80006fe:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 8000702:	b29a      	uxth	r2, r3
 8000704:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000706:	801a      	strh	r2, [r3, #0]

  return 0;
 8000708:	2300      	movs	r3, #0
}
 800070a:	4618      	mov	r0, r3
 800070c:	3740      	adds	r7, #64	; 0x40
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <aci_gatt_add_char>:
           uint8_t secPermissions,
           uint8_t gattEvtMask,
           uint8_t encryKeySize,
           uint8_t isVariable,
           uint16_t* charHandle)                     
{
 8000712:	b580      	push	{r7, lr}
 8000714:	b092      	sub	sp, #72	; 0x48
 8000716:	af00      	add	r7, sp, #0
 8000718:	603a      	str	r2, [r7, #0]
 800071a:	461a      	mov	r2, r3
 800071c:	4603      	mov	r3, r0
 800071e:	80fb      	strh	r3, [r7, #6]
 8000720:	460b      	mov	r3, r1
 8000722:	717b      	strb	r3, [r7, #5]
 8000724:	4613      	mov	r3, r2
 8000726:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 800072e:	88fb      	ldrh	r3, [r7, #6]
 8000730:	80fb      	strh	r3, [r7, #6]
  Osal_MemCpy(buffer + indx, &serviceHandle, 2);
 8000732:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000736:	f107 020c 	add.w	r2, r7, #12
 800073a:	4413      	add	r3, r2
 800073c:	1db9      	adds	r1, r7, #6
 800073e:	2202      	movs	r2, #2
 8000740:	4618      	mov	r0, r3
 8000742:	f000 faad 	bl	8000ca0 <Osal_MemCpy>
  indx += 2;
 8000746:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800074a:	3302      	adds	r3, #2
 800074c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 8000750:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000754:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000758:	4413      	add	r3, r2
 800075a:	797a      	ldrb	r2, [r7, #5]
 800075c:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8000760:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000764:	3301      	adds	r3, #1
 8000766:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 800076a:	797b      	ldrb	r3, [r7, #5]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d103      	bne.n	8000778 <aci_gatt_add_char+0x66>
    uuid_len = 2;
 8000770:	2302      	movs	r3, #2
 8000772:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000776:	e002      	b.n	800077e <aci_gatt_add_char+0x6c>
  }
  else {
    uuid_len = 16;
 8000778:	2310      	movs	r3, #16
 800077a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  Osal_MemCpy(buffer + indx, charUuid, uuid_len);
 800077e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000782:	f107 020c 	add.w	r2, r7, #12
 8000786:	4413      	add	r3, r2
 8000788:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800078c:	6839      	ldr	r1, [r7, #0]
 800078e:	4618      	mov	r0, r3
 8000790:	f000 fa86 	bl	8000ca0 <Osal_MemCpy>
  indx +=  uuid_len;
 8000794:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8000798:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800079c:	4413      	add	r3, r2
 800079e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 80007a2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80007a6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80007aa:	4413      	add	r3, r2
 80007ac:	793a      	ldrb	r2, [r7, #4]
 80007ae:	f803 2c3c 	strb.w	r2, [r3, #-60]
#if (BLUENRG1 == 1)
  indx+=2;
#else
  indx++;
 80007b2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80007b6:	3301      	adds	r3, #1
 80007b8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
#endif  
    
  buffer[indx] = charProperties;
 80007bc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80007c0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80007c4:	4413      	add	r3, r2
 80007c6:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80007ca:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80007ce:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80007d2:	3301      	adds	r3, #1
 80007d4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 80007d8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80007dc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80007e0:	4413      	add	r3, r2
 80007e2:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 80007e6:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80007ea:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80007ee:	3301      	adds	r3, #1
 80007f0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 80007f4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80007f8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80007fc:	4413      	add	r3, r2
 80007fe:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8000802:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8000806:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800080a:	3301      	adds	r3, #1
 800080c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 8000810:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000814:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000818:	4413      	add	r3, r2
 800081a:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800081e:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8000822:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000826:	3301      	adds	r3, #1
 8000828:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 800082c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000830:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000834:	4413      	add	r3, r2
 8000836:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800083a:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800083e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000842:	3301      	adds	r3, #1
 8000844:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  Osal_MemSet(&resp, 0, sizeof(resp));
 8000848:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800084c:	2203      	movs	r2, #3
 800084e:	2100      	movs	r1, #0
 8000850:	4618      	mov	r0, r3
 8000852:	f000 fa35 	bl	8000cc0 <Osal_MemSet>

  Osal_MemSet(&rq, 0, sizeof(rq));
 8000856:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800085a:	2218      	movs	r2, #24
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f000 fa2e 	bl	8000cc0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 8000864:	233f      	movs	r3, #63	; 0x3f
 8000866:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 8000868:	f44f 7382 	mov.w	r3, #260	; 0x104
 800086c:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 800086e:	f107 030c 	add.w	r3, r7, #12
 8000872:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 8000874:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000878:	b29b      	uxth	r3, r3
 800087a:	873b      	strh	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 800087c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000880:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8000882:	2303      	movs	r3, #3
 8000884:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 8000888:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f002 fcac 	bl	80031ec <hci_send_req>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	da01      	bge.n	800089e <aci_gatt_add_char+0x18c>
    return BLE_STATUS_TIMEOUT;
 800089a:	23ff      	movs	r3, #255	; 0xff
 800089c:	e00c      	b.n	80008b8 <aci_gatt_add_char+0x1a6>

  if (resp.status) {
 800089e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d002      	beq.n	80008ac <aci_gatt_add_char+0x19a>
    return resp.status;
 80008a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80008aa:	e005      	b.n	80008b8 <aci_gatt_add_char+0x1a6>
  }
    
  *charHandle = btohs(resp.handle);
 80008ac:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80008b4:	801a      	strh	r2, [r3, #0]

  return 0;
 80008b6:	2300      	movs	r3, #0
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3748      	adds	r7, #72	; 0x48
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
              uint16_t charHandle,
              uint8_t charValOffset,
              uint8_t charValueLen,   
                                      const void *charValue)
{
 80008c0:	b5b0      	push	{r4, r5, r7, lr}
 80008c2:	b0ca      	sub	sp, #296	; 0x128
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4605      	mov	r5, r0
 80008c8:	460c      	mov	r4, r1
 80008ca:	4610      	mov	r0, r2
 80008cc:	4619      	mov	r1, r3
 80008ce:	1dbb      	adds	r3, r7, #6
 80008d0:	462a      	mov	r2, r5
 80008d2:	801a      	strh	r2, [r3, #0]
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	4622      	mov	r2, r4
 80008d8:	801a      	strh	r2, [r3, #0]
 80008da:	1cfb      	adds	r3, r7, #3
 80008dc:	4602      	mov	r2, r0
 80008de:	701a      	strb	r2, [r3, #0]
 80008e0:	1cbb      	adds	r3, r7, #2
 80008e2:	460a      	mov	r2, r1
 80008e4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 80008ec:	1cbb      	adds	r3, r7, #2
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2bf9      	cmp	r3, #249	; 0xf9
 80008f2:	d901      	bls.n	80008f8 <aci_gatt_update_char_value+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 80008f4:	2342      	movs	r3, #66	; 0x42
 80008f6:	e081      	b.n	80009fc <aci_gatt_update_char_value+0x13c>

  servHandle = htobs(servHandle);
 80008f8:	1dbb      	adds	r3, r7, #6
 80008fa:	881a      	ldrh	r2, [r3, #0]
 80008fc:	1dbb      	adds	r3, r7, #6
 80008fe:	801a      	strh	r2, [r3, #0]
  Osal_MemCpy(buffer + indx, &servHandle, 2);
 8000900:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000904:	f107 020c 	add.w	r2, r7, #12
 8000908:	4413      	add	r3, r2
 800090a:	1db9      	adds	r1, r7, #6
 800090c:	2202      	movs	r2, #2
 800090e:	4618      	mov	r0, r3
 8000910:	f000 f9c6 	bl	8000ca0 <Osal_MemCpy>
  indx += 2;
 8000914:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000918:	3302      	adds	r3, #2
 800091a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
  charHandle = htobs(charHandle);
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	881a      	ldrh	r2, [r3, #0]
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	801a      	strh	r2, [r3, #0]
  Osal_MemCpy(buffer + indx, &charHandle, 2);
 8000926:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800092a:	f107 020c 	add.w	r2, r7, #12
 800092e:	4413      	add	r3, r2
 8000930:	1d39      	adds	r1, r7, #4
 8000932:	2202      	movs	r2, #2
 8000934:	4618      	mov	r0, r3
 8000936:	f000 f9b3 	bl	8000ca0 <Osal_MemCpy>
  indx += 2;
 800093a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800093e:	3302      	adds	r3, #2
 8000940:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
  buffer[indx] = charValOffset;
 8000944:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000948:	f107 020c 	add.w	r2, r7, #12
 800094c:	1cf9      	adds	r1, r7, #3
 800094e:	7809      	ldrb	r1, [r1, #0]
 8000950:	54d1      	strb	r1, [r2, r3]
  indx++;
 8000952:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000956:	3301      	adds	r3, #1
 8000958:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
  buffer[indx] = charValueLen;
 800095c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000960:	f107 020c 	add.w	r2, r7, #12
 8000964:	1cb9      	adds	r1, r7, #2
 8000966:	7809      	ldrb	r1, [r1, #0]
 8000968:	54d1      	strb	r1, [r2, r3]
  indx++;
 800096a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800096e:	3301      	adds	r3, #1
 8000970:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        
  Osal_MemCpy(buffer + indx, charValue, charValueLen);
 8000974:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000978:	f107 020c 	add.w	r2, r7, #12
 800097c:	18d0      	adds	r0, r2, r3
 800097e:	1cbb      	adds	r3, r7, #2
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	461a      	mov	r2, r3
 8000984:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8000988:	f000 f98a 	bl	8000ca0 <Osal_MemCpy>
  indx +=  charValueLen;
 800098c:	1cbb      	adds	r3, r7, #2
 800098e:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	4413      	add	r3, r2
 8000996:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

  Osal_MemSet(&rq, 0, sizeof(rq));
 800099a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800099e:	2218      	movs	r2, #24
 80009a0:	2100      	movs	r1, #0
 80009a2:	4618      	mov	r0, r3
 80009a4:	f000 f98c 	bl	8000cc0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 80009a8:	233f      	movs	r3, #63	; 0x3f
 80009aa:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 80009ae:	f44f 7383 	mov.w	r3, #262	; 0x106
 80009b2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
  rq.cparam = (void *)buffer;
 80009b6:	f107 030c 	add.w	r3, r7, #12
 80009ba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.clen = indx;
 80009be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.rparam = &status;
 80009c8:	f207 130b 	addw	r3, r7, #267	; 0x10b
 80009cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rlen = 1;
 80009d0:	2301      	movs	r3, #1
 80009d2:	f8a7 3120 	strh.w	r3, [r7, #288]	; 0x120

  if (hci_send_req(&rq, FALSE) < 0)
 80009d6:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80009da:	2100      	movs	r1, #0
 80009dc:	4618      	mov	r0, r3
 80009de:	f002 fc05 	bl	80031ec <hci_send_req>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	da01      	bge.n	80009ec <aci_gatt_update_char_value+0x12c>
    return BLE_STATUS_TIMEOUT;
 80009e8:	23ff      	movs	r3, #255	; 0xff
 80009ea:	e007      	b.n	80009fc <aci_gatt_update_char_value+0x13c>

  if (status) {
 80009ec:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d002      	beq.n	80009fa <aci_gatt_update_char_value+0x13a>
    return status;
 80009f4:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80009f8:	e000      	b.n	80009fc <aci_gatt_update_char_value+0x13c>
  }

  return 0;
 80009fa:	2300      	movs	r3, #0
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bdb0      	pop	{r4, r5, r7, pc}

08000a06 <aci_gatt_write_response>:
                                   uint16_t attr_handle,
                                   uint8_t write_status,
                                   uint8_t err_code,
                                   uint8_t att_val_len,
                                   uint8_t *att_val)
{
 8000a06:	b5b0      	push	{r4, r5, r7, lr}
 8000a08:	b0ca      	sub	sp, #296	; 0x128
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	4605      	mov	r5, r0
 8000a0e:	460c      	mov	r4, r1
 8000a10:	4610      	mov	r0, r2
 8000a12:	4619      	mov	r1, r3
 8000a14:	1dbb      	adds	r3, r7, #6
 8000a16:	462a      	mov	r2, r5
 8000a18:	801a      	strh	r2, [r3, #0]
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	4622      	mov	r2, r4
 8000a1e:	801a      	strh	r2, [r3, #0]
 8000a20:	1cfb      	adds	r3, r7, #3
 8000a22:	4602      	mov	r2, r0
 8000a24:	701a      	strb	r2, [r3, #0]
 8000a26:	1cbb      	adds	r3, r7, #2
 8000a28:	460a      	mov	r2, r1
 8000a2a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
  if ((att_val_len+7) > HCI_MAX_PAYLOAD_SIZE)
 8000a32:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 8000a36:	2bf8      	cmp	r3, #248	; 0xf8
 8000a38:	d901      	bls.n	8000a3e <aci_gatt_write_response+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 8000a3a:	2342      	movs	r3, #66	; 0x42
 8000a3c:	e08d      	b.n	8000b5a <aci_gatt_write_response+0x154>

  conn_handle = htobs(conn_handle);  
 8000a3e:	1dbb      	adds	r3, r7, #6
 8000a40:	881a      	ldrh	r2, [r3, #0]
 8000a42:	1dbb      	adds	r3, r7, #6
 8000a44:	801a      	strh	r2, [r3, #0]
  Osal_MemCpy(buffer + indx, &conn_handle, 2);
 8000a46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000a4a:	f107 020c 	add.w	r2, r7, #12
 8000a4e:	4413      	add	r3, r2
 8000a50:	1db9      	adds	r1, r7, #6
 8000a52:	2202      	movs	r2, #2
 8000a54:	4618      	mov	r0, r3
 8000a56:	f000 f923 	bl	8000ca0 <Osal_MemCpy>
  indx += 2;
 8000a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000a5e:	3302      	adds	r3, #2
 8000a60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
  attr_handle = htobs(attr_handle);
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	881a      	ldrh	r2, [r3, #0]
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	801a      	strh	r2, [r3, #0]
  Osal_MemCpy(buffer + indx, &attr_handle, 2);
 8000a6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000a70:	f107 020c 	add.w	r2, r7, #12
 8000a74:	4413      	add	r3, r2
 8000a76:	1d39      	adds	r1, r7, #4
 8000a78:	2202      	movs	r2, #2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 f910 	bl	8000ca0 <Osal_MemCpy>
  indx += 2;
 8000a80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000a84:	3302      	adds	r3, #2
 8000a86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
  buffer[indx] = write_status;
 8000a8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000a8e:	f107 020c 	add.w	r2, r7, #12
 8000a92:	1cf9      	adds	r1, r7, #3
 8000a94:	7809      	ldrb	r1, [r1, #0]
 8000a96:	54d1      	strb	r1, [r2, r3]
  indx += 1;
 8000a98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
  buffer[indx] = err_code;
 8000aa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000aa6:	f107 020c 	add.w	r2, r7, #12
 8000aaa:	1cb9      	adds	r1, r7, #2
 8000aac:	7809      	ldrb	r1, [r1, #0]
 8000aae:	54d1      	strb	r1, [r2, r3]
  indx += 1;
 8000ab0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
  buffer[indx] = att_val_len;
 8000aba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000abe:	f107 020c 	add.w	r2, r7, #12
 8000ac2:	f897 1138 	ldrb.w	r1, [r7, #312]	; 0x138
 8000ac6:	54d1      	strb	r1, [r2, r3]
  indx += 1;
 8000ac8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000acc:	3301      	adds	r3, #1
 8000ace:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
  Osal_MemCpy(buffer + indx, att_val, att_val_len);
 8000ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000ad6:	f107 020c 	add.w	r2, r7, #12
 8000ada:	4413      	add	r3, r2
 8000adc:	f897 2138 	ldrb.w	r2, [r7, #312]	; 0x138
 8000ae0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f000 f8db 	bl	8000ca0 <Osal_MemCpy>
  indx += att_val_len;
 8000aea:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 8000aee:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 8000af2:	4413      	add	r3, r2
 8000af4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

  Osal_MemSet(&rq, 0, sizeof(rq));
 8000af8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000afc:	2218      	movs	r2, #24
 8000afe:	2100      	movs	r1, #0
 8000b00:	4618      	mov	r0, r3
 8000b02:	f000 f8dd 	bl	8000cc0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 8000b06:	233f      	movs	r3, #63	; 0x3f
 8000b08:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
  rq.ocf = OCF_GATT_WRITE_RESPONSE;
 8000b0c:	f44f 7393 	mov.w	r3, #294	; 0x126
 8000b10:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
  rq.cparam = (void *)buffer;
 8000b14:	f107 030c 	add.w	r3, r7, #12
 8000b18:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.clen = indx;
 8000b1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.rparam = &status;
 8000b26:	f207 130b 	addw	r3, r7, #267	; 0x10b
 8000b2a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rlen = 1;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	f8a7 3120 	strh.w	r3, [r7, #288]	; 0x120

  if (hci_send_req(&rq, FALSE) < 0)
 8000b34:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f002 fb56 	bl	80031ec <hci_send_req>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	da01      	bge.n	8000b4a <aci_gatt_write_response+0x144>
    return BLE_STATUS_TIMEOUT;
 8000b46:	23ff      	movs	r3, #255	; 0xff
 8000b48:	e007      	b.n	8000b5a <aci_gatt_write_response+0x154>

  if (status) {
 8000b4a:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d002      	beq.n	8000b58 <aci_gatt_write_response+0x152>
    return status;
 8000b52:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8000b56:	e000      	b.n	8000b5a <aci_gatt_write_response+0x154>
  }

  return 0;
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bdb0      	pop	{r4, r5, r7, pc}

08000b64 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b0ca      	sub	sp, #296	; 0x128
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	463b      	mov	r3, r7
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	1dfb      	adds	r3, r7, #7
 8000b70:	4602      	mov	r2, r0
 8000b72:	701a      	strb	r2, [r3, #0]
 8000b74:	1dbb      	adds	r3, r7, #6
 8000b76:	460a      	mov	r2, r1
 8000b78:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8000b80:	1dbb      	adds	r3, r7, #6
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2bfd      	cmp	r3, #253	; 0xfd
 8000b86:	d901      	bls.n	8000b8c <aci_hal_write_config_data+0x28>
    return BLE_STATUS_INVALID_PARAMS;
 8000b88:	2342      	movs	r3, #66	; 0x42
 8000b8a:	e053      	b.n	8000c34 <aci_hal_write_config_data+0xd0>

  buffer[indx] = offset;
 8000b8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000b90:	f107 020c 	add.w	r2, r7, #12
 8000b94:	1df9      	adds	r1, r7, #7
 8000b96:	7809      	ldrb	r1, [r1, #0]
 8000b98:	54d1      	strb	r1, [r2, r3]
  indx++;
 8000b9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
  buffer[indx] = len;
 8000ba4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000ba8:	f107 020c 	add.w	r2, r7, #12
 8000bac:	1db9      	adds	r1, r7, #6
 8000bae:	7809      	ldrb	r1, [r1, #0]
 8000bb0:	54d1      	strb	r1, [r2, r3]
  indx++;
 8000bb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        
  Osal_MemCpy(buffer + indx, val, len);
 8000bbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000bc0:	f107 020c 	add.w	r2, r7, #12
 8000bc4:	18d0      	adds	r0, r2, r3
 8000bc6:	1dbb      	adds	r3, r7, #6
 8000bc8:	781a      	ldrb	r2, [r3, #0]
 8000bca:	463b      	mov	r3, r7
 8000bcc:	6819      	ldr	r1, [r3, #0]
 8000bce:	f000 f867 	bl	8000ca0 <Osal_MemCpy>
  indx +=  len;
 8000bd2:	1dbb      	adds	r3, r7, #6
 8000bd4:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	4413      	add	r3, r2
 8000bdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

  Osal_MemSet(&rq, 0, sizeof(rq));
 8000be0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000be4:	2218      	movs	r2, #24
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f000 f869 	bl	8000cc0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 8000bee:	233f      	movs	r3, #63	; 0x3f
 8000bf0:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 8000bf4:	230c      	movs	r3, #12
 8000bf6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
  rq.cparam = (void *)buffer;
 8000bfa:	f107 030c 	add.w	r3, r7, #12
 8000bfe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.clen = indx;
 8000c02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.rparam = &status;
 8000c0c:	f207 130b 	addw	r3, r7, #267	; 0x10b
 8000c10:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rlen = 1;
 8000c14:	2301      	movs	r3, #1
 8000c16:	f8a7 3120 	strh.w	r3, [r7, #288]	; 0x120

  if (hci_send_req(&rq, FALSE) < 0)
 8000c1a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4618      	mov	r0, r3
 8000c22:	f002 fae3 	bl	80031ec <hci_send_req>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	da01      	bge.n	8000c30 <aci_hal_write_config_data+0xcc>
    return BLE_STATUS_TIMEOUT;
 8000c2c:	23ff      	movs	r3, #255	; 0xff
 8000c2e:	e001      	b.n	8000c34 <aci_hal_write_config_data+0xd0>

  return status;
 8000c30:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b08a      	sub	sp, #40	; 0x28
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	460a      	mov	r2, r1
 8000c48:	71fb      	strb	r3, [r7, #7]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 8000c52:	79bb      	ldrb	r3, [r7, #6]
 8000c54:	737b      	strb	r3, [r7, #13]

  Osal_MemSet(&rq, 0, sizeof(rq));
 8000c56:	f107 0310 	add.w	r3, r7, #16
 8000c5a:	2218      	movs	r2, #24
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 f82e 	bl	8000cc0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 8000c64:	233f      	movs	r3, #63	; 0x3f
 8000c66:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 8000c68:	230f      	movs	r3, #15
 8000c6a:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 8000c6c:	f107 030c 	add.w	r3, r7, #12
 8000c70:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8000c72:	2302      	movs	r3, #2
 8000c74:	83bb      	strh	r3, [r7, #28]
  rq.rparam = &status;
 8000c76:	f107 030b 	add.w	r3, r7, #11
 8000c7a:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 8000c80:	f107 0310 	add.w	r3, r7, #16
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f002 fab0 	bl	80031ec <hci_send_req>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	da01      	bge.n	8000c96 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 8000c92:	23ff      	movs	r3, #255	; 0xff
 8000c94:	e000      	b.n	8000c98 <aci_hal_set_tx_power_level+0x5a>

  return status;
 8000c96:	7afb      	ldrb	r3, [r7, #11]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3728      	adds	r7, #40	; 0x28
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <Osal_MemCpy>:
 * @param  size: Number of bytes to copy from the source to the destination
 *               buffer
 * @retval Pointer to the destination buffer
 */
void* Osal_MemCpy(void *dest, const void *src, unsigned int size)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
    return(memcpy(dest,src,size)); 
 8000cac:	687a      	ldr	r2, [r7, #4]
 8000cae:	68b9      	ldr	r1, [r7, #8]
 8000cb0:	68f8      	ldr	r0, [r7, #12]
 8000cb2:	f005 fadb 	bl	800626c <memcpy>
 8000cb6:	4603      	mov	r3, r0
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <Osal_MemSet>:
 * @param  value: Value to assign to each byte of the memory block
 * @param  size : Number of bytes to be set to "value"
 * @retval Pointer to the filled block of memory
 */
void* Osal_MemSet(void *ptr, int value, unsigned int size)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
    return(memset(ptr,value,size));
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	68b9      	ldr	r1, [r7, #8]
 8000cd0:	68f8      	ldr	r0, [r7, #12]
 8000cd2:	f005 fad9 	bl	8006288 <memset>
 8000cd6:	4603      	mov	r3, r0
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <DIS_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void DIS_Init(uint16_t *options)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af06      	add	r7, sp, #24
 8000ce6:	6078      	str	r0, [r7, #4]
  uint16_t uuid;
  tBleStatus hciCmdResult;

  memset ( &DIS_Context, 0, sizeof(DIS_Context_t) );
 8000ce8:	2204      	movs	r2, #4
 8000cea:	2100      	movs	r1, #0
 8000cec:	4816      	ldr	r0, [pc, #88]	; (8000d48 <DIS_Init+0x68>)
 8000cee:	f005 facb 	bl	8006288 <memset>

#if (BLE_CFG_MENU_DEVICE_INFORMATION == 0)
  /**
   *  Add Device Information Service
   */
  uuid = DEVICE_INFORMATION_SERVICE_UUID;
 8000cf2:	f641 030a 	movw	r3, #6154	; 0x180a
 8000cf6:	81bb      	strh	r3, [r7, #12]
  hciCmdResult = aci_gatt_add_serv(UUID_TYPE_16,
 8000cf8:	f107 010c 	add.w	r1, r7, #12
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <DIS_Init+0x68>)
 8000cfe:	9300      	str	r3, [sp, #0]
 8000d00:	2303      	movs	r3, #3
 8000d02:	2201      	movs	r2, #1
 8000d04:	2001      	movs	r0, #1
 8000d06:	f7ff fc77 	bl	80005f8 <aci_gatt_add_serv>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_DIS_MANUFACTURER_NAME_STRING != 0)
  /**
   *  Add Manufacturer Name String Characteristic
   */
  uuid = MANUFACTURER_NAME_UUID;
 8000d0e:	f642 2329 	movw	r3, #10793	; 0x2a29
 8000d12:	81bb      	strh	r3, [r7, #12]
  hciCmdResult = aci_gatt_add_char(DIS_Context.DeviceInformationSvcHdle,
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <DIS_Init+0x68>)
 8000d16:	8818      	ldrh	r0, [r3, #0]
 8000d18:	f107 020c 	add.w	r2, r7, #12
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <DIS_Init+0x6c>)
 8000d1e:	9305      	str	r3, [sp, #20]
 8000d20:	2301      	movs	r3, #1
 8000d22:	9304      	str	r3, [sp, #16]
 8000d24:	230a      	movs	r3, #10
 8000d26:	9303      	str	r3, [sp, #12]
 8000d28:	2300      	movs	r3, #0
 8000d2a:	9302      	str	r3, [sp, #8]
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	9301      	str	r3, [sp, #4]
 8000d30:	2302      	movs	r3, #2
 8000d32:	9300      	str	r3, [sp, #0]
 8000d34:	2320      	movs	r3, #32
 8000d36:	2101      	movs	r1, #1
 8000d38:	f7ff fceb 	bl	8000712 <aci_gatt_add_char>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	73fb      	strb	r3, [r7, #15]
#endif
#if (BLE_CFG_DIS_NUMBER_OF_CUSTOM_CHAR != 0)
  BLESVC_AddCustomChar((uint16)t)DEVICE_INFORMATION_SERVICE_UUID, DIS_Context.DeviceInformationSvcHdle);
#endif

  return;
 8000d40:	bf00      	nop
}
 8000d42:	3710      	adds	r7, #16
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000034 	.word	0x20000034
 8000d4c:	20000036 	.word	0x20000036

08000d50 <HearRate_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t HearRate_Event_Handler(void *Event)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	; 0x28
 8000d54:	af02      	add	r7, sp, #8
 8000d56:	6078      	str	r0, [r7, #4]
  SVCCTL_EvtAckStatus_t return_value;
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  evt_gatt_attr_modified    * attribute_modified;

  return_value = SVCCTL_EvtNotAck;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	77fb      	strb	r3, [r7, #31]
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	61bb      	str	r3, [r7, #24]

  switch(event_pckt->evt)
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2bff      	cmp	r3, #255	; 0xff
 8000d68:	d151      	bne.n	8000e0e <HearRate_Event_Handler+0xbe>
  {
    case EVT_VENDOR:
    {
      blue_evt = (evt_blue_aci*)event_pckt->data;
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	3302      	adds	r3, #2
 8000d6e:	617b      	str	r3, [r7, #20]
      switch(blue_evt->ecode)
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	f640 4201 	movw	r2, #3073	; 0xc01
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d037      	beq.n	8000dee <HearRate_Event_Handler+0x9e>
 8000d7e:	f640 4213 	movw	r2, #3091	; 0xc13
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d13f      	bne.n	8000e06 <HearRate_Event_Handler+0xb6>
        case EVT_BLUE_GATT_WRITE_PERMIT_REQ:
        {
          evt_gatt_write_permit_req * write_perm_req;

          HRPROFILE_MESG_DBG("HeartRate_Event_Handler: EVT_BLUE_GATT_WRITE_PERMIT_REQ\n");
          write_perm_req = (evt_gatt_write_permit_req*)blue_evt->data;
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	3302      	adds	r3, #2
 8000d8a:	613b      	str	r3, [r7, #16]

          if(write_perm_req->attr_handle == (HRS_Context.ControlPointCharHdle + 1))
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	885b      	ldrh	r3, [r3, #2]
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	461a      	mov	r2, r3
 8000d94:	4b21      	ldr	r3, [pc, #132]	; (8000e1c <HearRate_Event_Handler+0xcc>)
 8000d96:	88db      	ldrh	r3, [r3, #6]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d135      	bne.n	8000e0a <HearRate_Event_Handler+0xba>
          {
            return_value = SVCCTL_EvtAck;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	77fb      	strb	r3, [r7, #31]

            if (write_perm_req->data[0] == HRS_CNTL_POINT_RESET_ENERGY_EXPENDED)
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	795b      	ldrb	r3, [r3, #5]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d110      	bne.n	8000dcc <HearRate_Event_Handler+0x7c>
            {
              /* received a correct value for HRM control point char */

              aci_gatt_write_response(write_perm_req->conn_handle,
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	881b      	ldrh	r3, [r3, #0]
 8000dae:	b298      	uxth	r0, r3
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	885b      	ldrh	r3, [r3, #2]
 8000db4:	b299      	uxth	r1, r3
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	791b      	ldrb	r3, [r3, #4]
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	3205      	adds	r2, #5
 8000dbe:	9201      	str	r2, [sp, #4]
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f7ff fe1e 	bl	8000a06 <aci_gatt_write_response>
                                      write_perm_req->data_length,
                                      (uint8_t *)&write_perm_req->data[0]);
            }
          }
        }
        break;
 8000dca:	e01e      	b.n	8000e0a <HearRate_Event_Handler+0xba>
              aci_gatt_write_response(write_perm_req->conn_handle,
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	b298      	uxth	r0, r3
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	885b      	ldrh	r3, [r3, #2]
 8000dd6:	b299      	uxth	r1, r3
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	791b      	ldrb	r3, [r3, #4]
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	3205      	adds	r2, #5
 8000de0:	9201      	str	r2, [sp, #4]
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	2380      	movs	r3, #128	; 0x80
 8000de6:	2201      	movs	r2, #1
 8000de8:	f7ff fe0d 	bl	8000a06 <aci_gatt_write_response>
        break;
 8000dec:	e00d      	b.n	8000e0a <HearRate_Event_Handler+0xba>
#endif

        case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
        {
          attribute_modified = (evt_gatt_attr_modified*)blue_evt->data;
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	3302      	adds	r3, #2
 8000df2:	60fb      	str	r3, [r7, #12]
          if(attribute_modified->attr_handle == (HRS_Context.HeartRatemeasurementCharHdle + 2))
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	885b      	ldrh	r3, [r3, #2]
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <HearRate_Event_Handler+0xcc>)
 8000dfe:	885b      	ldrh	r3, [r3, #2]
 8000e00:	3302      	adds	r3, #2
 8000e02:	429a      	cmp	r2, r3
              HRPROFILE_MESG_DBG("HeartRate_Event_Handler: EVT_BLUE_GATT_ATTRIBUTE_MODIFIED HRS_NOTIFICATION_DISABLED\n");
              // TODO HRS_Notification(HRS_NOTIFICATION_DISABLED);
            }
          }
        }
        break;
 8000e04:	e002      	b.n	8000e0c <HearRate_Event_Handler+0xbc>

        default:
          break;
 8000e06:	bf00      	nop
 8000e08:	e002      	b.n	8000e10 <HearRate_Event_Handler+0xc0>
        break;
 8000e0a:	bf00      	nop
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 8000e0c:	e000      	b.n	8000e10 <HearRate_Event_Handler+0xc0>

    default:
      break;
 8000e0e:	bf00      	nop
  }

  return(return_value);
 8000e10:	7ffb      	ldrb	r3, [r7, #31]
}/* end HearRate_Event_Handler */
 8000e12:	4618      	mov	r0, r3
 8000e14:	3720      	adds	r7, #32
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000038 	.word	0x20000038

08000e20 <HRS_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void HRS_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b088      	sub	sp, #32
 8000e24:	af06      	add	r7, sp, #24
  uint16_t uuid;
  tBleStatus hciCmdResult = BLE_STATUS_SUCCESS;
 8000e26:	2300      	movs	r3, #0
 8000e28:	71fb      	strb	r3, [r7, #7]

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(HearRate_Event_Handler);
 8000e2a:	482e      	ldr	r0, [pc, #184]	; (8000ee4 <HRS_Init+0xc4>)
 8000e2c:	f000 f9bc 	bl	80011a8 <SVCCTL_RegisterSvcHandler>
   *                                2 for hear rate measurement characteristic +
   *                                1 for client char configuration descriptor +
   *                                2 for body sensor location characteristic +
   *                                2 for control point characteristic
   */
  uuid = HEART_RATE_SERVICE_UUID;
 8000e30:	f641 030d 	movw	r3, #6157	; 0x180d
 8000e34:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_serv(UUID_TYPE_16,
 8000e36:	1d39      	adds	r1, r7, #4
 8000e38:	4b2b      	ldr	r3, [pc, #172]	; (8000ee8 <HRS_Init+0xc8>)
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	2308      	movs	r3, #8
 8000e3e:	2201      	movs	r2, #1
 8000e40:	2001      	movs	r0, #1
 8000e42:	f7ff fbd9 	bl	80005f8 <aci_gatt_add_serv>
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
  }

  /**
   *  Add Heart Rate Measurement Characteristic
   */
  uuid = HEART_RATE_MEASURMENT_UUID;
 8000e4a:	f642 2337 	movw	r3, #10807	; 0x2a37
 8000e4e:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(HRS_Context.HeartRateSvcHdle,
 8000e50:	4b25      	ldr	r3, [pc, #148]	; (8000ee8 <HRS_Init+0xc8>)
 8000e52:	8818      	ldrh	r0, [r3, #0]
 8000e54:	1d3a      	adds	r2, r7, #4
 8000e56:	4b25      	ldr	r3, [pc, #148]	; (8000eec <HRS_Init+0xcc>)
 8000e58:	9305      	str	r3, [sp, #20]
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	9304      	str	r3, [sp, #16]
 8000e5e:	230a      	movs	r3, #10
 8000e60:	9303      	str	r3, [sp, #12]
 8000e62:	2300      	movs	r3, #0
 8000e64:	9302      	str	r3, [sp, #8]
 8000e66:	2300      	movs	r3, #0
 8000e68:	9301      	str	r3, [sp, #4]
 8000e6a:	2310      	movs	r3, #16
 8000e6c:	9300      	str	r3, [sp, #0]
 8000e6e:	2307      	movs	r3, #7
 8000e70:	2101      	movs	r1, #1
 8000e72:	f7ff fc4e 	bl	8000712 <aci_gatt_add_char>
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]

#if (BLE_CFG_HRS_BODY_SENSOR_LOCATION_CHAR != 0)
  /**
   *  Add Body Sensor Location Characteristic
   */
  uuid = SENSOR_LOCATION_UUID;
 8000e7a:	f642 2338 	movw	r3, #10808	; 0x2a38
 8000e7e:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(HRS_Context.HeartRateSvcHdle,
 8000e80:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <HRS_Init+0xc8>)
 8000e82:	8818      	ldrh	r0, [r3, #0]
 8000e84:	1d3a      	adds	r2, r7, #4
 8000e86:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <HRS_Init+0xd0>)
 8000e88:	9305      	str	r3, [sp, #20]
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	9304      	str	r3, [sp, #16]
 8000e8e:	230a      	movs	r3, #10
 8000e90:	9303      	str	r3, [sp, #12]
 8000e92:	2300      	movs	r3, #0
 8000e94:	9302      	str	r3, [sp, #8]
 8000e96:	2300      	movs	r3, #0
 8000e98:	9301      	str	r3, [sp, #4]
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	f7ff fc36 	bl	8000712 <aci_gatt_add_char>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
  }

#endif

#if (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0)
  uuid = CONTROL_POINT_UUID;
 8000eaa:	f642 2339 	movw	r3, #10809	; 0x2a39
 8000eae:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(HRS_Context.HeartRateSvcHdle,
 8000eb0:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <HRS_Init+0xc8>)
 8000eb2:	8818      	ldrh	r0, [r3, #0]
 8000eb4:	1d3a      	adds	r2, r7, #4
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <HRS_Init+0xd4>)
 8000eb8:	9305      	str	r3, [sp, #20]
 8000eba:	2300      	movs	r3, #0
 8000ebc:	9304      	str	r3, [sp, #16]
 8000ebe:	230a      	movs	r3, #10
 8000ec0:	9303      	str	r3, [sp, #12]
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	9302      	str	r3, [sp, #8]
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	9301      	str	r3, [sp, #4]
 8000eca:	2308      	movs	r3, #8
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	2301      	movs	r3, #1
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	f7ff fc1e 	bl	8000712 <aci_gatt_add_char>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]

#if (BLE_CFG_HRS_NUMBER_OF_CUSTOM_CHAR != 0)
  BLESVC_AddCustomChar((uint16)t)HEART_RATE_SERVICE_UUID, HRS_Context.HeartRateSvcHdle);
#endif

  return;
 8000eda:	bf00      	nop
}
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	08000d51 	.word	0x08000d51
 8000ee8:	20000038 	.word	0x20000038
 8000eec:	2000003a 	.word	0x2000003a
 8000ef0:	2000003c 	.word	0x2000003c
 8000ef4:	2000003e 	.word	0x2000003e

08000ef8 <LedButton_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t LedButton_Event_Handler(void *Event)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	; 0x28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  evt_gatt_attr_modified    * attribute_modified;
  LBS_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8000f0c:	6a3b      	ldr	r3, [r7, #32]
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2bff      	cmp	r3, #255	; 0xff
 8000f12:	d149      	bne.n	8000fa8 <LedButton_Event_Handler+0xb0>
  {
    case EVT_VENDOR:
    {
      blue_evt = (evt_blue_aci*)event_pckt->data;
 8000f14:	6a3b      	ldr	r3, [r7, #32]
 8000f16:	3302      	adds	r3, #2
 8000f18:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	881b      	ldrh	r3, [r3, #0]
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	461a      	mov	r2, r3
 8000f22:	f640 4301 	movw	r3, #3073	; 0xc01
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d13a      	bne.n	8000fa0 <LedButton_Event_Handler+0xa8>
      {
        case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
       {
          attribute_modified = (evt_gatt_attr_modified*)blue_evt->data;
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->attr_handle == (aLedButtonContext.ButtonsCharHdle + 2))
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	885b      	ldrh	r3, [r3, #2]
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	461a      	mov	r2, r3
 8000f38:	4b1f      	ldr	r3, [pc, #124]	; (8000fb8 <LedButton_Event_Handler+0xc0>)
 8000f3a:	889b      	ldrh	r3, [r3, #4]
 8000f3c:	3302      	adds	r3, #2
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d117      	bne.n	8000f72 <LedButton_Event_Handler+0x7a>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAck;
 8000f42:	2301      	movs	r3, #1
 8000f44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->att_data[0] & COMSVC_Notification)
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	79db      	ldrb	r3, [r3, #7]
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d007      	beq.n	8000f64 <LedButton_Event_Handler+0x6c>
              {
               // APPL_MESG_DBG("Notification enabled\n");
                Notification.LBS_Evt_Opcode = BUTTON_NOTIFY_ENABLED_EVT;
 8000f54:	2300      	movs	r3, #0
 8000f56:	723b      	strb	r3, [r7, #8]
                LBS_App_Notification(&Notification);
 8000f58:	f107 0308 	add.w	r3, r7, #8
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f003 f8d3 	bl	8004108 <LBS_App_Notification>
 8000f62:	e006      	b.n	8000f72 <LedButton_Event_Handler+0x7a>

              }
              else
              {
               // APPL_MESG_DBG("Notification disabled\n");
                Notification.LBS_Evt_Opcode = BUTTON_NOTIFY_DISABLED_EVT;
 8000f64:	2301      	movs	r3, #1
 8000f66:	723b      	strb	r3, [r7, #8]

                LBS_App_Notification(&Notification);
 8000f68:	f107 0308 	add.w	r3, r7, #8
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f003 f8cb 	bl	8004108 <LBS_App_Notification>

              }
            }
            
            if(attribute_modified->attr_handle == (aLedButtonContext.LedsCharHdle + 1))
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	885b      	ldrh	r3, [r3, #2]
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <LedButton_Event_Handler+0xc0>)
 8000f7c:	885b      	ldrh	r3, [r3, #2]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d10f      	bne.n	8000fa4 <LedButton_Event_Handler+0xac>
            {
              //value handle
              APPL_MESG_DBG("-- GATT : LED CONFIGURATION RECEIVED\n");
              Notification.LBS_Evt_Opcode = ST_SVC_LED_WRITE_EVT;
 8000f84:	2303      	movs	r3, #3
 8000f86:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->data_length;
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	791b      	ldrb	r3, [r3, #4]
 8000f8c:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->att_data;
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	3307      	adds	r3, #7
 8000f92:	60fb      	str	r3, [r7, #12]
              LBS_App_Notification(&Notification);  
 8000f94:	f107 0308 	add.w	r3, r7, #8
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f003 f8b5 	bl	8004108 <LBS_App_Notification>
            }
          
        }
        break;
 8000f9e:	e001      	b.n	8000fa4 <LedButton_Event_Handler+0xac>

        default:
          break;
 8000fa0:	bf00      	nop
 8000fa2:	e002      	b.n	8000faa <LedButton_Event_Handler+0xb2>
        break;
 8000fa4:	bf00      	nop
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 8000fa6:	e000      	b.n	8000faa <LedButton_Event_Handler+0xb2>

    default:
      break;
 8000fa8:	bf00      	nop
  }

  return(return_value);
 8000faa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3728      	adds	r7, #40	; 0x28
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000040 	.word	0x20000040

08000fbc <LBS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void LBS_STM_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af06      	add	r7, sp, #24
  uint16_t uuid;
  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(LedButton_Event_Handler);
 8000fc2:	481f      	ldr	r0, [pc, #124]	; (8001040 <LBS_STM_Init+0x84>)
 8000fc4:	f000 f8f0 	bl	80011a8 <SVCCTL_RegisterSvcHandler>
     *                                2 for Led characteristic +
     *                                2 for Button characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    uuid = LED_BUTTON_SERVICE_UUID;
 8000fc8:	f641 2330 	movw	r3, #6704	; 0x1a30
 8000fcc:	80fb      	strh	r3, [r7, #6]
    aci_gatt_add_serv(UUID_TYPE_16,
 8000fce:	1db9      	adds	r1, r7, #6
 8000fd0:	4b1c      	ldr	r3, [pc, #112]	; (8001044 <LBS_STM_Init+0x88>)
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	2306      	movs	r3, #6
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	2001      	movs	r0, #1
 8000fda:	f7ff fb0d 	bl	80005f8 <aci_gatt_add_serv>
                      &(aLedButtonContext.LedButtonSvcHdle));

    /**
     *  Add LED Characteristic
     */
    uuid = LED_CHAR_UUID;
 8000fde:	f642 3350 	movw	r3, #11088	; 0x2b50
 8000fe2:	80fb      	strh	r3, [r7, #6]
   
    aci_gatt_add_char(aLedButtonContext.LedButtonSvcHdle,
 8000fe4:	4b17      	ldr	r3, [pc, #92]	; (8001044 <LBS_STM_Init+0x88>)
 8000fe6:	8818      	ldrh	r0, [r3, #0]
 8000fe8:	1dba      	adds	r2, r7, #6
 8000fea:	4b17      	ldr	r3, [pc, #92]	; (8001048 <LBS_STM_Init+0x8c>)
 8000fec:	9305      	str	r3, [sp, #20]
 8000fee:	2301      	movs	r3, #1
 8000ff0:	9304      	str	r3, [sp, #16]
 8000ff2:	230a      	movs	r3, #10
 8000ff4:	9303      	str	r3, [sp, #12]
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	9302      	str	r3, [sp, #8]
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	9301      	str	r3, [sp, #4]
 8000ffe:	2306      	movs	r3, #6
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	2101      	movs	r1, #1
 8001006:	f7ff fb84 	bl	8000712 <aci_gatt_add_char>
                      &(aLedButtonContext.LedsCharHdle));

    /**
     *   Add Button Characteristic
     */
    uuid = BUTTON_CHAR_UUID;
 800100a:	f642 3351 	movw	r3, #11089	; 0x2b51
 800100e:	80fb      	strh	r3, [r7, #6]
    aci_gatt_add_char(aLedButtonContext.LedButtonSvcHdle,
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <LBS_STM_Init+0x88>)
 8001012:	8818      	ldrh	r0, [r3, #0]
 8001014:	1dba      	adds	r2, r7, #6
 8001016:	4b0d      	ldr	r3, [pc, #52]	; (800104c <LBS_STM_Init+0x90>)
 8001018:	9305      	str	r3, [sp, #20]
 800101a:	2301      	movs	r3, #1
 800101c:	9304      	str	r3, [sp, #16]
 800101e:	230a      	movs	r3, #10
 8001020:	9303      	str	r3, [sp, #12]
 8001022:	2301      	movs	r3, #1
 8001024:	9302      	str	r3, [sp, #8]
 8001026:	2300      	movs	r3, #0
 8001028:	9301      	str	r3, [sp, #4]
 800102a:	2310      	movs	r3, #16
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	2302      	movs	r3, #2
 8001030:	2101      	movs	r1, #1
 8001032:	f7ff fb6e 	bl	8000712 <aci_gatt_add_char>
                      &(aLedButtonContext.ButtonsCharHdle));
    
    APPL_MESG_DBG("-- Led Button Service (LBS) is added Successfully %04X\n", 
                 aLedButtonContext.LedButtonSvcHdle);

  return;
 8001036:	bf00      	nop
}
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	08000ef9 	.word	0x08000ef9
 8001044:	20000040 	.word	0x20000040
 8001048:	20000042 	.word	0x20000042
 800104c:	20000044 	.word	0x20000044

08001050 <BLE_SVC_LedButton_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus BLE_SVC_LedButton_Update_Char(uint16_t UUID, uint8_t *pPayload) //LED_BUTTON_Data_t *pDataValue)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af02      	add	r7, sp, #8
 8001056:	4603      	mov	r3, r0
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800105c:	2342      	movs	r3, #66	; 0x42
 800105e:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 8001060:	88fb      	ldrh	r3, [r7, #6]
 8001062:	f642 3251 	movw	r2, #11089	; 0x2b51
 8001066:	4293      	cmp	r3, r2
 8001068:	d10c      	bne.n	8001084 <BLE_SVC_LedButton_Update_Char+0x34>
  {
    case BUTTON_CHAR_UUID:
      
     result = aci_gatt_update_char_value(aLedButtonContext.LedButtonSvcHdle,
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <BLE_SVC_LedButton_Update_Char+0x40>)
 800106c:	8818      	ldrh	r0, [r3, #0]
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <BLE_SVC_LedButton_Update_Char+0x40>)
 8001070:	8899      	ldrh	r1, [r3, #4]
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2302      	movs	r3, #2
 8001078:	2200      	movs	r2, #0
 800107a:	f7ff fc21 	bl	80008c0 <aci_gatt_update_char_value>
 800107e:	4603      	mov	r3, r0
 8001080:	73fb      	strb	r3, [r7, #15]
                             aLedButtonContext.ButtonsCharHdle,
                              0, /* charValOffset */
                             2, /* charValueLen */
                             (const uint8_t *)  pPayload);
    
      break;
 8001082:	e000      	b.n	8001086 <BLE_SVC_LedButton_Update_Char+0x36>

    default:
      break;
 8001084:	bf00      	nop
  }

  return result;
 8001086:	7bfb      	ldrb	r3, [r7, #15]
}/* end LBS_STM_Init() */
 8001088:	4618      	mov	r0, r3
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000040 	.word	0x20000040

08001094 <ANS_Init>:
/* Otherwise the dummy __Weak function allow to avoid the compilatio error */

__weak void DIS_Init(uint16_t *p_options) {}
__weak void HRS_Init(void) {}
__weak void BAS_Init(uint8_t * options, uint8_t battery_index) {}
__weak void ANS_Init(void) {}
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <HIDS_Init>:
__weak void HIDS_Init(void) {}
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <HPS_Init>:
__weak void HPS_Init(void) {}
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <IPSS_Init>:
__weak void IPSS_Init(void) {}
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <LNS_Init>:
__weak void LNS_Init(void) {}
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <SCPS_Init>:
__weak void SCPS_Init(void) {}
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0
 80010de:	bf00      	nop
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <SVCCTL_Init>:
__weak void BLESVC_InitCustomSvc( void ) {}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 80010e8:	b5b0      	push	{r4, r5, r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af02      	add	r7, sp, #8
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  uint8_t role;
  const uint8_t mode = BLE_CFG_DATA_ROLE_MODE;
 80010ee:	2304      	movs	r3, #4
 80010f0:	717b      	strb	r3, [r7, #5]
   * Initialize HCI layer
   */
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80010f2:	4b2a      	ldr	r3, [pc, #168]	; (800119c <SVCCTL_Init+0xb4>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	721a      	strb	r2, [r3, #8]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80010f8:	4b29      	ldr	r3, [pc, #164]	; (80011a0 <SVCCTL_Init+0xb8>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	721a      	strb	r2, [r3, #8]
   */

  /**
   * Write the BD Address
   */
  bd_addr = SVCCTL_GetBdAddress();
 80010fe:	f000 f8cb 	bl	8001298 <SVCCTL_GetBdAddress>
 8001102:	6178      	str	r0, [r7, #20]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8001104:	697a      	ldr	r2, [r7, #20]
 8001106:	2106      	movs	r1, #6
 8001108:	2000      	movs	r0, #0
 800110a:	f7ff fd2b 	bl	8000b64 <aci_hal_write_config_data>
                            bd_addr);

  /**
   * Write the BD Address
   */
  aci_hal_write_config_data(CONFIG_DATA_MODE_OFFSET,
 800110e:	1d7b      	adds	r3, r7, #5
 8001110:	461a      	mov	r2, r3
 8001112:	2101      	movs	r1, #1
 8001114:	202d      	movs	r0, #45	; 0x2d
 8001116:	f7ff fd25 	bl	8000b64 <aci_hal_write_config_data>
                            &mode);

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 800111a:	f7ff fa4a 	bl	80005b2 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8001122:	7cfb      	ldrb	r3, [r7, #19]
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if(role > 0)
 800112a:	7cfb      	ldrb	r3, [r7, #19]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d01d      	beq.n	800116c <SVCCTL_Init+0x84>
  {
    const char *name = "BlueNRG";
 8001130:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <SVCCTL_Init+0xbc>)
 8001132:	60fb      	str	r3, [r7, #12]

    aci_gap_init(role,
 8001134:	f107 020a 	add.w	r2, r7, #10
 8001138:	7cf8      	ldrb	r0, [r7, #19]
 800113a:	1dbb      	adds	r3, r7, #6
 800113c:	9301      	str	r3, [sp, #4]
 800113e:	f107 0308 	add.w	r3, r7, #8
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	4613      	mov	r3, r2
 8001146:	2207      	movs	r2, #7
 8001148:	2100      	movs	r1, #0
 800114a:	f7ff f845 	bl	80001d8 <aci_gap_init>
                 SVCCTL_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle,
                 &gap_dev_name_char_handle,
                 &gap_appearance_char_handle);

    if(aci_gatt_update_char_value(gap_service_handle,
 800114e:	897c      	ldrh	r4, [r7, #10]
 8001150:	893d      	ldrh	r5, [r7, #8]
                                  gap_dev_name_char_handle,
                                  0,
                                  strlen(name),
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	f7ff f838 	bl	80001c8 <strlen>
 8001158:	4603      	mov	r3, r0
    if(aci_gatt_update_char_value(gap_service_handle,
 800115a:	b2da      	uxtb	r2, r3
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	4613      	mov	r3, r2
 8001162:	2200      	movs	r2, #0
 8001164:	4629      	mov	r1, r5
 8001166:	4620      	mov	r0, r4
 8001168:	f7ff fbaa 	bl	80008c0 <aci_gatt_update_char_value>
  }

  /**
   * Add and Initialize requested services
   */
  HRS_Init();
 800116c:	f7ff fe58 	bl	8000e20 <HRS_Init>

    DIS_Menu(&options);
    DIS_Init(&options);
  }
#else
  DIS_Init(NULL);
 8001170:	2000      	movs	r0, #0
 8001172:	f7ff fdb5 	bl	8000ce0 <DIS_Init>

#if (BLE_SVC_NEXT_DST != 0)
  BLE_SVC_NextDst_Init();
#endif

  SCPS_Init();
 8001176:	f7ff ffb0 	bl	80010da <SCPS_Init>

  ANS_Init();
 800117a:	f7ff ff8b 	bl	8001094 <ANS_Init>

#if (BLE_SVC_HTTP_PROXY != 0)
BLE_SVC_Http_Init();
#endif

HIDS_Init();
 800117e:	f7ff ff90 	bl	80010a2 <HIDS_Init>

LNS_Init();
 8001182:	f7ff ffa3 	bl	80010cc <LNS_Init>

IPSS_Init();
 8001186:	f7ff ff9a 	bl	80010be <IPSS_Init>

HPS_Init();
 800118a:	f7ff ff91 	bl	80010b0 <HPS_Init>

BLESVC_InitCustomSvc();
 800118e:	f002 ff60 	bl	8004052 <BLESVC_InitCustomSvc>

return;
 8001192:	bf00      	nop
}
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bdb0      	pop	{r4, r5, r7, pc}
 800119a:	bf00      	nop
 800119c:	20000acc 	.word	0x20000acc
 80011a0:	20000ac0 	.word	0x20000ac0
 80011a4:	080062b0 	.word	0x080062b0

080011a8 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler(SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80011b0:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <SVCCTL_RegisterSvcHandler+0x30>)
 80011b2:	7a1b      	ldrb	r3, [r3, #8]
 80011b4:	4619      	mov	r1, r3
 80011b6:	4a08      	ldr	r2, [pc, #32]	; (80011d8 <SVCCTL_RegisterSvcHandler+0x30>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <SVCCTL_RegisterSvcHandler+0x30>)
 80011c0:	7a1b      	ldrb	r3, [r3, #8]
 80011c2:	3301      	adds	r3, #1
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <SVCCTL_RegisterSvcHandler+0x30>)
 80011c8:	721a      	strb	r2, [r3, #8]

  return;
 80011ca:	bf00      	nop
}
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	20000acc 	.word	0x20000acc

080011dc <SVCCTL_HCI_UserEvtRx>:

  return;
}

void SVCCTL_HCI_UserEvtRx(void *pckt)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*)((hci_uart_pckt *)pckt)->data;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3301      	adds	r3, #1
 80011e8:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80011ea:	2300      	movs	r3, #0
 80011ec:	75fb      	strb	r3, [r7, #23]

  switch(event_pckt->evt)
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2bff      	cmp	r3, #255	; 0xff
 80011f4:	d13f      	bne.n	8001276 <SVCCTL_HCI_UserEvtRx+0x9a>
  {
    case EVT_VENDOR:
    {
      blue_evt = (evt_blue_aci*)event_pckt->data;
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	3302      	adds	r3, #2
 80011fa:	60fb      	str	r3, [r7, #12]

      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	881b      	ldrh	r3, [r3, #0]
 8001200:	b29b      	uxth	r3, r3
 8001202:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001206:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800120a:	d132      	bne.n	8001272 <SVCCTL_HCI_UserEvtRx+0x96>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for(index = 0; index <SVCCTL_EvtHandler.NbreOfRegisteredHandler ; index++)
 800120c:	2300      	movs	r3, #0
 800120e:	75bb      	strb	r3, [r7, #22]
 8001210:	e00d      	b.n	800122e <SVCCTL_HCI_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8001212:	7dbb      	ldrb	r3, [r7, #22]
 8001214:	4a1e      	ldr	r2, [pc, #120]	; (8001290 <SVCCTL_HCI_UserEvtRx+0xb4>)
 8001216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	4798      	blx	r3
 800121e:	4603      	mov	r3, r0
 8001220:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8001222:	7dfb      	ldrb	r3, [r7, #23]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d108      	bne.n	800123a <SVCCTL_HCI_UserEvtRx+0x5e>
          for(index = 0; index <SVCCTL_EvtHandler.NbreOfRegisteredHandler ; index++)
 8001228:	7dbb      	ldrb	r3, [r7, #22]
 800122a:	3301      	adds	r3, #1
 800122c:	75bb      	strb	r3, [r7, #22]
 800122e:	4b18      	ldr	r3, [pc, #96]	; (8001290 <SVCCTL_HCI_UserEvtRx+0xb4>)
 8001230:	7a1b      	ldrb	r3, [r3, #8]
 8001232:	7dba      	ldrb	r2, [r7, #22]
 8001234:	429a      	cmp	r2, r3
 8001236:	d3ec      	bcc.n	8001212 <SVCCTL_HCI_UserEvtRx+0x36>
 8001238:	e000      	b.n	800123c <SVCCTL_HCI_UserEvtRx+0x60>
            {
              /**
               *  The event has been managed. The Event processing should be stopped
               */
              break;
 800123a:	bf00      	nop
            }
          }
#endif
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
          /* For Client event handler */
          event_notification_status = SVCCTL_EvtNotAck;
 800123c:	2300      	movs	r3, #0
 800123e:	75fb      	strb	r3, [r7, #23]
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler ; index++)
 8001240:	2300      	movs	r3, #0
 8001242:	75bb      	strb	r3, [r7, #22]
 8001244:	e00d      	b.n	8001262 <SVCCTL_HCI_UserEvtRx+0x86>
          {
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 8001246:	7dbb      	ldrb	r3, [r7, #22]
 8001248:	4a12      	ldr	r2, [pc, #72]	; (8001294 <SVCCTL_HCI_UserEvtRx+0xb8>)
 800124a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	4798      	blx	r3
 8001252:	4603      	mov	r3, r0
 8001254:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Client, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Client
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8001256:	7dfb      	ldrb	r3, [r7, #23]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d108      	bne.n	800126e <SVCCTL_HCI_UserEvtRx+0x92>
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler ; index++)
 800125c:	7dbb      	ldrb	r3, [r7, #22]
 800125e:	3301      	adds	r3, #1
 8001260:	75bb      	strb	r3, [r7, #22]
 8001262:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <SVCCTL_HCI_UserEvtRx+0xb8>)
 8001264:	7a1b      	ldrb	r3, [r3, #8]
 8001266:	7dba      	ldrb	r2, [r7, #22]
 8001268:	429a      	cmp	r2, r3
 800126a:	d3ec      	bcc.n	8001246 <SVCCTL_HCI_UserEvtRx+0x6a>
               */
              break;
            }
          }
#endif
          break;
 800126c:	e002      	b.n	8001274 <SVCCTL_HCI_UserEvtRx+0x98>
              break;
 800126e:	bf00      	nop
          break;
 8001270:	e000      	b.n	8001274 <SVCCTL_HCI_UserEvtRx+0x98>

        default:
          break;
 8001272:	bf00      	nop
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 8001274:	e000      	b.n	8001278 <SVCCTL_HCI_UserEvtRx+0x9c>

    default:
      break;
 8001276:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  if(event_notification_status == SVCCTL_EvtNotAck)
 8001278:	7dfb      	ldrb	r3, [r7, #23]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d103      	bne.n	8001286 <SVCCTL_HCI_UserEvtRx+0xaa>
  {
    /**
     *  The event has NOT been managed.
     *  It shall be passed to the application for processing
     */
    SVCCTL_App_Notification(pckt);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f002 fe8a 	bl	8003f98 <SVCCTL_App_Notification>

  }

  return;
 8001284:	bf00      	nop
 8001286:	bf00      	nop
}
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000acc 	.word	0x20000acc
 8001294:	20000ac0 	.word	0x20000ac0

08001298 <SVCCTL_GetBdAddress>:
  * @note  __WEAK function: The application can overload this function  
           for example in case it needs to retrieve the value from OTP 
           instead of using the harcoded value in the config.h
  */
__weak const uint8_t* SVCCTL_GetBdAddress( void )
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return M_bd_addr;
 800129c:	4b02      	ldr	r3, [pc, #8]	; (80012a8 <SVCCTL_GetBdAddress+0x10>)
}
 800129e:	4618      	mov	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	080062b8 	.word	0x080062b8

080012ac <LL_PWR_SetPowerMode>:
  *         @arg @ref LL_PWR_MODE_STANDBY
  *         @arg @ref LL_PWR_MODE_SHUTDOWN
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <LL_PWR_SetPowerMode+0x24>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f023 0207 	bic.w	r2, r3, #7
 80012bc:	4904      	ldr	r1, [pc, #16]	; (80012d0 <LL_PWR_SetPowerMode+0x24>)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	600b      	str	r3, [r1, #0]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	40007000 	.word	0x40007000

080012d4 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80012d8:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <LL_LPM_EnableSleep+0x1c>)
 80012da:	691b      	ldr	r3, [r3, #16]
 80012dc:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <LL_LPM_EnableSleep+0x1c>)
 80012de:	f023 0304 	bic.w	r3, r3, #4
 80012e2:	6113      	str	r3, [r2, #16]
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80012f8:	4b05      	ldr	r3, [pc, #20]	; (8001310 <LL_LPM_EnableDeepSleep+0x1c>)
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	4a04      	ldr	r2, [pc, #16]	; (8001310 <LL_LPM_EnableDeepSleep+0x1c>)
 80012fe:	f043 0304 	orr.w	r3, r3, #4
 8001302:	6113      	str	r3, [r2, #16]
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <HW_SleepMode>:
/* Includes ------------------------------------------------------------------*/
#include "common.h"
#include "hw.h"

void HW_SleepMode(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001318:	f7ff ffdc 	bl	80012d4 <LL_LPM_EnableSleep>
   */
#if defined ( __CC_ARM)
  __force_stores();
#endif

  __WFI();
 800131c:	bf30      	wfi

  return;
 800131e:	bf00      	nop
}
 8001320:	bd80      	pop	{r7, pc}

08001322 <HW_StopMode>:

void HW_StopMode(uint32_t configuration)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  LL_PWR_SetPowerMode(configuration);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff ffbe 	bl	80012ac <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8001330:	f7ff ffe0 	bl	80012f4 <LL_LPM_EnableDeepSleep>
   */
#if defined ( __CC_ARM)
  __force_stores();
#endif

  __WFI();
 8001334:	bf30      	wfi

  return;
 8001336:	bf00      	nop
}
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HW_OffMode>:

void HW_OffMode(uint32_t configuration)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  LL_PWR_SetPowerMode(configuration);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff ffb0 	bl	80012ac <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 800134c:	f7ff ffd2 	bl	80012f4 <LL_LPM_EnableDeepSleep>
   */
#if defined ( __CC_ARM)
  __force_stores();
#endif

  __WFI();
 8001350:	bf30      	wfi

  return;
 8001352:	bf00      	nop
}
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <LL_PWR_SetWakeUpPinPolarityHigh>:
  *         @arg @ref LL_PWR_WAKEUP_PIN4
  *         @arg @ref LL_PWR_WAKEUP_PIN5
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetWakeUpPinPolarityHigh(uint32_t WakeUpPin)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->CR4, WakeUpPin);
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <LL_PWR_SetWakeUpPinPolarityHigh+0x24>)
 8001366:	68da      	ldr	r2, [r3, #12]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	43db      	mvns	r3, r3
 800136c:	4904      	ldr	r1, [pc, #16]	; (8001380 <LL_PWR_SetWakeUpPinPolarityHigh+0x24>)
 800136e:	4013      	ands	r3, r2
 8001370:	60cb      	str	r3, [r1, #12]
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	40007000 	.word	0x40007000

08001384 <LL_PWR_DisableGPIOPullUp>:
  *         @arg @ref LL_PWR_GPIO_BIT_14
  *         @arg @ref LL_PWR_GPIO_BIT_15
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(*((__IO uint32_t *)GPIO), GPIONumber);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6819      	ldr	r1, [r3, #0]
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	43da      	mvns	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	400a      	ands	r2, r1
 800139a:	601a      	str	r2, [r3, #0]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <LL_PWR_DisableGPIOPullDown>:
  *         @arg @ref LL_PWR_GPIO_BIT_14
  *         @arg @ref LL_PWR_GPIO_BIT_15
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(*((__IO uint32_t *)(GPIO + 4U)), GPIONumber);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3304      	adds	r3, #4
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	3104      	adds	r1, #4
 80013c0:	4013      	ands	r3, r2
 80013c2:	600b      	str	r3, [r1, #0]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <LL_SPI_EnableDMAReq_RX>:
  * @rmtoll CR2          RXDMAEN       LL_SPI_EnableDMAReq_RX
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableDMAReq_RX(SPI_TypeDef *SPIx)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f043 0201 	orr.w	r2, r3, #1
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	605a      	str	r2, [r3, #4]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <LL_SPI_EnableDMAReq_TX>:
  * @rmtoll CR2          TXDMAEN       LL_SPI_EnableDMAReq_TX
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableDMAReq_TX(SPI_TypeDef *SPIx)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f043 0202 	orr.w	r2, r3, #2
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	605a      	str	r2, [r3, #4]
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <LL_SPI_DMA_GetRegAddr>:
  * @rmtoll DR           DR            LL_SPI_DMA_GetRegAddr
  * @param  SPIx SPI Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_SPI_DMA_GetRegAddr(SPI_TypeDef *SPIx)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  return (uint32_t) &(SPIx->DR);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	330c      	adds	r3, #12
}
 800141c:	4618      	mov	r0, r3
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8001428:	b480      	push	{r7}
 800142a:	b087      	sub	sp, #28
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8001438:	4a0d      	ldr	r2, [pc, #52]	; (8001470 <LL_DMA_SetMemoryIncMode+0x48>)
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	4413      	add	r3, r2
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	461a      	mov	r2, r3
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	4413      	add	r3, r2
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800144c:	4908      	ldr	r1, [pc, #32]	; (8001470 <LL_DMA_SetMemoryIncMode+0x48>)
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	440b      	add	r3, r1
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	4619      	mov	r1, r3
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	440b      	add	r3, r1
 800145a:	4619      	mov	r1, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4313      	orrs	r3, r2
 8001460:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8001462:	bf00      	nop
 8001464:	371c      	adds	r7, #28
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	080062c0 	.word	0x080062c0

08001474 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8001474:	b480      	push	{r7}
 8001476:	b087      	sub	sp, #28
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8001484:	4a0d      	ldr	r2, [pc, #52]	; (80014bc <LL_DMA_SetDataLength+0x48>)
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	4413      	add	r3, r2
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	4413      	add	r3, r2
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	0c1b      	lsrs	r3, r3, #16
 8001496:	041b      	lsls	r3, r3, #16
 8001498:	4908      	ldr	r1, [pc, #32]	; (80014bc <LL_DMA_SetDataLength+0x48>)
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	440a      	add	r2, r1
 800149e:	7812      	ldrb	r2, [r2, #0]
 80014a0:	4611      	mov	r1, r2
 80014a2:	697a      	ldr	r2, [r7, #20]
 80014a4:	440a      	add	r2, r1
 80014a6:	4611      	mov	r1, r2
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 80014ae:	bf00      	nop
 80014b0:	371c      	adds	r7, #28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	080062c0 	.word	0x080062c0

080014c0 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b087      	sub	sp, #28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 80014d0:	4a07      	ldr	r2, [pc, #28]	; (80014f0 <LL_DMA_SetMemoryAddress+0x30>)
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	4413      	add	r3, r2
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	4413      	add	r3, r2
 80014de:	461a      	mov	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	60d3      	str	r3, [r2, #12]
}
 80014e4:	bf00      	nop
 80014e6:	371c      	adds	r7, #28
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	080062c0 	.word	0x080062c0

080014f4 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b087      	sub	sp, #28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8001504:	4a07      	ldr	r2, [pc, #28]	; (8001524 <LL_DMA_SetPeriphAddress+0x30>)
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	4413      	add	r3, r2
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	461a      	mov	r2, r3
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	4413      	add	r3, r2
 8001512:	461a      	mov	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6093      	str	r3, [r2, #8]
}
 8001518:	bf00      	nop
 800151a:	371c      	adds	r7, #28
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	080062c0 	.word	0x080062c0

08001528 <pf_nRFResetTimerCallBack>:
 * @brief  This function notify when then BlueNRG nRESET may be released
 * @param  None
 * @retval None
 */
static void pf_nRFResetTimerCallBack(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  RfResetTimerLock = 0;
 800152c:	4b03      	ldr	r3, [pc, #12]	; (800153c <pf_nRFResetTimerCallBack+0x14>)
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]

  return;
 8001532:	bf00      	nop
}
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	2000006c 	.word	0x2000006c

08001540 <TimerTxRxCallback>:
 * @brief  Timer callback to handle RxTx Timers
 * @param  None
 * @retval None
 */
static void TimerTxRxCallback(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  pTimerTxRxCallback();
 8001544:	4b02      	ldr	r3, [pc, #8]	; (8001550 <TimerTxRxCallback+0x10>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4798      	blx	r3

  return;
 800154a:	bf00      	nop
}
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000068 	.word	0x20000068

08001554 <ReceiveClosure>:
 * @brief  Close the receiver path
 * @param  None
 * @retval None
 */
static void ReceiveClosure(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /*
   *  Disable both DMA
   */
  __HAL_DMA_DISABLE(SpiHandle.hdmatx);
 8001558:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <ReceiveClosure+0x60>)
 800155a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <ReceiveClosure+0x60>)
 8001562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f022 0201 	bic.w	r2, r2, #1
 800156a:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE(SpiHandle.hdmarx);
 800156c:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <ReceiveClosure+0x60>)
 800156e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <ReceiveClosure+0x60>)
 8001576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f022 0201 	bic.w	r2, r2, #1
 800157e:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001580:	b672      	cpsid	i
}
 8001582:	bf00      	nop

  /*
   * Check if a command is pending
   */
  __disable_irq();
  Disable_SPI_Receiving_Path();
 8001584:	f000 fa20 	bl	80019c8 <Disable_SPI_Receiving_Path>
  if(SpiContext.SpiTransmitContext.RequestPending == TRUE)
 8001588:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <ReceiveClosure+0x64>)
 800158a:	7f5b      	ldrb	r3, [r3, #29]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d10a      	bne.n	80015a6 <ReceiveClosure+0x52>
  {
    SpiContext.SpiTransmitContext.RequestPending = FALSE;
 8001590:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <ReceiveClosure+0x64>)
 8001592:	2200      	movs	r2, #0
 8001594:	775a      	strb	r2, [r3, #29]
    SpiContext.SpiPeripheralState = SPI_BUSY;
 8001596:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <ReceiveClosure+0x64>)
 8001598:	2201      	movs	r2, #1
 800159a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800159c:	b662      	cpsie	i
}
 800159e:	bf00      	nop
    __enable_irq();
    WakeupBlueNRG();
 80015a0:	f000 fa54 	bl	8001a4c <WakeupBlueNRG>
  {
    SpiContext.SpiPeripheralState = SPI_AVAILABLE;
    __enable_irq();
  }

  return;
 80015a4:	e005      	b.n	80015b2 <ReceiveClosure+0x5e>
    SpiContext.SpiPeripheralState = SPI_AVAILABLE;
 80015a6:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <ReceiveClosure+0x64>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80015ac:	b662      	cpsie	i
}
 80015ae:	bf00      	nop
  return;
 80015b0:	bf00      	nop
}
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	2000007c 	.word	0x2000007c
 80015b8:	20000048 	.word	0x20000048

080015bc <ProcessEndOfReceive>:
 * @brief  Delay Notification to the App to prevent dummy event read
 * @param  None
 * @retval None
 */
static void ProcessEndOfReceive(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  SpiContext.SpiReceiveContext.BufferStatus = NO_BUFFER;
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <ProcessEndOfReceive+0x1c>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	745a      	strb	r2, [r3, #17]
  ReceiveClosure();
 80015c6:	f7ff ffc5 	bl	8001554 <ReceiveClosure>

  HW_BNRG_Isr(SpiContext.SpiReceiveContext.PayloadLength);
 80015ca:	4b03      	ldr	r3, [pc, #12]	; (80015d8 <ProcessEndOfReceive+0x1c>)
 80015cc:	88db      	ldrh	r3, [r3, #6]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f002 f83c 	bl	800364c <HW_BNRG_Isr>

  return;
 80015d4:	bf00      	nop
}
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000048 	.word	0x20000048

080015dc <TimerTransmitCallback>:
 * @brief  Timer callback to apply timeout SPI FIX
 * @param  None
 * @retval None
 */
static void TimerTransmitCallback(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  SPI_Receive_Manager(SPI_REQUEST_VALID_HEADER_FOR_TX);  /**< BlueNRG not ready for writing */
 80015e0:	2001      	movs	r0, #1
 80015e2:	f000 fadb 	bl	8001b9c <SPI_Receive_Manager>
  LPM_SetStopMode(LPM_SPI_TX_Id, LPM_StopMode_En);
 80015e6:	2101      	movs	r1, #1
 80015e8:	2000      	movs	r0, #0
 80015ea:	f002 f9b5 	bl	8003958 <LPM_SetStopMode>

  return;
 80015ee:	bf00      	nop
}
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <HAL_SPI_MspInit>:
 *         communication with the BlueNRG Expansion Board.
 * @param  Pointer to the handle of the STM32Cube HAL SPI interface.
 * @retval None
 */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b090      	sub	sp, #64	; 0x40
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t peripheral_address;
  static DMA_HandleTypeDef hdma_tx;
  static DMA_HandleTypeDef hdma_rx;

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==BNRG_SPI_INSTANCE)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a93      	ldr	r2, [pc, #588]	; (8001850 <HAL_SPI_MspInit+0x25c>)
 8001602:	4293      	cmp	r3, r2
 8001604:	f040 8120 	bne.w	8001848 <HAL_SPI_MspInit+0x254>
  {
    /* Enable peripherals clock */

    /* Enable GPIO Ports Clock */  
    BNRG_SPI_SCLK_CLK_ENABLE();
 8001608:	4b92      	ldr	r3, [pc, #584]	; (8001854 <HAL_SPI_MspInit+0x260>)
 800160a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160c:	4a91      	ldr	r2, [pc, #580]	; (8001854 <HAL_SPI_MspInit+0x260>)
 800160e:	f043 0304 	orr.w	r3, r3, #4
 8001612:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001614:	4b8f      	ldr	r3, [pc, #572]	; (8001854 <HAL_SPI_MspInit+0x260>)
 8001616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    BNRG_SPI_MISO_CLK_ENABLE();
 8001620:	4b8c      	ldr	r3, [pc, #560]	; (8001854 <HAL_SPI_MspInit+0x260>)
 8001622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001624:	4a8b      	ldr	r2, [pc, #556]	; (8001854 <HAL_SPI_MspInit+0x260>)
 8001626:	f043 0304 	orr.w	r3, r3, #4
 800162a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800162c:	4b89      	ldr	r3, [pc, #548]	; (8001854 <HAL_SPI_MspInit+0x260>)
 800162e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001630:	f003 0304 	and.w	r3, r3, #4
 8001634:	623b      	str	r3, [r7, #32]
 8001636:	6a3b      	ldr	r3, [r7, #32]
    BNRG_SPI_MOSI_CLK_ENABLE();
 8001638:	4b86      	ldr	r3, [pc, #536]	; (8001854 <HAL_SPI_MspInit+0x260>)
 800163a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163c:	4a85      	ldr	r2, [pc, #532]	; (8001854 <HAL_SPI_MspInit+0x260>)
 800163e:	f043 0304 	orr.w	r3, r3, #4
 8001642:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001644:	4b83      	ldr	r3, [pc, #524]	; (8001854 <HAL_SPI_MspInit+0x260>)
 8001646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	61fb      	str	r3, [r7, #28]
 800164e:	69fb      	ldr	r3, [r7, #28]
    BNRG_SPI_CS_CLK_ENABLE();
 8001650:	4b80      	ldr	r3, [pc, #512]	; (8001854 <HAL_SPI_MspInit+0x260>)
 8001652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001654:	4a7f      	ldr	r2, [pc, #508]	; (8001854 <HAL_SPI_MspInit+0x260>)
 8001656:	f043 0308 	orr.w	r3, r3, #8
 800165a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800165c:	4b7d      	ldr	r3, [pc, #500]	; (8001854 <HAL_SPI_MspInit+0x260>)
 800165e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001660:	f003 0308 	and.w	r3, r3, #8
 8001664:	61bb      	str	r3, [r7, #24]
 8001666:	69bb      	ldr	r3, [r7, #24]
    BNRG_SPI_IRQ_CLK_ENABLE();
 8001668:	4b7a      	ldr	r3, [pc, #488]	; (8001854 <HAL_SPI_MspInit+0x260>)
 800166a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166c:	4a79      	ldr	r2, [pc, #484]	; (8001854 <HAL_SPI_MspInit+0x260>)
 800166e:	f043 0310 	orr.w	r3, r3, #16
 8001672:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001674:	4b77      	ldr	r3, [pc, #476]	; (8001854 <HAL_SPI_MspInit+0x260>)
 8001676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001678:	f003 0310 	and.w	r3, r3, #16
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	697b      	ldr	r3, [r7, #20]

    /* Enable SPI clock */
    BNRG_SPI_CLK_ENABLE();
 8001680:	4b74      	ldr	r3, [pc, #464]	; (8001854 <HAL_SPI_MspInit+0x260>)
 8001682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001684:	4a73      	ldr	r2, [pc, #460]	; (8001854 <HAL_SPI_MspInit+0x260>)
 8001686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800168a:	6593      	str	r3, [r2, #88]	; 0x58
 800168c:	4b71      	ldr	r3, [pc, #452]	; (8001854 <HAL_SPI_MspInit+0x260>)
 800168e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001690:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	693b      	ldr	r3, [r7, #16]

    /* SCLK */
    GPIO_InitStruct.Pin = BNRG_SPI_SCLK_PIN;
 8001698:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800169c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = BNRG_SPI_SCLK_MODE;
 800169e:	2302      	movs	r3, #2
 80016a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pull = BNRG_SPI_SCLK_PULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Speed = BNRG_SPI_SCLK_SPEED;
 80016a6:	2303      	movs	r3, #3
 80016a8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Alternate = BNRG_SPI_SCLK_ALTERNATE;
 80016aa:	2306      	movs	r3, #6
 80016ac:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_GPIO_Init(BNRG_SPI_SCLK_PORT, &GPIO_InitStruct); 
 80016ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016b2:	4619      	mov	r1, r3
 80016b4:	4868      	ldr	r0, [pc, #416]	; (8001858 <HAL_SPI_MspInit+0x264>)
 80016b6:	f003 fbcf 	bl	8004e58 <HAL_GPIO_Init>

    /* MISO */
    GPIO_InitStruct.Pin = BNRG_SPI_MISO_PIN;
 80016ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = BNRG_SPI_MISO_MODE;
 80016c0:	2302      	movs	r3, #2
 80016c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pull = BNRG_SPI_MISO_PULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Speed = BNRG_SPI_MISO_SPEED;
 80016c8:	2303      	movs	r3, #3
 80016ca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Alternate = BNRG_SPI_MISO_ALTERNATE;
 80016cc:	2306      	movs	r3, #6
 80016ce:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_GPIO_Init(BNRG_SPI_MISO_PORT, &GPIO_InitStruct);
 80016d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016d4:	4619      	mov	r1, r3
 80016d6:	4860      	ldr	r0, [pc, #384]	; (8001858 <HAL_SPI_MspInit+0x264>)
 80016d8:	f003 fbbe 	bl	8004e58 <HAL_GPIO_Init>

    /* MOSI */
    GPIO_InitStruct.Pin = BNRG_SPI_MOSI_PIN;
 80016dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = BNRG_SPI_MOSI_MODE;
 80016e2:	2302      	movs	r3, #2
 80016e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pull = BNRG_SPI_MOSI_PULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Speed = BNRG_SPI_MOSI_SPEED;
 80016ea:	2303      	movs	r3, #3
 80016ec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Alternate = BNRG_SPI_MOSI_ALTERNATE;
 80016ee:	2306      	movs	r3, #6
 80016f0:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_GPIO_Init(BNRG_SPI_MOSI_PORT, &GPIO_InitStruct);
 80016f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016f6:	4619      	mov	r1, r3
 80016f8:	4857      	ldr	r0, [pc, #348]	; (8001858 <HAL_SPI_MspInit+0x264>)
 80016fa:	f003 fbad 	bl	8004e58 <HAL_GPIO_Init>

    /* NSS/CSN/CS */
    HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_SET);
 80016fe:	2201      	movs	r2, #1
 8001700:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001704:	4855      	ldr	r0, [pc, #340]	; (800185c <HAL_SPI_MspInit+0x268>)
 8001706:	f003 fd69 	bl	80051dc <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = BNRG_SPI_CS_PIN;
 800170a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800170e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = BNRG_SPI_CS_MODE;
 8001710:	2301      	movs	r3, #1
 8001712:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pull = BNRG_SPI_CS_PULL;
 8001714:	2300      	movs	r3, #0
 8001716:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Speed = BNRG_SPI_CS_SPEED;
 8001718:	2303      	movs	r3, #3
 800171a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Alternate = BNRG_SPI_CS_ALTERNATE;
 800171c:	2300      	movs	r3, #0
 800171e:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_GPIO_Init(BNRG_SPI_CS_PORT, &GPIO_InitStruct);
 8001720:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001724:	4619      	mov	r1, r3
 8001726:	484d      	ldr	r0, [pc, #308]	; (800185c <HAL_SPI_MspInit+0x268>)
 8001728:	f003 fb96 	bl	8004e58 <HAL_GPIO_Init>

    /* IRQ -- INPUT */
    GPIO_InitStruct.Pin = BNRG_SPI_IRQ_PIN;
 800172c:	2340      	movs	r3, #64	; 0x40
 800172e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = BNRG_SPI_IRQ_MODE;
 8001730:	4b4b      	ldr	r3, [pc, #300]	; (8001860 <HAL_SPI_MspInit+0x26c>)
 8001732:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pull = BNRG_SPI_IRQ_PULL;
 8001734:	2302      	movs	r3, #2
 8001736:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Speed = BNRG_SPI_IRQ_SPEED;
 8001738:	2303      	movs	r3, #3
 800173a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Alternate = BNRG_SPI_IRQ_ALTERNATE;
 800173c:	2300      	movs	r3, #0
 800173e:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_GPIO_Init(BNRG_SPI_IRQ_PORT, &GPIO_InitStruct);
 8001740:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001744:	4619      	mov	r1, r3
 8001746:	4847      	ldr	r0, [pc, #284]	; (8001864 <HAL_SPI_MspInit+0x270>)
 8001748:	f003 fb86 	bl	8004e58 <HAL_GPIO_Init>

    /*##-3- Configure the DMA channel ##########################################*/ 

    /* Enable DMA1 clock */
    BNRG_DMA_CLK_ENABLE();   
 800174c:	4b41      	ldr	r3, [pc, #260]	; (8001854 <HAL_SPI_MspInit+0x260>)
 800174e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001750:	4a40      	ldr	r2, [pc, #256]	; (8001854 <HAL_SPI_MspInit+0x260>)
 8001752:	f043 0302 	orr.w	r3, r3, #2
 8001756:	6493      	str	r3, [r2, #72]	; 0x48
 8001758:	4b3e      	ldr	r3, [pc, #248]	; (8001854 <HAL_SPI_MspInit+0x260>)
 800175a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]

    /* Configure the DMA handler for Transmission process */
    hdma_tx.Init.Request             = BNRG_SPI_TX_DMA_REQUEST;
 8001764:	4b40      	ldr	r3, [pc, #256]	; (8001868 <HAL_SPI_MspInit+0x274>)
 8001766:	2203      	movs	r2, #3
 8001768:	605a      	str	r2, [r3, #4]
    hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800176a:	4b3f      	ldr	r3, [pc, #252]	; (8001868 <HAL_SPI_MspInit+0x274>)
 800176c:	2210      	movs	r2, #16
 800176e:	609a      	str	r2, [r3, #8]
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001770:	4b3d      	ldr	r3, [pc, #244]	; (8001868 <HAL_SPI_MspInit+0x274>)
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8001776:	4b3c      	ldr	r3, [pc, #240]	; (8001868 <HAL_SPI_MspInit+0x274>)
 8001778:	2280      	movs	r2, #128	; 0x80
 800177a:	611a      	str	r2, [r3, #16]
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800177c:	4b3a      	ldr	r3, [pc, #232]	; (8001868 <HAL_SPI_MspInit+0x274>)
 800177e:	2200      	movs	r2, #0
 8001780:	615a      	str	r2, [r3, #20]
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8001782:	4b39      	ldr	r3, [pc, #228]	; (8001868 <HAL_SPI_MspInit+0x274>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
    hdma_tx.Init.Mode                = DMA_NORMAL;
 8001788:	4b37      	ldr	r3, [pc, #220]	; (8001868 <HAL_SPI_MspInit+0x274>)
 800178a:	2200      	movs	r2, #0
 800178c:	61da      	str	r2, [r3, #28]
    hdma_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 800178e:	4b36      	ldr	r3, [pc, #216]	; (8001868 <HAL_SPI_MspInit+0x274>)
 8001790:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001794:	621a      	str	r2, [r3, #32]
    hdma_tx.Instance                 = BNRG_SPI_TX_DMA_CHANNEL_INSTANCE;
 8001796:	4b34      	ldr	r3, [pc, #208]	; (8001868 <HAL_SPI_MspInit+0x274>)
 8001798:	4a34      	ldr	r2, [pc, #208]	; (800186c <HAL_SPI_MspInit+0x278>)
 800179a:	601a      	str	r2, [r3, #0]

    HAL_DMA_Init(&hdma_tx);   
 800179c:	4832      	ldr	r0, [pc, #200]	; (8001868 <HAL_SPI_MspInit+0x274>)
 800179e:	f003 faa3 	bl	8004ce8 <HAL_DMA_Init>
    peripheral_address = LL_SPI_DMA_GetRegAddr(BNRG_SPI_INSTANCE);
 80017a2:	482b      	ldr	r0, [pc, #172]	; (8001850 <HAL_SPI_MspInit+0x25c>)
 80017a4:	f7ff fe34 	bl	8001410 <LL_SPI_DMA_GetRegAddr>
 80017a8:	63f8      	str	r0, [r7, #60]	; 0x3c
    LL_DMA_SetPeriphAddress(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, peripheral_address);
 80017aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017ac:	2101      	movs	r1, #1
 80017ae:	4830      	ldr	r0, [pc, #192]	; (8001870 <HAL_SPI_MspInit+0x27c>)
 80017b0:	f7ff fea0 	bl	80014f4 <LL_DMA_SetPeriphAddress>

    /* Associate the initialized DMA handle to the SPI handle */
    __HAL_LINKDMA(hspi, hdmatx, hdma_tx);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a2c      	ldr	r2, [pc, #176]	; (8001868 <HAL_SPI_MspInit+0x274>)
 80017b8:	655a      	str	r2, [r3, #84]	; 0x54
 80017ba:	4a2b      	ldr	r2, [pc, #172]	; (8001868 <HAL_SPI_MspInit+0x274>)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6293      	str	r3, [r2, #40]	; 0x28

    /* Configure the DMA handler for Transmission process */
    hdma_rx.Init.Request             = BNRG_SPI_RX_DMA_REQUEST;
 80017c0:	4b2c      	ldr	r3, [pc, #176]	; (8001874 <HAL_SPI_MspInit+0x280>)
 80017c2:	2203      	movs	r2, #3
 80017c4:	605a      	str	r2, [r3, #4]
    hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80017c6:	4b2b      	ldr	r3, [pc, #172]	; (8001874 <HAL_SPI_MspInit+0x280>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
    hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80017cc:	4b29      	ldr	r3, [pc, #164]	; (8001874 <HAL_SPI_MspInit+0x280>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	60da      	str	r2, [r3, #12]
    hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 80017d2:	4b28      	ldr	r3, [pc, #160]	; (8001874 <HAL_SPI_MspInit+0x280>)
 80017d4:	2280      	movs	r2, #128	; 0x80
 80017d6:	611a      	str	r2, [r3, #16]
    hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017d8:	4b26      	ldr	r3, [pc, #152]	; (8001874 <HAL_SPI_MspInit+0x280>)
 80017da:	2200      	movs	r2, #0
 80017dc:	615a      	str	r2, [r3, #20]
    hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 80017de:	4b25      	ldr	r3, [pc, #148]	; (8001874 <HAL_SPI_MspInit+0x280>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
    hdma_rx.Init.Mode                = DMA_NORMAL;
 80017e4:	4b23      	ldr	r3, [pc, #140]	; (8001874 <HAL_SPI_MspInit+0x280>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	61da      	str	r2, [r3, #28]
    hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 80017ea:	4b22      	ldr	r3, [pc, #136]	; (8001874 <HAL_SPI_MspInit+0x280>)
 80017ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017f0:	621a      	str	r2, [r3, #32]
    hdma_rx.Instance                 = BNRG_SPI_RX_DMA_CHANNEL_INSTANCE;
 80017f2:	4b20      	ldr	r3, [pc, #128]	; (8001874 <HAL_SPI_MspInit+0x280>)
 80017f4:	4a20      	ldr	r2, [pc, #128]	; (8001878 <HAL_SPI_MspInit+0x284>)
 80017f6:	601a      	str	r2, [r3, #0]

    HAL_DMA_Init(&hdma_rx);
 80017f8:	481e      	ldr	r0, [pc, #120]	; (8001874 <HAL_SPI_MspInit+0x280>)
 80017fa:	f003 fa75 	bl	8004ce8 <HAL_DMA_Init>
    peripheral_address = LL_SPI_DMA_GetRegAddr(BNRG_SPI_INSTANCE);
 80017fe:	4814      	ldr	r0, [pc, #80]	; (8001850 <HAL_SPI_MspInit+0x25c>)
 8001800:	f7ff fe06 	bl	8001410 <LL_SPI_DMA_GetRegAddr>
 8001804:	63f8      	str	r0, [r7, #60]	; 0x3c
    LL_DMA_SetPeriphAddress(BNRG_SPI_RX_DMA_ID, BNRG_SPI_RX_DMA_CHANNEL, peripheral_address);
 8001806:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001808:	2100      	movs	r1, #0
 800180a:	4819      	ldr	r0, [pc, #100]	; (8001870 <HAL_SPI_MspInit+0x27c>)
 800180c:	f7ff fe72 	bl	80014f4 <LL_DMA_SetPeriphAddress>

    /* Associate the initialized DMA handle to the SPI handle */
    __HAL_LINKDMA(hspi, hdmarx, hdma_rx); 
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a18      	ldr	r2, [pc, #96]	; (8001874 <HAL_SPI_MspInit+0x280>)
 8001814:	659a      	str	r2, [r3, #88]	; 0x58
 8001816:	4a17      	ldr	r2, [pc, #92]	; (8001874 <HAL_SPI_MspInit+0x280>)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6293      	str	r3, [r2, #40]	; 0x28

    /* Configure the NVIC for SPI */  
    HAL_NVIC_SetPriority(BNRG_SPI_DMA_TX_IRQn, 
 800181c:	2200      	movs	r2, #0
 800181e:	2101      	movs	r1, #1
 8001820:	2039      	movs	r0, #57	; 0x39
 8001822:	f003 fa0d 	bl	8004c40 <HAL_NVIC_SetPriority>
                         BNRG_SPI_TX_DMA_NVIC_PREEMPT_PRIO, 
                         BNRG_SPI_TX_DMA_NVIC_SUB_PRIO);
    HAL_NVIC_EnableIRQ(BNRG_SPI_DMA_TX_IRQn);
 8001826:	2039      	movs	r0, #57	; 0x39
 8001828:	f003 fa26 	bl	8004c78 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(BNRG_SPI_DMA_RX_IRQn, 
 800182c:	2200      	movs	r2, #0
 800182e:	2101      	movs	r1, #1
 8001830:	2038      	movs	r0, #56	; 0x38
 8001832:	f003 fa05 	bl	8004c40 <HAL_NVIC_SetPriority>
                         BNRG_SPI_RX_DMA_NVIC_PREEMPT_PRIO, 
                         BNRG_SPI_RX_DMA_NVIC_SUB_PRIO);
    HAL_NVIC_EnableIRQ(BNRG_SPI_DMA_RX_IRQn);
 8001836:	2038      	movs	r0, #56	; 0x38
 8001838:	f003 fa1e 	bl	8004c78 <HAL_NVIC_EnableIRQ>

    /* Configure the NVIC for SPI */  
    HAL_NVIC_SetPriority(BNRG_SPI_EXTI_IRQn, 
 800183c:	2200      	movs	r2, #0
 800183e:	2102      	movs	r1, #2
 8001840:	2017      	movs	r0, #23
 8001842:	f003 f9fd 	bl	8004c40 <HAL_NVIC_SetPriority>
                         BNRG_SPI_EXTI_NVIC_PREEMPT_PRIO, 
                         BNRG_SPI_EXTI_NVIC_SUB_PRIO);    
  }

  return;
 8001846:	bf00      	nop
 8001848:	bf00      	nop
}
 800184a:	3740      	adds	r7, #64	; 0x40
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40003c00 	.word	0x40003c00
 8001854:	40021000 	.word	0x40021000
 8001858:	48000800 	.word	0x48000800
 800185c:	48000c00 	.word	0x48000c00
 8001860:	10110000 	.word	0x10110000
 8001864:	48001000 	.word	0x48001000
 8001868:	200000e0 	.word	0x200000e0
 800186c:	4002041c 	.word	0x4002041c
 8001870:	40020400 	.word	0x40020400
 8001874:	20000128 	.word	0x20000128
 8001878:	40020408 	.word	0x40020408

0800187c <SPI_Init>:
 * @brief  Initializes the SPI communication with the BlueNRG Shield
 * @param  hspi: SPI Handle
 * @retval None
 */
void SPI_Init(SPI_HandleTypeDef * hspi)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  hspi->Instance = BNRG_SPI_INSTANCE;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a16      	ldr	r2, [pc, #88]	; (80018e0 <SPI_Init+0x64>)
 8001888:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = BNRG_SPI_MODE;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001890:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = BNRG_SPI_DIRECTION;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = BNRG_SPI_DATASIZE;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800189e:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = BNRG_SPI_CLKPOLARITY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = BNRG_SPI_CLKPHASE;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = BNRG_SPI_NSS;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018b2:	619a      	str	r2, [r3, #24]
  hspi->Init.FirstBit = BNRG_SPI_FIRSTBIT;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = BNRG_SPI_TIMODE;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCPolynomial = BNRG_SPI_CRCPOLYNOMIAL;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2207      	movs	r2, #7
 80018c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.BaudRatePrescaler = BNRG_SPI_BAUDRATEPRESCALER;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	61da      	str	r2, [r3, #28]
  hspi->Init.CRCCalculation = BNRG_SPI_CRCCALCULATION;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	629a      	str	r2, [r3, #40]	; 0x28

  HAL_SPI_Init(hspi);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f004 fc02 	bl	80060dc <HAL_SPI_Init>

  return;
 80018d8:	bf00      	nop
}
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40003c00 	.word	0x40003c00

080018e4 <ResetBlueNRG>:
 * @brief  Resets the BlueNRG.
 * @param  None
 * @retval None
 */
void ResetBlueNRG(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b088      	sub	sp, #32
 80018e8:	af00      	add	r7, sp, #0
  uint8_t ubnRFResetTimerID;

  GPIO_InitTypeDef GPIO_InitStruct;

  GPIO_InitStruct.Pin = BNRG_SPI_RESET_PIN;
 80018ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = BNRG_SPI_RESET_SPEED;
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = BNRG_SPI_RESET_MODE;
 80018f4:	2301      	movs	r3, #1
 80018f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = BNRG_SPI_RESET_PULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = BNRG_SPI_RESET_ALTERNATE;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61bb      	str	r3, [r7, #24]
  HW_TS_Create(CFG_TimProcID_isr, &ubnRFResetTimerID, hw_ts_SingleShot, pf_nRFResetTimerCallBack);
 8001900:	f107 011f 	add.w	r1, r7, #31
 8001904:	4b1e      	ldr	r3, [pc, #120]	; (8001980 <ResetBlueNRG+0x9c>)
 8001906:	2200      	movs	r2, #0
 8001908:	2000      	movs	r0, #0
 800190a:	f001 f97b 	bl	8002c04 <HW_TS_Create>

  BNRG_SPI_RESET_CLK_ENABLE();
 800190e:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <ResetBlueNRG+0xa0>)
 8001910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001912:	4a1c      	ldr	r2, [pc, #112]	; (8001984 <ResetBlueNRG+0xa0>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800191a:	4b1a      	ldr	r3, [pc, #104]	; (8001984 <ResetBlueNRG+0xa0>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(BNRG_SPI_RESET_PORT, BNRG_SPI_RESET_PIN, GPIO_PIN_RESET);
 8001926:	2200      	movs	r2, #0
 8001928:	f44f 7180 	mov.w	r1, #256	; 0x100
 800192c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001930:	f003 fc54 	bl	80051dc <HAL_GPIO_WritePin>
  HAL_GPIO_Init(BNRG_SPI_RESET_PORT, &GPIO_InitStruct);
 8001934:	f107 0308 	add.w	r3, r7, #8
 8001938:	4619      	mov	r1, r3
 800193a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800193e:	f003 fa8b 	bl	8004e58 <HAL_GPIO_Init>

  HW_TS_Start(ubnRFResetTimerID, BLUENRG_HOLD_TIME_IN_RESET);
 8001942:	7ffb      	ldrb	r3, [r7, #31]
 8001944:	211c      	movs	r1, #28
 8001946:	4618      	mov	r0, r3
 8001948:	f001 fa6e 	bl	8002e28 <HW_TS_Start>
  RfResetTimerLock = 1;
 800194c:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <ResetBlueNRG+0xa4>)
 800194e:	2201      	movs	r2, #1
 8001950:	701a      	strb	r2, [r3, #0]
  while(RfResetTimerLock == 1)
 8001952:	e001      	b.n	8001958 <ResetBlueNRG+0x74>
  {
    HW_SleepMode();
 8001954:	f7ff fcde 	bl	8001314 <HW_SleepMode>
  while(RfResetTimerLock == 1)
 8001958:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <ResetBlueNRG+0xa4>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b01      	cmp	r3, #1
 8001960:	d0f8      	beq.n	8001954 <ResetBlueNRG+0x70>
  }

  HAL_GPIO_WritePin(BNRG_SPI_RESET_PORT, BNRG_SPI_RESET_PIN, GPIO_PIN_SET);
 8001962:	2201      	movs	r2, #1
 8001964:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800196c:	f003 fc36 	bl	80051dc <HAL_GPIO_WritePin>

  HW_TS_Delete(ubnRFResetTimerID);
 8001970:	7ffb      	ldrb	r3, [r7, #31]
 8001972:	4618      	mov	r0, r3
 8001974:	f001 f9c0 	bl	8002cf8 <HW_TS_Delete>

  return;
 8001978:	bf00      	nop
}
 800197a:	3720      	adds	r7, #32
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	08001529 	.word	0x08001529
 8001984:	40021000 	.word	0x40021000
 8001988:	2000006c 	.word	0x2000006c

0800198c <Enable_SPI_Receiving_Path>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
static void Enable_SPI_Receiving_Path(void)
{  
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  __HAL_GPIO_EXTI_CLEAR_IT(BNRG_SPI_EXTI_PIN);
 8001990:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <Enable_SPI_Receiving_Path+0x34>)
 8001992:	2240      	movs	r2, #64	; 0x40
 8001994:	615a      	str	r2, [r3, #20]
  HAL_NVIC_ClearPendingIRQ(BNRG_SPI_EXTI_IRQn);
 8001996:	2017      	movs	r0, #23
 8001998:	f003 f998 	bl	8004ccc <HAL_NVIC_ClearPendingIRQ>
  HAL_NVIC_EnableIRQ(BNRG_SPI_EXTI_IRQn);
 800199c:	2017      	movs	r0, #23
 800199e:	f003 f96b 	bl	8004c78 <HAL_NVIC_EnableIRQ>

  if (HAL_GPIO_ReadPin(BNRG_SPI_IRQ_PORT, BNRG_SPI_IRQ_PIN) == GPIO_PIN_SET)
 80019a2:	2140      	movs	r1, #64	; 0x40
 80019a4:	4807      	ldr	r0, [pc, #28]	; (80019c4 <Enable_SPI_Receiving_Path+0x38>)
 80019a6:	f003 fc01 	bl	80051ac <HAL_GPIO_ReadPin>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d105      	bne.n	80019bc <Enable_SPI_Receiving_Path+0x30>
  {
    __HAL_GPIO_EXTI_GENERATE_SWIT(BNRG_SPI_IRQ_PIN);
 80019b0:	4b03      	ldr	r3, [pc, #12]	; (80019c0 <Enable_SPI_Receiving_Path+0x34>)
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	4a02      	ldr	r2, [pc, #8]	; (80019c0 <Enable_SPI_Receiving_Path+0x34>)
 80019b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019ba:	6113      	str	r3, [r2, #16]
  }
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40010400 	.word	0x40010400
 80019c4:	48001000 	.word	0x48001000

080019c8 <Disable_SPI_Receiving_Path>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void Disable_SPI_Receiving_Path(void)
{  
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(BNRG_SPI_EXTI_IRQn);
 80019cc:	2017      	movs	r0, #23
 80019ce:	f003 f961 	bl	8004c94 <HAL_NVIC_DisableIRQ>
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <Enable_SPI_CS>:
 * @brief  Enable SPI CS.
 * @param  None
 * @retval None
 */
static void Enable_SPI_CS(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* CS reset */
  HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_RESET);
 80019dc:	2200      	movs	r2, #0
 80019de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019e2:	4802      	ldr	r0, [pc, #8]	; (80019ec <Enable_SPI_CS+0x14>)
 80019e4:	f003 fbfa 	bl	80051dc <HAL_GPIO_WritePin>
}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	48000c00 	.word	0x48000c00

080019f0 <Disable_SPI_CS>:
 * @brief  Disable SPI CS.
 * @param  None
 * @retval None
 */
static void Disable_SPI_CS(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  while (__HAL_SPI_GET_FLAG(&SpiHandle,SPI_FLAG_BSY) == SET);
 80019f4:	bf00      	nop
 80019f6:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <Disable_SPI_CS+0x24>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a00:	2b80      	cmp	r3, #128	; 0x80
 8001a02:	d0f8      	beq.n	80019f6 <Disable_SPI_CS+0x6>

  /* CS set */
  HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_SET);
 8001a04:	2201      	movs	r2, #1
 8001a06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a0a:	4803      	ldr	r0, [pc, #12]	; (8001a18 <Disable_SPI_CS+0x28>)
 8001a0c:	f003 fbe6 	bl	80051dc <HAL_GPIO_WritePin>
}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	2000007c 	.word	0x2000007c
 8001a18:	48000c00 	.word	0x48000c00

08001a1c <DisableEnable_SPI_CS>:
 * @brief  Disable and Enable SPI CS.
 * @param  None
 * @retval None
 */
static void DisableEnable_SPI_CS(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
  uint8_t localloop;
  Disable_SPI_CS(); /**< CS Set */
 8001a22:	f7ff ffe5 	bl	80019f0 <Disable_SPI_CS>

  /* CS set */
  for (localloop = 0 ; localloop < CS_PULSE_LENGTH ; localloop++)
 8001a26:	2300      	movs	r3, #0
 8001a28:	71fb      	strb	r3, [r7, #7]
 8001a2a:	e005      	b.n	8001a38 <DisableEnable_SPI_CS+0x1c>
  {
    *(volatile uint32_t*)DUMMY_RAM_ADDRESS_TO_READ;
 8001a2c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001a30:	681b      	ldr	r3, [r3, #0]
  for (localloop = 0 ; localloop < CS_PULSE_LENGTH ; localloop++)
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	3301      	adds	r3, #1
 8001a36:	71fb      	strb	r3, [r7, #7]
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	2b0c      	cmp	r3, #12
 8001a3c:	d9f6      	bls.n	8001a2c <DisableEnable_SPI_CS+0x10>
  }

  Enable_SPI_CS(); /**< CS Reset */
 8001a3e:	f7ff ffcb 	bl	80019d8 <Enable_SPI_CS>

  return;
 8001a42:	bf00      	nop
}
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <WakeupBlueNRG>:
 * @brief  Wakeup BlueNRG
 * @param  None
 * @retval None
 */
static void WakeupBlueNRG(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  pTimerTxRxCallback = TimerTransmitCallback;
 8001a50:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <WakeupBlueNRG+0x24>)
 8001a52:	4a08      	ldr	r2, [pc, #32]	; (8001a74 <WakeupBlueNRG+0x28>)
 8001a54:	601a      	str	r2, [r3, #0]
  Enable_SPI_CS();
 8001a56:	f7ff ffbf 	bl	80019d8 <Enable_SPI_CS>
  TimeoutTicks = SPI_TX_TIMEOUT;
 8001a5a:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <WakeupBlueNRG+0x2c>)
 8001a5c:	2206      	movs	r2, #6
 8001a5e:	601a      	str	r2, [r3, #0]
  HW_BNRG_TimStartReq();
 8001a60:	f000 fba0 	bl	80021a4 <HW_BNRG_TimStartReq>
  LPM_SetStopMode(LPM_SPI_TX_Id, LPM_StopMode_Dis);
 8001a64:	2100      	movs	r1, #0
 8001a66:	2000      	movs	r0, #0
 8001a68:	f001 ff76 	bl	8003958 <LPM_SetStopMode>

  return;
 8001a6c:	bf00      	nop
}
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20000068 	.word	0x20000068
 8001a74:	080015dd 	.word	0x080015dd
 8001a78:	20000078 	.word	0x20000078

08001a7c <TransmitClosure>:
 *         Wait for the event to come back
 * @param  None
 * @retval None
 */
static void TransmitClosure(void)
{ 
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  LPM_SetStopMode(LPM_SPI_TX_Id, LPM_StopMode_Dis);
 8001a80:	2100      	movs	r1, #0
 8001a82:	2000      	movs	r0, #0
 8001a84:	f001 ff68 	bl	8003958 <LPM_SetStopMode>
  SpiContext.SpiPeripheralState = SPI_AVAILABLE;
 8001a88:	4b10      	ldr	r3, [pc, #64]	; (8001acc <TransmitClosure+0x50>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
  Disable_SPI_CS();
 8001a8e:	f7ff ffaf 	bl	80019f0 <Disable_SPI_CS>
  /*
   *  Disable both DMA
   */
  __HAL_DMA_DISABLE(SpiHandle.hdmatx);
 8001a92:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <TransmitClosure+0x54>)
 8001a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <TransmitClosure+0x54>)
 8001a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 0201 	bic.w	r2, r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE(SpiHandle.hdmarx);
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <TransmitClosure+0x54>)
 8001aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <TransmitClosure+0x54>)
 8001ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f022 0201 	bic.w	r2, r2, #1
 8001ab8:	601a      	str	r2, [r3, #0]
  if(SpiContext.SpiReceiveContext.BufferStatus == BUFFER_AVAILABLE)
 8001aba:	4b04      	ldr	r3, [pc, #16]	; (8001acc <TransmitClosure+0x50>)
 8001abc:	7c5b      	ldrb	r3, [r3, #17]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d102      	bne.n	8001ac8 <TransmitClosure+0x4c>
  {
    Enable_SPI_Receiving_Path();
 8001ac2:	f7ff ff63 	bl	800198c <Enable_SPI_Receiving_Path>
  }

  return;
 8001ac6:	bf00      	nop
 8001ac8:	bf00      	nop
}
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20000048 	.word	0x20000048
 8001ad0:	2000007c 	.word	0x2000007c

08001ad4 <SPI_Transmit_Manager>:
 * @brief  Manage the SPI transmit
 * @param  None
 * @retval None
 */
static void SPI_Transmit_Manager(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /*
   *  Disable both DMA
   */
  __HAL_DMA_DISABLE(SpiHandle.hdmatx);
 8001ad8:	4b2b      	ldr	r3, [pc, #172]	; (8001b88 <SPI_Transmit_Manager+0xb4>)
 8001ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4b29      	ldr	r3, [pc, #164]	; (8001b88 <SPI_Transmit_Manager+0xb4>)
 8001ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 0201 	bic.w	r2, r2, #1
 8001aea:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE(SpiHandle.hdmarx);
 8001aec:	4b26      	ldr	r3, [pc, #152]	; (8001b88 <SPI_Transmit_Manager+0xb4>)
 8001aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <SPI_Transmit_Manager+0xb4>)
 8001af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 0201 	bic.w	r2, r2, #1
 8001afe:	601a      	str	r2, [r3, #0]

  __HAL_DMA_DISABLE_IT(SpiHandle.hdmarx, DMA_IT_TC); /**< Disable Receive packet notification */
 8001b00:	4b21      	ldr	r3, [pc, #132]	; (8001b88 <SPI_Transmit_Manager+0xb4>)
 8001b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4b1f      	ldr	r3, [pc, #124]	; (8001b88 <SPI_Transmit_Manager+0xb4>)
 8001b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 0202 	bic.w	r2, r2, #2
 8001b12:	601a      	str	r2, [r3, #0]

  __HAL_DMA_CLEAR_FLAG(SpiHandle.hdmatx, BNRG_SPI_TX_DMA_TC_FLAG); /**< Clear flag in DMA */
 8001b14:	4b1c      	ldr	r3, [pc, #112]	; (8001b88 <SPI_Transmit_Manager+0xb4>)
 8001b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <SPI_Transmit_Manager+0xb8>)
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d903      	bls.n	8001b2a <SPI_Transmit_Manager+0x56>
 8001b22:	4b1b      	ldr	r3, [pc, #108]	; (8001b90 <SPI_Transmit_Manager+0xbc>)
 8001b24:	2220      	movs	r2, #32
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	e002      	b.n	8001b30 <SPI_Transmit_Manager+0x5c>
 8001b2a:	4b1a      	ldr	r3, [pc, #104]	; (8001b94 <SPI_Transmit_Manager+0xc0>)
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	605a      	str	r2, [r3, #4]
  HAL_NVIC_ClearPendingIRQ(BNRG_SPI_DMA_TX_IRQn); /**< Clear DMA pending bit in NVIC */
 8001b30:	2039      	movs	r0, #57	; 0x39
 8001b32:	f003 f8cb 	bl	8004ccc <HAL_NVIC_ClearPendingIRQ>
  __HAL_DMA_ENABLE_IT(SpiHandle.hdmatx, DMA_IT_TC);  /**< Enable Transmit packet notification */
 8001b36:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <SPI_Transmit_Manager+0xb4>)
 8001b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <SPI_Transmit_Manager+0xb4>)
 8001b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f042 0202 	orr.w	r2, r2, #2
 8001b48:	601a      	str	r2, [r3, #0]

  LL_DMA_SetMemoryIncMode(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, LL_DMA_MEMORY_INCREMENT); /**< Configure DMA to send Tx packet */
 8001b4a:	2280      	movs	r2, #128	; 0x80
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	4810      	ldr	r0, [pc, #64]	; (8001b90 <SPI_Transmit_Manager+0xbc>)
 8001b50:	f7ff fc6a 	bl	8001428 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetDataLength(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, SpiContext.SpiTransmitContext.PayloadSizeToTransmit); /**< Set counter in DMA TX */
 8001b54:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <SPI_Transmit_Manager+0xc4>)
 8001b56:	8b5b      	ldrh	r3, [r3, #26]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	480c      	ldr	r0, [pc, #48]	; (8001b90 <SPI_Transmit_Manager+0xbc>)
 8001b5e:	f7ff fc89 	bl	8001474 <LL_DMA_SetDataLength>

  LL_DMA_SetMemoryAddress(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, (uint32_t)SpiContext.SpiTransmitContext.pPayloadData);  /**< Set memory address in DMA TX */
 8001b62:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <SPI_Transmit_Manager+0xc4>)
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	461a      	mov	r2, r3
 8001b68:	2101      	movs	r1, #1
 8001b6a:	4809      	ldr	r0, [pc, #36]	; (8001b90 <SPI_Transmit_Manager+0xbc>)
 8001b6c:	f7ff fca8 	bl	80014c0 <LL_DMA_SetMemoryAddress>

  __HAL_DMA_ENABLE(SpiHandle.hdmatx); /**< Enable DMA TX */
 8001b70:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <SPI_Transmit_Manager+0xb4>)
 8001b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b03      	ldr	r3, [pc, #12]	; (8001b88 <SPI_Transmit_Manager+0xb4>)
 8001b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0201 	orr.w	r2, r2, #1
 8001b82:	601a      	str	r2, [r3, #0]

}
 8001b84:	bf00      	nop
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	2000007c 	.word	0x2000007c
 8001b8c:	40020080 	.word	0x40020080
 8001b90:	40020400 	.word	0x40020400
 8001b94:	40020000 	.word	0x40020000
 8001b98:	20000048 	.word	0x20000048

08001b9c <SPI_Receive_Manager>:
 * @brief  Manage the SPI receive
 * @param  ReceiveRequest: the receive request
 * @retval None
 */
static void SPI_Receive_Manager(SPI_RECEIVE_REQUEST_t ReceiveRequest)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	71fb      	strb	r3, [r7, #7]
  uint8_t localloop;

  /*
   *  Disable both DMA
   */
  __HAL_DMA_DISABLE(SpiHandle.hdmatx);
 8001ba6:	4b5b      	ldr	r3, [pc, #364]	; (8001d14 <SPI_Receive_Manager+0x178>)
 8001ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	4b59      	ldr	r3, [pc, #356]	; (8001d14 <SPI_Receive_Manager+0x178>)
 8001bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0201 	bic.w	r2, r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE(SpiHandle.hdmarx);
 8001bba:	4b56      	ldr	r3, [pc, #344]	; (8001d14 <SPI_Receive_Manager+0x178>)
 8001bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	4b54      	ldr	r3, [pc, #336]	; (8001d14 <SPI_Receive_Manager+0x178>)
 8001bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0201 	bic.w	r2, r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]

  /**
   * Flush the Rx register or FIFO
   */
  for (localloop = 0 ; localloop < SPI_FIFO_RX_DEPTH ; localloop++)
 8001bce:	2300      	movs	r3, #0
 8001bd0:	737b      	strb	r3, [r7, #13]
 8001bd2:	e007      	b.n	8001be4 <SPI_Receive_Manager+0x48>
  {
    *(volatile uint8_t*)LL_SPI_DMA_GetRegAddr(BNRG_SPI_INSTANCE);
 8001bd4:	4850      	ldr	r0, [pc, #320]	; (8001d18 <SPI_Receive_Manager+0x17c>)
 8001bd6:	f7ff fc1b 	bl	8001410 <LL_SPI_DMA_GetRegAddr>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	781b      	ldrb	r3, [r3, #0]
  for (localloop = 0 ; localloop < SPI_FIFO_RX_DEPTH ; localloop++)
 8001bde:	7b7b      	ldrb	r3, [r7, #13]
 8001be0:	3301      	adds	r3, #1
 8001be2:	737b      	strb	r3, [r7, #13]
 8001be4:	7b7b      	ldrb	r3, [r7, #13]
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d9f4      	bls.n	8001bd4 <SPI_Receive_Manager+0x38>
  }

  __HAL_DMA_ENABLE_IT(SpiHandle.hdmarx, DMA_IT_TC);  /**< Enable Receive packet notification */
 8001bea:	4b4a      	ldr	r3, [pc, #296]	; (8001d14 <SPI_Receive_Manager+0x178>)
 8001bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	4b48      	ldr	r3, [pc, #288]	; (8001d14 <SPI_Receive_Manager+0x178>)
 8001bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f042 0202 	orr.w	r2, r2, #2
 8001bfc:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(SpiHandle.hdmatx, DMA_IT_TC); /**< Disable Transmit packet notification */
 8001bfe:	4b45      	ldr	r3, [pc, #276]	; (8001d14 <SPI_Receive_Manager+0x178>)
 8001c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	4b43      	ldr	r3, [pc, #268]	; (8001d14 <SPI_Receive_Manager+0x178>)
 8001c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 0202 	bic.w	r2, r2, #2
 8001c10:	601a      	str	r2, [r3, #0]

  switch (ReceiveRequest)
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d010      	beq.n	8001c3a <SPI_Receive_Manager+0x9e>
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	dc61      	bgt.n	8001ce0 <SPI_Receive_Manager+0x144>
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d002      	beq.n	8001c26 <SPI_Receive_Manager+0x8a>
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d005      	beq.n	8001c30 <SPI_Receive_Manager+0x94>
      LL_DMA_SetMemoryAddress(BNRG_SPI_RX_DMA_ID, BNRG_SPI_RX_DMA_CHANNEL, (uint32_t)SpiContext.SpiReceiveContext.pBuffer);
      LL_DMA_SetMemoryAddress(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, (uint32_t)&DummyBytes);
      break;

    default:
      break;
 8001c24:	e05c      	b.n	8001ce0 <SPI_Receive_Manager+0x144>
      ReceiveHeader(SPI_CHECK_RECEIVED_HEADER_FOR_RX, (uint8_t *)ReadHeaderCmd);
 8001c26:	493d      	ldr	r1, [pc, #244]	; (8001d1c <SPI_Receive_Manager+0x180>)
 8001c28:	2000      	movs	r0, #0
 8001c2a:	f000 f883 	bl	8001d34 <ReceiveHeader>
      break;
 8001c2e:	e058      	b.n	8001ce2 <SPI_Receive_Manager+0x146>
      ReceiveHeader(SPI_CHECK_RECEIVED_HEADER_FOR_TX, (uint8_t *)WriteHeaderCmd);
 8001c30:	493b      	ldr	r1, [pc, #236]	; (8001d20 <SPI_Receive_Manager+0x184>)
 8001c32:	2001      	movs	r0, #1
 8001c34:	f000 f87e 	bl	8001d34 <ReceiveHeader>
      break;
 8001c38:	e053      	b.n	8001ce2 <SPI_Receive_Manager+0x146>
      if (SpiContext.SpiReceiveContext.PacketCont == TRUE)
 8001c3a:	4b3a      	ldr	r3, [pc, #232]	; (8001d24 <SPI_Receive_Manager+0x188>)
 8001c3c:	7c1b      	ldrb	r3, [r3, #16]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d103      	bne.n	8001c4a <SPI_Receive_Manager+0xae>
        byte_count = SpiContext.SpiReceiveContext.PayloadSizeLeftToReceive;
 8001c42:	4b38      	ldr	r3, [pc, #224]	; (8001d24 <SPI_Receive_Manager+0x188>)
 8001c44:	89db      	ldrh	r3, [r3, #14]
 8001c46:	81fb      	strh	r3, [r7, #14]
 8001c48:	e00c      	b.n	8001c64 <SPI_Receive_Manager+0xc8>
        byte_count = (ReceivedHeader[4]<<8)|ReceivedHeader[3];
 8001c4a:	4b37      	ldr	r3, [pc, #220]	; (8001d28 <SPI_Receive_Manager+0x18c>)
 8001c4c:	791b      	ldrb	r3, [r3, #4]
 8001c4e:	021b      	lsls	r3, r3, #8
 8001c50:	b21a      	sxth	r2, r3
 8001c52:	4b35      	ldr	r3, [pc, #212]	; (8001d28 <SPI_Receive_Manager+0x18c>)
 8001c54:	78db      	ldrb	r3, [r3, #3]
 8001c56:	b21b      	sxth	r3, r3
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	b21b      	sxth	r3, r3
 8001c5c:	81fb      	strh	r3, [r7, #14]
        SpiContext.SpiReceiveContext.PayloadSizeLeftToReceive = byte_count;
 8001c5e:	4a31      	ldr	r2, [pc, #196]	; (8001d24 <SPI_Receive_Manager+0x188>)
 8001c60:	89fb      	ldrh	r3, [r7, #14]
 8001c62:	81d3      	strh	r3, [r2, #14]
      if (byte_count > SpiContext.SpiReceiveContext.BufferSize)
 8001c64:	4b2f      	ldr	r3, [pc, #188]	; (8001d24 <SPI_Receive_Manager+0x188>)
 8001c66:	899b      	ldrh	r3, [r3, #12]
 8001c68:	89fa      	ldrh	r2, [r7, #14]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d910      	bls.n	8001c90 <SPI_Receive_Manager+0xf4>
        byte_count = SpiContext.SpiReceiveContext.BufferSize;
 8001c6e:	4b2d      	ldr	r3, [pc, #180]	; (8001d24 <SPI_Receive_Manager+0x188>)
 8001c70:	899b      	ldrh	r3, [r3, #12]
 8001c72:	81fb      	strh	r3, [r7, #14]
        SpiContext.SpiReceiveContext.PayloadSizeLeftToReceive -= byte_count;
 8001c74:	4b2b      	ldr	r3, [pc, #172]	; (8001d24 <SPI_Receive_Manager+0x188>)
 8001c76:	89da      	ldrh	r2, [r3, #14]
 8001c78:	89fb      	ldrh	r3, [r7, #14]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	4b29      	ldr	r3, [pc, #164]	; (8001d24 <SPI_Receive_Manager+0x188>)
 8001c80:	81da      	strh	r2, [r3, #14]
        SpiContext.SpiReceiveContext.SpiReceiveEvent = SPI_RECEIVE_PAYLOAD_CONT;
 8001c82:	4b28      	ldr	r3, [pc, #160]	; (8001d24 <SPI_Receive_Manager+0x188>)
 8001c84:	2202      	movs	r2, #2
 8001c86:	711a      	strb	r2, [r3, #4]
        SpiContext.SpiReceiveContext.PacketCont = TRUE;
 8001c88:	4b26      	ldr	r3, [pc, #152]	; (8001d24 <SPI_Receive_Manager+0x188>)
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	741a      	strb	r2, [r3, #16]
 8001c8e:	e005      	b.n	8001c9c <SPI_Receive_Manager+0x100>
        SpiContext.SpiReceiveContext.SpiReceiveEvent = SPI_RECEIVE_END;
 8001c90:	4b24      	ldr	r3, [pc, #144]	; (8001d24 <SPI_Receive_Manager+0x188>)
 8001c92:	2203      	movs	r2, #3
 8001c94:	711a      	strb	r2, [r3, #4]
        SpiContext.SpiReceiveContext.PacketCont = FALSE;
 8001c96:	4b23      	ldr	r3, [pc, #140]	; (8001d24 <SPI_Receive_Manager+0x188>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	741a      	strb	r2, [r3, #16]
      SpiContext.SpiReceiveContext.PayloadLength = byte_count;
 8001c9c:	4a21      	ldr	r2, [pc, #132]	; (8001d24 <SPI_Receive_Manager+0x188>)
 8001c9e:	89fb      	ldrh	r3, [r7, #14]
 8001ca0:	80d3      	strh	r3, [r2, #6]
      LL_DMA_SetMemoryIncMode(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, LL_DMA_MEMORY_NOINCREMENT); /**< Configure DMA to send same Byte */
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	4821      	ldr	r0, [pc, #132]	; (8001d2c <SPI_Receive_Manager+0x190>)
 8001ca8:	f7ff fbbe 	bl	8001428 <LL_DMA_SetMemoryIncMode>
      LL_DMA_SetDataLength(BNRG_SPI_RX_DMA_ID, BNRG_SPI_RX_DMA_CHANNEL, byte_count);
 8001cac:	89fb      	ldrh	r3, [r7, #14]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	481e      	ldr	r0, [pc, #120]	; (8001d2c <SPI_Receive_Manager+0x190>)
 8001cb4:	f7ff fbde 	bl	8001474 <LL_DMA_SetDataLength>
      LL_DMA_SetDataLength(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, byte_count);
 8001cb8:	89fb      	ldrh	r3, [r7, #14]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	481b      	ldr	r0, [pc, #108]	; (8001d2c <SPI_Receive_Manager+0x190>)
 8001cc0:	f7ff fbd8 	bl	8001474 <LL_DMA_SetDataLength>
      LL_DMA_SetMemoryAddress(BNRG_SPI_RX_DMA_ID, BNRG_SPI_RX_DMA_CHANNEL, (uint32_t)SpiContext.SpiReceiveContext.pBuffer);
 8001cc4:	4b17      	ldr	r3, [pc, #92]	; (8001d24 <SPI_Receive_Manager+0x188>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	2100      	movs	r1, #0
 8001ccc:	4817      	ldr	r0, [pc, #92]	; (8001d2c <SPI_Receive_Manager+0x190>)
 8001cce:	f7ff fbf7 	bl	80014c0 <LL_DMA_SetMemoryAddress>
      LL_DMA_SetMemoryAddress(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, (uint32_t)&DummyBytes);
 8001cd2:	4b17      	ldr	r3, [pc, #92]	; (8001d30 <SPI_Receive_Manager+0x194>)
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	4814      	ldr	r0, [pc, #80]	; (8001d2c <SPI_Receive_Manager+0x190>)
 8001cda:	f7ff fbf1 	bl	80014c0 <LL_DMA_SetMemoryAddress>
      break;
 8001cde:	e000      	b.n	8001ce2 <SPI_Receive_Manager+0x146>
      break;
 8001ce0:	bf00      	nop
  }

  /*
   *  Enable both DMA - Rx First
   */
  __HAL_DMA_ENABLE(SpiHandle.hdmarx);
 8001ce2:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <SPI_Receive_Manager+0x178>)
 8001ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <SPI_Receive_Manager+0x178>)
 8001cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f042 0201 	orr.w	r2, r2, #1
 8001cf4:	601a      	str	r2, [r3, #0]
  __HAL_DMA_ENABLE(SpiHandle.hdmatx);
 8001cf6:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <SPI_Receive_Manager+0x178>)
 8001cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <SPI_Receive_Manager+0x178>)
 8001d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f042 0201 	orr.w	r2, r2, #1
 8001d08:	601a      	str	r2, [r3, #0]

  return;
 8001d0a:	bf00      	nop
}
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	2000007c 	.word	0x2000007c
 8001d18:	40003c00 	.word	0x40003c00
 8001d1c:	080062d0 	.word	0x080062d0
 8001d20:	080062c8 	.word	0x080062c8
 8001d24:	20000048 	.word	0x20000048
 8001d28:	20000070 	.word	0x20000070
 8001d2c:	40020400 	.word	0x40020400
 8001d30:	080062d5 	.word	0x080062d5

08001d34 <ReceiveHeader>:
 *               the configuration information for SPI module.
 * @param  DataHeader: buffer holding the header to receive
 * @retval None
 */
static void ReceiveHeader(SPI_RECEIVE_EVENT_t ReceiveEvent, uint8_t * DataHeader)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	6039      	str	r1, [r7, #0]
 8001d3e:	71fb      	strb	r3, [r7, #7]
  SpiContext.SpiReceiveContext.SpiReceiveEvent = ReceiveEvent;
 8001d40:	4a10      	ldr	r2, [pc, #64]	; (8001d84 <ReceiveHeader+0x50>)
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	7113      	strb	r3, [r2, #4]

  LL_DMA_SetMemoryIncMode(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, LL_DMA_MEMORY_INCREMENT);  /**< Configure DMA to send Tx packet */
 8001d46:	2280      	movs	r2, #128	; 0x80
 8001d48:	2101      	movs	r1, #1
 8001d4a:	480f      	ldr	r0, [pc, #60]	; (8001d88 <ReceiveHeader+0x54>)
 8001d4c:	f7ff fb6c 	bl	8001428 <LL_DMA_SetMemoryIncMode>

  /*
   *  Set counter in both DMA
   */
  LL_DMA_SetDataLength(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, HEADER_SIZE);
 8001d50:	2205      	movs	r2, #5
 8001d52:	2101      	movs	r1, #1
 8001d54:	480c      	ldr	r0, [pc, #48]	; (8001d88 <ReceiveHeader+0x54>)
 8001d56:	f7ff fb8d 	bl	8001474 <LL_DMA_SetDataLength>
  LL_DMA_SetDataLength(BNRG_SPI_RX_DMA_ID, BNRG_SPI_RX_DMA_CHANNEL, HEADER_SIZE);
 8001d5a:	2205      	movs	r2, #5
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	480a      	ldr	r0, [pc, #40]	; (8001d88 <ReceiveHeader+0x54>)
 8001d60:	f7ff fb88 	bl	8001474 <LL_DMA_SetDataLength>

  /*
   *  Set memory address in both DMA
   */
  LL_DMA_SetMemoryAddress(BNRG_SPI_RX_DMA_ID, BNRG_SPI_RX_DMA_CHANNEL, (uint32_t)ReceivedHeader);
 8001d64:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <ReceiveHeader+0x58>)
 8001d66:	461a      	mov	r2, r3
 8001d68:	2100      	movs	r1, #0
 8001d6a:	4807      	ldr	r0, [pc, #28]	; (8001d88 <ReceiveHeader+0x54>)
 8001d6c:	f7ff fba8 	bl	80014c0 <LL_DMA_SetMemoryAddress>
  LL_DMA_SetMemoryAddress(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, (uint32_t)DataHeader);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	461a      	mov	r2, r3
 8001d74:	2101      	movs	r1, #1
 8001d76:	4804      	ldr	r0, [pc, #16]	; (8001d88 <ReceiveHeader+0x54>)
 8001d78:	f7ff fba2 	bl	80014c0 <LL_DMA_SetMemoryAddress>

  return;
 8001d7c:	bf00      	nop
}
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20000048 	.word	0x20000048
 8001d88:	40020400 	.word	0x40020400
 8001d8c:	20000070 	.word	0x20000070

08001d90 <HW_BNRG_Init>:
  return;
}


void HW_BNRG_Init(HW_BNRG_InitMode_t InitMode)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
  SPI_Init(&SpiHandle);
 8001d9a:	481f      	ldr	r0, [pc, #124]	; (8001e18 <HW_BNRG_Init+0x88>)
 8001d9c:	f7ff fd6e 	bl	800187c <SPI_Init>

  LL_SPI_EnableDMAReq_TX(BNRG_SPI_INSTANCE);
 8001da0:	481e      	ldr	r0, [pc, #120]	; (8001e1c <HW_BNRG_Init+0x8c>)
 8001da2:	f7ff fb25 	bl	80013f0 <LL_SPI_EnableDMAReq_TX>
  LL_SPI_EnableDMAReq_RX(BNRG_SPI_INSTANCE);
 8001da6:	481d      	ldr	r0, [pc, #116]	; (8001e1c <HW_BNRG_Init+0x8c>)
 8001da8:	f7ff fb12 	bl	80013d0 <LL_SPI_EnableDMAReq_RX>

  __HAL_SPI_ENABLE(&SpiHandle);
 8001dac:	4b1a      	ldr	r3, [pc, #104]	; (8001e18 <HW_BNRG_Init+0x88>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	4b19      	ldr	r3, [pc, #100]	; (8001e18 <HW_BNRG_Init+0x88>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dba:	601a      	str	r2, [r3, #0]

  SpiContext.SpiReceiveContext.PacketCont = FALSE;
 8001dbc:	4b18      	ldr	r3, [pc, #96]	; (8001e20 <HW_BNRG_Init+0x90>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	741a      	strb	r2, [r3, #16]
  SpiContext.SpiTransmitContext.RequestPending = FALSE;
 8001dc2:	4b17      	ldr	r3, [pc, #92]	; (8001e20 <HW_BNRG_Init+0x90>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	775a      	strb	r2, [r3, #29]
  SpiContext.SpiPeripheralState = SPI_AVAILABLE;
 8001dc8:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <HW_BNRG_Init+0x90>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	701a      	strb	r2, [r3, #0]
  SpiContext.SpiReceiveContext.BufferStatus = NO_BUFFER;
 8001dce:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <HW_BNRG_Init+0x90>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	745a      	strb	r2, [r3, #17]

  if(InitMode != HW_BNRG_Limited)
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00b      	beq.n	8001df2 <HW_BNRG_Init+0x62>
  {
    LL_PWR_SetWakeUpPinPolarityHigh(BNRG_SPI_IRQ_WAKEUP_PIN);
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f7ff fabe 	bl	800135c <LL_PWR_SetWakeUpPinPolarityHigh>

    HW_TS_Create(CFG_TimProcID_isr, &TxRxTimerId, hw_ts_SingleShot, TimerTxRxCallback);
 8001de0:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <HW_BNRG_Init+0x94>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	4910      	ldr	r1, [pc, #64]	; (8001e28 <HW_BNRG_Init+0x98>)
 8001de6:	2000      	movs	r0, #0
 8001de8:	f000 ff0c 	bl	8002c04 <HW_TS_Create>

    /**
     *  Reset BlueNRG hardware
     */
    ResetBlueNRG();
 8001dec:	f7ff fd7a 	bl	80018e4 <ResetBlueNRG>
    LL_PWR_DisableGPIOPullDown(BNRG_SPI_MOSI_STDBY_PORT, BNRG_SPI_MOSI_STDBY_PIN);
    LL_PWR_DisableGPIOPullUp(BNRG_SPI_CS_STDBY_PIN, BNRG_SPI_CS_STDBY_PORT);
    LL_PWR_DisableGPIOPullUp(BNRG_SPI_RESET_STDBY_PIN, BNRG_SPI_RESET_STDBY_PORT);
  }

  return;
 8001df0:	e00f      	b.n	8001e12 <HW_BNRG_Init+0x82>
    LL_PWR_DisableGPIOPullDown(BNRG_SPI_MOSI_STDBY_PORT, BNRG_SPI_MOSI_STDBY_PIN);
 8001df2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001df6:	480d      	ldr	r0, [pc, #52]	; (8001e2c <HW_BNRG_Init+0x9c>)
 8001df8:	f7ff fad6 	bl	80013a8 <LL_PWR_DisableGPIOPullDown>
    LL_PWR_DisableGPIOPullUp(BNRG_SPI_CS_STDBY_PIN, BNRG_SPI_CS_STDBY_PORT);
 8001dfc:	490c      	ldr	r1, [pc, #48]	; (8001e30 <HW_BNRG_Init+0xa0>)
 8001dfe:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e02:	f7ff fabf 	bl	8001384 <LL_PWR_DisableGPIOPullUp>
    LL_PWR_DisableGPIOPullUp(BNRG_SPI_RESET_STDBY_PIN, BNRG_SPI_RESET_STDBY_PORT);
 8001e06:	490b      	ldr	r1, [pc, #44]	; (8001e34 <HW_BNRG_Init+0xa4>)
 8001e08:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001e0c:	f7ff faba 	bl	8001384 <LL_PWR_DisableGPIOPullUp>
  return;
 8001e10:	bf00      	nop
}
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	2000007c 	.word	0x2000007c
 8001e1c:	40003c00 	.word	0x40003c00
 8001e20:	20000048 	.word	0x20000048
 8001e24:	08001541 	.word	0x08001541
 8001e28:	20000046 	.word	0x20000046
 8001e2c:	40007030 	.word	0x40007030
 8001e30:	40007038 	.word	0x40007038
 8001e34:	40007020 	.word	0x40007020

08001e38 <HW_BNRG_Send>:


void HW_BNRG_Send(uint8_t* payload_data, uint16_t payload_size)
{  
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	460b      	mov	r3, r1
 8001e42:	807b      	strh	r3, [r7, #2]
  SpiContext.SpiTransmitContext.pPayloadData = payload_data;
 8001e44:	4a0f      	ldr	r2, [pc, #60]	; (8001e84 <HW_BNRG_Send+0x4c>)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6153      	str	r3, [r2, #20]
  SpiContext.SpiTransmitContext.PayloadSizeLeftToTransmit = payload_size;
 8001e4a:	4a0e      	ldr	r2, [pc, #56]	; (8001e84 <HW_BNRG_Send+0x4c>)
 8001e4c:	887b      	ldrh	r3, [r7, #2]
 8001e4e:	8313      	strh	r3, [r2, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e50:	b672      	cpsid	i
}
 8001e52:	bf00      	nop

  __disable_irq();
  if(SpiContext.SpiPeripheralState == SPI_AVAILABLE)
 8001e54:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <HW_BNRG_Send+0x4c>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d109      	bne.n	8001e70 <HW_BNRG_Send+0x38>
  {
    SpiContext.SpiPeripheralState = SPI_BUSY;
 8001e5c:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <HW_BNRG_Send+0x4c>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	701a      	strb	r2, [r3, #0]
    Disable_SPI_Receiving_Path();
 8001e62:	f7ff fdb1 	bl	80019c8 <Disable_SPI_Receiving_Path>
  __ASM volatile ("cpsie i" : : : "memory");
 8001e66:	b662      	cpsie	i
}
 8001e68:	bf00      	nop
    __enable_irq();
    WakeupBlueNRG();
 8001e6a:	f7ff fdef 	bl	8001a4c <WakeupBlueNRG>
  {
    SpiContext.SpiTransmitContext.RequestPending = TRUE;
    __enable_irq();
  }

  return;
 8001e6e:	e005      	b.n	8001e7c <HW_BNRG_Send+0x44>
    SpiContext.SpiTransmitContext.RequestPending = TRUE;
 8001e70:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <HW_BNRG_Send+0x4c>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	775a      	strb	r2, [r3, #29]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e76:	b662      	cpsie	i
}
 8001e78:	bf00      	nop
  return;
 8001e7a:	bf00      	nop
}
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000048 	.word	0x20000048

08001e88 <HW_BNRG_EvtReq>:


void HW_BNRG_EvtReq(uint8_t *buffer, uint16_t buff_size)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	807b      	strh	r3, [r7, #2]
  SpiContext.SpiReceiveContext.pBuffer = buffer;
 8001e94:	4a0b      	ldr	r2, [pc, #44]	; (8001ec4 <HW_BNRG_EvtReq+0x3c>)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6093      	str	r3, [r2, #8]
  SpiContext.SpiReceiveContext.BufferSize = buff_size;
 8001e9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <HW_BNRG_EvtReq+0x3c>)
 8001e9c:	887b      	ldrh	r3, [r7, #2]
 8001e9e:	8193      	strh	r3, [r2, #12]
  SpiContext.SpiReceiveContext.BufferStatus = BUFFER_AVAILABLE;
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <HW_BNRG_EvtReq+0x3c>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	745a      	strb	r2, [r3, #17]

  if( SpiContext.SpiReceiveContext.PacketCont == TRUE )
 8001ea6:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <HW_BNRG_EvtReq+0x3c>)
 8001ea8:	7c1b      	ldrb	r3, [r3, #16]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d103      	bne.n	8001eb6 <HW_BNRG_EvtReq+0x2e>
  {
    SPI_Receive_Manager(SPI_REQUEST_PAYLOAD);
 8001eae:	2002      	movs	r0, #2
 8001eb0:	f7ff fe74 	bl	8001b9c <SPI_Receive_Manager>
  else
  {
    Enable_SPI_Receiving_Path();
  }

  return;
 8001eb4:	e002      	b.n	8001ebc <HW_BNRG_EvtReq+0x34>
    Enable_SPI_Receiving_Path();
 8001eb6:	f7ff fd69 	bl	800198c <Enable_SPI_Receiving_Path>
  return;
 8001eba:	bf00      	nop
}
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000048 	.word	0x20000048

08001ec8 <HW_BNRG_SpiIrqCb>:


void HW_BNRG_SpiIrqCb(void)
{  
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001ecc:	b672      	cpsid	i
}
 8001ece:	bf00      	nop
  __disable_irq();
  if(SpiContext.SpiPeripheralState == SPI_AVAILABLE)
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HW_BNRG_SpiIrqCb+0x38>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d10e      	bne.n	8001ef6 <HW_BNRG_SpiIrqCb+0x2e>
  {
    SpiContext.SpiPeripheralState = SPI_BUSY;
 8001ed8:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <HW_BNRG_SpiIrqCb+0x38>)
 8001eda:	2201      	movs	r2, #1
 8001edc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ede:	b662      	cpsie	i
}
 8001ee0:	bf00      	nop
    __enable_irq();
    Enable_SPI_CS();
 8001ee2:	f7ff fd79 	bl	80019d8 <Enable_SPI_CS>
    SPI_Receive_Manager(SPI_REQUEST_VALID_HEADER_FOR_RX);
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f7ff fe58 	bl	8001b9c <SPI_Receive_Manager>
    LPM_SetStopMode(LPM_SPI_RX_Id, LPM_StopMode_En);
 8001eec:	2101      	movs	r1, #1
 8001eee:	2001      	movs	r0, #1
 8001ef0:	f001 fd32 	bl	8003958 <LPM_SetStopMode>
  }
  else
  {
    __enable_irq();
  }
}
 8001ef4:	e001      	b.n	8001efa <HW_BNRG_SpiIrqCb+0x32>
  __ASM volatile ("cpsie i" : : : "memory");
 8001ef6:	b662      	cpsie	i
}
 8001ef8:	bf00      	nop
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000048 	.word	0x20000048

08001f04 <HW_BNRG_DMATxCb>:


void HW_BNRG_DMATxCb(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  if(__HAL_DMA_GET_IT_SOURCE(SpiHandle.hdmatx, DMA_IT_TC)  && __HAL_DMA_GET_FLAG(SpiHandle.hdmatx, BNRG_SPI_TX_DMA_TC_FLAG))
 8001f08:	4b23      	ldr	r3, [pc, #140]	; (8001f98 <HW_BNRG_DMATxCb+0x94>)
 8001f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d03d      	beq.n	8001f94 <HW_BNRG_DMATxCb+0x90>
 8001f18:	4b1f      	ldr	r3, [pc, #124]	; (8001f98 <HW_BNRG_DMATxCb+0x94>)
 8001f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	4b1e      	ldr	r3, [pc, #120]	; (8001f9c <HW_BNRG_DMATxCb+0x98>)
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d909      	bls.n	8001f3a <HW_BNRG_DMATxCb+0x36>
 8001f26:	4b1e      	ldr	r3, [pc, #120]	; (8001fa0 <HW_BNRG_DMATxCb+0x9c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0320 	and.w	r3, r3, #32
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	bf14      	ite	ne
 8001f32:	2301      	movne	r3, #1
 8001f34:	2300      	moveq	r3, #0
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	e008      	b.n	8001f4c <HW_BNRG_DMATxCb+0x48>
 8001f3a:	4b1a      	ldr	r3, [pc, #104]	; (8001fa4 <HW_BNRG_DMATxCb+0xa0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0320 	and.w	r3, r3, #32
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	bf14      	ite	ne
 8001f46:	2301      	movne	r3, #1
 8001f48:	2300      	moveq	r3, #0
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d021      	beq.n	8001f94 <HW_BNRG_DMATxCb+0x90>
  {
    __HAL_DMA_CLEAR_FLAG(SpiHandle.hdmatx, BNRG_SPI_TX_DMA_TC_FLAG);
 8001f50:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <HW_BNRG_DMATxCb+0x94>)
 8001f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	461a      	mov	r2, r3
 8001f58:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <HW_BNRG_DMATxCb+0x98>)
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d903      	bls.n	8001f66 <HW_BNRG_DMATxCb+0x62>
 8001f5e:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <HW_BNRG_DMATxCb+0x9c>)
 8001f60:	2220      	movs	r2, #32
 8001f62:	605a      	str	r2, [r3, #4]
 8001f64:	e002      	b.n	8001f6c <HW_BNRG_DMATxCb+0x68>
 8001f66:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <HW_BNRG_DMATxCb+0xa0>)
 8001f68:	2220      	movs	r2, #32
 8001f6a:	605a      	str	r2, [r3, #4]

    if(SpiContext.SpiTransmitContext.PacketCont == TRUE)
 8001f6c:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <HW_BNRG_DMATxCb+0xa4>)
 8001f6e:	7f1b      	ldrb	r3, [r3, #28]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d10c      	bne.n	8001f8e <HW_BNRG_DMATxCb+0x8a>
    {
      SpiContext.SpiTransmitContext.pPayloadData += SpiContext.SpiTransmitContext.PayloadSizeToTransmit;
 8001f74:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <HW_BNRG_DMATxCb+0xa4>)
 8001f76:	695b      	ldr	r3, [r3, #20]
 8001f78:	4a0b      	ldr	r2, [pc, #44]	; (8001fa8 <HW_BNRG_DMATxCb+0xa4>)
 8001f7a:	8b52      	ldrh	r2, [r2, #26]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	4a0a      	ldr	r2, [pc, #40]	; (8001fa8 <HW_BNRG_DMATxCb+0xa4>)
 8001f80:	6153      	str	r3, [r2, #20]
      DisableEnable_SPI_CS();
 8001f82:	f7ff fd4b 	bl	8001a1c <DisableEnable_SPI_CS>
      SPI_Receive_Manager(SPI_REQUEST_VALID_HEADER_FOR_TX);
 8001f86:	2001      	movs	r0, #1
 8001f88:	f7ff fe08 	bl	8001b9c <SPI_Receive_Manager>
    {
      TransmitClosure();
    }
  }

  return;
 8001f8c:	e002      	b.n	8001f94 <HW_BNRG_DMATxCb+0x90>
      TransmitClosure();
 8001f8e:	f7ff fd75 	bl	8001a7c <TransmitClosure>
  return;
 8001f92:	bf00      	nop
 8001f94:	bf00      	nop
}
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	2000007c 	.word	0x2000007c
 8001f9c:	40020080 	.word	0x40020080
 8001fa0:	40020400 	.word	0x40020400
 8001fa4:	40020000 	.word	0x40020000
 8001fa8:	20000048 	.word	0x20000048

08001fac <HW_BNRG_DMARxCb>:


void HW_BNRG_DMARxCb(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
  uint16_t byte_count;
  uint8_t ready_state;

  if(__HAL_DMA_GET_IT_SOURCE(SpiHandle.hdmarx, DMA_IT_TC)  && __HAL_DMA_GET_FLAG(SpiHandle.hdmarx, BNRG_SPI_RX_DMA_TC_FLAG))
 8001fb2:	4b6a      	ldr	r3, [pc, #424]	; (800215c <HW_BNRG_DMARxCb+0x1b0>)
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 80c4 	beq.w	800214c <HW_BNRG_DMARxCb+0x1a0>
 8001fc4:	4b65      	ldr	r3, [pc, #404]	; (800215c <HW_BNRG_DMARxCb+0x1b0>)
 8001fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	4b64      	ldr	r3, [pc, #400]	; (8002160 <HW_BNRG_DMARxCb+0x1b4>)
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d909      	bls.n	8001fe6 <HW_BNRG_DMARxCb+0x3a>
 8001fd2:	4b64      	ldr	r3, [pc, #400]	; (8002164 <HW_BNRG_DMARxCb+0x1b8>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	bf14      	ite	ne
 8001fde:	2301      	movne	r3, #1
 8001fe0:	2300      	moveq	r3, #0
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	e008      	b.n	8001ff8 <HW_BNRG_DMARxCb+0x4c>
 8001fe6:	4b60      	ldr	r3, [pc, #384]	; (8002168 <HW_BNRG_DMARxCb+0x1bc>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	bf14      	ite	ne
 8001ff2:	2301      	movne	r3, #1
 8001ff4:	2300      	moveq	r3, #0
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 80a7 	beq.w	800214c <HW_BNRG_DMARxCb+0x1a0>
  {
    __HAL_DMA_CLEAR_FLAG(SpiHandle.hdmarx, BNRG_SPI_RX_DMA_TC_FLAG);
 8001ffe:	4b57      	ldr	r3, [pc, #348]	; (800215c <HW_BNRG_DMARxCb+0x1b0>)
 8002000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	461a      	mov	r2, r3
 8002006:	4b56      	ldr	r3, [pc, #344]	; (8002160 <HW_BNRG_DMARxCb+0x1b4>)
 8002008:	429a      	cmp	r2, r3
 800200a:	d903      	bls.n	8002014 <HW_BNRG_DMARxCb+0x68>
 800200c:	4b55      	ldr	r3, [pc, #340]	; (8002164 <HW_BNRG_DMARxCb+0x1b8>)
 800200e:	2202      	movs	r2, #2
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	e002      	b.n	800201a <HW_BNRG_DMARxCb+0x6e>
 8002014:	4b54      	ldr	r3, [pc, #336]	; (8002168 <HW_BNRG_DMARxCb+0x1bc>)
 8002016:	2202      	movs	r2, #2
 8002018:	605a      	str	r2, [r3, #4]
     * handler of the DMA_Tx.
     * The TCIF clearing is mandatory on STM32F4 but not on STM32L0.
     * In order to keep code identical across platform, the TCIF clearing may be kept as well on
     * the STM32L0 and all other MCUs.
     */
    __HAL_DMA_CLEAR_FLAG(SpiHandle.hdmatx, BNRG_SPI_TX_DMA_TC_FLAG);
 800201a:	4b50      	ldr	r3, [pc, #320]	; (800215c <HW_BNRG_DMARxCb+0x1b0>)
 800201c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	461a      	mov	r2, r3
 8002022:	4b4f      	ldr	r3, [pc, #316]	; (8002160 <HW_BNRG_DMARxCb+0x1b4>)
 8002024:	429a      	cmp	r2, r3
 8002026:	d903      	bls.n	8002030 <HW_BNRG_DMARxCb+0x84>
 8002028:	4b4e      	ldr	r3, [pc, #312]	; (8002164 <HW_BNRG_DMARxCb+0x1b8>)
 800202a:	2220      	movs	r2, #32
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	e002      	b.n	8002036 <HW_BNRG_DMARxCb+0x8a>
 8002030:	4b4d      	ldr	r3, [pc, #308]	; (8002168 <HW_BNRG_DMARxCb+0x1bc>)
 8002032:	2220      	movs	r2, #32
 8002034:	605a      	str	r2, [r3, #4]
    switch (SpiContext.SpiReceiveContext.SpiReceiveEvent)
 8002036:	4b4d      	ldr	r3, [pc, #308]	; (800216c <HW_BNRG_DMARxCb+0x1c0>)
 8002038:	791b      	ldrb	r3, [r3, #4]
 800203a:	2b03      	cmp	r3, #3
 800203c:	f200 8088 	bhi.w	8002150 <HW_BNRG_DMARxCb+0x1a4>
 8002040:	a201      	add	r2, pc, #4	; (adr r2, 8002048 <HW_BNRG_DMARxCb+0x9c>)
 8002042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002046:	bf00      	nop
 8002048:	08002059 	.word	0x08002059
 800204c:	080020df 	.word	0x080020df
 8002050:	080020b5 	.word	0x080020b5
 8002054:	080020c1 	.word	0x080020c1
    {
      case SPI_CHECK_RECEIVED_HEADER_FOR_RX:
        byte_count = (ReceivedHeader[4]<<8)|ReceivedHeader[3];
 8002058:	4b45      	ldr	r3, [pc, #276]	; (8002170 <HW_BNRG_DMARxCb+0x1c4>)
 800205a:	791b      	ldrb	r3, [r3, #4]
 800205c:	021b      	lsls	r3, r3, #8
 800205e:	b21a      	sxth	r2, r3
 8002060:	4b43      	ldr	r3, [pc, #268]	; (8002170 <HW_BNRG_DMARxCb+0x1c4>)
 8002062:	78db      	ldrb	r3, [r3, #3]
 8002064:	b21b      	sxth	r3, r3
 8002066:	4313      	orrs	r3, r2
 8002068:	b21b      	sxth	r3, r3
 800206a:	80fb      	strh	r3, [r7, #6]
        ready_state = ReceivedHeader[0];
 800206c:	4b40      	ldr	r3, [pc, #256]	; (8002170 <HW_BNRG_DMARxCb+0x1c4>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	717b      	strb	r3, [r7, #5]

        if ((byte_count == 0) || (ready_state != BLUENRG_READY_STATE))
 8002072:	88fb      	ldrh	r3, [r7, #6]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d002      	beq.n	800207e <HW_BNRG_DMARxCb+0xd2>
 8002078:	797b      	ldrb	r3, [r7, #5]
 800207a:	2b02      	cmp	r3, #2
 800207c:	d015      	beq.n	80020aa <HW_BNRG_DMARxCb+0xfe>
        {
          if (HAL_GPIO_ReadPin(BNRG_SPI_IRQ_PORT, BNRG_SPI_IRQ_PIN) == GPIO_PIN_RESET)
 800207e:	2140      	movs	r1, #64	; 0x40
 8002080:	483c      	ldr	r0, [pc, #240]	; (8002174 <HW_BNRG_DMARxCb+0x1c8>)
 8002082:	f003 f893 	bl	80051ac <HAL_GPIO_ReadPin>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d108      	bne.n	800209e <HW_BNRG_DMARxCb+0xf2>
             * the specification.
             * This checking will poping BluenRG for a dummy even
             */

            /* Release CS line */
            Disable_SPI_CS();
 800208c:	f7ff fcb0 	bl	80019f0 <Disable_SPI_CS>

            LPM_SetStopMode(LPM_SPI_RX_Id, LPM_StopMode_Dis);
 8002090:	2100      	movs	r1, #0
 8002092:	2001      	movs	r0, #1
 8002094:	f001 fc60 	bl	8003958 <LPM_SetStopMode>

            ReceiveClosure();
 8002098:	f7ff fa5c 	bl	8001554 <ReceiveClosure>
          if (HAL_GPIO_ReadPin(BNRG_SPI_IRQ_PORT, BNRG_SPI_IRQ_PIN) == GPIO_PIN_RESET)
 800209c:	e009      	b.n	80020b2 <HW_BNRG_DMARxCb+0x106>
          }
          else
          {
            DisableEnable_SPI_CS();
 800209e:	f7ff fcbd 	bl	8001a1c <DisableEnable_SPI_CS>
            SPI_Receive_Manager(SPI_REQUEST_VALID_HEADER_FOR_RX); /**< BlueNRG not ready for reading */
 80020a2:	2000      	movs	r0, #0
 80020a4:	f7ff fd7a 	bl	8001b9c <SPI_Receive_Manager>
          if (HAL_GPIO_ReadPin(BNRG_SPI_IRQ_PORT, BNRG_SPI_IRQ_PIN) == GPIO_PIN_RESET)
 80020a8:	e003      	b.n	80020b2 <HW_BNRG_DMARxCb+0x106>
          }
        }
        else
        {
          SPI_Receive_Manager(SPI_REQUEST_PAYLOAD);  /**< BlueNRG is ready for reading */
 80020aa:	2002      	movs	r0, #2
 80020ac:	f7ff fd76 	bl	8001b9c <SPI_Receive_Manager>
        }
        break;
 80020b0:	e04f      	b.n	8002152 <HW_BNRG_DMARxCb+0x1a6>
 80020b2:	e04e      	b.n	8002152 <HW_BNRG_DMARxCb+0x1a6>

      case SPI_RECEIVE_PAYLOAD_CONT:
        HW_BNRG_Isr(SpiContext.SpiReceiveContext.PayloadLength);
 80020b4:	4b2d      	ldr	r3, [pc, #180]	; (800216c <HW_BNRG_DMARxCb+0x1c0>)
 80020b6:	88db      	ldrh	r3, [r3, #6]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f001 fac7 	bl	800364c <HW_BNRG_Isr>
        break;
 80020be:	e048      	b.n	8002152 <HW_BNRG_DMARxCb+0x1a6>

      case SPI_RECEIVE_END:
        /* Release CS line */
        Disable_SPI_CS();
 80020c0:	f7ff fc96 	bl	80019f0 <Disable_SPI_CS>

        LPM_SetStopMode(LPM_SPI_RX_Id, LPM_StopMode_Dis);
 80020c4:	2100      	movs	r1, #0
 80020c6:	2001      	movs	r0, #1
 80020c8:	f001 fc46 	bl	8003958 <LPM_SetStopMode>


#if (SPI_END_RECEIVE_FIX == 1)
        pTimerTxRxCallback = ProcessEndOfReceive;
 80020cc:	4b2a      	ldr	r3, [pc, #168]	; (8002178 <HW_BNRG_DMARxCb+0x1cc>)
 80020ce:	4a2b      	ldr	r2, [pc, #172]	; (800217c <HW_BNRG_DMARxCb+0x1d0>)
 80020d0:	601a      	str	r2, [r3, #0]
        TimeoutTicks = SPI_END_RECEIVE_FIX_TIMEOUT;
 80020d2:	4b2b      	ldr	r3, [pc, #172]	; (8002180 <HW_BNRG_DMARxCb+0x1d4>)
 80020d4:	2202      	movs	r2, #2
 80020d6:	601a      	str	r2, [r3, #0]
        HW_BNRG_TimStartReq();
 80020d8:	f000 f864 	bl	80021a4 <HW_BNRG_TimStartReq>
#else
        ProcessEndOfReceive();
#endif
        break;
 80020dc:	e039      	b.n	8002152 <HW_BNRG_DMARxCb+0x1a6>

      case SPI_CHECK_RECEIVED_HEADER_FOR_TX:
        byte_count = (ReceivedHeader[2]<<8)|ReceivedHeader[1];
 80020de:	4b24      	ldr	r3, [pc, #144]	; (8002170 <HW_BNRG_DMARxCb+0x1c4>)
 80020e0:	789b      	ldrb	r3, [r3, #2]
 80020e2:	021b      	lsls	r3, r3, #8
 80020e4:	b21a      	sxth	r2, r3
 80020e6:	4b22      	ldr	r3, [pc, #136]	; (8002170 <HW_BNRG_DMARxCb+0x1c4>)
 80020e8:	785b      	ldrb	r3, [r3, #1]
 80020ea:	b21b      	sxth	r3, r3
 80020ec:	4313      	orrs	r3, r2
 80020ee:	b21b      	sxth	r3, r3
 80020f0:	80fb      	strh	r3, [r7, #6]
        ready_state = ReceivedHeader[0];
 80020f2:	4b1f      	ldr	r3, [pc, #124]	; (8002170 <HW_BNRG_DMARxCb+0x1c4>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	717b      	strb	r3, [r7, #5]

        if ((byte_count == 0) || (ready_state != BLUENRG_READY_STATE))
 80020f8:	88fb      	ldrh	r3, [r7, #6]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d002      	beq.n	8002104 <HW_BNRG_DMARxCb+0x158>
 80020fe:	797b      	ldrb	r3, [r7, #5]
 8002100:	2b02      	cmp	r3, #2
 8002102:	d005      	beq.n	8002110 <HW_BNRG_DMARxCb+0x164>
        {
          DisableEnable_SPI_CS();
 8002104:	f7ff fc8a 	bl	8001a1c <DisableEnable_SPI_CS>
          SPI_Receive_Manager(SPI_REQUEST_VALID_HEADER_FOR_TX);  /**< BlueNRG not ready for writing */
 8002108:	2001      	movs	r0, #1
 800210a:	f7ff fd47 	bl	8001b9c <SPI_Receive_Manager>
          }

          SPI_Transmit_Manager();
        }

        break;
 800210e:	e020      	b.n	8002152 <HW_BNRG_DMARxCb+0x1a6>
          if( byte_count < SpiContext.SpiTransmitContext.PayloadSizeLeftToTransmit)
 8002110:	4b16      	ldr	r3, [pc, #88]	; (800216c <HW_BNRG_DMARxCb+0x1c0>)
 8002112:	8b1b      	ldrh	r3, [r3, #24]
 8002114:	88fa      	ldrh	r2, [r7, #6]
 8002116:	429a      	cmp	r2, r3
 8002118:	d20e      	bcs.n	8002138 <HW_BNRG_DMARxCb+0x18c>
            SpiContext.SpiTransmitContext.PayloadSizeToTransmit = byte_count;
 800211a:	4a14      	ldr	r2, [pc, #80]	; (800216c <HW_BNRG_DMARxCb+0x1c0>)
 800211c:	88fb      	ldrh	r3, [r7, #6]
 800211e:	8353      	strh	r3, [r2, #26]
            SpiContext.SpiTransmitContext.PayloadSizeLeftToTransmit -= SpiContext.SpiTransmitContext.PayloadSizeToTransmit;
 8002120:	4b12      	ldr	r3, [pc, #72]	; (800216c <HW_BNRG_DMARxCb+0x1c0>)
 8002122:	8b1a      	ldrh	r2, [r3, #24]
 8002124:	4b11      	ldr	r3, [pc, #68]	; (800216c <HW_BNRG_DMARxCb+0x1c0>)
 8002126:	8b5b      	ldrh	r3, [r3, #26]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	b29a      	uxth	r2, r3
 800212c:	4b0f      	ldr	r3, [pc, #60]	; (800216c <HW_BNRG_DMARxCb+0x1c0>)
 800212e:	831a      	strh	r2, [r3, #24]
            SpiContext.SpiTransmitContext.PacketCont = TRUE;
 8002130:	4b0e      	ldr	r3, [pc, #56]	; (800216c <HW_BNRG_DMARxCb+0x1c0>)
 8002132:	2201      	movs	r2, #1
 8002134:	771a      	strb	r2, [r3, #28]
 8002136:	e006      	b.n	8002146 <HW_BNRG_DMARxCb+0x19a>
            SpiContext.SpiTransmitContext.PayloadSizeToTransmit = SpiContext.SpiTransmitContext.PayloadSizeLeftToTransmit;
 8002138:	4b0c      	ldr	r3, [pc, #48]	; (800216c <HW_BNRG_DMARxCb+0x1c0>)
 800213a:	8b1a      	ldrh	r2, [r3, #24]
 800213c:	4b0b      	ldr	r3, [pc, #44]	; (800216c <HW_BNRG_DMARxCb+0x1c0>)
 800213e:	835a      	strh	r2, [r3, #26]
            SpiContext.SpiTransmitContext.PacketCont = FALSE;
 8002140:	4b0a      	ldr	r3, [pc, #40]	; (800216c <HW_BNRG_DMARxCb+0x1c0>)
 8002142:	2200      	movs	r2, #0
 8002144:	771a      	strb	r2, [r3, #28]
          SPI_Transmit_Manager();
 8002146:	f7ff fcc5 	bl	8001ad4 <SPI_Transmit_Manager>
        break;
 800214a:	e002      	b.n	8002152 <HW_BNRG_DMARxCb+0x1a6>

      default:
        break;
    }
  }
 800214c:	bf00      	nop
 800214e:	e000      	b.n	8002152 <HW_BNRG_DMARxCb+0x1a6>
        break;
 8002150:	bf00      	nop

  return;
 8002152:	bf00      	nop
}
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	2000007c 	.word	0x2000007c
 8002160:	40020080 	.word	0x40020080
 8002164:	40020400 	.word	0x40020400
 8002168:	40020000 	.word	0x40020000
 800216c:	20000048 	.word	0x20000048
 8002170:	20000070 	.word	0x20000070
 8002174:	48001000 	.word	0x48001000
 8002178:	20000068 	.word	0x20000068
 800217c:	080015bd 	.word	0x080015bd
 8002180:	20000078 	.word	0x20000078

08002184 <HW_BNRG_TimStartAllowed>:
  return;
}


void HW_BNRG_TimStartAllowed(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  HW_TS_Start(TxRxTimerId, TimeoutTicks);
 8002188:	4b04      	ldr	r3, [pc, #16]	; (800219c <HW_BNRG_TimStartAllowed+0x18>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	4a04      	ldr	r2, [pc, #16]	; (80021a0 <HW_BNRG_TimStartAllowed+0x1c>)
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	4611      	mov	r1, r2
 8002192:	4618      	mov	r0, r3
 8002194:	f000 fe48 	bl	8002e28 <HW_TS_Start>

  return;
 8002198:	bf00      	nop
}
 800219a:	bd80      	pop	{r7, pc}
 800219c:	20000046 	.word	0x20000046
 80021a0:	20000078 	.word	0x20000078

080021a4 <HW_BNRG_TimStartReq>:
   * @retval None
   * @Note   If the specific application need to wait before starting the timer 
   *         this function can be overloaded in the specific application itself 
   */
__weak void HW_BNRG_TimStartReq(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
   * the Timer requested can be started immediately because there is no risk that
   * the timer is already in use.
   * If a specific application needs to handle the timer differently,
   * it is suggested to overload the function without change the COMMON one. 
   */
  HW_BNRG_TimStartAllowed();
 80021a8:	f7ff ffec 	bl	8002184 <HW_BNRG_TimStartAllowed>

  return;
 80021ac:	bf00      	nop
}
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <LL_RTC_GetAsynchPrescaler>:
  * @rmtoll RTC_PRER         PREDIV_A      LL_RTC_GetAsynchPrescaler
  * @param  RTCx RTC Instance
  * @retval Value between Min_Data = 0 and Max_Data = 0x7F
  */
__STATIC_INLINE uint32_t LL_RTC_GetAsynchPrescaler(RTC_TypeDef *RTCx)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->PRER, RTC_PRER_PREDIV_A) >> RTC_PRER_PREDIV_A_Pos);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	0c1b      	lsrs	r3, r3, #16
 80021be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <LL_RTC_GetSynchPrescaler>:
  * @rmtoll RTC_PRER         PREDIV_S      LL_RTC_GetSynchPrescaler
  * @param  RTCx RTC Instance
  * @retval Value between Min_Data = 0 and Max_Data = 0x7FFF
  */
__STATIC_INLINE uint32_t LL_RTC_GetSynchPrescaler(RTC_TypeDef *RTCx)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->PRER, RTC_PRER_PREDIV_S));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	f3c3 030e 	ubfx	r3, r3, #0, #15
}
 80021de:	4618      	mov	r0, r3
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f6:	b29b      	uxth	r3, r3
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <LL_RTC_WAKEUP_IsEnabled>:
  * @rmtoll RTC_CR           WUTE          LL_RTC_WAKEUP_IsEnabled
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_WAKEUP_IsEnabled(RTC_TypeDef *RTCx)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->CR, RTC_CR_WUTE) == (RTC_CR_WUTE));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002218:	bf0c      	ite	eq
 800221a:	2301      	moveq	r3, #1
 800221c:	2300      	movne	r3, #0
 800221e:	b2db      	uxtb	r3, r3
}
 8002220:	4618      	mov	r0, r3
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <LL_RTC_WAKEUP_GetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_DIV_2
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  */
__STATIC_INLINE uint32_t LL_RTC_WAKEUP_GetClock(RTC_TypeDef *RTCx)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_WUCKSEL));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 0307 	and.w	r3, r3, #7
}
 800223c:	4618      	mov	r0, r3
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <LL_RTC_WAKEUP_SetAutoReload>:
  * @param  RTCx RTC Instance
  * @param  Value Value between Min_Data=0x00 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetAutoReload(RTC_TypeDef *RTCx, uint32_t Value)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->WUTR, RTC_WUTR_WUT, Value);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	0c1b      	lsrs	r3, r3, #16
 8002258:	041b      	lsls	r3, r3, #16
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	431a      	orrs	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	615a      	str	r2, [r3, #20]
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
	...

08002270 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002278:	4b05      	ldr	r3, [pc, #20]	; (8002290 <LL_EXTI_EnableIT_0_31+0x20>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4904      	ldr	r1, [pc, #16]	; (8002290 <LL_EXTI_EnableIT_0_31+0x20>)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4313      	orrs	r3, r2
 8002282:	600b      	str	r3, [r1, #0]
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	40010400 	.word	0x40010400

08002294 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800229c:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	4904      	ldr	r1, [pc, #16]	; (80022b4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	608b      	str	r3, [r1, #8]

}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	40010400 	.word	0x40010400

080022b8 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = LL_RTC_TIME_GetSubSecond(phrtc->Instance);
 80022be:	4b10      	ldr	r3, [pc, #64]	; (8002300 <ReadRtcSsrValue+0x48>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff ff90 	bl	80021ea <LL_RTC_TIME_GetSubSecond>
 80022ca:	6078      	str	r0, [r7, #4]
  second_read = LL_RTC_TIME_GetSubSecond(phrtc->Instance);
 80022cc:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <ReadRtcSsrValue+0x48>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff ff89 	bl	80021ea <LL_RTC_TIME_GetSubSecond>
 80022d8:	6038      	str	r0, [r7, #0]

  while(first_read != second_read)
 80022da:	e008      	b.n	80022ee <ReadRtcSsrValue+0x36>
  {
    first_read = second_read;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	607b      	str	r3, [r7, #4]
    second_read = LL_RTC_TIME_GetSubSecond(phrtc->Instance);
 80022e0:	4b07      	ldr	r3, [pc, #28]	; (8002300 <ReadRtcSsrValue+0x48>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff ff7f 	bl	80021ea <LL_RTC_TIME_GetSubSecond>
 80022ec:	6038      	str	r0, [r7, #0]
  while(first_read != second_read)
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d1f2      	bne.n	80022dc <ReadRtcSsrValue+0x24>
  }

  return second_read;
 80022f6:	683b      	ldr	r3, [r7, #0]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	2000020c 	.word	0x2000020c

08002304 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	460a      	mov	r2, r1
 800230e:	71fb      	strb	r3, [r7, #7]
 8002310:	4613      	mov	r3, r2
 8002312:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002314:	79ba      	ldrb	r2, [r7, #6]
 8002316:	491d      	ldr	r1, [pc, #116]	; (800238c <LinkTimerAfter+0x88>)
 8002318:	4613      	mov	r3, r2
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	4413      	add	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	440b      	add	r3, r1
 8002322:	3315      	adds	r3, #21
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	2b06      	cmp	r3, #6
 800232c:	d009      	beq.n	8002342 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800232e:	7bfa      	ldrb	r2, [r7, #15]
 8002330:	4916      	ldr	r1, [pc, #88]	; (800238c <LinkTimerAfter+0x88>)
 8002332:	4613      	mov	r3, r2
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	4413      	add	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	440b      	add	r3, r1
 800233c:	3314      	adds	r3, #20
 800233e:	79fa      	ldrb	r2, [r7, #7]
 8002340:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8002342:	79fa      	ldrb	r2, [r7, #7]
 8002344:	4911      	ldr	r1, [pc, #68]	; (800238c <LinkTimerAfter+0x88>)
 8002346:	4613      	mov	r3, r2
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	4413      	add	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	440b      	add	r3, r1
 8002350:	3315      	adds	r3, #21
 8002352:	7bfa      	ldrb	r2, [r7, #15]
 8002354:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002356:	79fa      	ldrb	r2, [r7, #7]
 8002358:	490c      	ldr	r1, [pc, #48]	; (800238c <LinkTimerAfter+0x88>)
 800235a:	4613      	mov	r3, r2
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	4413      	add	r3, r2
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	440b      	add	r3, r1
 8002364:	3314      	adds	r3, #20
 8002366:	79ba      	ldrb	r2, [r7, #6]
 8002368:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800236a:	79ba      	ldrb	r2, [r7, #6]
 800236c:	4907      	ldr	r1, [pc, #28]	; (800238c <LinkTimerAfter+0x88>)
 800236e:	4613      	mov	r3, r2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	4413      	add	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	440b      	add	r3, r1
 8002378:	3315      	adds	r3, #21
 800237a:	79fa      	ldrb	r2, [r7, #7]
 800237c:	701a      	strb	r2, [r3, #0]

  return;
 800237e:	bf00      	nop
}
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	20000170 	.word	0x20000170

08002390 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	460a      	mov	r2, r1
 800239a:	71fb      	strb	r3, [r7, #7]
 800239c:	4613      	mov	r3, r2
 800239e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80023a0:	4b29      	ldr	r3, [pc, #164]	; (8002448 <LinkTimerBefore+0xb8>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	79ba      	ldrb	r2, [r7, #6]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d032      	beq.n	8002412 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80023ac:	79ba      	ldrb	r2, [r7, #6]
 80023ae:	4927      	ldr	r1, [pc, #156]	; (800244c <LinkTimerBefore+0xbc>)
 80023b0:	4613      	mov	r3, r2
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	4413      	add	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	440b      	add	r3, r1
 80023ba:	3314      	adds	r3, #20
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80023c0:	7bfa      	ldrb	r2, [r7, #15]
 80023c2:	4922      	ldr	r1, [pc, #136]	; (800244c <LinkTimerBefore+0xbc>)
 80023c4:	4613      	mov	r3, r2
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	4413      	add	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	440b      	add	r3, r1
 80023ce:	3315      	adds	r3, #21
 80023d0:	79fa      	ldrb	r2, [r7, #7]
 80023d2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80023d4:	79fa      	ldrb	r2, [r7, #7]
 80023d6:	491d      	ldr	r1, [pc, #116]	; (800244c <LinkTimerBefore+0xbc>)
 80023d8:	4613      	mov	r3, r2
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	4413      	add	r3, r2
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	440b      	add	r3, r1
 80023e2:	3315      	adds	r3, #21
 80023e4:	79ba      	ldrb	r2, [r7, #6]
 80023e6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80023e8:	79fa      	ldrb	r2, [r7, #7]
 80023ea:	4918      	ldr	r1, [pc, #96]	; (800244c <LinkTimerBefore+0xbc>)
 80023ec:	4613      	mov	r3, r2
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	4413      	add	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	440b      	add	r3, r1
 80023f6:	3314      	adds	r3, #20
 80023f8:	7bfa      	ldrb	r2, [r7, #15]
 80023fa:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80023fc:	79ba      	ldrb	r2, [r7, #6]
 80023fe:	4913      	ldr	r1, [pc, #76]	; (800244c <LinkTimerBefore+0xbc>)
 8002400:	4613      	mov	r3, r2
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	4413      	add	r3, r2
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	440b      	add	r3, r1
 800240a:	3314      	adds	r3, #20
 800240c:	79fa      	ldrb	r2, [r7, #7]
 800240e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8002410:	e014      	b.n	800243c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8002412:	79fa      	ldrb	r2, [r7, #7]
 8002414:	490d      	ldr	r1, [pc, #52]	; (800244c <LinkTimerBefore+0xbc>)
 8002416:	4613      	mov	r3, r2
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	4413      	add	r3, r2
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	440b      	add	r3, r1
 8002420:	3315      	adds	r3, #21
 8002422:	79ba      	ldrb	r2, [r7, #6]
 8002424:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002426:	79ba      	ldrb	r2, [r7, #6]
 8002428:	4908      	ldr	r1, [pc, #32]	; (800244c <LinkTimerBefore+0xbc>)
 800242a:	4613      	mov	r3, r2
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	4413      	add	r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	440b      	add	r3, r1
 8002434:	3314      	adds	r3, #20
 8002436:	79fa      	ldrb	r2, [r7, #7]
 8002438:	701a      	strb	r2, [r3, #0]
  return;
 800243a:	bf00      	nop
}
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	20000200 	.word	0x20000200
 800244c:	20000170 	.word	0x20000170

08002450 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800245a:	4b4e      	ldr	r3, [pc, #312]	; (8002594 <linkTimer+0x144>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b06      	cmp	r3, #6
 8002462:	d118      	bne.n	8002496 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002464:	4b4b      	ldr	r3, [pc, #300]	; (8002594 <linkTimer+0x144>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	b2da      	uxtb	r2, r3
 800246a:	4b4b      	ldr	r3, [pc, #300]	; (8002598 <linkTimer+0x148>)
 800246c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800246e:	4a49      	ldr	r2, [pc, #292]	; (8002594 <linkTimer+0x144>)
 8002470:	79fb      	ldrb	r3, [r7, #7]
 8002472:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002474:	79fa      	ldrb	r2, [r7, #7]
 8002476:	4949      	ldr	r1, [pc, #292]	; (800259c <linkTimer+0x14c>)
 8002478:	4613      	mov	r3, r2
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	4413      	add	r3, r2
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	440b      	add	r3, r1
 8002482:	3315      	adds	r3, #21
 8002484:	2206      	movs	r2, #6
 8002486:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002488:	4b45      	ldr	r3, [pc, #276]	; (80025a0 <linkTimer+0x150>)
 800248a:	f04f 32ff 	mov.w	r2, #4294967295
 800248e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	81fb      	strh	r3, [r7, #14]
 8002494:	e078      	b.n	8002588 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8002496:	f000 f909 	bl	80026ac <ReturnTimeElapsed>
 800249a:	4603      	mov	r3, r0
 800249c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800249e:	79fa      	ldrb	r2, [r7, #7]
 80024a0:	493e      	ldr	r1, [pc, #248]	; (800259c <linkTimer+0x14c>)
 80024a2:	4613      	mov	r3, r2
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	4413      	add	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	440b      	add	r3, r1
 80024ac:	3308      	adds	r3, #8
 80024ae:	6819      	ldr	r1, [r3, #0]
 80024b0:	89fb      	ldrh	r3, [r7, #14]
 80024b2:	79fa      	ldrb	r2, [r7, #7]
 80024b4:	4419      	add	r1, r3
 80024b6:	4839      	ldr	r0, [pc, #228]	; (800259c <linkTimer+0x14c>)
 80024b8:	4613      	mov	r3, r2
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	4413      	add	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	4403      	add	r3, r0
 80024c2:	3308      	adds	r3, #8
 80024c4:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80024c6:	79fa      	ldrb	r2, [r7, #7]
 80024c8:	4934      	ldr	r1, [pc, #208]	; (800259c <linkTimer+0x14c>)
 80024ca:	4613      	mov	r3, r2
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4413      	add	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	440b      	add	r3, r1
 80024d4:	3308      	adds	r3, #8
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80024da:	4b2e      	ldr	r3, [pc, #184]	; (8002594 <linkTimer+0x144>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	4619      	mov	r1, r3
 80024e2:	4a2e      	ldr	r2, [pc, #184]	; (800259c <linkTimer+0x14c>)
 80024e4:	460b      	mov	r3, r1
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	440b      	add	r3, r1
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	4413      	add	r3, r2
 80024ee:	3308      	adds	r3, #8
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d337      	bcc.n	8002568 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80024f8:	4b26      	ldr	r3, [pc, #152]	; (8002594 <linkTimer+0x144>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80024fe:	7b7a      	ldrb	r2, [r7, #13]
 8002500:	4926      	ldr	r1, [pc, #152]	; (800259c <linkTimer+0x14c>)
 8002502:	4613      	mov	r3, r2
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	4413      	add	r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	440b      	add	r3, r1
 800250c:	3315      	adds	r3, #21
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002512:	e013      	b.n	800253c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8002514:	7b7a      	ldrb	r2, [r7, #13]
 8002516:	4921      	ldr	r1, [pc, #132]	; (800259c <linkTimer+0x14c>)
 8002518:	4613      	mov	r3, r2
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	4413      	add	r3, r2
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	440b      	add	r3, r1
 8002522:	3315      	adds	r3, #21
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8002528:	7b7a      	ldrb	r2, [r7, #13]
 800252a:	491c      	ldr	r1, [pc, #112]	; (800259c <linkTimer+0x14c>)
 800252c:	4613      	mov	r3, r2
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	4413      	add	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	440b      	add	r3, r1
 8002536:	3315      	adds	r3, #21
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800253c:	7b3b      	ldrb	r3, [r7, #12]
 800253e:	2b06      	cmp	r3, #6
 8002540:	d00b      	beq.n	800255a <linkTimer+0x10a>
 8002542:	7b3a      	ldrb	r2, [r7, #12]
 8002544:	4915      	ldr	r1, [pc, #84]	; (800259c <linkTimer+0x14c>)
 8002546:	4613      	mov	r3, r2
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	4413      	add	r3, r2
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	440b      	add	r3, r1
 8002550:	3308      	adds	r3, #8
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	429a      	cmp	r2, r3
 8002558:	d2dc      	bcs.n	8002514 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800255a:	7b7a      	ldrb	r2, [r7, #13]
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	4611      	mov	r1, r2
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff fecf 	bl	8002304 <LinkTimerAfter>
 8002566:	e00f      	b.n	8002588 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8002568:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <linkTimer+0x144>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	b2da      	uxtb	r2, r3
 800256e:	79fb      	ldrb	r3, [r7, #7]
 8002570:	4611      	mov	r1, r2
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff ff0c 	bl	8002390 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8002578:	4b06      	ldr	r3, [pc, #24]	; (8002594 <linkTimer+0x144>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	b2da      	uxtb	r2, r3
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <linkTimer+0x148>)
 8002580:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8002582:	4a04      	ldr	r2, [pc, #16]	; (8002594 <linkTimer+0x144>)
 8002584:	79fb      	ldrb	r3, [r7, #7]
 8002586:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8002588:	89fb      	ldrh	r3, [r7, #14]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20000200 	.word	0x20000200
 8002598:	20000201 	.word	0x20000201
 800259c:	20000170 	.word	0x20000170
 80025a0:	20000204 	.word	0x20000204

080025a4 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	460a      	mov	r2, r1
 80025ae:	71fb      	strb	r3, [r7, #7]
 80025b0:	4613      	mov	r3, r2
 80025b2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80025b4:	4b39      	ldr	r3, [pc, #228]	; (800269c <UnlinkTimer+0xf8>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	79fa      	ldrb	r2, [r7, #7]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d111      	bne.n	80025e4 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80025c0:	4b36      	ldr	r3, [pc, #216]	; (800269c <UnlinkTimer+0xf8>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	4b36      	ldr	r3, [pc, #216]	; (80026a0 <UnlinkTimer+0xfc>)
 80025c8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80025ca:	79fa      	ldrb	r2, [r7, #7]
 80025cc:	4935      	ldr	r1, [pc, #212]	; (80026a4 <UnlinkTimer+0x100>)
 80025ce:	4613      	mov	r3, r2
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	4413      	add	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	440b      	add	r3, r1
 80025d8:	3315      	adds	r3, #21
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	4b2f      	ldr	r3, [pc, #188]	; (800269c <UnlinkTimer+0xf8>)
 80025e0:	701a      	strb	r2, [r3, #0]
 80025e2:	e03e      	b.n	8002662 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80025e4:	79fa      	ldrb	r2, [r7, #7]
 80025e6:	492f      	ldr	r1, [pc, #188]	; (80026a4 <UnlinkTimer+0x100>)
 80025e8:	4613      	mov	r3, r2
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	4413      	add	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	440b      	add	r3, r1
 80025f2:	3314      	adds	r3, #20
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80025f8:	79fa      	ldrb	r2, [r7, #7]
 80025fa:	492a      	ldr	r1, [pc, #168]	; (80026a4 <UnlinkTimer+0x100>)
 80025fc:	4613      	mov	r3, r2
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	4413      	add	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	440b      	add	r3, r1
 8002606:	3315      	adds	r3, #21
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800260c:	79f9      	ldrb	r1, [r7, #7]
 800260e:	7bfa      	ldrb	r2, [r7, #15]
 8002610:	4824      	ldr	r0, [pc, #144]	; (80026a4 <UnlinkTimer+0x100>)
 8002612:	460b      	mov	r3, r1
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	440b      	add	r3, r1
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	4403      	add	r3, r0
 800261c:	3315      	adds	r3, #21
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	b2d8      	uxtb	r0, r3
 8002622:	4920      	ldr	r1, [pc, #128]	; (80026a4 <UnlinkTimer+0x100>)
 8002624:	4613      	mov	r3, r2
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	4413      	add	r3, r2
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	440b      	add	r3, r1
 800262e:	3315      	adds	r3, #21
 8002630:	4602      	mov	r2, r0
 8002632:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002634:	7bbb      	ldrb	r3, [r7, #14]
 8002636:	2b06      	cmp	r3, #6
 8002638:	d013      	beq.n	8002662 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800263a:	79f9      	ldrb	r1, [r7, #7]
 800263c:	7bba      	ldrb	r2, [r7, #14]
 800263e:	4819      	ldr	r0, [pc, #100]	; (80026a4 <UnlinkTimer+0x100>)
 8002640:	460b      	mov	r3, r1
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	440b      	add	r3, r1
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	4403      	add	r3, r0
 800264a:	3314      	adds	r3, #20
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	b2d8      	uxtb	r0, r3
 8002650:	4914      	ldr	r1, [pc, #80]	; (80026a4 <UnlinkTimer+0x100>)
 8002652:	4613      	mov	r3, r2
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	4413      	add	r3, r2
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	440b      	add	r3, r1
 800265c:	3314      	adds	r3, #20
 800265e:	4602      	mov	r2, r0
 8002660:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8002662:	79fa      	ldrb	r2, [r7, #7]
 8002664:	490f      	ldr	r1, [pc, #60]	; (80026a4 <UnlinkTimer+0x100>)
 8002666:	4613      	mov	r3, r2
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	4413      	add	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	440b      	add	r3, r1
 8002670:	330c      	adds	r3, #12
 8002672:	2201      	movs	r2, #1
 8002674:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8002676:	4b09      	ldr	r3, [pc, #36]	; (800269c <UnlinkTimer+0xf8>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b06      	cmp	r3, #6
 800267e:	d107      	bne.n	8002690 <UnlinkTimer+0xec>
 8002680:	79bb      	ldrb	r3, [r7, #6]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d104      	bne.n	8002690 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002686:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <UnlinkTimer+0x104>)
 8002688:	f04f 32ff 	mov.w	r2, #4294967295
 800268c:	601a      	str	r2, [r3, #0]
  }

  return;
 800268e:	bf00      	nop
 8002690:	bf00      	nop
}
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	20000200 	.word	0x20000200
 80026a0:	20000201 	.word	0x20000201
 80026a4:	20000170 	.word	0x20000170
 80026a8:	20000204 	.word	0x20000204

080026ac <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80026b2:	4b1a      	ldr	r3, [pc, #104]	; (800271c <ReturnTimeElapsed+0x70>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ba:	d026      	beq.n	800270a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80026bc:	f7ff fdfc 	bl	80022b8 <ReadRtcSsrValue>
 80026c0:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80026c2:	4b16      	ldr	r3, [pc, #88]	; (800271c <ReturnTimeElapsed+0x70>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d805      	bhi.n	80026d8 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80026cc:	4b13      	ldr	r3, [pc, #76]	; (800271c <ReturnTimeElapsed+0x70>)
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	607b      	str	r3, [r7, #4]
 80026d6:	e00a      	b.n	80026ee <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80026d8:	4b11      	ldr	r3, [pc, #68]	; (8002720 <ReturnTimeElapsed+0x74>)
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	461a      	mov	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80026e4:	4b0d      	ldr	r3, [pc, #52]	; (800271c <ReturnTimeElapsed+0x70>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	4413      	add	r3, r2
 80026ec:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80026ee:	4b0d      	ldr	r3, [pc, #52]	; (8002724 <ReturnTimeElapsed+0x78>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	461a      	mov	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	fb02 f303 	mul.w	r3, r2, r3
 80026fa:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80026fc:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <ReturnTimeElapsed+0x7c>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	461a      	mov	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	40d3      	lsrs	r3, r2
 8002706:	607b      	str	r3, [r7, #4]
 8002708:	e001      	b.n	800270e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800270a:	2300      	movs	r3, #0
 800270c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	b29b      	uxth	r3, r3
}
 8002712:	4618      	mov	r0, r3
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	20000204 	.word	0x20000204
 8002720:	20000212 	.word	0x20000212
 8002724:	20000211 	.word	0x20000211
 8002728:	20000210 	.word	0x20000210

0800272c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8002736:	88fb      	ldrh	r3, [r7, #6]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d108      	bne.n	800274e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800273c:	f7ff fdbc 	bl	80022b8 <ReadRtcSsrValue>
 8002740:	4603      	mov	r3, r0
 8002742:	4a24      	ldr	r2, [pc, #144]	; (80027d4 <RestartWakeupCounter+0xa8>)
 8002744:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002746:	2003      	movs	r0, #3
 8002748:	f002 fab2 	bl	8004cb0 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 800274c:	e03e      	b.n	80027cc <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800274e:	88fb      	ldrh	r3, [r7, #6]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d803      	bhi.n	800275c <RestartWakeupCounter+0x30>
 8002754:	4b20      	ldr	r3, [pc, #128]	; (80027d8 <RestartWakeupCounter+0xac>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d002      	beq.n	8002762 <RestartWakeupCounter+0x36>
      Value -= 1;
 800275c:	88fb      	ldrh	r3, [r7, #6]
 800275e:	3b01      	subs	r3, #1
 8002760:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8002762:	bf00      	nop
 8002764:	4b1d      	ldr	r3, [pc, #116]	; (80027dc <RestartWakeupCounter+0xb0>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0f7      	beq.n	8002764 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002774:	4b19      	ldr	r3, [pc, #100]	; (80027dc <RestartWakeupCounter+0xb0>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	b2da      	uxtb	r2, r3
 800277e:	4b17      	ldr	r3, [pc, #92]	; (80027dc <RestartWakeupCounter+0xb0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002788:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800278a:	4b15      	ldr	r3, [pc, #84]	; (80027e0 <RestartWakeupCounter+0xb4>)
 800278c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002790:	615a      	str	r2, [r3, #20]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002792:	2003      	movs	r0, #3
 8002794:	f002 fa9a 	bl	8004ccc <HAL_NVIC_ClearPendingIRQ>
    LL_RTC_WAKEUP_SetAutoReload(phrtc->Instance, Value);
 8002798:	4b10      	ldr	r3, [pc, #64]	; (80027dc <RestartWakeupCounter+0xb0>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	88fa      	ldrh	r2, [r7, #6]
 80027a0:	4611      	mov	r1, r2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff fd50 	bl	8002248 <LL_RTC_WAKEUP_SetAutoReload>
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80027a8:	f7ff fd86 	bl	80022b8 <ReadRtcSsrValue>
 80027ac:	4603      	mov	r3, r0
 80027ae:	4a09      	ldr	r2, [pc, #36]	; (80027d4 <RestartWakeupCounter+0xa8>)
 80027b0:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 80027b2:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <RestartWakeupCounter+0xb0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	4b08      	ldr	r3, [pc, #32]	; (80027dc <RestartWakeupCounter+0xb0>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027c4:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80027c6:	f000 fb97 	bl	8002ef8 <HW_TS_RTC_CountUpdated_AppNot>
  return ;
 80027ca:	bf00      	nop
}
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20000204 	.word	0x20000204
 80027d8:	20000210 	.word	0x20000210
 80027dc:	2000020c 	.word	0x2000020c
 80027e0:	40010400 	.word	0x40010400

080027e4 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if(LL_RTC_WAKEUP_IsEnabled(phrtc->Instance) == SET)
 80027ea:	4b48      	ldr	r3, [pc, #288]	; (800290c <RescheduleTimerList+0x128>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff fd07 	bl	8002204 <LL_RTC_WAKEUP_IsEnabled>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d108      	bne.n	800280e <RescheduleTimerList+0x2a>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80027fc:	bf00      	nop
 80027fe:	4b43      	ldr	r3, [pc, #268]	; (800290c <RescheduleTimerList+0x128>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	f003 0304 	and.w	r3, r3, #4
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f7      	bne.n	80027fe <RescheduleTimerList+0x1a>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800280e:	4b3f      	ldr	r3, [pc, #252]	; (800290c <RescheduleTimerList+0x128>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689a      	ldr	r2, [r3, #8]
 8002816:	4b3d      	ldr	r3, [pc, #244]	; (800290c <RescheduleTimerList+0x128>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002820:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8002822:	4b3b      	ldr	r3, [pc, #236]	; (8002910 <RescheduleTimerList+0x12c>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8002828:	7bfa      	ldrb	r2, [r7, #15]
 800282a:	493a      	ldr	r1, [pc, #232]	; (8002914 <RescheduleTimerList+0x130>)
 800282c:	4613      	mov	r3, r2
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	4413      	add	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	440b      	add	r3, r1
 8002836:	3308      	adds	r3, #8
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 800283c:	f7ff ff36 	bl	80026ac <ReturnTimeElapsed>
 8002840:	4603      	mov	r3, r0
 8002842:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8002844:	88fb      	ldrh	r3, [r7, #6]
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	429a      	cmp	r2, r3
 800284a:	d205      	bcs.n	8002858 <RescheduleTimerList+0x74>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 800284c:	2300      	movs	r3, #0
 800284e:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002850:	4b31      	ldr	r3, [pc, #196]	; (8002918 <RescheduleTimerList+0x134>)
 8002852:	2201      	movs	r2, #1
 8002854:	701a      	strb	r2, [r3, #0]
 8002856:	e04d      	b.n	80028f4 <RescheduleTimerList+0x110>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8002858:	88fb      	ldrh	r3, [r7, #6]
 800285a:	4a30      	ldr	r2, [pc, #192]	; (800291c <RescheduleTimerList+0x138>)
 800285c:	8812      	ldrh	r2, [r2, #0]
 800285e:	b292      	uxth	r2, r2
 8002860:	4413      	add	r3, r2
 8002862:	461a      	mov	r2, r3
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	4293      	cmp	r3, r2
 8002868:	d906      	bls.n	8002878 <RescheduleTimerList+0x94>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 800286a:	4b2c      	ldr	r3, [pc, #176]	; (800291c <RescheduleTimerList+0x138>)
 800286c:	881b      	ldrh	r3, [r3, #0]
 800286e:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8002870:	4b29      	ldr	r3, [pc, #164]	; (8002918 <RescheduleTimerList+0x134>)
 8002872:	2200      	movs	r2, #0
 8002874:	701a      	strb	r2, [r3, #0]
 8002876:	e03d      	b.n	80028f4 <RescheduleTimerList+0x110>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	b29a      	uxth	r2, r3
 800287c:	88fb      	ldrh	r3, [r7, #6]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002882:	4b25      	ldr	r3, [pc, #148]	; (8002918 <RescheduleTimerList+0x134>)
 8002884:	2201      	movs	r2, #1
 8002886:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002888:	e034      	b.n	80028f4 <RescheduleTimerList+0x110>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800288a:	7bfa      	ldrb	r2, [r7, #15]
 800288c:	4921      	ldr	r1, [pc, #132]	; (8002914 <RescheduleTimerList+0x130>)
 800288e:	4613      	mov	r3, r2
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	4413      	add	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	440b      	add	r3, r1
 8002898:	3308      	adds	r3, #8
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	88fb      	ldrh	r3, [r7, #6]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d20a      	bcs.n	80028b8 <RescheduleTimerList+0xd4>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80028a2:	7bfa      	ldrb	r2, [r7, #15]
 80028a4:	491b      	ldr	r1, [pc, #108]	; (8002914 <RescheduleTimerList+0x130>)
 80028a6:	4613      	mov	r3, r2
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	4413      	add	r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	440b      	add	r3, r1
 80028b0:	3308      	adds	r3, #8
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	e013      	b.n	80028e0 <RescheduleTimerList+0xfc>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80028b8:	7bfa      	ldrb	r2, [r7, #15]
 80028ba:	4916      	ldr	r1, [pc, #88]	; (8002914 <RescheduleTimerList+0x130>)
 80028bc:	4613      	mov	r3, r2
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	4413      	add	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	440b      	add	r3, r1
 80028c6:	3308      	adds	r3, #8
 80028c8:	6819      	ldr	r1, [r3, #0]
 80028ca:	88fb      	ldrh	r3, [r7, #6]
 80028cc:	7bfa      	ldrb	r2, [r7, #15]
 80028ce:	1ac9      	subs	r1, r1, r3
 80028d0:	4810      	ldr	r0, [pc, #64]	; (8002914 <RescheduleTimerList+0x130>)
 80028d2:	4613      	mov	r3, r2
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	4413      	add	r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	4403      	add	r3, r0
 80028dc:	3308      	adds	r3, #8
 80028de:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80028e0:	7bfa      	ldrb	r2, [r7, #15]
 80028e2:	490c      	ldr	r1, [pc, #48]	; (8002914 <RescheduleTimerList+0x130>)
 80028e4:	4613      	mov	r3, r2
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	4413      	add	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	440b      	add	r3, r1
 80028ee:	3315      	adds	r3, #21
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
 80028f6:	2b06      	cmp	r3, #6
 80028f8:	d1c7      	bne.n	800288a <RescheduleTimerList+0xa6>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80028fa:	89bb      	ldrh	r3, [r7, #12]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff ff15 	bl	800272c <RestartWakeupCounter>

  return ;
 8002902:	bf00      	nop
}
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	2000020c 	.word	0x2000020c
 8002910:	20000200 	.word	0x20000200
 8002914:	20000170 	.word	0x20000170
 8002918:	20000208 	.word	0x20000208
 800291c:	20000214 	.word	0x20000214

08002920 <HW_TS_RTC_Wakeup_Handler>:


/* Public functions ----------------------------------------------------------*/

void HW_TS_RTC_Wakeup_Handler(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b08a      	sub	sp, #40	; 0x28
 8002924:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002926:	f3ef 8310 	mrs	r3, PRIMASK
 800292a:	617b      	str	r3, [r7, #20]
  return(result);
 800292c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800292e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8002930:	b672      	cpsid	i
}
 8002932:	bf00      	nop
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8002934:	4b4d      	ldr	r3, [pc, #308]	; (8002a6c <HW_TS_RTC_Wakeup_Handler+0x14c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	4b4b      	ldr	r3, [pc, #300]	; (8002a6c <HW_TS_RTC_Wakeup_Handler+0x14c>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002946:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002948:	4b49      	ldr	r3, [pc, #292]	; (8002a70 <HW_TS_RTC_Wakeup_Handler+0x150>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002950:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002954:	4947      	ldr	r1, [pc, #284]	; (8002a74 <HW_TS_RTC_Wakeup_Handler+0x154>)
 8002956:	4613      	mov	r3, r2
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	4413      	add	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	440b      	add	r3, r1
 8002960:	330c      	adds	r3, #12
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d15e      	bne.n	8002a28 <HW_TS_RTC_Wakeup_Handler+0x108>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800296a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800296e:	4941      	ldr	r1, [pc, #260]	; (8002a74 <HW_TS_RTC_Wakeup_Handler+0x154>)
 8002970:	4613      	mov	r3, r2
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	4413      	add	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	440b      	add	r3, r1
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800297e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002982:	493c      	ldr	r1, [pc, #240]	; (8002a74 <HW_TS_RTC_Wakeup_Handler+0x154>)
 8002984:	4613      	mov	r3, r2
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	4413      	add	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	440b      	add	r3, r1
 800298e:	3310      	adds	r3, #16
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002994:	4b38      	ldr	r3, [pc, #224]	; (8002a78 <HW_TS_RTC_Wakeup_Handler+0x158>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d03c      	beq.n	8002a18 <HW_TS_RTC_Wakeup_Handler+0xf8>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800299e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80029a2:	4934      	ldr	r1, [pc, #208]	; (8002a74 <HW_TS_RTC_Wakeup_Handler+0x154>)
 80029a4:	4613      	mov	r3, r2
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	4413      	add	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	440b      	add	r3, r1
 80029ae:	330d      	adds	r3, #13
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d11c      	bne.n	80029f2 <HW_TS_RTC_Wakeup_Handler+0xd2>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80029b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029bc:	2101      	movs	r1, #1
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff fdf0 	bl	80025a4 <UnlinkTimer>
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	f383 8810 	msr	PRIMASK, r3
}
 80029ce:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80029d0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80029d4:	4927      	ldr	r1, [pc, #156]	; (8002a74 <HW_TS_RTC_Wakeup_Handler+0x154>)
 80029d6:	4613      	mov	r3, r2
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	4413      	add	r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	440b      	add	r3, r1
 80029e0:	3304      	adds	r3, #4
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029e8:	4611      	mov	r1, r2
 80029ea:	4618      	mov	r0, r3
 80029ec:	f000 fa1c 	bl	8002e28 <HW_TS_Start>
 80029f0:	e00a      	b.n	8002a08 <HW_TS_RTC_Wakeup_Handler+0xe8>
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f383 8810 	msr	PRIMASK, r3
}
 80029fc:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80029fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a02:	4618      	mov	r0, r3
 8002a04:	f000 f992 	bl	8002d2c <HW_TS_Stop>
      }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002a08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a0c:	69fa      	ldr	r2, [r7, #28]
 8002a0e:	4619      	mov	r1, r3
 8002a10:	69b8      	ldr	r0, [r7, #24]
 8002a12:	f001 fe44 	bl	800469e <HW_TS_RTC_Int_AppNot>
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  return;
 8002a16:	e026      	b.n	8002a66 <HW_TS_RTC_Wakeup_Handler+0x146>
      RescheduleTimerList();
 8002a18:	f7ff fee4 	bl	80027e4 <RescheduleTimerList>
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f383 8810 	msr	PRIMASK, r3
}
 8002a26:	e01d      	b.n	8002a64 <HW_TS_RTC_Wakeup_Handler+0x144>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8002a28:	bf00      	nop
 8002a2a:	4b10      	ldr	r3, [pc, #64]	; (8002a6c <HW_TS_RTC_Wakeup_Handler+0x14c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f003 0304 	and.w	r3, r3, #4
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0f7      	beq.n	8002a2a <HW_TS_RTC_Wakeup_Handler+0x10a>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002a3a:	4b0c      	ldr	r3, [pc, #48]	; (8002a6c <HW_TS_RTC_Wakeup_Handler+0x14c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <HW_TS_RTC_Wakeup_Handler+0x14c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002a4e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002a50:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <HW_TS_RTC_Wakeup_Handler+0x15c>)
 8002a52:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a56:	615a      	str	r2, [r3, #20]
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f383 8810 	msr	PRIMASK, r3
}
 8002a62:	bf00      	nop
  return;
 8002a64:	bf00      	nop
}
 8002a66:	3728      	adds	r7, #40	; 0x28
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	2000020c 	.word	0x2000020c
 8002a70:	20000200 	.word	0x20000200
 8002a74:	20000170 	.word	0x20000170
 8002a78:	20000208 	.word	0x20000208
 8002a7c:	40010400 	.word	0x40010400

08002a80 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	6039      	str	r1, [r7, #0]
 8002a8a:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8002a8c:	4a53      	ldr	r2, [pc, #332]	; (8002bdc <HW_TS_Init+0x15c>)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	6013      	str	r3, [r2, #0]


  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - (LL_RTC_WAKEUP_GetClock(phrtc->Instance)));
 8002a92:	4b52      	ldr	r3, [pc, #328]	; (8002bdc <HW_TS_Init+0x15c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff fbc7 	bl	800222c <LL_RTC_WAKEUP_GetClock>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	f1c3 0304 	rsb	r3, r3, #4
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	4b4d      	ldr	r3, [pc, #308]	; (8002be0 <HW_TS_Init+0x160>)
 8002aaa:	701a      	strb	r2, [r3, #0]
  AsynchPrescalerUserConfig = (uint8_t)LL_RTC_GetAsynchPrescaler(phrtc->Instance) + 1;
 8002aac:	4b4b      	ldr	r3, [pc, #300]	; (8002bdc <HW_TS_Init+0x15c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff fb7c 	bl	80021b0 <LL_RTC_GetAsynchPrescaler>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	3301      	adds	r3, #1
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	4b48      	ldr	r3, [pc, #288]	; (8002be4 <HW_TS_Init+0x164>)
 8002ac2:	701a      	strb	r2, [r3, #0]
  SynchPrescalerUserConfig = (uint16_t)LL_RTC_GetSynchPrescaler(phrtc->Instance) + 1;
 8002ac4:	4b45      	ldr	r3, [pc, #276]	; (8002bdc <HW_TS_Init+0x15c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff fb7f 	bl	80021ce <LL_RTC_GetSynchPrescaler>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	4b43      	ldr	r3, [pc, #268]	; (8002be8 <HW_TS_Init+0x168>)
 8002ada:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = (((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) >> WakeupTimerDivider) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY;
 8002adc:	4b42      	ldr	r3, [pc, #264]	; (8002be8 <HW_TS_Init+0x168>)
 8002ade:	881b      	ldrh	r3, [r3, #0]
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	4a40      	ldr	r2, [pc, #256]	; (8002be4 <HW_TS_Init+0x164>)
 8002ae4:	7812      	ldrb	r2, [r2, #0]
 8002ae6:	fb02 f303 	mul.w	r3, r2, r3
 8002aea:	4a3d      	ldr	r2, [pc, #244]	; (8002be0 <HW_TS_Init+0x160>)
 8002aec:	7812      	ldrb	r2, [r2, #0]
 8002aee:	4113      	asrs	r3, r2
 8002af0:	3b10      	subs	r3, #16
 8002af2:	60bb      	str	r3, [r7, #8]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d904      	bls.n	8002b08 <HW_TS_Init+0x88>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8002afe:	4b3b      	ldr	r3, [pc, #236]	; (8002bec <HW_TS_Init+0x16c>)
 8002b00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b04:	801a      	strh	r2, [r3, #0]
 8002b06:	e003      	b.n	8002b10 <HW_TS_Init+0x90>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	4b37      	ldr	r3, [pc, #220]	; (8002bec <HW_TS_Init+0x16c>)
 8002b0e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002b10:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002b14:	f7ff fbbe 	bl	8002294 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002b18:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002b1c:	f7ff fba8 	bl	8002270 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002b20:	79fb      	ldrb	r3, [r7, #7]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d143      	bne.n	8002bae <HW_TS_Init+0x12e>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002b26:	4b32      	ldr	r3, [pc, #200]	; (8002bf0 <HW_TS_Init+0x170>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002b2c:	4b31      	ldr	r3, [pc, #196]	; (8002bf4 <HW_TS_Init+0x174>)
 8002b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8002b32:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002b34:	2300      	movs	r3, #0
 8002b36:	73fb      	strb	r3, [r7, #15]
 8002b38:	e00c      	b.n	8002b54 <HW_TS_Init+0xd4>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002b3a:	7bfa      	ldrb	r2, [r7, #15]
 8002b3c:	492e      	ldr	r1, [pc, #184]	; (8002bf8 <HW_TS_Init+0x178>)
 8002b3e:	4613      	mov	r3, r2
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	4413      	add	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	440b      	add	r3, r1
 8002b48:	330c      	adds	r3, #12
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
 8002b50:	3301      	adds	r3, #1
 8002b52:	73fb      	strb	r3, [r7, #15]
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
 8002b56:	2b05      	cmp	r3, #5
 8002b58:	d9ef      	bls.n	8002b3a <HW_TS_Init+0xba>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8002b5a:	4b28      	ldr	r3, [pc, #160]	; (8002bfc <HW_TS_Init+0x17c>)
 8002b5c:	2206      	movs	r2, #6
 8002b5e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8002b60:	4b1e      	ldr	r3, [pc, #120]	; (8002bdc <HW_TS_Init+0x15c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	4b1c      	ldr	r3, [pc, #112]	; (8002bdc <HW_TS_Init+0x15c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b72:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002b74:	4b19      	ldr	r3, [pc, #100]	; (8002bdc <HW_TS_Init+0x15c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	4b17      	ldr	r3, [pc, #92]	; (8002bdc <HW_TS_Init+0x15c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002b88:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8002b8a:	4b1d      	ldr	r3, [pc, #116]	; (8002c00 <HW_TS_Init+0x180>)
 8002b8c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002b90:	615a      	str	r2, [r3, #20]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8002b92:	2003      	movs	r0, #3
 8002b94:	f002 f89a 	bl	8004ccc <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002b98:	4b10      	ldr	r3, [pc, #64]	; (8002bdc <HW_TS_Init+0x15c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	4b0e      	ldr	r3, [pc, #56]	; (8002bdc <HW_TS_Init+0x15c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	e00a      	b.n	8002bc4 <HW_TS_Init+0x144>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8002bae:	4b0b      	ldr	r3, [pc, #44]	; (8002bdc <HW_TS_Init+0x15c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d002      	beq.n	8002bc4 <HW_TS_Init+0x144>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002bbe:	2003      	movs	r0, #3
 8002bc0:	f002 f876 	bl	8004cb0 <HAL_NVIC_SetPendingIRQ>
    }
  }

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2103      	movs	r1, #3
 8002bc8:	2003      	movs	r0, #3
 8002bca:	f002 f839 	bl	8004c40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002bce:	2003      	movs	r0, #3
 8002bd0:	f002 f852 	bl	8004c78 <HAL_NVIC_EnableIRQ>

  return;
 8002bd4:	bf00      	nop
}
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	2000020c 	.word	0x2000020c
 8002be0:	20000210 	.word	0x20000210
 8002be4:	20000211 	.word	0x20000211
 8002be8:	20000212 	.word	0x20000212
 8002bec:	20000214 	.word	0x20000214
 8002bf0:	20000208 	.word	0x20000208
 8002bf4:	20000204 	.word	0x20000204
 8002bf8:	20000170 	.word	0x20000170
 8002bfc:	20000200 	.word	0x20000200
 8002c00:	40010400 	.word	0x40010400

08002c04 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b08b      	sub	sp, #44	; 0x2c
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	603b      	str	r3, [r7, #0]
 8002c10:	4613      	mov	r3, r2
 8002c12:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8002c14:	2300      	movs	r3, #0
 8002c16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c1a:	f3ef 8310 	mrs	r3, PRIMASK
 8002c1e:	61fb      	str	r3, [r7, #28]
  return(result);
 8002c20:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002c22:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c24:	b672      	cpsid	i
}
 8002c26:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002c28:	e004      	b.n	8002c34 <HW_TS_Create+0x30>
  {
    loop++;
 8002c2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002c2e:	3301      	adds	r3, #1
 8002c30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002c34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002c38:	2b05      	cmp	r3, #5
 8002c3a:	d80c      	bhi.n	8002c56 <HW_TS_Create+0x52>
 8002c3c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002c40:	492c      	ldr	r1, [pc, #176]	; (8002cf4 <HW_TS_Create+0xf0>)
 8002c42:	4613      	mov	r3, r2
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	4413      	add	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	440b      	add	r3, r1
 8002c4c:	330c      	adds	r3, #12
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1e9      	bne.n	8002c2a <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002c56:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002c5a:	2b06      	cmp	r3, #6
 8002c5c:	d038      	beq.n	8002cd0 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8002c5e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002c62:	4924      	ldr	r1, [pc, #144]	; (8002cf4 <HW_TS_Create+0xf0>)
 8002c64:	4613      	mov	r3, r2
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	4413      	add	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	440b      	add	r3, r1
 8002c6e:	330c      	adds	r3, #12
 8002c70:	2201      	movs	r2, #1
 8002c72:	701a      	strb	r2, [r3, #0]
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	f383 8810 	msr	PRIMASK, r3
}
 8002c7e:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8002c80:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002c84:	491b      	ldr	r1, [pc, #108]	; (8002cf4 <HW_TS_Create+0xf0>)
 8002c86:	4613      	mov	r3, r2
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	4413      	add	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	440b      	add	r3, r1
 8002c90:	3310      	adds	r3, #16
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8002c96:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002c9a:	4916      	ldr	r1, [pc, #88]	; (8002cf4 <HW_TS_Create+0xf0>)
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	4413      	add	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	440b      	add	r3, r1
 8002ca6:	330d      	adds	r3, #13
 8002ca8:	79fa      	ldrb	r2, [r7, #7]
 8002caa:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8002cac:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002cb0:	4910      	ldr	r1, [pc, #64]	; (8002cf4 <HW_TS_Create+0xf0>)
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	4413      	add	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	440b      	add	r3, r1
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002cc6:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002cce:	e008      	b.n	8002ce2 <HW_TS_Create+0xde>
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	f383 8810 	msr	PRIMASK, r3
}
 8002cda:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8002ce2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	372c      	adds	r7, #44	; 0x2c
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	20000170 	.word	0x20000170

08002cf8 <HW_TS_Delete>:

void HW_TS_Delete(uint8_t timer_id)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	4603      	mov	r3, r0
 8002d00:	71fb      	strb	r3, [r7, #7]
  HW_TS_Stop(timer_id);
 8002d02:	79fb      	ldrb	r3, [r7, #7]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 f811 	bl	8002d2c <HW_TS_Stop>

  aTimerContext[timer_id].TimerIDStatus = TimerID_Free; /**<  release ID */
 8002d0a:	79fa      	ldrb	r2, [r7, #7]
 8002d0c:	4906      	ldr	r1, [pc, #24]	; (8002d28 <HW_TS_Delete+0x30>)
 8002d0e:	4613      	mov	r3, r2
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	4413      	add	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	440b      	add	r3, r1
 8002d18:	330c      	adds	r3, #12
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	701a      	strb	r2, [r3, #0]

  return;
 8002d1e:	bf00      	nop
}
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	20000170 	.word	0x20000170

08002d2c <HW_TS_Stop>:

void HW_TS_Stop(uint8_t timer_id)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d36:	f3ef 8310 	mrs	r3, PRIMASK
 8002d3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002d3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d40:	b672      	cpsid	i
}
 8002d42:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002d44:	2003      	movs	r0, #3
 8002d46:	f001 ffa5 	bl	8004c94 <HAL_NVIC_DisableIRQ>

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002d4a:	79fa      	ldrb	r2, [r7, #7]
 8002d4c:	4931      	ldr	r1, [pc, #196]	; (8002e14 <HW_TS_Stop+0xe8>)
 8002d4e:	4613      	mov	r3, r2
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	4413      	add	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	440b      	add	r3, r1
 8002d58:	330c      	adds	r3, #12
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d14a      	bne.n	8002df8 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8002d62:	79fb      	ldrb	r3, [r7, #7]
 8002d64:	2100      	movs	r1, #0
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff fc1c 	bl	80025a4 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002d6c:	4b2a      	ldr	r3, [pc, #168]	; (8002e18 <HW_TS_Stop+0xec>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002d72:	7cfb      	ldrb	r3, [r7, #19]
 8002d74:	2b06      	cmp	r3, #6
 8002d76:	d137      	bne.n	8002de8 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if(LL_RTC_WAKEUP_IsEnabled(phrtc->Instance) == SET)
 8002d78:	4b28      	ldr	r3, [pc, #160]	; (8002e1c <HW_TS_Stop+0xf0>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff fa40 	bl	8002204 <LL_RTC_WAKEUP_IsEnabled>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d108      	bne.n	8002d9c <HW_TS_Stop+0x70>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8002d8a:	bf00      	nop
 8002d8c:	4b23      	ldr	r3, [pc, #140]	; (8002e1c <HW_TS_Stop+0xf0>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1f7      	bne.n	8002d8c <HW_TS_Stop+0x60>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8002d9c:	4b1f      	ldr	r3, [pc, #124]	; (8002e1c <HW_TS_Stop+0xf0>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	4b1d      	ldr	r3, [pc, #116]	; (8002e1c <HW_TS_Stop+0xf0>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dae:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8002db0:	bf00      	nop
 8002db2:	4b1a      	ldr	r3, [pc, #104]	; (8002e1c <HW_TS_Stop+0xf0>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f003 0304 	and.w	r3, r3, #4
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0f7      	beq.n	8002db2 <HW_TS_Stop+0x86>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002dc2:	4b16      	ldr	r3, [pc, #88]	; (8002e1c <HW_TS_Stop+0xf0>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	4b13      	ldr	r3, [pc, #76]	; (8002e1c <HW_TS_Stop+0xf0>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002dd6:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002dd8:	4b11      	ldr	r3, [pc, #68]	; (8002e20 <HW_TS_Stop+0xf4>)
 8002dda:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002dde:	615a      	str	r2, [r3, #20]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002de0:	2003      	movs	r0, #3
 8002de2:	f001 ff73 	bl	8004ccc <HAL_NVIC_ClearPendingIRQ>
 8002de6:	e007      	b.n	8002df8 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002de8:	4b0e      	ldr	r3, [pc, #56]	; (8002e24 <HW_TS_Stop+0xf8>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	7cfa      	ldrb	r2, [r7, #19]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d001      	beq.n	8002df8 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8002df4:	f7ff fcf6 	bl	80027e4 <RescheduleTimerList>
    }
  }

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002df8:	2003      	movs	r0, #3
 8002dfa:	f001 ff3d 	bl	8004c78 <HAL_NVIC_EnableIRQ>
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	f383 8810 	msr	PRIMASK, r3
}
 8002e08:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002e0a:	bf00      	nop
}
 8002e0c:	3718      	adds	r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	20000170 	.word	0x20000170
 8002e18:	20000200 	.word	0x20000200
 8002e1c:	2000020c 	.word	0x2000020c
 8002e20:	40010400 	.word	0x40010400
 8002e24:	20000201 	.word	0x20000201

08002e28 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	6039      	str	r1, [r7, #0]
 8002e32:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e34:	f3ef 8310 	mrs	r3, PRIMASK
 8002e38:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002e3c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e3e:	b672      	cpsid	i
}
 8002e40:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002e42:	2003      	movs	r0, #3
 8002e44:	f001 ff26 	bl	8004c94 <HAL_NVIC_DisableIRQ>

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8002e48:	79fa      	ldrb	r2, [r7, #7]
 8002e4a:	4928      	ldr	r1, [pc, #160]	; (8002eec <HW_TS_Start+0xc4>)
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	4413      	add	r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	440b      	add	r3, r1
 8002e56:	330c      	adds	r3, #12
 8002e58:	2202      	movs	r2, #2
 8002e5a:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002e5c:	79fa      	ldrb	r2, [r7, #7]
 8002e5e:	4923      	ldr	r1, [pc, #140]	; (8002eec <HW_TS_Start+0xc4>)
 8002e60:	4613      	mov	r3, r2
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	4413      	add	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	440b      	add	r3, r1
 8002e6a:	3308      	adds	r3, #8
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002e70:	79fa      	ldrb	r2, [r7, #7]
 8002e72:	491e      	ldr	r1, [pc, #120]	; (8002eec <HW_TS_Start+0xc4>)
 8002e74:	4613      	mov	r3, r2
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	4413      	add	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	440b      	add	r3, r1
 8002e7e:	3304      	adds	r3, #4
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002e84:	79fb      	ldrb	r3, [r7, #7]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff fae2 	bl	8002450 <linkTimer>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002e90:	4b17      	ldr	r3, [pc, #92]	; (8002ef0 <HW_TS_Start+0xc8>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002e96:	4b17      	ldr	r3, [pc, #92]	; (8002ef4 <HW_TS_Start+0xcc>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	7c7a      	ldrb	r2, [r7, #17]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d002      	beq.n	8002ea8 <HW_TS_Start+0x80>
  {
    RescheduleTimerList();
 8002ea2:	f7ff fc9f 	bl	80027e4 <RescheduleTimerList>
 8002ea6:	e013      	b.n	8002ed0 <HW_TS_Start+0xa8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002ea8:	79fa      	ldrb	r2, [r7, #7]
 8002eaa:	4910      	ldr	r1, [pc, #64]	; (8002eec <HW_TS_Start+0xc4>)
 8002eac:	4613      	mov	r3, r2
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	4413      	add	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	440b      	add	r3, r1
 8002eb6:	3308      	adds	r3, #8
 8002eb8:	6819      	ldr	r1, [r3, #0]
 8002eba:	8a7b      	ldrh	r3, [r7, #18]
 8002ebc:	79fa      	ldrb	r2, [r7, #7]
 8002ebe:	1ac9      	subs	r1, r1, r3
 8002ec0:	480a      	ldr	r0, [pc, #40]	; (8002eec <HW_TS_Start+0xc4>)
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	4413      	add	r3, r2
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	4403      	add	r3, r0
 8002ecc:	3308      	adds	r3, #8
 8002ece:	6019      	str	r1, [r3, #0]
  }

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002ed0:	2003      	movs	r0, #3
 8002ed2:	f001 fed1 	bl	8004c78 <HAL_NVIC_EnableIRQ>
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	f383 8810 	msr	PRIMASK, r3
}
 8002ee0:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002ee2:	bf00      	nop
}
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	20000170 	.word	0x20000170
 8002ef0:	20000200 	.word	0x20000200
 8002ef4:	20000201 	.word	0x20000201

08002ef8 <HW_TS_RTC_CountUpdated_AppNot>:
      break;
  }
}

__weak void HW_TS_RTC_CountUpdated_AppNot(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
}
 8002efc:	bf00      	nop
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
	...

08002f08 <Initialization>:



/* Private functions ----------------------------------------------------------*/
static void Initialization(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  LST_init_head (&HciAsynchEventQueue);
 8002f0c:	4803      	ldr	r0, [pc, #12]	; (8002f1c <Initialization+0x14>)
 8002f0e:	f000 fc43 	bl	8003798 <LST_init_head>

  Cmd_SetStatus(TL_BLE_HCI_CmdAvailable);
 8002f12:	2001      	movs	r0, #1
 8002f14:	f000 f804 	bl	8002f20 <Cmd_SetStatus>

  return;
 8002f18:	bf00      	nop
}
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	20000218 	.word	0x20000218

08002f20 <Cmd_SetStatus>:

static void Cmd_SetStatus(TL_BLE_HCI_CmdStatus_t hcicmdstatus)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	4603      	mov	r3, r0
 8002f28:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == TL_BLE_HCI_CmdBusy)
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d106      	bne.n	8002f3e <Cmd_SetStatus+0x1e>
  {
    TL_BLE_HCI_StatusNot(TL_BLE_HCI_CmdBusy);
 8002f30:	2000      	movs	r0, #0
 8002f32:	f001 fb91 	bl	8004658 <TL_BLE_HCI_StatusNot>
    HCICmdStatus = TL_BLE_HCI_CmdBusy;
 8002f36:	4b07      	ldr	r3, [pc, #28]	; (8002f54 <Cmd_SetStatus+0x34>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	701a      	strb	r2, [r3, #0]
  else
  {
    HCICmdStatus = TL_BLE_HCI_CmdAvailable;
    TL_BLE_HCI_StatusNot(TL_BLE_HCI_CmdAvailable);
  }
  return;
 8002f3c:	e006      	b.n	8002f4c <Cmd_SetStatus+0x2c>
    HCICmdStatus = TL_BLE_HCI_CmdAvailable;
 8002f3e:	4b05      	ldr	r3, [pc, #20]	; (8002f54 <Cmd_SetStatus+0x34>)
 8002f40:	2201      	movs	r2, #1
 8002f42:	701a      	strb	r2, [r3, #0]
    TL_BLE_HCI_StatusNot(TL_BLE_HCI_CmdAvailable);
 8002f44:	2001      	movs	r0, #1
 8002f46:	f001 fb87 	bl	8004658 <TL_BLE_HCI_StatusNot>
  return;
 8002f4a:	bf00      	nop
}
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	20000220 	.word	0x20000220

08002f58 <TL_BLE_EvtReceived>:

void TL_BLE_EvtReceived(TL_EvtPacket_t *hcievt)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint8_t evt_code;

  evt_code = hcievt->evtserial.evt.evtcode;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	7a5b      	ldrb	r3, [r3, #9]
 8002f64:	73fb      	strb	r3, [r7, #15]

  if ( (evt_code == TL_EVT_CS_OPCODE) || (evt_code == TL_EVT_CC_OPCODE ) )
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
 8002f68:	2b0f      	cmp	r3, #15
 8002f6a:	d002      	beq.n	8002f72 <TL_BLE_EvtReceived+0x1a>
 8002f6c:	7bfb      	ldrb	r3, [r7, #15]
 8002f6e:	2b0e      	cmp	r3, #14
 8002f70:	d106      	bne.n	8002f80 <TL_BLE_EvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	4808      	ldr	r0, [pc, #32]	; (8002f98 <TL_BLE_EvtReceived+0x40>)
 8002f76:	f000 fc41 	bl	80037fc <LST_insert_tail>
    TL_BLE_HCI_RxCmdResp(); /**< Notify the application a full Cmd Event has been received */
 8002f7a:	f000 f94c 	bl	8003216 <TL_BLE_HCI_RxCmdResp>
 8002f7e:	e006      	b.n	8002f8e <TL_BLE_EvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	4806      	ldr	r0, [pc, #24]	; (8002f9c <TL_BLE_EvtReceived+0x44>)
 8002f84:	f000 fc3a 	bl	80037fc <LST_insert_tail>
    TL_BLE_HCI_UserEvtProcReq((TL_PacketHeader_t*)&HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8002f88:	4804      	ldr	r0, [pc, #16]	; (8002f9c <TL_BLE_EvtReceived+0x44>)
 8002f8a:	f000 f98b 	bl	80032a4 <TL_BLE_HCI_UserEvtProcReq>
  }

  return;
 8002f8e:	bf00      	nop
}
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	20000228 	.word	0x20000228
 8002f9c:	20000218 	.word	0x20000218

08002fa0 <hci_timeout_callback>:

void hci_timeout_callback(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  HciLayerTimeout = TRUE;
 8002fa4:	4b04      	ldr	r3, [pc, #16]	; (8002fb8 <hci_timeout_callback+0x18>)
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	701a      	strb	r2, [r3, #0]

  /**
   * Unlock hci_send_req() that is waiting for an event that will never come
   */
  TL_BLE_HCI_RxCmdResp();
 8002faa:	f000 f934 	bl	8003216 <TL_BLE_HCI_RxCmdResp>

  /**
   * Notify the application the HCI interface has timed out
   */
  TL_BLE_HCI_ToNot();
 8002fae:	f000 f939 	bl	8003224 <TL_BLE_HCI_ToNot>

  return;
 8002fb2:	bf00      	nop
}
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	20000230 	.word	0x20000230

08002fbc <TL_BLE_HCI_Init>:

void TL_BLE_HCI_Init(TL_BLE_HCI_InitMode_t initmode, TL_CmdPacket_t * p_cmdbuffer, uint8_t *p_evtpool, uint32_t evtpoolsize)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60b9      	str	r1, [r7, #8]
 8002fc4:	607a      	str	r2, [r7, #4]
 8002fc6:	603b      	str	r3, [r7, #0]
 8002fc8:	4603      	mov	r3, r0
 8002fca:	73fb      	strb	r3, [r7, #15]
  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8002fcc:	480e      	ldr	r0, [pc, #56]	; (8003008 <TL_BLE_HCI_Init+0x4c>)
 8002fce:	f000 fbe3 	bl	8003798 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8002fd2:	4a0e      	ldr	r2, [pc, #56]	; (800300c <TL_BLE_HCI_Init+0x50>)
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	6013      	str	r3, [r2, #0]

  if(initmode == TL_BLE_HCI_InitFull)
 8002fd8:	7bfb      	ldrb	r3, [r7, #15]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d108      	bne.n	8002ff0 <TL_BLE_HCI_Init+0x34>
  {
    Initialization();
 8002fde:	f7ff ff93 	bl	8002f08 <Initialization>

    TL_BLE_Init(TL_BLE_Init_Full, p_cmdbuffer, p_evtpool, evtpoolsize);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	68b9      	ldr	r1, [r7, #8]
 8002fe8:	2001      	movs	r0, #1
 8002fea:	f000 fae1 	bl	80035b0 <TL_BLE_Init>
#endif /**< if (CFG_BLE_HCI_STDBY == 0) */

    TL_BLE_Init(TL_BLE_Init_Limited, p_cmdbuffer, p_evtpool, evtpoolsize);
  }

  return;
 8002fee:	e008      	b.n	8003002 <TL_BLE_HCI_Init+0x46>
    Initialization();
 8002ff0:	f7ff ff8a 	bl	8002f08 <Initialization>
    TL_BLE_Init(TL_BLE_Init_Limited, p_cmdbuffer, p_evtpool, evtpoolsize);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	68b9      	ldr	r1, [r7, #8]
 8002ffa:	2000      	movs	r0, #0
 8002ffc:	f000 fad8 	bl	80035b0 <TL_BLE_Init>
  return;
 8003000:	bf00      	nop
}
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	20000228 	.word	0x20000228
 800300c:	20000224 	.word	0x20000224

08003010 <CmdGetStatus>:

TL_BLE_HCI_CmdStatus_t CmdGetStatus(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  return HCICmdStatus;
 8003014:	4b03      	ldr	r3, [pc, #12]	; (8003024 <CmdGetStatus+0x14>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	b2db      	uxtb	r3, r3
}
 800301a:	4618      	mov	r0, r3
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	20000220 	.word	0x20000220

08003028 <TL_BLE_HCI_UserEvtProc>:

void TL_BLE_HCI_UserEvtProc(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievtbuffer;

  while(LST_is_empty(&HciAsynchEventQueue) == FALSE)
 800302e:	e00d      	b.n	800304c <TL_BLE_HCI_UserEvtProc+0x24>
  {
    LST_remove_head (&HciAsynchEventQueue, (tListNode **)&phcievtbuffer);
 8003030:	1d3b      	adds	r3, r7, #4
 8003032:	4619      	mov	r1, r3
 8003034:	480a      	ldr	r0, [pc, #40]	; (8003060 <TL_BLE_HCI_UserEvtProc+0x38>)
 8003036:	f000 fc28 	bl	800388a <LST_remove_head>
    TL_BLE_HCI_UserEvtRx((void*)&(phcievtbuffer->evtserial));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	3308      	adds	r3, #8
 800303e:	4618      	mov	r0, r3
 8003040:	f000 f93b 	bl	80032ba <TL_BLE_HCI_UserEvtRx>
    TL_BLE_EvtDone( phcievtbuffer);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fb76 	bl	8003738 <TL_BLE_EvtDone>
  while(LST_is_empty(&HciAsynchEventQueue) == FALSE)
 800304c:	4804      	ldr	r0, [pc, #16]	; (8003060 <TL_BLE_HCI_UserEvtProc+0x38>)
 800304e:	f000 fbb3 	bl	80037b8 <LST_is_empty>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0eb      	beq.n	8003030 <TL_BLE_HCI_UserEvtProc+0x8>
  }

  return;
 8003058:	bf00      	nop
}
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	20000218 	.word	0x20000218

08003064 <TL_BLE_HCI_SendCmd>:

int32_t TL_BLE_HCI_SendCmd( TL_BLE_HCI_Cmd_t *p_cmd )
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b088      	sub	sp, #32
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  int return_value;

  Cmd_SetStatus(TL_BLE_HCI_CmdBusy);
 800306c:	2000      	movs	r0, #0
 800306e:	f7ff ff57 	bl	8002f20 <Cmd_SetStatus>
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	885b      	ldrh	r3, [r3, #2]
 8003076:	b21b      	sxth	r3, r3
 8003078:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800307c:	b21a      	sxth	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	881b      	ldrh	r3, [r3, #0]
 8003082:	029b      	lsls	r3, r3, #10
 8003084:	b21b      	sxth	r3, r3
 8003086:	4313      	orrs	r3, r2
 8003088:	b21b      	sxth	r3, r3
 800308a:	837b      	strh	r3, [r7, #26]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	b2d9      	uxtb	r1, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	8b7b      	ldrh	r3, [r7, #26]
 8003098:	4618      	mov	r0, r3
 800309a:	f000 f885 	bl	80031a8 <SendCmd>

  HciLayerTimeout = FALSE;
 800309e:	4b3e      	ldr	r3, [pc, #248]	; (8003198 <TL_BLE_HCI_SendCmd+0x134>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	701a      	strb	r2, [r3, #0]
  TL_BLE_HCI_TimStart(DEFAULT_TIMEOUT, hci_timeout_callback, (uint8_t*)&hci_timer_id);
 80030a4:	4a3d      	ldr	r2, [pc, #244]	; (800319c <TL_BLE_HCI_SendCmd+0x138>)
 80030a6:	493e      	ldr	r1, [pc, #248]	; (80031a0 <TL_BLE_HCI_SendCmd+0x13c>)
 80030a8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80030ac:	f000 f8d6 	bl	800325c <TL_BLE_HCI_TimStart>

  while((CmdGetStatus() == TL_BLE_HCI_CmdBusy) && (HciLayerTimeout == FALSE))
 80030b0:	e052      	b.n	8003158 <TL_BLE_HCI_SendCmd+0xf4>
  {
    TL_BLE_HCI_WaitCmdResp();
 80030b2:	f000 f8be 	bl	8003232 <TL_BLE_HCI_WaitCmdResp>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80030b6:	e049      	b.n	800314c <TL_BLE_HCI_SendCmd+0xe8>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80030b8:	f107 0308 	add.w	r3, r7, #8
 80030bc:	4619      	mov	r1, r3
 80030be:	4839      	ldr	r0, [pc, #228]	; (80031a4 <TL_BLE_HCI_SendCmd+0x140>)
 80030c0:	f000 fbe3 	bl	800388a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_EVT_CS_OPCODE)
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	7a5b      	ldrb	r3, [r3, #9]
 80030c8:	2b0f      	cmp	r3, #15
 80030ca:	d115      	bne.n	80030f8 <TL_BLE_HCI_SendCmd+0x94>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	330b      	adds	r3, #11
 80030d0:	60fb      	str	r3, [r7, #12]
        if(pcommand_status_event->cmdcode == opcode)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	885b      	ldrh	r3, [r3, #2]
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	8b7a      	ldrh	r2, [r7, #26]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d104      	bne.n	80030e8 <TL_BLE_HCI_SendCmd+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	7812      	ldrb	r2, [r2, #0]
 80030e6:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	785b      	ldrb	r3, [r3, #1]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d029      	beq.n	8003144 <TL_BLE_HCI_SendCmd+0xe0>
        {
          Cmd_SetStatus(TL_BLE_HCI_CmdAvailable);
 80030f0:	2001      	movs	r0, #1
 80030f2:	f7ff ff15 	bl	8002f20 <Cmd_SetStatus>
 80030f6:	e025      	b.n	8003144 <TL_BLE_HCI_SendCmd+0xe0>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	330b      	adds	r3, #11
 80030fc:	617b      	str	r3, [r7, #20]

        if(pcommand_complete_event->cmdcode == opcode)
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003104:	b29b      	uxth	r3, r3
 8003106:	8b7a      	ldrh	r2, [r7, #26]
 8003108:	429a      	cmp	r2, r3
 800310a:	d114      	bne.n	8003136 <TL_BLE_HCI_SendCmd+0xd2>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_CC_HDR_SIZE;
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	7a9b      	ldrb	r3, [r3, #10]
 8003110:	3b03      	subs	r3, #3
 8003112:	74fb      	strb	r3, [r7, #19]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	695a      	ldr	r2, [r3, #20]
 8003118:	7cfb      	ldrb	r3, [r7, #19]
 800311a:	429a      	cmp	r2, r3
 800311c:	bfa8      	it	ge
 800311e:	461a      	movge	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6918      	ldr	r0, [r3, #16]
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	1cd9      	adds	r1, r3, #3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	461a      	mov	r2, r3
 8003132:	f003 f89b 	bl	800626c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d002      	beq.n	8003144 <TL_BLE_HCI_SendCmd+0xe0>
        {
          Cmd_SetStatus(TL_BLE_HCI_CmdAvailable);
 800313e:	2001      	movs	r0, #1
 8003140:	f7ff feee 	bl	8002f20 <Cmd_SetStatus>
        }
      }

      TL_BLE_EvtDone( pevtpacket);
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	4618      	mov	r0, r3
 8003148:	f000 faf6 	bl	8003738 <TL_BLE_EvtDone>
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800314c:	4815      	ldr	r0, [pc, #84]	; (80031a4 <TL_BLE_HCI_SendCmd+0x140>)
 800314e:	f000 fb33 	bl	80037b8 <LST_is_empty>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0af      	beq.n	80030b8 <TL_BLE_HCI_SendCmd+0x54>
  while((CmdGetStatus() == TL_BLE_HCI_CmdBusy) && (HciLayerTimeout == FALSE))
 8003158:	f7ff ff5a 	bl	8003010 <CmdGetStatus>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d104      	bne.n	800316c <TL_BLE_HCI_SendCmd+0x108>
 8003162:	4b0d      	ldr	r3, [pc, #52]	; (8003198 <TL_BLE_HCI_SendCmd+0x134>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0a2      	beq.n	80030b2 <TL_BLE_HCI_SendCmd+0x4e>
    }
  }

  TL_BLE_HCI_TimStop(hci_timer_id);
 800316c:	4b0b      	ldr	r3, [pc, #44]	; (800319c <TL_BLE_HCI_SendCmd+0x138>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	b2db      	uxtb	r3, r3
 8003172:	4618      	mov	r0, r3
 8003174:	f000 f864 	bl	8003240 <TL_BLE_HCI_TimStop>

  if(HciLayerTimeout == TRUE)
 8003178:	4b07      	ldr	r3, [pc, #28]	; (8003198 <TL_BLE_HCI_SendCmd+0x134>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b01      	cmp	r3, #1
 8003180:	d103      	bne.n	800318a <TL_BLE_HCI_SendCmd+0x126>
  {
    return_value = -1;
 8003182:	f04f 33ff 	mov.w	r3, #4294967295
 8003186:	61fb      	str	r3, [r7, #28]
 8003188:	e001      	b.n	800318e <TL_BLE_HCI_SendCmd+0x12a>
  }
  else
  {
    return_value = 0;
 800318a:	2300      	movs	r3, #0
 800318c:	61fb      	str	r3, [r7, #28]
  }

  return return_value;
 800318e:	69fb      	ldr	r3, [r7, #28]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3720      	adds	r7, #32
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	20000230 	.word	0x20000230
 800319c:	20000216 	.word	0x20000216
 80031a0:	08002fa1 	.word	0x08002fa1
 80031a4:	20000228 	.word	0x20000228

080031a8 <SendCmd>:

void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	603a      	str	r2, [r7, #0]
 80031b2:	80fb      	strh	r3, [r7, #6]
 80031b4:	460b      	mov	r3, r1
 80031b6:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80031b8:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <SendCmd+0x40>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	88fa      	ldrh	r2, [r7, #6]
 80031be:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80031c2:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <SendCmd+0x40>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	797a      	ldrb	r2, [r7, #5]
 80031c8:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80031ca:	4b07      	ldr	r3, [pc, #28]	; (80031e8 <SendCmd+0x40>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	330c      	adds	r3, #12
 80031d0:	797a      	ldrb	r2, [r7, #5]
 80031d2:	6839      	ldr	r1, [r7, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f003 f849 	bl	800626c <memcpy>

  TL_BLE_SendCmd();
 80031da:	f000 fa1f 	bl	800361c <TL_BLE_SendCmd>

  return;
 80031de:	bf00      	nop
}
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	20000224 	.word	0x20000224

080031ec <hci_send_req>:



/* This API is imposed by the MW */
int32_t hci_send_req(struct hci_request *r, uint8_t async)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	460b      	mov	r3, r1
 80031f6:	70fb      	strb	r3, [r7, #3]
  return ( TL_BLE_HCI_SendCmd( (TL_BLE_HCI_Cmd_t *)r ) );
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7ff ff33 	bl	8003064 <TL_BLE_HCI_SendCmd>
 80031fe:	4603      	mov	r3, r0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <TL_BLE_R_EvtProcReq>:
/* Pubblic Functions Definition ----------------------------------------------*/



void TL_BLE_R_EvtProcReq(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  SCH_SetTask(CFG_IdleTask_TlEvt);
 800320c:	2000      	movs	r0, #0
 800320e:	f000 fd33 	bl	8003c78 <SCH_SetTask>

  return;
 8003212:	bf00      	nop
}
 8003214:	bd80      	pop	{r7, pc}

08003216 <TL_BLE_HCI_RxCmdResp>:

void TL_BLE_HCI_RxCmdResp()
{
 8003216:	b580      	push	{r7, lr}
 8003218:	af00      	add	r7, sp, #0
  SCH_SetEvt(CFG_IdleEvt_HciCmdEvtResp);
 800321a:	2000      	movs	r0, #0
 800321c:	f000 fd98 	bl	8003d50 <SCH_SetEvt>

  return;
 8003220:	bf00      	nop
}
 8003222:	bd80      	pop	{r7, pc}

08003224 <TL_BLE_HCI_ToNot>:

void TL_BLE_HCI_ToNot(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  return;
 8003228:	bf00      	nop
}
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <TL_BLE_HCI_WaitCmdResp>:

void TL_BLE_HCI_WaitCmdResp(void)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	af00      	add	r7, sp, #0
  SCH_WaitEvt(CFG_IdleEvt_HciCmdEvtResp);
 8003236:	2000      	movs	r0, #0
 8003238:	f000 fdae 	bl	8003d98 <SCH_WaitEvt>

  return;
 800323c:	bf00      	nop
}
 800323e:	bd80      	pop	{r7, pc}

08003240 <TL_BLE_HCI_TimStop>:

void TL_BLE_HCI_TimStop(uint8_t timerID)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	71fb      	strb	r3, [r7, #7]
  HW_TS_Delete(timerID);
 800324a:	79fb      	ldrb	r3, [r7, #7]
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff fd53 	bl	8002cf8 <HW_TS_Delete>

  return;
 8003252:	bf00      	nop
}
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
	...

0800325c <TL_BLE_HCI_TimStart>:

void TL_BLE_HCI_TimStart(uint32_t expiryTime, void(*timercb)(void), uint8_t *timerID)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  HW_TS_Create(CFG_TimProcID_isr, timerID, hw_ts_SingleShot, (HW_TS_pTimerCb_t) timercb);
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	2200      	movs	r2, #0
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	2000      	movs	r0, #0
 8003270:	f7ff fcc8 	bl	8002c04 <HW_TS_Create>
  HW_TS_Start(*timerID, expiryTime*1000/CFG_TS_TICK_VAL);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	7818      	ldrb	r0, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800327e:	fb02 f203 	mul.w	r2, r2, r3
 8003282:	4b07      	ldr	r3, [pc, #28]	; (80032a0 <TL_BLE_HCI_TimStart+0x44>)
 8003284:	fba3 1302 	umull	r1, r3, r3, r2
 8003288:	1ad2      	subs	r2, r2, r3
 800328a:	0852      	lsrs	r2, r2, #1
 800328c:	4413      	add	r3, r2
 800328e:	095b      	lsrs	r3, r3, #5
 8003290:	4619      	mov	r1, r3
 8003292:	f7ff fdc9 	bl	8002e28 <HW_TS_Start>

  return;
 8003296:	bf00      	nop
}
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	04104105 	.word	0x04104105

080032a4 <TL_BLE_HCI_UserEvtProcReq>:
 *
 * @param  None
 * @retval None
 */
void TL_BLE_HCI_UserEvtProcReq( TL_PacketHeader_t *p_userevt_queue )
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  SCH_SetTask(CFG_IdleTask_HciAsynchEvt);
 80032ac:	2005      	movs	r0, #5
 80032ae:	f000 fce3 	bl	8003c78 <SCH_SetTask>

  return;
 80032b2:	bf00      	nop
}
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <TL_BLE_HCI_UserEvtRx>:
 *
 * @param  pckt: The user event received from the BlueNRG device
 * @retval None
 */
void TL_BLE_HCI_UserEvtRx(void *pckt)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b082      	sub	sp, #8
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  SVCCTL_HCI_UserEvtRx(pckt);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7fd ff8a 	bl	80011dc <SVCCTL_HCI_UserEvtRx>
}
 80032c8:	bf00      	nop
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <TL_BLE_R_EvtInput>:
static void Event_Queue_Process(TL_BLE_R_EvtPacketType_t tl_event_queue_type);

/* Public Functions Definition ------------------------------------------------------*/

void TL_BLE_R_EvtInput(TL_BLE_R_EvtPacketType_t hci_evt_packet_type, uint8_t *hci_evt_buffer)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	4603      	mov	r3, r0
 80032d8:	6039      	str	r1, [r7, #0]
 80032da:	71fb      	strb	r3, [r7, #7]
  LST_insert_tail (&TLQueueEvtContext[hci_evt_packet_type].TlBufferQueue, (tListNode *)hci_evt_buffer);
 80032dc:	79fa      	ldrb	r2, [r7, #7]
 80032de:	4613      	mov	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	1a9b      	subs	r3, r3, r2
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	4a06      	ldr	r2, [pc, #24]	; (8003300 <TL_BLE_R_EvtInput+0x30>)
 80032e8:	4413      	add	r3, r2
 80032ea:	6839      	ldr	r1, [r7, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f000 fa85 	bl	80037fc <LST_insert_tail>

  TL_BLE_R_EvtProcReq();
 80032f2:	f7ff ff89 	bl	8003208 <TL_BLE_R_EvtProcReq>

  return;
 80032f6:	bf00      	nop
}
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	20000340 	.word	0x20000340

08003304 <TL_BLE_R_EvtProc>:

void TL_BLE_R_EvtProc(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  /**
   * Read CMD Event Queue
   */
  Event_Queue_Process(TL_BLE_R_HciCmdEvt);
 8003308:	2001      	movs	r0, #1
 800330a:	f000 f82d 	bl	8003368 <Event_Queue_Process>

  /**
   * Read Asynch Event Queue
   */
  Event_Queue_Process(TL_BLE_R_HciAsynchEvt);
 800330e:	2000      	movs	r0, #0
 8003310:	f000 f82a 	bl	8003368 <Event_Queue_Process>

  return;
 8003314:	bf00      	nop
}
 8003316:	bd80      	pop	{r7, pc}

08003318 <TL_BLE_R_Init>:

void TL_BLE_R_Init(TL_CmdPacket_t *cmdbuffer)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  TLQueueEvtContext[TL_BLE_R_HciAsynchEvt].HciPacketStatus = hci_packet_start;
 8003320:	4b0d      	ldr	r3, [pc, #52]	; (8003358 <TL_BLE_R_Init+0x40>)
 8003322:	2200      	movs	r2, #0
 8003324:	721a      	strb	r2, [r3, #8]
  TLQueueEvtContext[TL_BLE_R_HciCmdEvt].HciPacketStatus = hci_packet_start;
 8003326:	4b0c      	ldr	r3, [pc, #48]	; (8003358 <TL_BLE_R_Init+0x40>)
 8003328:	2200      	movs	r2, #0
 800332a:	759a      	strb	r2, [r3, #22]
  TLQueueEvtContext[TL_BLE_R_HciAsynchEvt].HciLargeBufferOffset = 0;
 800332c:	4b0a      	ldr	r3, [pc, #40]	; (8003358 <TL_BLE_R_Init+0x40>)
 800332e:	2200      	movs	r2, #0
 8003330:	819a      	strh	r2, [r3, #12]
  TLQueueEvtContext[TL_BLE_R_HciCmdEvt].HciLargeBufferOffset = 0;
 8003332:	4b09      	ldr	r3, [pc, #36]	; (8003358 <TL_BLE_R_Init+0x40>)
 8003334:	2200      	movs	r2, #0
 8003336:	835a      	strh	r2, [r3, #26]

  HciAsynchEventLargeBufferStatus = HciAsynchEventLargeBuffer_Free;
 8003338:	4b08      	ldr	r3, [pc, #32]	; (800335c <TL_BLE_R_Init+0x44>)
 800333a:	2200      	movs	r2, #0
 800333c:	701a      	strb	r2, [r3, #0]

  LST_init_head (&TLQueueEvtContext[TL_BLE_R_HciAsynchEvt].TlBufferQueue);
 800333e:	4806      	ldr	r0, [pc, #24]	; (8003358 <TL_BLE_R_Init+0x40>)
 8003340:	f000 fa2a 	bl	8003798 <LST_init_head>
  LST_init_head (&TLQueueEvtContext[TL_BLE_R_HciCmdEvt].TlBufferQueue);
 8003344:	4806      	ldr	r0, [pc, #24]	; (8003360 <TL_BLE_R_Init+0x48>)
 8003346:	f000 fa27 	bl	8003798 <LST_init_head>

  pCmdBuffer = cmdbuffer;
 800334a:	4a06      	ldr	r2, [pc, #24]	; (8003364 <TL_BLE_R_Init+0x4c>)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6013      	str	r3, [r2, #0]

  return;
 8003350:	bf00      	nop
}
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	20000340 	.word	0x20000340
 800335c:	20000231 	.word	0x20000231
 8003360:	2000034e 	.word	0x2000034e
 8003364:	2000035c 	.word	0x2000035c

08003368 <Event_Queue_Process>:

/* Private Functions Definition ------------------------------------------------------*/
static void Event_Queue_Process(TL_BLE_R_EvtPacketType_t tl_event_queue_type)
{
 8003368:	b590      	push	{r4, r7, lr}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	4603      	mov	r3, r0
 8003370:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t * ptl_evt_buffer;
  TL_EvtPacket_t *plarge_hci_buffer;

  if(tl_event_queue_type == TL_BLE_R_HciAsynchEvt)
 8003372:	79fb      	ldrb	r3, [r7, #7]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d102      	bne.n	800337e <Event_Queue_Process+0x16>
  {
    plarge_hci_buffer = (TL_EvtPacket_t *)&HciLargeAsynchBuffer;
 8003378:	4b78      	ldr	r3, [pc, #480]	; (800355c <Event_Queue_Process+0x1f4>)
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	e0d2      	b.n	8003524 <Event_Queue_Process+0x1bc>
  }
  else
  {
    plarge_hci_buffer = (TL_EvtPacket_t*)pCmdBuffer;
 800337e:	4b78      	ldr	r3, [pc, #480]	; (8003560 <Event_Queue_Process+0x1f8>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	60fb      	str	r3, [r7, #12]
  }

  while((LST_is_empty (&TLQueueEvtContext[tl_event_queue_type].TlBufferQueue) == FALSE) && ((HciAsynchEventLargeBufferStatus == HciAsynchEventLargeBuffer_Free) || (tl_event_queue_type == TL_BLE_R_HciCmdEvt)))
 8003384:	e0ce      	b.n	8003524 <Event_Queue_Process+0x1bc>
  {
    LST_remove_head (&TLQueueEvtContext[tl_event_queue_type].TlBufferQueue, (tListNode **)&ptl_evt_buffer);
 8003386:	79fa      	ldrb	r2, [r7, #7]
 8003388:	4613      	mov	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	1a9b      	subs	r3, r3, r2
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	4a74      	ldr	r2, [pc, #464]	; (8003564 <Event_Queue_Process+0x1fc>)
 8003392:	4413      	add	r3, r2
 8003394:	f107 0208 	add.w	r2, r7, #8
 8003398:	4611      	mov	r1, r2
 800339a:	4618      	mov	r0, r3
 800339c:	f000 fa75 	bl	800388a <LST_remove_head>
    if(TLQueueEvtContext[tl_event_queue_type].HciPacketStatus == hci_packet_start)
 80033a0:	79fa      	ldrb	r2, [r7, #7]
 80033a2:	4970      	ldr	r1, [pc, #448]	; (8003564 <Event_Queue_Process+0x1fc>)
 80033a4:	4613      	mov	r3, r2
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	1a9b      	subs	r3, r3, r2
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	440b      	add	r3, r1
 80033ae:	3308      	adds	r3, #8
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10e      	bne.n	80033d4 <Event_Queue_Process+0x6c>
    {
      TLQueueEvtContext[tl_event_queue_type].HciPacketLengthOfDataLeftToReceiveFromTl = ptl_evt_buffer->evtserial.evt.plen + TL_EVT_HDR_SIZE;
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	7a9b      	ldrb	r3, [r3, #10]
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	79fa      	ldrb	r2, [r7, #7]
 80033be:	3303      	adds	r3, #3
 80033c0:	b298      	uxth	r0, r3
 80033c2:	4968      	ldr	r1, [pc, #416]	; (8003564 <Event_Queue_Process+0x1fc>)
 80033c4:	4613      	mov	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	1a9b      	subs	r3, r3, r2
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	440b      	add	r3, r1
 80033ce:	330a      	adds	r3, #10
 80033d0:	4602      	mov	r2, r0
 80033d2:	801a      	strh	r2, [r3, #0]
    }

    if(TLQueueEvtContext[tl_event_queue_type].HciPacketLengthOfDataLeftToReceiveFromTl > TL_BLE_EVENT_FRAME_SIZE)
 80033d4:	79fa      	ldrb	r2, [r7, #7]
 80033d6:	4963      	ldr	r1, [pc, #396]	; (8003564 <Event_Queue_Process+0x1fc>)
 80033d8:	4613      	mov	r3, r2
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	440b      	add	r3, r1
 80033e2:	330a      	adds	r3, #10
 80033e4:	881b      	ldrh	r3, [r3, #0]
 80033e6:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 80033ea:	d94e      	bls.n	800348a <Event_Queue_Process+0x122>
    {
      /**
       * The packet is not complete
       */
      TLQueueEvtContext[tl_event_queue_type].HciPacketStatus = hci_packet_cont;
 80033ec:	79fa      	ldrb	r2, [r7, #7]
 80033ee:	495d      	ldr	r1, [pc, #372]	; (8003564 <Event_Queue_Process+0x1fc>)
 80033f0:	4613      	mov	r3, r2
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	1a9b      	subs	r3, r3, r2
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	440b      	add	r3, r1
 80033fa:	3308      	adds	r3, #8
 80033fc:	2201      	movs	r2, #1
 80033fe:	701a      	strb	r2, [r3, #0]
      TLQueueEvtContext[tl_event_queue_type].HciPacketLengthOfDataLeftToReceiveFromTl -= TL_BLE_EVENT_FRAME_SIZE;
 8003400:	79fa      	ldrb	r2, [r7, #7]
 8003402:	4958      	ldr	r1, [pc, #352]	; (8003564 <Event_Queue_Process+0x1fc>)
 8003404:	4613      	mov	r3, r2
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	440b      	add	r3, r1
 800340e:	330a      	adds	r3, #10
 8003410:	881b      	ldrh	r3, [r3, #0]
 8003412:	79fa      	ldrb	r2, [r7, #7]
 8003414:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003418:	b298      	uxth	r0, r3
 800341a:	4952      	ldr	r1, [pc, #328]	; (8003564 <Event_Queue_Process+0x1fc>)
 800341c:	4613      	mov	r3, r2
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	1a9b      	subs	r3, r3, r2
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	440b      	add	r3, r1
 8003426:	330a      	adds	r3, #10
 8003428:	4602      	mov	r2, r0
 800342a:	801a      	strh	r2, [r3, #0]
      memcpy((uint8_t*)&plarge_hci_buffer->evtserial + TLQueueEvtContext[tl_event_queue_type].HciLargeBufferOffset, &ptl_evt_buffer->evtserial, TL_BLE_EVENT_FRAME_SIZE);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f103 0108 	add.w	r1, r3, #8
 8003432:	79fa      	ldrb	r2, [r7, #7]
 8003434:	484b      	ldr	r0, [pc, #300]	; (8003564 <Event_Queue_Process+0x1fc>)
 8003436:	4613      	mov	r3, r2
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	1a9b      	subs	r3, r3, r2
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	4403      	add	r3, r0
 8003440:	330c      	adds	r3, #12
 8003442:	881b      	ldrh	r3, [r3, #0]
 8003444:	18c8      	adds	r0, r1, r3
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	3308      	adds	r3, #8
 800344a:	f44f 7281 	mov.w	r2, #258	; 0x102
 800344e:	4619      	mov	r1, r3
 8003450:	f002 ff0c 	bl	800626c <memcpy>
      MM_ReleaseBuffer((MM_pBufAdd_t)ptl_evt_buffer);
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	4618      	mov	r0, r3
 8003458:	f000 fb5a 	bl	8003b10 <MM_ReleaseBuffer>
      TLQueueEvtContext[tl_event_queue_type].HciLargeBufferOffset += TL_BLE_EVENT_FRAME_SIZE;
 800345c:	79fa      	ldrb	r2, [r7, #7]
 800345e:	4941      	ldr	r1, [pc, #260]	; (8003564 <Event_Queue_Process+0x1fc>)
 8003460:	4613      	mov	r3, r2
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	1a9b      	subs	r3, r3, r2
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	440b      	add	r3, r1
 800346a:	330c      	adds	r3, #12
 800346c:	881b      	ldrh	r3, [r3, #0]
 800346e:	79fa      	ldrb	r2, [r7, #7]
 8003470:	f503 7381 	add.w	r3, r3, #258	; 0x102
 8003474:	b298      	uxth	r0, r3
 8003476:	493b      	ldr	r1, [pc, #236]	; (8003564 <Event_Queue_Process+0x1fc>)
 8003478:	4613      	mov	r3, r2
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	1a9b      	subs	r3, r3, r2
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	440b      	add	r3, r1
 8003482:	330c      	adds	r3, #12
 8003484:	4602      	mov	r2, r0
 8003486:	801a      	strh	r2, [r3, #0]
 8003488:	e04c      	b.n	8003524 <Event_Queue_Process+0x1bc>
    else
    {
      /**
       * End of HCI packet
       */
      if(TLQueueEvtContext[tl_event_queue_type].HciPacketStatus == hci_packet_cont)
 800348a:	79fa      	ldrb	r2, [r7, #7]
 800348c:	4935      	ldr	r1, [pc, #212]	; (8003564 <Event_Queue_Process+0x1fc>)
 800348e:	4613      	mov	r3, r2
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	1a9b      	subs	r3, r3, r2
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	440b      	add	r3, r1
 8003498:	3308      	adds	r3, #8
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d129      	bne.n	80034f4 <Event_Queue_Process+0x18c>
      {
        memcpy((uint8_t*)&plarge_hci_buffer->evtserial + TLQueueEvtContext[tl_event_queue_type].HciLargeBufferOffset, &ptl_evt_buffer->evtserial, TLQueueEvtContext[tl_event_queue_type].HciPacketLengthOfDataLeftToReceiveFromTl);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f103 0108 	add.w	r1, r3, #8
 80034a6:	79fa      	ldrb	r2, [r7, #7]
 80034a8:	482e      	ldr	r0, [pc, #184]	; (8003564 <Event_Queue_Process+0x1fc>)
 80034aa:	4613      	mov	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	1a9b      	subs	r3, r3, r2
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	4403      	add	r3, r0
 80034b4:	330c      	adds	r3, #12
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	18c8      	adds	r0, r1, r3
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	f103 0108 	add.w	r1, r3, #8
 80034c0:	79fa      	ldrb	r2, [r7, #7]
 80034c2:	4c28      	ldr	r4, [pc, #160]	; (8003564 <Event_Queue_Process+0x1fc>)
 80034c4:	4613      	mov	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	1a9b      	subs	r3, r3, r2
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	4423      	add	r3, r4
 80034ce:	330a      	adds	r3, #10
 80034d0:	881b      	ldrh	r3, [r3, #0]
 80034d2:	461a      	mov	r2, r3
 80034d4:	f002 feca 	bl	800626c <memcpy>
        MM_ReleaseBuffer((MM_pBufAdd_t)ptl_evt_buffer);
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 fb18 	bl	8003b10 <MM_ReleaseBuffer>
        if(tl_event_queue_type == TL_BLE_R_HciAsynchEvt)
 80034e0:	79fb      	ldrb	r3, [r7, #7]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d102      	bne.n	80034ec <Event_Queue_Process+0x184>
        {
          /**
           * It shall be set to busy only for Asynchronous Events
           */
          HciAsynchEventLargeBufferStatus = HciAsynchEventLargeBuffer_Busy;
 80034e6:	4b20      	ldr	r3, [pc, #128]	; (8003568 <Event_Queue_Process+0x200>)
 80034e8:	2201      	movs	r2, #1
 80034ea:	701a      	strb	r2, [r3, #0]
        }
        TL_BLE_EvtReceived( (TL_EvtPacket_t *)plarge_hci_buffer );
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f7ff fd33 	bl	8002f58 <TL_BLE_EvtReceived>
 80034f2:	e003      	b.n	80034fc <Event_Queue_Process+0x194>
      }
      else
      {
        TL_BLE_EvtReceived( (TL_EvtPacket_t *)ptl_evt_buffer );
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff fd2e 	bl	8002f58 <TL_BLE_EvtReceived>
      }
      TLQueueEvtContext[tl_event_queue_type].HciPacketStatus = hci_packet_start;
 80034fc:	79fa      	ldrb	r2, [r7, #7]
 80034fe:	4919      	ldr	r1, [pc, #100]	; (8003564 <Event_Queue_Process+0x1fc>)
 8003500:	4613      	mov	r3, r2
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	1a9b      	subs	r3, r3, r2
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	440b      	add	r3, r1
 800350a:	3308      	adds	r3, #8
 800350c:	2200      	movs	r2, #0
 800350e:	701a      	strb	r2, [r3, #0]
      TLQueueEvtContext[tl_event_queue_type].HciLargeBufferOffset  = 0;
 8003510:	79fa      	ldrb	r2, [r7, #7]
 8003512:	4914      	ldr	r1, [pc, #80]	; (8003564 <Event_Queue_Process+0x1fc>)
 8003514:	4613      	mov	r3, r2
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	1a9b      	subs	r3, r3, r2
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	440b      	add	r3, r1
 800351e:	330c      	adds	r3, #12
 8003520:	2200      	movs	r2, #0
 8003522:	801a      	strh	r2, [r3, #0]
  while((LST_is_empty (&TLQueueEvtContext[tl_event_queue_type].TlBufferQueue) == FALSE) && ((HciAsynchEventLargeBufferStatus == HciAsynchEventLargeBuffer_Free) || (tl_event_queue_type == TL_BLE_R_HciCmdEvt)))
 8003524:	79fa      	ldrb	r2, [r7, #7]
 8003526:	4613      	mov	r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	1a9b      	subs	r3, r3, r2
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	4a0d      	ldr	r2, [pc, #52]	; (8003564 <Event_Queue_Process+0x1fc>)
 8003530:	4413      	add	r3, r2
 8003532:	4618      	mov	r0, r3
 8003534:	f000 f940 	bl	80037b8 <LST_is_empty>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d109      	bne.n	8003552 <Event_Queue_Process+0x1ea>
 800353e:	4b0a      	ldr	r3, [pc, #40]	; (8003568 <Event_Queue_Process+0x200>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	f43f af1f 	beq.w	8003386 <Event_Queue_Process+0x1e>
 8003548:	79fb      	ldrb	r3, [r7, #7]
 800354a:	2b01      	cmp	r3, #1
 800354c:	f43f af1b 	beq.w	8003386 <Event_Queue_Process+0x1e>
    }
  }

  return;
 8003550:	bf00      	nop
 8003552:	bf00      	nop
}
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	bd90      	pop	{r4, r7, pc}
 800355a:	bf00      	nop
 800355c:	20000234 	.word	0x20000234
 8003560:	2000035c 	.word	0x2000035c
 8003564:	20000340 	.word	0x20000340
 8003568:	20000231 	.word	0x20000231

0800356c <TL_BLE_R_EvtDone>:

void TL_BLE_R_EvtDone(TL_EvtPacket_t * hcievt)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  if(hcievt == (TL_EvtPacket_t *)&HciLargeAsynchBuffer)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a0b      	ldr	r2, [pc, #44]	; (80035a4 <TL_BLE_R_EvtDone+0x38>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d105      	bne.n	8003588 <TL_BLE_R_EvtDone+0x1c>
  {
    HciAsynchEventLargeBufferStatus = HciAsynchEventLargeBuffer_Free;
 800357c:	4b0a      	ldr	r3, [pc, #40]	; (80035a8 <TL_BLE_R_EvtDone+0x3c>)
 800357e:	2200      	movs	r2, #0
 8003580:	701a      	strb	r2, [r3, #0]

    /**
     * Check if there are waiting events to be copied in the large buffer
     */
    TL_BLE_R_EvtProcReq();
 8003582:	f7ff fe41 	bl	8003208 <TL_BLE_R_EvtProcReq>
  else if(hcievt != (TL_EvtPacket_t *)pCmdBuffer)
  {
    MM_ReleaseBuffer((MM_pBufAdd_t)hcievt);
  }

  return;
 8003586:	e008      	b.n	800359a <TL_BLE_R_EvtDone+0x2e>
  else if(hcievt != (TL_EvtPacket_t *)pCmdBuffer)
 8003588:	4b08      	ldr	r3, [pc, #32]	; (80035ac <TL_BLE_R_EvtDone+0x40>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	429a      	cmp	r2, r3
 8003590:	d003      	beq.n	800359a <TL_BLE_R_EvtDone+0x2e>
    MM_ReleaseBuffer((MM_pBufAdd_t)hcievt);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 fabc 	bl	8003b10 <MM_ReleaseBuffer>
  return;
 8003598:	bf00      	nop
 800359a:	bf00      	nop
}
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	20000234 	.word	0x20000234
 80035a8:	20000231 	.word	0x20000231
 80035ac:	2000035c 	.word	0x2000035c

080035b0 <TL_BLE_Init>:
/**
 * HCI wrapper
 */

void TL_BLE_Init(TL_BLE_InitMode_t initmode, TL_CmdPacket_t * cmdbuffer, uint8_t *evtpool, uint32_t evtpoolsize)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	607a      	str	r2, [r7, #4]
 80035ba:	603b      	str	r3, [r7, #0]
 80035bc:	4603      	mov	r3, r0
 80035be:	73fb      	strb	r3, [r7, #15]
  TlSpiIsrContext.TlPacketStatus = tl_packet_start;
 80035c0:	4b13      	ldr	r3, [pc, #76]	; (8003610 <TL_BLE_Init+0x60>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	701a      	strb	r2, [r3, #0]

  MM_Init(evtpool, evtpoolsize, ELT_SIZE);
 80035c6:	f44f 7285 	mov.w	r2, #266	; 0x10a
 80035ca:	6839      	ldr	r1, [r7, #0]
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 fa39 	bl	8003a44 <MM_Init>

  pCmdBuffer = cmdbuffer;
 80035d2:	4a10      	ldr	r2, [pc, #64]	; (8003614 <TL_BLE_Init+0x64>)
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	6013      	str	r3, [r2, #0]

  TL_BLE_R_Init(cmdbuffer);
 80035d8:	68b8      	ldr	r0, [r7, #8]
 80035da:	f7ff fe9d 	bl	8003318 <TL_BLE_R_Init>

  if( initmode == TL_BLE_Init_Limited)
 80035de:	7bfb      	ldrb	r3, [r7, #15]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d103      	bne.n	80035ec <TL_BLE_Init+0x3c>
  {
    HW_BNRG_Init(HW_BNRG_Limited);
 80035e4:	2000      	movs	r0, #0
 80035e6:	f7fe fbd3 	bl	8001d90 <HW_BNRG_Init>
 80035ea:	e00a      	b.n	8003602 <TL_BLE_Init+0x52>
  else
  {
    /**
     * Initialize the BlueNRG SPI driver
     */
    HW_BNRG_Init(HW_BNRG_Full);
 80035ec:	2001      	movs	r0, #1
 80035ee:	f7fe fbcf 	bl	8001d90 <HW_BNRG_Init>

    /**
     * Wait for the Reset Event from BlueNRG
     */
    while(HAL_GPIO_ReadPin(BNRG_SPI_IRQ_PORT, BNRG_SPI_IRQ_PIN) == GPIO_PIN_RESET);
 80035f2:	bf00      	nop
 80035f4:	2140      	movs	r1, #64	; 0x40
 80035f6:	4808      	ldr	r0, [pc, #32]	; (8003618 <TL_BLE_Init+0x68>)
 80035f8:	f001 fdd8 	bl	80051ac <HAL_GPIO_ReadPin>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0f8      	beq.n	80035f4 <TL_BLE_Init+0x44>
  }

  /**
   * Provide event buffer to TL layer
   */
  Allocate_New_Buffer_To_TL();
 8003602:	f000 f8a5 	bl	8003750 <Allocate_New_Buffer_To_TL>

  return;
 8003606:	bf00      	nop
}
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20000364 	.word	0x20000364
 8003614:	2000036c 	.word	0x2000036c
 8003618:	48001000 	.word	0x48001000

0800361c <TL_BLE_SendCmd>:

void TL_BLE_SendCmd(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  pCmdBuffer->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8003620:	4b09      	ldr	r3, [pc, #36]	; (8003648 <TL_BLE_SendCmd+0x2c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2201      	movs	r2, #1
 8003626:	721a      	strb	r2, [r3, #8]

  HW_BNRG_Send( (uint8_t *)&pCmdBuffer->cmdserial, 4 + pCmdBuffer->cmdserial.cmd.plen );
 8003628:	4b07      	ldr	r3, [pc, #28]	; (8003648 <TL_BLE_SendCmd+0x2c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f103 0208 	add.w	r2, r3, #8
 8003630:	4b05      	ldr	r3, [pc, #20]	; (8003648 <TL_BLE_SendCmd+0x2c>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	7adb      	ldrb	r3, [r3, #11]
 8003636:	b29b      	uxth	r3, r3
 8003638:	3304      	adds	r3, #4
 800363a:	b29b      	uxth	r3, r3
 800363c:	4619      	mov	r1, r3
 800363e:	4610      	mov	r0, r2
 8003640:	f7fe fbfa 	bl	8001e38 <HW_BNRG_Send>

  return;
 8003644:	bf00      	nop
}
 8003646:	bd80      	pop	{r7, pc}
 8003648:	2000036c 	.word	0x2000036c

0800364c <HW_BNRG_Isr>:
/**
 * SPI wrapper
 */

void HW_BNRG_Isr(uint16_t event_payload_len)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	4603      	mov	r3, r0
 8003654:	80fb      	strh	r3, [r7, #6]
  if(TlSpiIsrContext.TlPacketStatus == tl_packet_cont)
 8003656:	4b36      	ldr	r3, [pc, #216]	; (8003730 <HW_BNRG_Isr+0xe4>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d107      	bne.n	800366e <HW_BNRG_Isr+0x22>
  {
    /**
     * The packet HCI has been split over several SPI frame
     */
    TlSpiIsrContext.HciPacketLengthOfDataLeftToReceiveFromSpi -= event_payload_len;
 800365e:	4b34      	ldr	r3, [pc, #208]	; (8003730 <HW_BNRG_Isr+0xe4>)
 8003660:	885a      	ldrh	r2, [r3, #2]
 8003662:	88fb      	ldrh	r3, [r7, #6]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	b29a      	uxth	r2, r3
 8003668:	4b31      	ldr	r3, [pc, #196]	; (8003730 <HW_BNRG_Isr+0xe4>)
 800366a:	805a      	strh	r2, [r3, #2]
 800366c:	e01f      	b.n	80036ae <HW_BNRG_Isr+0x62>
  else
  {
    /**
     * This is the start of a HCI packet
     */
    TlSpiIsrContext.HciPacketLengthOfDataLeftToReceiveFromSpi = TL_EVT_HDR_SIZE + pHciEventBuffer->evtserial.evt.plen - event_payload_len;
 800366e:	4b31      	ldr	r3, [pc, #196]	; (8003734 <HW_BNRG_Isr+0xe8>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	7a9b      	ldrb	r3, [r3, #10]
 8003674:	b29a      	uxth	r2, r3
 8003676:	88fb      	ldrh	r3, [r7, #6]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	b29b      	uxth	r3, r3
 800367c:	3303      	adds	r3, #3
 800367e:	b29a      	uxth	r2, r3
 8003680:	4b2b      	ldr	r3, [pc, #172]	; (8003730 <HW_BNRG_Isr+0xe4>)
 8003682:	805a      	strh	r2, [r3, #2]

    if((pHciEventBuffer->evtserial.evt.evtcode != TL_EVT_CC_OPCODE) && (pHciEventBuffer->evtserial.evt.evtcode != TL_EVT_CS_OPCODE))
 8003684:	4b2b      	ldr	r3, [pc, #172]	; (8003734 <HW_BNRG_Isr+0xe8>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	7a5b      	ldrb	r3, [r3, #9]
 800368a:	2b0e      	cmp	r3, #14
 800368c:	d00c      	beq.n	80036a8 <HW_BNRG_Isr+0x5c>
 800368e:	4b29      	ldr	r3, [pc, #164]	; (8003734 <HW_BNRG_Isr+0xe8>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	7a5b      	ldrb	r3, [r3, #9]
 8003694:	2b0f      	cmp	r3, #15
 8003696:	d007      	beq.n	80036a8 <HW_BNRG_Isr+0x5c>
    {
      /**
       * Asynchronous Event
       */
      TlSpiIsrContext.TlEventQueueType = TL_BLE_R_HciAsynchEvt;
 8003698:	4b25      	ldr	r3, [pc, #148]	; (8003730 <HW_BNRG_Isr+0xe4>)
 800369a:	2200      	movs	r2, #0
 800369c:	705a      	strb	r2, [r3, #1]
      LPM_SetOffMode(CFG_LPM_HCI_AsynchEvt, LPM_OffMode_Dis);
 800369e:	2100      	movs	r1, #0
 80036a0:	2003      	movs	r0, #3
 80036a2:	f000 f925 	bl	80038f0 <LPM_SetOffMode>
 80036a6:	e002      	b.n	80036ae <HW_BNRG_Isr+0x62>
    else
    {
      /**
       * Cmd Event
       */
      TlSpiIsrContext.TlEventQueueType = TL_BLE_R_HciCmdEvt;
 80036a8:	4b21      	ldr	r3, [pc, #132]	; (8003730 <HW_BNRG_Isr+0xe4>)
 80036aa:	2201      	movs	r2, #1
 80036ac:	705a      	strb	r2, [r3, #1]
    }
  }

  if(TlSpiIsrContext.HciPacketLengthOfDataLeftToReceiveFromSpi != 0)
 80036ae:	4b20      	ldr	r3, [pc, #128]	; (8003730 <HW_BNRG_Isr+0xe4>)
 80036b0:	885b      	ldrh	r3, [r3, #2]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d027      	beq.n	8003706 <HW_BNRG_Isr+0xba>
  {
    /**
     * The HCI packet is not complete
     */
    TlSpiIsrContext.TlPacketStatus = tl_packet_cont;
 80036b6:	4b1e      	ldr	r3, [pc, #120]	; (8003730 <HW_BNRG_Isr+0xe4>)
 80036b8:	2201      	movs	r2, #1
 80036ba:	701a      	strb	r2, [r3, #0]
    TlSpiIsrContext.TlSizeLeftInBufferFrame -= event_payload_len;
 80036bc:	4b1c      	ldr	r3, [pc, #112]	; (8003730 <HW_BNRG_Isr+0xe4>)
 80036be:	889a      	ldrh	r2, [r3, #4]
 80036c0:	88fb      	ldrh	r3, [r7, #6]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	4b1a      	ldr	r3, [pc, #104]	; (8003730 <HW_BNRG_Isr+0xe4>)
 80036c8:	809a      	strh	r2, [r3, #4]
    if(TlSpiIsrContext.TlSizeLeftInBufferFrame != 0)
 80036ca:	4b19      	ldr	r3, [pc, #100]	; (8003730 <HW_BNRG_Isr+0xe4>)
 80036cc:	889b      	ldrh	r3, [r3, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00e      	beq.n	80036f0 <HW_BNRG_Isr+0xa4>
    {
      /**
       * There are still some bytes left to receive more data
       */
      HW_BNRG_EvtReq((uint8_t*)&pHciEventBuffer->evtserial + (TL_BLE_EVENT_FRAME_SIZE - TlSpiIsrContext.TlSizeLeftInBufferFrame), TlSpiIsrContext.TlSizeLeftInBufferFrame);
 80036d2:	4b18      	ldr	r3, [pc, #96]	; (8003734 <HW_BNRG_Isr+0xe8>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	3308      	adds	r3, #8
 80036d8:	4a15      	ldr	r2, [pc, #84]	; (8003730 <HW_BNRG_Isr+0xe4>)
 80036da:	8892      	ldrh	r2, [r2, #4]
 80036dc:	f5c2 7281 	rsb	r2, r2, #258	; 0x102
 80036e0:	4413      	add	r3, r2
 80036e2:	4a13      	ldr	r2, [pc, #76]	; (8003730 <HW_BNRG_Isr+0xe4>)
 80036e4:	8892      	ldrh	r2, [r2, #4]
 80036e6:	4611      	mov	r1, r2
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fe fbcd 	bl	8001e88 <HW_BNRG_EvtReq>
    Allocate_New_Buffer_To_TL();

    LPM_SetOffMode(CFG_LPM_HCI_AsynchEvt, LPM_OffMode_En);
  }

  return;
 80036ee:	e01c      	b.n	800372a <HW_BNRG_Isr+0xde>
      TL_BLE_R_EvtInput(TlSpiIsrContext.TlEventQueueType, (uint8_t*)pHciEventBuffer);
 80036f0:	4b0f      	ldr	r3, [pc, #60]	; (8003730 <HW_BNRG_Isr+0xe4>)
 80036f2:	785b      	ldrb	r3, [r3, #1]
 80036f4:	4a0f      	ldr	r2, [pc, #60]	; (8003734 <HW_BNRG_Isr+0xe8>)
 80036f6:	6812      	ldr	r2, [r2, #0]
 80036f8:	4611      	mov	r1, r2
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff fde8 	bl	80032d0 <TL_BLE_R_EvtInput>
      Allocate_New_Buffer_To_TL();
 8003700:	f000 f826 	bl	8003750 <Allocate_New_Buffer_To_TL>
  return;
 8003704:	e011      	b.n	800372a <HW_BNRG_Isr+0xde>
    TL_BLE_R_EvtInput(TlSpiIsrContext.TlEventQueueType, (uint8_t*)pHciEventBuffer);
 8003706:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <HW_BNRG_Isr+0xe4>)
 8003708:	785b      	ldrb	r3, [r3, #1]
 800370a:	4a0a      	ldr	r2, [pc, #40]	; (8003734 <HW_BNRG_Isr+0xe8>)
 800370c:	6812      	ldr	r2, [r2, #0]
 800370e:	4611      	mov	r1, r2
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff fddd 	bl	80032d0 <TL_BLE_R_EvtInput>
    TlSpiIsrContext.TlPacketStatus = tl_packet_start;
 8003716:	4b06      	ldr	r3, [pc, #24]	; (8003730 <HW_BNRG_Isr+0xe4>)
 8003718:	2200      	movs	r2, #0
 800371a:	701a      	strb	r2, [r3, #0]
    Allocate_New_Buffer_To_TL();
 800371c:	f000 f818 	bl	8003750 <Allocate_New_Buffer_To_TL>
    LPM_SetOffMode(CFG_LPM_HCI_AsynchEvt, LPM_OffMode_En);
 8003720:	2101      	movs	r1, #1
 8003722:	2003      	movs	r0, #3
 8003724:	f000 f8e4 	bl	80038f0 <LPM_SetOffMode>
  return;
 8003728:	bf00      	nop
}
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	20000364 	.word	0x20000364
 8003734:	20000360 	.word	0x20000360

08003738 <TL_BLE_EvtDone>:

void TL_BLE_EvtDone(TL_EvtPacket_t * hcievt)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  TL_BLE_R_EvtDone(hcievt);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7ff ff13 	bl	800356c <TL_BLE_R_EvtDone>

  return;
 8003746:	bf00      	nop
}
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
	...

08003750 <Allocate_New_Buffer_To_TL>:


/* Private Functions Definition ------------------------------------------------------*/
static void Allocate_New_Buffer_To_TL(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
  pHciEventBuffer =  (TL_EvtPacket_t*) MM_GetBuffer(sizeof(TL_PacketHeader_t) + TL_BLE_EVENT_FRAME_SIZE, (MM_pCb_t) Allocate_New_Buffer_To_TL);
 8003754:	490d      	ldr	r1, [pc, #52]	; (800378c <Allocate_New_Buffer_To_TL+0x3c>)
 8003756:	f44f 7085 	mov.w	r0, #266	; 0x10a
 800375a:	f000 f9a3 	bl	8003aa4 <MM_GetBuffer>
 800375e:	4603      	mov	r3, r0
 8003760:	4a0b      	ldr	r2, [pc, #44]	; (8003790 <Allocate_New_Buffer_To_TL+0x40>)
 8003762:	6013      	str	r3, [r2, #0]
  if(pHciEventBuffer)
 8003764:	4b0a      	ldr	r3, [pc, #40]	; (8003790 <Allocate_New_Buffer_To_TL+0x40>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00c      	beq.n	8003786 <Allocate_New_Buffer_To_TL+0x36>
  {
    TlSpiIsrContext.TlSizeLeftInBufferFrame = TL_BLE_EVENT_FRAME_SIZE;
 800376c:	4b09      	ldr	r3, [pc, #36]	; (8003794 <Allocate_New_Buffer_To_TL+0x44>)
 800376e:	f44f 7281 	mov.w	r2, #258	; 0x102
 8003772:	809a      	strh	r2, [r3, #4]
    HW_BNRG_EvtReq((uint8_t *)&(pHciEventBuffer->evtserial), TL_BLE_EVENT_FRAME_SIZE);
 8003774:	4b06      	ldr	r3, [pc, #24]	; (8003790 <Allocate_New_Buffer_To_TL+0x40>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3308      	adds	r3, #8
 800377a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800377e:	4618      	mov	r0, r3
 8003780:	f7fe fb82 	bl	8001e88 <HW_BNRG_EvtReq>
  }

  return;
 8003784:	bf00      	nop
 8003786:	bf00      	nop
}
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	08003751 	.word	0x08003751
 8003790:	20000360 	.word	0x20000360
 8003794:	20000364 	.word	0x20000364

08003798 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	605a      	str	r2, [r3, #4]
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037c0:	f3ef 8310 	mrs	r3, PRIMASK
 80037c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80037c6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80037c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80037ca:	b672      	cpsid	i
}
 80037cc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d102      	bne.n	80037de <LST_is_empty+0x26>
  {
    return_value = TRUE;
 80037d8:	2301      	movs	r3, #1
 80037da:	75fb      	strb	r3, [r7, #23]
 80037dc:	e001      	b.n	80037e2 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 80037de:	2300      	movs	r3, #0
 80037e0:	75fb      	strb	r3, [r7, #23]
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	f383 8810 	msr	PRIMASK, r3
}
 80037ec:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80037ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	371c      	adds	r7, #28
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <LST_insert_tail>:
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b087      	sub	sp, #28
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003806:	f3ef 8310 	mrs	r3, PRIMASK
 800380a:	60fb      	str	r3, [r7, #12]
  return(result);
 800380c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800380e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003810:	b672      	cpsid	i
}
 8003812:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	f383 8810 	msr	PRIMASK, r3
}
 800383a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800383c:	bf00      	nop
 800383e:	371c      	adds	r7, #28
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8003848:	b480      	push	{r7}
 800384a:	b087      	sub	sp, #28
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003850:	f3ef 8310 	mrs	r3, PRIMASK
 8003854:	60fb      	str	r3, [r7, #12]
  return(result);
 8003856:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003858:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800385a:	b672      	cpsid	i
}
 800385c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6812      	ldr	r2, [r2, #0]
 8003866:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6852      	ldr	r2, [r2, #4]
 8003870:	605a      	str	r2, [r3, #4]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	f383 8810 	msr	PRIMASK, r3
}
 800387c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800387e:	bf00      	nop
 8003880:	371c      	adds	r7, #28
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b086      	sub	sp, #24
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
 8003892:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003894:	f3ef 8310 	mrs	r3, PRIMASK
 8003898:	60fb      	str	r3, [r7, #12]
  return(result);
 800389a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800389c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800389e:	b672      	cpsid	i
}
 80038a0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7ff ffca 	bl	8003848 <LST_remove_node>
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f383 8810 	msr	PRIMASK, r3
}
 80038be:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80038c0:	bf00      	nop
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <LPM_SetConf>:
/* Private function prototypes -----------------------------------------------*/


/* Functions Definition ------------------------------------------------------*/
void LPM_SetConf(LPM_Conf_t *p_conf)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  LowPowerModeConfiguration.Stop_Mode_Config = p_conf->Stop_Mode_Config;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a05      	ldr	r2, [pc, #20]	; (80038ec <LPM_SetConf+0x24>)
 80038d6:	6013      	str	r3, [r2, #0]
  LowPowerModeConfiguration.OFF_Mode_Config = p_conf->OFF_Mode_Config;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	4a03      	ldr	r2, [pc, #12]	; (80038ec <LPM_SetConf+0x24>)
 80038de:	6053      	str	r3, [r2, #4]

  return;
 80038e0:	bf00      	nop
}
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	20000378 	.word	0x20000378

080038f0 <LPM_SetOffMode>:

void LPM_SetOffMode(uint32_t id, LPM_OffModeSel_t mode)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	460b      	mov	r3, r1
 80038fa:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003900:	613b      	str	r3, [r7, #16]
  return(result);
 8003902:	693b      	ldr	r3, [r7, #16]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003904:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003906:	b672      	cpsid	i
}
 8003908:	bf00      	nop
  __disable_irq();                /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  if(mode == LPM_OffMode_En)
 800390a:	78fb      	ldrb	r3, [r7, #3]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d10b      	bne.n	8003928 <LPM_SetOffMode+0x38>
  {
    LowPowerModeSel &= (~(1<<id));
 8003910:	2201      	movs	r2, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	43db      	mvns	r3, r3
 800391a:	461a      	mov	r2, r3
 800391c:	4b0d      	ldr	r3, [pc, #52]	; (8003954 <LPM_SetOffMode+0x64>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4013      	ands	r3, r2
 8003922:	4a0c      	ldr	r2, [pc, #48]	; (8003954 <LPM_SetOffMode+0x64>)
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	e009      	b.n	800393c <LPM_SetOffMode+0x4c>
  }
  else
  {
    LowPowerModeSel |= (1<<id);
 8003928:	2201      	movs	r2, #1
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	461a      	mov	r2, r3
 8003932:	4b08      	ldr	r3, [pc, #32]	; (8003954 <LPM_SetOffMode+0x64>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4313      	orrs	r3, r2
 8003938:	4a06      	ldr	r2, [pc, #24]	; (8003954 <LPM_SetOffMode+0x64>)
 800393a:	6013      	str	r3, [r2, #0]
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f383 8810 	msr	PRIMASK, r3
}
 8003946:	bf00      	nop
  }

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return;
 8003948:	bf00      	nop
}
 800394a:	371c      	adds	r7, #28
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	20000370 	.word	0x20000370

08003958 <LPM_SetStopMode>:

void LPM_SetStopMode(uint32_t id, LPM_StopModeSel_t mode)
{
 8003958:	b480      	push	{r7}
 800395a:	b087      	sub	sp, #28
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	460b      	mov	r3, r1
 8003962:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003964:	f3ef 8310 	mrs	r3, PRIMASK
 8003968:	613b      	str	r3, [r7, #16]
  return(result);
 800396a:	693b      	ldr	r3, [r7, #16]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800396c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800396e:	b672      	cpsid	i
}
 8003970:	bf00      	nop
  __disable_irq();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  if(mode == LPM_StopMode_Dis)
 8003972:	78fb      	ldrb	r3, [r7, #3]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10b      	bne.n	8003990 <LPM_SetStopMode+0x38>
  {
    SysClockReq &= (~(1<<id));
 8003978:	2201      	movs	r2, #1
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	461a      	mov	r2, r3
 8003984:	4b0d      	ldr	r3, [pc, #52]	; (80039bc <LPM_SetStopMode+0x64>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4013      	ands	r3, r2
 800398a:	4a0c      	ldr	r2, [pc, #48]	; (80039bc <LPM_SetStopMode+0x64>)
 800398c:	6013      	str	r3, [r2, #0]
 800398e:	e009      	b.n	80039a4 <LPM_SetStopMode+0x4c>
  }
  else
  {
    SysClockReq |= (1<<id);
 8003990:	2201      	movs	r2, #1
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	461a      	mov	r2, r3
 800399a:	4b08      	ldr	r3, [pc, #32]	; (80039bc <LPM_SetStopMode+0x64>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4313      	orrs	r3, r2
 80039a0:	4a06      	ldr	r2, [pc, #24]	; (80039bc <LPM_SetStopMode+0x64>)
 80039a2:	6013      	str	r3, [r2, #0]
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f383 8810 	msr	PRIMASK, r3
}
 80039ae:	bf00      	nop
  }

  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/

  return;
 80039b0:	bf00      	nop
}
 80039b2:	371c      	adds	r7, #28
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	20000374 	.word	0x20000374

080039c0 <LPM_EnterModeSelected>:

void LPM_EnterModeSelected(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  if(SysClockReq)
 80039c4:	4b11      	ldr	r3, [pc, #68]	; (8003a0c <LPM_EnterModeSelected+0x4c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d006      	beq.n	80039da <LPM_EnterModeSelected+0x1a>
  {
    /**
     * SLEEP mode is required
     */
    LPM_EnterSleepMode();
 80039cc:	f000 f824 	bl	8003a18 <LPM_EnterSleepMode>
    HW_SleepMode();
 80039d0:	f7fd fca0 	bl	8001314 <HW_SleepMode>
    LPM_ExitSleepMode();
 80039d4:	f000 f827 	bl	8003a26 <LPM_ExitSleepMode>
      HW_OffMode(LowPowerModeConfiguration.OFF_Mode_Config);
      LPM_ExitOffMode();
    }
  }

  return;
 80039d8:	e017      	b.n	8003a0a <LPM_EnterModeSelected+0x4a>
    if(LowPowerModeSel)
 80039da:	4b0d      	ldr	r3, [pc, #52]	; (8003a10 <LPM_EnterModeSelected+0x50>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d009      	beq.n	80039f6 <LPM_EnterModeSelected+0x36>
      LPM_EnterStopMode();
 80039e2:	f000 f827 	bl	8003a34 <LPM_EnterStopMode>
      HW_StopMode(LowPowerModeConfiguration.Stop_Mode_Config);
 80039e6:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <LPM_EnterModeSelected+0x54>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fd fc99 	bl	8001322 <HW_StopMode>
      LPM_ExitStopMode();
 80039f0:	f000 fe06 	bl	8004600 <LPM_ExitStopMode>
  return;
 80039f4:	e009      	b.n	8003a0a <LPM_EnterModeSelected+0x4a>
      LPM_EnterOffMode();
 80039f6:	f000 fe0a 	bl	800460e <LPM_EnterOffMode>
      HW_OffMode(LowPowerModeConfiguration.OFF_Mode_Config);
 80039fa:	4b06      	ldr	r3, [pc, #24]	; (8003a14 <LPM_EnterModeSelected+0x54>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fd fc9d 	bl	800133e <HW_OffMode>
      LPM_ExitOffMode();
 8003a04:	f000 fe0c 	bl	8004620 <LPM_ExitOffMode>
  return;
 8003a08:	bf00      	nop
}
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	20000374 	.word	0x20000374
 8003a10:	20000370 	.word	0x20000370
 8003a14:	20000378 	.word	0x20000378

08003a18 <LPM_EnterSleepMode>:

/* __WEAK functions: The application can overload this function  if needed ----*/
/* ----------------------------------------------------------------------------*/

__weak void LPM_EnterSleepMode(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
}
 8003a1c:	bf00      	nop
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <LPM_ExitSleepMode>:
__weak void LPM_ExitSleepMode(void)
{
 8003a26:	b480      	push	{r7}
 8003a28:	af00      	add	r7, sp, #0
}
 8003a2a:	bf00      	nop
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <LPM_EnterStopMode>:
__weak void LPM_EnterStopMode(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
}
 8003a38:	bf00      	nop
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
	...

08003a44 <MM_Init>:
 * @param  pool_size: The size of the pool
 * @param  elt_size: The size of one element in the pool
 * @retval None
 */
void MM_Init(uint8_t *p_pool, uint32_t pool_size,  uint32_t elt_size)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
  uint32_t elt_size_corrected;

  QueueSize = 0;
 8003a50:	4b12      	ldr	r3, [pc, #72]	; (8003a9c <MM_Init+0x58>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	701a      	strb	r2, [r3, #0]
  elt_size_corrected = 4*DIVC( elt_size, 4 );
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	3303      	adds	r3, #3
 8003a5a:	f023 0303 	bic.w	r3, r3, #3
 8003a5e:	617b      	str	r3, [r7, #20]

  /**
   *  Initialize list
   */
  LST_init_head (&BufferPool);
 8003a60:	480f      	ldr	r0, [pc, #60]	; (8003aa0 <MM_Init+0x5c>)
 8003a62:	f7ff fe99 	bl	8003798 <LST_init_head>

  /**
   *  Initialize the queue
   */
  while(pool_size >= elt_size_corrected)
 8003a66:	e011      	b.n	8003a8c <MM_Init+0x48>
  {
    LST_insert_tail(&BufferPool, (tListNode *)p_pool);
 8003a68:	68f9      	ldr	r1, [r7, #12]
 8003a6a:	480d      	ldr	r0, [pc, #52]	; (8003aa0 <MM_Init+0x5c>)
 8003a6c:	f7ff fec6 	bl	80037fc <LST_insert_tail>
    p_pool += elt_size_corrected;
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	4413      	add	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]
    QueueSize++;
 8003a78:	4b08      	ldr	r3, [pc, #32]	; (8003a9c <MM_Init+0x58>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	4b06      	ldr	r3, [pc, #24]	; (8003a9c <MM_Init+0x58>)
 8003a82:	701a      	strb	r2, [r3, #0]
    pool_size -= elt_size_corrected;
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	60bb      	str	r3, [r7, #8]
  while(pool_size >= elt_size_corrected)
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d2e9      	bcs.n	8003a68 <MM_Init+0x24>
  }

  return;
 8003a94:	bf00      	nop
}
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	20000380 	.word	0x20000380
 8003aa0:	20000384 	.word	0x20000384

08003aa4 <MM_GetBuffer>:
 * @param  cb: The callback to be called when a buffer is made available later on
 *                   if there is no buffer currently available when this API is called
 * @retval The buffer address when available or NULL when there is no buffer
 */
MM_pBufAdd_t MM_GetBuffer( uint32_t size, MM_pCb_t cb )
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aae:	f3ef 8310 	mrs	r3, PRIMASK
 8003ab2:	613b      	str	r3, [r7, #16]
  return(result);
 8003ab4:	693b      	ldr	r3, [r7, #16]
  MM_pBufAdd_t buffer_address;
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003ab6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ab8:	b672      	cpsid	i
}
 8003aba:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if ( QueueSize )
 8003abc:	4b11      	ldr	r3, [pc, #68]	; (8003b04 <MM_GetBuffer+0x60>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00f      	beq.n	8003ae4 <MM_GetBuffer+0x40>
  {
    QueueSize--;
 8003ac4:	4b0f      	ldr	r3, [pc, #60]	; (8003b04 <MM_GetBuffer+0x60>)
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	4b0d      	ldr	r3, [pc, #52]	; (8003b04 <MM_GetBuffer+0x60>)
 8003ace:	701a      	strb	r2, [r3, #0]
    BufferFreeCb = 0;
 8003ad0:	4b0d      	ldr	r3, [pc, #52]	; (8003b08 <MM_GetBuffer+0x64>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	601a      	str	r2, [r3, #0]
    LST_remove_head( &BufferPool, ( tListNode ** )&buffer_address );
 8003ad6:	f107 0308 	add.w	r3, r7, #8
 8003ada:	4619      	mov	r1, r3
 8003adc:	480b      	ldr	r0, [pc, #44]	; (8003b0c <MM_GetBuffer+0x68>)
 8003ade:	f7ff fed4 	bl	800388a <LST_remove_head>
 8003ae2:	e004      	b.n	8003aee <MM_GetBuffer+0x4a>
  }
  else
  {
    BufferFreeCb = cb;
 8003ae4:	4a08      	ldr	r2, [pc, #32]	; (8003b08 <MM_GetBuffer+0x64>)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	6013      	str	r3, [r2, #0]
    buffer_address = 0;
 8003aea:	2300      	movs	r3, #0
 8003aec:	60bb      	str	r3, [r7, #8]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f383 8810 	msr	PRIMASK, r3
}
 8003af8:	bf00      	nop
  }
  __set_PRIMASK( primask_bit );     /**< Restore PRIMASK bit*/

  return buffer_address;
 8003afa:	68bb      	ldr	r3, [r7, #8]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	20000380 	.word	0x20000380
 8003b08:	2000038c 	.word	0x2000038c
 8003b0c:	20000384 	.word	0x20000384

08003b10 <MM_ReleaseBuffer>:
 * @brief  Release a buffer
 * @param  p_buffer: The data buffer address
 * @retval None
 */
void MM_ReleaseBuffer( MM_pBufAdd_t p_buffer )
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b18:	f3ef 8310 	mrs	r3, PRIMASK
 8003b1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003b20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b22:	b672      	cpsid	i
}
 8003b24:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  LST_insert_tail( &BufferPool, ( tListNode * )p_buffer );
 8003b26:	6879      	ldr	r1, [r7, #4]
 8003b28:	480d      	ldr	r0, [pc, #52]	; (8003b60 <MM_ReleaseBuffer+0x50>)
 8003b2a:	f7ff fe67 	bl	80037fc <LST_insert_tail>
  QueueSize++;
 8003b2e:	4b0d      	ldr	r3, [pc, #52]	; (8003b64 <MM_ReleaseBuffer+0x54>)
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	3301      	adds	r3, #1
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	4b0b      	ldr	r3, [pc, #44]	; (8003b64 <MM_ReleaseBuffer+0x54>)
 8003b38:	701a      	strb	r2, [r3, #0]
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f383 8810 	msr	PRIMASK, r3
}
 8003b44:	bf00      	nop
  __set_PRIMASK( primask_bit );     /**< Restore PRIMASK bit*/
  if( BufferFreeCb )
 8003b46:	4b08      	ldr	r3, [pc, #32]	; (8003b68 <MM_ReleaseBuffer+0x58>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <MM_ReleaseBuffer+0x46>
  {
    /**
     * The application is waiting for a free buffer
     */
    BufferFreeCb();
 8003b4e:	4b06      	ldr	r3, [pc, #24]	; (8003b68 <MM_ReleaseBuffer+0x58>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4798      	blx	r3
  }

  return;
 8003b54:	bf00      	nop
 8003b56:	bf00      	nop
}
 8003b58:	3718      	adds	r7, #24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	20000384 	.word	0x20000384
 8003b64:	20000380 	.word	0x20000380
 8003b68:	2000038c 	.word	0x2000038c

08003b6c <SCH_Run>:
#endif

/* Functions Definition ------------------------------------------------------*/

void SCH_Run( void )
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b088      	sub	sp, #32
 8003b70:	af00      	add	r7, sp, #0
  uint32_t bit_nbr;
  uint32_t primask_bit;

  while( TaskSet &  TaskMask )
 8003b72:	e02e      	b.n	8003bd2 <SCH_Run+0x66>
  {
#if( CORE_CM0PLUS == 0 )
    bit_nbr =__CLZ( TaskSet &  TaskMask );
 8003b74:	4b2b      	ldr	r3, [pc, #172]	; (8003c24 <SCH_Run+0xb8>)
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	4b2b      	ldr	r3, [pc, #172]	; (8003c28 <SCH_Run+0xbc>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <SCH_Run+0x1e>
  {
    return 32U;
 8003b86:	2320      	movs	r3, #32
 8003b88:	e003      	b.n	8003b92 <SCH_Run+0x26>
  }
  return __builtin_clz(value);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	fab3 f383 	clz	r3, r3
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b94:	f3ef 8310 	mrs	r3, PRIMASK
 8003b98:	613b      	str	r3, [r7, #16]
  return(result);
 8003b9a:	693b      	ldr	r3, [r7, #16]
#else
    bit_nbr = CountLeadZero( TaskSet &  TaskMask );
#endif

    primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003b9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b9e:	b672      	cpsid	i
}
 8003ba0:	bf00      	nop
    __disable_irq();
    TaskSet &= ~( 1 << (31 - bit_nbr) );
 8003ba2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bac:	43da      	mvns	r2, r3
 8003bae:	4b1d      	ldr	r3, [pc, #116]	; (8003c24 <SCH_Run+0xb8>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	4a1b      	ldr	r2, [pc, #108]	; (8003c24 <SCH_Run+0xb8>)
 8003bb6:	6013      	str	r3, [r2, #0]
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	f383 8810 	msr	PRIMASK, r3
}
 8003bc2:	bf00      	nop
    __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

    TaskCb[31 - bit_nbr]();
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	f1c3 031f 	rsb	r3, r3, #31
 8003bca:	4a18      	ldr	r2, [pc, #96]	; (8003c2c <SCH_Run+0xc0>)
 8003bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bd0:	4798      	blx	r3
  while( TaskSet &  TaskMask )
 8003bd2:	4b14      	ldr	r3, [pc, #80]	; (8003c24 <SCH_Run+0xb8>)
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	4b14      	ldr	r3, [pc, #80]	; (8003c28 <SCH_Run+0xbc>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1c9      	bne.n	8003b74 <SCH_Run+0x8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003be0:	f3ef 8310 	mrs	r3, PRIMASK
 8003be4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003be6:	68bb      	ldr	r3, [r7, #8]
  }

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003be8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8003bea:	b672      	cpsid	i
}
 8003bec:	bf00      	nop
  __disable_irq();

  if ( !( (TaskSet & TaskMask ) || (EvtSet & EvtWaited) ) )
 8003bee:	4b0d      	ldr	r3, [pc, #52]	; (8003c24 <SCH_Run+0xb8>)
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	4b0d      	ldr	r3, [pc, #52]	; (8003c28 <SCH_Run+0xbc>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d108      	bne.n	8003c0e <SCH_Run+0xa2>
 8003bfc:	4b0c      	ldr	r3, [pc, #48]	; (8003c30 <SCH_Run+0xc4>)
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	4b0c      	ldr	r3, [pc, #48]	; (8003c34 <SCH_Run+0xc8>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4013      	ands	r3, r2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <SCH_Run+0xa2>
  {
    SCH_Idle();
 8003c0a:	f000 fd1f 	bl	800464c <SCH_Idle>
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f383 8810 	msr	PRIMASK, r3
}
 8003c18:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return;
 8003c1a:	bf00      	nop
}
 8003c1c:	3720      	adds	r7, #32
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	20000390 	.word	0x20000390
 8003c28:	20000000 	.word	0x20000000
 8003c2c:	2000039c 	.word	0x2000039c
 8003c30:	20000394 	.word	0x20000394
 8003c34:	20000398 	.word	0x20000398

08003c38 <SCH_RegTask>:


void SCH_RegTask( uint32_t task_id, void (*task)(void) )
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c42:	f3ef 8310 	mrs	r3, PRIMASK
 8003c46:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c48:	68fb      	ldr	r3, [r7, #12]
   * The backup/restore PRIMASK mechanism allow the application to call this API from a critical section protected with
   * the PRIMASK bit (__disable_irq() / __enable_irq())
   */
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003c4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c4c:	b672      	cpsid	i
}
 8003c4e:	bf00      	nop
  __disable_irq();

  TaskCb[task_id] = task;
 8003c50:	4908      	ldr	r1, [pc, #32]	; (8003c74 <SCH_RegTask+0x3c>)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	f383 8810 	msr	PRIMASK, r3
}
 8003c64:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return;
 8003c66:	bf00      	nop
}
 8003c68:	371c      	adds	r7, #28
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	2000039c 	.word	0x2000039c

08003c78 <SCH_SetTask>:

void SCH_SetTask( uint32_t task_id )
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b087      	sub	sp, #28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c80:	f3ef 8310 	mrs	r3, PRIMASK
 8003c84:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c86:	68fb      	ldr	r3, [r7, #12]
   * The backup/restore PRIMASK mechanism allow the application to call this API from a critical section protected with
   * the PRIMASK bit (__disable_irq() / __enable_irq())
   */
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003c88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c8a:	b672      	cpsid	i
}
 8003c8c:	bf00      	nop
  __disable_irq();

  TaskSet |= (1 << task_id);
 8003c8e:	2201      	movs	r2, #1
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	fa02 f303 	lsl.w	r3, r2, r3
 8003c96:	461a      	mov	r2, r3
 8003c98:	4b08      	ldr	r3, [pc, #32]	; (8003cbc <SCH_SetTask+0x44>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	4a07      	ldr	r2, [pc, #28]	; (8003cbc <SCH_SetTask+0x44>)
 8003ca0:	6013      	str	r3, [r2, #0]
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	f383 8810 	msr	PRIMASK, r3
}
 8003cac:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return;
 8003cae:	bf00      	nop
}
 8003cb0:	371c      	adds	r7, #28
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	20000390 	.word	0x20000390

08003cc0 <SCH_PauseTask>:

void SCH_PauseTask( uint32_t task_id )
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b087      	sub	sp, #28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cc8:	f3ef 8310 	mrs	r3, PRIMASK
 8003ccc:	60fb      	str	r3, [r7, #12]
  return(result);
 8003cce:	68fb      	ldr	r3, [r7, #12]
   * The backup/restore PRIMASK mechanism allow the application to call this API from a critical section protected with
   * the PRIMASK bit (__disable_irq() / __enable_irq())
   */
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003cd0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003cd2:	b672      	cpsid	i
}
 8003cd4:	bf00      	nop
  __disable_irq();

  TaskMask &= ~ ( 1 << task_id );
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	43db      	mvns	r3, r3
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	4b08      	ldr	r3, [pc, #32]	; (8003d04 <SCH_PauseTask+0x44>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	4a06      	ldr	r2, [pc, #24]	; (8003d04 <SCH_PauseTask+0x44>)
 8003cea:	6013      	str	r3, [r2, #0]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	f383 8810 	msr	PRIMASK, r3
}
 8003cf6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return;
 8003cf8:	bf00      	nop
}
 8003cfa:	371c      	adds	r7, #28
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	20000000 	.word	0x20000000

08003d08 <SCH_ResumeTask>:

void SCH_ResumeTask( uint32_t task_id )
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b087      	sub	sp, #28
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d10:	f3ef 8310 	mrs	r3, PRIMASK
 8003d14:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d16:	68fb      	ldr	r3, [r7, #12]
   * The backup/restore PRIMASK mechanism allow the application to call this API from a critical section protected with
   * the PRIMASK bit (__disable_irq() / __enable_irq())
   */
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003d18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d1a:	b672      	cpsid	i
}
 8003d1c:	bf00      	nop
  __disable_irq();

  TaskMask |= ( 1 << task_id );
 8003d1e:	2201      	movs	r2, #1
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	461a      	mov	r2, r3
 8003d28:	4b08      	ldr	r3, [pc, #32]	; (8003d4c <SCH_ResumeTask+0x44>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	4a07      	ldr	r2, [pc, #28]	; (8003d4c <SCH_ResumeTask+0x44>)
 8003d30:	6013      	str	r3, [r2, #0]
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	f383 8810 	msr	PRIMASK, r3
}
 8003d3c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return;
 8003d3e:	bf00      	nop
}
 8003d40:	371c      	adds	r7, #28
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	20000000 	.word	0x20000000

08003d50 <SCH_SetEvt>:

void SCH_SetEvt( uint32_t evt_id )
{
 8003d50:	b480      	push	{r7}
 8003d52:	b087      	sub	sp, #28
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d58:	f3ef 8310 	mrs	r3, PRIMASK
 8003d5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
   * The backup/restore PRIMASK mechanism allow the application to call this API from a critical section protected with
   * the PRIMASK bit (__disable_irq() / __enable_irq())
   */
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003d60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d62:	b672      	cpsid	i
}
 8003d64:	bf00      	nop
  __disable_irq();

  EvtSet |= ( 1 << evt_id);
 8003d66:	2201      	movs	r2, #1
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6e:	461a      	mov	r2, r3
 8003d70:	4b08      	ldr	r3, [pc, #32]	; (8003d94 <SCH_SetEvt+0x44>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	4a07      	ldr	r2, [pc, #28]	; (8003d94 <SCH_SetEvt+0x44>)
 8003d78:	6013      	str	r3, [r2, #0]
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	f383 8810 	msr	PRIMASK, r3
}
 8003d84:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return;
 8003d86:	bf00      	nop
}
 8003d88:	371c      	adds	r7, #28
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	20000394 	.word	0x20000394

08003d98 <SCH_WaitEvt>:

void SCH_WaitEvt( uint32_t evt_id )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t event_waited_id_backup;

  event_waited_id_backup = EvtWaited;
 8003da0:	4b11      	ldr	r3, [pc, #68]	; (8003de8 <SCH_WaitEvt+0x50>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	60fb      	str	r3, [r7, #12]
  EvtWaited = ( 1 << evt_id );
 8003da6:	2201      	movs	r2, #1
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dae:	461a      	mov	r2, r3
 8003db0:	4b0d      	ldr	r3, [pc, #52]	; (8003de8 <SCH_WaitEvt+0x50>)
 8003db2:	601a      	str	r2, [r3, #0]
  while( (EvtSet & EvtWaited) == 0)
 8003db4:	e001      	b.n	8003dba <SCH_WaitEvt+0x22>
  {
    SCH_EvtIdle();
 8003db6:	f000 f81b 	bl	8003df0 <SCH_EvtIdle>
  while( (EvtSet & EvtWaited) == 0)
 8003dba:	4b0c      	ldr	r3, [pc, #48]	; (8003dec <SCH_WaitEvt+0x54>)
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <SCH_WaitEvt+0x50>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0f6      	beq.n	8003db6 <SCH_WaitEvt+0x1e>
  }
  EvtSet &= (~EvtWaited);
 8003dc8:	4b07      	ldr	r3, [pc, #28]	; (8003de8 <SCH_WaitEvt+0x50>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	43da      	mvns	r2, r3
 8003dce:	4b07      	ldr	r3, [pc, #28]	; (8003dec <SCH_WaitEvt+0x54>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	4a05      	ldr	r2, [pc, #20]	; (8003dec <SCH_WaitEvt+0x54>)
 8003dd6:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 8003dd8:	4a03      	ldr	r2, [pc, #12]	; (8003de8 <SCH_WaitEvt+0x50>)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6013      	str	r3, [r2, #0]

  return;
 8003dde:	bf00      	nop
}
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	20000398 	.word	0x20000398
 8003dec:	20000394 	.word	0x20000394

08003df0 <SCH_EvtIdle>:

/* __WEAK functions: The application can overload this function  if needed ----*/
/* ----------------------------------------------------------------------------*/

__weak void SCH_EvtIdle( void )
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /**
   * execute scheduler if not implemented by the application
   */
  SCH_Run();
 8003df4:	f7ff feba 	bl	8003b6c <SCH_Run>

  return;
 8003df8:	bf00      	nop
}
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003dfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e34 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003e00:	f000 fcb0 	bl	8004764 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003e04:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003e06:	e003      	b.n	8003e10 <LoopCopyDataInit>

08003e08 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003e08:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003e0a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003e0c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003e0e:	3104      	adds	r1, #4

08003e10 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003e10:	480a      	ldr	r0, [pc, #40]	; (8003e3c <LoopForever+0xa>)
	ldr	r3, =_edata
 8003e12:	4b0b      	ldr	r3, [pc, #44]	; (8003e40 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003e14:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003e16:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003e18:	d3f6      	bcc.n	8003e08 <CopyDataInit>
	ldr	r2, =_sbss
 8003e1a:	4a0a      	ldr	r2, [pc, #40]	; (8003e44 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003e1c:	e002      	b.n	8003e24 <LoopFillZerobss>

08003e1e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003e1e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003e20:	f842 3b04 	str.w	r3, [r2], #4

08003e24 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003e24:	4b08      	ldr	r3, [pc, #32]	; (8003e48 <LoopForever+0x16>)
	cmp	r2, r3
 8003e26:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003e28:	d3f9      	bcc.n	8003e1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e2a:	f002 f9fb 	bl	8006224 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003e2e:	f000 fa55 	bl	80042dc <main>

08003e32 <LoopForever>:

LoopForever:
    b LoopForever
 8003e32:	e7fe      	b.n	8003e32 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003e34:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003e38:	08006330 	.word	0x08006330
	ldr	r0, =_sdata
 8003e3c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003e40:	20000018 	.word	0x20000018
	ldr	r2, =_sbss
 8003e44:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 8003e48:	20000ae4 	.word	0x20000ae4

08003e4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003e4c:	e7fe      	b.n	8003e4c <ADC1_2_IRQHandler>
	...

08003e50 <LBR_Init>:


/* Public functions ----------------------------------------------------------*/

void LBR_Init(LBR_InitMode_t InitMode)
{
 8003e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e52:	b089      	sub	sp, #36	; 0x24
 8003e54:	af04      	add	r7, sp, #16
 8003e56:	4603      	mov	r3, r0
 8003e58:	71fb      	strb	r3, [r7, #7]
  uint8_t index;

  if(InitMode != LBR_Limited )
 8003e5a:	79fb      	ldrb	r3, [r7, #7]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d061      	beq.n	8003f24 <LBR_Init+0xd4>
  {
    /**
     * Initialization of all transport layer
     */
    TL_BLE_HCI_Init(TL_BLE_HCI_InitFull, &CmdBuffer, EvtPool, POOL_SIZE);
 8003e60:	f240 5332 	movw	r3, #1330	; 0x532
 8003e64:	4a31      	ldr	r2, [pc, #196]	; (8003f2c <LBR_Init+0xdc>)
 8003e66:	4932      	ldr	r1, [pc, #200]	; (8003f30 <LBR_Init+0xe0>)
 8003e68:	2001      	movs	r0, #1
 8003e6a:	f7ff f8a7 	bl	8002fbc <TL_BLE_HCI_Init>
    TL_Enable();
 8003e6e:	f3af 8000 	nop.w

    /**
     * Initialization of the BLE Controller
     */
     SVCCTL_Init();
 8003e72:	f7fd f939 	bl	80010e8 <SVCCTL_Init>

    /**
     * Initialization of the BLE App Context
     */
   
    LBRContext.Remote_Connection_Status[0] = LBC_IDLE;
 8003e76:	4b2f      	ldr	r3, [pc, #188]	; (8003f34 <LBR_Init+0xe4>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
    /**
     * Set TX Power to -2dBm.
     * This avoids undesired disconnection due to instability on 32KHz
     * internal oscillator for high transmission power.
     */
    aci_hal_set_tx_power_level(1,0x18);
 8003e7e:	2118      	movs	r1, #24
 8003e80:	2001      	movs	r0, #1
 8003e82:	f7fc fedc 	bl	8000c3e <aci_hal_set_tx_power_level>

    /**
     * Initialize IO capability
     */
    LBRContext.LBRContext_legacy.bleSecurityParam.ioCapability = CFG_LBR_IO_CAPABILITY;
 8003e86:	4b2b      	ldr	r3, [pc, #172]	; (8003f34 <LBR_Init+0xe4>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	701a      	strb	r2, [r3, #0]
    aci_gap_set_io_capability(LBRContext.LBRContext_legacy.bleSecurityParam.ioCapability);
 8003e8c:	4b29      	ldr	r3, [pc, #164]	; (8003f34 <LBR_Init+0xe4>)
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7fc faef 	bl	8000474 <aci_gap_set_io_capability>

    /**
     * Initialize authentication
     */
    LBRContext.LBRContext_legacy.bleSecurityParam.mitm_mode = CFG_LBR_MITM_PROTECTION;
 8003e96:	4b27      	ldr	r3, [pc, #156]	; (8003f34 <LBR_Init+0xe4>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	705a      	strb	r2, [r3, #1]
    LBRContext.LBRContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 8003e9c:	4b25      	ldr	r3, [pc, #148]	; (8003f34 <LBR_Init+0xe4>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	70da      	strb	r2, [r3, #3]
    LBRContext.LBRContext_legacy.bleSecurityParam.encryptionKeySizeMin = 8;
 8003ea2:	4b24      	ldr	r3, [pc, #144]	; (8003f34 <LBR_Init+0xe4>)
 8003ea4:	2208      	movs	r2, #8
 8003ea6:	755a      	strb	r2, [r3, #21]
    LBRContext.LBRContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
 8003ea8:	4b22      	ldr	r3, [pc, #136]	; (8003f34 <LBR_Init+0xe4>)
 8003eaa:	2210      	movs	r2, #16
 8003eac:	759a      	strb	r2, [r3, #22]
    LBRContext.LBRContext_legacy.bleSecurityParam.Use_Fixed_Pin = 0;
 8003eae:	4b21      	ldr	r3, [pc, #132]	; (8003f34 <LBR_Init+0xe4>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	751a      	strb	r2, [r3, #20]
    LBRContext.LBRContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
 8003eb4:	4b1f      	ldr	r3, [pc, #124]	; (8003f34 <LBR_Init+0xe4>)
 8003eb6:	4a20      	ldr	r2, [pc, #128]	; (8003f38 <LBR_Init+0xe8>)
 8003eb8:	619a      	str	r2, [r3, #24]
    LBRContext.LBRContext_legacy.bleSecurityParam.bonding_mode = 1;
 8003eba:	4b1e      	ldr	r3, [pc, #120]	; (8003f34 <LBR_Init+0xe4>)
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	709a      	strb	r2, [r3, #2]
    for (index=0; index<16 ;index++)
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	73fb      	strb	r3, [r7, #15]
 8003ec4:	e007      	b.n	8003ed6 <LBR_Init+0x86>
    {
      LBRContext.LBRContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t)index;
 8003ec6:	7bfb      	ldrb	r3, [r7, #15]
 8003ec8:	4a1a      	ldr	r2, [pc, #104]	; (8003f34 <LBR_Init+0xe4>)
 8003eca:	4413      	add	r3, r2
 8003ecc:	7bfa      	ldrb	r2, [r7, #15]
 8003ece:	711a      	strb	r2, [r3, #4]
    for (index=0; index<16 ;index++)
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	73fb      	strb	r3, [r7, #15]
 8003ed6:	7bfb      	ldrb	r3, [r7, #15]
 8003ed8:	2b0f      	cmp	r3, #15
 8003eda:	d9f4      	bls.n	8003ec6 <LBR_Init+0x76>
    }

    aci_gap_set_auth_requirement(LBRContext.LBRContext_legacy.bleSecurityParam.mitm_mode,
 8003edc:	4b15      	ldr	r3, [pc, #84]	; (8003f34 <LBR_Init+0xe4>)
 8003ede:	785c      	ldrb	r4, [r3, #1]
 8003ee0:	4b14      	ldr	r3, [pc, #80]	; (8003f34 <LBR_Init+0xe4>)
 8003ee2:	78dd      	ldrb	r5, [r3, #3]
 8003ee4:	4b13      	ldr	r3, [pc, #76]	; (8003f34 <LBR_Init+0xe4>)
 8003ee6:	7d5e      	ldrb	r6, [r3, #21]
 8003ee8:	4b12      	ldr	r3, [pc, #72]	; (8003f34 <LBR_Init+0xe4>)
 8003eea:	7d9b      	ldrb	r3, [r3, #22]
 8003eec:	4a11      	ldr	r2, [pc, #68]	; (8003f34 <LBR_Init+0xe4>)
 8003eee:	7d12      	ldrb	r2, [r2, #20]
 8003ef0:	4910      	ldr	r1, [pc, #64]	; (8003f34 <LBR_Init+0xe4>)
 8003ef2:	6989      	ldr	r1, [r1, #24]
 8003ef4:	480f      	ldr	r0, [pc, #60]	; (8003f34 <LBR_Init+0xe4>)
 8003ef6:	7880      	ldrb	r0, [r0, #2]
 8003ef8:	9003      	str	r0, [sp, #12]
 8003efa:	9102      	str	r1, [sp, #8]
 8003efc:	9201      	str	r2, [sp, #4]
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	4633      	mov	r3, r6
 8003f02:	4a0e      	ldr	r2, [pc, #56]	; (8003f3c <LBR_Init+0xec>)
 8003f04:	4629      	mov	r1, r5
 8003f06:	4620      	mov	r0, r4
 8003f08:	f7fc fae0 	bl	80004cc <aci_gap_set_auth_requirement>
                                 LBRContext.LBRContext_legacy.bleSecurityParam.bonding_mode);

    /**
     * Initialize whitelist
     */
    if(LBRContext.LBRContext_legacy.bleSecurityParam.bonding_mode)
 8003f0c:	4b09      	ldr	r3, [pc, #36]	; (8003f34 <LBR_Init+0xe4>)
 8003f0e:	789b      	ldrb	r3, [r3, #2]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d001      	beq.n	8003f18 <LBR_Init+0xc8>
    {
      aci_gap_configure_whitelist();
 8003f14:	f7fc fb2b 	bl	800056e <aci_gap_configure_whitelist>
    
    /**
     * Initialize LBS Applciation
     */
#if(LB_SERVER!=0)     
    LBSAPP_Init();
 8003f18:	f000 f8c0 	bl	800409c <LBSAPP_Init>
   // Start Advertise to be connected by Client
    SCH_SetTask(CFG_IdleTask_StartAdv); 
 8003f1c:	2001      	movs	r0, #1
 8003f1e:	f7ff feab 	bl	8003c78 <SCH_SetTask>
    SCH_SetTask(CFG_IdleTask_ConnDev1);
#endif
  
  }

  return;
 8003f22:	bf00      	nop
 8003f24:	bf00      	nop
}
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f2c:	20000560 	.word	0x20000560
 8003f30:	20000454 	.word	0x20000454
 8003f34:	200003b4 	.word	0x200003b4
 8003f38:	0001b207 	.word	0x0001b207
 8003f3c:	200003b8 	.word	0x200003b8

08003f40 <LBR_Adv_Request>:
/*                     DEVICE IS SERVER                         */
/****************************************************************/

#if(LB_SERVER!=0) 
void LBR_Adv_Request(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b08a      	sub	sp, #40	; 0x28
 8003f44:	af08      	add	r7, sp, #32
  if(LBRContext.Remote_Connection_Status [0]!= LBC_CONNECTED )
 8003f46:	4b12      	ldr	r3, [pc, #72]	; (8003f90 <LBR_Adv_Request+0x50>)
 8003f48:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8003f4c:	2b0a      	cmp	r3, #10
 8003f4e:	d01a      	beq.n	8003f86 <LBR_Adv_Request+0x46>
  {
    tBleStatus result=0x00;
 8003f50:	2300      	movs	r3, #0
 8003f52:	71fb      	strb	r3, [r7, #7]
    
    result = aci_gap_set_discoverable(ADV_IND,
 8003f54:	2300      	movs	r3, #0
 8003f56:	9306      	str	r3, [sp, #24]
 8003f58:	2300      	movs	r3, #0
 8003f5a:	9305      	str	r3, [sp, #20]
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	9304      	str	r3, [sp, #16]
 8003f60:	2300      	movs	r3, #0
 8003f62:	9303      	str	r3, [sp, #12]
 8003f64:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <LBR_Adv_Request+0x54>)
 8003f66:	9302      	str	r3, [sp, #8]
 8003f68:	230e      	movs	r3, #14
 8003f6a:	9301      	str	r3, [sp, #4]
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	9300      	str	r3, [sp, #0]
 8003f70:	2300      	movs	r3, #0
 8003f72:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003f76:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003f7a:	2000      	movs	r0, #0
 8003f7c:	f7fc f97c 	bl	8000278 <aci_gap_set_discoverable>
 8003f80:	4603      	mov	r3, r0
 8003f82:	71fb      	strb	r3, [r7, #7]
    else   
    {
      APPL_MESG_DBG("** START ADVERTISING **  Failed \r\n\r");
    }
  }
  return;
 8003f84:	bf00      	nop
 8003f86:	bf00      	nop
}
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	200003b4 	.word	0x200003b4
 8003f94:	080062d8 	.word	0x080062d8

08003f98 <SVCCTL_App_Notification>:

void SVCCTL_App_Notification(void *pckt)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_le_connection_complete * connection_complete_event;

  event_pckt = (hci_event_pckt*)((hci_uart_pckt *)pckt)->data;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	617b      	str	r3, [r7, #20]
  evt_disconn_complete *cc = (void *)event_pckt->data;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	3302      	adds	r3, #2
 8003faa:	613b      	str	r3, [r7, #16]
  switch(event_pckt->evt)
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	2b05      	cmp	r3, #5
 8003fb2:	d002      	beq.n	8003fba <SVCCTL_App_Notification+0x22>
 8003fb4:	2b3e      	cmp	r3, #62	; 0x3e
 8003fb6:	d018      	beq.n	8003fea <SVCCTL_App_Notification+0x52>
          break;
      }
      break; /* HCI_EVT_LE_META_EVENT */

    default:
      break;
 8003fb8:	e03a      	b.n	8004030 <SVCCTL_App_Notification+0x98>
      if(cc->handle == LBRContext.connectionHandleRemote)
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	4b1d      	ldr	r3, [pc, #116]	; (8004038 <SVCCTL_App_Notification+0xa0>)
 8003fc4:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d130      	bne.n	800402e <SVCCTL_App_Notification+0x96>
        LBRContext.connectionHandleRemote = LBC_IDLE;
 8003fcc:	4b1a      	ldr	r3, [pc, #104]	; (8004038 <SVCCTL_App_Notification+0xa0>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
        handleNotification.LBR_Evt_Opcode=LB_CLIENT_DISCON_EVT_EVT;
 8003fd4:	4b19      	ldr	r3, [pc, #100]	; (800403c <SVCCTL_App_Notification+0xa4>)
 8003fd6:	2203      	movs	r2, #3
 8003fd8:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle=connection_handle;
 8003fda:	4b19      	ldr	r3, [pc, #100]	; (8004040 <SVCCTL_App_Notification+0xa8>)
 8003fdc:	881a      	ldrh	r2, [r3, #0]
 8003fde:	4b17      	ldr	r3, [pc, #92]	; (800403c <SVCCTL_App_Notification+0xa4>)
 8003fe0:	805a      	strh	r2, [r3, #2]
        LBR_Notification(&handleNotification);
 8003fe2:	4816      	ldr	r0, [pc, #88]	; (800403c <SVCCTL_App_Notification+0xa4>)
 8003fe4:	f000 f83c 	bl	8004060 <LBR_Notification>
      break; /* EVT_DISCONN_COMPLETE */
 8003fe8:	e021      	b.n	800402e <SVCCTL_App_Notification+0x96>
      meta_evt = (evt_le_meta_event*)event_pckt->data;
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	3302      	adds	r3, #2
 8003fee:	60fb      	str	r3, [r7, #12]
      switch(meta_evt->subevent)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d118      	bne.n	800402a <SVCCTL_App_Notification+0x92>
          connection_complete_event = (evt_le_connection_complete *)meta_evt->data;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	60bb      	str	r3, [r7, #8]
          connection_handle = connection_complete_event->handle;
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004004:	b29a      	uxth	r2, r3
 8004006:	4b0e      	ldr	r3, [pc, #56]	; (8004040 <SVCCTL_App_Notification+0xa8>)
 8004008:	801a      	strh	r2, [r3, #0]
          LBRContext.connectionHandleRemote = connection_handle;
 800400a:	4b0d      	ldr	r3, [pc, #52]	; (8004040 <SVCCTL_App_Notification+0xa8>)
 800400c:	881a      	ldrh	r2, [r3, #0]
 800400e:	4b0a      	ldr	r3, [pc, #40]	; (8004038 <SVCCTL_App_Notification+0xa0>)
 8004010:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
          handleNotification.LBR_Evt_Opcode=LB_CLIENT_CONN_HANDLE_EVT;
 8004014:	4b09      	ldr	r3, [pc, #36]	; (800403c <SVCCTL_App_Notification+0xa4>)
 8004016:	2202      	movs	r2, #2
 8004018:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle=connection_handle;
 800401a:	4b09      	ldr	r3, [pc, #36]	; (8004040 <SVCCTL_App_Notification+0xa8>)
 800401c:	881a      	ldrh	r2, [r3, #0]
 800401e:	4b07      	ldr	r3, [pc, #28]	; (800403c <SVCCTL_App_Notification+0xa4>)
 8004020:	805a      	strh	r2, [r3, #2]
          LBR_Notification(&handleNotification);
 8004022:	4806      	ldr	r0, [pc, #24]	; (800403c <SVCCTL_App_Notification+0xa4>)
 8004024:	f000 f81c 	bl	8004060 <LBR_Notification>
         break; /* HCI_EVT_LE_CONN_COMPLETE */
 8004028:	e000      	b.n	800402c <SVCCTL_App_Notification+0x94>
          break;
 800402a:	bf00      	nop
      break; /* HCI_EVT_LE_META_EVENT */
 800402c:	e000      	b.n	8004030 <SVCCTL_App_Notification+0x98>
      break; /* EVT_DISCONN_COMPLETE */
 800402e:	bf00      	nop
  }
  return;
 8004030:	bf00      	nop
}
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	200003b4 	.word	0x200003b4
 800403c:	20000ad8 	.word	0x20000ad8
 8004040:	20000adc 	.word	0x20000adc

08004044 <LBR_App_Key_Button_Action>:

void LBR_App_Key_Button_Action(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  SCH_SetTask(CFG_IdleTask_Button);
 8004048:	2004      	movs	r0, #4
 800404a:	f7ff fe15 	bl	8003c78 <SCH_SetTask>
}
 800404e:	bf00      	nop
 8004050:	bd80      	pop	{r7, pc}

08004052 <BLESVC_InitCustomSvc>:

#endif 

void BLESVC_InitCustomSvc(void)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	af00      	add	r7, sp, #0
#if(LB_SERVER!=0) 
  LBS_STM_Init();
 8004056:	f7fc ffb1 	bl	8000fbc <LBS_STM_Init>
#endif    
  return;
 800405a:	bf00      	nop
}
 800405c:	bd80      	pop	{r7, pc}
	...

08004060 <LBR_Notification>:
/* Public functions ----------------------------------------------------------*/



void LBR_Notification(LBR_ConnHandle_Not_evt_t *pNotification)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  switch(pNotification->LBR_Evt_Opcode)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2b02      	cmp	r3, #2
 800406e:	d002      	beq.n	8004076 <LBR_Notification+0x16>
 8004070:	2b03      	cmp	r3, #3
 8004072:	d005      	beq.n	8004080 <LBR_Notification+0x20>
      LB_End_Dev_Context.connHandleWithLbRouteur =  0x00;
      SCH_SetTask(CFG_IdleTask_StartAdv);
      break;

    default:
      break;
 8004074:	e00b      	b.n	800408e <LBR_Notification+0x2e>
      LB_End_Dev_Context.connHandleWithLbRouteur = pNotification->ConnectionHandle;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	885a      	ldrh	r2, [r3, #2]
 800407a:	4b07      	ldr	r3, [pc, #28]	; (8004098 <LBR_Notification+0x38>)
 800407c:	809a      	strh	r2, [r3, #4]
      break;
 800407e:	e006      	b.n	800408e <LBR_Notification+0x2e>
      LB_End_Dev_Context.connHandleWithLbRouteur =  0x00;
 8004080:	4b05      	ldr	r3, [pc, #20]	; (8004098 <LBR_Notification+0x38>)
 8004082:	2200      	movs	r2, #0
 8004084:	809a      	strh	r2, [r3, #4]
      SCH_SetTask(CFG_IdleTask_StartAdv);
 8004086:	2001      	movs	r0, #1
 8004088:	f7ff fdf6 	bl	8003c78 <SCH_SetTask>
      break;
 800408c:	bf00      	nop
  }
  return;
 800408e:	bf00      	nop
}
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	20000a94 	.word	0x20000a94

0800409c <LBSAPP_Init>:

void LBSAPP_Init(void)
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
  /**
   * Initialize LedButton Service
   */
  LB_End_Dev_Context.Notification_Button_Status=0; 
 80040a0:	4b08      	ldr	r3, [pc, #32]	; (80040c4 <LBSAPP_Init+0x28>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	701a      	strb	r2, [r3, #0]
  LB_End_Dev_Context.connHandleWithLbRouteur =  0x00;
 80040a6:	4b07      	ldr	r3, [pc, #28]	; (80040c4 <LBSAPP_Init+0x28>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	809a      	strh	r2, [r3, #4]
 // LB_End_Dev_Context.LedControlEndDevice1.Device_Led_Selection=0x01; // device1
//  LB_End_Dev_Context.LedControlEndDevice1.Led1Control=0x00; //led OFF
  LB_End_Dev_Context.ButtonStatusToClient.Device_Button_Selection=0x01; //Device1
 80040ac:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <LBSAPP_Init+0x28>)
 80040ae:	2201      	movs	r2, #1
 80040b0:	705a      	strb	r2, [r3, #1]
  LB_End_Dev_Context.ButtonStatusToClient.ButtonStatus=0x00;
 80040b2:	4b04      	ldr	r3, [pc, #16]	; (80040c4 <LBSAPP_Init+0x28>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	709a      	strb	r2, [r3, #2]

  return;
 80040b8:	bf00      	nop
}
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	20000a94 	.word	0x20000a94

080040c8 <LB_App_Button_Trigger_Received>:

void LB_App_Button_Trigger_Received(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
  
  //UPDATE BUTTON CHARACTERISTICS VALUES

  if(LB_End_Dev_Context.ButtonStatusToClient.ButtonStatus==0x01){
 80040cc:	4b0c      	ldr	r3, [pc, #48]	; (8004100 <LB_App_Button_Trigger_Received+0x38>)
 80040ce:	789b      	ldrb	r3, [r3, #2]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d103      	bne.n	80040dc <LB_App_Button_Trigger_Received+0x14>
  LB_End_Dev_Context.ButtonStatusToClient.ButtonStatus=0x00;}
 80040d4:	4b0a      	ldr	r3, [pc, #40]	; (8004100 <LB_App_Button_Trigger_Received+0x38>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	709a      	strb	r2, [r3, #2]
 80040da:	e002      	b.n	80040e2 <LB_App_Button_Trigger_Received+0x1a>
  else {
  LB_End_Dev_Context.ButtonStatusToClient.ButtonStatus=0x01;  
 80040dc:	4b08      	ldr	r3, [pc, #32]	; (8004100 <LB_App_Button_Trigger_Received+0x38>)
 80040de:	2201      	movs	r2, #1
 80040e0:	709a      	strb	r2, [r3, #2]
  }
  LB_End_Dev_Context.ButtonStatusToClient.Device_Button_Selection=0x01; //Button1 pushed
 80040e2:	4b07      	ldr	r3, [pc, #28]	; (8004100 <LB_App_Button_Trigger_Received+0x38>)
 80040e4:	2201      	movs	r2, #1
 80040e6:	705a      	strb	r2, [r3, #1]
  APPL_MESG_DBG("\r\n\r ");
  APPL_MESG_DBG("-- APPLICATION : BUTTON PUSHED - CHECK NOTIFICATION \n ");
 
   if(LB_End_Dev_Context.Notification_Button_Status){ 
 80040e8:	4b05      	ldr	r3, [pc, #20]	; (8004100 <LB_App_Button_Trigger_Received+0x38>)
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <LB_App_Button_Trigger_Received+0x34>
    APPL_MESG_DBG("-- APPLICATION : INFORM ROUTEUR BUTTON 1 PUSHED \n ");
    BLE_SVC_LedButton_Update_Char(BUTTON_CHAR_UUID, (uint8_t *)&LB_End_Dev_Context.ButtonStatusToClient);
 80040f0:	4904      	ldr	r1, [pc, #16]	; (8004104 <LB_App_Button_Trigger_Received+0x3c>)
 80040f2:	f642 3051 	movw	r0, #11089	; 0x2b51
 80040f6:	f7fc ffab 	bl	8001050 <BLE_SVC_LedButton_Update_Char>
   } else {
    APPL_MESG_DBG("-- APPLICATION : CAN'T INFORM ROUTEUR -  NOTIFICATION DISABLED\n "); 
   }

  return;
 80040fa:	bf00      	nop
 80040fc:	bf00      	nop
}
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	20000a94 	.word	0x20000a94
 8004104:	20000a95 	.word	0x20000a95

08004108 <LBS_App_Notification>:
  *         correspondent action
  * @param  pNotification: LBS notification.
  * @retval None
 */ 
void LBS_App_Notification(LBS_App_Notification_evt_t *pNotification)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  switch(pNotification->LBS_Evt_Opcode)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b03      	cmp	r3, #3
 8004116:	d82b      	bhi.n	8004170 <LBS_App_Notification+0x68>
 8004118:	a201      	add	r2, pc, #4	; (adr r2, 8004120 <LBS_App_Notification+0x18>)
 800411a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411e:	bf00      	nop
 8004120:	08004131 	.word	0x08004131
 8004124:	08004139 	.word	0x08004139
 8004128:	08004171 	.word	0x08004171
 800412c:	08004141 	.word	0x08004141
  {
    case BUTTON_NOTIFY_ENABLED_EVT:
      LB_End_Dev_Context.Notification_Button_Status = 1;
 8004130:	4b13      	ldr	r3, [pc, #76]	; (8004180 <LBS_App_Notification+0x78>)
 8004132:	2201      	movs	r2, #1
 8004134:	701a      	strb	r2, [r3, #0]
      APPL_MESG_DBG("-- APPLICATION END DEVICE : BUTTON NOTIFICATION ENABLED\n");      
      break;
 8004136:	e01e      	b.n	8004176 <LBS_App_Notification+0x6e>

    case BUTTON_NOTIFY_DISABLED_EVT:
      LB_End_Dev_Context.Notification_Button_Status = 0;
 8004138:	4b11      	ldr	r3, [pc, #68]	; (8004180 <LBS_App_Notification+0x78>)
 800413a:	2200      	movs	r2, #0
 800413c:	701a      	strb	r2, [r3, #0]
      APPL_MESG_DBG("-- APPLICATION END DEVICE : BUTTON NOTIFICATION DISABLED\n");
      break;
 800413e:	e01a      	b.n	8004176 <LBS_App_Notification+0x6e>
      /*Create Function to respond to Client-LB Routeur the status of each Led*/
      break;

    case ST_SVC_LED_WRITE_EVT:
      /* create function to switch ON/OFF Leds on selected device. */
      if(pNotification->DataTransfered.pPayload[0] == 0x01){ 
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d114      	bne.n	8004174 <LBS_App_Notification+0x6c>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	3301      	adds	r3, #1
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d102      	bne.n	800415c <LBS_App_Notification+0x54>
        {
          BSP_LED_On(LED2);
 8004156:	2000      	movs	r0, #0
 8004158:	f000 fb68 	bl	800482c <BSP_LED_On>
          APPL_MESG_DBG("-- APPLICATION END DEVICE 1 : LED1 ON\n"); 
        }
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	3301      	adds	r3, #1
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d105      	bne.n	8004174 <LBS_App_Notification+0x6c>
        {
          BSP_LED_Off(LED2);
 8004168:	2000      	movs	r0, #0
 800416a:	f000 fb75 	bl	8004858 <BSP_LED_Off>
          APPL_MESG_DBG("-- APPLICATION END DEVICE 1 : LED1 OFF\n"); 
        }
      }
      break;
 800416e:	e001      	b.n	8004174 <LBS_App_Notification+0x6c>

    default:
      break;
 8004170:	bf00      	nop
 8004172:	e000      	b.n	8004176 <LBS_App_Notification+0x6e>
      break;
 8004174:	bf00      	nop
  }
  return;
 8004176:	bf00      	nop
}
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20000a94 	.word	0x20000a94

08004184 <LL_PWR_EnablePUPDCfg>:
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_APC);
 8004188:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <LL_PWR_EnablePUPDCfg+0x1c>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	4a04      	ldr	r2, [pc, #16]	; (80041a0 <LL_PWR_EnablePUPDCfg+0x1c>)
 800418e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004192:	6093      	str	r3, [r2, #8]
}
 8004194:	bf00      	nop
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	40007000 	.word	0x40007000

080041a4 <LL_PWR_DisablePUPDCfg>:
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_APC);
 80041a8:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <LL_PWR_DisablePUPDCfg+0x1c>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	4a04      	ldr	r2, [pc, #16]	; (80041c0 <LL_PWR_DisablePUPDCfg+0x1c>)
 80041ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041b2:	6093      	str	r3, [r2, #8]
}
 80041b4:	bf00      	nop
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	40007000 	.word	0x40007000

080041c4 <LL_PWR_EnableWakeUpPin>:
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  SET_BIT(PWR->CR3, WakeUpPin);
 80041cc:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <LL_PWR_EnableWakeUpPin+0x20>)
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	4904      	ldr	r1, [pc, #16]	; (80041e4 <LL_PWR_EnableWakeUpPin+0x20>)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	608b      	str	r3, [r1, #8]
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	40007000 	.word	0x40007000

080041e8 <LL_PWR_DisableWakeUpPin>:
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->CR3, WakeUpPin);
 80041f0:	4b06      	ldr	r3, [pc, #24]	; (800420c <LL_PWR_DisableWakeUpPin+0x24>)
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	43db      	mvns	r3, r3
 80041f8:	4904      	ldr	r1, [pc, #16]	; (800420c <LL_PWR_DisableWakeUpPin+0x24>)
 80041fa:	4013      	ands	r3, r2
 80041fc:	608b      	str	r3, [r1, #8]
}
 80041fe:	bf00      	nop
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	40007000 	.word	0x40007000

08004210 <LL_PWR_ClearFlag_SB>:
  * @brief  Clear Stand-By Flag
  * @rmtoll SCR          CSBF          LL_PWR_ClearFlag_SB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_SB(void)
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CSBF);
 8004214:	4b04      	ldr	r3, [pc, #16]	; (8004228 <LL_PWR_ClearFlag_SB+0x18>)
 8004216:	f44f 7280 	mov.w	r2, #256	; 0x100
 800421a:	619a      	str	r2, [r3, #24]
}
 800421c:	bf00      	nop
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	40007000 	.word	0x40007000

0800422c <LL_PWR_ClearFlag_WU1>:
  * @brief  Clear Wake-up Flag 1
  * @rmtoll SCR          CWUF1         LL_PWR_ClearFlag_WU1
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU1(void)
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF1);
 8004230:	4b03      	ldr	r3, [pc, #12]	; (8004240 <LL_PWR_ClearFlag_WU1+0x14>)
 8004232:	2201      	movs	r2, #1
 8004234:	619a      	str	r2, [r3, #24]
}
 8004236:	bf00      	nop
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr
 8004240:	40007000 	.word	0x40007000

08004244 <LL_RTC_WAKEUP_SetClock>:
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f023 0207 	bic.w	r2, r3, #7
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	431a      	orrs	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	609a      	str	r2, [r3, #8]
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
	...

0800426c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004270:	4b06      	ldr	r3, [pc, #24]	; (800428c <LL_RCC_ForceBackupDomainReset+0x20>)
 8004272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004276:	4a05      	ldr	r2, [pc, #20]	; (800428c <LL_RCC_ForceBackupDomainReset+0x20>)
 8004278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800427c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004280:	bf00      	nop
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	40021000 	.word	0x40021000

08004290 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004294:	4b06      	ldr	r3, [pc, #24]	; (80042b0 <LL_RCC_ReleaseBackupDomainReset+0x20>)
 8004296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800429a:	4a05      	ldr	r2, [pc, #20]	; (80042b0 <LL_RCC_ReleaseBackupDomainReset+0x20>)
 800429c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80042a4:	bf00      	nop
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	40021000 	.word	0x40021000

080042b4 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == RCC_CSR_PINRSTF) ? 1UL : 0UL);
 80042b8:	4b07      	ldr	r3, [pc, #28]	; (80042d8 <LL_RCC_IsActiveFlag_PINRST+0x24>)
 80042ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042c6:	d101      	bne.n	80042cc <LL_RCC_IsActiveFlag_PINRST+0x18>
 80042c8:	2301      	movs	r3, #1
 80042ca:	e000      	b.n	80042ce <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	40021000 	.word	0x40021000

080042dc <main>:
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
  HAL_Init();
 80042e2:	f000 fb25 	bl	8004930 <HAL_Init>

#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 80042e6:	f000 fb63 	bl	80049b0 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 80042ea:	f000 fb71 	bl	80049d0 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 80042ee:	f000 fb7f 	bl	80049f0 <HAL_DBGMCU_EnableDBGStandbyMode>
#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

  /**
   * The PWR Peripheral is used in most of the drivers. It should be kept enable to make sure all accesses are granted.
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80042f2:	4b28      	ldr	r3, [pc, #160]	; (8004394 <main+0xb8>)
 80042f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f6:	4a27      	ldr	r2, [pc, #156]	; (8004394 <main+0xb8>)
 80042f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042fc:	6593      	str	r3, [r2, #88]	; 0x58
 80042fe:	4b25      	ldr	r3, [pc, #148]	; (8004394 <main+0xb8>)
 8004300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004306:	607b      	str	r3, [r7, #4]
 8004308:	687b      	ldr	r3, [r7, #4]
   * The Firmware used the RTC IP to implement the TimerServer. During development, it is common to trigger the nreset
   * to restart the application as this would be done on power ON. However, in that case, the RTC domain is not reseted
   * The following implementation resets the RTC domain so that the device behaves in a similar way on nreset to power ON.
   */

  if(LL_RCC_IsActiveFlag_PINRST() != RESET)
 800430a:	f7ff ffd3 	bl	80042b4 <LL_RCC_IsActiveFlag_PINRST>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d011      	beq.n	8004338 <main+0x5c>
  {
    LL_PWR_ClearFlag_SB();
 8004314:	f7ff ff7c 	bl	8004210 <LL_PWR_ClearFlag_SB>

    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8004318:	f000 ff90 	bl	800523c <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 800431c:	f000 ff8e 	bl	800523c <HAL_PWR_EnableBkUpAccess>

    LL_RCC_ForceBackupDomainReset();
 8004320:	f7ff ffa4 	bl	800426c <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_CLEAR_RESET_FLAGS();
 8004324:	4b1b      	ldr	r3, [pc, #108]	; (8004394 <main+0xb8>)
 8004326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800432a:	4a1a      	ldr	r2, [pc, #104]	; (8004394 <main+0xb8>)
 800432c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004330:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    LL_RCC_ReleaseBackupDomainReset();
 8004334:	f7ff ffac 	bl	8004290 <LL_RCC_ReleaseBackupDomainReset>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  LPM_SetOffMode(CFG_LPM_App, LPM_OffMode_Dis);
 8004338:	2100      	movs	r1, #0
 800433a:	2004      	movs	r0, #4
 800433c:	f7ff fad8 	bl	80038f0 <LPM_SetOffMode>

  SystemPower_Config();         /**< Configure the system Power */
 8004340:	f000 f88c 	bl	800445c <SystemPower_Config>

  SystemLowPowerMode_Config();  /**< Configure the low power mode */
 8004344:	f000 f902 	bl	800454c <SystemLowPowerMode_Config>

  /**
   * Configure the RTC
   */
  Init_RTC();                             /**< Initialize the RTC IP */
 8004348:	f000 f830 	bl	80043ac <Init_RTC>
  HW_TS_Init(hw_ts_InitMode_Full, &hrtc);  /**< Initialize the TimerServer */
 800434c:	4912      	ldr	r1, [pc, #72]	; (8004398 <main+0xbc>)
 800434e:	2000      	movs	r0, #0
 8004350:	f7fe fb96 	bl	8002a80 <HW_TS_Init>
   * The system clock is updated from this point as the code below may depend on the system clock selected
   * The code above can be running at any speed.
   * When the application is expected to run at higher speed, it should be better to set the correct system clock
   * in system_stm32yyxx.c so that the initialization phase is running at max speed.
   */
  SystemClock_Config();         /**< Configure the system clock */
 8004354:	f000 f90b 	bl	800456e <SystemClock_Config>
  /**
   * It shall be registered before calling LBR_Init()
   */
  /* SCH_RegTask( CFG_IdleTask_MeasReq, HRSAPP_Measurement ); */
  
  SCH_RegTask( CFG_IdleTask_HciAsynchEvt, TL_BLE_HCI_UserEvtProc );
 8004358:	4910      	ldr	r1, [pc, #64]	; (800439c <main+0xc0>)
 800435a:	2005      	movs	r0, #5
 800435c:	f7ff fc6c 	bl	8003c38 <SCH_RegTask>
  SCH_RegTask( CFG_IdleTask_TlEvt, TL_BLE_R_EvtProc );
 8004360:	490f      	ldr	r1, [pc, #60]	; (80043a0 <main+0xc4>)
 8004362:	2000      	movs	r0, #0
 8004364:	f7ff fc68 	bl	8003c38 <SCH_RegTask>
  SCH_RegTask( CFG_IdleTask_Button, LB_App_Button_Trigger_Received );
 8004368:	490e      	ldr	r1, [pc, #56]	; (80043a4 <main+0xc8>)
 800436a:	2004      	movs	r0, #4
 800436c:	f7ff fc64 	bl	8003c38 <SCH_RegTask>
#if(LB_CLIENT!=0) 
  SCH_RegTask( CFG_IdleTask_ConnDev1, LBR_AppConnReq1 );
  SCH_RegTask( CFG_IdleTask_SearchService, LBR_Client_Update_Service );
#endif
#if(LB_SERVER!=0) 
  SCH_RegTask( CFG_IdleTask_StartAdv, LBR_Adv_Request );
 8004370:	490d      	ldr	r1, [pc, #52]	; (80043a8 <main+0xcc>)
 8004372:	2001      	movs	r0, #1
 8004374:	f7ff fc60 	bl	8003c38 <SCH_RegTask>
#endif  

  /**
   * BLE application start
   */
  LBR_Init(LBR_Full);
 8004378:	2001      	movs	r0, #1
 800437a:	f7ff fd69 	bl	8003e50 <LBR_Init>
  
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800437e:	2101      	movs	r1, #1
 8004380:	2000      	movs	r0, #0
 8004382:	f000 fa7f 	bl	8004884 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8004386:	2000      	movs	r0, #0
 8004388:	f000 fa20 	bl	80047cc <BSP_LED_Init>
  
  /* Start the main processes */
  while(1)
  {
    SCH_Run();
 800438c:	f7ff fbee 	bl	8003b6c <SCH_Run>
 8004390:	e7fc      	b.n	800438c <main+0xb0>
 8004392:	bf00      	nop
 8004394:	40021000 	.word	0x40021000
 8004398:	20000a9c 	.word	0x20000a9c
 800439c:	08003029 	.word	0x08003029
 80043a0:	08003305 	.word	0x08003305
 80043a4:	080040c9 	.word	0x080040c9
 80043a8:	08003f41 	.word	0x08003f41

080043ac <Init_RTC>:
   * @brief This function initializes the RTC IP
   * @param  None
   * @retval None
   */
static void Init_RTC(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
  __HAL_RCC_LSI_ENABLE();     /**< Enable the LSI clock */
 80043b0:	4b27      	ldr	r3, [pc, #156]	; (8004450 <Init_RTC+0xa4>)
 80043b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043b6:	4a26      	ldr	r2, [pc, #152]	; (8004450 <Init_RTC+0xa4>)
 80043b8:	f043 0301 	orr.w	r3, r3, #1
 80043bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80043c0:	f000 ff3c 	bl	800523c <HAL_PWR_EnableBkUpAccess>

  /**
   *  Write twice the value to flush the APB-AHB bridge
   *  This bit shall be written in the register before writing the next one
   */
  HAL_PWR_EnableBkUpAccess();
 80043c4:	f000 ff3a 	bl	800523c <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSI); /**< Select LSI as RTC Input */
 80043c8:	4b21      	ldr	r3, [pc, #132]	; (8004450 <Init_RTC+0xa4>)
 80043ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043d2:	4a1f      	ldr	r2, [pc, #124]	; (8004450 <Init_RTC+0xa4>)
 80043d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  __HAL_RCC_RTC_ENABLE();                     /**< Enable RTC */
 80043dc:	4b1c      	ldr	r3, [pc, #112]	; (8004450 <Init_RTC+0xa4>)
 80043de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e2:	4a1b      	ldr	r2, [pc, #108]	; (8004450 <Init_RTC+0xa4>)
 80043e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  hrtc.Instance = RTC;                        /**< Define instance */
 80043ec:	4b19      	ldr	r3, [pc, #100]	; (8004454 <Init_RTC+0xa8>)
 80043ee:	4a1a      	ldr	r2, [pc, #104]	; (8004458 <Init_RTC+0xac>)
 80043f0:	601a      	str	r2, [r3, #0]

  /**
   * Bypass the shadow register
   */
  HAL_RTCEx_EnableBypassShadow(&hrtc);
 80043f2:	4818      	ldr	r0, [pc, #96]	; (8004454 <Init_RTC+0xa8>)
 80043f4:	f001 fe3c 	bl	8006070 <HAL_RTCEx_EnableBypassShadow>

  /**
   * Set the Asynchronous prescaler
   */
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80043f8:	4b16      	ldr	r3, [pc, #88]	; (8004454 <Init_RTC+0xa8>)
 80043fa:	2201      	movs	r2, #1
 80043fc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80043fe:	4b15      	ldr	r3, [pc, #84]	; (8004454 <Init_RTC+0xa8>)
 8004400:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8004404:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004406:	4b13      	ldr	r3, [pc, #76]	; (8004454 <Init_RTC+0xa8>)
 8004408:	2200      	movs	r2, #0
 800440a:	611a      	str	r2, [r3, #16]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;             /**< need to be initialized to not corrupt the RTC_CR register */
 800440c:	4b11      	ldr	r3, [pc, #68]	; (8004454 <Init_RTC+0xa8>)
 800440e:	2200      	movs	r2, #0
 8004410:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;  /**< need to be initialized to not corrupt the RTC_CR register */
 8004412:	4b10      	ldr	r3, [pc, #64]	; (8004454 <Init_RTC+0xa8>)
 8004414:	2200      	movs	r2, #0
 8004416:	619a      	str	r2, [r3, #24]
  HAL_RTC_Init(&hrtc);
 8004418:	480e      	ldr	r0, [pc, #56]	; (8004454 <Init_RTC+0xa8>)
 800441a:	f001 fd0d 	bl	8005e38 <HAL_RTC_Init>

  __HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc) ;  /**< Disable Write Protection */
 800441e:	4b0d      	ldr	r3, [pc, #52]	; (8004454 <Init_RTC+0xa8>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	22ca      	movs	r2, #202	; 0xca
 8004424:	625a      	str	r2, [r3, #36]	; 0x24
 8004426:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <Init_RTC+0xa8>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2253      	movs	r2, #83	; 0x53
 800442c:	625a      	str	r2, [r3, #36]	; 0x24

  LL_RTC_WAKEUP_SetClock(hrtc.Instance, CFG_RTC_WUCKSEL_DIVIDER);
 800442e:	4b09      	ldr	r3, [pc, #36]	; (8004454 <Init_RTC+0xa8>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2103      	movs	r1, #3
 8004434:	4618      	mov	r0, r3
 8004436:	f7ff ff05 	bl	8004244 <LL_RTC_WAKEUP_SetClock>

  while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0);  /**< Wait for LSI to be stable */
 800443a:	bf00      	nop
 800443c:	4b04      	ldr	r3, [pc, #16]	; (8004450 <Init_RTC+0xa4>)
 800443e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0f8      	beq.n	800443c <Init_RTC+0x90>

  return;
 800444a:	bf00      	nop
}
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	40021000 	.word	0x40021000
 8004454:	20000a9c 	.word	0x20000a9c
 8004458:	40002800 	.word	0x40002800

0800445c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b088      	sub	sp, #32
 8004460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 8004462:	f107 030c 	add.w	r3, r7, #12
 8004466:	2200      	movs	r2, #0
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	605a      	str	r2, [r3, #4]
 800446c:	609a      	str	r2, [r3, #8]
 800446e:	60da      	str	r2, [r3, #12]
 8004470:	611a      	str	r2, [r3, #16]
   * Disable all GPIOs clock in SLEEP mode
   */
#if (CFG_DEBUGGER_SUPPORTED == 0)
  __HAL_RCC_GPIOA_CLK_SLEEP_DISABLE();
#endif
  __HAL_RCC_GPIOB_CLK_SLEEP_DISABLE();
 8004472:	4b34      	ldr	r3, [pc, #208]	; (8004544 <SystemPower_Config+0xe8>)
 8004474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004476:	4a33      	ldr	r2, [pc, #204]	; (8004544 <SystemPower_Config+0xe8>)
 8004478:	f023 0302 	bic.w	r3, r3, #2
 800447c:	66d3      	str	r3, [r2, #108]	; 0x6c
  __HAL_RCC_GPIOC_CLK_SLEEP_DISABLE();
 800447e:	4b31      	ldr	r3, [pc, #196]	; (8004544 <SystemPower_Config+0xe8>)
 8004480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004482:	4a30      	ldr	r2, [pc, #192]	; (8004544 <SystemPower_Config+0xe8>)
 8004484:	f023 0304 	bic.w	r3, r3, #4
 8004488:	66d3      	str	r3, [r2, #108]	; 0x6c
  __HAL_RCC_GPIOD_CLK_SLEEP_DISABLE();
 800448a:	4b2e      	ldr	r3, [pc, #184]	; (8004544 <SystemPower_Config+0xe8>)
 800448c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800448e:	4a2d      	ldr	r2, [pc, #180]	; (8004544 <SystemPower_Config+0xe8>)
 8004490:	f023 0308 	bic.w	r3, r3, #8
 8004494:	66d3      	str	r3, [r2, #108]	; 0x6c
  __HAL_RCC_GPIOE_CLK_SLEEP_DISABLE();
 8004496:	4b2b      	ldr	r3, [pc, #172]	; (8004544 <SystemPower_Config+0xe8>)
 8004498:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800449a:	4a2a      	ldr	r2, [pc, #168]	; (8004544 <SystemPower_Config+0xe8>)
 800449c:	f023 0310 	bic.w	r3, r3, #16
 80044a0:	66d3      	str	r3, [r2, #108]	; 0x6c
  __HAL_RCC_GPIOF_CLK_SLEEP_DISABLE();
 80044a2:	4b28      	ldr	r3, [pc, #160]	; (8004544 <SystemPower_Config+0xe8>)
 80044a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044a6:	4a27      	ldr	r2, [pc, #156]	; (8004544 <SystemPower_Config+0xe8>)
 80044a8:	f023 0320 	bic.w	r3, r3, #32
 80044ac:	66d3      	str	r3, [r2, #108]	; 0x6c
  __HAL_RCC_GPIOG_CLK_SLEEP_DISABLE();
 80044ae:	4b25      	ldr	r3, [pc, #148]	; (8004544 <SystemPower_Config+0xe8>)
 80044b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044b2:	4a24      	ldr	r2, [pc, #144]	; (8004544 <SystemPower_Config+0xe8>)
 80044b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044b8:	66d3      	str	r3, [r2, #108]	; 0x6c
  __HAL_RCC_GPIOH_CLK_SLEEP_DISABLE();
 80044ba:	4b22      	ldr	r3, [pc, #136]	; (8004544 <SystemPower_Config+0xe8>)
 80044bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044be:	4a21      	ldr	r2, [pc, #132]	; (8004544 <SystemPower_Config+0xe8>)
 80044c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044c4:	66d3      	str	r3, [r2, #108]	; 0x6c
   */

  /**
   * Enable GPIOs clock
   */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80044c6:	4b1f      	ldr	r3, [pc, #124]	; (8004544 <SystemPower_Config+0xe8>)
 80044c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ca:	4a1e      	ldr	r2, [pc, #120]	; (8004544 <SystemPower_Config+0xe8>)
 80044cc:	f043 0301 	orr.w	r3, r3, #1
 80044d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044d2:	4b1c      	ldr	r3, [pc, #112]	; (8004544 <SystemPower_Config+0xe8>)
 80044d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	60bb      	str	r3, [r7, #8]
 80044dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80044de:	4b19      	ldr	r3, [pc, #100]	; (8004544 <SystemPower_Config+0xe8>)
 80044e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e2:	4a18      	ldr	r2, [pc, #96]	; (8004544 <SystemPower_Config+0xe8>)
 80044e4:	f043 0302 	orr.w	r3, r3, #2
 80044e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044ea:	4b16      	ldr	r3, [pc, #88]	; (8004544 <SystemPower_Config+0xe8>)
 80044ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	607b      	str	r3, [r7, #4]
 80044f4:	687b      	ldr	r3, [r7, #4]

  /**
   * Configure all GPIO port pins in Analog mode with no pull
   */
  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 80044f6:	2303      	movs	r3, #3
 80044f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Pin = GPIO_PIN_All;
 80044fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004502:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004504:	f107 030c 	add.w	r3, r7, #12
 8004508:	4619      	mov	r1, r3
 800450a:	480f      	ldr	r0, [pc, #60]	; (8004548 <SystemPower_Config+0xec>)
 800450c:	f000 fca4 	bl	8004e58 <HAL_GPIO_Init>

#if (CFG_DEBUGGER_SUPPORTED == 1)
  GPIO_InitStructure.Pin = (GPIO_PIN_All ^ (GPIO_PIN_13 | GPIO_PIN_14));
 8004510:	f649 73ff 	movw	r3, #40959	; 0x9fff
 8004514:	60fb      	str	r3, [r7, #12]
#endif
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004516:	f107 030c 	add.w	r3, r7, #12
 800451a:	4619      	mov	r1, r3
 800451c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004520:	f000 fc9a 	bl	8004e58 <HAL_GPIO_Init>

  /**
   * Disable GPIOs clock
   */
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8004524:	4b07      	ldr	r3, [pc, #28]	; (8004544 <SystemPower_Config+0xe8>)
 8004526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004528:	4a06      	ldr	r2, [pc, #24]	; (8004544 <SystemPower_Config+0xe8>)
 800452a:	f023 0301 	bic.w	r3, r3, #1
 800452e:	64d3      	str	r3, [r2, #76]	; 0x4c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8004530:	4b04      	ldr	r3, [pc, #16]	; (8004544 <SystemPower_Config+0xe8>)
 8004532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004534:	4a03      	ldr	r2, [pc, #12]	; (8004544 <SystemPower_Config+0xe8>)
 8004536:	f023 0302 	bic.w	r3, r3, #2
 800453a:	64d3      	str	r3, [r2, #76]	; 0x4c

  return;
 800453c:	bf00      	nop
}
 800453e:	3720      	adds	r7, #32
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	40021000 	.word	0x40021000
 8004548:	48000400 	.word	0x48000400

0800454c <SystemLowPowerMode_Config>:
 * @note
 * @param  None
 * @retval None
 */
static void SystemLowPowerMode_Config(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
  LPM_Conf_t LowPowerModeConfiguration;

  /**
   * Keep SRAM2 supplied when in standby mode
   */
  HAL_PWREx_EnableSRAM2ContentRetention();
 8004552:	f000 fe91 	bl	8005278 <HAL_PWREx_EnableSRAM2ContentRetention>

  LowPowerModeConfiguration.Stop_Mode_Config = CFG_StopMode2;
 8004556:	2302      	movs	r3, #2
 8004558:	603b      	str	r3, [r7, #0]
  LowPowerModeConfiguration.OFF_Mode_Config = CFG_Standby;
 800455a:	2303      	movs	r3, #3
 800455c:	607b      	str	r3, [r7, #4]
  LPM_SetConf(&LowPowerModeConfiguration);
 800455e:	463b      	mov	r3, r7
 8004560:	4618      	mov	r0, r3
 8004562:	f7ff f9b1 	bl	80038c8 <LPM_SetConf>

  return;
 8004566:	bf00      	nop
}
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <SystemClock_Config>:
 *
 * @param  None
 * @retval None
 */
void SystemClock_Config(void)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b096      	sub	sp, #88	; 0x58
 8004572:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004574:	f107 0314 	add.w	r3, r7, #20
 8004578:	2244      	movs	r2, #68	; 0x44
 800457a:	2100      	movs	r1, #0
 800457c:	4618      	mov	r0, r3
 800457e:	f001 fe83 	bl	8006288 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004582:	463b      	mov	r3, r7
 8004584:	2200      	movs	r2, #0
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	605a      	str	r2, [r3, #4]
 800458a:	609a      	str	r2, [r3, #8]
 800458c:	60da      	str	r2, [r3, #12]
 800458e:	611a      	str	r2, [r3, #16]

  /**
   *  Enable MSI oscillator and configure the system at 16MHz
   *  The best power consumption are achieved with 8Mhz on the SPI to access the BlueNRG device
   */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 8004590:	2310      	movs	r3, #16
 8004592:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 8004594:	2301      	movs	r3, #1
 8004596:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_8;
 8004598:	2380      	movs	r3, #128	; 0x80
 800459a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800459c:	2300      	movs	r3, #0
 800459e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_OFF;
 80045a0:	2301      	movs	r3, #1
 80045a2:	63fb      	str	r3, [r7, #60]	; 0x3c

  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80045a4:	f107 0314 	add.w	r3, r7, #20
 80045a8:	4618      	mov	r0, r3
 80045aa:	f000 fe91 	bl	80052d0 <HAL_RCC_OscConfig>

  /**
   *  Configure the HCLK, PCLK1 and PCLK2 clocks dividers  to a maximum of 16Mhz on SPI.
   */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80045ae:	230f      	movs	r3, #15
 80045b0:	603b      	str	r3, [r7, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80045b2:	2300      	movs	r3, #0
 80045b4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80045b6:	2300      	movs	r3, #0
 80045b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80045ba:	2300      	movs	r3, #0
 80045bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80045be:	2300      	movs	r3, #0
 80045c0:	613b      	str	r3, [r7, #16]

  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 80045c2:	463b      	mov	r3, r7
 80045c4:	2102      	movs	r1, #2
 80045c6:	4618      	mov	r0, r3
 80045c8:	f001 fa68 	bl	8005a9c <HAL_RCC_ClockConfig>
#else
#error Missing System Clock Configuration
#endif

  return;
 80045cc:	bf00      	nop
}
 80045ce:	3758      	adds	r7, #88	; 0x58
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <HAL_GPIO_EXTI_Callback>:
  *         It OVERLOADS the __WEAK function defined in stm32l4xx_hal_gpio.h/c
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	4603      	mov	r3, r0
 80045dc:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin)
 80045de:	88fb      	ldrh	r3, [r7, #6]
 80045e0:	2b40      	cmp	r3, #64	; 0x40
 80045e2:	d003      	beq.n	80045ec <HAL_GPIO_EXTI_Callback+0x18>
 80045e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045e8:	d003      	beq.n	80045f2 <HAL_GPIO_EXTI_Callback+0x1e>
      break;
    case USER_BUTTON_PIN:
      LBR_App_Key_Button_Action();
      break; 
    default:
      break;
 80045ea:	e005      	b.n	80045f8 <HAL_GPIO_EXTI_Callback+0x24>
      HW_BNRG_SpiIrqCb();
 80045ec:	f7fd fc6c 	bl	8001ec8 <HW_BNRG_SpiIrqCb>
      break;
 80045f0:	e002      	b.n	80045f8 <HAL_GPIO_EXTI_Callback+0x24>
      LBR_App_Key_Button_Action();
 80045f2:	f7ff fd27 	bl	8004044 <LBR_App_Key_Button_Action>
      break; 
 80045f6:	bf00      	nop
  }

  return;
 80045f8:	bf00      	nop
}
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <LPM_ExitStopMode>:
  *         This is where the application should reconfigure the clock tree when needed
  * @param  None
  * @retval None
  */
void LPM_ExitStopMode(void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET);        /**< Wait till PLL is ready */
  LL_RCC_SetSysClkSource(RCC_CFGR_SW_PLL);              /**< Select PLL as system clock source */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL);  /**< Wait till PLL is used as system clock source */
#endif

  return;
 8004604:	bf00      	nop
}
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <LPM_EnterOffMode>:
  *         It sets the IO configuration to be applied when in standby mode 
  * @param  None
  * @retval None
  */
void LPM_EnterOffMode(void)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	af00      	add	r7, sp, #0
  LL_PWR_EnableWakeUpPin(BNRG_SPI_IRQ_WAKEUP_PIN);
 8004612:	2001      	movs	r0, #1
 8004614:	f7ff fdd6 	bl	80041c4 <LL_PWR_EnableWakeUpPin>
  LL_PWR_EnablePUPDCfg();
 8004618:	f7ff fdb4 	bl	8004184 <LL_PWR_EnablePUPDCfg>

  return;
 800461c:	bf00      	nop

}
 800461e:	bd80      	pop	{r7, pc}

08004620 <LPM_ExitOffMode>:
  *         The application should implement dedicated code before getting out from Off mode 
  * @param  None
  * @retval None
  */
void LPM_ExitOffMode(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
  LL_PWR_DisablePUPDCfg();
 8004624:	f7ff fdbe 	bl	80041a4 <LL_PWR_DisablePUPDCfg>
  LL_PWR_DisableWakeUpPin(BNRG_SPI_IRQ_WAKEUP_PIN);
 8004628:	2001      	movs	r0, #1
 800462a:	f7ff fddd 	bl	80041e8 <LL_PWR_DisableWakeUpPin>
  BNRG_SPI_CLEAR_WAKEUP_FLAG();
 800462e:	f7ff fdfd 	bl	800422c <LL_PWR_ClearFlag_WU1>

  return;
 8004632:	bf00      	nop
}
 8004634:	bd80      	pop	{r7, pc}

08004636 <HAL_InitTick>:
  *         It OVERLOADS the __WEAK function defined in stm32l4xx_hal.c
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
 */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004636:	b480      	push	{r7}
 8004638:	b083      	sub	sp, #12
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  return (HAL_OK);
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <SCH_Idle>:
 *        The application should enter low power mode
 * @param  None
 * @retval None
 */
void SCH_Idle ( void )
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
  LPM_EnterModeSelected();
 8004650:	f7ff f9b6 	bl	80039c0 <LPM_EnterModeSelected>

  return;
 8004654:	bf00      	nop
}
 8004656:	bd80      	pop	{r7, pc}

08004658 <TL_BLE_HCI_StatusNot>:
 *        At least, TL_BLE_HCI_UserEvtProc shall not be executed while the TL remains busy
 * @param status
 * @retval None
 */
void TL_BLE_HCI_StatusNot(TL_BLE_HCI_CmdStatus_t status)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	4603      	mov	r3, r0
 8004660:	71fb      	strb	r3, [r7, #7]
  switch(status)
 8004662:	79fb      	ldrb	r3, [r7, #7]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <TL_BLE_HCI_StatusNot+0x16>
 8004668:	2b01      	cmp	r3, #1
 800466a:	d00a      	beq.n	8004682 <TL_BLE_HCI_StatusNot+0x2a>
      SCH_ResumeTask( CFG_IdleTask_SearchService );
#endif      
      break;

    default:
      break;
 800466c:	e013      	b.n	8004696 <TL_BLE_HCI_StatusNot+0x3e>
      SCH_PauseTask( CFG_IdleTask_StartAdv );
 800466e:	2001      	movs	r0, #1
 8004670:	f7ff fb26 	bl	8003cc0 <SCH_PauseTask>
      SCH_PauseTask( CFG_IdleTask_Button );
 8004674:	2004      	movs	r0, #4
 8004676:	f7ff fb23 	bl	8003cc0 <SCH_PauseTask>
      SCH_PauseTask( CFG_IdleTask_HciAsynchEvt );
 800467a:	2005      	movs	r0, #5
 800467c:	f7ff fb20 	bl	8003cc0 <SCH_PauseTask>
      break;
 8004680:	e009      	b.n	8004696 <TL_BLE_HCI_StatusNot+0x3e>
      SCH_ResumeTask( CFG_IdleTask_StartAdv );
 8004682:	2001      	movs	r0, #1
 8004684:	f7ff fb40 	bl	8003d08 <SCH_ResumeTask>
      SCH_ResumeTask( CFG_IdleTask_Button );
 8004688:	2004      	movs	r0, #4
 800468a:	f7ff fb3d 	bl	8003d08 <SCH_ResumeTask>
      SCH_ResumeTask( CFG_IdleTask_HciAsynchEvt );
 800468e:	2005      	movs	r0, #5
 8004690:	f7ff fb3a 	bl	8003d08 <SCH_ResumeTask>
      break;
 8004694:	bf00      	nop
  }
  return;
 8004696:	bf00      	nop
}
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <HW_TS_RTC_Int_AppNot>:
  * @param  TimerID: The TimerID of the expired timer
  * @param  pTimerCallBack: The Callback associated with the timer when it has been created
  * @retval None
  */
void HW_TS_RTC_Int_AppNot(uint32_t eTimerProcessID, uint8_t ubTimerID, HW_TS_pTimerCb_t pfTimerCallBack)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b084      	sub	sp, #16
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	60f8      	str	r0, [r7, #12]
 80046a6:	460b      	mov	r3, r1
 80046a8:	607a      	str	r2, [r7, #4]
 80046aa:	72fb      	strb	r3, [r7, #11]
  switch (eTimerProcessID)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d102      	bne.n	80046b8 <HW_TS_RTC_Int_AppNot+0x1a>
  {
    case CFG_TimProcID_isr:
      /**
       * This is expected to be called in the Timer Interrupt Handler to limit latency
       */
      pfTimerCallBack();
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4798      	blx	r3
      break;
 80046b6:	e002      	b.n	80046be <HW_TS_RTC_Int_AppNot+0x20>

    default:
      pfTimerCallBack();
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4798      	blx	r3
      break;
 80046bc:	bf00      	nop
  }
}
 80046be:	bf00      	nop
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80046c6:	b480      	push	{r7}
 80046c8:	af00      	add	r7, sp, #0
}
 80046ca:	bf00      	nop
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80046d4:	b480      	push	{r7}
 80046d6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80046d8:	e7fe      	b.n	80046d8 <HardFault_Handler+0x4>

080046da <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80046da:	b480      	push	{r7}
 80046dc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80046de:	e7fe      	b.n	80046de <MemManage_Handler+0x4>

080046e0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80046e4:	e7fe      	b.n	80046e4 <BusFault_Handler+0x4>

080046e6 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80046e6:	b480      	push	{r7}
 80046e8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80046ea:	e7fe      	b.n	80046ea <UsageFault_Handler+0x4>

080046ec <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
}
 80046f0:	bf00      	nop
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80046fa:	b480      	push	{r7}
 80046fc:	af00      	add	r7, sp, #0
}
 80046fe:	bf00      	nop
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8004708:	b480      	push	{r7}
 800470a:	af00      	add	r7, sp, #0
}
 800470c:	bf00      	nop
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800471a:	f000 f929 	bl	8004970 <HAL_IncTick>
}
 800471e:	bf00      	nop
 8004720:	bd80      	pop	{r7, pc}

08004722 <RTC_WKUP_IRQHandler>:
 * @brief  This function handles RTC Auto wake-up interrupt request.
 * @param  None
 * @retval None
 */
void RTC_WKUP_IRQHandler(void)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 8004726:	f7fe f8fb 	bl	8002920 <HW_TS_RTC_Wakeup_Handler>
}
 800472a:	bf00      	nop
 800472c:	bd80      	pop	{r7, pc}

0800472e <EXTI9_5_IRQHandler>:
 *         interrupt request for BlueNRG.
 * @param  None
 * @retval None
 */
void EXTI9_5_IRQHandler(void)           /* BNRG_SPI_EXTI_IRQHandler */
{
 800472e:	b580      	push	{r7, lr}
 8004730:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BNRG_SPI_EXTI_PIN);
 8004732:	2040      	movs	r0, #64	; 0x40
 8004734:	f000 fd6a 	bl	800520c <HAL_GPIO_EXTI_IRQHandler>
}
 8004738:	bf00      	nop
 800473a:	bd80      	pop	{r7, pc}

0800473c <EXTI15_10_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void EXTI15_10_IRQHandler(void)  /* PUSH_BUTTON_EXTI_IRQHandler */
{
 800473c:	b580      	push	{r7, lr}
 800473e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 8004740:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004744:	f000 fd62 	bl	800520c <HAL_GPIO_EXTI_IRQHandler>
}
 8004748:	bf00      	nop
 800474a:	bd80      	pop	{r7, pc}

0800474c <DMA2_Channel1_IRQHandler>:
 * @brief  This function handles DMA Rx interrupt request.
 * @param  None
 * @retval None
 */
void DMA2_Channel1_IRQHandler(void)     /* BNRG_SPI_RX_DMA_IRQHandler */
  {
 800474c:	b580      	push	{r7, lr}
 800474e:	af00      	add	r7, sp, #0
    HW_BNRG_DMARxCb();
 8004750:	f7fd fc2c 	bl	8001fac <HW_BNRG_DMARxCb>
  }
 8004754:	bf00      	nop
 8004756:	bd80      	pop	{r7, pc}

08004758 <DMA2_Channel2_IRQHandler>:
 * @brief  This function handles DMA Tx interrupt request.
 * @param  None
 * @retval None
 */
void DMA2_Channel2_IRQHandler(void)    /* BNRG_SPI_TX_DMA_IRQHandler */
  {
 8004758:	b580      	push	{r7, lr}
 800475a:	af00      	add	r7, sp, #0
    HW_BNRG_DMATxCb();
 800475c:	f7fd fbd2 	bl	8001f04 <HW_BNRG_DMATxCb>

  return;
 8004760:	bf00      	nop
}
 8004762:	bd80      	pop	{r7, pc}

08004764 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004768:	4b12      	ldr	r3, [pc, #72]	; (80047b4 <SystemInit+0x50>)
 800476a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476e:	4a11      	ldr	r2, [pc, #68]	; (80047b4 <SystemInit+0x50>)
 8004770:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004774:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
     */

    /**
     * Increase FLASH latency to 3WS
     */
    FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 8004778:	4b0f      	ldr	r3, [pc, #60]	; (80047b8 <SystemInit+0x54>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a0e      	ldr	r2, [pc, #56]	; (80047b8 <SystemInit+0x54>)
 800477e:	f043 0303 	orr.w	r3, r3, #3
 8004782:	6013      	str	r3, [r2, #0]

    /**
     * Decrease VCore to Range2.
     * As we are downscaling Vcore, it is not required to wait for the VOSF bit to be ready
     */
    RCC->APB1ENR1 = RCC_APB1ENR1_PWREN;  /**< Switch ON PWR clock */
 8004784:	4b0d      	ldr	r3, [pc, #52]	; (80047bc <SystemInit+0x58>)
 8004786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800478a:	659a      	str	r2, [r3, #88]	; 0x58
    PWR->CR1 = PWR_CR1_VOS_1;
 800478c:	4b0c      	ldr	r3, [pc, #48]	; (80047c0 <SystemInit+0x5c>)
 800478e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004792:	601a      	str	r2, [r3, #0]

    /**
     * Increase MSI to 24Mhz
     *
     */
    RCC->CR = (RCC_CR_MSIRANGE_9|RCC_CR_MSIRGSEL|RCC_CR_MSION);   /**< Increase MSI Speed and switch MSI source*/
 8004794:	4b09      	ldr	r3, [pc, #36]	; (80047bc <SystemInit+0x58>)
 8004796:	2299      	movs	r2, #153	; 0x99
 8004798:	601a      	str	r2, [r3, #0]

    SystemCoreClock = 24000000;
 800479a:	4b0a      	ldr	r3, [pc, #40]	; (80047c4 <SystemInit+0x60>)
 800479c:	4a0a      	ldr	r2, [pc, #40]	; (80047c8 <SystemInit+0x64>)
 800479e:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80047a0:	4b04      	ldr	r3, [pc, #16]	; (80047b4 <SystemInit+0x50>)
 80047a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80047a6:	609a      	str	r2, [r3, #8]
#endif

}
 80047a8:	bf00      	nop
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	e000ed00 	.word	0xe000ed00
 80047b8:	40022000 	.word	0x40022000
 80047bc:	40021000 	.word	0x40021000
 80047c0:	40007000 	.word	0x40007000
 80047c4:	20000004 	.word	0x20000004
 80047c8:	016e3600 	.word	0x016e3600

080047cc <BSP_LED_Init>:
  * @param  Led  LED to be initialized. 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b088      	sub	sp, #32
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	4603      	mov	r3, r0
 80047d4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 80047d6:	79fb      	ldrb	r3, [r7, #7]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10b      	bne.n	80047f4 <BSP_LED_Init+0x28>
 80047dc:	4b11      	ldr	r3, [pc, #68]	; (8004824 <BSP_LED_Init+0x58>)
 80047de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047e0:	4a10      	ldr	r2, [pc, #64]	; (8004824 <BSP_LED_Init+0x58>)
 80047e2:	f043 0302 	orr.w	r3, r3, #2
 80047e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047e8:	4b0e      	ldr	r3, [pc, #56]	; (8004824 <BSP_LED_Init+0x58>)
 80047ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	60bb      	str	r3, [r7, #8]
 80047f2:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 80047f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80047f8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80047fa:	2301      	movs	r3, #1
 80047fc:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80047fe:	2300      	movs	r3, #0
 8004800:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004802:	2302      	movs	r3, #2
 8004804:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8004806:	79fb      	ldrb	r3, [r7, #7]
 8004808:	4a07      	ldr	r2, [pc, #28]	; (8004828 <BSP_LED_Init+0x5c>)
 800480a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800480e:	f107 020c 	add.w	r2, r7, #12
 8004812:	4611      	mov	r1, r2
 8004814:	4618      	mov	r0, r3
 8004816:	f000 fb1f 	bl	8004e58 <HAL_GPIO_Init>
}
 800481a:	bf00      	nop
 800481c:	3720      	adds	r7, #32
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	40021000 	.word	0x40021000
 8004828:	20000008 	.word	0x20000008

0800482c <BSP_LED_On>:
  * @param  Led  LED to be set on 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	4603      	mov	r3, r0
 8004834:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8004836:	79fb      	ldrb	r3, [r7, #7]
 8004838:	4a06      	ldr	r2, [pc, #24]	; (8004854 <BSP_LED_On+0x28>)
 800483a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800483e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004842:	b291      	uxth	r1, r2
 8004844:	2201      	movs	r2, #1
 8004846:	4618      	mov	r0, r3
 8004848:	f000 fcc8 	bl	80051dc <HAL_GPIO_WritePin>
}
 800484c:	bf00      	nop
 800484e:	3708      	adds	r7, #8
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	20000008 	.word	0x20000008

08004858 <BSP_LED_Off>:
  * @param  Led  LED to be set off
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	4603      	mov	r3, r0
 8004860:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8004862:	79fb      	ldrb	r3, [r7, #7]
 8004864:	4a06      	ldr	r2, [pc, #24]	; (8004880 <BSP_LED_Off+0x28>)
 8004866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800486a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800486e:	b291      	uxth	r1, r2
 8004870:	2200      	movs	r2, #0
 8004872:	4618      	mov	r0, r3
 8004874:	f000 fcb2 	bl	80051dc <HAL_GPIO_WritePin>
}
 8004878:	bf00      	nop
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	20000008 	.word	0x20000008

08004884 <BSP_PB_Init>:
  *                      @arg  BUTTON_MODE_GPIO  Button will be used as simple IO
  *                      @arg  BUTTON_MODE_EXTI  Button will be connected to EXTI line 
  *                                              with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b088      	sub	sp, #32
 8004888:	af00      	add	r7, sp, #0
 800488a:	4603      	mov	r3, r0
 800488c:	460a      	mov	r2, r1
 800488e:	71fb      	strb	r3, [r7, #7]
 8004890:	4613      	mov	r3, r2
 8004892:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8004894:	4b23      	ldr	r3, [pc, #140]	; (8004924 <BSP_PB_Init+0xa0>)
 8004896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004898:	4a22      	ldr	r2, [pc, #136]	; (8004924 <BSP_PB_Init+0xa0>)
 800489a:	f043 0304 	orr.w	r3, r3, #4
 800489e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048a0:	4b20      	ldr	r3, [pc, #128]	; (8004924 <BSP_PB_Init+0xa0>)
 80048a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	60bb      	str	r3, [r7, #8]
 80048aa:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80048ac:	79bb      	ldrb	r3, [r7, #6]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d112      	bne.n	80048d8 <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80048b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048b6:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80048b8:	2300      	movs	r3, #0
 80048ba:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLUP;
 80048bc:	2301      	movs	r3, #1
 80048be:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80048c0:	2302      	movs	r3, #2
 80048c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80048c4:	79fb      	ldrb	r3, [r7, #7]
 80048c6:	4a18      	ldr	r2, [pc, #96]	; (8004928 <BSP_PB_Init+0xa4>)
 80048c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048cc:	f107 020c 	add.w	r2, r7, #12
 80048d0:	4611      	mov	r1, r2
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 fac0 	bl	8004e58 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80048d8:	79bb      	ldrb	r3, [r7, #6]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d11e      	bne.n	800491c <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80048de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048e2:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLUP;
 80048e4:	2301      	movs	r3, #1
 80048e6:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048e8:	2303      	movs	r3, #3
 80048ea:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80048ec:	4b0f      	ldr	r3, [pc, #60]	; (800492c <BSP_PB_Init+0xa8>)
 80048ee:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80048f0:	79fb      	ldrb	r3, [r7, #7]
 80048f2:	4a0d      	ldr	r2, [pc, #52]	; (8004928 <BSP_PB_Init+0xa4>)
 80048f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048f8:	f107 020c 	add.w	r2, r7, #12
 80048fc:	4611      	mov	r1, r2
 80048fe:	4618      	mov	r0, r3
 8004900:	f000 faaa 	bl	8004e58 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8004904:	2328      	movs	r3, #40	; 0x28
 8004906:	b25b      	sxtb	r3, r3
 8004908:	2200      	movs	r2, #0
 800490a:	210f      	movs	r1, #15
 800490c:	4618      	mov	r0, r3
 800490e:	f000 f997 	bl	8004c40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8004912:	2328      	movs	r3, #40	; 0x28
 8004914:	b25b      	sxtb	r3, r3
 8004916:	4618      	mov	r0, r3
 8004918:	f000 f9ae 	bl	8004c78 <HAL_NVIC_EnableIRQ>
  }
}
 800491c:	bf00      	nop
 800491e:	3720      	adds	r7, #32
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	40021000 	.word	0x40021000
 8004928:	2000000c 	.word	0x2000000c
 800492c:	10110000 	.word	0x10110000

08004930 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004936:	2300      	movs	r3, #0
 8004938:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800493a:	2003      	movs	r0, #3
 800493c:	f000 f975 	bl	8004c2a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004940:	2000      	movs	r0, #0
 8004942:	f7ff fe78 	bl	8004636 <HAL_InitTick>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d002      	beq.n	8004952 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	71fb      	strb	r3, [r7, #7]
 8004950:	e001      	b.n	8004956 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004952:	f000 f805 	bl	8004960 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004956:	79fb      	ldrb	r3, [r7, #7]
}
 8004958:	4618      	mov	r0, r3
 800495a:	3708      	adds	r7, #8
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8004960:	b480      	push	{r7}
 8004962:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8004964:	bf00      	nop
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
	...

08004970 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004970:	b480      	push	{r7}
 8004972:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004974:	4b06      	ldr	r3, [pc, #24]	; (8004990 <HAL_IncTick+0x20>)
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	461a      	mov	r2, r3
 800497a:	4b06      	ldr	r3, [pc, #24]	; (8004994 <HAL_IncTick+0x24>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4413      	add	r3, r2
 8004980:	4a04      	ldr	r2, [pc, #16]	; (8004994 <HAL_IncTick+0x24>)
 8004982:	6013      	str	r3, [r2, #0]
}
 8004984:	bf00      	nop
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	20000014 	.word	0x20000014
 8004994:	20000ae0 	.word	0x20000ae0

08004998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004998:	b480      	push	{r7}
 800499a:	af00      	add	r7, sp, #0
  return uwTick;
 800499c:	4b03      	ldr	r3, [pc, #12]	; (80049ac <HAL_GetTick+0x14>)
 800499e:	681b      	ldr	r3, [r3, #0]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	20000ae0 	.word	0x20000ae0

080049b0 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80049b4:	4b05      	ldr	r3, [pc, #20]	; (80049cc <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	4a04      	ldr	r2, [pc, #16]	; (80049cc <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80049ba:	f043 0301 	orr.w	r3, r3, #1
 80049be:	6053      	str	r3, [r2, #4]
}
 80049c0:	bf00      	nop
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	e0042000 	.word	0xe0042000

080049d0 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP0/STOP1/STOP2 modes.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80049d0:	b480      	push	{r7}
 80049d2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80049d4:	4b05      	ldr	r3, [pc, #20]	; (80049ec <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	4a04      	ldr	r2, [pc, #16]	; (80049ec <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 80049da:	f043 0302 	orr.w	r3, r3, #2
 80049de:	6053      	str	r3, [r2, #4]
}
 80049e0:	bf00      	nop
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	e0042000 	.word	0xe0042000

080049f0 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 80049f0:	b480      	push	{r7}
 80049f2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80049f4:	4b05      	ldr	r3, [pc, #20]	; (8004a0c <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	4a04      	ldr	r2, [pc, #16]	; (8004a0c <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 80049fa:	f043 0304 	orr.w	r3, r3, #4
 80049fe:	6053      	str	r3, [r2, #4]
}
 8004a00:	bf00      	nop
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	e0042000 	.word	0xe0042000

08004a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f003 0307 	and.w	r3, r3, #7
 8004a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a20:	4b0c      	ldr	r3, [pc, #48]	; (8004a54 <__NVIC_SetPriorityGrouping+0x44>)
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a42:	4a04      	ldr	r2, [pc, #16]	; (8004a54 <__NVIC_SetPriorityGrouping+0x44>)
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	60d3      	str	r3, [r2, #12]
}
 8004a48:	bf00      	nop
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	e000ed00 	.word	0xe000ed00

08004a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a5c:	4b04      	ldr	r3, [pc, #16]	; (8004a70 <__NVIC_GetPriorityGrouping+0x18>)
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	0a1b      	lsrs	r3, r3, #8
 8004a62:	f003 0307 	and.w	r3, r3, #7
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	e000ed00 	.word	0xe000ed00

08004a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	db0b      	blt.n	8004a9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a86:	79fb      	ldrb	r3, [r7, #7]
 8004a88:	f003 021f 	and.w	r2, r3, #31
 8004a8c:	4907      	ldr	r1, [pc, #28]	; (8004aac <__NVIC_EnableIRQ+0x38>)
 8004a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a92:	095b      	lsrs	r3, r3, #5
 8004a94:	2001      	movs	r0, #1
 8004a96:	fa00 f202 	lsl.w	r2, r0, r2
 8004a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	e000e100 	.word	0xe000e100

08004ab0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	db12      	blt.n	8004ae8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ac2:	79fb      	ldrb	r3, [r7, #7]
 8004ac4:	f003 021f 	and.w	r2, r3, #31
 8004ac8:	490a      	ldr	r1, [pc, #40]	; (8004af4 <__NVIC_DisableIRQ+0x44>)
 8004aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ace:	095b      	lsrs	r3, r3, #5
 8004ad0:	2001      	movs	r0, #1
 8004ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8004ad6:	3320      	adds	r3, #32
 8004ad8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004adc:	f3bf 8f4f 	dsb	sy
}
 8004ae0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004ae2:	f3bf 8f6f 	isb	sy
}
 8004ae6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	e000e100 	.word	0xe000e100

08004af8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	4603      	mov	r3, r0
 8004b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	db0c      	blt.n	8004b24 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b0a:	79fb      	ldrb	r3, [r7, #7]
 8004b0c:	f003 021f 	and.w	r2, r3, #31
 8004b10:	4907      	ldr	r1, [pc, #28]	; (8004b30 <__NVIC_SetPendingIRQ+0x38>)
 8004b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b16:	095b      	lsrs	r3, r3, #5
 8004b18:	2001      	movs	r0, #1
 8004b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8004b1e:	3340      	adds	r3, #64	; 0x40
 8004b20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	e000e100 	.word	0xe000e100

08004b34 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	db0c      	blt.n	8004b60 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b46:	79fb      	ldrb	r3, [r7, #7]
 8004b48:	f003 021f 	and.w	r2, r3, #31
 8004b4c:	4907      	ldr	r1, [pc, #28]	; (8004b6c <__NVIC_ClearPendingIRQ+0x38>)
 8004b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b52:	095b      	lsrs	r3, r3, #5
 8004b54:	2001      	movs	r0, #1
 8004b56:	fa00 f202 	lsl.w	r2, r0, r2
 8004b5a:	3360      	adds	r3, #96	; 0x60
 8004b5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	e000e100 	.word	0xe000e100

08004b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	4603      	mov	r3, r0
 8004b78:	6039      	str	r1, [r7, #0]
 8004b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	db0a      	blt.n	8004b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	b2da      	uxtb	r2, r3
 8004b88:	490c      	ldr	r1, [pc, #48]	; (8004bbc <__NVIC_SetPriority+0x4c>)
 8004b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b8e:	0112      	lsls	r2, r2, #4
 8004b90:	b2d2      	uxtb	r2, r2
 8004b92:	440b      	add	r3, r1
 8004b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b98:	e00a      	b.n	8004bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	4908      	ldr	r1, [pc, #32]	; (8004bc0 <__NVIC_SetPriority+0x50>)
 8004ba0:	79fb      	ldrb	r3, [r7, #7]
 8004ba2:	f003 030f 	and.w	r3, r3, #15
 8004ba6:	3b04      	subs	r3, #4
 8004ba8:	0112      	lsls	r2, r2, #4
 8004baa:	b2d2      	uxtb	r2, r2
 8004bac:	440b      	add	r3, r1
 8004bae:	761a      	strb	r2, [r3, #24]
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	e000e100 	.word	0xe000e100
 8004bc0:	e000ed00 	.word	0xe000ed00

08004bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b089      	sub	sp, #36	; 0x24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f003 0307 	and.w	r3, r3, #7
 8004bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	f1c3 0307 	rsb	r3, r3, #7
 8004bde:	2b04      	cmp	r3, #4
 8004be0:	bf28      	it	cs
 8004be2:	2304      	movcs	r3, #4
 8004be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	3304      	adds	r3, #4
 8004bea:	2b06      	cmp	r3, #6
 8004bec:	d902      	bls.n	8004bf4 <NVIC_EncodePriority+0x30>
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	3b03      	subs	r3, #3
 8004bf2:	e000      	b.n	8004bf6 <NVIC_EncodePriority+0x32>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004c02:	43da      	mvns	r2, r3
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	401a      	ands	r2, r3
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	fa01 f303 	lsl.w	r3, r1, r3
 8004c16:	43d9      	mvns	r1, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c1c:	4313      	orrs	r3, r2
         );
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3724      	adds	r7, #36	; 0x24
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b082      	sub	sp, #8
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7ff feec 	bl	8004a10 <__NVIC_SetPriorityGrouping>
}
 8004c38:	bf00      	nop
 8004c3a:	3708      	adds	r7, #8
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	4603      	mov	r3, r0
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
 8004c4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c52:	f7ff ff01 	bl	8004a58 <__NVIC_GetPriorityGrouping>
 8004c56:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	68b9      	ldr	r1, [r7, #8]
 8004c5c:	6978      	ldr	r0, [r7, #20]
 8004c5e:	f7ff ffb1 	bl	8004bc4 <NVIC_EncodePriority>
 8004c62:	4602      	mov	r2, r0
 8004c64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c68:	4611      	mov	r1, r2
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7ff ff80 	bl	8004b70 <__NVIC_SetPriority>
}
 8004c70:	bf00      	nop
 8004c72:	3718      	adds	r7, #24
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	4603      	mov	r3, r0
 8004c80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7ff fef4 	bl	8004a74 <__NVIC_EnableIRQ>
}
 8004c8c:	bf00      	nop
 8004c8e:	3708      	adds	r7, #8
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7ff ff04 	bl	8004ab0 <__NVIC_DisableIRQ>
}
 8004ca8:	bf00      	nop
 8004caa:	3708      	adds	r7, #8
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8004cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7ff ff1a 	bl	8004af8 <__NVIC_SetPendingIRQ>
}
 8004cc4:	bf00      	nop
 8004cc6:	3708      	adds	r7, #8
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7ff ff2a 	bl	8004b34 <__NVIC_ClearPendingIRQ>
}
 8004ce0:	bf00      	nop
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e098      	b.n	8004e2c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	4b4d      	ldr	r3, [pc, #308]	; (8004e38 <HAL_DMA_Init+0x150>)
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d80f      	bhi.n	8004d26 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	4b4b      	ldr	r3, [pc, #300]	; (8004e3c <HAL_DMA_Init+0x154>)
 8004d0e:	4413      	add	r3, r2
 8004d10:	4a4b      	ldr	r2, [pc, #300]	; (8004e40 <HAL_DMA_Init+0x158>)
 8004d12:	fba2 2303 	umull	r2, r3, r2, r3
 8004d16:	091b      	lsrs	r3, r3, #4
 8004d18:	009a      	lsls	r2, r3, #2
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a48      	ldr	r2, [pc, #288]	; (8004e44 <HAL_DMA_Init+0x15c>)
 8004d22:	641a      	str	r2, [r3, #64]	; 0x40
 8004d24:	e00e      	b.n	8004d44 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	4b46      	ldr	r3, [pc, #280]	; (8004e48 <HAL_DMA_Init+0x160>)
 8004d2e:	4413      	add	r3, r2
 8004d30:	4a43      	ldr	r2, [pc, #268]	; (8004e40 <HAL_DMA_Init+0x158>)
 8004d32:	fba2 2303 	umull	r2, r3, r2, r3
 8004d36:	091b      	lsrs	r3, r3, #4
 8004d38:	009a      	lsls	r2, r3, #2
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a42      	ldr	r2, [pc, #264]	; (8004e4c <HAL_DMA_Init+0x164>)
 8004d42:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2202      	movs	r2, #2
 8004d48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004d68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d9e:	d039      	beq.n	8004e14 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da4:	4a27      	ldr	r2, [pc, #156]	; (8004e44 <HAL_DMA_Init+0x15c>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d11a      	bne.n	8004de0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004daa:	4b29      	ldr	r3, [pc, #164]	; (8004e50 <HAL_DMA_Init+0x168>)
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db2:	f003 031c 	and.w	r3, r3, #28
 8004db6:	210f      	movs	r1, #15
 8004db8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dbc:	43db      	mvns	r3, r3
 8004dbe:	4924      	ldr	r1, [pc, #144]	; (8004e50 <HAL_DMA_Init+0x168>)
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004dc4:	4b22      	ldr	r3, [pc, #136]	; (8004e50 <HAL_DMA_Init+0x168>)
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6859      	ldr	r1, [r3, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd0:	f003 031c 	and.w	r3, r3, #28
 8004dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd8:	491d      	ldr	r1, [pc, #116]	; (8004e50 <HAL_DMA_Init+0x168>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	600b      	str	r3, [r1, #0]
 8004dde:	e019      	b.n	8004e14 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004de0:	4b1c      	ldr	r3, [pc, #112]	; (8004e54 <HAL_DMA_Init+0x16c>)
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de8:	f003 031c 	and.w	r3, r3, #28
 8004dec:	210f      	movs	r1, #15
 8004dee:	fa01 f303 	lsl.w	r3, r1, r3
 8004df2:	43db      	mvns	r3, r3
 8004df4:	4917      	ldr	r1, [pc, #92]	; (8004e54 <HAL_DMA_Init+0x16c>)
 8004df6:	4013      	ands	r3, r2
 8004df8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004dfa:	4b16      	ldr	r3, [pc, #88]	; (8004e54 <HAL_DMA_Init+0x16c>)
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6859      	ldr	r1, [r3, #4]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e06:	f003 031c 	and.w	r3, r3, #28
 8004e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e0e:	4911      	ldr	r1, [pc, #68]	; (8004e54 <HAL_DMA_Init+0x16c>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3714      	adds	r7, #20
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	40020407 	.word	0x40020407
 8004e3c:	bffdfff8 	.word	0xbffdfff8
 8004e40:	cccccccd 	.word	0xcccccccd
 8004e44:	40020000 	.word	0x40020000
 8004e48:	bffdfbf8 	.word	0xbffdfbf8
 8004e4c:	40020400 	.word	0x40020400
 8004e50:	400200a8 	.word	0x400200a8
 8004e54:	400204a8 	.word	0x400204a8

08004e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b087      	sub	sp, #28
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004e62:	2300      	movs	r3, #0
 8004e64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e66:	e17f      	b.n	8005168 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	fa01 f303 	lsl.w	r3, r1, r3
 8004e74:	4013      	ands	r3, r2
 8004e76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f000 8171 	beq.w	8005162 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d00b      	beq.n	8004ea0 <HAL_GPIO_Init+0x48>
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d007      	beq.n	8004ea0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e94:	2b11      	cmp	r3, #17
 8004e96:	d003      	beq.n	8004ea0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	2b12      	cmp	r3, #18
 8004e9e:	d130      	bne.n	8004f02 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	2203      	movs	r2, #3
 8004eac:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb0:	43db      	mvns	r3, r3
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	68da      	ldr	r2, [r3, #12]
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	fa02 f303 	lsl.w	r3, r2, r3
 8004ede:	43db      	mvns	r3, r3
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	091b      	lsrs	r3, r3, #4
 8004eec:	f003 0201 	and.w	r2, r3, #1
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f003 0303 	and.w	r3, r3, #3
 8004f0a:	2b03      	cmp	r3, #3
 8004f0c:	d118      	bne.n	8004f40 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004f14:	2201      	movs	r2, #1
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1c:	43db      	mvns	r3, r3
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	4013      	ands	r3, r2
 8004f22:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	08db      	lsrs	r3, r3, #3
 8004f2a:	f003 0201 	and.w	r2, r3, #1
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	fa02 f303 	lsl.w	r3, r2, r3
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	005b      	lsls	r3, r3, #1
 8004f4a:	2203      	movs	r2, #3
 8004f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f50:	43db      	mvns	r3, r3
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	4013      	ands	r3, r2
 8004f56:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	689a      	ldr	r2, [r3, #8]
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	fa02 f303 	lsl.w	r3, r2, r3
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d003      	beq.n	8004f80 <HAL_GPIO_Init+0x128>
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	2b12      	cmp	r3, #18
 8004f7e:	d123      	bne.n	8004fc8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	08da      	lsrs	r2, r3, #3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3208      	adds	r2, #8
 8004f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f003 0307 	and.w	r3, r3, #7
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	220f      	movs	r2, #15
 8004f98:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9c:	43db      	mvns	r3, r3
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	691a      	ldr	r2, [r3, #16]
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f003 0307 	and.w	r3, r3, #7
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	08da      	lsrs	r2, r3, #3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	3208      	adds	r2, #8
 8004fc2:	6939      	ldr	r1, [r7, #16]
 8004fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	005b      	lsls	r3, r3, #1
 8004fd2:	2203      	movs	r2, #3
 8004fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd8:	43db      	mvns	r3, r3
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f003 0203 	and.w	r2, r3, #3
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 80ac 	beq.w	8005162 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800500a:	4b5f      	ldr	r3, [pc, #380]	; (8005188 <HAL_GPIO_Init+0x330>)
 800500c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800500e:	4a5e      	ldr	r2, [pc, #376]	; (8005188 <HAL_GPIO_Init+0x330>)
 8005010:	f043 0301 	orr.w	r3, r3, #1
 8005014:	6613      	str	r3, [r2, #96]	; 0x60
 8005016:	4b5c      	ldr	r3, [pc, #368]	; (8005188 <HAL_GPIO_Init+0x330>)
 8005018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	60bb      	str	r3, [r7, #8]
 8005020:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005022:	4a5a      	ldr	r2, [pc, #360]	; (800518c <HAL_GPIO_Init+0x334>)
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	089b      	lsrs	r3, r3, #2
 8005028:	3302      	adds	r3, #2
 800502a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800502e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	f003 0303 	and.w	r3, r3, #3
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	220f      	movs	r2, #15
 800503a:	fa02 f303 	lsl.w	r3, r2, r3
 800503e:	43db      	mvns	r3, r3
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	4013      	ands	r3, r2
 8005044:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800504c:	d025      	beq.n	800509a <HAL_GPIO_Init+0x242>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a4f      	ldr	r2, [pc, #316]	; (8005190 <HAL_GPIO_Init+0x338>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d01f      	beq.n	8005096 <HAL_GPIO_Init+0x23e>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a4e      	ldr	r2, [pc, #312]	; (8005194 <HAL_GPIO_Init+0x33c>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d019      	beq.n	8005092 <HAL_GPIO_Init+0x23a>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a4d      	ldr	r2, [pc, #308]	; (8005198 <HAL_GPIO_Init+0x340>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d013      	beq.n	800508e <HAL_GPIO_Init+0x236>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a4c      	ldr	r2, [pc, #304]	; (800519c <HAL_GPIO_Init+0x344>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d00d      	beq.n	800508a <HAL_GPIO_Init+0x232>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a4b      	ldr	r2, [pc, #300]	; (80051a0 <HAL_GPIO_Init+0x348>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d007      	beq.n	8005086 <HAL_GPIO_Init+0x22e>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a4a      	ldr	r2, [pc, #296]	; (80051a4 <HAL_GPIO_Init+0x34c>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d101      	bne.n	8005082 <HAL_GPIO_Init+0x22a>
 800507e:	2306      	movs	r3, #6
 8005080:	e00c      	b.n	800509c <HAL_GPIO_Init+0x244>
 8005082:	2307      	movs	r3, #7
 8005084:	e00a      	b.n	800509c <HAL_GPIO_Init+0x244>
 8005086:	2305      	movs	r3, #5
 8005088:	e008      	b.n	800509c <HAL_GPIO_Init+0x244>
 800508a:	2304      	movs	r3, #4
 800508c:	e006      	b.n	800509c <HAL_GPIO_Init+0x244>
 800508e:	2303      	movs	r3, #3
 8005090:	e004      	b.n	800509c <HAL_GPIO_Init+0x244>
 8005092:	2302      	movs	r3, #2
 8005094:	e002      	b.n	800509c <HAL_GPIO_Init+0x244>
 8005096:	2301      	movs	r3, #1
 8005098:	e000      	b.n	800509c <HAL_GPIO_Init+0x244>
 800509a:	2300      	movs	r3, #0
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	f002 0203 	and.w	r2, r2, #3
 80050a2:	0092      	lsls	r2, r2, #2
 80050a4:	4093      	lsls	r3, r2
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80050ac:	4937      	ldr	r1, [pc, #220]	; (800518c <HAL_GPIO_Init+0x334>)
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	089b      	lsrs	r3, r3, #2
 80050b2:	3302      	adds	r3, #2
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80050ba:	4b3b      	ldr	r3, [pc, #236]	; (80051a8 <HAL_GPIO_Init+0x350>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	43db      	mvns	r3, r3
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	4013      	ands	r3, r2
 80050c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	4313      	orrs	r3, r2
 80050dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80050de:	4a32      	ldr	r2, [pc, #200]	; (80051a8 <HAL_GPIO_Init+0x350>)
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80050e4:	4b30      	ldr	r3, [pc, #192]	; (80051a8 <HAL_GPIO_Init+0x350>)
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	43db      	mvns	r3, r3
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	4013      	ands	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d003      	beq.n	8005108 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	4313      	orrs	r3, r2
 8005106:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005108:	4a27      	ldr	r2, [pc, #156]	; (80051a8 <HAL_GPIO_Init+0x350>)
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800510e:	4b26      	ldr	r3, [pc, #152]	; (80051a8 <HAL_GPIO_Init+0x350>)
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	43db      	mvns	r3, r3
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	4013      	ands	r3, r2
 800511c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d003      	beq.n	8005132 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	4313      	orrs	r3, r2
 8005130:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005132:	4a1d      	ldr	r2, [pc, #116]	; (80051a8 <HAL_GPIO_Init+0x350>)
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005138:	4b1b      	ldr	r3, [pc, #108]	; (80051a8 <HAL_GPIO_Init+0x350>)
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	43db      	mvns	r3, r3
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	4013      	ands	r3, r2
 8005146:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d003      	beq.n	800515c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4313      	orrs	r3, r2
 800515a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800515c:	4a12      	ldr	r2, [pc, #72]	; (80051a8 <HAL_GPIO_Init+0x350>)
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	3301      	adds	r3, #1
 8005166:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	fa22 f303 	lsr.w	r3, r2, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	f47f ae78 	bne.w	8004e68 <HAL_GPIO_Init+0x10>
  }
}
 8005178:	bf00      	nop
 800517a:	bf00      	nop
 800517c:	371c      	adds	r7, #28
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	40021000 	.word	0x40021000
 800518c:	40010000 	.word	0x40010000
 8005190:	48000400 	.word	0x48000400
 8005194:	48000800 	.word	0x48000800
 8005198:	48000c00 	.word	0x48000c00
 800519c:	48001000 	.word	0x48001000
 80051a0:	48001400 	.word	0x48001400
 80051a4:	48001800 	.word	0x48001800
 80051a8:	40010400 	.word	0x40010400

080051ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	460b      	mov	r3, r1
 80051b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	691a      	ldr	r2, [r3, #16]
 80051bc:	887b      	ldrh	r3, [r7, #2]
 80051be:	4013      	ands	r3, r2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d002      	beq.n	80051ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80051c4:	2301      	movs	r3, #1
 80051c6:	73fb      	strb	r3, [r7, #15]
 80051c8:	e001      	b.n	80051ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80051ca:	2300      	movs	r3, #0
 80051cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80051ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3714      	adds	r7, #20
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	460b      	mov	r3, r1
 80051e6:	807b      	strh	r3, [r7, #2]
 80051e8:	4613      	mov	r3, r2
 80051ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80051ec:	787b      	ldrb	r3, [r7, #1]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d003      	beq.n	80051fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80051f2:	887a      	ldrh	r2, [r7, #2]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80051f8:	e002      	b.n	8005200 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80051fa:	887a      	ldrh	r2, [r7, #2]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	4603      	mov	r3, r0
 8005214:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005216:	4b08      	ldr	r3, [pc, #32]	; (8005238 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005218:	695a      	ldr	r2, [r3, #20]
 800521a:	88fb      	ldrh	r3, [r7, #6]
 800521c:	4013      	ands	r3, r2
 800521e:	2b00      	cmp	r3, #0
 8005220:	d006      	beq.n	8005230 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005222:	4a05      	ldr	r2, [pc, #20]	; (8005238 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005224:	88fb      	ldrh	r3, [r7, #6]
 8005226:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005228:	88fb      	ldrh	r3, [r7, #6]
 800522a:	4618      	mov	r0, r3
 800522c:	f7ff f9d2 	bl	80045d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005230:	bf00      	nop
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	40010400 	.word	0x40010400

0800523c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800523c:	b480      	push	{r7}
 800523e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005240:	4b05      	ldr	r3, [pc, #20]	; (8005258 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a04      	ldr	r2, [pc, #16]	; (8005258 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800524a:	6013      	str	r3, [r2, #0]
}
 800524c:	bf00      	nop
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	40007000 	.word	0x40007000

0800525c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005260:	4b04      	ldr	r3, [pc, #16]	; (8005274 <HAL_PWREx_GetVoltageRange+0x18>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005268:	4618      	mov	r0, r3
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	40007000 	.word	0x40007000

08005278 <HAL_PWREx_EnableSRAM2ContentRetention>:
/**
  * @brief Enable Full SRAM2 content retention in Standby mode.
  * @retval None
  */
void HAL_PWREx_EnableSRAM2ContentRetention(void)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	af00      	add	r7, sp, #0
  (void) HAL_PWREx_SetSRAM2ContentRetention(PWR_FULL_SRAM2_RETENTION);
 800527c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005280:	f000 f802 	bl	8005288 <HAL_PWREx_SetSRAM2ContentRetention>
}
 8005284:	bf00      	nop
 8005286:	bd80      	pop	{r7, pc}

08005288 <HAL_PWREx_SetSRAM2ContentRetention>:
  *            @arg @ref PWR_4KBYTES_SRAM2_RETENTION   Only 4 Kbytes of SRAM2 is powered by the low-power regulator in Standby mode
  * @note  PWR_4KBYTES_SRAM2_RETENTION parameter is not available on all devices
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_SetSRAM2ContentRetention(uint32_t SRAM2Size)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_SRAM2_RETENTION(SRAM2Size));

  if (SRAM2Size == PWR_NO_SRAM2_RETENTION)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d106      	bne.n	80052a4 <HAL_PWREx_SetSRAM2ContentRetention+0x1c>
  {
    CLEAR_BIT(PWR->CR3, PWR_CR3_RRS);
 8005296:	4b0d      	ldr	r3, [pc, #52]	; (80052cc <HAL_PWREx_SetSRAM2ContentRetention+0x44>)
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	4a0c      	ldr	r2, [pc, #48]	; (80052cc <HAL_PWREx_SetSRAM2ContentRetention+0x44>)
 800529c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052a0:	6093      	str	r3, [r2, #8]
 80052a2:	e00c      	b.n	80052be <HAL_PWREx_SetSRAM2ContentRetention+0x36>
  }
  else if (SRAM2Size == PWR_FULL_SRAM2_RETENTION)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052aa:	d106      	bne.n	80052ba <HAL_PWREx_SetSRAM2ContentRetention+0x32>
  {
    MODIFY_REG(PWR->CR3, PWR_CR3_RRS, PWR_FULL_SRAM2_RETENTION);
 80052ac:	4b07      	ldr	r3, [pc, #28]	; (80052cc <HAL_PWREx_SetSRAM2ContentRetention+0x44>)
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	4a06      	ldr	r2, [pc, #24]	; (80052cc <HAL_PWREx_SetSRAM2ContentRetention+0x44>)
 80052b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052b6:	6093      	str	r3, [r2, #8]
 80052b8:	e001      	b.n	80052be <HAL_PWREx_SetSRAM2ContentRetention+0x36>
  {
    MODIFY_REG(PWR->CR3, PWR_CR3_RRS, PWR_4KBYTES_SRAM2_RETENTION);
  }
#endif /* PWR_CR3_RRS_1 */
  else {
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e000      	b.n	80052c0 <HAL_PWREx_SetSRAM2ContentRetention+0x38>
  }

  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	40007000 	.word	0x40007000

080052d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b088      	sub	sp, #32
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e3d4      	b.n	8005a8c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052e2:	4ba1      	ldr	r3, [pc, #644]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f003 030c 	and.w	r3, r3, #12
 80052ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052ec:	4b9e      	ldr	r3, [pc, #632]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f003 0303 	and.w	r3, r3, #3
 80052f4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0310 	and.w	r3, r3, #16
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f000 80e4 	beq.w	80054cc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d007      	beq.n	800531a <HAL_RCC_OscConfig+0x4a>
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	2b0c      	cmp	r3, #12
 800530e:	f040 808b 	bne.w	8005428 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	2b01      	cmp	r3, #1
 8005316:	f040 8087 	bne.w	8005428 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800531a:	4b93      	ldr	r3, [pc, #588]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d005      	beq.n	8005332 <HAL_RCC_OscConfig+0x62>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e3ac      	b.n	8005a8c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1a      	ldr	r2, [r3, #32]
 8005336:	4b8c      	ldr	r3, [pc, #560]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0308 	and.w	r3, r3, #8
 800533e:	2b00      	cmp	r3, #0
 8005340:	d004      	beq.n	800534c <HAL_RCC_OscConfig+0x7c>
 8005342:	4b89      	ldr	r3, [pc, #548]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800534a:	e005      	b.n	8005358 <HAL_RCC_OscConfig+0x88>
 800534c:	4b86      	ldr	r3, [pc, #536]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 800534e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005352:	091b      	lsrs	r3, r3, #4
 8005354:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005358:	4293      	cmp	r3, r2
 800535a:	d223      	bcs.n	80053a4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a1b      	ldr	r3, [r3, #32]
 8005360:	4618      	mov	r0, r3
 8005362:	f000 fd09 	bl	8005d78 <RCC_SetFlashLatencyFromMSIRange>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d001      	beq.n	8005370 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e38d      	b.n	8005a8c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005370:	4b7d      	ldr	r3, [pc, #500]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a7c      	ldr	r2, [pc, #496]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 8005376:	f043 0308 	orr.w	r3, r3, #8
 800537a:	6013      	str	r3, [r2, #0]
 800537c:	4b7a      	ldr	r3, [pc, #488]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a1b      	ldr	r3, [r3, #32]
 8005388:	4977      	ldr	r1, [pc, #476]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 800538a:	4313      	orrs	r3, r2
 800538c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800538e:	4b76      	ldr	r3, [pc, #472]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	021b      	lsls	r3, r3, #8
 800539c:	4972      	ldr	r1, [pc, #456]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	604b      	str	r3, [r1, #4]
 80053a2:	e025      	b.n	80053f0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053a4:	4b70      	ldr	r3, [pc, #448]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a6f      	ldr	r2, [pc, #444]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 80053aa:	f043 0308 	orr.w	r3, r3, #8
 80053ae:	6013      	str	r3, [r2, #0]
 80053b0:	4b6d      	ldr	r3, [pc, #436]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	496a      	ldr	r1, [pc, #424]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053c2:	4b69      	ldr	r3, [pc, #420]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	021b      	lsls	r3, r3, #8
 80053d0:	4965      	ldr	r1, [pc, #404]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d109      	bne.n	80053f0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 fcc9 	bl	8005d78 <RCC_SetFlashLatencyFromMSIRange>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e34d      	b.n	8005a8c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80053f0:	f000 fc36 	bl	8005c60 <HAL_RCC_GetSysClockFreq>
 80053f4:	4602      	mov	r2, r0
 80053f6:	4b5c      	ldr	r3, [pc, #368]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	091b      	lsrs	r3, r3, #4
 80053fc:	f003 030f 	and.w	r3, r3, #15
 8005400:	495a      	ldr	r1, [pc, #360]	; (800556c <HAL_RCC_OscConfig+0x29c>)
 8005402:	5ccb      	ldrb	r3, [r1, r3]
 8005404:	f003 031f 	and.w	r3, r3, #31
 8005408:	fa22 f303 	lsr.w	r3, r2, r3
 800540c:	4a58      	ldr	r2, [pc, #352]	; (8005570 <HAL_RCC_OscConfig+0x2a0>)
 800540e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005410:	4b58      	ldr	r3, [pc, #352]	; (8005574 <HAL_RCC_OscConfig+0x2a4>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4618      	mov	r0, r3
 8005416:	f7ff f90e 	bl	8004636 <HAL_InitTick>
 800541a:	4603      	mov	r3, r0
 800541c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800541e:	7bfb      	ldrb	r3, [r7, #15]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d052      	beq.n	80054ca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005424:	7bfb      	ldrb	r3, [r7, #15]
 8005426:	e331      	b.n	8005a8c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d032      	beq.n	8005496 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005430:	4b4d      	ldr	r3, [pc, #308]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a4c      	ldr	r2, [pc, #304]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 8005436:	f043 0301 	orr.w	r3, r3, #1
 800543a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800543c:	f7ff faac 	bl	8004998 <HAL_GetTick>
 8005440:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005442:	e008      	b.n	8005456 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005444:	f7ff faa8 	bl	8004998 <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	2b02      	cmp	r3, #2
 8005450:	d901      	bls.n	8005456 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e31a      	b.n	8005a8c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005456:	4b44      	ldr	r3, [pc, #272]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d0f0      	beq.n	8005444 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005462:	4b41      	ldr	r3, [pc, #260]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a40      	ldr	r2, [pc, #256]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 8005468:	f043 0308 	orr.w	r3, r3, #8
 800546c:	6013      	str	r3, [r2, #0]
 800546e:	4b3e      	ldr	r3, [pc, #248]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	493b      	ldr	r1, [pc, #236]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 800547c:	4313      	orrs	r3, r2
 800547e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005480:	4b39      	ldr	r3, [pc, #228]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	021b      	lsls	r3, r3, #8
 800548e:	4936      	ldr	r1, [pc, #216]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 8005490:	4313      	orrs	r3, r2
 8005492:	604b      	str	r3, [r1, #4]
 8005494:	e01a      	b.n	80054cc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005496:	4b34      	ldr	r3, [pc, #208]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a33      	ldr	r2, [pc, #204]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 800549c:	f023 0301 	bic.w	r3, r3, #1
 80054a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80054a2:	f7ff fa79 	bl	8004998 <HAL_GetTick>
 80054a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80054a8:	e008      	b.n	80054bc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80054aa:	f7ff fa75 	bl	8004998 <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d901      	bls.n	80054bc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e2e7      	b.n	8005a8c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80054bc:	4b2a      	ldr	r3, [pc, #168]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0302 	and.w	r3, r3, #2
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1f0      	bne.n	80054aa <HAL_RCC_OscConfig+0x1da>
 80054c8:	e000      	b.n	80054cc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80054ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d074      	beq.n	80055c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	2b08      	cmp	r3, #8
 80054dc:	d005      	beq.n	80054ea <HAL_RCC_OscConfig+0x21a>
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	2b0c      	cmp	r3, #12
 80054e2:	d10e      	bne.n	8005502 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	2b03      	cmp	r3, #3
 80054e8:	d10b      	bne.n	8005502 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054ea:	4b1f      	ldr	r3, [pc, #124]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d064      	beq.n	80055c0 <HAL_RCC_OscConfig+0x2f0>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d160      	bne.n	80055c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e2c4      	b.n	8005a8c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800550a:	d106      	bne.n	800551a <HAL_RCC_OscConfig+0x24a>
 800550c:	4b16      	ldr	r3, [pc, #88]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a15      	ldr	r2, [pc, #84]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 8005512:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005516:	6013      	str	r3, [r2, #0]
 8005518:	e01d      	b.n	8005556 <HAL_RCC_OscConfig+0x286>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005522:	d10c      	bne.n	800553e <HAL_RCC_OscConfig+0x26e>
 8005524:	4b10      	ldr	r3, [pc, #64]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a0f      	ldr	r2, [pc, #60]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 800552a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800552e:	6013      	str	r3, [r2, #0]
 8005530:	4b0d      	ldr	r3, [pc, #52]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a0c      	ldr	r2, [pc, #48]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 8005536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800553a:	6013      	str	r3, [r2, #0]
 800553c:	e00b      	b.n	8005556 <HAL_RCC_OscConfig+0x286>
 800553e:	4b0a      	ldr	r3, [pc, #40]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a09      	ldr	r2, [pc, #36]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 8005544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005548:	6013      	str	r3, [r2, #0]
 800554a:	4b07      	ldr	r3, [pc, #28]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a06      	ldr	r2, [pc, #24]	; (8005568 <HAL_RCC_OscConfig+0x298>)
 8005550:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005554:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d01c      	beq.n	8005598 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800555e:	f7ff fa1b 	bl	8004998 <HAL_GetTick>
 8005562:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005564:	e011      	b.n	800558a <HAL_RCC_OscConfig+0x2ba>
 8005566:	bf00      	nop
 8005568:	40021000 	.word	0x40021000
 800556c:	080062e8 	.word	0x080062e8
 8005570:	20000004 	.word	0x20000004
 8005574:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005578:	f7ff fa0e 	bl	8004998 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b64      	cmp	r3, #100	; 0x64
 8005584:	d901      	bls.n	800558a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e280      	b.n	8005a8c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800558a:	4baf      	ldr	r3, [pc, #700]	; (8005848 <HAL_RCC_OscConfig+0x578>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d0f0      	beq.n	8005578 <HAL_RCC_OscConfig+0x2a8>
 8005596:	e014      	b.n	80055c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005598:	f7ff f9fe 	bl	8004998 <HAL_GetTick>
 800559c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800559e:	e008      	b.n	80055b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055a0:	f7ff f9fa 	bl	8004998 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	2b64      	cmp	r3, #100	; 0x64
 80055ac:	d901      	bls.n	80055b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e26c      	b.n	8005a8c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055b2:	4ba5      	ldr	r3, [pc, #660]	; (8005848 <HAL_RCC_OscConfig+0x578>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1f0      	bne.n	80055a0 <HAL_RCC_OscConfig+0x2d0>
 80055be:	e000      	b.n	80055c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d060      	beq.n	8005690 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	2b04      	cmp	r3, #4
 80055d2:	d005      	beq.n	80055e0 <HAL_RCC_OscConfig+0x310>
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	2b0c      	cmp	r3, #12
 80055d8:	d119      	bne.n	800560e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d116      	bne.n	800560e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055e0:	4b99      	ldr	r3, [pc, #612]	; (8005848 <HAL_RCC_OscConfig+0x578>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d005      	beq.n	80055f8 <HAL_RCC_OscConfig+0x328>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d101      	bne.n	80055f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e249      	b.n	8005a8c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055f8:	4b93      	ldr	r3, [pc, #588]	; (8005848 <HAL_RCC_OscConfig+0x578>)
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	061b      	lsls	r3, r3, #24
 8005606:	4990      	ldr	r1, [pc, #576]	; (8005848 <HAL_RCC_OscConfig+0x578>)
 8005608:	4313      	orrs	r3, r2
 800560a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800560c:	e040      	b.n	8005690 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d023      	beq.n	800565e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005616:	4b8c      	ldr	r3, [pc, #560]	; (8005848 <HAL_RCC_OscConfig+0x578>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a8b      	ldr	r2, [pc, #556]	; (8005848 <HAL_RCC_OscConfig+0x578>)
 800561c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005620:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005622:	f7ff f9b9 	bl	8004998 <HAL_GetTick>
 8005626:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005628:	e008      	b.n	800563c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800562a:	f7ff f9b5 	bl	8004998 <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	2b02      	cmp	r3, #2
 8005636:	d901      	bls.n	800563c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e227      	b.n	8005a8c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800563c:	4b82      	ldr	r3, [pc, #520]	; (8005848 <HAL_RCC_OscConfig+0x578>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005644:	2b00      	cmp	r3, #0
 8005646:	d0f0      	beq.n	800562a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005648:	4b7f      	ldr	r3, [pc, #508]	; (8005848 <HAL_RCC_OscConfig+0x578>)
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	061b      	lsls	r3, r3, #24
 8005656:	497c      	ldr	r1, [pc, #496]	; (8005848 <HAL_RCC_OscConfig+0x578>)
 8005658:	4313      	orrs	r3, r2
 800565a:	604b      	str	r3, [r1, #4]
 800565c:	e018      	b.n	8005690 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800565e:	4b7a      	ldr	r3, [pc, #488]	; (8005848 <HAL_RCC_OscConfig+0x578>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a79      	ldr	r2, [pc, #484]	; (8005848 <HAL_RCC_OscConfig+0x578>)
 8005664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800566a:	f7ff f995 	bl	8004998 <HAL_GetTick>
 800566e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005670:	e008      	b.n	8005684 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005672:	f7ff f991 	bl	8004998 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e203      	b.n	8005a8c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005684:	4b70      	ldr	r3, [pc, #448]	; (8005848 <HAL_RCC_OscConfig+0x578>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1f0      	bne.n	8005672 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0308 	and.w	r3, r3, #8
 8005698:	2b00      	cmp	r3, #0
 800569a:	d03c      	beq.n	8005716 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d01c      	beq.n	80056de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056a4:	4b68      	ldr	r3, [pc, #416]	; (8005848 <HAL_RCC_OscConfig+0x578>)
 80056a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056aa:	4a67      	ldr	r2, [pc, #412]	; (8005848 <HAL_RCC_OscConfig+0x578>)
 80056ac:	f043 0301 	orr.w	r3, r3, #1
 80056b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056b4:	f7ff f970 	bl	8004998 <HAL_GetTick>
 80056b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80056ba:	e008      	b.n	80056ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056bc:	f7ff f96c 	bl	8004998 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d901      	bls.n	80056ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e1de      	b.n	8005a8c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80056ce:	4b5e      	ldr	r3, [pc, #376]	; (8005848 <HAL_RCC_OscConfig+0x578>)
 80056d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056d4:	f003 0302 	and.w	r3, r3, #2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d0ef      	beq.n	80056bc <HAL_RCC_OscConfig+0x3ec>
 80056dc:	e01b      	b.n	8005716 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056de:	4b5a      	ldr	r3, [pc, #360]	; (8005848 <HAL_RCC_OscConfig+0x578>)
 80056e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056e4:	4a58      	ldr	r2, [pc, #352]	; (8005848 <HAL_RCC_OscConfig+0x578>)
 80056e6:	f023 0301 	bic.w	r3, r3, #1
 80056ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ee:	f7ff f953 	bl	8004998 <HAL_GetTick>
 80056f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80056f4:	e008      	b.n	8005708 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056f6:	f7ff f94f 	bl	8004998 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	2b02      	cmp	r3, #2
 8005702:	d901      	bls.n	8005708 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e1c1      	b.n	8005a8c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005708:	4b4f      	ldr	r3, [pc, #316]	; (8005848 <HAL_RCC_OscConfig+0x578>)
 800570a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1ef      	bne.n	80056f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0304 	and.w	r3, r3, #4
 800571e:	2b00      	cmp	r3, #0
 8005720:	f000 80a6 	beq.w	8005870 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005724:	2300      	movs	r3, #0
 8005726:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005728:	4b47      	ldr	r3, [pc, #284]	; (8005848 <HAL_RCC_OscConfig+0x578>)
 800572a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800572c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10d      	bne.n	8005750 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005734:	4b44      	ldr	r3, [pc, #272]	; (8005848 <HAL_RCC_OscConfig+0x578>)
 8005736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005738:	4a43      	ldr	r2, [pc, #268]	; (8005848 <HAL_RCC_OscConfig+0x578>)
 800573a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800573e:	6593      	str	r3, [r2, #88]	; 0x58
 8005740:	4b41      	ldr	r3, [pc, #260]	; (8005848 <HAL_RCC_OscConfig+0x578>)
 8005742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005748:	60bb      	str	r3, [r7, #8]
 800574a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800574c:	2301      	movs	r3, #1
 800574e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005750:	4b3e      	ldr	r3, [pc, #248]	; (800584c <HAL_RCC_OscConfig+0x57c>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005758:	2b00      	cmp	r3, #0
 800575a:	d118      	bne.n	800578e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800575c:	4b3b      	ldr	r3, [pc, #236]	; (800584c <HAL_RCC_OscConfig+0x57c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a3a      	ldr	r2, [pc, #232]	; (800584c <HAL_RCC_OscConfig+0x57c>)
 8005762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005766:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005768:	f7ff f916 	bl	8004998 <HAL_GetTick>
 800576c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800576e:	e008      	b.n	8005782 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005770:	f7ff f912 	bl	8004998 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	2b02      	cmp	r3, #2
 800577c:	d901      	bls.n	8005782 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e184      	b.n	8005a8c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005782:	4b32      	ldr	r3, [pc, #200]	; (800584c <HAL_RCC_OscConfig+0x57c>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800578a:	2b00      	cmp	r3, #0
 800578c:	d0f0      	beq.n	8005770 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d108      	bne.n	80057a8 <HAL_RCC_OscConfig+0x4d8>
 8005796:	4b2c      	ldr	r3, [pc, #176]	; (8005848 <HAL_RCC_OscConfig+0x578>)
 8005798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800579c:	4a2a      	ldr	r2, [pc, #168]	; (8005848 <HAL_RCC_OscConfig+0x578>)
 800579e:	f043 0301 	orr.w	r3, r3, #1
 80057a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80057a6:	e024      	b.n	80057f2 <HAL_RCC_OscConfig+0x522>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	2b05      	cmp	r3, #5
 80057ae:	d110      	bne.n	80057d2 <HAL_RCC_OscConfig+0x502>
 80057b0:	4b25      	ldr	r3, [pc, #148]	; (8005848 <HAL_RCC_OscConfig+0x578>)
 80057b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057b6:	4a24      	ldr	r2, [pc, #144]	; (8005848 <HAL_RCC_OscConfig+0x578>)
 80057b8:	f043 0304 	orr.w	r3, r3, #4
 80057bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80057c0:	4b21      	ldr	r3, [pc, #132]	; (8005848 <HAL_RCC_OscConfig+0x578>)
 80057c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057c6:	4a20      	ldr	r2, [pc, #128]	; (8005848 <HAL_RCC_OscConfig+0x578>)
 80057c8:	f043 0301 	orr.w	r3, r3, #1
 80057cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80057d0:	e00f      	b.n	80057f2 <HAL_RCC_OscConfig+0x522>
 80057d2:	4b1d      	ldr	r3, [pc, #116]	; (8005848 <HAL_RCC_OscConfig+0x578>)
 80057d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d8:	4a1b      	ldr	r2, [pc, #108]	; (8005848 <HAL_RCC_OscConfig+0x578>)
 80057da:	f023 0301 	bic.w	r3, r3, #1
 80057de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80057e2:	4b19      	ldr	r3, [pc, #100]	; (8005848 <HAL_RCC_OscConfig+0x578>)
 80057e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e8:	4a17      	ldr	r2, [pc, #92]	; (8005848 <HAL_RCC_OscConfig+0x578>)
 80057ea:	f023 0304 	bic.w	r3, r3, #4
 80057ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d016      	beq.n	8005828 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057fa:	f7ff f8cd 	bl	8004998 <HAL_GetTick>
 80057fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005800:	e00a      	b.n	8005818 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005802:	f7ff f8c9 	bl	8004998 <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005810:	4293      	cmp	r3, r2
 8005812:	d901      	bls.n	8005818 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e139      	b.n	8005a8c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005818:	4b0b      	ldr	r3, [pc, #44]	; (8005848 <HAL_RCC_OscConfig+0x578>)
 800581a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d0ed      	beq.n	8005802 <HAL_RCC_OscConfig+0x532>
 8005826:	e01a      	b.n	800585e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005828:	f7ff f8b6 	bl	8004998 <HAL_GetTick>
 800582c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800582e:	e00f      	b.n	8005850 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005830:	f7ff f8b2 	bl	8004998 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	f241 3288 	movw	r2, #5000	; 0x1388
 800583e:	4293      	cmp	r3, r2
 8005840:	d906      	bls.n	8005850 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e122      	b.n	8005a8c <HAL_RCC_OscConfig+0x7bc>
 8005846:	bf00      	nop
 8005848:	40021000 	.word	0x40021000
 800584c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005850:	4b90      	ldr	r3, [pc, #576]	; (8005a94 <HAL_RCC_OscConfig+0x7c4>)
 8005852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005856:	f003 0302 	and.w	r3, r3, #2
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1e8      	bne.n	8005830 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800585e:	7ffb      	ldrb	r3, [r7, #31]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d105      	bne.n	8005870 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005864:	4b8b      	ldr	r3, [pc, #556]	; (8005a94 <HAL_RCC_OscConfig+0x7c4>)
 8005866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005868:	4a8a      	ldr	r2, [pc, #552]	; (8005a94 <HAL_RCC_OscConfig+0x7c4>)
 800586a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800586e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 8108 	beq.w	8005a8a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587e:	2b02      	cmp	r3, #2
 8005880:	f040 80d0 	bne.w	8005a24 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005884:	4b83      	ldr	r3, [pc, #524]	; (8005a94 <HAL_RCC_OscConfig+0x7c4>)
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f003 0203 	and.w	r2, r3, #3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005894:	429a      	cmp	r2, r3
 8005896:	d130      	bne.n	80058fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a2:	3b01      	subs	r3, #1
 80058a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d127      	bne.n	80058fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d11f      	bne.n	80058fa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80058c4:	2a07      	cmp	r2, #7
 80058c6:	bf14      	ite	ne
 80058c8:	2201      	movne	r2, #1
 80058ca:	2200      	moveq	r2, #0
 80058cc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d113      	bne.n	80058fa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058dc:	085b      	lsrs	r3, r3, #1
 80058de:	3b01      	subs	r3, #1
 80058e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d109      	bne.n	80058fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f0:	085b      	lsrs	r3, r3, #1
 80058f2:	3b01      	subs	r3, #1
 80058f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d06e      	beq.n	80059d8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	2b0c      	cmp	r3, #12
 80058fe:	d069      	beq.n	80059d4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005900:	4b64      	ldr	r3, [pc, #400]	; (8005a94 <HAL_RCC_OscConfig+0x7c4>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d105      	bne.n	8005918 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800590c:	4b61      	ldr	r3, [pc, #388]	; (8005a94 <HAL_RCC_OscConfig+0x7c4>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d001      	beq.n	800591c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e0b7      	b.n	8005a8c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800591c:	4b5d      	ldr	r3, [pc, #372]	; (8005a94 <HAL_RCC_OscConfig+0x7c4>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a5c      	ldr	r2, [pc, #368]	; (8005a94 <HAL_RCC_OscConfig+0x7c4>)
 8005922:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005926:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005928:	f7ff f836 	bl	8004998 <HAL_GetTick>
 800592c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800592e:	e008      	b.n	8005942 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005930:	f7ff f832 	bl	8004998 <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	2b02      	cmp	r3, #2
 800593c:	d901      	bls.n	8005942 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e0a4      	b.n	8005a8c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005942:	4b54      	ldr	r3, [pc, #336]	; (8005a94 <HAL_RCC_OscConfig+0x7c4>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1f0      	bne.n	8005930 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800594e:	4b51      	ldr	r3, [pc, #324]	; (8005a94 <HAL_RCC_OscConfig+0x7c4>)
 8005950:	68da      	ldr	r2, [r3, #12]
 8005952:	4b51      	ldr	r3, [pc, #324]	; (8005a98 <HAL_RCC_OscConfig+0x7c8>)
 8005954:	4013      	ands	r3, r2
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800595e:	3a01      	subs	r2, #1
 8005960:	0112      	lsls	r2, r2, #4
 8005962:	4311      	orrs	r1, r2
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005968:	0212      	lsls	r2, r2, #8
 800596a:	4311      	orrs	r1, r2
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005970:	0852      	lsrs	r2, r2, #1
 8005972:	3a01      	subs	r2, #1
 8005974:	0552      	lsls	r2, r2, #21
 8005976:	4311      	orrs	r1, r2
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800597c:	0852      	lsrs	r2, r2, #1
 800597e:	3a01      	subs	r2, #1
 8005980:	0652      	lsls	r2, r2, #25
 8005982:	4311      	orrs	r1, r2
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005988:	0912      	lsrs	r2, r2, #4
 800598a:	0452      	lsls	r2, r2, #17
 800598c:	430a      	orrs	r2, r1
 800598e:	4941      	ldr	r1, [pc, #260]	; (8005a94 <HAL_RCC_OscConfig+0x7c4>)
 8005990:	4313      	orrs	r3, r2
 8005992:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005994:	4b3f      	ldr	r3, [pc, #252]	; (8005a94 <HAL_RCC_OscConfig+0x7c4>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a3e      	ldr	r2, [pc, #248]	; (8005a94 <HAL_RCC_OscConfig+0x7c4>)
 800599a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800599e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80059a0:	4b3c      	ldr	r3, [pc, #240]	; (8005a94 <HAL_RCC_OscConfig+0x7c4>)
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	4a3b      	ldr	r2, [pc, #236]	; (8005a94 <HAL_RCC_OscConfig+0x7c4>)
 80059a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80059ac:	f7fe fff4 	bl	8004998 <HAL_GetTick>
 80059b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059b2:	e008      	b.n	80059c6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059b4:	f7fe fff0 	bl	8004998 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e062      	b.n	8005a8c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059c6:	4b33      	ldr	r3, [pc, #204]	; (8005a94 <HAL_RCC_OscConfig+0x7c4>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d0f0      	beq.n	80059b4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80059d2:	e05a      	b.n	8005a8a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e059      	b.n	8005a8c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059d8:	4b2e      	ldr	r3, [pc, #184]	; (8005a94 <HAL_RCC_OscConfig+0x7c4>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d152      	bne.n	8005a8a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80059e4:	4b2b      	ldr	r3, [pc, #172]	; (8005a94 <HAL_RCC_OscConfig+0x7c4>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a2a      	ldr	r2, [pc, #168]	; (8005a94 <HAL_RCC_OscConfig+0x7c4>)
 80059ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80059f0:	4b28      	ldr	r3, [pc, #160]	; (8005a94 <HAL_RCC_OscConfig+0x7c4>)
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	4a27      	ldr	r2, [pc, #156]	; (8005a94 <HAL_RCC_OscConfig+0x7c4>)
 80059f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80059fc:	f7fe ffcc 	bl	8004998 <HAL_GetTick>
 8005a00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a02:	e008      	b.n	8005a16 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a04:	f7fe ffc8 	bl	8004998 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d901      	bls.n	8005a16 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e03a      	b.n	8005a8c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a16:	4b1f      	ldr	r3, [pc, #124]	; (8005a94 <HAL_RCC_OscConfig+0x7c4>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d0f0      	beq.n	8005a04 <HAL_RCC_OscConfig+0x734>
 8005a22:	e032      	b.n	8005a8a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	2b0c      	cmp	r3, #12
 8005a28:	d02d      	beq.n	8005a86 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a2a:	4b1a      	ldr	r3, [pc, #104]	; (8005a94 <HAL_RCC_OscConfig+0x7c4>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a19      	ldr	r2, [pc, #100]	; (8005a94 <HAL_RCC_OscConfig+0x7c4>)
 8005a30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a34:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005a36:	4b17      	ldr	r3, [pc, #92]	; (8005a94 <HAL_RCC_OscConfig+0x7c4>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d105      	bne.n	8005a4e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005a42:	4b14      	ldr	r3, [pc, #80]	; (8005a94 <HAL_RCC_OscConfig+0x7c4>)
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	4a13      	ldr	r2, [pc, #76]	; (8005a94 <HAL_RCC_OscConfig+0x7c4>)
 8005a48:	f023 0303 	bic.w	r3, r3, #3
 8005a4c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005a4e:	4b11      	ldr	r3, [pc, #68]	; (8005a94 <HAL_RCC_OscConfig+0x7c4>)
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	4a10      	ldr	r2, [pc, #64]	; (8005a94 <HAL_RCC_OscConfig+0x7c4>)
 8005a54:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a5c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a5e:	f7fe ff9b 	bl	8004998 <HAL_GetTick>
 8005a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a64:	e008      	b.n	8005a78 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a66:	f7fe ff97 	bl	8004998 <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d901      	bls.n	8005a78 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e009      	b.n	8005a8c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a78:	4b06      	ldr	r3, [pc, #24]	; (8005a94 <HAL_RCC_OscConfig+0x7c4>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1f0      	bne.n	8005a66 <HAL_RCC_OscConfig+0x796>
 8005a84:	e001      	b.n	8005a8a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e000      	b.n	8005a8c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3720      	adds	r7, #32
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	40021000 	.word	0x40021000
 8005a98:	f99d808c 	.word	0xf99d808c

08005a9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d101      	bne.n	8005ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e0c8      	b.n	8005c42 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ab0:	4b66      	ldr	r3, [pc, #408]	; (8005c4c <HAL_RCC_ClockConfig+0x1b0>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0307 	and.w	r3, r3, #7
 8005ab8:	683a      	ldr	r2, [r7, #0]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d910      	bls.n	8005ae0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005abe:	4b63      	ldr	r3, [pc, #396]	; (8005c4c <HAL_RCC_ClockConfig+0x1b0>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f023 0207 	bic.w	r2, r3, #7
 8005ac6:	4961      	ldr	r1, [pc, #388]	; (8005c4c <HAL_RCC_ClockConfig+0x1b0>)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ace:	4b5f      	ldr	r3, [pc, #380]	; (8005c4c <HAL_RCC_ClockConfig+0x1b0>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0307 	and.w	r3, r3, #7
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d001      	beq.n	8005ae0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e0b0      	b.n	8005c42 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d04c      	beq.n	8005b86 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	2b03      	cmp	r3, #3
 8005af2:	d107      	bne.n	8005b04 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005af4:	4b56      	ldr	r3, [pc, #344]	; (8005c50 <HAL_RCC_ClockConfig+0x1b4>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d121      	bne.n	8005b44 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e09e      	b.n	8005c42 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d107      	bne.n	8005b1c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b0c:	4b50      	ldr	r3, [pc, #320]	; (8005c50 <HAL_RCC_ClockConfig+0x1b4>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d115      	bne.n	8005b44 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e092      	b.n	8005c42 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d107      	bne.n	8005b34 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b24:	4b4a      	ldr	r3, [pc, #296]	; (8005c50 <HAL_RCC_ClockConfig+0x1b4>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0302 	and.w	r3, r3, #2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d109      	bne.n	8005b44 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e086      	b.n	8005c42 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b34:	4b46      	ldr	r3, [pc, #280]	; (8005c50 <HAL_RCC_ClockConfig+0x1b4>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d101      	bne.n	8005b44 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e07e      	b.n	8005c42 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b44:	4b42      	ldr	r3, [pc, #264]	; (8005c50 <HAL_RCC_ClockConfig+0x1b4>)
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f023 0203 	bic.w	r2, r3, #3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	493f      	ldr	r1, [pc, #252]	; (8005c50 <HAL_RCC_ClockConfig+0x1b4>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b56:	f7fe ff1f 	bl	8004998 <HAL_GetTick>
 8005b5a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b5c:	e00a      	b.n	8005b74 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b5e:	f7fe ff1b 	bl	8004998 <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d901      	bls.n	8005b74 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e066      	b.n	8005c42 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b74:	4b36      	ldr	r3, [pc, #216]	; (8005c50 <HAL_RCC_ClockConfig+0x1b4>)
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f003 020c 	and.w	r2, r3, #12
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d1eb      	bne.n	8005b5e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d008      	beq.n	8005ba4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b92:	4b2f      	ldr	r3, [pc, #188]	; (8005c50 <HAL_RCC_ClockConfig+0x1b4>)
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	492c      	ldr	r1, [pc, #176]	; (8005c50 <HAL_RCC_ClockConfig+0x1b4>)
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ba4:	4b29      	ldr	r3, [pc, #164]	; (8005c4c <HAL_RCC_ClockConfig+0x1b0>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0307 	and.w	r3, r3, #7
 8005bac:	683a      	ldr	r2, [r7, #0]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d210      	bcs.n	8005bd4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bb2:	4b26      	ldr	r3, [pc, #152]	; (8005c4c <HAL_RCC_ClockConfig+0x1b0>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f023 0207 	bic.w	r2, r3, #7
 8005bba:	4924      	ldr	r1, [pc, #144]	; (8005c4c <HAL_RCC_ClockConfig+0x1b0>)
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bc2:	4b22      	ldr	r3, [pc, #136]	; (8005c4c <HAL_RCC_ClockConfig+0x1b0>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0307 	and.w	r3, r3, #7
 8005bca:	683a      	ldr	r2, [r7, #0]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d001      	beq.n	8005bd4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e036      	b.n	8005c42 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0304 	and.w	r3, r3, #4
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d008      	beq.n	8005bf2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005be0:	4b1b      	ldr	r3, [pc, #108]	; (8005c50 <HAL_RCC_ClockConfig+0x1b4>)
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	4918      	ldr	r1, [pc, #96]	; (8005c50 <HAL_RCC_ClockConfig+0x1b4>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0308 	and.w	r3, r3, #8
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d009      	beq.n	8005c12 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bfe:	4b14      	ldr	r3, [pc, #80]	; (8005c50 <HAL_RCC_ClockConfig+0x1b4>)
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	00db      	lsls	r3, r3, #3
 8005c0c:	4910      	ldr	r1, [pc, #64]	; (8005c50 <HAL_RCC_ClockConfig+0x1b4>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c12:	f000 f825 	bl	8005c60 <HAL_RCC_GetSysClockFreq>
 8005c16:	4602      	mov	r2, r0
 8005c18:	4b0d      	ldr	r3, [pc, #52]	; (8005c50 <HAL_RCC_ClockConfig+0x1b4>)
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	091b      	lsrs	r3, r3, #4
 8005c1e:	f003 030f 	and.w	r3, r3, #15
 8005c22:	490c      	ldr	r1, [pc, #48]	; (8005c54 <HAL_RCC_ClockConfig+0x1b8>)
 8005c24:	5ccb      	ldrb	r3, [r1, r3]
 8005c26:	f003 031f 	and.w	r3, r3, #31
 8005c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c2e:	4a0a      	ldr	r2, [pc, #40]	; (8005c58 <HAL_RCC_ClockConfig+0x1bc>)
 8005c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005c32:	4b0a      	ldr	r3, [pc, #40]	; (8005c5c <HAL_RCC_ClockConfig+0x1c0>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7fe fcfd 	bl	8004636 <HAL_InitTick>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	72fb      	strb	r3, [r7, #11]

  return status;
 8005c40:	7afb      	ldrb	r3, [r7, #11]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	40022000 	.word	0x40022000
 8005c50:	40021000 	.word	0x40021000
 8005c54:	080062e8 	.word	0x080062e8
 8005c58:	20000004 	.word	0x20000004
 8005c5c:	20000010 	.word	0x20000010

08005c60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b089      	sub	sp, #36	; 0x24
 8005c64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005c66:	2300      	movs	r3, #0
 8005c68:	61fb      	str	r3, [r7, #28]
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c6e:	4b3e      	ldr	r3, [pc, #248]	; (8005d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f003 030c 	and.w	r3, r3, #12
 8005c76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c78:	4b3b      	ldr	r3, [pc, #236]	; (8005d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	f003 0303 	and.w	r3, r3, #3
 8005c80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d005      	beq.n	8005c94 <HAL_RCC_GetSysClockFreq+0x34>
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	2b0c      	cmp	r3, #12
 8005c8c:	d121      	bne.n	8005cd2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d11e      	bne.n	8005cd2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005c94:	4b34      	ldr	r3, [pc, #208]	; (8005d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0308 	and.w	r3, r3, #8
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d107      	bne.n	8005cb0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005ca0:	4b31      	ldr	r3, [pc, #196]	; (8005d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ca6:	0a1b      	lsrs	r3, r3, #8
 8005ca8:	f003 030f 	and.w	r3, r3, #15
 8005cac:	61fb      	str	r3, [r7, #28]
 8005cae:	e005      	b.n	8005cbc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005cb0:	4b2d      	ldr	r3, [pc, #180]	; (8005d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	091b      	lsrs	r3, r3, #4
 8005cb6:	f003 030f 	and.w	r3, r3, #15
 8005cba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005cbc:	4a2b      	ldr	r2, [pc, #172]	; (8005d6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cc4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10d      	bne.n	8005ce8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005cd0:	e00a      	b.n	8005ce8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	2b04      	cmp	r3, #4
 8005cd6:	d102      	bne.n	8005cde <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005cd8:	4b25      	ldr	r3, [pc, #148]	; (8005d70 <HAL_RCC_GetSysClockFreq+0x110>)
 8005cda:	61bb      	str	r3, [r7, #24]
 8005cdc:	e004      	b.n	8005ce8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	2b08      	cmp	r3, #8
 8005ce2:	d101      	bne.n	8005ce8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005ce4:	4b23      	ldr	r3, [pc, #140]	; (8005d74 <HAL_RCC_GetSysClockFreq+0x114>)
 8005ce6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	2b0c      	cmp	r3, #12
 8005cec:	d134      	bne.n	8005d58 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005cee:	4b1e      	ldr	r3, [pc, #120]	; (8005d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	f003 0303 	and.w	r3, r3, #3
 8005cf6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d003      	beq.n	8005d06 <HAL_RCC_GetSysClockFreq+0xa6>
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	2b03      	cmp	r3, #3
 8005d02:	d003      	beq.n	8005d0c <HAL_RCC_GetSysClockFreq+0xac>
 8005d04:	e005      	b.n	8005d12 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005d06:	4b1a      	ldr	r3, [pc, #104]	; (8005d70 <HAL_RCC_GetSysClockFreq+0x110>)
 8005d08:	617b      	str	r3, [r7, #20]
      break;
 8005d0a:	e005      	b.n	8005d18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005d0c:	4b19      	ldr	r3, [pc, #100]	; (8005d74 <HAL_RCC_GetSysClockFreq+0x114>)
 8005d0e:	617b      	str	r3, [r7, #20]
      break;
 8005d10:	e002      	b.n	8005d18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	617b      	str	r3, [r7, #20]
      break;
 8005d16:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d18:	4b13      	ldr	r3, [pc, #76]	; (8005d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	091b      	lsrs	r3, r3, #4
 8005d1e:	f003 0307 	and.w	r3, r3, #7
 8005d22:	3301      	adds	r3, #1
 8005d24:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005d26:	4b10      	ldr	r3, [pc, #64]	; (8005d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	0a1b      	lsrs	r3, r3, #8
 8005d2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	fb02 f203 	mul.w	r2, r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d3c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d3e:	4b0a      	ldr	r3, [pc, #40]	; (8005d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	0e5b      	lsrs	r3, r3, #25
 8005d44:	f003 0303 	and.w	r3, r3, #3
 8005d48:	3301      	adds	r3, #1
 8005d4a:	005b      	lsls	r3, r3, #1
 8005d4c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d56:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005d58:	69bb      	ldr	r3, [r7, #24]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3724      	adds	r7, #36	; 0x24
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	40021000 	.word	0x40021000
 8005d6c:	080062f8 	.word	0x080062f8
 8005d70:	00f42400 	.word	0x00f42400
 8005d74:	007a1200 	.word	0x007a1200

08005d78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b086      	sub	sp, #24
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005d80:	2300      	movs	r3, #0
 8005d82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005d84:	4b2a      	ldr	r3, [pc, #168]	; (8005e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d003      	beq.n	8005d98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005d90:	f7ff fa64 	bl	800525c <HAL_PWREx_GetVoltageRange>
 8005d94:	6178      	str	r0, [r7, #20]
 8005d96:	e014      	b.n	8005dc2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d98:	4b25      	ldr	r3, [pc, #148]	; (8005e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d9c:	4a24      	ldr	r2, [pc, #144]	; (8005e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005da2:	6593      	str	r3, [r2, #88]	; 0x58
 8005da4:	4b22      	ldr	r3, [pc, #136]	; (8005e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dac:	60fb      	str	r3, [r7, #12]
 8005dae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005db0:	f7ff fa54 	bl	800525c <HAL_PWREx_GetVoltageRange>
 8005db4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005db6:	4b1e      	ldr	r3, [pc, #120]	; (8005e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dba:	4a1d      	ldr	r2, [pc, #116]	; (8005e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005dbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dc0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dc8:	d10b      	bne.n	8005de2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b80      	cmp	r3, #128	; 0x80
 8005dce:	d919      	bls.n	8005e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2ba0      	cmp	r3, #160	; 0xa0
 8005dd4:	d902      	bls.n	8005ddc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005dd6:	2302      	movs	r3, #2
 8005dd8:	613b      	str	r3, [r7, #16]
 8005dda:	e013      	b.n	8005e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005ddc:	2301      	movs	r3, #1
 8005dde:	613b      	str	r3, [r7, #16]
 8005de0:	e010      	b.n	8005e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b80      	cmp	r3, #128	; 0x80
 8005de6:	d902      	bls.n	8005dee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005de8:	2303      	movs	r3, #3
 8005dea:	613b      	str	r3, [r7, #16]
 8005dec:	e00a      	b.n	8005e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b80      	cmp	r3, #128	; 0x80
 8005df2:	d102      	bne.n	8005dfa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005df4:	2302      	movs	r3, #2
 8005df6:	613b      	str	r3, [r7, #16]
 8005df8:	e004      	b.n	8005e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b70      	cmp	r3, #112	; 0x70
 8005dfe:	d101      	bne.n	8005e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005e00:	2301      	movs	r3, #1
 8005e02:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005e04:	4b0b      	ldr	r3, [pc, #44]	; (8005e34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f023 0207 	bic.w	r2, r3, #7
 8005e0c:	4909      	ldr	r1, [pc, #36]	; (8005e34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005e14:	4b07      	ldr	r3, [pc, #28]	; (8005e34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0307 	and.w	r3, r3, #7
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d001      	beq.n	8005e26 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e000      	b.n	8005e28 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3718      	adds	r7, #24
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	40021000 	.word	0x40021000
 8005e34:	40022000 	.word	0x40022000

08005e38 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d06c      	beq.n	8005f24 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d106      	bne.n	8005e64 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f865 	bl	8005f2e <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2202      	movs	r2, #2
 8005e68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	22ca      	movs	r2, #202	; 0xca
 8005e72:	625a      	str	r2, [r3, #36]	; 0x24
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2253      	movs	r2, #83	; 0x53
 8005e7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 f886 	bl	8005f8e <RTC_EnterInitMode>
 8005e82:	4603      	mov	r3, r0
 8005e84:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005e86:	7bfb      	ldrb	r3, [r7, #15]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d14b      	bne.n	8005f24 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	6812      	ldr	r2, [r2, #0]
 8005e96:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005e9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e9e:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6899      	ldr	r1, [r3, #8]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685a      	ldr	r2, [r3, #4]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	431a      	orrs	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	431a      	orrs	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	430a      	orrs	r2, r1
 8005ebc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	68d2      	ldr	r2, [r2, #12]
 8005ec6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	6919      	ldr	r1, [r3, #16]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	041a      	lsls	r2, r3, #16
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 f889 	bl	8005ff4 <RTC_ExitInitMode>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005ee6:	7bfb      	ldrb	r3, [r7, #15]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d11b      	bne.n	8005f24 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f022 0203 	bic.w	r2, r2, #3
 8005efa:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	69da      	ldr	r2, [r3, #28]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	430a      	orrs	r2, r1
 8005f12:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	22ff      	movs	r2, #255	; 0xff
 8005f1a:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <HAL_RTC_MspInit>:
  * @brief  Initialize the RTC MSP.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b083      	sub	sp, #12
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */
}
 8005f36:	bf00      	nop
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b084      	sub	sp, #16
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68da      	ldr	r2, [r3, #12]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f58:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005f5a:	f7fe fd1d 	bl	8004998 <HAL_GetTick>
 8005f5e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005f60:	e009      	b.n	8005f76 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f62:	f7fe fd19 	bl	8004998 <HAL_GetTick>
 8005f66:	4602      	mov	r2, r0
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f70:	d901      	bls.n	8005f76 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e007      	b.n	8005f86 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	f003 0320 	and.w	r3, r3, #32
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d0ee      	beq.n	8005f62 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b084      	sub	sp, #16
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f96:	2300      	movs	r3, #0
 8005f98:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d120      	bne.n	8005fea <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005fb2:	f7fe fcf1 	bl	8004998 <HAL_GetTick>
 8005fb6:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005fb8:	e00d      	b.n	8005fd6 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005fba:	f7fe fced 	bl	8004998 <HAL_GetTick>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fc8:	d905      	bls.n	8005fd6 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2203      	movs	r2, #3
 8005fd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d102      	bne.n	8005fea <RTC_EnterInitMode+0x5c>
 8005fe4:	7bfb      	ldrb	r3, [r7, #15]
 8005fe6:	2b03      	cmp	r3, #3
 8005fe8:	d1e7      	bne.n	8005fba <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8006000:	4b1a      	ldr	r3, [pc, #104]	; (800606c <RTC_ExitInitMode+0x78>)
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	4a19      	ldr	r2, [pc, #100]	; (800606c <RTC_ExitInitMode+0x78>)
 8006006:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800600a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800600c:	4b17      	ldr	r3, [pc, #92]	; (800606c <RTC_ExitInitMode+0x78>)
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f003 0320 	and.w	r3, r3, #32
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10c      	bne.n	8006032 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f7ff ff92 	bl	8005f42 <HAL_RTC_WaitForSynchro>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d01e      	beq.n	8006062 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2203      	movs	r2, #3
 8006028:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	73fb      	strb	r3, [r7, #15]
 8006030:	e017      	b.n	8006062 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006032:	4b0e      	ldr	r3, [pc, #56]	; (800606c <RTC_ExitInitMode+0x78>)
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	4a0d      	ldr	r2, [pc, #52]	; (800606c <RTC_ExitInitMode+0x78>)
 8006038:	f023 0320 	bic.w	r3, r3, #32
 800603c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f7ff ff7f 	bl	8005f42 <HAL_RTC_WaitForSynchro>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d005      	beq.n	8006056 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2203      	movs	r2, #3
 800604e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006056:	4b05      	ldr	r3, [pc, #20]	; (800606c <RTC_ExitInitMode+0x78>)
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	4a04      	ldr	r2, [pc, #16]	; (800606c <RTC_ExitInitMode+0x78>)
 800605c:	f043 0320 	orr.w	r3, r3, #32
 8006060:	6093      	str	r3, [r2, #8]
  }

  return status;
 8006062:	7bfb      	ldrb	r3, [r7, #15]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	40002800 	.word	0x40002800

08006070 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d101      	bne.n	8006086 <HAL_RTCEx_EnableBypassShadow+0x16>
 8006082:	2302      	movs	r3, #2
 8006084:	e024      	b.n	80060d0 <HAL_RTCEx_EnableBypassShadow+0x60>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2202      	movs	r2, #2
 8006092:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	22ca      	movs	r2, #202	; 0xca
 800609c:	625a      	str	r2, [r3, #36]	; 0x24
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2253      	movs	r2, #83	; 0x53
 80060a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	689a      	ldr	r2, [r3, #8]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f042 0220 	orr.w	r2, r2, #32
 80060b4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	22ff      	movs	r2, #255	; 0xff
 80060bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d101      	bne.n	80060ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e095      	b.n	800621a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d108      	bne.n	8006108 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060fe:	d009      	beq.n	8006114 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	61da      	str	r2, [r3, #28]
 8006106:	e005      	b.n	8006114 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b00      	cmp	r3, #0
 8006124:	d106      	bne.n	8006134 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f7fb fa60 	bl	80015f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2202      	movs	r2, #2
 8006138:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800614a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006154:	d902      	bls.n	800615c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006156:	2300      	movs	r3, #0
 8006158:	60fb      	str	r3, [r7, #12]
 800615a:	e002      	b.n	8006162 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800615c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006160:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800616a:	d007      	beq.n	800617c <HAL_SPI_Init+0xa0>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006174:	d002      	beq.n	800617c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800618c:	431a      	orrs	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	f003 0302 	and.w	r3, r3, #2
 8006196:	431a      	orrs	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	f003 0301 	and.w	r3, r3, #1
 80061a0:	431a      	orrs	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061aa:	431a      	orrs	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	69db      	ldr	r3, [r3, #28]
 80061b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061b4:	431a      	orrs	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061be:	ea42 0103 	orr.w	r1, r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	430a      	orrs	r2, r1
 80061d0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	0c1b      	lsrs	r3, r3, #16
 80061d8:	f003 0204 	and.w	r2, r3, #4
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e0:	f003 0310 	and.w	r3, r3, #16
 80061e4:	431a      	orrs	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ea:	f003 0308 	and.w	r3, r3, #8
 80061ee:	431a      	orrs	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80061f8:	ea42 0103 	orr.w	r1, r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3710      	adds	r7, #16
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
	...

08006224 <__libc_init_array>:
 8006224:	b570      	push	{r4, r5, r6, lr}
 8006226:	4d0d      	ldr	r5, [pc, #52]	; (800625c <__libc_init_array+0x38>)
 8006228:	4c0d      	ldr	r4, [pc, #52]	; (8006260 <__libc_init_array+0x3c>)
 800622a:	1b64      	subs	r4, r4, r5
 800622c:	10a4      	asrs	r4, r4, #2
 800622e:	2600      	movs	r6, #0
 8006230:	42a6      	cmp	r6, r4
 8006232:	d109      	bne.n	8006248 <__libc_init_array+0x24>
 8006234:	4d0b      	ldr	r5, [pc, #44]	; (8006264 <__libc_init_array+0x40>)
 8006236:	4c0c      	ldr	r4, [pc, #48]	; (8006268 <__libc_init_array+0x44>)
 8006238:	f000 f82e 	bl	8006298 <_init>
 800623c:	1b64      	subs	r4, r4, r5
 800623e:	10a4      	asrs	r4, r4, #2
 8006240:	2600      	movs	r6, #0
 8006242:	42a6      	cmp	r6, r4
 8006244:	d105      	bne.n	8006252 <__libc_init_array+0x2e>
 8006246:	bd70      	pop	{r4, r5, r6, pc}
 8006248:	f855 3b04 	ldr.w	r3, [r5], #4
 800624c:	4798      	blx	r3
 800624e:	3601      	adds	r6, #1
 8006250:	e7ee      	b.n	8006230 <__libc_init_array+0xc>
 8006252:	f855 3b04 	ldr.w	r3, [r5], #4
 8006256:	4798      	blx	r3
 8006258:	3601      	adds	r6, #1
 800625a:	e7f2      	b.n	8006242 <__libc_init_array+0x1e>
 800625c:	08006328 	.word	0x08006328
 8006260:	08006328 	.word	0x08006328
 8006264:	08006328 	.word	0x08006328
 8006268:	0800632c 	.word	0x0800632c

0800626c <memcpy>:
 800626c:	440a      	add	r2, r1
 800626e:	4291      	cmp	r1, r2
 8006270:	f100 33ff 	add.w	r3, r0, #4294967295
 8006274:	d100      	bne.n	8006278 <memcpy+0xc>
 8006276:	4770      	bx	lr
 8006278:	b510      	push	{r4, lr}
 800627a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800627e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006282:	4291      	cmp	r1, r2
 8006284:	d1f9      	bne.n	800627a <memcpy+0xe>
 8006286:	bd10      	pop	{r4, pc}

08006288 <memset>:
 8006288:	4402      	add	r2, r0
 800628a:	4603      	mov	r3, r0
 800628c:	4293      	cmp	r3, r2
 800628e:	d100      	bne.n	8006292 <memset+0xa>
 8006290:	4770      	bx	lr
 8006292:	f803 1b01 	strb.w	r1, [r3], #1
 8006296:	e7f9      	b.n	800628c <memset+0x4>

08006298 <_init>:
 8006298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629a:	bf00      	nop
 800629c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800629e:	bc08      	pop	{r3}
 80062a0:	469e      	mov	lr, r3
 80062a2:	4770      	bx	lr

080062a4 <_fini>:
 80062a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a6:	bf00      	nop
 80062a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062aa:	bc08      	pop	{r3}
 80062ac:	469e      	mov	lr, r3
 80062ae:	4770      	bx	lr

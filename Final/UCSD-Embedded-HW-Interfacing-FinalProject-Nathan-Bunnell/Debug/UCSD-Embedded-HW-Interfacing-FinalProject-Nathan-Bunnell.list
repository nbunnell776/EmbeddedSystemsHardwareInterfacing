
UCSD-Embedded-HW-Interfacing-FinalProject-Nathan-Bunnell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000650c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  0800669c  0800669c  0001669c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006900  08006900  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006900  08006900  00016900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006908  08006908  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006908  08006908  00016908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800690c  0800690c  0001690c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000788  20000070  08006980  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007f8  08006980  000207f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019103  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e2a  00000000  00000000  000391a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001588  00000000  00000000  0003bfd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001460  00000000  00000000  0003d558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000280c6  00000000  00000000  0003e9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017083  00000000  00000000  00066a7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3ae4  00000000  00000000  0007db01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001715e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006014  00000000  00000000  00171638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006684 	.word	0x08006684

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006684 	.word	0x08006684

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <do_toggle_LED>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void do_toggle_LED(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 5; i++)
 800057e:	2300      	movs	r3, #0
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	e00a      	b.n	800059a <do_toggle_LED+0x22>
	{
		  HAL_GPIO_TogglePin(LED3_WIFI__LED4_BLE_GPIO_Port, LED3_WIFI__LED4_BLE_Pin);
 8000584:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000588:	4808      	ldr	r0, [pc, #32]	; (80005ac <do_toggle_LED+0x34>)
 800058a:	f002 f8e9 	bl	8002760 <HAL_GPIO_TogglePin>
		  HAL_Delay(250);
 800058e:	20fa      	movs	r0, #250	; 0xfa
 8000590:	f001 fce2 	bl	8001f58 <HAL_Delay>
	for (int i = 0; i < 5; i++)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	3301      	adds	r3, #1
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2b04      	cmp	r3, #4
 800059e:	ddf1      	ble.n	8000584 <do_toggle_LED+0xc>
	}
}
 80005a0:	bf00      	nop
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	48000800 	.word	0x48000800

080005b0 <do_get_time>:

static void do_get_time(void)
{
 80005b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005b2:	b0a5      	sub	sp, #148	; 0x94
 80005b4:	af06      	add	r7, sp, #24
	// Large char buffer for strings sent over the console
	char buffer[100] = {0};
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]
 80005ba:	f107 0318 	add.w	r3, r7, #24
 80005be:	2260      	movs	r2, #96	; 0x60
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f005 fc14 	bl	8005df0 <memset>

	// Register Seconds, address 0x00
	uint8_t Seconds_Address = 0x00;
 80005c8:	2300      	movs	r3, #0
 80005ca:	74fb      	strb	r3, [r7, #19]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Seconds_Address, sizeof(Seconds_Address), 1000);
 80005cc:	f107 0213 	add.w	r2, r7, #19
 80005d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	2301      	movs	r3, #1
 80005d8:	21d1      	movs	r1, #209	; 0xd1
 80005da:	485b      	ldr	r0, [pc, #364]	; (8000748 <do_get_time+0x198>)
 80005dc:	f002 f98c 	bl	80028f8 <HAL_I2C_Master_Transmit>
	uint8_t Seconds_Value;
	HAL_I2C_Master_Receive(&hi2c1, DS3231_READ_ADDRESS, (uint8_t *)&Seconds_Value, sizeof(Seconds_Value), 1000);
 80005e0:	f107 0212 	add.w	r2, r7, #18
 80005e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2301      	movs	r3, #1
 80005ec:	21d1      	movs	r1, #209	; 0xd1
 80005ee:	4856      	ldr	r0, [pc, #344]	; (8000748 <do_get_time+0x198>)
 80005f0:	f002 fa76 	bl	8002ae0 <HAL_I2C_Master_Receive>

	// Register Minutes, address 0x01
	uint8_t Minutes_Address = 0x01;
 80005f4:	2301      	movs	r3, #1
 80005f6:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Minutes_Address, sizeof(Minutes_Address), 1000);
 80005f8:	f107 0211 	add.w	r2, r7, #17
 80005fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2301      	movs	r3, #1
 8000604:	21d1      	movs	r1, #209	; 0xd1
 8000606:	4850      	ldr	r0, [pc, #320]	; (8000748 <do_get_time+0x198>)
 8000608:	f002 f976 	bl	80028f8 <HAL_I2C_Master_Transmit>
	uint8_t Minutes_Value;
	HAL_I2C_Master_Receive(&hi2c1, DS3231_READ_ADDRESS, (uint8_t *)&Minutes_Value, sizeof(Minutes_Value), 1000);
 800060c:	f107 0210 	add.w	r2, r7, #16
 8000610:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	2301      	movs	r3, #1
 8000618:	21d1      	movs	r1, #209	; 0xd1
 800061a:	484b      	ldr	r0, [pc, #300]	; (8000748 <do_get_time+0x198>)
 800061c:	f002 fa60 	bl	8002ae0 <HAL_I2C_Master_Receive>

	// Register Hour, address 0x02
	uint8_t Hour_Address = 0x02;
 8000620:	2302      	movs	r3, #2
 8000622:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Hour_Address, sizeof(Hour_Address), 1000);
 8000624:	f107 020f 	add.w	r2, r7, #15
 8000628:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2301      	movs	r3, #1
 8000630:	21d1      	movs	r1, #209	; 0xd1
 8000632:	4845      	ldr	r0, [pc, #276]	; (8000748 <do_get_time+0x198>)
 8000634:	f002 f960 	bl	80028f8 <HAL_I2C_Master_Transmit>
	uint8_t Hour_Value;
	HAL_I2C_Master_Receive(&hi2c1, DS3231_READ_ADDRESS, (uint8_t *)&Hour_Value, sizeof(Hour_Value), 1000);
 8000638:	f107 020e 	add.w	r2, r7, #14
 800063c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2301      	movs	r3, #1
 8000644:	21d1      	movs	r1, #209	; 0xd1
 8000646:	4840      	ldr	r0, [pc, #256]	; (8000748 <do_get_time+0x198>)
 8000648:	f002 fa4a 	bl	8002ae0 <HAL_I2C_Master_Receive>

	// Register Day, address 0x03
	uint8_t Day_Address = 0x03;
 800064c:	2303      	movs	r3, #3
 800064e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Day_Address, sizeof(Day_Address), 1000);
 8000650:	f107 020d 	add.w	r2, r7, #13
 8000654:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	2301      	movs	r3, #1
 800065c:	21d1      	movs	r1, #209	; 0xd1
 800065e:	483a      	ldr	r0, [pc, #232]	; (8000748 <do_get_time+0x198>)
 8000660:	f002 f94a 	bl	80028f8 <HAL_I2C_Master_Transmit>
	uint8_t Day_Value;
	HAL_I2C_Master_Receive(&hi2c1, DS3231_READ_ADDRESS, (uint8_t *)&Day_Value, sizeof(Day_Value), 1000);
 8000664:	f107 020c 	add.w	r2, r7, #12
 8000668:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2301      	movs	r3, #1
 8000670:	21d1      	movs	r1, #209	; 0xd1
 8000672:	4835      	ldr	r0, [pc, #212]	; (8000748 <do_get_time+0x198>)
 8000674:	f002 fa34 	bl	8002ae0 <HAL_I2C_Master_Receive>

	// Register Date, address 0x04
	uint8_t Date_Address = 0x04;
 8000678:	2304      	movs	r3, #4
 800067a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Date_Address, sizeof(Date_Address), 1000);
 800067c:	f107 020b 	add.w	r2, r7, #11
 8000680:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000684:	9300      	str	r3, [sp, #0]
 8000686:	2301      	movs	r3, #1
 8000688:	21d1      	movs	r1, #209	; 0xd1
 800068a:	482f      	ldr	r0, [pc, #188]	; (8000748 <do_get_time+0x198>)
 800068c:	f002 f934 	bl	80028f8 <HAL_I2C_Master_Transmit>
	uint8_t Date_Value;
	HAL_I2C_Master_Receive(&hi2c1, DS3231_READ_ADDRESS, (uint8_t *)&Date_Value, sizeof(Date_Value), 1000);
 8000690:	f107 020a 	add.w	r2, r7, #10
 8000694:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2301      	movs	r3, #1
 800069c:	21d1      	movs	r1, #209	; 0xd1
 800069e:	482a      	ldr	r0, [pc, #168]	; (8000748 <do_get_time+0x198>)
 80006a0:	f002 fa1e 	bl	8002ae0 <HAL_I2C_Master_Receive>

	// Register Month, address 0x05
	uint8_t Month_Address = 0x05;
 80006a4:	2305      	movs	r3, #5
 80006a6:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Month_Address, sizeof(Month_Address), 1000);
 80006a8:	f107 0209 	add.w	r2, r7, #9
 80006ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b0:	9300      	str	r3, [sp, #0]
 80006b2:	2301      	movs	r3, #1
 80006b4:	21d1      	movs	r1, #209	; 0xd1
 80006b6:	4824      	ldr	r0, [pc, #144]	; (8000748 <do_get_time+0x198>)
 80006b8:	f002 f91e 	bl	80028f8 <HAL_I2C_Master_Transmit>
	uint8_t Month_Value;
	HAL_I2C_Master_Receive(&hi2c1, DS3231_READ_ADDRESS, (uint8_t *)&Month_Value, sizeof(Month_Value), 1000);
 80006bc:	f107 0208 	add.w	r2, r7, #8
 80006c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	2301      	movs	r3, #1
 80006c8:	21d1      	movs	r1, #209	; 0xd1
 80006ca:	481f      	ldr	r0, [pc, #124]	; (8000748 <do_get_time+0x198>)
 80006cc:	f002 fa08 	bl	8002ae0 <HAL_I2C_Master_Receive>

	// Register Year, address 0x06
	uint8_t Year_Address = 0x06;
 80006d0:	2306      	movs	r3, #6
 80006d2:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Year_Address, sizeof(Year_Address), 1000);
 80006d4:	1dfa      	adds	r2, r7, #7
 80006d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	2301      	movs	r3, #1
 80006de:	21d1      	movs	r1, #209	; 0xd1
 80006e0:	4819      	ldr	r0, [pc, #100]	; (8000748 <do_get_time+0x198>)
 80006e2:	f002 f909 	bl	80028f8 <HAL_I2C_Master_Transmit>
	uint8_t Year_Value;
	HAL_I2C_Master_Receive(&hi2c1, DS3231_READ_ADDRESS, (uint8_t *)&Year_Value, sizeof(Year_Value), 1000);
 80006e6:	1dba      	adds	r2, r7, #6
 80006e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	2301      	movs	r3, #1
 80006f0:	21d1      	movs	r1, #209	; 0xd1
 80006f2:	4815      	ldr	r0, [pc, #84]	; (8000748 <do_get_time+0x198>)
 80006f4:	f002 f9f4 	bl	8002ae0 <HAL_I2C_Master_Receive>

	// Print results to console
	snprintf(buffer, sizeof(buffer), "\tCurrent time is %02x:%02x:%02x on %02x-%02x-%02x\n\n", \
 80006f8:	7bbb      	ldrb	r3, [r7, #14]
 80006fa:	461e      	mov	r6, r3
 80006fc:	7c3b      	ldrb	r3, [r7, #16]
 80006fe:	7cba      	ldrb	r2, [r7, #18]
 8000700:	7a39      	ldrb	r1, [r7, #8]
 8000702:	7ab8      	ldrb	r0, [r7, #10]
 8000704:	4604      	mov	r4, r0
 8000706:	79b8      	ldrb	r0, [r7, #6]
 8000708:	4605      	mov	r5, r0
 800070a:	f107 0014 	add.w	r0, r7, #20
 800070e:	9504      	str	r5, [sp, #16]
 8000710:	9403      	str	r4, [sp, #12]
 8000712:	9102      	str	r1, [sp, #8]
 8000714:	9201      	str	r2, [sp, #4]
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	4633      	mov	r3, r6
 800071a:	4a0c      	ldr	r2, [pc, #48]	; (800074c <do_get_time+0x19c>)
 800071c:	2164      	movs	r1, #100	; 0x64
 800071e:	f005 fb6f 	bl	8005e00 <sniprintf>
			Hour_Value, Minutes_Value, Seconds_Value, Month_Value, Date_Value, Year_Value);
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff fd52 	bl	80001d0 <strlen>
 800072c:	4603      	mov	r3, r0
 800072e:	b29a      	uxth	r2, r3
 8000730:	f107 0114 	add.w	r1, r7, #20
 8000734:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000738:	4805      	ldr	r0, [pc, #20]	; (8000750 <do_get_time+0x1a0>)
 800073a:	f004 fb70 	bl	8004e1e <HAL_UART_Transmit>



}
 800073e:	bf00      	nop
 8000740:	377c      	adds	r7, #124	; 0x7c
 8000742:	46bd      	mov	sp, r7
 8000744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000746:	bf00      	nop
 8000748:	20000180 	.word	0x20000180
 800074c:	0800669c 	.word	0x0800669c
 8000750:	2000068c 	.word	0x2000068c

08000754 <do_set_time>:

static void do_set_time(void)
{
 8000754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000756:	b0a5      	sub	sp, #148	; 0x94
 8000758:	af06      	add	r7, sp, #24
	// Set time to 0's

	// Large char buffer for strings sent over the console
	char buffer[100] = {0};
 800075a:	2300      	movs	r3, #0
 800075c:	617b      	str	r3, [r7, #20]
 800075e:	f107 0318 	add.w	r3, r7, #24
 8000762:	2260      	movs	r2, #96	; 0x60
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f005 fb42 	bl	8005df0 <memset>

	// Register Seconds, address 0x00
	uint8_t Seconds_Address = 0x00;
 800076c:	2300      	movs	r3, #0
 800076e:	74fb      	strb	r3, [r7, #19]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Seconds_Address, sizeof(Seconds_Address), 1000);
 8000770:	f107 0213 	add.w	r2, r7, #19
 8000774:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	2301      	movs	r3, #1
 800077c:	21d1      	movs	r1, #209	; 0xd1
 800077e:	486d      	ldr	r0, [pc, #436]	; (8000934 <do_set_time+0x1e0>)
 8000780:	f002 f8ba 	bl	80028f8 <HAL_I2C_Master_Transmit>
	uint8_t Seconds_Value = 0x0;
 8000784:	2300      	movs	r3, #0
 8000786:	74bb      	strb	r3, [r7, #18]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Seconds_Value, sizeof(Seconds_Value), 1000);
 8000788:	f107 0212 	add.w	r2, r7, #18
 800078c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000790:	9300      	str	r3, [sp, #0]
 8000792:	2301      	movs	r3, #1
 8000794:	21d1      	movs	r1, #209	; 0xd1
 8000796:	4867      	ldr	r0, [pc, #412]	; (8000934 <do_set_time+0x1e0>)
 8000798:	f002 f8ae 	bl	80028f8 <HAL_I2C_Master_Transmit>

	// Register Minutes, address 0x01
	uint8_t Minutes_Address = 0x01;
 800079c:	2301      	movs	r3, #1
 800079e:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Minutes_Address, sizeof(Minutes_Address), 1000);
 80007a0:	f107 0211 	add.w	r2, r7, #17
 80007a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	2301      	movs	r3, #1
 80007ac:	21d1      	movs	r1, #209	; 0xd1
 80007ae:	4861      	ldr	r0, [pc, #388]	; (8000934 <do_set_time+0x1e0>)
 80007b0:	f002 f8a2 	bl	80028f8 <HAL_I2C_Master_Transmit>
	uint8_t Minutes_Value = 0x0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	743b      	strb	r3, [r7, #16]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Minutes_Value, sizeof(Minutes_Value), 1000);
 80007b8:	f107 0210 	add.w	r2, r7, #16
 80007bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c0:	9300      	str	r3, [sp, #0]
 80007c2:	2301      	movs	r3, #1
 80007c4:	21d1      	movs	r1, #209	; 0xd1
 80007c6:	485b      	ldr	r0, [pc, #364]	; (8000934 <do_set_time+0x1e0>)
 80007c8:	f002 f896 	bl	80028f8 <HAL_I2C_Master_Transmit>

	// Register Hour, address 0x02
	uint8_t Hour_Address = 0x02;
 80007cc:	2302      	movs	r3, #2
 80007ce:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Hour_Address, sizeof(Hour_Address), 1000);
 80007d0:	f107 020f 	add.w	r2, r7, #15
 80007d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d8:	9300      	str	r3, [sp, #0]
 80007da:	2301      	movs	r3, #1
 80007dc:	21d1      	movs	r1, #209	; 0xd1
 80007de:	4855      	ldr	r0, [pc, #340]	; (8000934 <do_set_time+0x1e0>)
 80007e0:	f002 f88a 	bl	80028f8 <HAL_I2C_Master_Transmit>
	uint8_t Hour_Value = 0x0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Hour_Value, sizeof(Hour_Value), 1000);
 80007e8:	f107 020e 	add.w	r2, r7, #14
 80007ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f0:	9300      	str	r3, [sp, #0]
 80007f2:	2301      	movs	r3, #1
 80007f4:	21d1      	movs	r1, #209	; 0xd1
 80007f6:	484f      	ldr	r0, [pc, #316]	; (8000934 <do_set_time+0x1e0>)
 80007f8:	f002 f87e 	bl	80028f8 <HAL_I2C_Master_Transmit>

	// Register Day, address 0x03
	uint8_t Day_Address = 0x03;
 80007fc:	2303      	movs	r3, #3
 80007fe:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Day_Address, sizeof(Day_Address), 1000);
 8000800:	f107 020d 	add.w	r2, r7, #13
 8000804:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	2301      	movs	r3, #1
 800080c:	21d1      	movs	r1, #209	; 0xd1
 800080e:	4849      	ldr	r0, [pc, #292]	; (8000934 <do_set_time+0x1e0>)
 8000810:	f002 f872 	bl	80028f8 <HAL_I2C_Master_Transmit>
	uint8_t Day_Value = 0x01;
 8000814:	2301      	movs	r3, #1
 8000816:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Day_Value, sizeof(Day_Value), 1000);
 8000818:	f107 020c 	add.w	r2, r7, #12
 800081c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	2301      	movs	r3, #1
 8000824:	21d1      	movs	r1, #209	; 0xd1
 8000826:	4843      	ldr	r0, [pc, #268]	; (8000934 <do_set_time+0x1e0>)
 8000828:	f002 f866 	bl	80028f8 <HAL_I2C_Master_Transmit>

	// Register Date, address 0x04
	uint8_t Date_Address = 0x04;
 800082c:	2304      	movs	r3, #4
 800082e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Date_Address, sizeof(Date_Address), 1000);
 8000830:	f107 020b 	add.w	r2, r7, #11
 8000834:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	2301      	movs	r3, #1
 800083c:	21d1      	movs	r1, #209	; 0xd1
 800083e:	483d      	ldr	r0, [pc, #244]	; (8000934 <do_set_time+0x1e0>)
 8000840:	f002 f85a 	bl	80028f8 <HAL_I2C_Master_Transmit>
	uint8_t Date_Value = 0x01;
 8000844:	2301      	movs	r3, #1
 8000846:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Date_Value, sizeof(Date_Value), 1000);
 8000848:	f107 020a 	add.w	r2, r7, #10
 800084c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	2301      	movs	r3, #1
 8000854:	21d1      	movs	r1, #209	; 0xd1
 8000856:	4837      	ldr	r0, [pc, #220]	; (8000934 <do_set_time+0x1e0>)
 8000858:	f002 f84e 	bl	80028f8 <HAL_I2C_Master_Transmit>

	// Register Month, address 0x05
	uint8_t Month_Address = 0x05;
 800085c:	2305      	movs	r3, #5
 800085e:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Month_Address, sizeof(Month_Address), 1000);
 8000860:	f107 0209 	add.w	r2, r7, #9
 8000864:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	2301      	movs	r3, #1
 800086c:	21d1      	movs	r1, #209	; 0xd1
 800086e:	4831      	ldr	r0, [pc, #196]	; (8000934 <do_set_time+0x1e0>)
 8000870:	f002 f842 	bl	80028f8 <HAL_I2C_Master_Transmit>
	uint8_t Month_Value = 0x01;
 8000874:	2301      	movs	r3, #1
 8000876:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Month_Value, sizeof(Month_Value), 1000);
 8000878:	f107 0208 	add.w	r2, r7, #8
 800087c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000880:	9300      	str	r3, [sp, #0]
 8000882:	2301      	movs	r3, #1
 8000884:	21d1      	movs	r1, #209	; 0xd1
 8000886:	482b      	ldr	r0, [pc, #172]	; (8000934 <do_set_time+0x1e0>)
 8000888:	f002 f836 	bl	80028f8 <HAL_I2C_Master_Transmit>

	// Register Year, address 0x06
	uint8_t Year_Address = 0x06;
 800088c:	2306      	movs	r3, #6
 800088e:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Year_Address, sizeof(Year_Address), 1000);
 8000890:	1dfa      	adds	r2, r7, #7
 8000892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000896:	9300      	str	r3, [sp, #0]
 8000898:	2301      	movs	r3, #1
 800089a:	21d1      	movs	r1, #209	; 0xd1
 800089c:	4825      	ldr	r0, [pc, #148]	; (8000934 <do_set_time+0x1e0>)
 800089e:	f002 f82b 	bl	80028f8 <HAL_I2C_Master_Transmit>
	uint8_t Year_Value = 0x01;
 80008a2:	2301      	movs	r3, #1
 80008a4:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Year_Value, sizeof(Year_Value), 1000);
 80008a6:	1dba      	adds	r2, r7, #6
 80008a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ac:	9300      	str	r3, [sp, #0]
 80008ae:	2301      	movs	r3, #1
 80008b0:	21d1      	movs	r1, #209	; 0xd1
 80008b2:	4820      	ldr	r0, [pc, #128]	; (8000934 <do_set_time+0x1e0>)
 80008b4:	f002 f820 	bl	80028f8 <HAL_I2C_Master_Transmit>

	// Register Temp_LSB, address 0x12
	uint8_t Temp_LSB_Address = 0x12;
 80008b8:	2312      	movs	r3, #18
 80008ba:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Temp_LSB_Address, sizeof(Temp_LSB_Address), 1000);
 80008bc:	1d7a      	adds	r2, r7, #5
 80008be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c2:	9300      	str	r3, [sp, #0]
 80008c4:	2301      	movs	r3, #1
 80008c6:	21d1      	movs	r1, #209	; 0xd1
 80008c8:	481a      	ldr	r0, [pc, #104]	; (8000934 <do_set_time+0x1e0>)
 80008ca:	f002 f815 	bl	80028f8 <HAL_I2C_Master_Transmit>
	uint8_t Temp_LSB_Value = 0x00;
 80008ce:	2300      	movs	r3, #0
 80008d0:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Temp_LSB_Value, sizeof(Temp_LSB_Value), 1000);
 80008d2:	1d3a      	adds	r2, r7, #4
 80008d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	2301      	movs	r3, #1
 80008dc:	21d1      	movs	r1, #209	; 0xd1
 80008de:	4815      	ldr	r0, [pc, #84]	; (8000934 <do_set_time+0x1e0>)
 80008e0:	f002 f80a 	bl	80028f8 <HAL_I2C_Master_Transmit>

	snprintf(buffer, sizeof(buffer), "\tWritten time is %02x:%02x:%02x on %02x-%02x-%02x\n", \
 80008e4:	7bbb      	ldrb	r3, [r7, #14]
 80008e6:	461e      	mov	r6, r3
 80008e8:	7c3b      	ldrb	r3, [r7, #16]
 80008ea:	7cba      	ldrb	r2, [r7, #18]
 80008ec:	7a39      	ldrb	r1, [r7, #8]
 80008ee:	7ab8      	ldrb	r0, [r7, #10]
 80008f0:	4604      	mov	r4, r0
 80008f2:	79b8      	ldrb	r0, [r7, #6]
 80008f4:	4605      	mov	r5, r0
 80008f6:	f107 0014 	add.w	r0, r7, #20
 80008fa:	9504      	str	r5, [sp, #16]
 80008fc:	9403      	str	r4, [sp, #12]
 80008fe:	9102      	str	r1, [sp, #8]
 8000900:	9201      	str	r2, [sp, #4]
 8000902:	9300      	str	r3, [sp, #0]
 8000904:	4633      	mov	r3, r6
 8000906:	4a0c      	ldr	r2, [pc, #48]	; (8000938 <do_set_time+0x1e4>)
 8000908:	2164      	movs	r1, #100	; 0x64
 800090a:	f005 fa79 	bl	8005e00 <sniprintf>
				Hour_Value, Minutes_Value, Seconds_Value, Month_Value, Date_Value, Year_Value);

	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff fc5c 	bl	80001d0 <strlen>
 8000918:	4603      	mov	r3, r0
 800091a:	b29a      	uxth	r2, r3
 800091c:	f107 0114 	add.w	r1, r7, #20
 8000920:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000924:	4805      	ldr	r0, [pc, #20]	; (800093c <do_set_time+0x1e8>)
 8000926:	f004 fa7a 	bl	8004e1e <HAL_UART_Transmit>
}
 800092a:	bf00      	nop
 800092c:	377c      	adds	r7, #124	; 0x7c
 800092e:	46bd      	mov	sp, r7
 8000930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000932:	bf00      	nop
 8000934:	20000180 	.word	0x20000180
 8000938:	080066d0 	.word	0x080066d0
 800093c:	2000068c 	.word	0x2000068c

08000940 <HTS221_pwr_en>:

static void HTS221_pwr_en(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af02      	add	r7, sp, #8
	// Configure control register 1 (CTRL_REG1, 0x20) bit 7 to enable one-shot
    uint8_t ctrlReg1 = 0x20;
 8000946:	2320      	movs	r3, #32
 8000948:	71fb      	strb	r3, [r7, #7]
    uint8_t CTRL_REG2_Value[] = {ctrlReg1, (1 << 7)};
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	713b      	strb	r3, [r7, #4]
 800094e:	2380      	movs	r3, #128	; 0x80
 8000950:	717b      	strb	r3, [r7, #5]

    // Send the target register to the device
    HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, CTRL_REG2_Value, sizeof(CTRL_REG2_Value), 1000);
 8000952:	1d3a      	adds	r2, r7, #4
 8000954:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	2302      	movs	r3, #2
 800095c:	21be      	movs	r1, #190	; 0xbe
 800095e:	4803      	ldr	r0, [pc, #12]	; (800096c <HTS221_pwr_en+0x2c>)
 8000960:	f001 ffca 	bl	80028f8 <HAL_I2C_Master_Transmit>

}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	200005d4 	.word	0x200005d4

08000970 <HTS221_get_cal_data>:

static void HTS221_get_cal_data(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af02      	add	r7, sp, #8

    /*****************************************************************************************************************/
    // Humidity calibration values

    // Register H0_rh_x2, address 0x30. Divide register value by 2 for calibration value
    uint8_t H0_rH_Address = 0x30;
 8000976:	2330      	movs	r3, #48	; 0x30
 8000978:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &H0_rH_Address, sizeof(H0_rH_Address), 1000);
 800097a:	f107 020f 	add.w	r2, r7, #15
 800097e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	2301      	movs	r3, #1
 8000986:	21be      	movs	r1, #190	; 0xbe
 8000988:	487f      	ldr	r0, [pc, #508]	; (8000b88 <HTS221_get_cal_data+0x218>)
 800098a:	f001 ffb5 	bl	80028f8 <HAL_I2C_Master_Transmit>
	H0_rH_Value = 0xff; // Junk default value
 800098e:	4b7f      	ldr	r3, [pc, #508]	; (8000b8c <HTS221_get_cal_data+0x21c>)
 8000990:	22ff      	movs	r2, #255	; 0xff
 8000992:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&H0_rH_Value, sizeof(H0_rH_Value), 1000);
 8000994:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000998:	9300      	str	r3, [sp, #0]
 800099a:	2301      	movs	r3, #1
 800099c:	4a7b      	ldr	r2, [pc, #492]	; (8000b8c <HTS221_get_cal_data+0x21c>)
 800099e:	21bf      	movs	r1, #191	; 0xbf
 80009a0:	4879      	ldr	r0, [pc, #484]	; (8000b88 <HTS221_get_cal_data+0x218>)
 80009a2:	f002 f89d 	bl	8002ae0 <HAL_I2C_Master_Receive>
	H0_rH_Value = H0_rH_Value / 2;
 80009a6:	4b79      	ldr	r3, [pc, #484]	; (8000b8c <HTS221_get_cal_data+0x21c>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	085b      	lsrs	r3, r3, #1
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	4b77      	ldr	r3, [pc, #476]	; (8000b8c <HTS221_get_cal_data+0x21c>)
 80009b0:	701a      	strb	r2, [r3, #0]

	// Register H1_rh_x2, address 0x31. Divide register value by 2 for calibration value
	uint8_t H1_rH_Address = 0x31;
 80009b2:	2331      	movs	r3, #49	; 0x31
 80009b4:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &H1_rH_Address, sizeof(H1_rH_Address), 1000);
 80009b6:	f107 020e 	add.w	r2, r7, #14
 80009ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009be:	9300      	str	r3, [sp, #0]
 80009c0:	2301      	movs	r3, #1
 80009c2:	21be      	movs	r1, #190	; 0xbe
 80009c4:	4870      	ldr	r0, [pc, #448]	; (8000b88 <HTS221_get_cal_data+0x218>)
 80009c6:	f001 ff97 	bl	80028f8 <HAL_I2C_Master_Transmit>
	H1_rH_Value = 0xff; // Junk default value
 80009ca:	4b71      	ldr	r3, [pc, #452]	; (8000b90 <HTS221_get_cal_data+0x220>)
 80009cc:	22ff      	movs	r2, #255	; 0xff
 80009ce:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&H1_rH_Value, sizeof(H1_rH_Value), 1000);
 80009d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d4:	9300      	str	r3, [sp, #0]
 80009d6:	2301      	movs	r3, #1
 80009d8:	4a6d      	ldr	r2, [pc, #436]	; (8000b90 <HTS221_get_cal_data+0x220>)
 80009da:	21bf      	movs	r1, #191	; 0xbf
 80009dc:	486a      	ldr	r0, [pc, #424]	; (8000b88 <HTS221_get_cal_data+0x218>)
 80009de:	f002 f87f 	bl	8002ae0 <HAL_I2C_Master_Receive>
	H1_rH_Value = H1_rH_Value / 2;
 80009e2:	4b6b      	ldr	r3, [pc, #428]	; (8000b90 <HTS221_get_cal_data+0x220>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	085b      	lsrs	r3, r3, #1
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	4b69      	ldr	r3, [pc, #420]	; (8000b90 <HTS221_get_cal_data+0x220>)
 80009ec:	701a      	strb	r2, [r3, #0]

	// Register H0_T0_OUT, addresses 0x36 and 0x37
	uint8_t H0_T0_OUT_Address = 0x36 | 0x80;
 80009ee:	23b6      	movs	r3, #182	; 0xb6
 80009f0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &H0_T0_OUT_Address, sizeof(H0_T0_OUT_Address), 1000);
 80009f2:	f107 020d 	add.w	r2, r7, #13
 80009f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	2301      	movs	r3, #1
 80009fe:	21be      	movs	r1, #190	; 0xbe
 8000a00:	4861      	ldr	r0, [pc, #388]	; (8000b88 <HTS221_get_cal_data+0x218>)
 8000a02:	f001 ff79 	bl	80028f8 <HAL_I2C_Master_Transmit>
	H0_T0_OUT_Value = 0xffff; // Junk default value
 8000a06:	4b63      	ldr	r3, [pc, #396]	; (8000b94 <HTS221_get_cal_data+0x224>)
 8000a08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a0c:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&H0_T0_OUT_Value, sizeof(H0_T0_OUT_Value), 1000);
 8000a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a12:	9300      	str	r3, [sp, #0]
 8000a14:	2302      	movs	r3, #2
 8000a16:	4a5f      	ldr	r2, [pc, #380]	; (8000b94 <HTS221_get_cal_data+0x224>)
 8000a18:	21bf      	movs	r1, #191	; 0xbf
 8000a1a:	485b      	ldr	r0, [pc, #364]	; (8000b88 <HTS221_get_cal_data+0x218>)
 8000a1c:	f002 f860 	bl	8002ae0 <HAL_I2C_Master_Receive>

	// Register H1_T0_OUT, addresses 0x3A and 0x3B
	uint8_t H1_T0_OUT_Address = 0x3A | 0x80;
 8000a20:	23ba      	movs	r3, #186	; 0xba
 8000a22:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &H1_T0_OUT_Address, sizeof(H1_T0_OUT_Address), 1000);
 8000a24:	f107 020c 	add.w	r2, r7, #12
 8000a28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	2301      	movs	r3, #1
 8000a30:	21be      	movs	r1, #190	; 0xbe
 8000a32:	4855      	ldr	r0, [pc, #340]	; (8000b88 <HTS221_get_cal_data+0x218>)
 8000a34:	f001 ff60 	bl	80028f8 <HAL_I2C_Master_Transmit>
	H1_T0_OUT_Value = 0xffff; // Junk default value
 8000a38:	4b57      	ldr	r3, [pc, #348]	; (8000b98 <HTS221_get_cal_data+0x228>)
 8000a3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a3e:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&H1_T0_OUT_Value, sizeof(H1_T0_OUT_Value), 1000);
 8000a40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	2302      	movs	r3, #2
 8000a48:	4a53      	ldr	r2, [pc, #332]	; (8000b98 <HTS221_get_cal_data+0x228>)
 8000a4a:	21bf      	movs	r1, #191	; 0xbf
 8000a4c:	484e      	ldr	r0, [pc, #312]	; (8000b88 <HTS221_get_cal_data+0x218>)
 8000a4e:	f002 f847 	bl	8002ae0 <HAL_I2C_Master_Receive>

    /*****************************************************************************************************************/
    // Temperature calibration values

    // Register T0_degC_x8, address 0x32. Divide register value by 8 for calibration value
    uint8_t T0_degC_Address = 0x32;
 8000a52:	2332      	movs	r3, #50	; 0x32
 8000a54:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &T0_degC_Address, sizeof(T0_degC_Address), 1000);
 8000a56:	f107 020b 	add.w	r2, r7, #11
 8000a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a5e:	9300      	str	r3, [sp, #0]
 8000a60:	2301      	movs	r3, #1
 8000a62:	21be      	movs	r1, #190	; 0xbe
 8000a64:	4848      	ldr	r0, [pc, #288]	; (8000b88 <HTS221_get_cal_data+0x218>)
 8000a66:	f001 ff47 	bl	80028f8 <HAL_I2C_Master_Transmit>
	T0_degC_Value = 0xff; // Junk default value
 8000a6a:	4b4c      	ldr	r3, [pc, #304]	; (8000b9c <HTS221_get_cal_data+0x22c>)
 8000a6c:	22ff      	movs	r2, #255	; 0xff
 8000a6e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&T0_degC_Value, sizeof(T0_degC_Value), 1000);
 8000a70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a74:	9300      	str	r3, [sp, #0]
 8000a76:	2301      	movs	r3, #1
 8000a78:	4a48      	ldr	r2, [pc, #288]	; (8000b9c <HTS221_get_cal_data+0x22c>)
 8000a7a:	21bf      	movs	r1, #191	; 0xbf
 8000a7c:	4842      	ldr	r0, [pc, #264]	; (8000b88 <HTS221_get_cal_data+0x218>)
 8000a7e:	f002 f82f 	bl	8002ae0 <HAL_I2C_Master_Receive>
	T0_degC_Value = T0_degC_Value / 8;
 8000a82:	4b46      	ldr	r3, [pc, #280]	; (8000b9c <HTS221_get_cal_data+0x22c>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	08db      	lsrs	r3, r3, #3
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	4b44      	ldr	r3, [pc, #272]	; (8000b9c <HTS221_get_cal_data+0x22c>)
 8000a8c:	701a      	strb	r2, [r3, #0]

    // Register T1_degC_x8, address 0x33. Divide register value by 8 for calibration value
    uint8_t T1_degC_Address = 0x33;
 8000a8e:	2333      	movs	r3, #51	; 0x33
 8000a90:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &T1_degC_Address, sizeof(T1_degC_Address), 1000);
 8000a92:	f107 020a 	add.w	r2, r7, #10
 8000a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a9a:	9300      	str	r3, [sp, #0]
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	21be      	movs	r1, #190	; 0xbe
 8000aa0:	4839      	ldr	r0, [pc, #228]	; (8000b88 <HTS221_get_cal_data+0x218>)
 8000aa2:	f001 ff29 	bl	80028f8 <HAL_I2C_Master_Transmit>
	T1_degC_Value = 0xff; // Junk default value
 8000aa6:	4b3e      	ldr	r3, [pc, #248]	; (8000ba0 <HTS221_get_cal_data+0x230>)
 8000aa8:	22ff      	movs	r2, #255	; 0xff
 8000aaa:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&T1_degC_Value, sizeof(T1_degC_Value), 1000);
 8000aac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab0:	9300      	str	r3, [sp, #0]
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	4a3a      	ldr	r2, [pc, #232]	; (8000ba0 <HTS221_get_cal_data+0x230>)
 8000ab6:	21bf      	movs	r1, #191	; 0xbf
 8000ab8:	4833      	ldr	r0, [pc, #204]	; (8000b88 <HTS221_get_cal_data+0x218>)
 8000aba:	f002 f811 	bl	8002ae0 <HAL_I2C_Master_Receive>
	T1_degC_Value = T1_degC_Value / 8;
 8000abe:	4b38      	ldr	r3, [pc, #224]	; (8000ba0 <HTS221_get_cal_data+0x230>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	08db      	lsrs	r3, r3, #3
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	4b36      	ldr	r3, [pc, #216]	; (8000ba0 <HTS221_get_cal_data+0x230>)
 8000ac8:	701a      	strb	r2, [r3, #0]

    // Register T1/T0 msb, address 0x35. Mask bits (0 & 1), (2 & 3) to get values of T0_degC & T1_degC
    uint8_t T1_T0_msb_Address = 0x35;
 8000aca:	2335      	movs	r3, #53	; 0x35
 8000acc:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &T1_T0_msb_Address, sizeof(T1_T0_msb_Address), 1000);
 8000ace:	f107 0209 	add.w	r2, r7, #9
 8000ad2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ad6:	9300      	str	r3, [sp, #0]
 8000ad8:	2301      	movs	r3, #1
 8000ada:	21be      	movs	r1, #190	; 0xbe
 8000adc:	482a      	ldr	r0, [pc, #168]	; (8000b88 <HTS221_get_cal_data+0x218>)
 8000ade:	f001 ff0b 	bl	80028f8 <HAL_I2C_Master_Transmit>
	uint8_t T1_T0_msb_Value = 0xff; // Junk default value
 8000ae2:	23ff      	movs	r3, #255	; 0xff
 8000ae4:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&T1_T0_msb_Value, sizeof(T1_T0_msb_Value), 1000);
 8000ae6:	f107 0208 	add.w	r2, r7, #8
 8000aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aee:	9300      	str	r3, [sp, #0]
 8000af0:	2301      	movs	r3, #1
 8000af2:	21bf      	movs	r1, #191	; 0xbf
 8000af4:	4824      	ldr	r0, [pc, #144]	; (8000b88 <HTS221_get_cal_data+0x218>)
 8000af6:	f001 fff3 	bl	8002ae0 <HAL_I2C_Master_Receive>
	T0_degC = (T1_T0_msb_Value && (0b0011));
 8000afa:	7a3b      	ldrb	r3, [r7, #8]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	bf14      	ite	ne
 8000b00:	2301      	movne	r3, #1
 8000b02:	2300      	moveq	r3, #0
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	461a      	mov	r2, r3
 8000b08:	4b26      	ldr	r3, [pc, #152]	; (8000ba4 <HTS221_get_cal_data+0x234>)
 8000b0a:	701a      	strb	r2, [r3, #0]
    T1_degC = (T1_T0_msb_Value && (0b1100));
 8000b0c:	7a3b      	ldrb	r3, [r7, #8]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	bf14      	ite	ne
 8000b12:	2301      	movne	r3, #1
 8000b14:	2300      	moveq	r3, #0
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	461a      	mov	r2, r3
 8000b1a:	4b23      	ldr	r3, [pc, #140]	; (8000ba8 <HTS221_get_cal_data+0x238>)
 8000b1c:	701a      	strb	r2, [r3, #0]

    // Register T0_OUT, addresses 0x3C and 0x3D
	uint8_t T0_OUT_Address = 0x3C | 0x80;
 8000b1e:	23bc      	movs	r3, #188	; 0xbc
 8000b20:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &T0_OUT_Address, sizeof(T0_OUT_Address), 1000);
 8000b22:	1dfa      	adds	r2, r7, #7
 8000b24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b28:	9300      	str	r3, [sp, #0]
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	21be      	movs	r1, #190	; 0xbe
 8000b2e:	4816      	ldr	r0, [pc, #88]	; (8000b88 <HTS221_get_cal_data+0x218>)
 8000b30:	f001 fee2 	bl	80028f8 <HAL_I2C_Master_Transmit>
	T0_OUT_Value = 0xffff; // Junk default value
 8000b34:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <HTS221_get_cal_data+0x23c>)
 8000b36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b3a:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&T0_OUT_Value, sizeof(T0_OUT_Value), 1000);
 8000b3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b40:	9300      	str	r3, [sp, #0]
 8000b42:	2302      	movs	r3, #2
 8000b44:	4a19      	ldr	r2, [pc, #100]	; (8000bac <HTS221_get_cal_data+0x23c>)
 8000b46:	21bf      	movs	r1, #191	; 0xbf
 8000b48:	480f      	ldr	r0, [pc, #60]	; (8000b88 <HTS221_get_cal_data+0x218>)
 8000b4a:	f001 ffc9 	bl	8002ae0 <HAL_I2C_Master_Receive>

    // Register T1_OUT, addresses 0x3C and 0x3D
	uint8_t T1_OUT_Address = 0x3C | 0x80;
 8000b4e:	23bc      	movs	r3, #188	; 0xbc
 8000b50:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &T1_OUT_Address, sizeof(T1_OUT_Address), 1000);
 8000b52:	1dba      	adds	r2, r7, #6
 8000b54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b58:	9300      	str	r3, [sp, #0]
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	21be      	movs	r1, #190	; 0xbe
 8000b5e:	480a      	ldr	r0, [pc, #40]	; (8000b88 <HTS221_get_cal_data+0x218>)
 8000b60:	f001 feca 	bl	80028f8 <HAL_I2C_Master_Transmit>
	T1_OUT_Value = 0xffff; // Junk default value
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <HTS221_get_cal_data+0x240>)
 8000b66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b6a:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&T1_OUT_Value, sizeof(T1_OUT_Value), 1000);
 8000b6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	2302      	movs	r3, #2
 8000b74:	4a0e      	ldr	r2, [pc, #56]	; (8000bb0 <HTS221_get_cal_data+0x240>)
 8000b76:	21bf      	movs	r1, #191	; 0xbf
 8000b78:	4803      	ldr	r0, [pc, #12]	; (8000b88 <HTS221_get_cal_data+0x218>)
 8000b7a:	f001 ffb1 	bl	8002ae0 <HAL_I2C_Master_Receive>

}
 8000b7e:	bf00      	nop
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200005d4 	.word	0x200005d4
 8000b8c:	20000798 	.word	0x20000798
 8000b90:	2000079c 	.word	0x2000079c
 8000b94:	20000620 	.word	0x20000620
 8000b98:	20000688 	.word	0x20000688
 8000b9c:	200000f8 	.word	0x200000f8
 8000ba0:	2000079d 	.word	0x2000079d
 8000ba4:	20000622 	.word	0x20000622
 8000ba8:	20000710 	.word	0x20000710
 8000bac:	2000079a 	.word	0x2000079a
 8000bb0:	20000712 	.word	0x20000712

08000bb4 <HTS221_get_sensor_data>:

static void HTS221_get_sensor_data(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b0a2      	sub	sp, #136	; 0x88
 8000bb8:	af02      	add	r7, sp, #8
    // Large char buffer for strings sent over the console
    char buffer[100] = {0};
 8000bba:	2300      	movs	r3, #0
 8000bbc:	617b      	str	r3, [r7, #20]
 8000bbe:	f107 0318 	add.w	r3, r7, #24
 8000bc2:	2260      	movs	r2, #96	; 0x60
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f005 f912 	bl	8005df0 <memset>

	// Configure control register 2 (CTRL_REG2, 0x21) bit 0 to enable one-shot
    uint8_t CTRL_REG2_Address = 0x21;
 8000bcc:	2321      	movs	r3, #33	; 0x21
 8000bce:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
    uint8_t CTRL_REG2_Value[] = {CTRL_REG2_Address, (1 << 0)};
 8000bd2:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8000bd6:	743b      	strb	r3, [r7, #16]
 8000bd8:	2301      	movs	r3, #1
 8000bda:	747b      	strb	r3, [r7, #17]

    // Send the target register to the device
    HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, CTRL_REG2_Value, sizeof(CTRL_REG2_Value), 1000);
 8000bdc:	f107 0210 	add.w	r2, r7, #16
 8000be0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	2302      	movs	r3, #2
 8000be8:	21be      	movs	r1, #190	; 0xbe
 8000bea:	487f      	ldr	r0, [pc, #508]	; (8000de8 <HTS221_get_sensor_data+0x234>)
 8000bec:	f001 fe84 	bl	80028f8 <HAL_I2C_Master_Transmit>

    // Define status register (STATUS_REG2, 0x27) bit 0 to monitor for new sample available
    uint8_t STATUS_Address = 0x27;
 8000bf0:	2327      	movs	r3, #39	; 0x27
 8000bf2:	73fb      	strb	r3, [r7, #15]
    uint8_t STATUS_Value = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	73bb      	strb	r3, [r7, #14]

    // Print status message to console
	snprintf(buffer, sizeof(buffer), "\tRequesting new sample...");
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	4a7b      	ldr	r2, [pc, #492]	; (8000dec <HTS221_get_sensor_data+0x238>)
 8000bfe:	2164      	movs	r1, #100	; 0x64
 8000c00:	4618      	mov	r0, r3
 8000c02:	f005 f8fd 	bl	8005e00 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff fae0 	bl	80001d0 <strlen>
 8000c10:	4603      	mov	r3, r0
 8000c12:	b29a      	uxth	r2, r3
 8000c14:	f107 0114 	add.w	r1, r7, #20
 8000c18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1c:	4874      	ldr	r0, [pc, #464]	; (8000df0 <HTS221_get_sensor_data+0x23c>)
 8000c1e:	f004 f8fe 	bl	8004e1e <HAL_UART_Transmit>

    // Loiter for a bit to allow time for conversion to complete and be made available
    uint8_t count = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    while (count < 10)  // arbitrary "long enough" delay value
 8000c28:	e035      	b.n	8000c96 <HTS221_get_sensor_data+0xe2>
    {
        // Send the address of the status register
        HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &STATUS_Address, sizeof(STATUS_Address), 1000);
 8000c2a:	f107 020f 	add.w	r2, r7, #15
 8000c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c32:	9300      	str	r3, [sp, #0]
 8000c34:	2301      	movs	r3, #1
 8000c36:	21be      	movs	r1, #190	; 0xbe
 8000c38:	486b      	ldr	r0, [pc, #428]	; (8000de8 <HTS221_get_sensor_data+0x234>)
 8000c3a:	f001 fe5d 	bl	80028f8 <HAL_I2C_Master_Transmit>

        // Read back the value of the status register
        HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&STATUS_Value, sizeof(STATUS_Value), 1000);
 8000c3e:	f107 020e 	add.w	r2, r7, #14
 8000c42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c46:	9300      	str	r3, [sp, #0]
 8000c48:	2301      	movs	r3, #1
 8000c4a:	21bf      	movs	r1, #191	; 0xbf
 8000c4c:	4866      	ldr	r0, [pc, #408]	; (8000de8 <HTS221_get_sensor_data+0x234>)
 8000c4e:	f001 ff47 	bl	8002ae0 <HAL_I2C_Master_Receive>

        // If the new sample is ready, break out of while-loop...
        if (STATUS_Value & 0x01)
 8000c52:	7bbb      	ldrb	r3, [r7, #14]
 8000c54:	f003 0301 	and.w	r3, r3, #1
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d121      	bne.n	8000ca0 <HTS221_get_sensor_data+0xec>
        {
            break;
        }

        // Update status message on console with '.' to indicate processing
		snprintf(buffer, sizeof(buffer), ".");
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	4a64      	ldr	r2, [pc, #400]	; (8000df4 <HTS221_get_sensor_data+0x240>)
 8000c62:	2164      	movs	r1, #100	; 0x64
 8000c64:	4618      	mov	r0, r3
 8000c66:	f005 f8cb 	bl	8005e00 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff faae 	bl	80001d0 <strlen>
 8000c74:	4603      	mov	r3, r0
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	f107 0114 	add.w	r1, r7, #20
 8000c7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c80:	485b      	ldr	r0, [pc, #364]	; (8000df0 <HTS221_get_sensor_data+0x23c>)
 8000c82:	f004 f8cc 	bl	8004e1e <HAL_UART_Transmit>

        // Else wait for a bit, increment the counter, and keep looping
        HAL_Delay(100);
 8000c86:	2064      	movs	r0, #100	; 0x64
 8000c88:	f001 f966 	bl	8001f58 <HAL_Delay>
        count++;
 8000c8c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000c90:	3301      	adds	r3, #1
 8000c92:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    while (count < 10)  // arbitrary "long enough" delay value
 8000c96:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000c9a:	2b09      	cmp	r3, #9
 8000c9c:	d9c5      	bls.n	8000c2a <HTS221_get_sensor_data+0x76>
 8000c9e:	e000      	b.n	8000ca2 <HTS221_get_sensor_data+0xee>
            break;
 8000ca0:	bf00      	nop
    }

    // Read the values of the humidity register H_OUT, address 0x28 and 0x29
	uint8_t H_OUT_Address = 0x28 | 0x80;
 8000ca2:	23a8      	movs	r3, #168	; 0xa8
 8000ca4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &H_OUT_Address, sizeof(H_OUT_Address), 1000);
 8000ca6:	f107 020d 	add.w	r2, r7, #13
 8000caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cae:	9300      	str	r3, [sp, #0]
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	21be      	movs	r1, #190	; 0xbe
 8000cb4:	484c      	ldr	r0, [pc, #304]	; (8000de8 <HTS221_get_sensor_data+0x234>)
 8000cb6:	f001 fe1f 	bl	80028f8 <HAL_I2C_Master_Transmit>
	int16_t H_OUT_Value = 0xbeef; // Junk default value
 8000cba:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8000cbe:	817b      	strh	r3, [r7, #10]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&H_OUT_Value, sizeof(H_OUT_Value), 1000);
 8000cc0:	f107 020a 	add.w	r2, r7, #10
 8000cc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cc8:	9300      	str	r3, [sp, #0]
 8000cca:	2302      	movs	r3, #2
 8000ccc:	21bf      	movs	r1, #191	; 0xbf
 8000cce:	4846      	ldr	r0, [pc, #280]	; (8000de8 <HTS221_get_sensor_data+0x234>)
 8000cd0:	f001 ff06 	bl	8002ae0 <HAL_I2C_Master_Receive>

	// Calculate and print value of humidity in %rH.
	int16_t humidityValue = (((H1_rH_Value - H0_rH_Value) * (H_OUT_Value - H0_T0_OUT_Value))/(H1_T0_OUT_Value - H0_T0_OUT_Value)) + (H0_rH_Value);
 8000cd4:	4b48      	ldr	r3, [pc, #288]	; (8000df8 <HTS221_get_sensor_data+0x244>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b48      	ldr	r3, [pc, #288]	; (8000dfc <HTS221_get_sensor_data+0x248>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	1ad3      	subs	r3, r2, r3
 8000ce0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000ce4:	4611      	mov	r1, r2
 8000ce6:	4a46      	ldr	r2, [pc, #280]	; (8000e00 <HTS221_get_sensor_data+0x24c>)
 8000ce8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000cec:	1a8a      	subs	r2, r1, r2
 8000cee:	fb02 f203 	mul.w	r2, r2, r3
 8000cf2:	4b44      	ldr	r3, [pc, #272]	; (8000e04 <HTS221_get_sensor_data+0x250>)
 8000cf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4b41      	ldr	r3, [pc, #260]	; (8000e00 <HTS221_get_sensor_data+0x24c>)
 8000cfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d00:	1acb      	subs	r3, r1, r3
 8000d02:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d06:	b29a      	uxth	r2, r3
 8000d08:	4b3c      	ldr	r3, [pc, #240]	; (8000dfc <HTS221_get_sensor_data+0x248>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	4413      	add	r3, r2
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
	snprintf(buffer, sizeof(buffer), "\n\tHumidity: %d%%rH\n", humidityValue);
 8000d16:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 8000d1a:	f107 0014 	add.w	r0, r7, #20
 8000d1e:	4a3a      	ldr	r2, [pc, #232]	; (8000e08 <HTS221_get_sensor_data+0x254>)
 8000d20:	2164      	movs	r1, #100	; 0x64
 8000d22:	f005 f86d 	bl	8005e00 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fa50 	bl	80001d0 <strlen>
 8000d30:	4603      	mov	r3, r0
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	f107 0114 	add.w	r1, r7, #20
 8000d38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d3c:	482c      	ldr	r0, [pc, #176]	; (8000df0 <HTS221_get_sensor_data+0x23c>)
 8000d3e:	f004 f86e 	bl	8004e1e <HAL_UART_Transmit>


	// Read the values of the temperature register T_OUT, address 0x2A and 0x2B
	uint8_t T_OUT_Address = 0x28 | 0x80;
 8000d42:	23a8      	movs	r3, #168	; 0xa8
 8000d44:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &T_OUT_Address, sizeof(T_OUT_Address), 1000);
 8000d46:	f107 0209 	add.w	r2, r7, #9
 8000d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4e:	9300      	str	r3, [sp, #0]
 8000d50:	2301      	movs	r3, #1
 8000d52:	21be      	movs	r1, #190	; 0xbe
 8000d54:	4824      	ldr	r0, [pc, #144]	; (8000de8 <HTS221_get_sensor_data+0x234>)
 8000d56:	f001 fdcf 	bl	80028f8 <HAL_I2C_Master_Transmit>
	int16_t T_OUT_Value = 0xbeef; // Junk default value
 8000d5a:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8000d5e:	80fb      	strh	r3, [r7, #6]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&T_OUT_Value, sizeof(T_OUT_Value), 1000);
 8000d60:	1dba      	adds	r2, r7, #6
 8000d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	2302      	movs	r3, #2
 8000d6a:	21bf      	movs	r1, #191	; 0xbf
 8000d6c:	481e      	ldr	r0, [pc, #120]	; (8000de8 <HTS221_get_sensor_data+0x234>)
 8000d6e:	f001 feb7 	bl	8002ae0 <HAL_I2C_Master_Receive>

    // Calculate and print value of temperature in degC.
	int16_t temperatureValue = (((T1_degC_Value - T0_degC_Value) * (T_OUT_Value - T0_OUT_Value))/(T1_OUT_Value - T0_OUT_Value)) + (T0_degC_Value);
 8000d72:	4b26      	ldr	r3, [pc, #152]	; (8000e0c <HTS221_get_sensor_data+0x258>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	461a      	mov	r2, r3
 8000d78:	4b25      	ldr	r3, [pc, #148]	; (8000e10 <HTS221_get_sensor_data+0x25c>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000d82:	4611      	mov	r1, r2
 8000d84:	4a23      	ldr	r2, [pc, #140]	; (8000e14 <HTS221_get_sensor_data+0x260>)
 8000d86:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000d8a:	1a8a      	subs	r2, r1, r2
 8000d8c:	fb02 f203 	mul.w	r2, r2, r3
 8000d90:	4b21      	ldr	r3, [pc, #132]	; (8000e18 <HTS221_get_sensor_data+0x264>)
 8000d92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d96:	4619      	mov	r1, r3
 8000d98:	4b1e      	ldr	r3, [pc, #120]	; (8000e14 <HTS221_get_sensor_data+0x260>)
 8000d9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d9e:	1acb      	subs	r3, r1, r3
 8000da0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	4b1a      	ldr	r3, [pc, #104]	; (8000e10 <HTS221_get_sensor_data+0x25c>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	4413      	add	r3, r2
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	snprintf(buffer, sizeof(buffer), "\tTemperature: %ddegC\n\n", temperatureValue);
 8000db4:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 8000db8:	f107 0014 	add.w	r0, r7, #20
 8000dbc:	4a17      	ldr	r2, [pc, #92]	; (8000e1c <HTS221_get_sensor_data+0x268>)
 8000dbe:	2164      	movs	r1, #100	; 0x64
 8000dc0:	f005 f81e 	bl	8005e00 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fa01 	bl	80001d0 <strlen>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	b29a      	uxth	r2, r3
 8000dd2:	f107 0114 	add.w	r1, r7, #20
 8000dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dda:	4805      	ldr	r0, [pc, #20]	; (8000df0 <HTS221_get_sensor_data+0x23c>)
 8000ddc:	f004 f81f 	bl	8004e1e <HAL_UART_Transmit>
}
 8000de0:	bf00      	nop
 8000de2:	3780      	adds	r7, #128	; 0x80
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	200005d4 	.word	0x200005d4
 8000dec:	08006704 	.word	0x08006704
 8000df0:	2000068c 	.word	0x2000068c
 8000df4:	08006720 	.word	0x08006720
 8000df8:	2000079c 	.word	0x2000079c
 8000dfc:	20000798 	.word	0x20000798
 8000e00:	20000620 	.word	0x20000620
 8000e04:	20000688 	.word	0x20000688
 8000e08:	08006724 	.word	0x08006724
 8000e0c:	2000079d 	.word	0x2000079d
 8000e10:	200000f8 	.word	0x200000f8
 8000e14:	2000079a 	.word	0x2000079a
 8000e18:	20000712 	.word	0x20000712
 8000e1c:	08006738 	.word	0x08006738

08000e20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e26:	f001 f822 	bl	8001e6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e2a:	f000 f8ab 	bl	8000f84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e2e:	f000 fb2b 	bl	8001488 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000e32:	f000 f94f 	bl	80010d4 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000e36:	f000 f9c5 	bl	80011c4 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000e3a:	f000 fa03 	bl	8001244 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000e3e:	f000 fa27 	bl	8001290 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000e42:	f000 fa93 	bl	800136c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000e46:	f000 fac1 	bl	80013cc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000e4a:	f000 faef 	bl	800142c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000e4e:	f000 f979 	bl	8001144 <MX_I2C1_Init>
  MX_UART4_Init();
 8000e52:	f000 fa5b 	bl	800130c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  HTS221_pwr_en();
 8000e56:	f7ff fd73 	bl	8000940 <HTS221_pwr_en>
  HTS221_get_cal_data();
 8000e5a:	f7ff fd89 	bl	8000970 <HTS221_get_cal_data>

  char* cliHeader = "\nsimpleCLI Interface v0.5\n--------------------------------------\n";
 8000e5e:	4b41      	ldr	r3, [pc, #260]	; (8000f64 <main+0x144>)
 8000e60:	60fb      	str	r3, [r7, #12]
  HAL_UART_Transmit(&huart1, (uint8_t*) cliHeader, strlen(cliHeader), 1000);
 8000e62:	68f8      	ldr	r0, [r7, #12]
 8000e64:	f7ff f9b4 	bl	80001d0 <strlen>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e70:	68f9      	ldr	r1, [r7, #12]
 8000e72:	483d      	ldr	r0, [pc, #244]	; (8000f68 <main+0x148>)
 8000e74:	f003 ffd3 	bl	8004e1e <HAL_UART_Transmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  char* cliPrompt = "Options:\n    1: Blink LEDs!\n    2: Read the temperature & RH!\n    3: Get the time!\n    4: Set the time!\n$>";
 8000e78:	4b3c      	ldr	r3, [pc, #240]	; (8000f6c <main+0x14c>)
 8000e7a:	60bb      	str	r3, [r7, #8]

	  HAL_UART_Transmit(&huart1, (uint8_t*) cliPrompt, strlen(cliPrompt), 1000);
 8000e7c:	68b8      	ldr	r0, [r7, #8]
 8000e7e:	f7ff f9a7 	bl	80001d0 <strlen>
 8000e82:	4603      	mov	r3, r0
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8a:	68b9      	ldr	r1, [r7, #8]
 8000e8c:	4836      	ldr	r0, [pc, #216]	; (8000f68 <main+0x148>)
 8000e8e:	f003 ffc6 	bl	8004e1e <HAL_UART_Transmit>

	  char cliInput = '\0';
 8000e92:	2300      	movs	r3, #0
 8000e94:	71fb      	strb	r3, [r7, #7]
	  HAL_UART_Receive(&huart1, (uint8_t*) &cliInput, 1, HAL_MAX_DELAY);
 8000e96:	1df9      	adds	r1, r7, #7
 8000e98:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	4832      	ldr	r0, [pc, #200]	; (8000f68 <main+0x148>)
 8000ea0:	f004 f851 	bl	8004f46 <HAL_UART_Receive>

	  switch (cliInput)
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	3b31      	subs	r3, #49	; 0x31
 8000ea8:	2b03      	cmp	r3, #3
 8000eaa:	d84b      	bhi.n	8000f44 <main+0x124>
 8000eac:	a201      	add	r2, pc, #4	; (adr r2, 8000eb4 <main+0x94>)
 8000eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eb2:	bf00      	nop
 8000eb4:	08000ec5 	.word	0x08000ec5
 8000eb8:	08000ee5 	.word	0x08000ee5
 8000ebc:	08000f05 	.word	0x08000f05
 8000ec0:	08000f25 	.word	0x08000f25
	  {
		case '1':
			cliPrompt = "\nToggle BLE/WiFi LED...\n\n";
 8000ec4:	4b2a      	ldr	r3, [pc, #168]	; (8000f70 <main+0x150>)
 8000ec6:	60bb      	str	r3, [r7, #8]
			HAL_UART_Transmit(&huart1, (uint8_t*) cliPrompt, strlen(cliPrompt), 1000);
 8000ec8:	68b8      	ldr	r0, [r7, #8]
 8000eca:	f7ff f981 	bl	80001d0 <strlen>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	b29a      	uxth	r2, r3
 8000ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed6:	68b9      	ldr	r1, [r7, #8]
 8000ed8:	4823      	ldr	r0, [pc, #140]	; (8000f68 <main+0x148>)
 8000eda:	f003 ffa0 	bl	8004e1e <HAL_UART_Transmit>
			do_toggle_LED();
 8000ede:	f7ff fb4b 	bl	8000578 <do_toggle_LED>
			break;
 8000ee2:	e03d      	b.n	8000f60 <main+0x140>

		case '2':
			cliPrompt = "\nReading the temperature and RH...\n";
 8000ee4:	4b23      	ldr	r3, [pc, #140]	; (8000f74 <main+0x154>)
 8000ee6:	60bb      	str	r3, [r7, #8]
			HAL_UART_Transmit(&huart1, (uint8_t*) cliPrompt, strlen(cliPrompt), 1000);
 8000ee8:	68b8      	ldr	r0, [r7, #8]
 8000eea:	f7ff f971 	bl	80001d0 <strlen>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef6:	68b9      	ldr	r1, [r7, #8]
 8000ef8:	481b      	ldr	r0, [pc, #108]	; (8000f68 <main+0x148>)
 8000efa:	f003 ff90 	bl	8004e1e <HAL_UART_Transmit>
			HTS221_get_sensor_data();
 8000efe:	f7ff fe59 	bl	8000bb4 <HTS221_get_sensor_data>
			break;
 8000f02:	e02d      	b.n	8000f60 <main+0x140>

		case '3':
			cliPrompt = "\nGetting the time...\n";
 8000f04:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <main+0x158>)
 8000f06:	60bb      	str	r3, [r7, #8]
			HAL_UART_Transmit(&huart1, (uint8_t*) cliPrompt, strlen(cliPrompt), 1000);
 8000f08:	68b8      	ldr	r0, [r7, #8]
 8000f0a:	f7ff f961 	bl	80001d0 <strlen>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f16:	68b9      	ldr	r1, [r7, #8]
 8000f18:	4813      	ldr	r0, [pc, #76]	; (8000f68 <main+0x148>)
 8000f1a:	f003 ff80 	bl	8004e1e <HAL_UART_Transmit>
			do_get_time();
 8000f1e:	f7ff fb47 	bl	80005b0 <do_get_time>
			break;
 8000f22:	e01d      	b.n	8000f60 <main+0x140>

		case '4':
			cliPrompt = "\nSetting the time...\n";
 8000f24:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <main+0x15c>)
 8000f26:	60bb      	str	r3, [r7, #8]
			HAL_UART_Transmit(&huart1, (uint8_t*) cliPrompt, strlen(cliPrompt), 1000);
 8000f28:	68b8      	ldr	r0, [r7, #8]
 8000f2a:	f7ff f951 	bl	80001d0 <strlen>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f36:	68b9      	ldr	r1, [r7, #8]
 8000f38:	480b      	ldr	r0, [pc, #44]	; (8000f68 <main+0x148>)
 8000f3a:	f003 ff70 	bl	8004e1e <HAL_UART_Transmit>
			do_set_time();
 8000f3e:	f7ff fc09 	bl	8000754 <do_set_time>
			break;
 8000f42:	e00d      	b.n	8000f60 <main+0x140>

		default:
			cliPrompt = "Invalid input!\r\n";
 8000f44:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <main+0x160>)
 8000f46:	60bb      	str	r3, [r7, #8]
			HAL_UART_Transmit(&huart1, (uint8_t*) cliPrompt, strlen(cliPrompt), 1000);
 8000f48:	68b8      	ldr	r0, [r7, #8]
 8000f4a:	f7ff f941 	bl	80001d0 <strlen>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f56:	68b9      	ldr	r1, [r7, #8]
 8000f58:	4803      	ldr	r0, [pc, #12]	; (8000f68 <main+0x148>)
 8000f5a:	f003 ff60 	bl	8004e1e <HAL_UART_Transmit>
			break;
 8000f5e:	bf00      	nop
  {
 8000f60:	e78a      	b.n	8000e78 <main+0x58>
 8000f62:	bf00      	nop
 8000f64:	08006750 	.word	0x08006750
 8000f68:	2000068c 	.word	0x2000068c
 8000f6c:	08006794 	.word	0x08006794
 8000f70:	08006800 	.word	0x08006800
 8000f74:	0800681c 	.word	0x0800681c
 8000f78:	08006840 	.word	0x08006840
 8000f7c:	08006858 	.word	0x08006858
 8000f80:	08006870 	.word	0x08006870

08000f84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b0b8      	sub	sp, #224	; 0xe0
 8000f88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f8e:	2244      	movs	r2, #68	; 0x44
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f004 ff2c 	bl	8005df0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f98:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa8:	463b      	mov	r3, r7
 8000faa:	2288      	movs	r2, #136	; 0x88
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f004 ff1e 	bl	8005df0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000fb4:	f002 fa4a 	bl	800344c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000fb8:	4b44      	ldr	r3, [pc, #272]	; (80010cc <SystemClock_Config+0x148>)
 8000fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fbe:	4a43      	ldr	r2, [pc, #268]	; (80010cc <SystemClock_Config+0x148>)
 8000fc0:	f023 0318 	bic.w	r3, r3, #24
 8000fc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000fc8:	2314      	movs	r3, #20
 8000fca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000fe0:	2360      	movs	r3, #96	; 0x60
 8000fe2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000fec:	2301      	movs	r3, #1
 8000fee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000ff8:	2328      	movs	r3, #40	; 0x28
 8000ffa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ffe:	2307      	movs	r3, #7
 8001000:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001004:	2302      	movs	r3, #2
 8001006:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800100a:	2302      	movs	r3, #2
 800100c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001010:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001014:	4618      	mov	r0, r3
 8001016:	f002 fb59 	bl	80036cc <HAL_RCC_OscConfig>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001020:	f000 fbbc 	bl	800179c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001024:	230f      	movs	r3, #15
 8001026:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102a:	2303      	movs	r3, #3
 800102c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001036:	2300      	movs	r3, #0
 8001038:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001042:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001046:	2104      	movs	r1, #4
 8001048:	4618      	mov	r0, r3
 800104a:	f002 ff25 	bl	8003e98 <HAL_RCC_ClockConfig>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001054:	f000 fba2 	bl	800179c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8001058:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <SystemClock_Config+0x14c>)
 800105a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800105c:	2300      	movs	r3, #0
 800105e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001060:	2300      	movs	r3, #0
 8001062:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001064:	2300      	movs	r3, #0
 8001066:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001068:	2300      	movs	r3, #0
 800106a:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800106c:	2300      	movs	r3, #0
 800106e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001070:	2300      	movs	r3, #0
 8001072:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001076:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800107a:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800107c:	2301      	movs	r3, #1
 800107e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001080:	2301      	movs	r3, #1
 8001082:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001084:	2318      	movs	r3, #24
 8001086:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001088:	2307      	movs	r3, #7
 800108a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800108c:	2302      	movs	r3, #2
 800108e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001090:	2302      	movs	r3, #2
 8001092:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001094:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001098:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800109a:	463b      	mov	r3, r7
 800109c:	4618      	mov	r0, r3
 800109e:	f003 f901 	bl	80042a4 <HAL_RCCEx_PeriphCLKConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SystemClock_Config+0x128>
  {
    Error_Handler();
 80010a8:	f000 fb78 	bl	800179c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010ac:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010b0:	f002 f9ea 	bl	8003488 <HAL_PWREx_ControlVoltageScaling>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <SystemClock_Config+0x13a>
  {
    Error_Handler();
 80010ba:	f000 fb6f 	bl	800179c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80010be:	f003 fbdb 	bl	8004878 <HAL_RCCEx_EnableMSIPLLMode>
}
 80010c2:	bf00      	nop
 80010c4:	37e0      	adds	r7, #224	; 0xe0
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000
 80010d0:	000120cd 	.word	0x000120cd

080010d4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80010d8:	4b18      	ldr	r3, [pc, #96]	; (800113c <MX_DFSDM1_Init+0x68>)
 80010da:	4a19      	ldr	r2, [pc, #100]	; (8001140 <MX_DFSDM1_Init+0x6c>)
 80010dc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80010de:	4b17      	ldr	r3, [pc, #92]	; (800113c <MX_DFSDM1_Init+0x68>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80010e4:	4b15      	ldr	r3, [pc, #84]	; (800113c <MX_DFSDM1_Init+0x68>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80010ea:	4b14      	ldr	r3, [pc, #80]	; (800113c <MX_DFSDM1_Init+0x68>)
 80010ec:	2202      	movs	r2, #2
 80010ee:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <MX_DFSDM1_Init+0x68>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80010f6:	4b11      	ldr	r3, [pc, #68]	; (800113c <MX_DFSDM1_Init+0x68>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80010fc:	4b0f      	ldr	r3, [pc, #60]	; (800113c <MX_DFSDM1_Init+0x68>)
 80010fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001102:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001104:	4b0d      	ldr	r3, [pc, #52]	; (800113c <MX_DFSDM1_Init+0x68>)
 8001106:	2200      	movs	r2, #0
 8001108:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <MX_DFSDM1_Init+0x68>)
 800110c:	2204      	movs	r2, #4
 800110e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001110:	4b0a      	ldr	r3, [pc, #40]	; (800113c <MX_DFSDM1_Init+0x68>)
 8001112:	2200      	movs	r2, #0
 8001114:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <MX_DFSDM1_Init+0x68>)
 8001118:	2201      	movs	r2, #1
 800111a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800111c:	4b07      	ldr	r3, [pc, #28]	; (800113c <MX_DFSDM1_Init+0x68>)
 800111e:	2200      	movs	r2, #0
 8001120:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <MX_DFSDM1_Init+0x68>)
 8001124:	2200      	movs	r2, #0
 8001126:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001128:	4804      	ldr	r0, [pc, #16]	; (800113c <MX_DFSDM1_Init+0x68>)
 800112a:	f001 f84b 	bl	80021c4 <HAL_DFSDM_ChannelInit>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001134:	f000 fb32 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	200000c0 	.word	0x200000c0
 8001140:	40016020 	.word	0x40016020

08001144 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001148:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <MX_I2C1_Init+0x74>)
 800114a:	4a1c      	ldr	r2, [pc, #112]	; (80011bc <MX_I2C1_Init+0x78>)
 800114c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800114e:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <MX_I2C1_Init+0x74>)
 8001150:	4a1b      	ldr	r2, [pc, #108]	; (80011c0 <MX_I2C1_Init+0x7c>)
 8001152:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001154:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <MX_I2C1_Init+0x74>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800115a:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <MX_I2C1_Init+0x74>)
 800115c:	2201      	movs	r2, #1
 800115e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001160:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <MX_I2C1_Init+0x74>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001166:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <MX_I2C1_Init+0x74>)
 8001168:	2200      	movs	r2, #0
 800116a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <MX_I2C1_Init+0x74>)
 800116e:	2200      	movs	r2, #0
 8001170:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001172:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <MX_I2C1_Init+0x74>)
 8001174:	2200      	movs	r2, #0
 8001176:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001178:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_I2C1_Init+0x74>)
 800117a:	2200      	movs	r2, #0
 800117c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800117e:	480e      	ldr	r0, [pc, #56]	; (80011b8 <MX_I2C1_Init+0x74>)
 8001180:	f001 fb2b 	bl	80027da <HAL_I2C_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800118a:	f000 fb07 	bl	800179c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800118e:	2100      	movs	r1, #0
 8001190:	4809      	ldr	r0, [pc, #36]	; (80011b8 <MX_I2C1_Init+0x74>)
 8001192:	f001 ff7b 	bl	800308c <HAL_I2CEx_ConfigAnalogFilter>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800119c:	f000 fafe 	bl	800179c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011a0:	2100      	movs	r1, #0
 80011a2:	4805      	ldr	r0, [pc, #20]	; (80011b8 <MX_I2C1_Init+0x74>)
 80011a4:	f001 ffbd 	bl	8003122 <HAL_I2CEx_ConfigDigitalFilter>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011ae:	f000 faf5 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000180 	.word	0x20000180
 80011bc:	40005400 	.word	0x40005400
 80011c0:	10909cec 	.word	0x10909cec

080011c4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011c8:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <MX_I2C2_Init+0x74>)
 80011ca:	4a1c      	ldr	r2, [pc, #112]	; (800123c <MX_I2C2_Init+0x78>)
 80011cc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80011ce:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <MX_I2C2_Init+0x74>)
 80011d0:	4a1b      	ldr	r2, [pc, #108]	; (8001240 <MX_I2C2_Init+0x7c>)
 80011d2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80011d4:	4b18      	ldr	r3, [pc, #96]	; (8001238 <MX_I2C2_Init+0x74>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011da:	4b17      	ldr	r3, [pc, #92]	; (8001238 <MX_I2C2_Init+0x74>)
 80011dc:	2201      	movs	r2, #1
 80011de:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e0:	4b15      	ldr	r3, [pc, #84]	; (8001238 <MX_I2C2_Init+0x74>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80011e6:	4b14      	ldr	r3, [pc, #80]	; (8001238 <MX_I2C2_Init+0x74>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011ec:	4b12      	ldr	r3, [pc, #72]	; (8001238 <MX_I2C2_Init+0x74>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011f2:	4b11      	ldr	r3, [pc, #68]	; (8001238 <MX_I2C2_Init+0x74>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011f8:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <MX_I2C2_Init+0x74>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011fe:	480e      	ldr	r0, [pc, #56]	; (8001238 <MX_I2C2_Init+0x74>)
 8001200:	f001 faeb 	bl	80027da <HAL_I2C_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800120a:	f000 fac7 	bl	800179c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800120e:	2100      	movs	r1, #0
 8001210:	4809      	ldr	r0, [pc, #36]	; (8001238 <MX_I2C2_Init+0x74>)
 8001212:	f001 ff3b 	bl	800308c <HAL_I2CEx_ConfigAnalogFilter>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800121c:	f000 fabe 	bl	800179c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001220:	2100      	movs	r1, #0
 8001222:	4805      	ldr	r0, [pc, #20]	; (8001238 <MX_I2C2_Init+0x74>)
 8001224:	f001 ff7d 	bl	8003122 <HAL_I2CEx_ConfigDigitalFilter>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800122e:	f000 fab5 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200005d4 	.word	0x200005d4
 800123c:	40005800 	.word	0x40005800
 8001240:	10909cec 	.word	0x10909cec

08001244 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001248:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <MX_QUADSPI_Init+0x44>)
 800124a:	4a10      	ldr	r2, [pc, #64]	; (800128c <MX_QUADSPI_Init+0x48>)
 800124c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <MX_QUADSPI_Init+0x44>)
 8001250:	2202      	movs	r2, #2
 8001252:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <MX_QUADSPI_Init+0x44>)
 8001256:	2204      	movs	r2, #4
 8001258:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <MX_QUADSPI_Init+0x44>)
 800125c:	2210      	movs	r2, #16
 800125e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <MX_QUADSPI_Init+0x44>)
 8001262:	2217      	movs	r2, #23
 8001264:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001266:	4b08      	ldr	r3, [pc, #32]	; (8001288 <MX_QUADSPI_Init+0x44>)
 8001268:	2200      	movs	r2, #0
 800126a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <MX_QUADSPI_Init+0x44>)
 800126e:	2200      	movs	r2, #0
 8001270:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001272:	4805      	ldr	r0, [pc, #20]	; (8001288 <MX_QUADSPI_Init+0x44>)
 8001274:	f002 f96e 	bl	8003554 <HAL_QSPI_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800127e:	f000 fa8d 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200007a0 	.word	0x200007a0
 800128c:	a0001000 	.word	0xa0001000

08001290 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <MX_SPI3_Init+0x74>)
 8001296:	4a1c      	ldr	r2, [pc, #112]	; (8001308 <MX_SPI3_Init+0x78>)
 8001298:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800129a:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <MX_SPI3_Init+0x74>)
 800129c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012a0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80012a2:	4b18      	ldr	r3, [pc, #96]	; (8001304 <MX_SPI3_Init+0x74>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80012a8:	4b16      	ldr	r3, [pc, #88]	; (8001304 <MX_SPI3_Init+0x74>)
 80012aa:	f44f 7240 	mov.w	r2, #768	; 0x300
 80012ae:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012b0:	4b14      	ldr	r3, [pc, #80]	; (8001304 <MX_SPI3_Init+0x74>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012b6:	4b13      	ldr	r3, [pc, #76]	; (8001304 <MX_SPI3_Init+0x74>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <MX_SPI3_Init+0x74>)
 80012be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012c2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <MX_SPI3_Init+0x74>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <MX_SPI3_Init+0x74>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <MX_SPI3_Init+0x74>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <MX_SPI3_Init+0x74>)
 80012d8:	2200      	movs	r2, #0
 80012da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80012dc:	4b09      	ldr	r3, [pc, #36]	; (8001304 <MX_SPI3_Init+0x74>)
 80012de:	2207      	movs	r2, #7
 80012e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <MX_SPI3_Init+0x74>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <MX_SPI3_Init+0x74>)
 80012ea:	2208      	movs	r2, #8
 80012ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80012ee:	4805      	ldr	r0, [pc, #20]	; (8001304 <MX_SPI3_Init+0x74>)
 80012f0:	f003 fca4 	bl	8004c3c <HAL_SPI_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80012fa:	f000 fa4f 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000624 	.word	0x20000624
 8001308:	40003c00 	.word	0x40003c00

0800130c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001310:	4b14      	ldr	r3, [pc, #80]	; (8001364 <MX_UART4_Init+0x58>)
 8001312:	4a15      	ldr	r2, [pc, #84]	; (8001368 <MX_UART4_Init+0x5c>)
 8001314:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001316:	4b13      	ldr	r3, [pc, #76]	; (8001364 <MX_UART4_Init+0x58>)
 8001318:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800131c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800131e:	4b11      	ldr	r3, [pc, #68]	; (8001364 <MX_UART4_Init+0x58>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001324:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <MX_UART4_Init+0x58>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800132a:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <MX_UART4_Init+0x58>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <MX_UART4_Init+0x58>)
 8001332:	220c      	movs	r2, #12
 8001334:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001336:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <MX_UART4_Init+0x58>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800133c:	4b09      	ldr	r3, [pc, #36]	; (8001364 <MX_UART4_Init+0x58>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001342:	4b08      	ldr	r3, [pc, #32]	; (8001364 <MX_UART4_Init+0x58>)
 8001344:	2200      	movs	r2, #0
 8001346:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <MX_UART4_Init+0x58>)
 800134a:	2200      	movs	r2, #0
 800134c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800134e:	4805      	ldr	r0, [pc, #20]	; (8001364 <MX_UART4_Init+0x58>)
 8001350:	f003 fd17 	bl	8004d82 <HAL_UART_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800135a:	f000 fa1f 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000714 	.word	0x20000714
 8001368:	40004c00 	.word	0x40004c00

0800136c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001370:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <MX_USART1_UART_Init+0x58>)
 8001372:	4a15      	ldr	r2, [pc, #84]	; (80013c8 <MX_USART1_UART_Init+0x5c>)
 8001374:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001376:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <MX_USART1_UART_Init+0x58>)
 8001378:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800137c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <MX_USART1_UART_Init+0x58>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <MX_USART1_UART_Init+0x58>)
 8001386:	2200      	movs	r2, #0
 8001388:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <MX_USART1_UART_Init+0x58>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <MX_USART1_UART_Init+0x58>)
 8001392:	220c      	movs	r2, #12
 8001394:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <MX_USART1_UART_Init+0x58>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800139c:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <MX_USART1_UART_Init+0x58>)
 800139e:	2200      	movs	r2, #0
 80013a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <MX_USART1_UART_Init+0x58>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <MX_USART1_UART_Init+0x58>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_USART1_UART_Init+0x58>)
 80013b0:	f003 fce7 	bl	8004d82 <HAL_UART_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80013ba:	f000 f9ef 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	2000068c 	.word	0x2000068c
 80013c8:	40013800 	.word	0x40013800

080013cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013d0:	4b14      	ldr	r3, [pc, #80]	; (8001424 <MX_USART3_UART_Init+0x58>)
 80013d2:	4a15      	ldr	r2, [pc, #84]	; (8001428 <MX_USART3_UART_Init+0x5c>)
 80013d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <MX_USART3_UART_Init+0x58>)
 80013d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <MX_USART3_UART_Init+0x58>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013e4:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <MX_USART3_UART_Init+0x58>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <MX_USART3_UART_Init+0x58>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <MX_USART3_UART_Init+0x58>)
 80013f2:	220c      	movs	r2, #12
 80013f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f6:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <MX_USART3_UART_Init+0x58>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <MX_USART3_UART_Init+0x58>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001402:	4b08      	ldr	r3, [pc, #32]	; (8001424 <MX_USART3_UART_Init+0x58>)
 8001404:	2200      	movs	r2, #0
 8001406:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <MX_USART3_UART_Init+0x58>)
 800140a:	2200      	movs	r2, #0
 800140c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800140e:	4805      	ldr	r0, [pc, #20]	; (8001424 <MX_USART3_UART_Init+0x58>)
 8001410:	f003 fcb7 	bl	8004d82 <HAL_UART_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800141a:	f000 f9bf 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	200000fc 	.word	0x200000fc
 8001428:	40004800 	.word	0x40004800

0800142c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001430:	4b14      	ldr	r3, [pc, #80]	; (8001484 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001432:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001436:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001438:	4b12      	ldr	r3, [pc, #72]	; (8001484 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800143a:	2206      	movs	r2, #6
 800143c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001440:	2202      	movs	r2, #2
 8001442:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001444:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001446:	2202      	movs	r2, #2
 8001448:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800144c:	2200      	movs	r2, #0
 800144e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001452:	2200      	movs	r2, #0
 8001454:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001458:	2200      	movs	r2, #0
 800145a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800145c:	4b09      	ldr	r3, [pc, #36]	; (8001484 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800145e:	2200      	movs	r2, #0
 8001460:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001462:	4b08      	ldr	r3, [pc, #32]	; (8001484 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001464:	2200      	movs	r2, #0
 8001466:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800146a:	2200      	movs	r2, #0
 800146c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800146e:	4805      	ldr	r0, [pc, #20]	; (8001484 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001470:	f001 fea3 	bl	80031ba <HAL_PCD_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800147a:	f000 f98f 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200001cc 	.word	0x200001cc

08001488 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	; 0x28
 800148c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148e:	f107 0314 	add.w	r3, r7, #20
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
 800149c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800149e:	4bb8      	ldr	r3, [pc, #736]	; (8001780 <MX_GPIO_Init+0x2f8>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a2:	4ab7      	ldr	r2, [pc, #732]	; (8001780 <MX_GPIO_Init+0x2f8>)
 80014a4:	f043 0310 	orr.w	r3, r3, #16
 80014a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014aa:	4bb5      	ldr	r3, [pc, #724]	; (8001780 <MX_GPIO_Init+0x2f8>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ae:	f003 0310 	and.w	r3, r3, #16
 80014b2:	613b      	str	r3, [r7, #16]
 80014b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b6:	4bb2      	ldr	r3, [pc, #712]	; (8001780 <MX_GPIO_Init+0x2f8>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ba:	4ab1      	ldr	r2, [pc, #708]	; (8001780 <MX_GPIO_Init+0x2f8>)
 80014bc:	f043 0304 	orr.w	r3, r3, #4
 80014c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c2:	4baf      	ldr	r3, [pc, #700]	; (8001780 <MX_GPIO_Init+0x2f8>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c6:	f003 0304 	and.w	r3, r3, #4
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	4bac      	ldr	r3, [pc, #688]	; (8001780 <MX_GPIO_Init+0x2f8>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	4aab      	ldr	r2, [pc, #684]	; (8001780 <MX_GPIO_Init+0x2f8>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014da:	4ba9      	ldr	r3, [pc, #676]	; (8001780 <MX_GPIO_Init+0x2f8>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e6:	4ba6      	ldr	r3, [pc, #664]	; (8001780 <MX_GPIO_Init+0x2f8>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ea:	4aa5      	ldr	r2, [pc, #660]	; (8001780 <MX_GPIO_Init+0x2f8>)
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f2:	4ba3      	ldr	r3, [pc, #652]	; (8001780 <MX_GPIO_Init+0x2f8>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014fe:	4ba0      	ldr	r3, [pc, #640]	; (8001780 <MX_GPIO_Init+0x2f8>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001502:	4a9f      	ldr	r2, [pc, #636]	; (8001780 <MX_GPIO_Init+0x2f8>)
 8001504:	f043 0308 	orr.w	r3, r3, #8
 8001508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150a:	4b9d      	ldr	r3, [pc, #628]	; (8001780 <MX_GPIO_Init+0x2f8>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001516:	2200      	movs	r2, #0
 8001518:	f44f 718a 	mov.w	r1, #276	; 0x114
 800151c:	4899      	ldr	r0, [pc, #612]	; (8001784 <MX_GPIO_Init+0x2fc>)
 800151e:	f001 f907 	bl	8002730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8001522:	2200      	movs	r2, #0
 8001524:	f248 1104 	movw	r1, #33028	; 0x8104
 8001528:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800152c:	f001 f900 	bl	8002730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001530:	2200      	movs	r2, #0
 8001532:	f24f 0114 	movw	r1, #61460	; 0xf014
 8001536:	4894      	ldr	r0, [pc, #592]	; (8001788 <MX_GPIO_Init+0x300>)
 8001538:	f001 f8fa 	bl	8002730 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 800153c:	2200      	movs	r2, #0
 800153e:	f241 0181 	movw	r1, #4225	; 0x1081
 8001542:	4892      	ldr	r0, [pc, #584]	; (800178c <MX_GPIO_Init+0x304>)
 8001544:	f001 f8f4 	bl	8002730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001548:	2201      	movs	r2, #1
 800154a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800154e:	488f      	ldr	r0, [pc, #572]	; (800178c <MX_GPIO_Init+0x304>)
 8001550:	f001 f8ee 	bl	8002730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001554:	2200      	movs	r2, #0
 8001556:	f44f 7110 	mov.w	r1, #576	; 0x240
 800155a:	488d      	ldr	r0, [pc, #564]	; (8001790 <MX_GPIO_Init+0x308>)
 800155c:	f001 f8e8 	bl	8002730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001560:	2201      	movs	r2, #1
 8001562:	2120      	movs	r1, #32
 8001564:	4888      	ldr	r0, [pc, #544]	; (8001788 <MX_GPIO_Init+0x300>)
 8001566:	f001 f8e3 	bl	8002730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800156a:	2201      	movs	r2, #1
 800156c:	2101      	movs	r1, #1
 800156e:	4885      	ldr	r0, [pc, #532]	; (8001784 <MX_GPIO_Init+0x2fc>)
 8001570:	f001 f8de 	bl	8002730 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001574:	f240 1315 	movw	r3, #277	; 0x115
 8001578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157a:	2301      	movs	r3, #1
 800157c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	4619      	mov	r1, r3
 800158c:	487d      	ldr	r0, [pc, #500]	; (8001784 <MX_GPIO_Init+0x2fc>)
 800158e:	f000 ff25 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001592:	236a      	movs	r3, #106	; 0x6a
 8001594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001596:	4b7f      	ldr	r3, [pc, #508]	; (8001794 <MX_GPIO_Init+0x30c>)
 8001598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	4619      	mov	r1, r3
 80015a4:	4877      	ldr	r0, [pc, #476]	; (8001784 <MX_GPIO_Init+0x2fc>)
 80015a6:	f000 ff19 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80015aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015b0:	4b79      	ldr	r3, [pc, #484]	; (8001798 <MX_GPIO_Init+0x310>)
 80015b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4619      	mov	r1, r3
 80015be:	4874      	ldr	r0, [pc, #464]	; (8001790 <MX_GPIO_Init+0x308>)
 80015c0:	f000 ff0c 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80015c4:	233f      	movs	r3, #63	; 0x3f
 80015c6:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015c8:	230b      	movs	r3, #11
 80015ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	4619      	mov	r1, r3
 80015d6:	486e      	ldr	r0, [pc, #440]	; (8001790 <MX_GPIO_Init+0x308>)
 80015d8:	f000 ff00 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80015dc:	f248 1304 	movw	r3, #33028	; 0x8104
 80015e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e2:	2301      	movs	r3, #1
 80015e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2300      	movs	r3, #0
 80015ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	4619      	mov	r1, r3
 80015f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f8:	f000 fef0 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80015fc:	2308      	movs	r3, #8
 80015fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001600:	2302      	movs	r3, #2
 8001602:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	2300      	movs	r3, #0
 800160a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800160c:	2301      	movs	r3, #1
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	4619      	mov	r1, r3
 8001616:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800161a:	f000 fedf 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800161e:	2310      	movs	r3, #16
 8001620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001622:	230b      	movs	r3, #11
 8001624:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	4619      	mov	r1, r3
 8001630:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001634:	f000 fed2 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001638:	23e0      	movs	r3, #224	; 0xe0
 800163a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163c:	2302      	movs	r3, #2
 800163e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001644:	2303      	movs	r3, #3
 8001646:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001648:	2305      	movs	r3, #5
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4619      	mov	r1, r3
 8001652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001656:	f000 fec1 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 800165a:	2301      	movs	r3, #1
 800165c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800165e:	4b4d      	ldr	r3, [pc, #308]	; (8001794 <MX_GPIO_Init+0x30c>)
 8001660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4619      	mov	r1, r3
 800166c:	4846      	ldr	r0, [pc, #280]	; (8001788 <MX_GPIO_Init+0x300>)
 800166e:	f000 feb5 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001672:	2302      	movs	r3, #2
 8001674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001676:	230b      	movs	r3, #11
 8001678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	4619      	mov	r1, r3
 8001684:	4840      	ldr	r0, [pc, #256]	; (8001788 <MX_GPIO_Init+0x300>)
 8001686:	f000 fea9 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800168a:	f24f 0334 	movw	r3, #61492	; 0xf034
 800168e:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001690:	2301      	movs	r3, #1
 8001692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001698:	2300      	movs	r3, #0
 800169a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	4619      	mov	r1, r3
 80016a2:	4839      	ldr	r0, [pc, #228]	; (8001788 <MX_GPIO_Init+0x300>)
 80016a4:	f000 fe9a 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80016a8:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80016ac:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016ae:	4b39      	ldr	r3, [pc, #228]	; (8001794 <MX_GPIO_Init+0x30c>)
 80016b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4619      	mov	r1, r3
 80016bc:	4833      	ldr	r0, [pc, #204]	; (800178c <MX_GPIO_Init+0x304>)
 80016be:	f000 fe8d 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80016c2:	f243 0381 	movw	r3, #12417	; 0x3081
 80016c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c8:	2301      	movs	r3, #1
 80016ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d0:	2300      	movs	r3, #0
 80016d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	4619      	mov	r1, r3
 80016da:	482c      	ldr	r0, [pc, #176]	; (800178c <MX_GPIO_Init+0x304>)
 80016dc:	f000 fe7e 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80016e0:	f44f 7310 	mov.w	r3, #576	; 0x240
 80016e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2300      	movs	r3, #0
 80016f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	4619      	mov	r1, r3
 80016f8:	4825      	ldr	r0, [pc, #148]	; (8001790 <MX_GPIO_Init+0x308>)
 80016fa:	f000 fe6f 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80016fe:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001704:	4b23      	ldr	r3, [pc, #140]	; (8001794 <MX_GPIO_Init+0x30c>)
 8001706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	4619      	mov	r1, r3
 8001712:	481f      	ldr	r0, [pc, #124]	; (8001790 <MX_GPIO_Init+0x308>)
 8001714:	f000 fe62 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001718:	2302      	movs	r3, #2
 800171a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	2302      	movs	r3, #2
 800171e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001724:	2303      	movs	r3, #3
 8001726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001728:	2305      	movs	r3, #5
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	4619      	mov	r1, r3
 8001732:	4816      	ldr	r0, [pc, #88]	; (800178c <MX_GPIO_Init+0x304>)
 8001734:	f000 fe52 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001738:	2378      	movs	r3, #120	; 0x78
 800173a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173c:	2302      	movs	r3, #2
 800173e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001744:	2303      	movs	r3, #3
 8001746:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001748:	2307      	movs	r3, #7
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	4619      	mov	r1, r3
 8001752:	480e      	ldr	r0, [pc, #56]	; (800178c <MX_GPIO_Init+0x304>)
 8001754:	f000 fe42 	bl	80023dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001758:	2200      	movs	r2, #0
 800175a:	2100      	movs	r1, #0
 800175c:	2017      	movs	r0, #23
 800175e:	f000 fcfa 	bl	8002156 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001762:	2017      	movs	r0, #23
 8001764:	f000 fd13 	bl	800218e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001768:	2200      	movs	r2, #0
 800176a:	2100      	movs	r1, #0
 800176c:	2028      	movs	r0, #40	; 0x28
 800176e:	f000 fcf2 	bl	8002156 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001772:	2028      	movs	r0, #40	; 0x28
 8001774:	f000 fd0b 	bl	800218e <HAL_NVIC_EnableIRQ>

}
 8001778:	bf00      	nop
 800177a:	3728      	adds	r7, #40	; 0x28
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40021000 	.word	0x40021000
 8001784:	48001000 	.word	0x48001000
 8001788:	48000400 	.word	0x48000400
 800178c:	48000c00 	.word	0x48000c00
 8001790:	48000800 	.word	0x48000800
 8001794:	10110000 	.word	0x10110000
 8001798:	10210000 	.word	0x10210000

0800179c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017a0:	b672      	cpsid	i
}
 80017a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <Error_Handler+0x8>
	...

080017a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ae:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <HAL_MspInit+0x44>)
 80017b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017b2:	4a0e      	ldr	r2, [pc, #56]	; (80017ec <HAL_MspInit+0x44>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6613      	str	r3, [r2, #96]	; 0x60
 80017ba:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <HAL_MspInit+0x44>)
 80017bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <HAL_MspInit+0x44>)
 80017c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ca:	4a08      	ldr	r2, [pc, #32]	; (80017ec <HAL_MspInit+0x44>)
 80017cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d0:	6593      	str	r3, [r2, #88]	; 0x58
 80017d2:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_MspInit+0x44>)
 80017d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017da:	603b      	str	r3, [r7, #0]
 80017dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	40021000 	.word	0x40021000

080017f0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08a      	sub	sp, #40	; 0x28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8001808:	4b1a      	ldr	r3, [pc, #104]	; (8001874 <HAL_DFSDM_ChannelMspInit+0x84>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d12d      	bne.n	800186c <HAL_DFSDM_ChannelMspInit+0x7c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001810:	4b19      	ldr	r3, [pc, #100]	; (8001878 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001814:	4a18      	ldr	r2, [pc, #96]	; (8001878 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001816:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800181a:	6613      	str	r3, [r2, #96]	; 0x60
 800181c:	4b16      	ldr	r3, [pc, #88]	; (8001878 <HAL_DFSDM_ChannelMspInit+0x88>)
 800181e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001820:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001828:	4b13      	ldr	r3, [pc, #76]	; (8001878 <HAL_DFSDM_ChannelMspInit+0x88>)
 800182a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182c:	4a12      	ldr	r2, [pc, #72]	; (8001878 <HAL_DFSDM_ChannelMspInit+0x88>)
 800182e:	f043 0310 	orr.w	r3, r3, #16
 8001832:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001834:	4b10      	ldr	r3, [pc, #64]	; (8001878 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001838:	f003 0310 	and.w	r3, r3, #16
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001840:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184e:	2300      	movs	r3, #0
 8001850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001852:	2306      	movs	r3, #6
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001856:	f107 0314 	add.w	r3, r7, #20
 800185a:	4619      	mov	r1, r3
 800185c:	4807      	ldr	r0, [pc, #28]	; (800187c <HAL_DFSDM_ChannelMspInit+0x8c>)
 800185e:	f000 fdbd 	bl	80023dc <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001862:	4b04      	ldr	r3, [pc, #16]	; (8001874 <HAL_DFSDM_ChannelMspInit+0x84>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	3301      	adds	r3, #1
 8001868:	4a02      	ldr	r2, [pc, #8]	; (8001874 <HAL_DFSDM_ChannelMspInit+0x84>)
 800186a:	6013      	str	r3, [r2, #0]
  }

}
 800186c:	bf00      	nop
 800186e:	3728      	adds	r7, #40	; 0x28
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	2000008c 	.word	0x2000008c
 8001878:	40021000 	.word	0x40021000
 800187c:	48001000 	.word	0x48001000

08001880 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08c      	sub	sp, #48	; 0x30
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 031c 	add.w	r3, r7, #28
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a2f      	ldr	r2, [pc, #188]	; (800195c <HAL_I2C_MspInit+0xdc>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d129      	bne.n	80018f6 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a2:	4b2f      	ldr	r3, [pc, #188]	; (8001960 <HAL_I2C_MspInit+0xe0>)
 80018a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a6:	4a2e      	ldr	r2, [pc, #184]	; (8001960 <HAL_I2C_MspInit+0xe0>)
 80018a8:	f043 0302 	orr.w	r3, r3, #2
 80018ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ae:	4b2c      	ldr	r3, [pc, #176]	; (8001960 <HAL_I2C_MspInit+0xe0>)
 80018b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	61bb      	str	r3, [r7, #24]
 80018b8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80018ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018c0:	2312      	movs	r3, #18
 80018c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018c4:	2301      	movs	r3, #1
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c8:	2303      	movs	r3, #3
 80018ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018cc:	2304      	movs	r3, #4
 80018ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d0:	f107 031c 	add.w	r3, r7, #28
 80018d4:	4619      	mov	r1, r3
 80018d6:	4823      	ldr	r0, [pc, #140]	; (8001964 <HAL_I2C_MspInit+0xe4>)
 80018d8:	f000 fd80 	bl	80023dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018dc:	4b20      	ldr	r3, [pc, #128]	; (8001960 <HAL_I2C_MspInit+0xe0>)
 80018de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e0:	4a1f      	ldr	r2, [pc, #124]	; (8001960 <HAL_I2C_MspInit+0xe0>)
 80018e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018e6:	6593      	str	r3, [r2, #88]	; 0x58
 80018e8:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <HAL_I2C_MspInit+0xe0>)
 80018ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f0:	617b      	str	r3, [r7, #20]
 80018f2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80018f4:	e02d      	b.n	8001952 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C2)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a1b      	ldr	r2, [pc, #108]	; (8001968 <HAL_I2C_MspInit+0xe8>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d128      	bne.n	8001952 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001900:	4b17      	ldr	r3, [pc, #92]	; (8001960 <HAL_I2C_MspInit+0xe0>)
 8001902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001904:	4a16      	ldr	r2, [pc, #88]	; (8001960 <HAL_I2C_MspInit+0xe0>)
 8001906:	f043 0302 	orr.w	r3, r3, #2
 800190a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800190c:	4b14      	ldr	r3, [pc, #80]	; (8001960 <HAL_I2C_MspInit+0xe0>)
 800190e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001918:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800191c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800191e:	2312      	movs	r3, #18
 8001920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001922:	2301      	movs	r3, #1
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001926:	2303      	movs	r3, #3
 8001928:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800192a:	2304      	movs	r3, #4
 800192c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192e:	f107 031c 	add.w	r3, r7, #28
 8001932:	4619      	mov	r1, r3
 8001934:	480b      	ldr	r0, [pc, #44]	; (8001964 <HAL_I2C_MspInit+0xe4>)
 8001936:	f000 fd51 	bl	80023dc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <HAL_I2C_MspInit+0xe0>)
 800193c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193e:	4a08      	ldr	r2, [pc, #32]	; (8001960 <HAL_I2C_MspInit+0xe0>)
 8001940:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001944:	6593      	str	r3, [r2, #88]	; 0x58
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_I2C_MspInit+0xe0>)
 8001948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
}
 8001952:	bf00      	nop
 8001954:	3730      	adds	r7, #48	; 0x30
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40005400 	.word	0x40005400
 8001960:	40021000 	.word	0x40021000
 8001964:	48000400 	.word	0x48000400
 8001968:	40005800 	.word	0x40005800

0800196c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08a      	sub	sp, #40	; 0x28
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a17      	ldr	r2, [pc, #92]	; (80019e8 <HAL_QSPI_MspInit+0x7c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d128      	bne.n	80019e0 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800198e:	4b17      	ldr	r3, [pc, #92]	; (80019ec <HAL_QSPI_MspInit+0x80>)
 8001990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001992:	4a16      	ldr	r2, [pc, #88]	; (80019ec <HAL_QSPI_MspInit+0x80>)
 8001994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001998:	6513      	str	r3, [r2, #80]	; 0x50
 800199a:	4b14      	ldr	r3, [pc, #80]	; (80019ec <HAL_QSPI_MspInit+0x80>)
 800199c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800199e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019a6:	4b11      	ldr	r3, [pc, #68]	; (80019ec <HAL_QSPI_MspInit+0x80>)
 80019a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019aa:	4a10      	ldr	r2, [pc, #64]	; (80019ec <HAL_QSPI_MspInit+0x80>)
 80019ac:	f043 0310 	orr.w	r3, r3, #16
 80019b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019b2:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <HAL_QSPI_MspInit+0x80>)
 80019b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b6:	f003 0310 	and.w	r3, r3, #16
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80019be:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80019c2:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c4:	2302      	movs	r3, #2
 80019c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019cc:	2303      	movs	r3, #3
 80019ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80019d0:	230a      	movs	r3, #10
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	4619      	mov	r1, r3
 80019da:	4805      	ldr	r0, [pc, #20]	; (80019f0 <HAL_QSPI_MspInit+0x84>)
 80019dc:	f000 fcfe 	bl	80023dc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80019e0:	bf00      	nop
 80019e2:	3728      	adds	r7, #40	; 0x28
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	a0001000 	.word	0xa0001000
 80019ec:	40021000 	.word	0x40021000
 80019f0:	48001000 	.word	0x48001000

080019f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	; 0x28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a17      	ldr	r2, [pc, #92]	; (8001a70 <HAL_SPI_MspInit+0x7c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d128      	bne.n	8001a68 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a16:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <HAL_SPI_MspInit+0x80>)
 8001a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1a:	4a16      	ldr	r2, [pc, #88]	; (8001a74 <HAL_SPI_MspInit+0x80>)
 8001a1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a20:	6593      	str	r3, [r2, #88]	; 0x58
 8001a22:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <HAL_SPI_MspInit+0x80>)
 8001a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a2e:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <HAL_SPI_MspInit+0x80>)
 8001a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a32:	4a10      	ldr	r2, [pc, #64]	; (8001a74 <HAL_SPI_MspInit+0x80>)
 8001a34:	f043 0304 	orr.w	r3, r3, #4
 8001a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <HAL_SPI_MspInit+0x80>)
 8001a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3e:	f003 0304 	and.w	r3, r3, #4
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001a46:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a54:	2303      	movs	r3, #3
 8001a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a58:	2306      	movs	r3, #6
 8001a5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	4619      	mov	r1, r3
 8001a62:	4805      	ldr	r0, [pc, #20]	; (8001a78 <HAL_SPI_MspInit+0x84>)
 8001a64:	f000 fcba 	bl	80023dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001a68:	bf00      	nop
 8001a6a:	3728      	adds	r7, #40	; 0x28
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40003c00 	.word	0x40003c00
 8001a74:	40021000 	.word	0x40021000
 8001a78:	48000800 	.word	0x48000800

08001a7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08e      	sub	sp, #56	; 0x38
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a46      	ldr	r2, [pc, #280]	; (8001bb4 <HAL_UART_MspInit+0x138>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d129      	bne.n	8001af2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001a9e:	4b46      	ldr	r3, [pc, #280]	; (8001bb8 <HAL_UART_MspInit+0x13c>)
 8001aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa2:	4a45      	ldr	r2, [pc, #276]	; (8001bb8 <HAL_UART_MspInit+0x13c>)
 8001aa4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001aa8:	6593      	str	r3, [r2, #88]	; 0x58
 8001aaa:	4b43      	ldr	r3, [pc, #268]	; (8001bb8 <HAL_UART_MspInit+0x13c>)
 8001aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ab2:	623b      	str	r3, [r7, #32]
 8001ab4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab6:	4b40      	ldr	r3, [pc, #256]	; (8001bb8 <HAL_UART_MspInit+0x13c>)
 8001ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aba:	4a3f      	ldr	r2, [pc, #252]	; (8001bb8 <HAL_UART_MspInit+0x13c>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ac2:	4b3d      	ldr	r3, [pc, #244]	; (8001bb8 <HAL_UART_MspInit+0x13c>)
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	61fb      	str	r3, [r7, #28]
 8001acc:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ada:	2303      	movs	r3, #3
 8001adc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ade:	2308      	movs	r3, #8
 8001ae0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aec:	f000 fc76 	bl	80023dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001af0:	e05b      	b.n	8001baa <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART1)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a31      	ldr	r2, [pc, #196]	; (8001bbc <HAL_UART_MspInit+0x140>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d128      	bne.n	8001b4e <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001afc:	4b2e      	ldr	r3, [pc, #184]	; (8001bb8 <HAL_UART_MspInit+0x13c>)
 8001afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b00:	4a2d      	ldr	r2, [pc, #180]	; (8001bb8 <HAL_UART_MspInit+0x13c>)
 8001b02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b06:	6613      	str	r3, [r2, #96]	; 0x60
 8001b08:	4b2b      	ldr	r3, [pc, #172]	; (8001bb8 <HAL_UART_MspInit+0x13c>)
 8001b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b10:	61bb      	str	r3, [r7, #24]
 8001b12:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b14:	4b28      	ldr	r3, [pc, #160]	; (8001bb8 <HAL_UART_MspInit+0x13c>)
 8001b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b18:	4a27      	ldr	r2, [pc, #156]	; (8001bb8 <HAL_UART_MspInit+0x13c>)
 8001b1a:	f043 0302 	orr.w	r3, r3, #2
 8001b1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b20:	4b25      	ldr	r3, [pc, #148]	; (8001bb8 <HAL_UART_MspInit+0x13c>)
 8001b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001b2c:	23c0      	movs	r3, #192	; 0xc0
 8001b2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b30:	2302      	movs	r3, #2
 8001b32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b3c:	2307      	movs	r3, #7
 8001b3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b44:	4619      	mov	r1, r3
 8001b46:	481e      	ldr	r0, [pc, #120]	; (8001bc0 <HAL_UART_MspInit+0x144>)
 8001b48:	f000 fc48 	bl	80023dc <HAL_GPIO_Init>
}
 8001b4c:	e02d      	b.n	8001baa <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART3)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a1c      	ldr	r2, [pc, #112]	; (8001bc4 <HAL_UART_MspInit+0x148>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d128      	bne.n	8001baa <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b58:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <HAL_UART_MspInit+0x13c>)
 8001b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5c:	4a16      	ldr	r2, [pc, #88]	; (8001bb8 <HAL_UART_MspInit+0x13c>)
 8001b5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b62:	6593      	str	r3, [r2, #88]	; 0x58
 8001b64:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <HAL_UART_MspInit+0x13c>)
 8001b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b70:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <HAL_UART_MspInit+0x13c>)
 8001b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b74:	4a10      	ldr	r2, [pc, #64]	; (8001bb8 <HAL_UART_MspInit+0x13c>)
 8001b76:	f043 0308 	orr.w	r3, r3, #8
 8001b7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b7c:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <HAL_UART_MspInit+0x13c>)
 8001b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b80:	f003 0308 	and.w	r3, r3, #8
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001b88:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b96:	2303      	movs	r3, #3
 8001b98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b9a:	2307      	movs	r3, #7
 8001b9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4808      	ldr	r0, [pc, #32]	; (8001bc8 <HAL_UART_MspInit+0x14c>)
 8001ba6:	f000 fc19 	bl	80023dc <HAL_GPIO_Init>
}
 8001baa:	bf00      	nop
 8001bac:	3738      	adds	r7, #56	; 0x38
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40004c00 	.word	0x40004c00
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40013800 	.word	0x40013800
 8001bc0:	48000400 	.word	0x48000400
 8001bc4:	40004800 	.word	0x40004800
 8001bc8:	48000c00 	.word	0x48000c00

08001bcc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08a      	sub	sp, #40	; 0x28
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd4:	f107 0314 	add.w	r3, r7, #20
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bec:	d154      	bne.n	8001c98 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bee:	4b2c      	ldr	r3, [pc, #176]	; (8001ca0 <HAL_PCD_MspInit+0xd4>)
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf2:	4a2b      	ldr	r2, [pc, #172]	; (8001ca0 <HAL_PCD_MspInit+0xd4>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bfa:	4b29      	ldr	r3, [pc, #164]	; (8001ca0 <HAL_PCD_MspInit+0xd4>)
 8001bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001c06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c1e:	f000 fbdd 	bl	80023dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001c22:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001c26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c30:	2303      	movs	r3, #3
 8001c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c34:	230a      	movs	r3, #10
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c42:	f000 fbcb 	bl	80023dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001c46:	4b16      	ldr	r3, [pc, #88]	; (8001ca0 <HAL_PCD_MspInit+0xd4>)
 8001c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4a:	4a15      	ldr	r2, [pc, #84]	; (8001ca0 <HAL_PCD_MspInit+0xd4>)
 8001c4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c52:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <HAL_PCD_MspInit+0xd4>)
 8001c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c5e:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <HAL_PCD_MspInit+0xd4>)
 8001c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d114      	bne.n	8001c94 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <HAL_PCD_MspInit+0xd4>)
 8001c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6e:	4a0c      	ldr	r2, [pc, #48]	; (8001ca0 <HAL_PCD_MspInit+0xd4>)
 8001c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c74:	6593      	str	r3, [r2, #88]	; 0x58
 8001c76:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <HAL_PCD_MspInit+0xd4>)
 8001c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	60bb      	str	r3, [r7, #8]
 8001c80:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001c82:	f001 fc57 	bl	8003534 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c86:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <HAL_PCD_MspInit+0xd4>)
 8001c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8a:	4a05      	ldr	r2, [pc, #20]	; (8001ca0 <HAL_PCD_MspInit+0xd4>)
 8001c8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c90:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001c92:	e001      	b.n	8001c98 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8001c94:	f001 fc4e 	bl	8003534 <HAL_PWREx_EnableVddUSB>
}
 8001c98:	bf00      	nop
 8001c9a:	3728      	adds	r7, #40	; 0x28
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40021000 	.word	0x40021000

08001ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ca8:	e7fe      	b.n	8001ca8 <NMI_Handler+0x4>

08001caa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cae:	e7fe      	b.n	8001cae <HardFault_Handler+0x4>

08001cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb4:	e7fe      	b.n	8001cb4 <MemManage_Handler+0x4>

08001cb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cba:	e7fe      	b.n	8001cba <BusFault_Handler+0x4>

08001cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <UsageFault_Handler+0x4>

08001cc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cf0:	f000 f912 	bl	8001f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cf4:	bf00      	nop
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001cfc:	2020      	movs	r0, #32
 8001cfe:	f000 fd49 	bl	8002794 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001d02:	2040      	movs	r0, #64	; 0x40
 8001d04:	f000 fd46 	bl	8002794 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001d08:	2080      	movs	r0, #128	; 0x80
 8001d0a:	f000 fd43 	bl	8002794 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001d0e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001d12:	f000 fd3f 	bl	8002794 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001d1e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001d22:	f000 fd37 	bl	8002794 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001d26:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001d2a:	f000 fd33 	bl	8002794 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001d2e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d32:	f000 fd2f 	bl	8002794 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001d36:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001d3a:	f000 fd2b 	bl	8002794 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001d3e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001d42:	f000 fd27 	bl	8002794 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
	...

08001d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d54:	4a14      	ldr	r2, [pc, #80]	; (8001da8 <_sbrk+0x5c>)
 8001d56:	4b15      	ldr	r3, [pc, #84]	; (8001dac <_sbrk+0x60>)
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d60:	4b13      	ldr	r3, [pc, #76]	; (8001db0 <_sbrk+0x64>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d102      	bne.n	8001d6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d68:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <_sbrk+0x64>)
 8001d6a:	4a12      	ldr	r2, [pc, #72]	; (8001db4 <_sbrk+0x68>)
 8001d6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d6e:	4b10      	ldr	r3, [pc, #64]	; (8001db0 <_sbrk+0x64>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4413      	add	r3, r2
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d207      	bcs.n	8001d8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d7c:	f004 f80e 	bl	8005d9c <__errno>
 8001d80:	4603      	mov	r3, r0
 8001d82:	220c      	movs	r2, #12
 8001d84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d86:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8a:	e009      	b.n	8001da0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d8c:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <_sbrk+0x64>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d92:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <_sbrk+0x64>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4413      	add	r3, r2
 8001d9a:	4a05      	ldr	r2, [pc, #20]	; (8001db0 <_sbrk+0x64>)
 8001d9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20018000 	.word	0x20018000
 8001dac:	00000400 	.word	0x00000400
 8001db0:	20000090 	.word	0x20000090
 8001db4:	200007f8 	.word	0x200007f8

08001db8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001dbc:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <SystemInit+0x5c>)
 8001dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dc2:	4a14      	ldr	r2, [pc, #80]	; (8001e14 <SystemInit+0x5c>)
 8001dc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001dcc:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <SystemInit+0x60>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a11      	ldr	r2, [pc, #68]	; (8001e18 <SystemInit+0x60>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001dd8:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <SystemInit+0x60>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001dde:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <SystemInit+0x60>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a0d      	ldr	r2, [pc, #52]	; (8001e18 <SystemInit+0x60>)
 8001de4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001de8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001dec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001dee:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <SystemInit+0x60>)
 8001df0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001df4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001df6:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <SystemInit+0x60>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a07      	ldr	r2, [pc, #28]	; (8001e18 <SystemInit+0x60>)
 8001dfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e00:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001e02:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <SystemInit+0x60>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	e000ed00 	.word	0xe000ed00
 8001e18:	40021000 	.word	0x40021000

08001e1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e20:	f7ff ffca 	bl	8001db8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001e24:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001e26:	e003      	b.n	8001e30 <LoopCopyDataInit>

08001e28 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001e28:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001e2a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001e2c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001e2e:	3104      	adds	r1, #4

08001e30 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001e30:	480a      	ldr	r0, [pc, #40]	; (8001e5c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001e32:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001e34:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001e36:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001e38:	d3f6      	bcc.n	8001e28 <CopyDataInit>
	ldr	r2, =_sbss
 8001e3a:	4a0a      	ldr	r2, [pc, #40]	; (8001e64 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001e3c:	e002      	b.n	8001e44 <LoopFillZerobss>

08001e3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001e3e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001e40:	f842 3b04 	str.w	r3, [r2], #4

08001e44 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001e44:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <LoopForever+0x16>)
	cmp	r2, r3
 8001e46:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001e48:	d3f9      	bcc.n	8001e3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e4a:	f003 ffad 	bl	8005da8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e4e:	f7fe ffe7 	bl	8000e20 <main>

08001e52 <LoopForever>:

LoopForever:
    b LoopForever
 8001e52:	e7fe      	b.n	8001e52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e54:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001e58:	08006910 	.word	0x08006910
	ldr	r0, =_sdata
 8001e5c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001e60:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001e64:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001e68:	200007f8 	.word	0x200007f8

08001e6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e6c:	e7fe      	b.n	8001e6c <ADC1_2_IRQHandler>

08001e6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e74:	2300      	movs	r3, #0
 8001e76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e78:	2003      	movs	r0, #3
 8001e7a:	f000 f961 	bl	8002140 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f000 f80e 	bl	8001ea0 <HAL_InitTick>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d002      	beq.n	8001e90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	71fb      	strb	r3, [r7, #7]
 8001e8e:	e001      	b.n	8001e94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e90:	f7ff fc8a 	bl	80017a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e94:	79fb      	ldrb	r3, [r7, #7]
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001eac:	4b17      	ldr	r3, [pc, #92]	; (8001f0c <HAL_InitTick+0x6c>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d023      	beq.n	8001efc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001eb4:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <HAL_InitTick+0x70>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4b14      	ldr	r3, [pc, #80]	; (8001f0c <HAL_InitTick+0x6c>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 f96d 	bl	80021aa <HAL_SYSTICK_Config>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10f      	bne.n	8001ef6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b0f      	cmp	r3, #15
 8001eda:	d809      	bhi.n	8001ef0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001edc:	2200      	movs	r2, #0
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee4:	f000 f937 	bl	8002156 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ee8:	4a0a      	ldr	r2, [pc, #40]	; (8001f14 <HAL_InitTick+0x74>)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	e007      	b.n	8001f00 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	73fb      	strb	r3, [r7, #15]
 8001ef4:	e004      	b.n	8001f00 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	73fb      	strb	r3, [r7, #15]
 8001efa:	e001      	b.n	8001f00 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20000008 	.word	0x20000008
 8001f10:	20000000 	.word	0x20000000
 8001f14:	20000004 	.word	0x20000004

08001f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f1c:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <HAL_IncTick+0x20>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	461a      	mov	r2, r3
 8001f22:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <HAL_IncTick+0x24>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4413      	add	r3, r2
 8001f28:	4a04      	ldr	r2, [pc, #16]	; (8001f3c <HAL_IncTick+0x24>)
 8001f2a:	6013      	str	r3, [r2, #0]
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	20000008 	.word	0x20000008
 8001f3c:	200007e4 	.word	0x200007e4

08001f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return uwTick;
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <HAL_GetTick+0x14>)
 8001f46:	681b      	ldr	r3, [r3, #0]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	200007e4 	.word	0x200007e4

08001f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f60:	f7ff ffee 	bl	8001f40 <HAL_GetTick>
 8001f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f70:	d005      	beq.n	8001f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f72:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <HAL_Delay+0x44>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f7e:	bf00      	nop
 8001f80:	f7ff ffde 	bl	8001f40 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d8f7      	bhi.n	8001f80 <HAL_Delay+0x28>
  {
  }
}
 8001f90:	bf00      	nop
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000008 	.word	0x20000008

08001fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fd2:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	60d3      	str	r3, [r2, #12]
}
 8001fd8:	bf00      	nop
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fec:	4b04      	ldr	r3, [pc, #16]	; (8002000 <__NVIC_GetPriorityGrouping+0x18>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	0a1b      	lsrs	r3, r3, #8
 8001ff2:	f003 0307 	and.w	r3, r3, #7
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	2b00      	cmp	r3, #0
 8002014:	db0b      	blt.n	800202e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	f003 021f 	and.w	r2, r3, #31
 800201c:	4907      	ldr	r1, [pc, #28]	; (800203c <__NVIC_EnableIRQ+0x38>)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	095b      	lsrs	r3, r3, #5
 8002024:	2001      	movs	r0, #1
 8002026:	fa00 f202 	lsl.w	r2, r0, r2
 800202a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	e000e100 	.word	0xe000e100

08002040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	6039      	str	r1, [r7, #0]
 800204a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800204c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002050:	2b00      	cmp	r3, #0
 8002052:	db0a      	blt.n	800206a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	b2da      	uxtb	r2, r3
 8002058:	490c      	ldr	r1, [pc, #48]	; (800208c <__NVIC_SetPriority+0x4c>)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	0112      	lsls	r2, r2, #4
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	440b      	add	r3, r1
 8002064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002068:	e00a      	b.n	8002080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	b2da      	uxtb	r2, r3
 800206e:	4908      	ldr	r1, [pc, #32]	; (8002090 <__NVIC_SetPriority+0x50>)
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	3b04      	subs	r3, #4
 8002078:	0112      	lsls	r2, r2, #4
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	440b      	add	r3, r1
 800207e:	761a      	strb	r2, [r3, #24]
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000e100 	.word	0xe000e100
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002094:	b480      	push	{r7}
 8002096:	b089      	sub	sp, #36	; 0x24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f1c3 0307 	rsb	r3, r3, #7
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	bf28      	it	cs
 80020b2:	2304      	movcs	r3, #4
 80020b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3304      	adds	r3, #4
 80020ba:	2b06      	cmp	r3, #6
 80020bc:	d902      	bls.n	80020c4 <NVIC_EncodePriority+0x30>
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3b03      	subs	r3, #3
 80020c2:	e000      	b.n	80020c6 <NVIC_EncodePriority+0x32>
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c8:	f04f 32ff 	mov.w	r2, #4294967295
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43da      	mvns	r2, r3
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	401a      	ands	r2, r3
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020dc:	f04f 31ff 	mov.w	r1, #4294967295
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	fa01 f303 	lsl.w	r3, r1, r3
 80020e6:	43d9      	mvns	r1, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ec:	4313      	orrs	r3, r2
         );
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3724      	adds	r7, #36	; 0x24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
	...

080020fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3b01      	subs	r3, #1
 8002108:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800210c:	d301      	bcc.n	8002112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800210e:	2301      	movs	r3, #1
 8002110:	e00f      	b.n	8002132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002112:	4a0a      	ldr	r2, [pc, #40]	; (800213c <SysTick_Config+0x40>)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3b01      	subs	r3, #1
 8002118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800211a:	210f      	movs	r1, #15
 800211c:	f04f 30ff 	mov.w	r0, #4294967295
 8002120:	f7ff ff8e 	bl	8002040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002124:	4b05      	ldr	r3, [pc, #20]	; (800213c <SysTick_Config+0x40>)
 8002126:	2200      	movs	r2, #0
 8002128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800212a:	4b04      	ldr	r3, [pc, #16]	; (800213c <SysTick_Config+0x40>)
 800212c:	2207      	movs	r2, #7
 800212e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	e000e010 	.word	0xe000e010

08002140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7ff ff29 	bl	8001fa0 <__NVIC_SetPriorityGrouping>
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b086      	sub	sp, #24
 800215a:	af00      	add	r7, sp, #0
 800215c:	4603      	mov	r3, r0
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	607a      	str	r2, [r7, #4]
 8002162:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002164:	2300      	movs	r3, #0
 8002166:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002168:	f7ff ff3e 	bl	8001fe8 <__NVIC_GetPriorityGrouping>
 800216c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	68b9      	ldr	r1, [r7, #8]
 8002172:	6978      	ldr	r0, [r7, #20]
 8002174:	f7ff ff8e 	bl	8002094 <NVIC_EncodePriority>
 8002178:	4602      	mov	r2, r0
 800217a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800217e:	4611      	mov	r1, r2
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff ff5d 	bl	8002040 <__NVIC_SetPriority>
}
 8002186:	bf00      	nop
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	4603      	mov	r3, r0
 8002196:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff ff31 	bl	8002004 <__NVIC_EnableIRQ>
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff ffa2 	bl	80020fc <SysTick_Config>
 80021b8:	4603      	mov	r3, r0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
	...

080021c4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e0ac      	b.n	8002330 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 f8b2 	bl	8002344 <DFSDM_GetChannelFromInstance>
 80021e0:	4603      	mov	r3, r0
 80021e2:	4a55      	ldr	r2, [pc, #340]	; (8002338 <HAL_DFSDM_ChannelInit+0x174>)
 80021e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e09f      	b.n	8002330 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff fafd 	bl	80017f0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80021f6:	4b51      	ldr	r3, [pc, #324]	; (800233c <HAL_DFSDM_ChannelInit+0x178>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	3301      	adds	r3, #1
 80021fc:	4a4f      	ldr	r2, [pc, #316]	; (800233c <HAL_DFSDM_ChannelInit+0x178>)
 80021fe:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002200:	4b4e      	ldr	r3, [pc, #312]	; (800233c <HAL_DFSDM_ChannelInit+0x178>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d125      	bne.n	8002254 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002208:	4b4d      	ldr	r3, [pc, #308]	; (8002340 <HAL_DFSDM_ChannelInit+0x17c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a4c      	ldr	r2, [pc, #304]	; (8002340 <HAL_DFSDM_ChannelInit+0x17c>)
 800220e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002212:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002214:	4b4a      	ldr	r3, [pc, #296]	; (8002340 <HAL_DFSDM_ChannelInit+0x17c>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	4948      	ldr	r1, [pc, #288]	; (8002340 <HAL_DFSDM_ChannelInit+0x17c>)
 800221e:	4313      	orrs	r3, r2
 8002220:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002222:	4b47      	ldr	r3, [pc, #284]	; (8002340 <HAL_DFSDM_ChannelInit+0x17c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a46      	ldr	r2, [pc, #280]	; (8002340 <HAL_DFSDM_ChannelInit+0x17c>)
 8002228:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800222c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	791b      	ldrb	r3, [r3, #4]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d108      	bne.n	8002248 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002236:	4b42      	ldr	r3, [pc, #264]	; (8002340 <HAL_DFSDM_ChannelInit+0x17c>)
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	3b01      	subs	r3, #1
 8002240:	041b      	lsls	r3, r3, #16
 8002242:	493f      	ldr	r1, [pc, #252]	; (8002340 <HAL_DFSDM_ChannelInit+0x17c>)
 8002244:	4313      	orrs	r3, r2
 8002246:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002248:	4b3d      	ldr	r3, [pc, #244]	; (8002340 <HAL_DFSDM_ChannelInit+0x17c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a3c      	ldr	r2, [pc, #240]	; (8002340 <HAL_DFSDM_ChannelInit+0x17c>)
 800224e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002252:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002262:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6819      	ldr	r1, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002272:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002278:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 020f 	bic.w	r2, r2, #15
 8002290:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6819      	ldr	r1, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80022a0:	431a      	orrs	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80022b8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6899      	ldr	r1, [r3, #8]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c8:	3b01      	subs	r3, #1
 80022ca:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80022cc:	431a      	orrs	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f002 0207 	and.w	r2, r2, #7
 80022e4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6859      	ldr	r1, [r3, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80022f8:	431a      	orrs	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002310:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f000 f810 	bl	8002344 <DFSDM_GetChannelFromInstance>
 8002324:	4602      	mov	r2, r0
 8002326:	4904      	ldr	r1, [pc, #16]	; (8002338 <HAL_DFSDM_ChannelInit+0x174>)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000098 	.word	0x20000098
 800233c:	20000094 	.word	0x20000094
 8002340:	40016000 	.word	0x40016000

08002344 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a1c      	ldr	r2, [pc, #112]	; (80023c0 <DFSDM_GetChannelFromInstance+0x7c>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d102      	bne.n	800235a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002354:	2300      	movs	r3, #0
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	e02b      	b.n	80023b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a19      	ldr	r2, [pc, #100]	; (80023c4 <DFSDM_GetChannelFromInstance+0x80>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d102      	bne.n	8002368 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002362:	2301      	movs	r3, #1
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	e024      	b.n	80023b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a17      	ldr	r2, [pc, #92]	; (80023c8 <DFSDM_GetChannelFromInstance+0x84>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d102      	bne.n	8002376 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002370:	2302      	movs	r3, #2
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	e01d      	b.n	80023b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a14      	ldr	r2, [pc, #80]	; (80023cc <DFSDM_GetChannelFromInstance+0x88>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d102      	bne.n	8002384 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800237e:	2304      	movs	r3, #4
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	e016      	b.n	80023b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a12      	ldr	r2, [pc, #72]	; (80023d0 <DFSDM_GetChannelFromInstance+0x8c>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d102      	bne.n	8002392 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800238c:	2305      	movs	r3, #5
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	e00f      	b.n	80023b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a0f      	ldr	r2, [pc, #60]	; (80023d4 <DFSDM_GetChannelFromInstance+0x90>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d102      	bne.n	80023a0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800239a:	2306      	movs	r3, #6
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	e008      	b.n	80023b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a0d      	ldr	r2, [pc, #52]	; (80023d8 <DFSDM_GetChannelFromInstance+0x94>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d102      	bne.n	80023ae <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80023a8:	2307      	movs	r3, #7
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	e001      	b.n	80023b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80023ae:	2303      	movs	r3, #3
 80023b0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80023b2:	68fb      	ldr	r3, [r7, #12]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	40016000 	.word	0x40016000
 80023c4:	40016020 	.word	0x40016020
 80023c8:	40016040 	.word	0x40016040
 80023cc:	40016080 	.word	0x40016080
 80023d0:	400160a0 	.word	0x400160a0
 80023d4:	400160c0 	.word	0x400160c0
 80023d8:	400160e0 	.word	0x400160e0

080023dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023dc:	b480      	push	{r7}
 80023de:	b087      	sub	sp, #28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ea:	e17f      	b.n	80026ec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	2101      	movs	r1, #1
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	fa01 f303 	lsl.w	r3, r1, r3
 80023f8:	4013      	ands	r3, r2
 80023fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 8171 	beq.w	80026e6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d00b      	beq.n	8002424 <HAL_GPIO_Init+0x48>
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b02      	cmp	r3, #2
 8002412:	d007      	beq.n	8002424 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002418:	2b11      	cmp	r3, #17
 800241a:	d003      	beq.n	8002424 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b12      	cmp	r3, #18
 8002422:	d130      	bne.n	8002486 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	2203      	movs	r2, #3
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4013      	ands	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	68da      	ldr	r2, [r3, #12]
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	4313      	orrs	r3, r2
 800244c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800245a:	2201      	movs	r2, #1
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43db      	mvns	r3, r3
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	4013      	ands	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	091b      	lsrs	r3, r3, #4
 8002470:	f003 0201 	and.w	r2, r3, #1
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	2b03      	cmp	r3, #3
 8002490:	d118      	bne.n	80024c4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002496:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002498:	2201      	movs	r2, #1
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43db      	mvns	r3, r3
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	4013      	ands	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	08db      	lsrs	r3, r3, #3
 80024ae:	f003 0201 	and.w	r2, r3, #1
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	2203      	movs	r2, #3
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	4013      	ands	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d003      	beq.n	8002504 <HAL_GPIO_Init+0x128>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b12      	cmp	r3, #18
 8002502:	d123      	bne.n	800254c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	08da      	lsrs	r2, r3, #3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3208      	adds	r2, #8
 800250c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002510:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	220f      	movs	r2, #15
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	4013      	ands	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	691a      	ldr	r2, [r3, #16]
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	08da      	lsrs	r2, r3, #3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3208      	adds	r2, #8
 8002546:	6939      	ldr	r1, [r7, #16]
 8002548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	2203      	movs	r2, #3
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4013      	ands	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 0203 	and.w	r2, r3, #3
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	4313      	orrs	r3, r2
 8002578:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 80ac 	beq.w	80026e6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800258e:	4b5f      	ldr	r3, [pc, #380]	; (800270c <HAL_GPIO_Init+0x330>)
 8002590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002592:	4a5e      	ldr	r2, [pc, #376]	; (800270c <HAL_GPIO_Init+0x330>)
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	6613      	str	r3, [r2, #96]	; 0x60
 800259a:	4b5c      	ldr	r3, [pc, #368]	; (800270c <HAL_GPIO_Init+0x330>)
 800259c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	60bb      	str	r3, [r7, #8]
 80025a4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025a6:	4a5a      	ldr	r2, [pc, #360]	; (8002710 <HAL_GPIO_Init+0x334>)
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	089b      	lsrs	r3, r3, #2
 80025ac:	3302      	adds	r3, #2
 80025ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	220f      	movs	r2, #15
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4013      	ands	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025d0:	d025      	beq.n	800261e <HAL_GPIO_Init+0x242>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a4f      	ldr	r2, [pc, #316]	; (8002714 <HAL_GPIO_Init+0x338>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d01f      	beq.n	800261a <HAL_GPIO_Init+0x23e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a4e      	ldr	r2, [pc, #312]	; (8002718 <HAL_GPIO_Init+0x33c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d019      	beq.n	8002616 <HAL_GPIO_Init+0x23a>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a4d      	ldr	r2, [pc, #308]	; (800271c <HAL_GPIO_Init+0x340>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d013      	beq.n	8002612 <HAL_GPIO_Init+0x236>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a4c      	ldr	r2, [pc, #304]	; (8002720 <HAL_GPIO_Init+0x344>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00d      	beq.n	800260e <HAL_GPIO_Init+0x232>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a4b      	ldr	r2, [pc, #300]	; (8002724 <HAL_GPIO_Init+0x348>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d007      	beq.n	800260a <HAL_GPIO_Init+0x22e>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a4a      	ldr	r2, [pc, #296]	; (8002728 <HAL_GPIO_Init+0x34c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d101      	bne.n	8002606 <HAL_GPIO_Init+0x22a>
 8002602:	2306      	movs	r3, #6
 8002604:	e00c      	b.n	8002620 <HAL_GPIO_Init+0x244>
 8002606:	2307      	movs	r3, #7
 8002608:	e00a      	b.n	8002620 <HAL_GPIO_Init+0x244>
 800260a:	2305      	movs	r3, #5
 800260c:	e008      	b.n	8002620 <HAL_GPIO_Init+0x244>
 800260e:	2304      	movs	r3, #4
 8002610:	e006      	b.n	8002620 <HAL_GPIO_Init+0x244>
 8002612:	2303      	movs	r3, #3
 8002614:	e004      	b.n	8002620 <HAL_GPIO_Init+0x244>
 8002616:	2302      	movs	r3, #2
 8002618:	e002      	b.n	8002620 <HAL_GPIO_Init+0x244>
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <HAL_GPIO_Init+0x244>
 800261e:	2300      	movs	r3, #0
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	f002 0203 	and.w	r2, r2, #3
 8002626:	0092      	lsls	r2, r2, #2
 8002628:	4093      	lsls	r3, r2
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	4313      	orrs	r3, r2
 800262e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002630:	4937      	ldr	r1, [pc, #220]	; (8002710 <HAL_GPIO_Init+0x334>)
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	089b      	lsrs	r3, r3, #2
 8002636:	3302      	adds	r3, #2
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800263e:	4b3b      	ldr	r3, [pc, #236]	; (800272c <HAL_GPIO_Init+0x350>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	43db      	mvns	r3, r3
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	4013      	ands	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	4313      	orrs	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002662:	4a32      	ldr	r2, [pc, #200]	; (800272c <HAL_GPIO_Init+0x350>)
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002668:	4b30      	ldr	r3, [pc, #192]	; (800272c <HAL_GPIO_Init+0x350>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	43db      	mvns	r3, r3
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	4013      	ands	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	4313      	orrs	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800268c:	4a27      	ldr	r2, [pc, #156]	; (800272c <HAL_GPIO_Init+0x350>)
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002692:	4b26      	ldr	r3, [pc, #152]	; (800272c <HAL_GPIO_Init+0x350>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	43db      	mvns	r3, r3
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	4013      	ands	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026b6:	4a1d      	ldr	r2, [pc, #116]	; (800272c <HAL_GPIO_Init+0x350>)
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026bc:	4b1b      	ldr	r3, [pc, #108]	; (800272c <HAL_GPIO_Init+0x350>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	43db      	mvns	r3, r3
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4013      	ands	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	4313      	orrs	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026e0:	4a12      	ldr	r2, [pc, #72]	; (800272c <HAL_GPIO_Init+0x350>)
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	3301      	adds	r3, #1
 80026ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	fa22 f303 	lsr.w	r3, r2, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f47f ae78 	bne.w	80023ec <HAL_GPIO_Init+0x10>
  }
}
 80026fc:	bf00      	nop
 80026fe:	bf00      	nop
 8002700:	371c      	adds	r7, #28
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	40021000 	.word	0x40021000
 8002710:	40010000 	.word	0x40010000
 8002714:	48000400 	.word	0x48000400
 8002718:	48000800 	.word	0x48000800
 800271c:	48000c00 	.word	0x48000c00
 8002720:	48001000 	.word	0x48001000
 8002724:	48001400 	.word	0x48001400
 8002728:	48001800 	.word	0x48001800
 800272c:	40010400 	.word	0x40010400

08002730 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	460b      	mov	r3, r1
 800273a:	807b      	strh	r3, [r7, #2]
 800273c:	4613      	mov	r3, r2
 800273e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002740:	787b      	ldrb	r3, [r7, #1]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002746:	887a      	ldrh	r2, [r7, #2]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800274c:	e002      	b.n	8002754 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800274e:	887a      	ldrh	r2, [r7, #2]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002772:	887a      	ldrh	r2, [r7, #2]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	4013      	ands	r3, r2
 8002778:	041a      	lsls	r2, r3, #16
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	43d9      	mvns	r1, r3
 800277e:	887b      	ldrh	r3, [r7, #2]
 8002780:	400b      	ands	r3, r1
 8002782:	431a      	orrs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	619a      	str	r2, [r3, #24]
}
 8002788:	bf00      	nop
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800279e:	4b08      	ldr	r3, [pc, #32]	; (80027c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027a0:	695a      	ldr	r2, [r3, #20]
 80027a2:	88fb      	ldrh	r3, [r7, #6]
 80027a4:	4013      	ands	r3, r2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d006      	beq.n	80027b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027aa:	4a05      	ldr	r2, [pc, #20]	; (80027c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027ac:	88fb      	ldrh	r3, [r7, #6]
 80027ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027b0:	88fb      	ldrh	r3, [r7, #6]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 f806 	bl	80027c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80027b8:	bf00      	nop
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40010400 	.word	0x40010400

080027c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e081      	b.n	80028f0 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d106      	bne.n	8002806 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7ff f83d 	bl	8001880 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2224      	movs	r2, #36	; 0x24
 800280a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0201 	bic.w	r2, r2, #1
 800281c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800282a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800283a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d107      	bne.n	8002854 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002850:	609a      	str	r2, [r3, #8]
 8002852:	e006      	b.n	8002862 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002860:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	2b02      	cmp	r3, #2
 8002868:	d104      	bne.n	8002874 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002872:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	6812      	ldr	r2, [r2, #0]
 800287e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002886:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002896:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	ea42 0103 	orr.w	r1, r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	021a      	lsls	r2, r3, #8
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69d9      	ldr	r1, [r3, #28]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1a      	ldr	r2, [r3, #32]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f042 0201 	orr.w	r2, r2, #1
 80028d0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2220      	movs	r2, #32
 80028dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af02      	add	r7, sp, #8
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	607a      	str	r2, [r7, #4]
 8002902:	461a      	mov	r2, r3
 8002904:	460b      	mov	r3, r1
 8002906:	817b      	strh	r3, [r7, #10]
 8002908:	4613      	mov	r3, r2
 800290a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b20      	cmp	r3, #32
 8002916:	f040 80da 	bne.w	8002ace <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002920:	2b01      	cmp	r3, #1
 8002922:	d101      	bne.n	8002928 <HAL_I2C_Master_Transmit+0x30>
 8002924:	2302      	movs	r3, #2
 8002926:	e0d3      	b.n	8002ad0 <HAL_I2C_Master_Transmit+0x1d8>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002930:	f7ff fb06 	bl	8001f40 <HAL_GetTick>
 8002934:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	2319      	movs	r3, #25
 800293c:	2201      	movs	r2, #1
 800293e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 f9e6 	bl	8002d14 <I2C_WaitOnFlagUntilTimeout>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e0be      	b.n	8002ad0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2221      	movs	r2, #33	; 0x21
 8002956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2210      	movs	r2, #16
 800295e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	893a      	ldrh	r2, [r7, #8]
 8002972:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800297e:	b29b      	uxth	r3, r3
 8002980:	2bff      	cmp	r3, #255	; 0xff
 8002982:	d90e      	bls.n	80029a2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	22ff      	movs	r2, #255	; 0xff
 8002988:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298e:	b2da      	uxtb	r2, r3
 8002990:	8979      	ldrh	r1, [r7, #10]
 8002992:	4b51      	ldr	r3, [pc, #324]	; (8002ad8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 fb48 	bl	8003030 <I2C_TransferConfig>
 80029a0:	e06c      	b.n	8002a7c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	8979      	ldrh	r1, [r7, #10]
 80029b4:	4b48      	ldr	r3, [pc, #288]	; (8002ad8 <HAL_I2C_Master_Transmit+0x1e0>)
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 fb37 	bl	8003030 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80029c2:	e05b      	b.n	8002a7c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	6a39      	ldr	r1, [r7, #32]
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 f9e3 	bl	8002d94 <I2C_WaitOnTXISFlagUntilTimeout>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e07b      	b.n	8002ad0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	781a      	ldrb	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	1c5a      	adds	r2, r3, #1
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a00:	3b01      	subs	r3, #1
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d034      	beq.n	8002a7c <HAL_I2C_Master_Transmit+0x184>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d130      	bne.n	8002a7c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	2200      	movs	r2, #0
 8002a22:	2180      	movs	r1, #128	; 0x80
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 f975 	bl	8002d14 <I2C_WaitOnFlagUntilTimeout>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e04d      	b.n	8002ad0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	2bff      	cmp	r3, #255	; 0xff
 8002a3c:	d90e      	bls.n	8002a5c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	22ff      	movs	r2, #255	; 0xff
 8002a42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	8979      	ldrh	r1, [r7, #10]
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 faeb 	bl	8003030 <I2C_TransferConfig>
 8002a5a:	e00f      	b.n	8002a7c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	8979      	ldrh	r1, [r7, #10]
 8002a6e:	2300      	movs	r3, #0
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 fada 	bl	8003030 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d19e      	bne.n	80029c4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	6a39      	ldr	r1, [r7, #32]
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 f9c2 	bl	8002e14 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e01a      	b.n	8002ad0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6859      	ldr	r1, [r3, #4]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	4b0b      	ldr	r3, [pc, #44]	; (8002adc <HAL_I2C_Master_Transmit+0x1e4>)
 8002aae:	400b      	ands	r3, r1
 8002ab0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	e000      	b.n	8002ad0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002ace:	2302      	movs	r3, #2
  }
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3718      	adds	r7, #24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	80002000 	.word	0x80002000
 8002adc:	fe00e800 	.word	0xfe00e800

08002ae0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b088      	sub	sp, #32
 8002ae4:	af02      	add	r7, sp, #8
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	607a      	str	r2, [r7, #4]
 8002aea:	461a      	mov	r2, r3
 8002aec:	460b      	mov	r3, r1
 8002aee:	817b      	strh	r3, [r7, #10]
 8002af0:	4613      	mov	r3, r2
 8002af2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b20      	cmp	r3, #32
 8002afe:	f040 80db 	bne.w	8002cb8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d101      	bne.n	8002b10 <HAL_I2C_Master_Receive+0x30>
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	e0d4      	b.n	8002cba <HAL_I2C_Master_Receive+0x1da>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b18:	f7ff fa12 	bl	8001f40 <HAL_GetTick>
 8002b1c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	2319      	movs	r3, #25
 8002b24:	2201      	movs	r2, #1
 8002b26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 f8f2 	bl	8002d14 <I2C_WaitOnFlagUntilTimeout>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e0bf      	b.n	8002cba <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2222      	movs	r2, #34	; 0x22
 8002b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2210      	movs	r2, #16
 8002b46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	893a      	ldrh	r2, [r7, #8]
 8002b5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	2bff      	cmp	r3, #255	; 0xff
 8002b6a:	d90e      	bls.n	8002b8a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	22ff      	movs	r2, #255	; 0xff
 8002b70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	8979      	ldrh	r1, [r7, #10]
 8002b7a:	4b52      	ldr	r3, [pc, #328]	; (8002cc4 <HAL_I2C_Master_Receive+0x1e4>)
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 fa54 	bl	8003030 <I2C_TransferConfig>
 8002b88:	e06d      	b.n	8002c66 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	8979      	ldrh	r1, [r7, #10]
 8002b9c:	4b49      	ldr	r3, [pc, #292]	; (8002cc4 <HAL_I2C_Master_Receive+0x1e4>)
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 fa43 	bl	8003030 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002baa:	e05c      	b.n	8002c66 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	6a39      	ldr	r1, [r7, #32]
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 f96b 	bl	8002e8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e07c      	b.n	8002cba <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	1c5a      	adds	r2, r3, #1
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d034      	beq.n	8002c66 <HAL_I2C_Master_Receive+0x186>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d130      	bne.n	8002c66 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	2180      	movs	r1, #128	; 0x80
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 f880 	bl	8002d14 <I2C_WaitOnFlagUntilTimeout>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e04d      	b.n	8002cba <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	2bff      	cmp	r3, #255	; 0xff
 8002c26:	d90e      	bls.n	8002c46 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	22ff      	movs	r2, #255	; 0xff
 8002c2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	8979      	ldrh	r1, [r7, #10]
 8002c36:	2300      	movs	r3, #0
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 f9f6 	bl	8003030 <I2C_TransferConfig>
 8002c44:	e00f      	b.n	8002c66 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	8979      	ldrh	r1, [r7, #10]
 8002c58:	2300      	movs	r3, #0
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 f9e5 	bl	8003030 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d19d      	bne.n	8002bac <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	6a39      	ldr	r1, [r7, #32]
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 f8cd 	bl	8002e14 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e01a      	b.n	8002cba <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6859      	ldr	r1, [r3, #4]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	4b0c      	ldr	r3, [pc, #48]	; (8002cc8 <HAL_I2C_Master_Receive+0x1e8>)
 8002c98:	400b      	ands	r3, r1
 8002c9a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	e000      	b.n	8002cba <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002cb8:	2302      	movs	r3, #2
  }
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3718      	adds	r7, #24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	80002400 	.word	0x80002400
 8002cc8:	fe00e800 	.word	0xfe00e800

08002ccc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d103      	bne.n	8002cea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d007      	beq.n	8002d08 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699a      	ldr	r2, [r3, #24]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0201 	orr.w	r2, r2, #1
 8002d06:	619a      	str	r2, [r3, #24]
  }
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	4613      	mov	r3, r2
 8002d22:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d24:	e022      	b.n	8002d6c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d2c:	d01e      	beq.n	8002d6c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d2e:	f7ff f907 	bl	8001f40 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d302      	bcc.n	8002d44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d113      	bne.n	8002d6c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d48:	f043 0220 	orr.w	r2, r3, #32
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2220      	movs	r2, #32
 8002d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e00f      	b.n	8002d8c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699a      	ldr	r2, [r3, #24]
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	4013      	ands	r3, r2
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	bf0c      	ite	eq
 8002d7c:	2301      	moveq	r3, #1
 8002d7e:	2300      	movne	r3, #0
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	461a      	mov	r2, r3
 8002d84:	79fb      	ldrb	r3, [r7, #7]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d0cd      	beq.n	8002d26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002da0:	e02c      	b.n	8002dfc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	68b9      	ldr	r1, [r7, #8]
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 f8dc 	bl	8002f64 <I2C_IsAcknowledgeFailed>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e02a      	b.n	8002e0c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dbc:	d01e      	beq.n	8002dfc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dbe:	f7ff f8bf 	bl	8001f40 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d302      	bcc.n	8002dd4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d113      	bne.n	8002dfc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd8:	f043 0220 	orr.w	r2, r3, #32
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2220      	movs	r2, #32
 8002de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e007      	b.n	8002e0c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d1cb      	bne.n	8002da2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e20:	e028      	b.n	8002e74 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	68b9      	ldr	r1, [r7, #8]
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 f89c 	bl	8002f64 <I2C_IsAcknowledgeFailed>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e026      	b.n	8002e84 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e36:	f7ff f883 	bl	8001f40 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d302      	bcc.n	8002e4c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d113      	bne.n	8002e74 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e50:	f043 0220 	orr.w	r2, r3, #32
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e007      	b.n	8002e84 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	f003 0320 	and.w	r3, r3, #32
 8002e7e:	2b20      	cmp	r3, #32
 8002e80:	d1cf      	bne.n	8002e22 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e98:	e055      	b.n	8002f46 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	68b9      	ldr	r1, [r7, #8]
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 f860 	bl	8002f64 <I2C_IsAcknowledgeFailed>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e053      	b.n	8002f56 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	f003 0320 	and.w	r3, r3, #32
 8002eb8:	2b20      	cmp	r3, #32
 8002eba:	d129      	bne.n	8002f10 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	f003 0304 	and.w	r3, r3, #4
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	d105      	bne.n	8002ed6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	e03f      	b.n	8002f56 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2220      	movs	r2, #32
 8002edc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6859      	ldr	r1, [r3, #4]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	4b1d      	ldr	r3, [pc, #116]	; (8002f60 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002eea:	400b      	ands	r3, r1
 8002eec:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e022      	b.n	8002f56 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f10:	f7ff f816 	bl	8001f40 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d302      	bcc.n	8002f26 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10f      	bne.n	8002f46 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2a:	f043 0220 	orr.w	r2, r3, #32
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2220      	movs	r2, #32
 8002f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e007      	b.n	8002f56 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b04      	cmp	r3, #4
 8002f52:	d1a2      	bne.n	8002e9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	fe00e800 	.word	0xfe00e800

08002f64 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	f003 0310 	and.w	r3, r3, #16
 8002f7a:	2b10      	cmp	r3, #16
 8002f7c:	d151      	bne.n	8003022 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f7e:	e022      	b.n	8002fc6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f86:	d01e      	beq.n	8002fc6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f88:	f7fe ffda 	bl	8001f40 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d302      	bcc.n	8002f9e <I2C_IsAcknowledgeFailed+0x3a>
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d113      	bne.n	8002fc6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa2:	f043 0220 	orr.w	r2, r3, #32
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2220      	movs	r2, #32
 8002fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e02e      	b.n	8003024 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	f003 0320 	and.w	r3, r3, #32
 8002fd0:	2b20      	cmp	r3, #32
 8002fd2:	d1d5      	bne.n	8002f80 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2210      	movs	r2, #16
 8002fda:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f7ff fe71 	bl	8002ccc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6859      	ldr	r1, [r3, #4]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	4b0d      	ldr	r3, [pc, #52]	; (800302c <I2C_IsAcknowledgeFailed+0xc8>)
 8002ff6:	400b      	ands	r3, r1
 8002ff8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffe:	f043 0204 	orr.w	r2, r3, #4
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e000      	b.n	8003024 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	fe00e800 	.word	0xfe00e800

08003030 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	607b      	str	r3, [r7, #4]
 800303a:	460b      	mov	r3, r1
 800303c:	817b      	strh	r3, [r7, #10]
 800303e:	4613      	mov	r3, r2
 8003040:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	0d5b      	lsrs	r3, r3, #21
 800304c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003050:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <I2C_TransferConfig+0x58>)
 8003052:	430b      	orrs	r3, r1
 8003054:	43db      	mvns	r3, r3
 8003056:	ea02 0103 	and.w	r1, r2, r3
 800305a:	897b      	ldrh	r3, [r7, #10]
 800305c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003060:	7a7b      	ldrb	r3, [r7, #9]
 8003062:	041b      	lsls	r3, r3, #16
 8003064:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003068:	431a      	orrs	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	431a      	orrs	r2, r3
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	431a      	orrs	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800307a:	bf00      	nop
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	03ff63ff 	.word	0x03ff63ff

0800308c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b20      	cmp	r3, #32
 80030a0:	d138      	bne.n	8003114 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d101      	bne.n	80030b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80030ac:	2302      	movs	r3, #2
 80030ae:	e032      	b.n	8003116 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2224      	movs	r2, #36	; 0x24
 80030bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0201 	bic.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6819      	ldr	r1, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f042 0201 	orr.w	r2, r2, #1
 80030fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2220      	movs	r2, #32
 8003104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003110:	2300      	movs	r3, #0
 8003112:	e000      	b.n	8003116 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003114:	2302      	movs	r3, #2
  }
}
 8003116:	4618      	mov	r0, r3
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003122:	b480      	push	{r7}
 8003124:	b085      	sub	sp, #20
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
 800312a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b20      	cmp	r3, #32
 8003136:	d139      	bne.n	80031ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800313e:	2b01      	cmp	r3, #1
 8003140:	d101      	bne.n	8003146 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003142:	2302      	movs	r3, #2
 8003144:	e033      	b.n	80031ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2224      	movs	r2, #36	; 0x24
 8003152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0201 	bic.w	r2, r2, #1
 8003164:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003174:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	021b      	lsls	r3, r3, #8
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	4313      	orrs	r3, r2
 800317e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0201 	orr.w	r2, r2, #1
 8003196:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2220      	movs	r2, #32
 800319c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031a8:	2300      	movs	r3, #0
 80031aa:	e000      	b.n	80031ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80031ac:	2302      	movs	r3, #2
  }
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3714      	adds	r7, #20
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031bc:	b08f      	sub	sp, #60	; 0x3c
 80031be:	af0a      	add	r7, sp, #40	; 0x28
 80031c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e116      	b.n	80033fa <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d106      	bne.n	80031ec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7fe fcf0 	bl	8001bcc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2203      	movs	r2, #3
 80031f0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d102      	bne.n	8003206 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f002 fb89 	bl	8005922 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	603b      	str	r3, [r7, #0]
 8003216:	687e      	ldr	r6, [r7, #4]
 8003218:	466d      	mov	r5, sp
 800321a:	f106 0410 	add.w	r4, r6, #16
 800321e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003220:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003222:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003224:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003226:	e894 0003 	ldmia.w	r4, {r0, r1}
 800322a:	e885 0003 	stmia.w	r5, {r0, r1}
 800322e:	1d33      	adds	r3, r6, #4
 8003230:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003232:	6838      	ldr	r0, [r7, #0]
 8003234:	f002 fb49 	bl	80058ca <USB_CoreInit>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d005      	beq.n	800324a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2202      	movs	r2, #2
 8003242:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e0d7      	b.n	80033fa <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2100      	movs	r1, #0
 8003250:	4618      	mov	r0, r3
 8003252:	f002 fb77 	bl	8005944 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003256:	2300      	movs	r3, #0
 8003258:	73fb      	strb	r3, [r7, #15]
 800325a:	e04a      	b.n	80032f2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800325c:	7bfa      	ldrb	r2, [r7, #15]
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	1a9b      	subs	r3, r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	333d      	adds	r3, #61	; 0x3d
 800326c:	2201      	movs	r2, #1
 800326e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003270:	7bfa      	ldrb	r2, [r7, #15]
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	4613      	mov	r3, r2
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	1a9b      	subs	r3, r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	333c      	adds	r3, #60	; 0x3c
 8003280:	7bfa      	ldrb	r2, [r7, #15]
 8003282:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003284:	7bfa      	ldrb	r2, [r7, #15]
 8003286:	7bfb      	ldrb	r3, [r7, #15]
 8003288:	b298      	uxth	r0, r3
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	4613      	mov	r3, r2
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	1a9b      	subs	r3, r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	3342      	adds	r3, #66	; 0x42
 8003298:	4602      	mov	r2, r0
 800329a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800329c:	7bfa      	ldrb	r2, [r7, #15]
 800329e:	6879      	ldr	r1, [r7, #4]
 80032a0:	4613      	mov	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	1a9b      	subs	r3, r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	440b      	add	r3, r1
 80032aa:	333f      	adds	r3, #63	; 0x3f
 80032ac:	2200      	movs	r2, #0
 80032ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032b0:	7bfa      	ldrb	r2, [r7, #15]
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	1a9b      	subs	r3, r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	3344      	adds	r3, #68	; 0x44
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032c4:	7bfa      	ldrb	r2, [r7, #15]
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	4613      	mov	r3, r2
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	1a9b      	subs	r3, r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	3348      	adds	r3, #72	; 0x48
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032d8:	7bfa      	ldrb	r2, [r7, #15]
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	4613      	mov	r3, r2
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	1a9b      	subs	r3, r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	440b      	add	r3, r1
 80032e6:	3350      	adds	r3, #80	; 0x50
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032ec:	7bfb      	ldrb	r3, [r7, #15]
 80032ee:	3301      	adds	r3, #1
 80032f0:	73fb      	strb	r3, [r7, #15]
 80032f2:	7bfa      	ldrb	r2, [r7, #15]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d3af      	bcc.n	800325c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032fc:	2300      	movs	r3, #0
 80032fe:	73fb      	strb	r3, [r7, #15]
 8003300:	e044      	b.n	800338c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003302:	7bfa      	ldrb	r2, [r7, #15]
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	1a9b      	subs	r3, r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	440b      	add	r3, r1
 8003310:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003314:	2200      	movs	r2, #0
 8003316:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003318:	7bfa      	ldrb	r2, [r7, #15]
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	1a9b      	subs	r3, r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	440b      	add	r3, r1
 8003326:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800332a:	7bfa      	ldrb	r2, [r7, #15]
 800332c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800332e:	7bfa      	ldrb	r2, [r7, #15]
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	1a9b      	subs	r3, r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	440b      	add	r3, r1
 800333c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003340:	2200      	movs	r2, #0
 8003342:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003344:	7bfa      	ldrb	r2, [r7, #15]
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	4613      	mov	r3, r2
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	1a9b      	subs	r3, r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800335a:	7bfa      	ldrb	r2, [r7, #15]
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	4613      	mov	r3, r2
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	1a9b      	subs	r3, r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	440b      	add	r3, r1
 8003368:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003370:	7bfa      	ldrb	r2, [r7, #15]
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	4613      	mov	r3, r2
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	1a9b      	subs	r3, r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	440b      	add	r3, r1
 800337e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003382:	2200      	movs	r2, #0
 8003384:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003386:	7bfb      	ldrb	r3, [r7, #15]
 8003388:	3301      	adds	r3, #1
 800338a:	73fb      	strb	r3, [r7, #15]
 800338c:	7bfa      	ldrb	r2, [r7, #15]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	429a      	cmp	r2, r3
 8003394:	d3b5      	bcc.n	8003302 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	603b      	str	r3, [r7, #0]
 800339c:	687e      	ldr	r6, [r7, #4]
 800339e:	466d      	mov	r5, sp
 80033a0:	f106 0410 	add.w	r4, r6, #16
 80033a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80033b4:	1d33      	adds	r3, r6, #4
 80033b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033b8:	6838      	ldr	r0, [r7, #0]
 80033ba:	f002 faed 	bl	8005998 <USB_DevInit>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d005      	beq.n	80033d0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2202      	movs	r2, #2
 80033c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e014      	b.n	80033fa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d102      	bne.n	80033ee <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 f80a 	bl	8003402 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f002 fc7d 	bl	8005cf2 <USB_DevDisconnect>

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003402 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003402:	b480      	push	{r7}
 8003404:	b085      	sub	sp, #20
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003434:	f043 0303 	orr.w	r3, r3, #3
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3714      	adds	r7, #20
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
	...

0800344c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003450:	4b05      	ldr	r3, [pc, #20]	; (8003468 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a04      	ldr	r2, [pc, #16]	; (8003468 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800345a:	6013      	str	r3, [r2, #0]
}
 800345c:	bf00      	nop
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	40007000 	.word	0x40007000

0800346c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003470:	4b04      	ldr	r3, [pc, #16]	; (8003484 <HAL_PWREx_GetVoltageRange+0x18>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003478:	4618      	mov	r0, r3
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	40007000 	.word	0x40007000

08003488 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003496:	d130      	bne.n	80034fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003498:	4b23      	ldr	r3, [pc, #140]	; (8003528 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034a4:	d038      	beq.n	8003518 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034a6:	4b20      	ldr	r3, [pc, #128]	; (8003528 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034ae:	4a1e      	ldr	r2, [pc, #120]	; (8003528 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034b6:	4b1d      	ldr	r3, [pc, #116]	; (800352c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2232      	movs	r2, #50	; 0x32
 80034bc:	fb02 f303 	mul.w	r3, r2, r3
 80034c0:	4a1b      	ldr	r2, [pc, #108]	; (8003530 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80034c2:	fba2 2303 	umull	r2, r3, r2, r3
 80034c6:	0c9b      	lsrs	r3, r3, #18
 80034c8:	3301      	adds	r3, #1
 80034ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034cc:	e002      	b.n	80034d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	3b01      	subs	r3, #1
 80034d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034d4:	4b14      	ldr	r3, [pc, #80]	; (8003528 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034e0:	d102      	bne.n	80034e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1f2      	bne.n	80034ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034e8:	4b0f      	ldr	r3, [pc, #60]	; (8003528 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f4:	d110      	bne.n	8003518 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e00f      	b.n	800351a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80034fa:	4b0b      	ldr	r3, [pc, #44]	; (8003528 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003506:	d007      	beq.n	8003518 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003508:	4b07      	ldr	r3, [pc, #28]	; (8003528 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003510:	4a05      	ldr	r2, [pc, #20]	; (8003528 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003512:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003516:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	40007000 	.word	0x40007000
 800352c:	20000000 	.word	0x20000000
 8003530:	431bde83 	.word	0x431bde83

08003534 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003538:	4b05      	ldr	r3, [pc, #20]	; (8003550 <HAL_PWREx_EnableVddUSB+0x1c>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	4a04      	ldr	r2, [pc, #16]	; (8003550 <HAL_PWREx_EnableVddUSB+0x1c>)
 800353e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003542:	6053      	str	r3, [r2, #4]
}
 8003544:	bf00      	nop
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	40007000 	.word	0x40007000

08003554 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af02      	add	r7, sp, #8
 800355a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800355c:	f7fe fcf0 	bl	8001f40 <HAL_GetTick>
 8003560:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e063      	b.n	8003634 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10b      	bne.n	8003590 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f7fe f9f3 	bl	800196c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003586:	f241 3188 	movw	r1, #5000	; 0x1388
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f858 	bl	8003640 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	3b01      	subs	r3, #1
 80035a0:	021a      	lsls	r2, r3, #8
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	2120      	movs	r1, #32
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f850 	bl	800365c <QSPI_WaitFlagStateUntilTimeout>
 80035bc:	4603      	mov	r3, r0
 80035be:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80035c0:	7afb      	ldrb	r3, [r7, #11]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d131      	bne.n	800362a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80035d0:	f023 0310 	bic.w	r3, r3, #16
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6852      	ldr	r2, [r2, #4]
 80035d8:	0611      	lsls	r1, r2, #24
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	68d2      	ldr	r2, [r2, #12]
 80035de:	4311      	orrs	r1, r2
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	6812      	ldr	r2, [r2, #0]
 80035e4:	430b      	orrs	r3, r1
 80035e6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	4b13      	ldr	r3, [pc, #76]	; (800363c <HAL_QSPI_Init+0xe8>)
 80035f0:	4013      	ands	r3, r2
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6912      	ldr	r2, [r2, #16]
 80035f6:	0411      	lsls	r1, r2, #16
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6952      	ldr	r2, [r2, #20]
 80035fc:	4311      	orrs	r1, r2
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6992      	ldr	r2, [r2, #24]
 8003602:	4311      	orrs	r1, r2
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6812      	ldr	r2, [r2, #0]
 8003608:	430b      	orrs	r3, r1
 800360a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f042 0201 	orr.w	r2, r2, #1
 800361a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003632:	7afb      	ldrb	r3, [r7, #11]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	ffe0f8fe 	.word	0xffe0f8fe

08003640 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	603b      	str	r3, [r7, #0]
 8003668:	4613      	mov	r3, r2
 800366a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800366c:	e01a      	b.n	80036a4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003674:	d016      	beq.n	80036a4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003676:	f7fe fc63 	bl	8001f40 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	429a      	cmp	r2, r3
 8003684:	d302      	bcc.n	800368c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10b      	bne.n	80036a4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2204      	movs	r2, #4
 8003690:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003698:	f043 0201 	orr.w	r2, r3, #1
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e00e      	b.n	80036c2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	4013      	ands	r3, r2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	bf14      	ite	ne
 80036b2:	2301      	movne	r3, #1
 80036b4:	2300      	moveq	r3, #0
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	461a      	mov	r2, r3
 80036ba:	79fb      	ldrb	r3, [r7, #7]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d1d6      	bne.n	800366e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b088      	sub	sp, #32
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e3d4      	b.n	8003e88 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036de:	4ba1      	ldr	r3, [pc, #644]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 030c 	and.w	r3, r3, #12
 80036e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036e8:	4b9e      	ldr	r3, [pc, #632]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f003 0303 	and.w	r3, r3, #3
 80036f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0310 	and.w	r3, r3, #16
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 80e4 	beq.w	80038c8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d007      	beq.n	8003716 <HAL_RCC_OscConfig+0x4a>
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	2b0c      	cmp	r3, #12
 800370a:	f040 808b 	bne.w	8003824 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2b01      	cmp	r3, #1
 8003712:	f040 8087 	bne.w	8003824 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003716:	4b93      	ldr	r3, [pc, #588]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d005      	beq.n	800372e <HAL_RCC_OscConfig+0x62>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e3ac      	b.n	8003e88 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1a      	ldr	r2, [r3, #32]
 8003732:	4b8c      	ldr	r3, [pc, #560]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0308 	and.w	r3, r3, #8
 800373a:	2b00      	cmp	r3, #0
 800373c:	d004      	beq.n	8003748 <HAL_RCC_OscConfig+0x7c>
 800373e:	4b89      	ldr	r3, [pc, #548]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003746:	e005      	b.n	8003754 <HAL_RCC_OscConfig+0x88>
 8003748:	4b86      	ldr	r3, [pc, #536]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 800374a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800374e:	091b      	lsrs	r3, r3, #4
 8003750:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003754:	4293      	cmp	r3, r2
 8003756:	d223      	bcs.n	80037a0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	4618      	mov	r0, r3
 800375e:	f000 fd41 	bl	80041e4 <RCC_SetFlashLatencyFromMSIRange>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e38d      	b.n	8003e88 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800376c:	4b7d      	ldr	r3, [pc, #500]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a7c      	ldr	r2, [pc, #496]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 8003772:	f043 0308 	orr.w	r3, r3, #8
 8003776:	6013      	str	r3, [r2, #0]
 8003778:	4b7a      	ldr	r3, [pc, #488]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	4977      	ldr	r1, [pc, #476]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 8003786:	4313      	orrs	r3, r2
 8003788:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800378a:	4b76      	ldr	r3, [pc, #472]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	021b      	lsls	r3, r3, #8
 8003798:	4972      	ldr	r1, [pc, #456]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 800379a:	4313      	orrs	r3, r2
 800379c:	604b      	str	r3, [r1, #4]
 800379e:	e025      	b.n	80037ec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037a0:	4b70      	ldr	r3, [pc, #448]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a6f      	ldr	r2, [pc, #444]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 80037a6:	f043 0308 	orr.w	r3, r3, #8
 80037aa:	6013      	str	r3, [r2, #0]
 80037ac:	4b6d      	ldr	r3, [pc, #436]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	496a      	ldr	r1, [pc, #424]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037be:	4b69      	ldr	r3, [pc, #420]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	021b      	lsls	r3, r3, #8
 80037cc:	4965      	ldr	r1, [pc, #404]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d109      	bne.n	80037ec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 fd01 	bl	80041e4 <RCC_SetFlashLatencyFromMSIRange>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e34d      	b.n	8003e88 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037ec:	f000 fc36 	bl	800405c <HAL_RCC_GetSysClockFreq>
 80037f0:	4602      	mov	r2, r0
 80037f2:	4b5c      	ldr	r3, [pc, #368]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	091b      	lsrs	r3, r3, #4
 80037f8:	f003 030f 	and.w	r3, r3, #15
 80037fc:	495a      	ldr	r1, [pc, #360]	; (8003968 <HAL_RCC_OscConfig+0x29c>)
 80037fe:	5ccb      	ldrb	r3, [r1, r3]
 8003800:	f003 031f 	and.w	r3, r3, #31
 8003804:	fa22 f303 	lsr.w	r3, r2, r3
 8003808:	4a58      	ldr	r2, [pc, #352]	; (800396c <HAL_RCC_OscConfig+0x2a0>)
 800380a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800380c:	4b58      	ldr	r3, [pc, #352]	; (8003970 <HAL_RCC_OscConfig+0x2a4>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4618      	mov	r0, r3
 8003812:	f7fe fb45 	bl	8001ea0 <HAL_InitTick>
 8003816:	4603      	mov	r3, r0
 8003818:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800381a:	7bfb      	ldrb	r3, [r7, #15]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d052      	beq.n	80038c6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003820:	7bfb      	ldrb	r3, [r7, #15]
 8003822:	e331      	b.n	8003e88 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d032      	beq.n	8003892 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800382c:	4b4d      	ldr	r3, [pc, #308]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a4c      	ldr	r2, [pc, #304]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 8003832:	f043 0301 	orr.w	r3, r3, #1
 8003836:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003838:	f7fe fb82 	bl	8001f40 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003840:	f7fe fb7e 	bl	8001f40 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e31a      	b.n	8003e88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003852:	4b44      	ldr	r3, [pc, #272]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0f0      	beq.n	8003840 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800385e:	4b41      	ldr	r3, [pc, #260]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a40      	ldr	r2, [pc, #256]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 8003864:	f043 0308 	orr.w	r3, r3, #8
 8003868:	6013      	str	r3, [r2, #0]
 800386a:	4b3e      	ldr	r3, [pc, #248]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	493b      	ldr	r1, [pc, #236]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 8003878:	4313      	orrs	r3, r2
 800387a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800387c:	4b39      	ldr	r3, [pc, #228]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	69db      	ldr	r3, [r3, #28]
 8003888:	021b      	lsls	r3, r3, #8
 800388a:	4936      	ldr	r1, [pc, #216]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 800388c:	4313      	orrs	r3, r2
 800388e:	604b      	str	r3, [r1, #4]
 8003890:	e01a      	b.n	80038c8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003892:	4b34      	ldr	r3, [pc, #208]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a33      	ldr	r2, [pc, #204]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 8003898:	f023 0301 	bic.w	r3, r3, #1
 800389c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800389e:	f7fe fb4f 	bl	8001f40 <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038a6:	f7fe fb4b 	bl	8001f40 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e2e7      	b.n	8003e88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038b8:	4b2a      	ldr	r3, [pc, #168]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1f0      	bne.n	80038a6 <HAL_RCC_OscConfig+0x1da>
 80038c4:	e000      	b.n	80038c8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d074      	beq.n	80039be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	2b08      	cmp	r3, #8
 80038d8:	d005      	beq.n	80038e6 <HAL_RCC_OscConfig+0x21a>
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	2b0c      	cmp	r3, #12
 80038de:	d10e      	bne.n	80038fe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	2b03      	cmp	r3, #3
 80038e4:	d10b      	bne.n	80038fe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e6:	4b1f      	ldr	r3, [pc, #124]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d064      	beq.n	80039bc <HAL_RCC_OscConfig+0x2f0>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d160      	bne.n	80039bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e2c4      	b.n	8003e88 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003906:	d106      	bne.n	8003916 <HAL_RCC_OscConfig+0x24a>
 8003908:	4b16      	ldr	r3, [pc, #88]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a15      	ldr	r2, [pc, #84]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 800390e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003912:	6013      	str	r3, [r2, #0]
 8003914:	e01d      	b.n	8003952 <HAL_RCC_OscConfig+0x286>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800391e:	d10c      	bne.n	800393a <HAL_RCC_OscConfig+0x26e>
 8003920:	4b10      	ldr	r3, [pc, #64]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a0f      	ldr	r2, [pc, #60]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 8003926:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800392a:	6013      	str	r3, [r2, #0]
 800392c:	4b0d      	ldr	r3, [pc, #52]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a0c      	ldr	r2, [pc, #48]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 8003932:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003936:	6013      	str	r3, [r2, #0]
 8003938:	e00b      	b.n	8003952 <HAL_RCC_OscConfig+0x286>
 800393a:	4b0a      	ldr	r3, [pc, #40]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a09      	ldr	r2, [pc, #36]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 8003940:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	4b07      	ldr	r3, [pc, #28]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a06      	ldr	r2, [pc, #24]	; (8003964 <HAL_RCC_OscConfig+0x298>)
 800394c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003950:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d01c      	beq.n	8003994 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395a:	f7fe faf1 	bl	8001f40 <HAL_GetTick>
 800395e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003960:	e011      	b.n	8003986 <HAL_RCC_OscConfig+0x2ba>
 8003962:	bf00      	nop
 8003964:	40021000 	.word	0x40021000
 8003968:	08006884 	.word	0x08006884
 800396c:	20000000 	.word	0x20000000
 8003970:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003974:	f7fe fae4 	bl	8001f40 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b64      	cmp	r3, #100	; 0x64
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e280      	b.n	8003e88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003986:	4baf      	ldr	r3, [pc, #700]	; (8003c44 <HAL_RCC_OscConfig+0x578>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0f0      	beq.n	8003974 <HAL_RCC_OscConfig+0x2a8>
 8003992:	e014      	b.n	80039be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003994:	f7fe fad4 	bl	8001f40 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800399c:	f7fe fad0 	bl	8001f40 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b64      	cmp	r3, #100	; 0x64
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e26c      	b.n	8003e88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039ae:	4ba5      	ldr	r3, [pc, #660]	; (8003c44 <HAL_RCC_OscConfig+0x578>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1f0      	bne.n	800399c <HAL_RCC_OscConfig+0x2d0>
 80039ba:	e000      	b.n	80039be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d060      	beq.n	8003a8c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	d005      	beq.n	80039dc <HAL_RCC_OscConfig+0x310>
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	2b0c      	cmp	r3, #12
 80039d4:	d119      	bne.n	8003a0a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d116      	bne.n	8003a0a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039dc:	4b99      	ldr	r3, [pc, #612]	; (8003c44 <HAL_RCC_OscConfig+0x578>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d005      	beq.n	80039f4 <HAL_RCC_OscConfig+0x328>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e249      	b.n	8003e88 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039f4:	4b93      	ldr	r3, [pc, #588]	; (8003c44 <HAL_RCC_OscConfig+0x578>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	061b      	lsls	r3, r3, #24
 8003a02:	4990      	ldr	r1, [pc, #576]	; (8003c44 <HAL_RCC_OscConfig+0x578>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a08:	e040      	b.n	8003a8c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d023      	beq.n	8003a5a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a12:	4b8c      	ldr	r3, [pc, #560]	; (8003c44 <HAL_RCC_OscConfig+0x578>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a8b      	ldr	r2, [pc, #556]	; (8003c44 <HAL_RCC_OscConfig+0x578>)
 8003a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1e:	f7fe fa8f 	bl	8001f40 <HAL_GetTick>
 8003a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a24:	e008      	b.n	8003a38 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a26:	f7fe fa8b 	bl	8001f40 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d901      	bls.n	8003a38 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e227      	b.n	8003e88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a38:	4b82      	ldr	r3, [pc, #520]	; (8003c44 <HAL_RCC_OscConfig+0x578>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d0f0      	beq.n	8003a26 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a44:	4b7f      	ldr	r3, [pc, #508]	; (8003c44 <HAL_RCC_OscConfig+0x578>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	061b      	lsls	r3, r3, #24
 8003a52:	497c      	ldr	r1, [pc, #496]	; (8003c44 <HAL_RCC_OscConfig+0x578>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	604b      	str	r3, [r1, #4]
 8003a58:	e018      	b.n	8003a8c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a5a:	4b7a      	ldr	r3, [pc, #488]	; (8003c44 <HAL_RCC_OscConfig+0x578>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a79      	ldr	r2, [pc, #484]	; (8003c44 <HAL_RCC_OscConfig+0x578>)
 8003a60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a66:	f7fe fa6b 	bl	8001f40 <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a6c:	e008      	b.n	8003a80 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a6e:	f7fe fa67 	bl	8001f40 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e203      	b.n	8003e88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a80:	4b70      	ldr	r3, [pc, #448]	; (8003c44 <HAL_RCC_OscConfig+0x578>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1f0      	bne.n	8003a6e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0308 	and.w	r3, r3, #8
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d03c      	beq.n	8003b12 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d01c      	beq.n	8003ada <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aa0:	4b68      	ldr	r3, [pc, #416]	; (8003c44 <HAL_RCC_OscConfig+0x578>)
 8003aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aa6:	4a67      	ldr	r2, [pc, #412]	; (8003c44 <HAL_RCC_OscConfig+0x578>)
 8003aa8:	f043 0301 	orr.w	r3, r3, #1
 8003aac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab0:	f7fe fa46 	bl	8001f40 <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ab8:	f7fe fa42 	bl	8001f40 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e1de      	b.n	8003e88 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003aca:	4b5e      	ldr	r3, [pc, #376]	; (8003c44 <HAL_RCC_OscConfig+0x578>)
 8003acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0ef      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x3ec>
 8003ad8:	e01b      	b.n	8003b12 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ada:	4b5a      	ldr	r3, [pc, #360]	; (8003c44 <HAL_RCC_OscConfig+0x578>)
 8003adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ae0:	4a58      	ldr	r2, [pc, #352]	; (8003c44 <HAL_RCC_OscConfig+0x578>)
 8003ae2:	f023 0301 	bic.w	r3, r3, #1
 8003ae6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aea:	f7fe fa29 	bl	8001f40 <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003af2:	f7fe fa25 	bl	8001f40 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e1c1      	b.n	8003e88 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b04:	4b4f      	ldr	r3, [pc, #316]	; (8003c44 <HAL_RCC_OscConfig+0x578>)
 8003b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1ef      	bne.n	8003af2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 80a6 	beq.w	8003c6c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b20:	2300      	movs	r3, #0
 8003b22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b24:	4b47      	ldr	r3, [pc, #284]	; (8003c44 <HAL_RCC_OscConfig+0x578>)
 8003b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10d      	bne.n	8003b4c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b30:	4b44      	ldr	r3, [pc, #272]	; (8003c44 <HAL_RCC_OscConfig+0x578>)
 8003b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b34:	4a43      	ldr	r2, [pc, #268]	; (8003c44 <HAL_RCC_OscConfig+0x578>)
 8003b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b3a:	6593      	str	r3, [r2, #88]	; 0x58
 8003b3c:	4b41      	ldr	r3, [pc, #260]	; (8003c44 <HAL_RCC_OscConfig+0x578>)
 8003b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b44:	60bb      	str	r3, [r7, #8]
 8003b46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b4c:	4b3e      	ldr	r3, [pc, #248]	; (8003c48 <HAL_RCC_OscConfig+0x57c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d118      	bne.n	8003b8a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b58:	4b3b      	ldr	r3, [pc, #236]	; (8003c48 <HAL_RCC_OscConfig+0x57c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a3a      	ldr	r2, [pc, #232]	; (8003c48 <HAL_RCC_OscConfig+0x57c>)
 8003b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b64:	f7fe f9ec 	bl	8001f40 <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b6c:	f7fe f9e8 	bl	8001f40 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e184      	b.n	8003e88 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b7e:	4b32      	ldr	r3, [pc, #200]	; (8003c48 <HAL_RCC_OscConfig+0x57c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0f0      	beq.n	8003b6c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d108      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x4d8>
 8003b92:	4b2c      	ldr	r3, [pc, #176]	; (8003c44 <HAL_RCC_OscConfig+0x578>)
 8003b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b98:	4a2a      	ldr	r2, [pc, #168]	; (8003c44 <HAL_RCC_OscConfig+0x578>)
 8003b9a:	f043 0301 	orr.w	r3, r3, #1
 8003b9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ba2:	e024      	b.n	8003bee <HAL_RCC_OscConfig+0x522>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	2b05      	cmp	r3, #5
 8003baa:	d110      	bne.n	8003bce <HAL_RCC_OscConfig+0x502>
 8003bac:	4b25      	ldr	r3, [pc, #148]	; (8003c44 <HAL_RCC_OscConfig+0x578>)
 8003bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb2:	4a24      	ldr	r2, [pc, #144]	; (8003c44 <HAL_RCC_OscConfig+0x578>)
 8003bb4:	f043 0304 	orr.w	r3, r3, #4
 8003bb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bbc:	4b21      	ldr	r3, [pc, #132]	; (8003c44 <HAL_RCC_OscConfig+0x578>)
 8003bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc2:	4a20      	ldr	r2, [pc, #128]	; (8003c44 <HAL_RCC_OscConfig+0x578>)
 8003bc4:	f043 0301 	orr.w	r3, r3, #1
 8003bc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bcc:	e00f      	b.n	8003bee <HAL_RCC_OscConfig+0x522>
 8003bce:	4b1d      	ldr	r3, [pc, #116]	; (8003c44 <HAL_RCC_OscConfig+0x578>)
 8003bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd4:	4a1b      	ldr	r2, [pc, #108]	; (8003c44 <HAL_RCC_OscConfig+0x578>)
 8003bd6:	f023 0301 	bic.w	r3, r3, #1
 8003bda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bde:	4b19      	ldr	r3, [pc, #100]	; (8003c44 <HAL_RCC_OscConfig+0x578>)
 8003be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be4:	4a17      	ldr	r2, [pc, #92]	; (8003c44 <HAL_RCC_OscConfig+0x578>)
 8003be6:	f023 0304 	bic.w	r3, r3, #4
 8003bea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d016      	beq.n	8003c24 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf6:	f7fe f9a3 	bl	8001f40 <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bfc:	e00a      	b.n	8003c14 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bfe:	f7fe f99f 	bl	8001f40 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e139      	b.n	8003e88 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c14:	4b0b      	ldr	r3, [pc, #44]	; (8003c44 <HAL_RCC_OscConfig+0x578>)
 8003c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0ed      	beq.n	8003bfe <HAL_RCC_OscConfig+0x532>
 8003c22:	e01a      	b.n	8003c5a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c24:	f7fe f98c 	bl	8001f40 <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c2a:	e00f      	b.n	8003c4c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c2c:	f7fe f988 	bl	8001f40 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d906      	bls.n	8003c4c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e122      	b.n	8003e88 <HAL_RCC_OscConfig+0x7bc>
 8003c42:	bf00      	nop
 8003c44:	40021000 	.word	0x40021000
 8003c48:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c4c:	4b90      	ldr	r3, [pc, #576]	; (8003e90 <HAL_RCC_OscConfig+0x7c4>)
 8003c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1e8      	bne.n	8003c2c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c5a:	7ffb      	ldrb	r3, [r7, #31]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d105      	bne.n	8003c6c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c60:	4b8b      	ldr	r3, [pc, #556]	; (8003e90 <HAL_RCC_OscConfig+0x7c4>)
 8003c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c64:	4a8a      	ldr	r2, [pc, #552]	; (8003e90 <HAL_RCC_OscConfig+0x7c4>)
 8003c66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c6a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 8108 	beq.w	8003e86 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	f040 80d0 	bne.w	8003e20 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003c80:	4b83      	ldr	r3, [pc, #524]	; (8003e90 <HAL_RCC_OscConfig+0x7c4>)
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f003 0203 	and.w	r2, r3, #3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d130      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d127      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d11f      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003cc0:	2a07      	cmp	r2, #7
 8003cc2:	bf14      	ite	ne
 8003cc4:	2201      	movne	r2, #1
 8003cc6:	2200      	moveq	r2, #0
 8003cc8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d113      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd8:	085b      	lsrs	r3, r3, #1
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d109      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cec:	085b      	lsrs	r3, r3, #1
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d06e      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	2b0c      	cmp	r3, #12
 8003cfa:	d069      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003cfc:	4b64      	ldr	r3, [pc, #400]	; (8003e90 <HAL_RCC_OscConfig+0x7c4>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d105      	bne.n	8003d14 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003d08:	4b61      	ldr	r3, [pc, #388]	; (8003e90 <HAL_RCC_OscConfig+0x7c4>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e0b7      	b.n	8003e88 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d18:	4b5d      	ldr	r3, [pc, #372]	; (8003e90 <HAL_RCC_OscConfig+0x7c4>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a5c      	ldr	r2, [pc, #368]	; (8003e90 <HAL_RCC_OscConfig+0x7c4>)
 8003d1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d22:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d24:	f7fe f90c 	bl	8001f40 <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d2c:	f7fe f908 	bl	8001f40 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e0a4      	b.n	8003e88 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d3e:	4b54      	ldr	r3, [pc, #336]	; (8003e90 <HAL_RCC_OscConfig+0x7c4>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1f0      	bne.n	8003d2c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d4a:	4b51      	ldr	r3, [pc, #324]	; (8003e90 <HAL_RCC_OscConfig+0x7c4>)
 8003d4c:	68da      	ldr	r2, [r3, #12]
 8003d4e:	4b51      	ldr	r3, [pc, #324]	; (8003e94 <HAL_RCC_OscConfig+0x7c8>)
 8003d50:	4013      	ands	r3, r2
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d5a:	3a01      	subs	r2, #1
 8003d5c:	0112      	lsls	r2, r2, #4
 8003d5e:	4311      	orrs	r1, r2
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d64:	0212      	lsls	r2, r2, #8
 8003d66:	4311      	orrs	r1, r2
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d6c:	0852      	lsrs	r2, r2, #1
 8003d6e:	3a01      	subs	r2, #1
 8003d70:	0552      	lsls	r2, r2, #21
 8003d72:	4311      	orrs	r1, r2
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d78:	0852      	lsrs	r2, r2, #1
 8003d7a:	3a01      	subs	r2, #1
 8003d7c:	0652      	lsls	r2, r2, #25
 8003d7e:	4311      	orrs	r1, r2
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d84:	0912      	lsrs	r2, r2, #4
 8003d86:	0452      	lsls	r2, r2, #17
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	4941      	ldr	r1, [pc, #260]	; (8003e90 <HAL_RCC_OscConfig+0x7c4>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d90:	4b3f      	ldr	r3, [pc, #252]	; (8003e90 <HAL_RCC_OscConfig+0x7c4>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a3e      	ldr	r2, [pc, #248]	; (8003e90 <HAL_RCC_OscConfig+0x7c4>)
 8003d96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d9a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d9c:	4b3c      	ldr	r3, [pc, #240]	; (8003e90 <HAL_RCC_OscConfig+0x7c4>)
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	4a3b      	ldr	r2, [pc, #236]	; (8003e90 <HAL_RCC_OscConfig+0x7c4>)
 8003da2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003da6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003da8:	f7fe f8ca 	bl	8001f40 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003db0:	f7fe f8c6 	bl	8001f40 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e062      	b.n	8003e88 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dc2:	4b33      	ldr	r3, [pc, #204]	; (8003e90 <HAL_RCC_OscConfig+0x7c4>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d0f0      	beq.n	8003db0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003dce:	e05a      	b.n	8003e86 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e059      	b.n	8003e88 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dd4:	4b2e      	ldr	r3, [pc, #184]	; (8003e90 <HAL_RCC_OscConfig+0x7c4>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d152      	bne.n	8003e86 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003de0:	4b2b      	ldr	r3, [pc, #172]	; (8003e90 <HAL_RCC_OscConfig+0x7c4>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a2a      	ldr	r2, [pc, #168]	; (8003e90 <HAL_RCC_OscConfig+0x7c4>)
 8003de6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003dec:	4b28      	ldr	r3, [pc, #160]	; (8003e90 <HAL_RCC_OscConfig+0x7c4>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	4a27      	ldr	r2, [pc, #156]	; (8003e90 <HAL_RCC_OscConfig+0x7c4>)
 8003df2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003df6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003df8:	f7fe f8a2 	bl	8001f40 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e00:	f7fe f89e 	bl	8001f40 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e03a      	b.n	8003e88 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e12:	4b1f      	ldr	r3, [pc, #124]	; (8003e90 <HAL_RCC_OscConfig+0x7c4>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0f0      	beq.n	8003e00 <HAL_RCC_OscConfig+0x734>
 8003e1e:	e032      	b.n	8003e86 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	2b0c      	cmp	r3, #12
 8003e24:	d02d      	beq.n	8003e82 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e26:	4b1a      	ldr	r3, [pc, #104]	; (8003e90 <HAL_RCC_OscConfig+0x7c4>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a19      	ldr	r2, [pc, #100]	; (8003e90 <HAL_RCC_OscConfig+0x7c4>)
 8003e2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e30:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003e32:	4b17      	ldr	r3, [pc, #92]	; (8003e90 <HAL_RCC_OscConfig+0x7c4>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d105      	bne.n	8003e4a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003e3e:	4b14      	ldr	r3, [pc, #80]	; (8003e90 <HAL_RCC_OscConfig+0x7c4>)
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	4a13      	ldr	r2, [pc, #76]	; (8003e90 <HAL_RCC_OscConfig+0x7c4>)
 8003e44:	f023 0303 	bic.w	r3, r3, #3
 8003e48:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003e4a:	4b11      	ldr	r3, [pc, #68]	; (8003e90 <HAL_RCC_OscConfig+0x7c4>)
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	4a10      	ldr	r2, [pc, #64]	; (8003e90 <HAL_RCC_OscConfig+0x7c4>)
 8003e50:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003e54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e58:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5a:	f7fe f871 	bl	8001f40 <HAL_GetTick>
 8003e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e60:	e008      	b.n	8003e74 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e62:	f7fe f86d 	bl	8001f40 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e009      	b.n	8003e88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e74:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <HAL_RCC_OscConfig+0x7c4>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1f0      	bne.n	8003e62 <HAL_RCC_OscConfig+0x796>
 8003e80:	e001      	b.n	8003e86 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e000      	b.n	8003e88 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3720      	adds	r7, #32
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40021000 	.word	0x40021000
 8003e94:	f99d808c 	.word	0xf99d808c

08003e98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e0c8      	b.n	800403e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003eac:	4b66      	ldr	r3, [pc, #408]	; (8004048 <HAL_RCC_ClockConfig+0x1b0>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d910      	bls.n	8003edc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eba:	4b63      	ldr	r3, [pc, #396]	; (8004048 <HAL_RCC_ClockConfig+0x1b0>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f023 0207 	bic.w	r2, r3, #7
 8003ec2:	4961      	ldr	r1, [pc, #388]	; (8004048 <HAL_RCC_ClockConfig+0x1b0>)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eca:	4b5f      	ldr	r3, [pc, #380]	; (8004048 <HAL_RCC_ClockConfig+0x1b0>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0307 	and.w	r3, r3, #7
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d001      	beq.n	8003edc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e0b0      	b.n	800403e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d04c      	beq.n	8003f82 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	2b03      	cmp	r3, #3
 8003eee:	d107      	bne.n	8003f00 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ef0:	4b56      	ldr	r3, [pc, #344]	; (800404c <HAL_RCC_ClockConfig+0x1b4>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d121      	bne.n	8003f40 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e09e      	b.n	800403e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d107      	bne.n	8003f18 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f08:	4b50      	ldr	r3, [pc, #320]	; (800404c <HAL_RCC_ClockConfig+0x1b4>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d115      	bne.n	8003f40 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e092      	b.n	800403e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d107      	bne.n	8003f30 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f20:	4b4a      	ldr	r3, [pc, #296]	; (800404c <HAL_RCC_ClockConfig+0x1b4>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d109      	bne.n	8003f40 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e086      	b.n	800403e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f30:	4b46      	ldr	r3, [pc, #280]	; (800404c <HAL_RCC_ClockConfig+0x1b4>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d101      	bne.n	8003f40 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e07e      	b.n	800403e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f40:	4b42      	ldr	r3, [pc, #264]	; (800404c <HAL_RCC_ClockConfig+0x1b4>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f023 0203 	bic.w	r2, r3, #3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	493f      	ldr	r1, [pc, #252]	; (800404c <HAL_RCC_ClockConfig+0x1b4>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f52:	f7fd fff5 	bl	8001f40 <HAL_GetTick>
 8003f56:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f58:	e00a      	b.n	8003f70 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f5a:	f7fd fff1 	bl	8001f40 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e066      	b.n	800403e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f70:	4b36      	ldr	r3, [pc, #216]	; (800404c <HAL_RCC_ClockConfig+0x1b4>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f003 020c 	and.w	r2, r3, #12
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d1eb      	bne.n	8003f5a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d008      	beq.n	8003fa0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f8e:	4b2f      	ldr	r3, [pc, #188]	; (800404c <HAL_RCC_ClockConfig+0x1b4>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	492c      	ldr	r1, [pc, #176]	; (800404c <HAL_RCC_ClockConfig+0x1b4>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fa0:	4b29      	ldr	r3, [pc, #164]	; (8004048 <HAL_RCC_ClockConfig+0x1b0>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0307 	and.w	r3, r3, #7
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d210      	bcs.n	8003fd0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fae:	4b26      	ldr	r3, [pc, #152]	; (8004048 <HAL_RCC_ClockConfig+0x1b0>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f023 0207 	bic.w	r2, r3, #7
 8003fb6:	4924      	ldr	r1, [pc, #144]	; (8004048 <HAL_RCC_ClockConfig+0x1b0>)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fbe:	4b22      	ldr	r3, [pc, #136]	; (8004048 <HAL_RCC_ClockConfig+0x1b0>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0307 	and.w	r3, r3, #7
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d001      	beq.n	8003fd0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e036      	b.n	800403e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d008      	beq.n	8003fee <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fdc:	4b1b      	ldr	r3, [pc, #108]	; (800404c <HAL_RCC_ClockConfig+0x1b4>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	4918      	ldr	r1, [pc, #96]	; (800404c <HAL_RCC_ClockConfig+0x1b4>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0308 	and.w	r3, r3, #8
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d009      	beq.n	800400e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ffa:	4b14      	ldr	r3, [pc, #80]	; (800404c <HAL_RCC_ClockConfig+0x1b4>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	4910      	ldr	r1, [pc, #64]	; (800404c <HAL_RCC_ClockConfig+0x1b4>)
 800400a:	4313      	orrs	r3, r2
 800400c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800400e:	f000 f825 	bl	800405c <HAL_RCC_GetSysClockFreq>
 8004012:	4602      	mov	r2, r0
 8004014:	4b0d      	ldr	r3, [pc, #52]	; (800404c <HAL_RCC_ClockConfig+0x1b4>)
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	091b      	lsrs	r3, r3, #4
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	490c      	ldr	r1, [pc, #48]	; (8004050 <HAL_RCC_ClockConfig+0x1b8>)
 8004020:	5ccb      	ldrb	r3, [r1, r3]
 8004022:	f003 031f 	and.w	r3, r3, #31
 8004026:	fa22 f303 	lsr.w	r3, r2, r3
 800402a:	4a0a      	ldr	r2, [pc, #40]	; (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 800402c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800402e:	4b0a      	ldr	r3, [pc, #40]	; (8004058 <HAL_RCC_ClockConfig+0x1c0>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4618      	mov	r0, r3
 8004034:	f7fd ff34 	bl	8001ea0 <HAL_InitTick>
 8004038:	4603      	mov	r3, r0
 800403a:	72fb      	strb	r3, [r7, #11]

  return status;
 800403c:	7afb      	ldrb	r3, [r7, #11]
}
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	40022000 	.word	0x40022000
 800404c:	40021000 	.word	0x40021000
 8004050:	08006884 	.word	0x08006884
 8004054:	20000000 	.word	0x20000000
 8004058:	20000004 	.word	0x20000004

0800405c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800405c:	b480      	push	{r7}
 800405e:	b089      	sub	sp, #36	; 0x24
 8004060:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004062:	2300      	movs	r3, #0
 8004064:	61fb      	str	r3, [r7, #28]
 8004066:	2300      	movs	r3, #0
 8004068:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800406a:	4b3e      	ldr	r3, [pc, #248]	; (8004164 <HAL_RCC_GetSysClockFreq+0x108>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 030c 	and.w	r3, r3, #12
 8004072:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004074:	4b3b      	ldr	r3, [pc, #236]	; (8004164 <HAL_RCC_GetSysClockFreq+0x108>)
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	f003 0303 	and.w	r3, r3, #3
 800407c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d005      	beq.n	8004090 <HAL_RCC_GetSysClockFreq+0x34>
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	2b0c      	cmp	r3, #12
 8004088:	d121      	bne.n	80040ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d11e      	bne.n	80040ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004090:	4b34      	ldr	r3, [pc, #208]	; (8004164 <HAL_RCC_GetSysClockFreq+0x108>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0308 	and.w	r3, r3, #8
 8004098:	2b00      	cmp	r3, #0
 800409a:	d107      	bne.n	80040ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800409c:	4b31      	ldr	r3, [pc, #196]	; (8004164 <HAL_RCC_GetSysClockFreq+0x108>)
 800409e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040a2:	0a1b      	lsrs	r3, r3, #8
 80040a4:	f003 030f 	and.w	r3, r3, #15
 80040a8:	61fb      	str	r3, [r7, #28]
 80040aa:	e005      	b.n	80040b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80040ac:	4b2d      	ldr	r3, [pc, #180]	; (8004164 <HAL_RCC_GetSysClockFreq+0x108>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	091b      	lsrs	r3, r3, #4
 80040b2:	f003 030f 	and.w	r3, r3, #15
 80040b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80040b8:	4a2b      	ldr	r2, [pc, #172]	; (8004168 <HAL_RCC_GetSysClockFreq+0x10c>)
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10d      	bne.n	80040e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040cc:	e00a      	b.n	80040e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	2b04      	cmp	r3, #4
 80040d2:	d102      	bne.n	80040da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80040d4:	4b25      	ldr	r3, [pc, #148]	; (800416c <HAL_RCC_GetSysClockFreq+0x110>)
 80040d6:	61bb      	str	r3, [r7, #24]
 80040d8:	e004      	b.n	80040e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	2b08      	cmp	r3, #8
 80040de:	d101      	bne.n	80040e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80040e0:	4b23      	ldr	r3, [pc, #140]	; (8004170 <HAL_RCC_GetSysClockFreq+0x114>)
 80040e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	2b0c      	cmp	r3, #12
 80040e8:	d134      	bne.n	8004154 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040ea:	4b1e      	ldr	r3, [pc, #120]	; (8004164 <HAL_RCC_GetSysClockFreq+0x108>)
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	f003 0303 	and.w	r3, r3, #3
 80040f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d003      	beq.n	8004102 <HAL_RCC_GetSysClockFreq+0xa6>
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	2b03      	cmp	r3, #3
 80040fe:	d003      	beq.n	8004108 <HAL_RCC_GetSysClockFreq+0xac>
 8004100:	e005      	b.n	800410e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004102:	4b1a      	ldr	r3, [pc, #104]	; (800416c <HAL_RCC_GetSysClockFreq+0x110>)
 8004104:	617b      	str	r3, [r7, #20]
      break;
 8004106:	e005      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004108:	4b19      	ldr	r3, [pc, #100]	; (8004170 <HAL_RCC_GetSysClockFreq+0x114>)
 800410a:	617b      	str	r3, [r7, #20]
      break;
 800410c:	e002      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	617b      	str	r3, [r7, #20]
      break;
 8004112:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004114:	4b13      	ldr	r3, [pc, #76]	; (8004164 <HAL_RCC_GetSysClockFreq+0x108>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	091b      	lsrs	r3, r3, #4
 800411a:	f003 0307 	and.w	r3, r3, #7
 800411e:	3301      	adds	r3, #1
 8004120:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004122:	4b10      	ldr	r3, [pc, #64]	; (8004164 <HAL_RCC_GetSysClockFreq+0x108>)
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	0a1b      	lsrs	r3, r3, #8
 8004128:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	fb02 f203 	mul.w	r2, r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	fbb2 f3f3 	udiv	r3, r2, r3
 8004138:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800413a:	4b0a      	ldr	r3, [pc, #40]	; (8004164 <HAL_RCC_GetSysClockFreq+0x108>)
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	0e5b      	lsrs	r3, r3, #25
 8004140:	f003 0303 	and.w	r3, r3, #3
 8004144:	3301      	adds	r3, #1
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004152:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004154:	69bb      	ldr	r3, [r7, #24]
}
 8004156:	4618      	mov	r0, r3
 8004158:	3724      	adds	r7, #36	; 0x24
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	40021000 	.word	0x40021000
 8004168:	0800689c 	.word	0x0800689c
 800416c:	00f42400 	.word	0x00f42400
 8004170:	007a1200 	.word	0x007a1200

08004174 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004178:	4b03      	ldr	r3, [pc, #12]	; (8004188 <HAL_RCC_GetHCLKFreq+0x14>)
 800417a:	681b      	ldr	r3, [r3, #0]
}
 800417c:	4618      	mov	r0, r3
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	20000000 	.word	0x20000000

0800418c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004190:	f7ff fff0 	bl	8004174 <HAL_RCC_GetHCLKFreq>
 8004194:	4602      	mov	r2, r0
 8004196:	4b06      	ldr	r3, [pc, #24]	; (80041b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	0a1b      	lsrs	r3, r3, #8
 800419c:	f003 0307 	and.w	r3, r3, #7
 80041a0:	4904      	ldr	r1, [pc, #16]	; (80041b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80041a2:	5ccb      	ldrb	r3, [r1, r3]
 80041a4:	f003 031f 	and.w	r3, r3, #31
 80041a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40021000 	.word	0x40021000
 80041b4:	08006894 	.word	0x08006894

080041b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80041bc:	f7ff ffda 	bl	8004174 <HAL_RCC_GetHCLKFreq>
 80041c0:	4602      	mov	r2, r0
 80041c2:	4b06      	ldr	r3, [pc, #24]	; (80041dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	0adb      	lsrs	r3, r3, #11
 80041c8:	f003 0307 	and.w	r3, r3, #7
 80041cc:	4904      	ldr	r1, [pc, #16]	; (80041e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80041ce:	5ccb      	ldrb	r3, [r1, r3]
 80041d0:	f003 031f 	and.w	r3, r3, #31
 80041d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041d8:	4618      	mov	r0, r3
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	40021000 	.word	0x40021000
 80041e0:	08006894 	.word	0x08006894

080041e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80041ec:	2300      	movs	r3, #0
 80041ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80041f0:	4b2a      	ldr	r3, [pc, #168]	; (800429c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d003      	beq.n	8004204 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80041fc:	f7ff f936 	bl	800346c <HAL_PWREx_GetVoltageRange>
 8004200:	6178      	str	r0, [r7, #20]
 8004202:	e014      	b.n	800422e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004204:	4b25      	ldr	r3, [pc, #148]	; (800429c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004208:	4a24      	ldr	r2, [pc, #144]	; (800429c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800420a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800420e:	6593      	str	r3, [r2, #88]	; 0x58
 8004210:	4b22      	ldr	r3, [pc, #136]	; (800429c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800421c:	f7ff f926 	bl	800346c <HAL_PWREx_GetVoltageRange>
 8004220:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004222:	4b1e      	ldr	r3, [pc, #120]	; (800429c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004226:	4a1d      	ldr	r2, [pc, #116]	; (800429c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800422c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004234:	d10b      	bne.n	800424e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b80      	cmp	r3, #128	; 0x80
 800423a:	d919      	bls.n	8004270 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2ba0      	cmp	r3, #160	; 0xa0
 8004240:	d902      	bls.n	8004248 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004242:	2302      	movs	r3, #2
 8004244:	613b      	str	r3, [r7, #16]
 8004246:	e013      	b.n	8004270 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004248:	2301      	movs	r3, #1
 800424a:	613b      	str	r3, [r7, #16]
 800424c:	e010      	b.n	8004270 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b80      	cmp	r3, #128	; 0x80
 8004252:	d902      	bls.n	800425a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004254:	2303      	movs	r3, #3
 8004256:	613b      	str	r3, [r7, #16]
 8004258:	e00a      	b.n	8004270 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b80      	cmp	r3, #128	; 0x80
 800425e:	d102      	bne.n	8004266 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004260:	2302      	movs	r3, #2
 8004262:	613b      	str	r3, [r7, #16]
 8004264:	e004      	b.n	8004270 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b70      	cmp	r3, #112	; 0x70
 800426a:	d101      	bne.n	8004270 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800426c:	2301      	movs	r3, #1
 800426e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004270:	4b0b      	ldr	r3, [pc, #44]	; (80042a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f023 0207 	bic.w	r2, r3, #7
 8004278:	4909      	ldr	r1, [pc, #36]	; (80042a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	4313      	orrs	r3, r2
 800427e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004280:	4b07      	ldr	r3, [pc, #28]	; (80042a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	429a      	cmp	r2, r3
 800428c:	d001      	beq.n	8004292 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e000      	b.n	8004294 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3718      	adds	r7, #24
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	40021000 	.word	0x40021000
 80042a0:	40022000 	.word	0x40022000

080042a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042ac:	2300      	movs	r3, #0
 80042ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042b0:	2300      	movs	r3, #0
 80042b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d041      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042c8:	d02a      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80042ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042ce:	d824      	bhi.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80042d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042d4:	d008      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80042d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042da:	d81e      	bhi.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00a      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80042e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042e4:	d010      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80042e6:	e018      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042e8:	4b86      	ldr	r3, [pc, #536]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	4a85      	ldr	r2, [pc, #532]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042f4:	e015      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	3304      	adds	r3, #4
 80042fa:	2100      	movs	r1, #0
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 facb 	bl	8004898 <RCCEx_PLLSAI1_Config>
 8004302:	4603      	mov	r3, r0
 8004304:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004306:	e00c      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	3320      	adds	r3, #32
 800430c:	2100      	movs	r1, #0
 800430e:	4618      	mov	r0, r3
 8004310:	f000 fbb6 	bl	8004a80 <RCCEx_PLLSAI2_Config>
 8004314:	4603      	mov	r3, r0
 8004316:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004318:	e003      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	74fb      	strb	r3, [r7, #19]
      break;
 800431e:	e000      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004320:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004322:	7cfb      	ldrb	r3, [r7, #19]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10b      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004328:	4b76      	ldr	r3, [pc, #472]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800432a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004336:	4973      	ldr	r1, [pc, #460]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004338:	4313      	orrs	r3, r2
 800433a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800433e:	e001      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004340:	7cfb      	ldrb	r3, [r7, #19]
 8004342:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d041      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004354:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004358:	d02a      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800435a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800435e:	d824      	bhi.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004360:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004364:	d008      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004366:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800436a:	d81e      	bhi.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00a      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004374:	d010      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004376:	e018      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004378:	4b62      	ldr	r3, [pc, #392]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	4a61      	ldr	r2, [pc, #388]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800437e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004382:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004384:	e015      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	3304      	adds	r3, #4
 800438a:	2100      	movs	r1, #0
 800438c:	4618      	mov	r0, r3
 800438e:	f000 fa83 	bl	8004898 <RCCEx_PLLSAI1_Config>
 8004392:	4603      	mov	r3, r0
 8004394:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004396:	e00c      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3320      	adds	r3, #32
 800439c:	2100      	movs	r1, #0
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 fb6e 	bl	8004a80 <RCCEx_PLLSAI2_Config>
 80043a4:	4603      	mov	r3, r0
 80043a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043a8:	e003      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	74fb      	strb	r3, [r7, #19]
      break;
 80043ae:	e000      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80043b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043b2:	7cfb      	ldrb	r3, [r7, #19]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10b      	bne.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80043b8:	4b52      	ldr	r3, [pc, #328]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043be:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043c6:	494f      	ldr	r1, [pc, #316]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80043ce:	e001      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d0:	7cfb      	ldrb	r3, [r7, #19]
 80043d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 80a0 	beq.w	8004522 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043e2:	2300      	movs	r3, #0
 80043e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043e6:	4b47      	ldr	r3, [pc, #284]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80043f2:	2301      	movs	r3, #1
 80043f4:	e000      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80043f6:	2300      	movs	r3, #0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00d      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043fc:	4b41      	ldr	r3, [pc, #260]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004400:	4a40      	ldr	r2, [pc, #256]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004406:	6593      	str	r3, [r2, #88]	; 0x58
 8004408:	4b3e      	ldr	r3, [pc, #248]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800440a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004410:	60bb      	str	r3, [r7, #8]
 8004412:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004414:	2301      	movs	r3, #1
 8004416:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004418:	4b3b      	ldr	r3, [pc, #236]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a3a      	ldr	r2, [pc, #232]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800441e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004422:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004424:	f7fd fd8c 	bl	8001f40 <HAL_GetTick>
 8004428:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800442a:	e009      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800442c:	f7fd fd88 	bl	8001f40 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b02      	cmp	r3, #2
 8004438:	d902      	bls.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	74fb      	strb	r3, [r7, #19]
        break;
 800443e:	e005      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004440:	4b31      	ldr	r3, [pc, #196]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0ef      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800444c:	7cfb      	ldrb	r3, [r7, #19]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d15c      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004452:	4b2c      	ldr	r3, [pc, #176]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004458:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800445c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d01f      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	429a      	cmp	r2, r3
 800446e:	d019      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004470:	4b24      	ldr	r3, [pc, #144]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800447a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800447c:	4b21      	ldr	r3, [pc, #132]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800447e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004482:	4a20      	ldr	r2, [pc, #128]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800448c:	4b1d      	ldr	r3, [pc, #116]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800448e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004492:	4a1c      	ldr	r2, [pc, #112]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800449c:	4a19      	ldr	r2, [pc, #100]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d016      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ae:	f7fd fd47 	bl	8001f40 <HAL_GetTick>
 80044b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044b4:	e00b      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044b6:	f7fd fd43 	bl	8001f40 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d902      	bls.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	74fb      	strb	r3, [r7, #19]
            break;
 80044cc:	e006      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044ce:	4b0d      	ldr	r3, [pc, #52]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0ec      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80044dc:	7cfb      	ldrb	r3, [r7, #19]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10c      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044e2:	4b08      	ldr	r3, [pc, #32]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044f2:	4904      	ldr	r1, [pc, #16]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80044fa:	e009      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044fc:	7cfb      	ldrb	r3, [r7, #19]
 80044fe:	74bb      	strb	r3, [r7, #18]
 8004500:	e006      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004502:	bf00      	nop
 8004504:	40021000 	.word	0x40021000
 8004508:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800450c:	7cfb      	ldrb	r3, [r7, #19]
 800450e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004510:	7c7b      	ldrb	r3, [r7, #17]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d105      	bne.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004516:	4b9e      	ldr	r3, [pc, #632]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800451a:	4a9d      	ldr	r2, [pc, #628]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800451c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004520:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00a      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800452e:	4b98      	ldr	r3, [pc, #608]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004534:	f023 0203 	bic.w	r2, r3, #3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453c:	4994      	ldr	r1, [pc, #592]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800453e:	4313      	orrs	r3, r2
 8004540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00a      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004550:	4b8f      	ldr	r3, [pc, #572]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004556:	f023 020c 	bic.w	r2, r3, #12
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800455e:	498c      	ldr	r1, [pc, #560]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004560:	4313      	orrs	r3, r2
 8004562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0304 	and.w	r3, r3, #4
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00a      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004572:	4b87      	ldr	r3, [pc, #540]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004578:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004580:	4983      	ldr	r1, [pc, #524]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004582:	4313      	orrs	r3, r2
 8004584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0308 	and.w	r3, r3, #8
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00a      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004594:	4b7e      	ldr	r3, [pc, #504]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a2:	497b      	ldr	r1, [pc, #492]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0310 	and.w	r3, r3, #16
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00a      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045b6:	4b76      	ldr	r3, [pc, #472]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045c4:	4972      	ldr	r1, [pc, #456]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0320 	and.w	r3, r3, #32
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00a      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045d8:	4b6d      	ldr	r3, [pc, #436]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045e6:	496a      	ldr	r1, [pc, #424]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045fa:	4b65      	ldr	r3, [pc, #404]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004600:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004608:	4961      	ldr	r1, [pc, #388]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800460a:	4313      	orrs	r3, r2
 800460c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00a      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800461c:	4b5c      	ldr	r3, [pc, #368]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800461e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004622:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800462a:	4959      	ldr	r1, [pc, #356]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800462c:	4313      	orrs	r3, r2
 800462e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00a      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800463e:	4b54      	ldr	r3, [pc, #336]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004644:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800464c:	4950      	ldr	r1, [pc, #320]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800464e:	4313      	orrs	r3, r2
 8004650:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00a      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004660:	4b4b      	ldr	r3, [pc, #300]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004666:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466e:	4948      	ldr	r1, [pc, #288]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004670:	4313      	orrs	r3, r2
 8004672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004682:	4b43      	ldr	r3, [pc, #268]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004688:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004690:	493f      	ldr	r1, [pc, #252]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004692:	4313      	orrs	r3, r2
 8004694:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d028      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046a4:	4b3a      	ldr	r3, [pc, #232]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046b2:	4937      	ldr	r1, [pc, #220]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046c2:	d106      	bne.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046c4:	4b32      	ldr	r3, [pc, #200]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	4a31      	ldr	r2, [pc, #196]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046ce:	60d3      	str	r3, [r2, #12]
 80046d0:	e011      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046da:	d10c      	bne.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	3304      	adds	r3, #4
 80046e0:	2101      	movs	r1, #1
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 f8d8 	bl	8004898 <RCCEx_PLLSAI1_Config>
 80046e8:	4603      	mov	r3, r0
 80046ea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80046ec:	7cfb      	ldrb	r3, [r7, #19]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80046f2:	7cfb      	ldrb	r3, [r7, #19]
 80046f4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d028      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004702:	4b23      	ldr	r3, [pc, #140]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004708:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004710:	491f      	ldr	r1, [pc, #124]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004712:	4313      	orrs	r3, r2
 8004714:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004720:	d106      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004722:	4b1b      	ldr	r3, [pc, #108]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	4a1a      	ldr	r2, [pc, #104]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004728:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800472c:	60d3      	str	r3, [r2, #12]
 800472e:	e011      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004734:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004738:	d10c      	bne.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	3304      	adds	r3, #4
 800473e:	2101      	movs	r1, #1
 8004740:	4618      	mov	r0, r3
 8004742:	f000 f8a9 	bl	8004898 <RCCEx_PLLSAI1_Config>
 8004746:	4603      	mov	r3, r0
 8004748:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800474a:	7cfb      	ldrb	r3, [r7, #19]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004750:	7cfb      	ldrb	r3, [r7, #19]
 8004752:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d02b      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004760:	4b0b      	ldr	r3, [pc, #44]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004766:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800476e:	4908      	ldr	r1, [pc, #32]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004770:	4313      	orrs	r3, r2
 8004772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800477a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800477e:	d109      	bne.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004780:	4b03      	ldr	r3, [pc, #12]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	4a02      	ldr	r2, [pc, #8]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004786:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800478a:	60d3      	str	r3, [r2, #12]
 800478c:	e014      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800478e:	bf00      	nop
 8004790:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004798:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800479c:	d10c      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	3304      	adds	r3, #4
 80047a2:	2101      	movs	r1, #1
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 f877 	bl	8004898 <RCCEx_PLLSAI1_Config>
 80047aa:	4603      	mov	r3, r0
 80047ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047ae:	7cfb      	ldrb	r3, [r7, #19]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80047b4:	7cfb      	ldrb	r3, [r7, #19]
 80047b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d02f      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047c4:	4b2b      	ldr	r3, [pc, #172]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047d2:	4928      	ldr	r1, [pc, #160]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047e2:	d10d      	bne.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3304      	adds	r3, #4
 80047e8:	2102      	movs	r1, #2
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 f854 	bl	8004898 <RCCEx_PLLSAI1_Config>
 80047f0:	4603      	mov	r3, r0
 80047f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047f4:	7cfb      	ldrb	r3, [r7, #19]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d014      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80047fa:	7cfb      	ldrb	r3, [r7, #19]
 80047fc:	74bb      	strb	r3, [r7, #18]
 80047fe:	e011      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004804:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004808:	d10c      	bne.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	3320      	adds	r3, #32
 800480e:	2102      	movs	r1, #2
 8004810:	4618      	mov	r0, r3
 8004812:	f000 f935 	bl	8004a80 <RCCEx_PLLSAI2_Config>
 8004816:	4603      	mov	r3, r0
 8004818:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800481a:	7cfb      	ldrb	r3, [r7, #19]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004820:	7cfb      	ldrb	r3, [r7, #19]
 8004822:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00a      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004830:	4b10      	ldr	r3, [pc, #64]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004836:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800483e:	490d      	ldr	r1, [pc, #52]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004840:	4313      	orrs	r3, r2
 8004842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00b      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004852:	4b08      	ldr	r3, [pc, #32]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004858:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004862:	4904      	ldr	r1, [pc, #16]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004864:	4313      	orrs	r3, r2
 8004866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800486a:	7cbb      	ldrb	r3, [r7, #18]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3718      	adds	r7, #24
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	40021000 	.word	0x40021000

08004878 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800487c:	4b05      	ldr	r3, [pc, #20]	; (8004894 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a04      	ldr	r2, [pc, #16]	; (8004894 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004882:	f043 0304 	orr.w	r3, r3, #4
 8004886:	6013      	str	r3, [r2, #0]
}
 8004888:	bf00      	nop
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	40021000 	.word	0x40021000

08004898 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048a2:	2300      	movs	r3, #0
 80048a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048a6:	4b75      	ldr	r3, [pc, #468]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	f003 0303 	and.w	r3, r3, #3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d018      	beq.n	80048e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80048b2:	4b72      	ldr	r3, [pc, #456]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	f003 0203 	and.w	r2, r3, #3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d10d      	bne.n	80048de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
       ||
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d009      	beq.n	80048de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80048ca:	4b6c      	ldr	r3, [pc, #432]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	091b      	lsrs	r3, r3, #4
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	1c5a      	adds	r2, r3, #1
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
       ||
 80048da:	429a      	cmp	r2, r3
 80048dc:	d047      	beq.n	800496e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	73fb      	strb	r3, [r7, #15]
 80048e2:	e044      	b.n	800496e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b03      	cmp	r3, #3
 80048ea:	d018      	beq.n	800491e <RCCEx_PLLSAI1_Config+0x86>
 80048ec:	2b03      	cmp	r3, #3
 80048ee:	d825      	bhi.n	800493c <RCCEx_PLLSAI1_Config+0xa4>
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d002      	beq.n	80048fa <RCCEx_PLLSAI1_Config+0x62>
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d009      	beq.n	800490c <RCCEx_PLLSAI1_Config+0x74>
 80048f8:	e020      	b.n	800493c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048fa:	4b60      	ldr	r3, [pc, #384]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d11d      	bne.n	8004942 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800490a:	e01a      	b.n	8004942 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800490c:	4b5b      	ldr	r3, [pc, #364]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004914:	2b00      	cmp	r3, #0
 8004916:	d116      	bne.n	8004946 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800491c:	e013      	b.n	8004946 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800491e:	4b57      	ldr	r3, [pc, #348]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10f      	bne.n	800494a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800492a:	4b54      	ldr	r3, [pc, #336]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d109      	bne.n	800494a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800493a:	e006      	b.n	800494a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	73fb      	strb	r3, [r7, #15]
      break;
 8004940:	e004      	b.n	800494c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004942:	bf00      	nop
 8004944:	e002      	b.n	800494c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004946:	bf00      	nop
 8004948:	e000      	b.n	800494c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800494a:	bf00      	nop
    }

    if(status == HAL_OK)
 800494c:	7bfb      	ldrb	r3, [r7, #15]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10d      	bne.n	800496e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004952:	4b4a      	ldr	r3, [pc, #296]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6819      	ldr	r1, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	3b01      	subs	r3, #1
 8004964:	011b      	lsls	r3, r3, #4
 8004966:	430b      	orrs	r3, r1
 8004968:	4944      	ldr	r1, [pc, #272]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800496a:	4313      	orrs	r3, r2
 800496c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800496e:	7bfb      	ldrb	r3, [r7, #15]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d17d      	bne.n	8004a70 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004974:	4b41      	ldr	r3, [pc, #260]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a40      	ldr	r2, [pc, #256]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800497a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800497e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004980:	f7fd fade 	bl	8001f40 <HAL_GetTick>
 8004984:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004986:	e009      	b.n	800499c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004988:	f7fd fada 	bl	8001f40 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d902      	bls.n	800499c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	73fb      	strb	r3, [r7, #15]
        break;
 800499a:	e005      	b.n	80049a8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800499c:	4b37      	ldr	r3, [pc, #220]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1ef      	bne.n	8004988 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80049a8:	7bfb      	ldrb	r3, [r7, #15]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d160      	bne.n	8004a70 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d111      	bne.n	80049d8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049b4:	4b31      	ldr	r3, [pc, #196]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80049bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6892      	ldr	r2, [r2, #8]
 80049c4:	0211      	lsls	r1, r2, #8
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	68d2      	ldr	r2, [r2, #12]
 80049ca:	0912      	lsrs	r2, r2, #4
 80049cc:	0452      	lsls	r2, r2, #17
 80049ce:	430a      	orrs	r2, r1
 80049d0:	492a      	ldr	r1, [pc, #168]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	610b      	str	r3, [r1, #16]
 80049d6:	e027      	b.n	8004a28 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d112      	bne.n	8004a04 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049de:	4b27      	ldr	r3, [pc, #156]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80049e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	6892      	ldr	r2, [r2, #8]
 80049ee:	0211      	lsls	r1, r2, #8
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	6912      	ldr	r2, [r2, #16]
 80049f4:	0852      	lsrs	r2, r2, #1
 80049f6:	3a01      	subs	r2, #1
 80049f8:	0552      	lsls	r2, r2, #21
 80049fa:	430a      	orrs	r2, r1
 80049fc:	491f      	ldr	r1, [pc, #124]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	610b      	str	r3, [r1, #16]
 8004a02:	e011      	b.n	8004a28 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a04:	4b1d      	ldr	r3, [pc, #116]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a0c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	6892      	ldr	r2, [r2, #8]
 8004a14:	0211      	lsls	r1, r2, #8
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	6952      	ldr	r2, [r2, #20]
 8004a1a:	0852      	lsrs	r2, r2, #1
 8004a1c:	3a01      	subs	r2, #1
 8004a1e:	0652      	lsls	r2, r2, #25
 8004a20:	430a      	orrs	r2, r1
 8004a22:	4916      	ldr	r1, [pc, #88]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a28:	4b14      	ldr	r3, [pc, #80]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a13      	ldr	r2, [pc, #76]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a34:	f7fd fa84 	bl	8001f40 <HAL_GetTick>
 8004a38:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a3a:	e009      	b.n	8004a50 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a3c:	f7fd fa80 	bl	8001f40 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d902      	bls.n	8004a50 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	73fb      	strb	r3, [r7, #15]
          break;
 8004a4e:	e005      	b.n	8004a5c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a50:	4b0a      	ldr	r3, [pc, #40]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0ef      	beq.n	8004a3c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d106      	bne.n	8004a70 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a62:	4b06      	ldr	r3, [pc, #24]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a64:	691a      	ldr	r2, [r3, #16]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	4904      	ldr	r1, [pc, #16]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	40021000 	.word	0x40021000

08004a80 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a8e:	4b6a      	ldr	r3, [pc, #424]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f003 0303 	and.w	r3, r3, #3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d018      	beq.n	8004acc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004a9a:	4b67      	ldr	r3, [pc, #412]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	f003 0203 	and.w	r2, r3, #3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d10d      	bne.n	8004ac6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
       ||
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d009      	beq.n	8004ac6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004ab2:	4b61      	ldr	r3, [pc, #388]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	091b      	lsrs	r3, r3, #4
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	1c5a      	adds	r2, r3, #1
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
       ||
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d047      	beq.n	8004b56 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	73fb      	strb	r3, [r7, #15]
 8004aca:	e044      	b.n	8004b56 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2b03      	cmp	r3, #3
 8004ad2:	d018      	beq.n	8004b06 <RCCEx_PLLSAI2_Config+0x86>
 8004ad4:	2b03      	cmp	r3, #3
 8004ad6:	d825      	bhi.n	8004b24 <RCCEx_PLLSAI2_Config+0xa4>
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d002      	beq.n	8004ae2 <RCCEx_PLLSAI2_Config+0x62>
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d009      	beq.n	8004af4 <RCCEx_PLLSAI2_Config+0x74>
 8004ae0:	e020      	b.n	8004b24 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ae2:	4b55      	ldr	r3, [pc, #340]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d11d      	bne.n	8004b2a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004af2:	e01a      	b.n	8004b2a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004af4:	4b50      	ldr	r3, [pc, #320]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d116      	bne.n	8004b2e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b04:	e013      	b.n	8004b2e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b06:	4b4c      	ldr	r3, [pc, #304]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10f      	bne.n	8004b32 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b12:	4b49      	ldr	r3, [pc, #292]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d109      	bne.n	8004b32 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b22:	e006      	b.n	8004b32 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	73fb      	strb	r3, [r7, #15]
      break;
 8004b28:	e004      	b.n	8004b34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b2a:	bf00      	nop
 8004b2c:	e002      	b.n	8004b34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b2e:	bf00      	nop
 8004b30:	e000      	b.n	8004b34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b32:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b34:	7bfb      	ldrb	r3, [r7, #15]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10d      	bne.n	8004b56 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b3a:	4b3f      	ldr	r3, [pc, #252]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6819      	ldr	r1, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	011b      	lsls	r3, r3, #4
 8004b4e:	430b      	orrs	r3, r1
 8004b50:	4939      	ldr	r1, [pc, #228]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b56:	7bfb      	ldrb	r3, [r7, #15]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d167      	bne.n	8004c2c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004b5c:	4b36      	ldr	r3, [pc, #216]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a35      	ldr	r2, [pc, #212]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b68:	f7fd f9ea 	bl	8001f40 <HAL_GetTick>
 8004b6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b6e:	e009      	b.n	8004b84 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b70:	f7fd f9e6 	bl	8001f40 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d902      	bls.n	8004b84 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	73fb      	strb	r3, [r7, #15]
        break;
 8004b82:	e005      	b.n	8004b90 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b84:	4b2c      	ldr	r3, [pc, #176]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1ef      	bne.n	8004b70 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b90:	7bfb      	ldrb	r3, [r7, #15]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d14a      	bne.n	8004c2c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d111      	bne.n	8004bc0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b9c:	4b26      	ldr	r3, [pc, #152]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	6892      	ldr	r2, [r2, #8]
 8004bac:	0211      	lsls	r1, r2, #8
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	68d2      	ldr	r2, [r2, #12]
 8004bb2:	0912      	lsrs	r2, r2, #4
 8004bb4:	0452      	lsls	r2, r2, #17
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	491f      	ldr	r1, [pc, #124]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	614b      	str	r3, [r1, #20]
 8004bbe:	e011      	b.n	8004be4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004bc0:	4b1d      	ldr	r3, [pc, #116]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004bc8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	6892      	ldr	r2, [r2, #8]
 8004bd0:	0211      	lsls	r1, r2, #8
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	6912      	ldr	r2, [r2, #16]
 8004bd6:	0852      	lsrs	r2, r2, #1
 8004bd8:	3a01      	subs	r2, #1
 8004bda:	0652      	lsls	r2, r2, #25
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	4916      	ldr	r1, [pc, #88]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004be4:	4b14      	ldr	r3, [pc, #80]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a13      	ldr	r2, [pc, #76]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf0:	f7fd f9a6 	bl	8001f40 <HAL_GetTick>
 8004bf4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004bf6:	e009      	b.n	8004c0c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004bf8:	f7fd f9a2 	bl	8001f40 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d902      	bls.n	8004c0c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	73fb      	strb	r3, [r7, #15]
          break;
 8004c0a:	e005      	b.n	8004c18 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c0c:	4b0a      	ldr	r3, [pc, #40]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d0ef      	beq.n	8004bf8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004c18:	7bfb      	ldrb	r3, [r7, #15]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d106      	bne.n	8004c2c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004c1e:	4b06      	ldr	r3, [pc, #24]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c20:	695a      	ldr	r2, [r3, #20]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	4904      	ldr	r1, [pc, #16]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	40021000 	.word	0x40021000

08004c3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e095      	b.n	8004d7a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d108      	bne.n	8004c68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c5e:	d009      	beq.n	8004c74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	61da      	str	r2, [r3, #28]
 8004c66:	e005      	b.n	8004c74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d106      	bne.n	8004c94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7fc feb0 	bl	80019f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2202      	movs	r2, #2
 8004c98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004caa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cb4:	d902      	bls.n	8004cbc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	60fb      	str	r3, [r7, #12]
 8004cba:	e002      	b.n	8004cc2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004cbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cc0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004cca:	d007      	beq.n	8004cdc <HAL_SPI_Init+0xa0>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cd4:	d002      	beq.n	8004cdc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004cec:	431a      	orrs	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	431a      	orrs	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d14:	431a      	orrs	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d1e:	ea42 0103 	orr.w	r1, r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d26:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	0c1b      	lsrs	r3, r3, #16
 8004d38:	f003 0204 	and.w	r2, r3, #4
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d40:	f003 0310 	and.w	r3, r3, #16
 8004d44:	431a      	orrs	r2, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d4a:	f003 0308 	and.w	r3, r3, #8
 8004d4e:	431a      	orrs	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004d58:	ea42 0103 	orr.w	r1, r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b082      	sub	sp, #8
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d101      	bne.n	8004d94 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e040      	b.n	8004e16 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d106      	bne.n	8004daa <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f7fc fe69 	bl	8001a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2224      	movs	r2, #36	; 0x24
 8004dae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 0201 	bic.w	r2, r2, #1
 8004dbe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 f991 	bl	80050e8 <UART_SetConfig>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d101      	bne.n	8004dd0 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e022      	b.n	8004e16 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d002      	beq.n	8004dde <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 fc0f 	bl	80055fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689a      	ldr	r2, [r3, #8]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dfc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f042 0201 	orr.w	r2, r2, #1
 8004e0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 fc96 	bl	8005740 <UART_CheckIdleState>
 8004e14:	4603      	mov	r3, r0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b08a      	sub	sp, #40	; 0x28
 8004e22:	af02      	add	r7, sp, #8
 8004e24:	60f8      	str	r0, [r7, #12]
 8004e26:	60b9      	str	r1, [r7, #8]
 8004e28:	603b      	str	r3, [r7, #0]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e32:	2b20      	cmp	r3, #32
 8004e34:	f040 8082 	bne.w	8004f3c <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d002      	beq.n	8004e44 <HAL_UART_Transmit+0x26>
 8004e3e:	88fb      	ldrh	r3, [r7, #6]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d101      	bne.n	8004e48 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e07a      	b.n	8004f3e <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d101      	bne.n	8004e56 <HAL_UART_Transmit+0x38>
 8004e52:	2302      	movs	r3, #2
 8004e54:	e073      	b.n	8004f3e <HAL_UART_Transmit+0x120>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2221      	movs	r2, #33	; 0x21
 8004e6a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e6c:	f7fd f868 	bl	8001f40 <HAL_GetTick>
 8004e70:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	88fa      	ldrh	r2, [r7, #6]
 8004e76:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	88fa      	ldrh	r2, [r7, #6]
 8004e7e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e8a:	d108      	bne.n	8004e9e <HAL_UART_Transmit+0x80>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d104      	bne.n	8004e9e <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004e94:	2300      	movs	r3, #0
 8004e96:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	61bb      	str	r3, [r7, #24]
 8004e9c:	e003      	b.n	8004ea6 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004eae:	e02d      	b.n	8004f0c <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	2180      	movs	r1, #128	; 0x80
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 fc89 	bl	80057d2 <UART_WaitOnFlagUntilTimeout>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e039      	b.n	8004f3e <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10b      	bne.n	8004ee8 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	881a      	ldrh	r2, [r3, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004edc:	b292      	uxth	r2, r2
 8004ede:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	3302      	adds	r3, #2
 8004ee4:	61bb      	str	r3, [r7, #24]
 8004ee6:	e008      	b.n	8004efa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	781a      	ldrb	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	b292      	uxth	r2, r2
 8004ef2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	3b01      	subs	r3, #1
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1cb      	bne.n	8004eb0 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	2140      	movs	r1, #64	; 0x40
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 fc55 	bl	80057d2 <UART_WaitOnFlagUntilTimeout>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e005      	b.n	8004f3e <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2220      	movs	r2, #32
 8004f36:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	e000      	b.n	8004f3e <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004f3c:	2302      	movs	r3, #2
  }
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3720      	adds	r7, #32
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b08a      	sub	sp, #40	; 0x28
 8004f4a:	af02      	add	r7, sp, #8
 8004f4c:	60f8      	str	r0, [r7, #12]
 8004f4e:	60b9      	str	r1, [r7, #8]
 8004f50:	603b      	str	r3, [r7, #0]
 8004f52:	4613      	mov	r3, r2
 8004f54:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f5a:	2b20      	cmp	r3, #32
 8004f5c:	f040 80bf 	bne.w	80050de <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d002      	beq.n	8004f6c <HAL_UART_Receive+0x26>
 8004f66:	88fb      	ldrh	r3, [r7, #6]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e0b7      	b.n	80050e0 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d101      	bne.n	8004f7e <HAL_UART_Receive+0x38>
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	e0b0      	b.n	80050e0 <HAL_UART_Receive+0x19a>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2222      	movs	r2, #34	; 0x22
 8004f92:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f9a:	f7fc ffd1 	bl	8001f40 <HAL_GetTick>
 8004f9e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	88fa      	ldrh	r2, [r7, #6]
 8004fa4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	88fa      	ldrh	r2, [r7, #6]
 8004fac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fb8:	d10e      	bne.n	8004fd8 <HAL_UART_Receive+0x92>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d105      	bne.n	8004fce <HAL_UART_Receive+0x88>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004fc8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004fcc:	e02d      	b.n	800502a <HAL_UART_Receive+0xe4>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	22ff      	movs	r2, #255	; 0xff
 8004fd2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004fd6:	e028      	b.n	800502a <HAL_UART_Receive+0xe4>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10d      	bne.n	8004ffc <HAL_UART_Receive+0xb6>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d104      	bne.n	8004ff2 <HAL_UART_Receive+0xac>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	22ff      	movs	r2, #255	; 0xff
 8004fec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ff0:	e01b      	b.n	800502a <HAL_UART_Receive+0xe4>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	227f      	movs	r2, #127	; 0x7f
 8004ff6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ffa:	e016      	b.n	800502a <HAL_UART_Receive+0xe4>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005004:	d10d      	bne.n	8005022 <HAL_UART_Receive+0xdc>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d104      	bne.n	8005018 <HAL_UART_Receive+0xd2>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	227f      	movs	r2, #127	; 0x7f
 8005012:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005016:	e008      	b.n	800502a <HAL_UART_Receive+0xe4>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	223f      	movs	r2, #63	; 0x3f
 800501c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005020:	e003      	b.n	800502a <HAL_UART_Receive+0xe4>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005030:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800503a:	d108      	bne.n	800504e <HAL_UART_Receive+0x108>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d104      	bne.n	800504e <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8005044:	2300      	movs	r3, #0
 8005046:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	61bb      	str	r3, [r7, #24]
 800504c:	e003      	b.n	8005056 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005052:	2300      	movs	r3, #0
 8005054:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800505e:	e033      	b.n	80050c8 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	2200      	movs	r2, #0
 8005068:	2120      	movs	r1, #32
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 fbb1 	bl	80057d2 <UART_WaitOnFlagUntilTimeout>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e032      	b.n	80050e0 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10c      	bne.n	800509a <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005086:	b29a      	uxth	r2, r3
 8005088:	8a7b      	ldrh	r3, [r7, #18]
 800508a:	4013      	ands	r3, r2
 800508c:	b29a      	uxth	r2, r3
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	3302      	adds	r3, #2
 8005096:	61bb      	str	r3, [r7, #24]
 8005098:	e00d      	b.n	80050b6 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	8a7b      	ldrh	r3, [r7, #18]
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	4013      	ands	r3, r2
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	3301      	adds	r3, #1
 80050b4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80050bc:	b29b      	uxth	r3, r3
 80050be:	3b01      	subs	r3, #1
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1c5      	bne.n	8005060 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2220      	movs	r2, #32
 80050d8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80050da:	2300      	movs	r3, #0
 80050dc:	e000      	b.n	80050e0 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80050de:	2302      	movs	r3, #2
  }
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3720      	adds	r7, #32
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050e8:	b5b0      	push	{r4, r5, r7, lr}
 80050ea:	b088      	sub	sp, #32
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050f0:	2300      	movs	r3, #0
 80050f2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689a      	ldr	r2, [r3, #8]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	431a      	orrs	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	431a      	orrs	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	69db      	ldr	r3, [r3, #28]
 8005108:	4313      	orrs	r3, r2
 800510a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	4bad      	ldr	r3, [pc, #692]	; (80053c8 <UART_SetConfig+0x2e0>)
 8005114:	4013      	ands	r3, r2
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	6812      	ldr	r2, [r2, #0]
 800511a:	69f9      	ldr	r1, [r7, #28]
 800511c:	430b      	orrs	r3, r1
 800511e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68da      	ldr	r2, [r3, #12]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4aa2      	ldr	r2, [pc, #648]	; (80053cc <UART_SetConfig+0x2e4>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d004      	beq.n	8005150 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	69fa      	ldr	r2, [r7, #28]
 800514c:	4313      	orrs	r3, r2
 800514e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	69fa      	ldr	r2, [r7, #28]
 8005160:	430a      	orrs	r2, r1
 8005162:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a99      	ldr	r2, [pc, #612]	; (80053d0 <UART_SetConfig+0x2e8>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d121      	bne.n	80051b2 <UART_SetConfig+0xca>
 800516e:	4b99      	ldr	r3, [pc, #612]	; (80053d4 <UART_SetConfig+0x2ec>)
 8005170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005174:	f003 0303 	and.w	r3, r3, #3
 8005178:	2b03      	cmp	r3, #3
 800517a:	d817      	bhi.n	80051ac <UART_SetConfig+0xc4>
 800517c:	a201      	add	r2, pc, #4	; (adr r2, 8005184 <UART_SetConfig+0x9c>)
 800517e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005182:	bf00      	nop
 8005184:	08005195 	.word	0x08005195
 8005188:	080051a1 	.word	0x080051a1
 800518c:	0800519b 	.word	0x0800519b
 8005190:	080051a7 	.word	0x080051a7
 8005194:	2301      	movs	r3, #1
 8005196:	76fb      	strb	r3, [r7, #27]
 8005198:	e0e7      	b.n	800536a <UART_SetConfig+0x282>
 800519a:	2302      	movs	r3, #2
 800519c:	76fb      	strb	r3, [r7, #27]
 800519e:	e0e4      	b.n	800536a <UART_SetConfig+0x282>
 80051a0:	2304      	movs	r3, #4
 80051a2:	76fb      	strb	r3, [r7, #27]
 80051a4:	e0e1      	b.n	800536a <UART_SetConfig+0x282>
 80051a6:	2308      	movs	r3, #8
 80051a8:	76fb      	strb	r3, [r7, #27]
 80051aa:	e0de      	b.n	800536a <UART_SetConfig+0x282>
 80051ac:	2310      	movs	r3, #16
 80051ae:	76fb      	strb	r3, [r7, #27]
 80051b0:	e0db      	b.n	800536a <UART_SetConfig+0x282>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a88      	ldr	r2, [pc, #544]	; (80053d8 <UART_SetConfig+0x2f0>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d132      	bne.n	8005222 <UART_SetConfig+0x13a>
 80051bc:	4b85      	ldr	r3, [pc, #532]	; (80053d4 <UART_SetConfig+0x2ec>)
 80051be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c2:	f003 030c 	and.w	r3, r3, #12
 80051c6:	2b0c      	cmp	r3, #12
 80051c8:	d828      	bhi.n	800521c <UART_SetConfig+0x134>
 80051ca:	a201      	add	r2, pc, #4	; (adr r2, 80051d0 <UART_SetConfig+0xe8>)
 80051cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d0:	08005205 	.word	0x08005205
 80051d4:	0800521d 	.word	0x0800521d
 80051d8:	0800521d 	.word	0x0800521d
 80051dc:	0800521d 	.word	0x0800521d
 80051e0:	08005211 	.word	0x08005211
 80051e4:	0800521d 	.word	0x0800521d
 80051e8:	0800521d 	.word	0x0800521d
 80051ec:	0800521d 	.word	0x0800521d
 80051f0:	0800520b 	.word	0x0800520b
 80051f4:	0800521d 	.word	0x0800521d
 80051f8:	0800521d 	.word	0x0800521d
 80051fc:	0800521d 	.word	0x0800521d
 8005200:	08005217 	.word	0x08005217
 8005204:	2300      	movs	r3, #0
 8005206:	76fb      	strb	r3, [r7, #27]
 8005208:	e0af      	b.n	800536a <UART_SetConfig+0x282>
 800520a:	2302      	movs	r3, #2
 800520c:	76fb      	strb	r3, [r7, #27]
 800520e:	e0ac      	b.n	800536a <UART_SetConfig+0x282>
 8005210:	2304      	movs	r3, #4
 8005212:	76fb      	strb	r3, [r7, #27]
 8005214:	e0a9      	b.n	800536a <UART_SetConfig+0x282>
 8005216:	2308      	movs	r3, #8
 8005218:	76fb      	strb	r3, [r7, #27]
 800521a:	e0a6      	b.n	800536a <UART_SetConfig+0x282>
 800521c:	2310      	movs	r3, #16
 800521e:	76fb      	strb	r3, [r7, #27]
 8005220:	e0a3      	b.n	800536a <UART_SetConfig+0x282>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a6d      	ldr	r2, [pc, #436]	; (80053dc <UART_SetConfig+0x2f4>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d120      	bne.n	800526e <UART_SetConfig+0x186>
 800522c:	4b69      	ldr	r3, [pc, #420]	; (80053d4 <UART_SetConfig+0x2ec>)
 800522e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005232:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005236:	2b30      	cmp	r3, #48	; 0x30
 8005238:	d013      	beq.n	8005262 <UART_SetConfig+0x17a>
 800523a:	2b30      	cmp	r3, #48	; 0x30
 800523c:	d814      	bhi.n	8005268 <UART_SetConfig+0x180>
 800523e:	2b20      	cmp	r3, #32
 8005240:	d009      	beq.n	8005256 <UART_SetConfig+0x16e>
 8005242:	2b20      	cmp	r3, #32
 8005244:	d810      	bhi.n	8005268 <UART_SetConfig+0x180>
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <UART_SetConfig+0x168>
 800524a:	2b10      	cmp	r3, #16
 800524c:	d006      	beq.n	800525c <UART_SetConfig+0x174>
 800524e:	e00b      	b.n	8005268 <UART_SetConfig+0x180>
 8005250:	2300      	movs	r3, #0
 8005252:	76fb      	strb	r3, [r7, #27]
 8005254:	e089      	b.n	800536a <UART_SetConfig+0x282>
 8005256:	2302      	movs	r3, #2
 8005258:	76fb      	strb	r3, [r7, #27]
 800525a:	e086      	b.n	800536a <UART_SetConfig+0x282>
 800525c:	2304      	movs	r3, #4
 800525e:	76fb      	strb	r3, [r7, #27]
 8005260:	e083      	b.n	800536a <UART_SetConfig+0x282>
 8005262:	2308      	movs	r3, #8
 8005264:	76fb      	strb	r3, [r7, #27]
 8005266:	e080      	b.n	800536a <UART_SetConfig+0x282>
 8005268:	2310      	movs	r3, #16
 800526a:	76fb      	strb	r3, [r7, #27]
 800526c:	e07d      	b.n	800536a <UART_SetConfig+0x282>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a5b      	ldr	r2, [pc, #364]	; (80053e0 <UART_SetConfig+0x2f8>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d120      	bne.n	80052ba <UART_SetConfig+0x1d2>
 8005278:	4b56      	ldr	r3, [pc, #344]	; (80053d4 <UART_SetConfig+0x2ec>)
 800527a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005282:	2bc0      	cmp	r3, #192	; 0xc0
 8005284:	d013      	beq.n	80052ae <UART_SetConfig+0x1c6>
 8005286:	2bc0      	cmp	r3, #192	; 0xc0
 8005288:	d814      	bhi.n	80052b4 <UART_SetConfig+0x1cc>
 800528a:	2b80      	cmp	r3, #128	; 0x80
 800528c:	d009      	beq.n	80052a2 <UART_SetConfig+0x1ba>
 800528e:	2b80      	cmp	r3, #128	; 0x80
 8005290:	d810      	bhi.n	80052b4 <UART_SetConfig+0x1cc>
 8005292:	2b00      	cmp	r3, #0
 8005294:	d002      	beq.n	800529c <UART_SetConfig+0x1b4>
 8005296:	2b40      	cmp	r3, #64	; 0x40
 8005298:	d006      	beq.n	80052a8 <UART_SetConfig+0x1c0>
 800529a:	e00b      	b.n	80052b4 <UART_SetConfig+0x1cc>
 800529c:	2300      	movs	r3, #0
 800529e:	76fb      	strb	r3, [r7, #27]
 80052a0:	e063      	b.n	800536a <UART_SetConfig+0x282>
 80052a2:	2302      	movs	r3, #2
 80052a4:	76fb      	strb	r3, [r7, #27]
 80052a6:	e060      	b.n	800536a <UART_SetConfig+0x282>
 80052a8:	2304      	movs	r3, #4
 80052aa:	76fb      	strb	r3, [r7, #27]
 80052ac:	e05d      	b.n	800536a <UART_SetConfig+0x282>
 80052ae:	2308      	movs	r3, #8
 80052b0:	76fb      	strb	r3, [r7, #27]
 80052b2:	e05a      	b.n	800536a <UART_SetConfig+0x282>
 80052b4:	2310      	movs	r3, #16
 80052b6:	76fb      	strb	r3, [r7, #27]
 80052b8:	e057      	b.n	800536a <UART_SetConfig+0x282>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a49      	ldr	r2, [pc, #292]	; (80053e4 <UART_SetConfig+0x2fc>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d125      	bne.n	8005310 <UART_SetConfig+0x228>
 80052c4:	4b43      	ldr	r3, [pc, #268]	; (80053d4 <UART_SetConfig+0x2ec>)
 80052c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052d2:	d017      	beq.n	8005304 <UART_SetConfig+0x21c>
 80052d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052d8:	d817      	bhi.n	800530a <UART_SetConfig+0x222>
 80052da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052de:	d00b      	beq.n	80052f8 <UART_SetConfig+0x210>
 80052e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052e4:	d811      	bhi.n	800530a <UART_SetConfig+0x222>
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <UART_SetConfig+0x20a>
 80052ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ee:	d006      	beq.n	80052fe <UART_SetConfig+0x216>
 80052f0:	e00b      	b.n	800530a <UART_SetConfig+0x222>
 80052f2:	2300      	movs	r3, #0
 80052f4:	76fb      	strb	r3, [r7, #27]
 80052f6:	e038      	b.n	800536a <UART_SetConfig+0x282>
 80052f8:	2302      	movs	r3, #2
 80052fa:	76fb      	strb	r3, [r7, #27]
 80052fc:	e035      	b.n	800536a <UART_SetConfig+0x282>
 80052fe:	2304      	movs	r3, #4
 8005300:	76fb      	strb	r3, [r7, #27]
 8005302:	e032      	b.n	800536a <UART_SetConfig+0x282>
 8005304:	2308      	movs	r3, #8
 8005306:	76fb      	strb	r3, [r7, #27]
 8005308:	e02f      	b.n	800536a <UART_SetConfig+0x282>
 800530a:	2310      	movs	r3, #16
 800530c:	76fb      	strb	r3, [r7, #27]
 800530e:	e02c      	b.n	800536a <UART_SetConfig+0x282>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a2d      	ldr	r2, [pc, #180]	; (80053cc <UART_SetConfig+0x2e4>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d125      	bne.n	8005366 <UART_SetConfig+0x27e>
 800531a:	4b2e      	ldr	r3, [pc, #184]	; (80053d4 <UART_SetConfig+0x2ec>)
 800531c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005320:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005324:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005328:	d017      	beq.n	800535a <UART_SetConfig+0x272>
 800532a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800532e:	d817      	bhi.n	8005360 <UART_SetConfig+0x278>
 8005330:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005334:	d00b      	beq.n	800534e <UART_SetConfig+0x266>
 8005336:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800533a:	d811      	bhi.n	8005360 <UART_SetConfig+0x278>
 800533c:	2b00      	cmp	r3, #0
 800533e:	d003      	beq.n	8005348 <UART_SetConfig+0x260>
 8005340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005344:	d006      	beq.n	8005354 <UART_SetConfig+0x26c>
 8005346:	e00b      	b.n	8005360 <UART_SetConfig+0x278>
 8005348:	2300      	movs	r3, #0
 800534a:	76fb      	strb	r3, [r7, #27]
 800534c:	e00d      	b.n	800536a <UART_SetConfig+0x282>
 800534e:	2302      	movs	r3, #2
 8005350:	76fb      	strb	r3, [r7, #27]
 8005352:	e00a      	b.n	800536a <UART_SetConfig+0x282>
 8005354:	2304      	movs	r3, #4
 8005356:	76fb      	strb	r3, [r7, #27]
 8005358:	e007      	b.n	800536a <UART_SetConfig+0x282>
 800535a:	2308      	movs	r3, #8
 800535c:	76fb      	strb	r3, [r7, #27]
 800535e:	e004      	b.n	800536a <UART_SetConfig+0x282>
 8005360:	2310      	movs	r3, #16
 8005362:	76fb      	strb	r3, [r7, #27]
 8005364:	e001      	b.n	800536a <UART_SetConfig+0x282>
 8005366:	2310      	movs	r3, #16
 8005368:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a17      	ldr	r2, [pc, #92]	; (80053cc <UART_SetConfig+0x2e4>)
 8005370:	4293      	cmp	r3, r2
 8005372:	f040 8087 	bne.w	8005484 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005376:	7efb      	ldrb	r3, [r7, #27]
 8005378:	2b08      	cmp	r3, #8
 800537a:	d837      	bhi.n	80053ec <UART_SetConfig+0x304>
 800537c:	a201      	add	r2, pc, #4	; (adr r2, 8005384 <UART_SetConfig+0x29c>)
 800537e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005382:	bf00      	nop
 8005384:	080053a9 	.word	0x080053a9
 8005388:	080053ed 	.word	0x080053ed
 800538c:	080053b1 	.word	0x080053b1
 8005390:	080053ed 	.word	0x080053ed
 8005394:	080053b7 	.word	0x080053b7
 8005398:	080053ed 	.word	0x080053ed
 800539c:	080053ed 	.word	0x080053ed
 80053a0:	080053ed 	.word	0x080053ed
 80053a4:	080053bf 	.word	0x080053bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053a8:	f7fe fef0 	bl	800418c <HAL_RCC_GetPCLK1Freq>
 80053ac:	6178      	str	r0, [r7, #20]
        break;
 80053ae:	e022      	b.n	80053f6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053b0:	4b0d      	ldr	r3, [pc, #52]	; (80053e8 <UART_SetConfig+0x300>)
 80053b2:	617b      	str	r3, [r7, #20]
        break;
 80053b4:	e01f      	b.n	80053f6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053b6:	f7fe fe51 	bl	800405c <HAL_RCC_GetSysClockFreq>
 80053ba:	6178      	str	r0, [r7, #20]
        break;
 80053bc:	e01b      	b.n	80053f6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053c2:	617b      	str	r3, [r7, #20]
        break;
 80053c4:	e017      	b.n	80053f6 <UART_SetConfig+0x30e>
 80053c6:	bf00      	nop
 80053c8:	efff69f3 	.word	0xefff69f3
 80053cc:	40008000 	.word	0x40008000
 80053d0:	40013800 	.word	0x40013800
 80053d4:	40021000 	.word	0x40021000
 80053d8:	40004400 	.word	0x40004400
 80053dc:	40004800 	.word	0x40004800
 80053e0:	40004c00 	.word	0x40004c00
 80053e4:	40005000 	.word	0x40005000
 80053e8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80053ec:	2300      	movs	r3, #0
 80053ee:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	76bb      	strb	r3, [r7, #26]
        break;
 80053f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f000 80f1 	beq.w	80055e0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	4613      	mov	r3, r2
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	4413      	add	r3, r2
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	429a      	cmp	r2, r3
 800540c:	d305      	bcc.n	800541a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	429a      	cmp	r2, r3
 8005418:	d902      	bls.n	8005420 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	76bb      	strb	r3, [r7, #26]
 800541e:	e0df      	b.n	80055e0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	4618      	mov	r0, r3
 8005424:	f04f 0100 	mov.w	r1, #0
 8005428:	f04f 0200 	mov.w	r2, #0
 800542c:	f04f 0300 	mov.w	r3, #0
 8005430:	020b      	lsls	r3, r1, #8
 8005432:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005436:	0202      	lsls	r2, r0, #8
 8005438:	6879      	ldr	r1, [r7, #4]
 800543a:	6849      	ldr	r1, [r1, #4]
 800543c:	0849      	lsrs	r1, r1, #1
 800543e:	4608      	mov	r0, r1
 8005440:	f04f 0100 	mov.w	r1, #0
 8005444:	1814      	adds	r4, r2, r0
 8005446:	eb43 0501 	adc.w	r5, r3, r1
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	461a      	mov	r2, r3
 8005450:	f04f 0300 	mov.w	r3, #0
 8005454:	4620      	mov	r0, r4
 8005456:	4629      	mov	r1, r5
 8005458:	f7fa ff12 	bl	8000280 <__aeabi_uldivmod>
 800545c:	4602      	mov	r2, r0
 800545e:	460b      	mov	r3, r1
 8005460:	4613      	mov	r3, r2
 8005462:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800546a:	d308      	bcc.n	800547e <UART_SetConfig+0x396>
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005472:	d204      	bcs.n	800547e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	60da      	str	r2, [r3, #12]
 800547c:	e0b0      	b.n	80055e0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	76bb      	strb	r3, [r7, #26]
 8005482:	e0ad      	b.n	80055e0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	69db      	ldr	r3, [r3, #28]
 8005488:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800548c:	d15c      	bne.n	8005548 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800548e:	7efb      	ldrb	r3, [r7, #27]
 8005490:	2b08      	cmp	r3, #8
 8005492:	d828      	bhi.n	80054e6 <UART_SetConfig+0x3fe>
 8005494:	a201      	add	r2, pc, #4	; (adr r2, 800549c <UART_SetConfig+0x3b4>)
 8005496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800549a:	bf00      	nop
 800549c:	080054c1 	.word	0x080054c1
 80054a0:	080054c9 	.word	0x080054c9
 80054a4:	080054d1 	.word	0x080054d1
 80054a8:	080054e7 	.word	0x080054e7
 80054ac:	080054d7 	.word	0x080054d7
 80054b0:	080054e7 	.word	0x080054e7
 80054b4:	080054e7 	.word	0x080054e7
 80054b8:	080054e7 	.word	0x080054e7
 80054bc:	080054df 	.word	0x080054df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054c0:	f7fe fe64 	bl	800418c <HAL_RCC_GetPCLK1Freq>
 80054c4:	6178      	str	r0, [r7, #20]
        break;
 80054c6:	e013      	b.n	80054f0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054c8:	f7fe fe76 	bl	80041b8 <HAL_RCC_GetPCLK2Freq>
 80054cc:	6178      	str	r0, [r7, #20]
        break;
 80054ce:	e00f      	b.n	80054f0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054d0:	4b49      	ldr	r3, [pc, #292]	; (80055f8 <UART_SetConfig+0x510>)
 80054d2:	617b      	str	r3, [r7, #20]
        break;
 80054d4:	e00c      	b.n	80054f0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054d6:	f7fe fdc1 	bl	800405c <HAL_RCC_GetSysClockFreq>
 80054da:	6178      	str	r0, [r7, #20]
        break;
 80054dc:	e008      	b.n	80054f0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054e2:	617b      	str	r3, [r7, #20]
        break;
 80054e4:	e004      	b.n	80054f0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80054e6:	2300      	movs	r3, #0
 80054e8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	76bb      	strb	r3, [r7, #26]
        break;
 80054ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d074      	beq.n	80055e0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	005a      	lsls	r2, r3, #1
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	085b      	lsrs	r3, r3, #1
 8005500:	441a      	add	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	fbb2 f3f3 	udiv	r3, r2, r3
 800550a:	b29b      	uxth	r3, r3
 800550c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	2b0f      	cmp	r3, #15
 8005512:	d916      	bls.n	8005542 <UART_SetConfig+0x45a>
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800551a:	d212      	bcs.n	8005542 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	b29b      	uxth	r3, r3
 8005520:	f023 030f 	bic.w	r3, r3, #15
 8005524:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	085b      	lsrs	r3, r3, #1
 800552a:	b29b      	uxth	r3, r3
 800552c:	f003 0307 	and.w	r3, r3, #7
 8005530:	b29a      	uxth	r2, r3
 8005532:	89fb      	ldrh	r3, [r7, #14]
 8005534:	4313      	orrs	r3, r2
 8005536:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	89fa      	ldrh	r2, [r7, #14]
 800553e:	60da      	str	r2, [r3, #12]
 8005540:	e04e      	b.n	80055e0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	76bb      	strb	r3, [r7, #26]
 8005546:	e04b      	b.n	80055e0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005548:	7efb      	ldrb	r3, [r7, #27]
 800554a:	2b08      	cmp	r3, #8
 800554c:	d827      	bhi.n	800559e <UART_SetConfig+0x4b6>
 800554e:	a201      	add	r2, pc, #4	; (adr r2, 8005554 <UART_SetConfig+0x46c>)
 8005550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005554:	08005579 	.word	0x08005579
 8005558:	08005581 	.word	0x08005581
 800555c:	08005589 	.word	0x08005589
 8005560:	0800559f 	.word	0x0800559f
 8005564:	0800558f 	.word	0x0800558f
 8005568:	0800559f 	.word	0x0800559f
 800556c:	0800559f 	.word	0x0800559f
 8005570:	0800559f 	.word	0x0800559f
 8005574:	08005597 	.word	0x08005597
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005578:	f7fe fe08 	bl	800418c <HAL_RCC_GetPCLK1Freq>
 800557c:	6178      	str	r0, [r7, #20]
        break;
 800557e:	e013      	b.n	80055a8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005580:	f7fe fe1a 	bl	80041b8 <HAL_RCC_GetPCLK2Freq>
 8005584:	6178      	str	r0, [r7, #20]
        break;
 8005586:	e00f      	b.n	80055a8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005588:	4b1b      	ldr	r3, [pc, #108]	; (80055f8 <UART_SetConfig+0x510>)
 800558a:	617b      	str	r3, [r7, #20]
        break;
 800558c:	e00c      	b.n	80055a8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800558e:	f7fe fd65 	bl	800405c <HAL_RCC_GetSysClockFreq>
 8005592:	6178      	str	r0, [r7, #20]
        break;
 8005594:	e008      	b.n	80055a8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800559a:	617b      	str	r3, [r7, #20]
        break;
 800559c:	e004      	b.n	80055a8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800559e:	2300      	movs	r3, #0
 80055a0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	76bb      	strb	r3, [r7, #26]
        break;
 80055a6:	bf00      	nop
    }

    if (pclk != 0U)
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d018      	beq.n	80055e0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	085a      	lsrs	r2, r3, #1
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	441a      	add	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	2b0f      	cmp	r3, #15
 80055c8:	d908      	bls.n	80055dc <UART_SetConfig+0x4f4>
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055d0:	d204      	bcs.n	80055dc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	60da      	str	r2, [r3, #12]
 80055da:	e001      	b.n	80055e0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80055ec:	7ebb      	ldrb	r3, [r7, #26]
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3720      	adds	r7, #32
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bdb0      	pop	{r4, r5, r7, pc}
 80055f6:	bf00      	nop
 80055f8:	00f42400 	.word	0x00f42400

080055fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00a      	beq.n	8005626 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00a      	beq.n	8005648 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	430a      	orrs	r2, r1
 8005646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00a      	beq.n	800566a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566e:	f003 0308 	and.w	r3, r3, #8
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00a      	beq.n	800568c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	430a      	orrs	r2, r1
 800568a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005690:	f003 0310 	and.w	r3, r3, #16
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00a      	beq.n	80056ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b2:	f003 0320 	and.w	r3, r3, #32
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00a      	beq.n	80056d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d01a      	beq.n	8005712 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056fa:	d10a      	bne.n	8005712 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	430a      	orrs	r2, r1
 8005710:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00a      	beq.n	8005734 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	605a      	str	r2, [r3, #4]
  }
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af02      	add	r7, sp, #8
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005750:	f7fc fbf6 	bl	8001f40 <HAL_GetTick>
 8005754:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0308 	and.w	r3, r3, #8
 8005760:	2b08      	cmp	r3, #8
 8005762:	d10e      	bne.n	8005782 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005764:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f82d 	bl	80057d2 <UART_WaitOnFlagUntilTimeout>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e023      	b.n	80057ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0304 	and.w	r3, r3, #4
 800578c:	2b04      	cmp	r3, #4
 800578e:	d10e      	bne.n	80057ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005790:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f817 	bl	80057d2 <UART_WaitOnFlagUntilTimeout>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d001      	beq.n	80057ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e00d      	b.n	80057ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2220      	movs	r2, #32
 80057b2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2220      	movs	r2, #32
 80057b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b084      	sub	sp, #16
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	60f8      	str	r0, [r7, #12]
 80057da:	60b9      	str	r1, [r7, #8]
 80057dc:	603b      	str	r3, [r7, #0]
 80057de:	4613      	mov	r3, r2
 80057e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057e2:	e05e      	b.n	80058a2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ea:	d05a      	beq.n	80058a2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ec:	f7fc fba8 	bl	8001f40 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	69ba      	ldr	r2, [r7, #24]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d302      	bcc.n	8005802 <UART_WaitOnFlagUntilTimeout+0x30>
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d11b      	bne.n	800583a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005810:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f022 0201 	bic.w	r2, r2, #1
 8005820:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2220      	movs	r2, #32
 8005826:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2220      	movs	r2, #32
 800582c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e043      	b.n	80058c2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0304 	and.w	r3, r3, #4
 8005844:	2b00      	cmp	r3, #0
 8005846:	d02c      	beq.n	80058a2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	69db      	ldr	r3, [r3, #28]
 800584e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005852:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005856:	d124      	bne.n	80058a2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005860:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005870:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	689a      	ldr	r2, [r3, #8]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f022 0201 	bic.w	r2, r2, #1
 8005880:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2220      	movs	r2, #32
 8005886:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2220      	movs	r2, #32
 800588c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2220      	movs	r2, #32
 8005892:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e00f      	b.n	80058c2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	69da      	ldr	r2, [r3, #28]
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	4013      	ands	r3, r2
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	bf0c      	ite	eq
 80058b2:	2301      	moveq	r3, #1
 80058b4:	2300      	movne	r3, #0
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	461a      	mov	r2, r3
 80058ba:	79fb      	ldrb	r3, [r7, #7]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d091      	beq.n	80057e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058ca:	b084      	sub	sp, #16
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	f107 001c 	add.w	r0, r7, #28
 80058d8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fa23 	bl	8005d34 <USB_CoreReset>
 80058ee:	4603      	mov	r3, r0
 80058f0:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80058f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d106      	bne.n	8005906 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	639a      	str	r2, [r3, #56]	; 0x38
 8005904:	e005      	b.n	8005912 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005912:	7bfb      	ldrb	r3, [r7, #15]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800591e:	b004      	add	sp, #16
 8005920:	4770      	bx	lr

08005922 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005922:	b480      	push	{r7}
 8005924:	b083      	sub	sp, #12
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f023 0201 	bic.w	r2, r3, #1
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	460b      	mov	r3, r1
 800594e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800595c:	78fb      	ldrb	r3, [r7, #3]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d106      	bne.n	8005970 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	60da      	str	r2, [r3, #12]
 800596e:	e00b      	b.n	8005988 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005970:	78fb      	ldrb	r3, [r7, #3]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d106      	bne.n	8005984 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	60da      	str	r2, [r3, #12]
 8005982:	e001      	b.n	8005988 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e003      	b.n	8005990 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005988:	2032      	movs	r0, #50	; 0x32
 800598a:	f7fc fae5 	bl	8001f58 <HAL_Delay>

  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3708      	adds	r7, #8
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005998:	b084      	sub	sp, #16
 800599a:	b580      	push	{r7, lr}
 800599c:	b086      	sub	sp, #24
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
 80059a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80059a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80059aa:	2300      	movs	r3, #0
 80059ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80059b2:	2300      	movs	r3, #0
 80059b4:	613b      	str	r3, [r7, #16]
 80059b6:	e009      	b.n	80059cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	3340      	adds	r3, #64	; 0x40
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	4413      	add	r3, r2
 80059c2:	2200      	movs	r2, #0
 80059c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	3301      	adds	r3, #1
 80059ca:	613b      	str	r3, [r7, #16]
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	2b0e      	cmp	r3, #14
 80059d0:	d9f2      	bls.n	80059b8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80059d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d11c      	bne.n	8005a12 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059e6:	f043 0302 	orr.w	r3, r3, #2
 80059ea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	601a      	str	r2, [r3, #0]
 8005a10:	e005      	b.n	8005a1e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a16:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a24:	461a      	mov	r2, r3
 8005a26:	2300      	movs	r3, #0
 8005a28:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a30:	4619      	mov	r1, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a38:	461a      	mov	r2, r3
 8005a3a:	680b      	ldr	r3, [r1, #0]
 8005a3c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005a3e:	2103      	movs	r1, #3
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 f93d 	bl	8005cc0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a46:	2110      	movs	r1, #16
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 f8f1 	bl	8005c30 <USB_FlushTxFifo>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d001      	beq.n	8005a58 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 f90f 	bl	8005c7c <USB_FlushRxFifo>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d001      	beq.n	8005a68 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a6e:	461a      	mov	r2, r3
 8005a70:	2300      	movs	r3, #0
 8005a72:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a86:	461a      	mov	r2, r3
 8005a88:	2300      	movs	r3, #0
 8005a8a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	613b      	str	r3, [r7, #16]
 8005a90:	e043      	b.n	8005b1a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005aa4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005aa8:	d118      	bne.n	8005adc <USB_DevInit+0x144>
    {
      if (i == 0U)
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d10a      	bne.n	8005ac6 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005abc:	461a      	mov	r2, r3
 8005abe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ac2:	6013      	str	r3, [r2, #0]
 8005ac4:	e013      	b.n	8005aee <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	015a      	lsls	r2, r3, #5
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	4413      	add	r3, r2
 8005ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ad8:	6013      	str	r3, [r2, #0]
 8005ada:	e008      	b.n	8005aee <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae8:	461a      	mov	r2, r3
 8005aea:	2300      	movs	r3, #0
 8005aec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afa:	461a      	mov	r2, r3
 8005afc:	2300      	movs	r3, #0
 8005afe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b12:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	3301      	adds	r3, #1
 8005b18:	613b      	str	r3, [r7, #16]
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d3b7      	bcc.n	8005a92 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b22:	2300      	movs	r3, #0
 8005b24:	613b      	str	r3, [r7, #16]
 8005b26:	e043      	b.n	8005bb0 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b3e:	d118      	bne.n	8005b72 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d10a      	bne.n	8005b5c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	015a      	lsls	r2, r3, #5
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b52:	461a      	mov	r2, r3
 8005b54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b58:	6013      	str	r3, [r2, #0]
 8005b5a:	e013      	b.n	8005b84 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	015a      	lsls	r2, r3, #5
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	4413      	add	r3, r2
 8005b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b68:	461a      	mov	r2, r3
 8005b6a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b6e:	6013      	str	r3, [r2, #0]
 8005b70:	e008      	b.n	8005b84 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	015a      	lsls	r2, r3, #5
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	4413      	add	r3, r2
 8005b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b7e:	461a      	mov	r2, r3
 8005b80:	2300      	movs	r3, #0
 8005b82:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b90:	461a      	mov	r2, r3
 8005b92:	2300      	movs	r3, #0
 8005b94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	015a      	lsls	r2, r3, #5
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ba8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	3301      	adds	r3, #1
 8005bae:	613b      	str	r3, [r7, #16]
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d3b7      	bcc.n	8005b28 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005bd8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	f043 0210 	orr.w	r2, r3, #16
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	699a      	ldr	r2, [r3, #24]
 8005bea:	4b10      	ldr	r3, [pc, #64]	; (8005c2c <USB_DevInit+0x294>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d005      	beq.n	8005c04 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	699b      	ldr	r3, [r3, #24]
 8005bfc:	f043 0208 	orr.w	r2, r3, #8
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d107      	bne.n	8005c1a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c12:	f043 0304 	orr.w	r3, r3, #4
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3718      	adds	r7, #24
 8005c20:	46bd      	mov	sp, r7
 8005c22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c26:	b004      	add	sp, #16
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	803c3800 	.word	0x803c3800

08005c30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	019b      	lsls	r3, r3, #6
 8005c42:	f043 0220 	orr.w	r2, r3, #32
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	60fb      	str	r3, [r7, #12]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4a09      	ldr	r2, [pc, #36]	; (8005c78 <USB_FlushTxFifo+0x48>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d901      	bls.n	8005c5c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e006      	b.n	8005c6a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	f003 0320 	and.w	r3, r3, #32
 8005c64:	2b20      	cmp	r3, #32
 8005c66:	d0f0      	beq.n	8005c4a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3714      	adds	r7, #20
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	00030d40 	.word	0x00030d40

08005c7c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005c84:	2300      	movs	r3, #0
 8005c86:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2210      	movs	r2, #16
 8005c8c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	3301      	adds	r3, #1
 8005c92:	60fb      	str	r3, [r7, #12]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	4a09      	ldr	r2, [pc, #36]	; (8005cbc <USB_FlushRxFifo+0x40>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d901      	bls.n	8005ca0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e006      	b.n	8005cae <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	f003 0310 	and.w	r3, r3, #16
 8005ca8:	2b10      	cmp	r3, #16
 8005caa:	d0f0      	beq.n	8005c8e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3714      	adds	r7, #20
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	00030d40 	.word	0x00030d40

08005cc0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	460b      	mov	r3, r1
 8005cca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	78fb      	ldrb	r3, [r7, #3]
 8005cda:	68f9      	ldr	r1, [r7, #12]
 8005cdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3714      	adds	r7, #20
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b085      	sub	sp, #20
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d0c:	f023 0303 	bic.w	r3, r3, #3
 8005d10:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d20:	f043 0302 	orr.w	r3, r3, #2
 8005d24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3714      	adds	r7, #20
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	3301      	adds	r3, #1
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	4a13      	ldr	r2, [pc, #76]	; (8005d98 <USB_CoreReset+0x64>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d901      	bls.n	8005d52 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e01b      	b.n	8005d8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	daf2      	bge.n	8005d40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	f043 0201 	orr.w	r2, r3, #1
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	60fb      	str	r3, [r7, #12]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	4a09      	ldr	r2, [pc, #36]	; (8005d98 <USB_CoreReset+0x64>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d901      	bls.n	8005d7c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e006      	b.n	8005d8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	f003 0301 	and.w	r3, r3, #1
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d0f0      	beq.n	8005d6a <USB_CoreReset+0x36>

  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	00030d40 	.word	0x00030d40

08005d9c <__errno>:
 8005d9c:	4b01      	ldr	r3, [pc, #4]	; (8005da4 <__errno+0x8>)
 8005d9e:	6818      	ldr	r0, [r3, #0]
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	2000000c 	.word	0x2000000c

08005da8 <__libc_init_array>:
 8005da8:	b570      	push	{r4, r5, r6, lr}
 8005daa:	4d0d      	ldr	r5, [pc, #52]	; (8005de0 <__libc_init_array+0x38>)
 8005dac:	4c0d      	ldr	r4, [pc, #52]	; (8005de4 <__libc_init_array+0x3c>)
 8005dae:	1b64      	subs	r4, r4, r5
 8005db0:	10a4      	asrs	r4, r4, #2
 8005db2:	2600      	movs	r6, #0
 8005db4:	42a6      	cmp	r6, r4
 8005db6:	d109      	bne.n	8005dcc <__libc_init_array+0x24>
 8005db8:	4d0b      	ldr	r5, [pc, #44]	; (8005de8 <__libc_init_array+0x40>)
 8005dba:	4c0c      	ldr	r4, [pc, #48]	; (8005dec <__libc_init_array+0x44>)
 8005dbc:	f000 fc62 	bl	8006684 <_init>
 8005dc0:	1b64      	subs	r4, r4, r5
 8005dc2:	10a4      	asrs	r4, r4, #2
 8005dc4:	2600      	movs	r6, #0
 8005dc6:	42a6      	cmp	r6, r4
 8005dc8:	d105      	bne.n	8005dd6 <__libc_init_array+0x2e>
 8005dca:	bd70      	pop	{r4, r5, r6, pc}
 8005dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dd0:	4798      	blx	r3
 8005dd2:	3601      	adds	r6, #1
 8005dd4:	e7ee      	b.n	8005db4 <__libc_init_array+0xc>
 8005dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dda:	4798      	blx	r3
 8005ddc:	3601      	adds	r6, #1
 8005dde:	e7f2      	b.n	8005dc6 <__libc_init_array+0x1e>
 8005de0:	08006908 	.word	0x08006908
 8005de4:	08006908 	.word	0x08006908
 8005de8:	08006908 	.word	0x08006908
 8005dec:	0800690c 	.word	0x0800690c

08005df0 <memset>:
 8005df0:	4402      	add	r2, r0
 8005df2:	4603      	mov	r3, r0
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d100      	bne.n	8005dfa <memset+0xa>
 8005df8:	4770      	bx	lr
 8005dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8005dfe:	e7f9      	b.n	8005df4 <memset+0x4>

08005e00 <sniprintf>:
 8005e00:	b40c      	push	{r2, r3}
 8005e02:	b530      	push	{r4, r5, lr}
 8005e04:	4b17      	ldr	r3, [pc, #92]	; (8005e64 <sniprintf+0x64>)
 8005e06:	1e0c      	subs	r4, r1, #0
 8005e08:	681d      	ldr	r5, [r3, #0]
 8005e0a:	b09d      	sub	sp, #116	; 0x74
 8005e0c:	da08      	bge.n	8005e20 <sniprintf+0x20>
 8005e0e:	238b      	movs	r3, #139	; 0x8b
 8005e10:	602b      	str	r3, [r5, #0]
 8005e12:	f04f 30ff 	mov.w	r0, #4294967295
 8005e16:	b01d      	add	sp, #116	; 0x74
 8005e18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e1c:	b002      	add	sp, #8
 8005e1e:	4770      	bx	lr
 8005e20:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005e24:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005e28:	bf14      	ite	ne
 8005e2a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005e2e:	4623      	moveq	r3, r4
 8005e30:	9304      	str	r3, [sp, #16]
 8005e32:	9307      	str	r3, [sp, #28]
 8005e34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e38:	9002      	str	r0, [sp, #8]
 8005e3a:	9006      	str	r0, [sp, #24]
 8005e3c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005e40:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005e42:	ab21      	add	r3, sp, #132	; 0x84
 8005e44:	a902      	add	r1, sp, #8
 8005e46:	4628      	mov	r0, r5
 8005e48:	9301      	str	r3, [sp, #4]
 8005e4a:	f000 f869 	bl	8005f20 <_svfiprintf_r>
 8005e4e:	1c43      	adds	r3, r0, #1
 8005e50:	bfbc      	itt	lt
 8005e52:	238b      	movlt	r3, #139	; 0x8b
 8005e54:	602b      	strlt	r3, [r5, #0]
 8005e56:	2c00      	cmp	r4, #0
 8005e58:	d0dd      	beq.n	8005e16 <sniprintf+0x16>
 8005e5a:	9b02      	ldr	r3, [sp, #8]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	701a      	strb	r2, [r3, #0]
 8005e60:	e7d9      	b.n	8005e16 <sniprintf+0x16>
 8005e62:	bf00      	nop
 8005e64:	2000000c 	.word	0x2000000c

08005e68 <__ssputs_r>:
 8005e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e6c:	688e      	ldr	r6, [r1, #8]
 8005e6e:	429e      	cmp	r6, r3
 8005e70:	4682      	mov	sl, r0
 8005e72:	460c      	mov	r4, r1
 8005e74:	4690      	mov	r8, r2
 8005e76:	461f      	mov	r7, r3
 8005e78:	d838      	bhi.n	8005eec <__ssputs_r+0x84>
 8005e7a:	898a      	ldrh	r2, [r1, #12]
 8005e7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e80:	d032      	beq.n	8005ee8 <__ssputs_r+0x80>
 8005e82:	6825      	ldr	r5, [r4, #0]
 8005e84:	6909      	ldr	r1, [r1, #16]
 8005e86:	eba5 0901 	sub.w	r9, r5, r1
 8005e8a:	6965      	ldr	r5, [r4, #20]
 8005e8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e94:	3301      	adds	r3, #1
 8005e96:	444b      	add	r3, r9
 8005e98:	106d      	asrs	r5, r5, #1
 8005e9a:	429d      	cmp	r5, r3
 8005e9c:	bf38      	it	cc
 8005e9e:	461d      	movcc	r5, r3
 8005ea0:	0553      	lsls	r3, r2, #21
 8005ea2:	d531      	bpl.n	8005f08 <__ssputs_r+0xa0>
 8005ea4:	4629      	mov	r1, r5
 8005ea6:	f000 fb47 	bl	8006538 <_malloc_r>
 8005eaa:	4606      	mov	r6, r0
 8005eac:	b950      	cbnz	r0, 8005ec4 <__ssputs_r+0x5c>
 8005eae:	230c      	movs	r3, #12
 8005eb0:	f8ca 3000 	str.w	r3, [sl]
 8005eb4:	89a3      	ldrh	r3, [r4, #12]
 8005eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005eba:	81a3      	strh	r3, [r4, #12]
 8005ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ec4:	6921      	ldr	r1, [r4, #16]
 8005ec6:	464a      	mov	r2, r9
 8005ec8:	f000 fabe 	bl	8006448 <memcpy>
 8005ecc:	89a3      	ldrh	r3, [r4, #12]
 8005ece:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ed6:	81a3      	strh	r3, [r4, #12]
 8005ed8:	6126      	str	r6, [r4, #16]
 8005eda:	6165      	str	r5, [r4, #20]
 8005edc:	444e      	add	r6, r9
 8005ede:	eba5 0509 	sub.w	r5, r5, r9
 8005ee2:	6026      	str	r6, [r4, #0]
 8005ee4:	60a5      	str	r5, [r4, #8]
 8005ee6:	463e      	mov	r6, r7
 8005ee8:	42be      	cmp	r6, r7
 8005eea:	d900      	bls.n	8005eee <__ssputs_r+0x86>
 8005eec:	463e      	mov	r6, r7
 8005eee:	4632      	mov	r2, r6
 8005ef0:	6820      	ldr	r0, [r4, #0]
 8005ef2:	4641      	mov	r1, r8
 8005ef4:	f000 fab6 	bl	8006464 <memmove>
 8005ef8:	68a3      	ldr	r3, [r4, #8]
 8005efa:	6822      	ldr	r2, [r4, #0]
 8005efc:	1b9b      	subs	r3, r3, r6
 8005efe:	4432      	add	r2, r6
 8005f00:	60a3      	str	r3, [r4, #8]
 8005f02:	6022      	str	r2, [r4, #0]
 8005f04:	2000      	movs	r0, #0
 8005f06:	e7db      	b.n	8005ec0 <__ssputs_r+0x58>
 8005f08:	462a      	mov	r2, r5
 8005f0a:	f000 fb6f 	bl	80065ec <_realloc_r>
 8005f0e:	4606      	mov	r6, r0
 8005f10:	2800      	cmp	r0, #0
 8005f12:	d1e1      	bne.n	8005ed8 <__ssputs_r+0x70>
 8005f14:	6921      	ldr	r1, [r4, #16]
 8005f16:	4650      	mov	r0, sl
 8005f18:	f000 fabe 	bl	8006498 <_free_r>
 8005f1c:	e7c7      	b.n	8005eae <__ssputs_r+0x46>
	...

08005f20 <_svfiprintf_r>:
 8005f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f24:	4698      	mov	r8, r3
 8005f26:	898b      	ldrh	r3, [r1, #12]
 8005f28:	061b      	lsls	r3, r3, #24
 8005f2a:	b09d      	sub	sp, #116	; 0x74
 8005f2c:	4607      	mov	r7, r0
 8005f2e:	460d      	mov	r5, r1
 8005f30:	4614      	mov	r4, r2
 8005f32:	d50e      	bpl.n	8005f52 <_svfiprintf_r+0x32>
 8005f34:	690b      	ldr	r3, [r1, #16]
 8005f36:	b963      	cbnz	r3, 8005f52 <_svfiprintf_r+0x32>
 8005f38:	2140      	movs	r1, #64	; 0x40
 8005f3a:	f000 fafd 	bl	8006538 <_malloc_r>
 8005f3e:	6028      	str	r0, [r5, #0]
 8005f40:	6128      	str	r0, [r5, #16]
 8005f42:	b920      	cbnz	r0, 8005f4e <_svfiprintf_r+0x2e>
 8005f44:	230c      	movs	r3, #12
 8005f46:	603b      	str	r3, [r7, #0]
 8005f48:	f04f 30ff 	mov.w	r0, #4294967295
 8005f4c:	e0d1      	b.n	80060f2 <_svfiprintf_r+0x1d2>
 8005f4e:	2340      	movs	r3, #64	; 0x40
 8005f50:	616b      	str	r3, [r5, #20]
 8005f52:	2300      	movs	r3, #0
 8005f54:	9309      	str	r3, [sp, #36]	; 0x24
 8005f56:	2320      	movs	r3, #32
 8005f58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f60:	2330      	movs	r3, #48	; 0x30
 8005f62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800610c <_svfiprintf_r+0x1ec>
 8005f66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f6a:	f04f 0901 	mov.w	r9, #1
 8005f6e:	4623      	mov	r3, r4
 8005f70:	469a      	mov	sl, r3
 8005f72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f76:	b10a      	cbz	r2, 8005f7c <_svfiprintf_r+0x5c>
 8005f78:	2a25      	cmp	r2, #37	; 0x25
 8005f7a:	d1f9      	bne.n	8005f70 <_svfiprintf_r+0x50>
 8005f7c:	ebba 0b04 	subs.w	fp, sl, r4
 8005f80:	d00b      	beq.n	8005f9a <_svfiprintf_r+0x7a>
 8005f82:	465b      	mov	r3, fp
 8005f84:	4622      	mov	r2, r4
 8005f86:	4629      	mov	r1, r5
 8005f88:	4638      	mov	r0, r7
 8005f8a:	f7ff ff6d 	bl	8005e68 <__ssputs_r>
 8005f8e:	3001      	adds	r0, #1
 8005f90:	f000 80aa 	beq.w	80060e8 <_svfiprintf_r+0x1c8>
 8005f94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f96:	445a      	add	r2, fp
 8005f98:	9209      	str	r2, [sp, #36]	; 0x24
 8005f9a:	f89a 3000 	ldrb.w	r3, [sl]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f000 80a2 	beq.w	80060e8 <_svfiprintf_r+0x1c8>
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8005faa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fae:	f10a 0a01 	add.w	sl, sl, #1
 8005fb2:	9304      	str	r3, [sp, #16]
 8005fb4:	9307      	str	r3, [sp, #28]
 8005fb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fba:	931a      	str	r3, [sp, #104]	; 0x68
 8005fbc:	4654      	mov	r4, sl
 8005fbe:	2205      	movs	r2, #5
 8005fc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fc4:	4851      	ldr	r0, [pc, #324]	; (800610c <_svfiprintf_r+0x1ec>)
 8005fc6:	f7fa f90b 	bl	80001e0 <memchr>
 8005fca:	9a04      	ldr	r2, [sp, #16]
 8005fcc:	b9d8      	cbnz	r0, 8006006 <_svfiprintf_r+0xe6>
 8005fce:	06d0      	lsls	r0, r2, #27
 8005fd0:	bf44      	itt	mi
 8005fd2:	2320      	movmi	r3, #32
 8005fd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fd8:	0711      	lsls	r1, r2, #28
 8005fda:	bf44      	itt	mi
 8005fdc:	232b      	movmi	r3, #43	; 0x2b
 8005fde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fe2:	f89a 3000 	ldrb.w	r3, [sl]
 8005fe6:	2b2a      	cmp	r3, #42	; 0x2a
 8005fe8:	d015      	beq.n	8006016 <_svfiprintf_r+0xf6>
 8005fea:	9a07      	ldr	r2, [sp, #28]
 8005fec:	4654      	mov	r4, sl
 8005fee:	2000      	movs	r0, #0
 8005ff0:	f04f 0c0a 	mov.w	ip, #10
 8005ff4:	4621      	mov	r1, r4
 8005ff6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ffa:	3b30      	subs	r3, #48	; 0x30
 8005ffc:	2b09      	cmp	r3, #9
 8005ffe:	d94e      	bls.n	800609e <_svfiprintf_r+0x17e>
 8006000:	b1b0      	cbz	r0, 8006030 <_svfiprintf_r+0x110>
 8006002:	9207      	str	r2, [sp, #28]
 8006004:	e014      	b.n	8006030 <_svfiprintf_r+0x110>
 8006006:	eba0 0308 	sub.w	r3, r0, r8
 800600a:	fa09 f303 	lsl.w	r3, r9, r3
 800600e:	4313      	orrs	r3, r2
 8006010:	9304      	str	r3, [sp, #16]
 8006012:	46a2      	mov	sl, r4
 8006014:	e7d2      	b.n	8005fbc <_svfiprintf_r+0x9c>
 8006016:	9b03      	ldr	r3, [sp, #12]
 8006018:	1d19      	adds	r1, r3, #4
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	9103      	str	r1, [sp, #12]
 800601e:	2b00      	cmp	r3, #0
 8006020:	bfbb      	ittet	lt
 8006022:	425b      	neglt	r3, r3
 8006024:	f042 0202 	orrlt.w	r2, r2, #2
 8006028:	9307      	strge	r3, [sp, #28]
 800602a:	9307      	strlt	r3, [sp, #28]
 800602c:	bfb8      	it	lt
 800602e:	9204      	strlt	r2, [sp, #16]
 8006030:	7823      	ldrb	r3, [r4, #0]
 8006032:	2b2e      	cmp	r3, #46	; 0x2e
 8006034:	d10c      	bne.n	8006050 <_svfiprintf_r+0x130>
 8006036:	7863      	ldrb	r3, [r4, #1]
 8006038:	2b2a      	cmp	r3, #42	; 0x2a
 800603a:	d135      	bne.n	80060a8 <_svfiprintf_r+0x188>
 800603c:	9b03      	ldr	r3, [sp, #12]
 800603e:	1d1a      	adds	r2, r3, #4
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	9203      	str	r2, [sp, #12]
 8006044:	2b00      	cmp	r3, #0
 8006046:	bfb8      	it	lt
 8006048:	f04f 33ff 	movlt.w	r3, #4294967295
 800604c:	3402      	adds	r4, #2
 800604e:	9305      	str	r3, [sp, #20]
 8006050:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800611c <_svfiprintf_r+0x1fc>
 8006054:	7821      	ldrb	r1, [r4, #0]
 8006056:	2203      	movs	r2, #3
 8006058:	4650      	mov	r0, sl
 800605a:	f7fa f8c1 	bl	80001e0 <memchr>
 800605e:	b140      	cbz	r0, 8006072 <_svfiprintf_r+0x152>
 8006060:	2340      	movs	r3, #64	; 0x40
 8006062:	eba0 000a 	sub.w	r0, r0, sl
 8006066:	fa03 f000 	lsl.w	r0, r3, r0
 800606a:	9b04      	ldr	r3, [sp, #16]
 800606c:	4303      	orrs	r3, r0
 800606e:	3401      	adds	r4, #1
 8006070:	9304      	str	r3, [sp, #16]
 8006072:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006076:	4826      	ldr	r0, [pc, #152]	; (8006110 <_svfiprintf_r+0x1f0>)
 8006078:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800607c:	2206      	movs	r2, #6
 800607e:	f7fa f8af 	bl	80001e0 <memchr>
 8006082:	2800      	cmp	r0, #0
 8006084:	d038      	beq.n	80060f8 <_svfiprintf_r+0x1d8>
 8006086:	4b23      	ldr	r3, [pc, #140]	; (8006114 <_svfiprintf_r+0x1f4>)
 8006088:	bb1b      	cbnz	r3, 80060d2 <_svfiprintf_r+0x1b2>
 800608a:	9b03      	ldr	r3, [sp, #12]
 800608c:	3307      	adds	r3, #7
 800608e:	f023 0307 	bic.w	r3, r3, #7
 8006092:	3308      	adds	r3, #8
 8006094:	9303      	str	r3, [sp, #12]
 8006096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006098:	4433      	add	r3, r6
 800609a:	9309      	str	r3, [sp, #36]	; 0x24
 800609c:	e767      	b.n	8005f6e <_svfiprintf_r+0x4e>
 800609e:	fb0c 3202 	mla	r2, ip, r2, r3
 80060a2:	460c      	mov	r4, r1
 80060a4:	2001      	movs	r0, #1
 80060a6:	e7a5      	b.n	8005ff4 <_svfiprintf_r+0xd4>
 80060a8:	2300      	movs	r3, #0
 80060aa:	3401      	adds	r4, #1
 80060ac:	9305      	str	r3, [sp, #20]
 80060ae:	4619      	mov	r1, r3
 80060b0:	f04f 0c0a 	mov.w	ip, #10
 80060b4:	4620      	mov	r0, r4
 80060b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060ba:	3a30      	subs	r2, #48	; 0x30
 80060bc:	2a09      	cmp	r2, #9
 80060be:	d903      	bls.n	80060c8 <_svfiprintf_r+0x1a8>
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d0c5      	beq.n	8006050 <_svfiprintf_r+0x130>
 80060c4:	9105      	str	r1, [sp, #20]
 80060c6:	e7c3      	b.n	8006050 <_svfiprintf_r+0x130>
 80060c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80060cc:	4604      	mov	r4, r0
 80060ce:	2301      	movs	r3, #1
 80060d0:	e7f0      	b.n	80060b4 <_svfiprintf_r+0x194>
 80060d2:	ab03      	add	r3, sp, #12
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	462a      	mov	r2, r5
 80060d8:	4b0f      	ldr	r3, [pc, #60]	; (8006118 <_svfiprintf_r+0x1f8>)
 80060da:	a904      	add	r1, sp, #16
 80060dc:	4638      	mov	r0, r7
 80060de:	f3af 8000 	nop.w
 80060e2:	1c42      	adds	r2, r0, #1
 80060e4:	4606      	mov	r6, r0
 80060e6:	d1d6      	bne.n	8006096 <_svfiprintf_r+0x176>
 80060e8:	89ab      	ldrh	r3, [r5, #12]
 80060ea:	065b      	lsls	r3, r3, #25
 80060ec:	f53f af2c 	bmi.w	8005f48 <_svfiprintf_r+0x28>
 80060f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060f2:	b01d      	add	sp, #116	; 0x74
 80060f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060f8:	ab03      	add	r3, sp, #12
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	462a      	mov	r2, r5
 80060fe:	4b06      	ldr	r3, [pc, #24]	; (8006118 <_svfiprintf_r+0x1f8>)
 8006100:	a904      	add	r1, sp, #16
 8006102:	4638      	mov	r0, r7
 8006104:	f000 f87a 	bl	80061fc <_printf_i>
 8006108:	e7eb      	b.n	80060e2 <_svfiprintf_r+0x1c2>
 800610a:	bf00      	nop
 800610c:	080068cc 	.word	0x080068cc
 8006110:	080068d6 	.word	0x080068d6
 8006114:	00000000 	.word	0x00000000
 8006118:	08005e69 	.word	0x08005e69
 800611c:	080068d2 	.word	0x080068d2

08006120 <_printf_common>:
 8006120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006124:	4616      	mov	r6, r2
 8006126:	4699      	mov	r9, r3
 8006128:	688a      	ldr	r2, [r1, #8]
 800612a:	690b      	ldr	r3, [r1, #16]
 800612c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006130:	4293      	cmp	r3, r2
 8006132:	bfb8      	it	lt
 8006134:	4613      	movlt	r3, r2
 8006136:	6033      	str	r3, [r6, #0]
 8006138:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800613c:	4607      	mov	r7, r0
 800613e:	460c      	mov	r4, r1
 8006140:	b10a      	cbz	r2, 8006146 <_printf_common+0x26>
 8006142:	3301      	adds	r3, #1
 8006144:	6033      	str	r3, [r6, #0]
 8006146:	6823      	ldr	r3, [r4, #0]
 8006148:	0699      	lsls	r1, r3, #26
 800614a:	bf42      	ittt	mi
 800614c:	6833      	ldrmi	r3, [r6, #0]
 800614e:	3302      	addmi	r3, #2
 8006150:	6033      	strmi	r3, [r6, #0]
 8006152:	6825      	ldr	r5, [r4, #0]
 8006154:	f015 0506 	ands.w	r5, r5, #6
 8006158:	d106      	bne.n	8006168 <_printf_common+0x48>
 800615a:	f104 0a19 	add.w	sl, r4, #25
 800615e:	68e3      	ldr	r3, [r4, #12]
 8006160:	6832      	ldr	r2, [r6, #0]
 8006162:	1a9b      	subs	r3, r3, r2
 8006164:	42ab      	cmp	r3, r5
 8006166:	dc26      	bgt.n	80061b6 <_printf_common+0x96>
 8006168:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800616c:	1e13      	subs	r3, r2, #0
 800616e:	6822      	ldr	r2, [r4, #0]
 8006170:	bf18      	it	ne
 8006172:	2301      	movne	r3, #1
 8006174:	0692      	lsls	r2, r2, #26
 8006176:	d42b      	bmi.n	80061d0 <_printf_common+0xb0>
 8006178:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800617c:	4649      	mov	r1, r9
 800617e:	4638      	mov	r0, r7
 8006180:	47c0      	blx	r8
 8006182:	3001      	adds	r0, #1
 8006184:	d01e      	beq.n	80061c4 <_printf_common+0xa4>
 8006186:	6823      	ldr	r3, [r4, #0]
 8006188:	68e5      	ldr	r5, [r4, #12]
 800618a:	6832      	ldr	r2, [r6, #0]
 800618c:	f003 0306 	and.w	r3, r3, #6
 8006190:	2b04      	cmp	r3, #4
 8006192:	bf08      	it	eq
 8006194:	1aad      	subeq	r5, r5, r2
 8006196:	68a3      	ldr	r3, [r4, #8]
 8006198:	6922      	ldr	r2, [r4, #16]
 800619a:	bf0c      	ite	eq
 800619c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061a0:	2500      	movne	r5, #0
 80061a2:	4293      	cmp	r3, r2
 80061a4:	bfc4      	itt	gt
 80061a6:	1a9b      	subgt	r3, r3, r2
 80061a8:	18ed      	addgt	r5, r5, r3
 80061aa:	2600      	movs	r6, #0
 80061ac:	341a      	adds	r4, #26
 80061ae:	42b5      	cmp	r5, r6
 80061b0:	d11a      	bne.n	80061e8 <_printf_common+0xc8>
 80061b2:	2000      	movs	r0, #0
 80061b4:	e008      	b.n	80061c8 <_printf_common+0xa8>
 80061b6:	2301      	movs	r3, #1
 80061b8:	4652      	mov	r2, sl
 80061ba:	4649      	mov	r1, r9
 80061bc:	4638      	mov	r0, r7
 80061be:	47c0      	blx	r8
 80061c0:	3001      	adds	r0, #1
 80061c2:	d103      	bne.n	80061cc <_printf_common+0xac>
 80061c4:	f04f 30ff 	mov.w	r0, #4294967295
 80061c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061cc:	3501      	adds	r5, #1
 80061ce:	e7c6      	b.n	800615e <_printf_common+0x3e>
 80061d0:	18e1      	adds	r1, r4, r3
 80061d2:	1c5a      	adds	r2, r3, #1
 80061d4:	2030      	movs	r0, #48	; 0x30
 80061d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061da:	4422      	add	r2, r4
 80061dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061e4:	3302      	adds	r3, #2
 80061e6:	e7c7      	b.n	8006178 <_printf_common+0x58>
 80061e8:	2301      	movs	r3, #1
 80061ea:	4622      	mov	r2, r4
 80061ec:	4649      	mov	r1, r9
 80061ee:	4638      	mov	r0, r7
 80061f0:	47c0      	blx	r8
 80061f2:	3001      	adds	r0, #1
 80061f4:	d0e6      	beq.n	80061c4 <_printf_common+0xa4>
 80061f6:	3601      	adds	r6, #1
 80061f8:	e7d9      	b.n	80061ae <_printf_common+0x8e>
	...

080061fc <_printf_i>:
 80061fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006200:	460c      	mov	r4, r1
 8006202:	4691      	mov	r9, r2
 8006204:	7e27      	ldrb	r7, [r4, #24]
 8006206:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006208:	2f78      	cmp	r7, #120	; 0x78
 800620a:	4680      	mov	r8, r0
 800620c:	469a      	mov	sl, r3
 800620e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006212:	d807      	bhi.n	8006224 <_printf_i+0x28>
 8006214:	2f62      	cmp	r7, #98	; 0x62
 8006216:	d80a      	bhi.n	800622e <_printf_i+0x32>
 8006218:	2f00      	cmp	r7, #0
 800621a:	f000 80d8 	beq.w	80063ce <_printf_i+0x1d2>
 800621e:	2f58      	cmp	r7, #88	; 0x58
 8006220:	f000 80a3 	beq.w	800636a <_printf_i+0x16e>
 8006224:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006228:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800622c:	e03a      	b.n	80062a4 <_printf_i+0xa8>
 800622e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006232:	2b15      	cmp	r3, #21
 8006234:	d8f6      	bhi.n	8006224 <_printf_i+0x28>
 8006236:	a001      	add	r0, pc, #4	; (adr r0, 800623c <_printf_i+0x40>)
 8006238:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800623c:	08006295 	.word	0x08006295
 8006240:	080062a9 	.word	0x080062a9
 8006244:	08006225 	.word	0x08006225
 8006248:	08006225 	.word	0x08006225
 800624c:	08006225 	.word	0x08006225
 8006250:	08006225 	.word	0x08006225
 8006254:	080062a9 	.word	0x080062a9
 8006258:	08006225 	.word	0x08006225
 800625c:	08006225 	.word	0x08006225
 8006260:	08006225 	.word	0x08006225
 8006264:	08006225 	.word	0x08006225
 8006268:	080063b5 	.word	0x080063b5
 800626c:	080062d9 	.word	0x080062d9
 8006270:	08006397 	.word	0x08006397
 8006274:	08006225 	.word	0x08006225
 8006278:	08006225 	.word	0x08006225
 800627c:	080063d7 	.word	0x080063d7
 8006280:	08006225 	.word	0x08006225
 8006284:	080062d9 	.word	0x080062d9
 8006288:	08006225 	.word	0x08006225
 800628c:	08006225 	.word	0x08006225
 8006290:	0800639f 	.word	0x0800639f
 8006294:	680b      	ldr	r3, [r1, #0]
 8006296:	1d1a      	adds	r2, r3, #4
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	600a      	str	r2, [r1, #0]
 800629c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80062a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062a4:	2301      	movs	r3, #1
 80062a6:	e0a3      	b.n	80063f0 <_printf_i+0x1f4>
 80062a8:	6825      	ldr	r5, [r4, #0]
 80062aa:	6808      	ldr	r0, [r1, #0]
 80062ac:	062e      	lsls	r6, r5, #24
 80062ae:	f100 0304 	add.w	r3, r0, #4
 80062b2:	d50a      	bpl.n	80062ca <_printf_i+0xce>
 80062b4:	6805      	ldr	r5, [r0, #0]
 80062b6:	600b      	str	r3, [r1, #0]
 80062b8:	2d00      	cmp	r5, #0
 80062ba:	da03      	bge.n	80062c4 <_printf_i+0xc8>
 80062bc:	232d      	movs	r3, #45	; 0x2d
 80062be:	426d      	negs	r5, r5
 80062c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062c4:	485e      	ldr	r0, [pc, #376]	; (8006440 <_printf_i+0x244>)
 80062c6:	230a      	movs	r3, #10
 80062c8:	e019      	b.n	80062fe <_printf_i+0x102>
 80062ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 80062ce:	6805      	ldr	r5, [r0, #0]
 80062d0:	600b      	str	r3, [r1, #0]
 80062d2:	bf18      	it	ne
 80062d4:	b22d      	sxthne	r5, r5
 80062d6:	e7ef      	b.n	80062b8 <_printf_i+0xbc>
 80062d8:	680b      	ldr	r3, [r1, #0]
 80062da:	6825      	ldr	r5, [r4, #0]
 80062dc:	1d18      	adds	r0, r3, #4
 80062de:	6008      	str	r0, [r1, #0]
 80062e0:	0628      	lsls	r0, r5, #24
 80062e2:	d501      	bpl.n	80062e8 <_printf_i+0xec>
 80062e4:	681d      	ldr	r5, [r3, #0]
 80062e6:	e002      	b.n	80062ee <_printf_i+0xf2>
 80062e8:	0669      	lsls	r1, r5, #25
 80062ea:	d5fb      	bpl.n	80062e4 <_printf_i+0xe8>
 80062ec:	881d      	ldrh	r5, [r3, #0]
 80062ee:	4854      	ldr	r0, [pc, #336]	; (8006440 <_printf_i+0x244>)
 80062f0:	2f6f      	cmp	r7, #111	; 0x6f
 80062f2:	bf0c      	ite	eq
 80062f4:	2308      	moveq	r3, #8
 80062f6:	230a      	movne	r3, #10
 80062f8:	2100      	movs	r1, #0
 80062fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062fe:	6866      	ldr	r6, [r4, #4]
 8006300:	60a6      	str	r6, [r4, #8]
 8006302:	2e00      	cmp	r6, #0
 8006304:	bfa2      	ittt	ge
 8006306:	6821      	ldrge	r1, [r4, #0]
 8006308:	f021 0104 	bicge.w	r1, r1, #4
 800630c:	6021      	strge	r1, [r4, #0]
 800630e:	b90d      	cbnz	r5, 8006314 <_printf_i+0x118>
 8006310:	2e00      	cmp	r6, #0
 8006312:	d04d      	beq.n	80063b0 <_printf_i+0x1b4>
 8006314:	4616      	mov	r6, r2
 8006316:	fbb5 f1f3 	udiv	r1, r5, r3
 800631a:	fb03 5711 	mls	r7, r3, r1, r5
 800631e:	5dc7      	ldrb	r7, [r0, r7]
 8006320:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006324:	462f      	mov	r7, r5
 8006326:	42bb      	cmp	r3, r7
 8006328:	460d      	mov	r5, r1
 800632a:	d9f4      	bls.n	8006316 <_printf_i+0x11a>
 800632c:	2b08      	cmp	r3, #8
 800632e:	d10b      	bne.n	8006348 <_printf_i+0x14c>
 8006330:	6823      	ldr	r3, [r4, #0]
 8006332:	07df      	lsls	r7, r3, #31
 8006334:	d508      	bpl.n	8006348 <_printf_i+0x14c>
 8006336:	6923      	ldr	r3, [r4, #16]
 8006338:	6861      	ldr	r1, [r4, #4]
 800633a:	4299      	cmp	r1, r3
 800633c:	bfde      	ittt	le
 800633e:	2330      	movle	r3, #48	; 0x30
 8006340:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006344:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006348:	1b92      	subs	r2, r2, r6
 800634a:	6122      	str	r2, [r4, #16]
 800634c:	f8cd a000 	str.w	sl, [sp]
 8006350:	464b      	mov	r3, r9
 8006352:	aa03      	add	r2, sp, #12
 8006354:	4621      	mov	r1, r4
 8006356:	4640      	mov	r0, r8
 8006358:	f7ff fee2 	bl	8006120 <_printf_common>
 800635c:	3001      	adds	r0, #1
 800635e:	d14c      	bne.n	80063fa <_printf_i+0x1fe>
 8006360:	f04f 30ff 	mov.w	r0, #4294967295
 8006364:	b004      	add	sp, #16
 8006366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800636a:	4835      	ldr	r0, [pc, #212]	; (8006440 <_printf_i+0x244>)
 800636c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006370:	6823      	ldr	r3, [r4, #0]
 8006372:	680e      	ldr	r6, [r1, #0]
 8006374:	061f      	lsls	r7, r3, #24
 8006376:	f856 5b04 	ldr.w	r5, [r6], #4
 800637a:	600e      	str	r6, [r1, #0]
 800637c:	d514      	bpl.n	80063a8 <_printf_i+0x1ac>
 800637e:	07d9      	lsls	r1, r3, #31
 8006380:	bf44      	itt	mi
 8006382:	f043 0320 	orrmi.w	r3, r3, #32
 8006386:	6023      	strmi	r3, [r4, #0]
 8006388:	b91d      	cbnz	r5, 8006392 <_printf_i+0x196>
 800638a:	6823      	ldr	r3, [r4, #0]
 800638c:	f023 0320 	bic.w	r3, r3, #32
 8006390:	6023      	str	r3, [r4, #0]
 8006392:	2310      	movs	r3, #16
 8006394:	e7b0      	b.n	80062f8 <_printf_i+0xfc>
 8006396:	6823      	ldr	r3, [r4, #0]
 8006398:	f043 0320 	orr.w	r3, r3, #32
 800639c:	6023      	str	r3, [r4, #0]
 800639e:	2378      	movs	r3, #120	; 0x78
 80063a0:	4828      	ldr	r0, [pc, #160]	; (8006444 <_printf_i+0x248>)
 80063a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063a6:	e7e3      	b.n	8006370 <_printf_i+0x174>
 80063a8:	065e      	lsls	r6, r3, #25
 80063aa:	bf48      	it	mi
 80063ac:	b2ad      	uxthmi	r5, r5
 80063ae:	e7e6      	b.n	800637e <_printf_i+0x182>
 80063b0:	4616      	mov	r6, r2
 80063b2:	e7bb      	b.n	800632c <_printf_i+0x130>
 80063b4:	680b      	ldr	r3, [r1, #0]
 80063b6:	6826      	ldr	r6, [r4, #0]
 80063b8:	6960      	ldr	r0, [r4, #20]
 80063ba:	1d1d      	adds	r5, r3, #4
 80063bc:	600d      	str	r5, [r1, #0]
 80063be:	0635      	lsls	r5, r6, #24
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	d501      	bpl.n	80063c8 <_printf_i+0x1cc>
 80063c4:	6018      	str	r0, [r3, #0]
 80063c6:	e002      	b.n	80063ce <_printf_i+0x1d2>
 80063c8:	0671      	lsls	r1, r6, #25
 80063ca:	d5fb      	bpl.n	80063c4 <_printf_i+0x1c8>
 80063cc:	8018      	strh	r0, [r3, #0]
 80063ce:	2300      	movs	r3, #0
 80063d0:	6123      	str	r3, [r4, #16]
 80063d2:	4616      	mov	r6, r2
 80063d4:	e7ba      	b.n	800634c <_printf_i+0x150>
 80063d6:	680b      	ldr	r3, [r1, #0]
 80063d8:	1d1a      	adds	r2, r3, #4
 80063da:	600a      	str	r2, [r1, #0]
 80063dc:	681e      	ldr	r6, [r3, #0]
 80063de:	6862      	ldr	r2, [r4, #4]
 80063e0:	2100      	movs	r1, #0
 80063e2:	4630      	mov	r0, r6
 80063e4:	f7f9 fefc 	bl	80001e0 <memchr>
 80063e8:	b108      	cbz	r0, 80063ee <_printf_i+0x1f2>
 80063ea:	1b80      	subs	r0, r0, r6
 80063ec:	6060      	str	r0, [r4, #4]
 80063ee:	6863      	ldr	r3, [r4, #4]
 80063f0:	6123      	str	r3, [r4, #16]
 80063f2:	2300      	movs	r3, #0
 80063f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063f8:	e7a8      	b.n	800634c <_printf_i+0x150>
 80063fa:	6923      	ldr	r3, [r4, #16]
 80063fc:	4632      	mov	r2, r6
 80063fe:	4649      	mov	r1, r9
 8006400:	4640      	mov	r0, r8
 8006402:	47d0      	blx	sl
 8006404:	3001      	adds	r0, #1
 8006406:	d0ab      	beq.n	8006360 <_printf_i+0x164>
 8006408:	6823      	ldr	r3, [r4, #0]
 800640a:	079b      	lsls	r3, r3, #30
 800640c:	d413      	bmi.n	8006436 <_printf_i+0x23a>
 800640e:	68e0      	ldr	r0, [r4, #12]
 8006410:	9b03      	ldr	r3, [sp, #12]
 8006412:	4298      	cmp	r0, r3
 8006414:	bfb8      	it	lt
 8006416:	4618      	movlt	r0, r3
 8006418:	e7a4      	b.n	8006364 <_printf_i+0x168>
 800641a:	2301      	movs	r3, #1
 800641c:	4632      	mov	r2, r6
 800641e:	4649      	mov	r1, r9
 8006420:	4640      	mov	r0, r8
 8006422:	47d0      	blx	sl
 8006424:	3001      	adds	r0, #1
 8006426:	d09b      	beq.n	8006360 <_printf_i+0x164>
 8006428:	3501      	adds	r5, #1
 800642a:	68e3      	ldr	r3, [r4, #12]
 800642c:	9903      	ldr	r1, [sp, #12]
 800642e:	1a5b      	subs	r3, r3, r1
 8006430:	42ab      	cmp	r3, r5
 8006432:	dcf2      	bgt.n	800641a <_printf_i+0x21e>
 8006434:	e7eb      	b.n	800640e <_printf_i+0x212>
 8006436:	2500      	movs	r5, #0
 8006438:	f104 0619 	add.w	r6, r4, #25
 800643c:	e7f5      	b.n	800642a <_printf_i+0x22e>
 800643e:	bf00      	nop
 8006440:	080068dd 	.word	0x080068dd
 8006444:	080068ee 	.word	0x080068ee

08006448 <memcpy>:
 8006448:	440a      	add	r2, r1
 800644a:	4291      	cmp	r1, r2
 800644c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006450:	d100      	bne.n	8006454 <memcpy+0xc>
 8006452:	4770      	bx	lr
 8006454:	b510      	push	{r4, lr}
 8006456:	f811 4b01 	ldrb.w	r4, [r1], #1
 800645a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800645e:	4291      	cmp	r1, r2
 8006460:	d1f9      	bne.n	8006456 <memcpy+0xe>
 8006462:	bd10      	pop	{r4, pc}

08006464 <memmove>:
 8006464:	4288      	cmp	r0, r1
 8006466:	b510      	push	{r4, lr}
 8006468:	eb01 0402 	add.w	r4, r1, r2
 800646c:	d902      	bls.n	8006474 <memmove+0x10>
 800646e:	4284      	cmp	r4, r0
 8006470:	4623      	mov	r3, r4
 8006472:	d807      	bhi.n	8006484 <memmove+0x20>
 8006474:	1e43      	subs	r3, r0, #1
 8006476:	42a1      	cmp	r1, r4
 8006478:	d008      	beq.n	800648c <memmove+0x28>
 800647a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800647e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006482:	e7f8      	b.n	8006476 <memmove+0x12>
 8006484:	4402      	add	r2, r0
 8006486:	4601      	mov	r1, r0
 8006488:	428a      	cmp	r2, r1
 800648a:	d100      	bne.n	800648e <memmove+0x2a>
 800648c:	bd10      	pop	{r4, pc}
 800648e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006492:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006496:	e7f7      	b.n	8006488 <memmove+0x24>

08006498 <_free_r>:
 8006498:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800649a:	2900      	cmp	r1, #0
 800649c:	d048      	beq.n	8006530 <_free_r+0x98>
 800649e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064a2:	9001      	str	r0, [sp, #4]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	f1a1 0404 	sub.w	r4, r1, #4
 80064aa:	bfb8      	it	lt
 80064ac:	18e4      	addlt	r4, r4, r3
 80064ae:	f000 f8d3 	bl	8006658 <__malloc_lock>
 80064b2:	4a20      	ldr	r2, [pc, #128]	; (8006534 <_free_r+0x9c>)
 80064b4:	9801      	ldr	r0, [sp, #4]
 80064b6:	6813      	ldr	r3, [r2, #0]
 80064b8:	4615      	mov	r5, r2
 80064ba:	b933      	cbnz	r3, 80064ca <_free_r+0x32>
 80064bc:	6063      	str	r3, [r4, #4]
 80064be:	6014      	str	r4, [r2, #0]
 80064c0:	b003      	add	sp, #12
 80064c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80064c6:	f000 b8cd 	b.w	8006664 <__malloc_unlock>
 80064ca:	42a3      	cmp	r3, r4
 80064cc:	d90b      	bls.n	80064e6 <_free_r+0x4e>
 80064ce:	6821      	ldr	r1, [r4, #0]
 80064d0:	1862      	adds	r2, r4, r1
 80064d2:	4293      	cmp	r3, r2
 80064d4:	bf04      	itt	eq
 80064d6:	681a      	ldreq	r2, [r3, #0]
 80064d8:	685b      	ldreq	r3, [r3, #4]
 80064da:	6063      	str	r3, [r4, #4]
 80064dc:	bf04      	itt	eq
 80064de:	1852      	addeq	r2, r2, r1
 80064e0:	6022      	streq	r2, [r4, #0]
 80064e2:	602c      	str	r4, [r5, #0]
 80064e4:	e7ec      	b.n	80064c0 <_free_r+0x28>
 80064e6:	461a      	mov	r2, r3
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	b10b      	cbz	r3, 80064f0 <_free_r+0x58>
 80064ec:	42a3      	cmp	r3, r4
 80064ee:	d9fa      	bls.n	80064e6 <_free_r+0x4e>
 80064f0:	6811      	ldr	r1, [r2, #0]
 80064f2:	1855      	adds	r5, r2, r1
 80064f4:	42a5      	cmp	r5, r4
 80064f6:	d10b      	bne.n	8006510 <_free_r+0x78>
 80064f8:	6824      	ldr	r4, [r4, #0]
 80064fa:	4421      	add	r1, r4
 80064fc:	1854      	adds	r4, r2, r1
 80064fe:	42a3      	cmp	r3, r4
 8006500:	6011      	str	r1, [r2, #0]
 8006502:	d1dd      	bne.n	80064c0 <_free_r+0x28>
 8006504:	681c      	ldr	r4, [r3, #0]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	6053      	str	r3, [r2, #4]
 800650a:	4421      	add	r1, r4
 800650c:	6011      	str	r1, [r2, #0]
 800650e:	e7d7      	b.n	80064c0 <_free_r+0x28>
 8006510:	d902      	bls.n	8006518 <_free_r+0x80>
 8006512:	230c      	movs	r3, #12
 8006514:	6003      	str	r3, [r0, #0]
 8006516:	e7d3      	b.n	80064c0 <_free_r+0x28>
 8006518:	6825      	ldr	r5, [r4, #0]
 800651a:	1961      	adds	r1, r4, r5
 800651c:	428b      	cmp	r3, r1
 800651e:	bf04      	itt	eq
 8006520:	6819      	ldreq	r1, [r3, #0]
 8006522:	685b      	ldreq	r3, [r3, #4]
 8006524:	6063      	str	r3, [r4, #4]
 8006526:	bf04      	itt	eq
 8006528:	1949      	addeq	r1, r1, r5
 800652a:	6021      	streq	r1, [r4, #0]
 800652c:	6054      	str	r4, [r2, #4]
 800652e:	e7c7      	b.n	80064c0 <_free_r+0x28>
 8006530:	b003      	add	sp, #12
 8006532:	bd30      	pop	{r4, r5, pc}
 8006534:	200000b8 	.word	0x200000b8

08006538 <_malloc_r>:
 8006538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800653a:	1ccd      	adds	r5, r1, #3
 800653c:	f025 0503 	bic.w	r5, r5, #3
 8006540:	3508      	adds	r5, #8
 8006542:	2d0c      	cmp	r5, #12
 8006544:	bf38      	it	cc
 8006546:	250c      	movcc	r5, #12
 8006548:	2d00      	cmp	r5, #0
 800654a:	4606      	mov	r6, r0
 800654c:	db01      	blt.n	8006552 <_malloc_r+0x1a>
 800654e:	42a9      	cmp	r1, r5
 8006550:	d903      	bls.n	800655a <_malloc_r+0x22>
 8006552:	230c      	movs	r3, #12
 8006554:	6033      	str	r3, [r6, #0]
 8006556:	2000      	movs	r0, #0
 8006558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800655a:	f000 f87d 	bl	8006658 <__malloc_lock>
 800655e:	4921      	ldr	r1, [pc, #132]	; (80065e4 <_malloc_r+0xac>)
 8006560:	680a      	ldr	r2, [r1, #0]
 8006562:	4614      	mov	r4, r2
 8006564:	b99c      	cbnz	r4, 800658e <_malloc_r+0x56>
 8006566:	4f20      	ldr	r7, [pc, #128]	; (80065e8 <_malloc_r+0xb0>)
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	b923      	cbnz	r3, 8006576 <_malloc_r+0x3e>
 800656c:	4621      	mov	r1, r4
 800656e:	4630      	mov	r0, r6
 8006570:	f000 f862 	bl	8006638 <_sbrk_r>
 8006574:	6038      	str	r0, [r7, #0]
 8006576:	4629      	mov	r1, r5
 8006578:	4630      	mov	r0, r6
 800657a:	f000 f85d 	bl	8006638 <_sbrk_r>
 800657e:	1c43      	adds	r3, r0, #1
 8006580:	d123      	bne.n	80065ca <_malloc_r+0x92>
 8006582:	230c      	movs	r3, #12
 8006584:	6033      	str	r3, [r6, #0]
 8006586:	4630      	mov	r0, r6
 8006588:	f000 f86c 	bl	8006664 <__malloc_unlock>
 800658c:	e7e3      	b.n	8006556 <_malloc_r+0x1e>
 800658e:	6823      	ldr	r3, [r4, #0]
 8006590:	1b5b      	subs	r3, r3, r5
 8006592:	d417      	bmi.n	80065c4 <_malloc_r+0x8c>
 8006594:	2b0b      	cmp	r3, #11
 8006596:	d903      	bls.n	80065a0 <_malloc_r+0x68>
 8006598:	6023      	str	r3, [r4, #0]
 800659a:	441c      	add	r4, r3
 800659c:	6025      	str	r5, [r4, #0]
 800659e:	e004      	b.n	80065aa <_malloc_r+0x72>
 80065a0:	6863      	ldr	r3, [r4, #4]
 80065a2:	42a2      	cmp	r2, r4
 80065a4:	bf0c      	ite	eq
 80065a6:	600b      	streq	r3, [r1, #0]
 80065a8:	6053      	strne	r3, [r2, #4]
 80065aa:	4630      	mov	r0, r6
 80065ac:	f000 f85a 	bl	8006664 <__malloc_unlock>
 80065b0:	f104 000b 	add.w	r0, r4, #11
 80065b4:	1d23      	adds	r3, r4, #4
 80065b6:	f020 0007 	bic.w	r0, r0, #7
 80065ba:	1ac2      	subs	r2, r0, r3
 80065bc:	d0cc      	beq.n	8006558 <_malloc_r+0x20>
 80065be:	1a1b      	subs	r3, r3, r0
 80065c0:	50a3      	str	r3, [r4, r2]
 80065c2:	e7c9      	b.n	8006558 <_malloc_r+0x20>
 80065c4:	4622      	mov	r2, r4
 80065c6:	6864      	ldr	r4, [r4, #4]
 80065c8:	e7cc      	b.n	8006564 <_malloc_r+0x2c>
 80065ca:	1cc4      	adds	r4, r0, #3
 80065cc:	f024 0403 	bic.w	r4, r4, #3
 80065d0:	42a0      	cmp	r0, r4
 80065d2:	d0e3      	beq.n	800659c <_malloc_r+0x64>
 80065d4:	1a21      	subs	r1, r4, r0
 80065d6:	4630      	mov	r0, r6
 80065d8:	f000 f82e 	bl	8006638 <_sbrk_r>
 80065dc:	3001      	adds	r0, #1
 80065de:	d1dd      	bne.n	800659c <_malloc_r+0x64>
 80065e0:	e7cf      	b.n	8006582 <_malloc_r+0x4a>
 80065e2:	bf00      	nop
 80065e4:	200000b8 	.word	0x200000b8
 80065e8:	200000bc 	.word	0x200000bc

080065ec <_realloc_r>:
 80065ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ee:	4607      	mov	r7, r0
 80065f0:	4614      	mov	r4, r2
 80065f2:	460e      	mov	r6, r1
 80065f4:	b921      	cbnz	r1, 8006600 <_realloc_r+0x14>
 80065f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80065fa:	4611      	mov	r1, r2
 80065fc:	f7ff bf9c 	b.w	8006538 <_malloc_r>
 8006600:	b922      	cbnz	r2, 800660c <_realloc_r+0x20>
 8006602:	f7ff ff49 	bl	8006498 <_free_r>
 8006606:	4625      	mov	r5, r4
 8006608:	4628      	mov	r0, r5
 800660a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800660c:	f000 f830 	bl	8006670 <_malloc_usable_size_r>
 8006610:	42a0      	cmp	r0, r4
 8006612:	d20f      	bcs.n	8006634 <_realloc_r+0x48>
 8006614:	4621      	mov	r1, r4
 8006616:	4638      	mov	r0, r7
 8006618:	f7ff ff8e 	bl	8006538 <_malloc_r>
 800661c:	4605      	mov	r5, r0
 800661e:	2800      	cmp	r0, #0
 8006620:	d0f2      	beq.n	8006608 <_realloc_r+0x1c>
 8006622:	4631      	mov	r1, r6
 8006624:	4622      	mov	r2, r4
 8006626:	f7ff ff0f 	bl	8006448 <memcpy>
 800662a:	4631      	mov	r1, r6
 800662c:	4638      	mov	r0, r7
 800662e:	f7ff ff33 	bl	8006498 <_free_r>
 8006632:	e7e9      	b.n	8006608 <_realloc_r+0x1c>
 8006634:	4635      	mov	r5, r6
 8006636:	e7e7      	b.n	8006608 <_realloc_r+0x1c>

08006638 <_sbrk_r>:
 8006638:	b538      	push	{r3, r4, r5, lr}
 800663a:	4d06      	ldr	r5, [pc, #24]	; (8006654 <_sbrk_r+0x1c>)
 800663c:	2300      	movs	r3, #0
 800663e:	4604      	mov	r4, r0
 8006640:	4608      	mov	r0, r1
 8006642:	602b      	str	r3, [r5, #0]
 8006644:	f7fb fb82 	bl	8001d4c <_sbrk>
 8006648:	1c43      	adds	r3, r0, #1
 800664a:	d102      	bne.n	8006652 <_sbrk_r+0x1a>
 800664c:	682b      	ldr	r3, [r5, #0]
 800664e:	b103      	cbz	r3, 8006652 <_sbrk_r+0x1a>
 8006650:	6023      	str	r3, [r4, #0]
 8006652:	bd38      	pop	{r3, r4, r5, pc}
 8006654:	200007e8 	.word	0x200007e8

08006658 <__malloc_lock>:
 8006658:	4801      	ldr	r0, [pc, #4]	; (8006660 <__malloc_lock+0x8>)
 800665a:	f000 b811 	b.w	8006680 <__retarget_lock_acquire_recursive>
 800665e:	bf00      	nop
 8006660:	200007f0 	.word	0x200007f0

08006664 <__malloc_unlock>:
 8006664:	4801      	ldr	r0, [pc, #4]	; (800666c <__malloc_unlock+0x8>)
 8006666:	f000 b80c 	b.w	8006682 <__retarget_lock_release_recursive>
 800666a:	bf00      	nop
 800666c:	200007f0 	.word	0x200007f0

08006670 <_malloc_usable_size_r>:
 8006670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006674:	1f18      	subs	r0, r3, #4
 8006676:	2b00      	cmp	r3, #0
 8006678:	bfbc      	itt	lt
 800667a:	580b      	ldrlt	r3, [r1, r0]
 800667c:	18c0      	addlt	r0, r0, r3
 800667e:	4770      	bx	lr

08006680 <__retarget_lock_acquire_recursive>:
 8006680:	4770      	bx	lr

08006682 <__retarget_lock_release_recursive>:
 8006682:	4770      	bx	lr

08006684 <_init>:
 8006684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006686:	bf00      	nop
 8006688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800668a:	bc08      	pop	{r3}
 800668c:	469e      	mov	lr, r3
 800668e:	4770      	bx	lr

08006690 <_fini>:
 8006690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006692:	bf00      	nop
 8006694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006696:	bc08      	pop	{r3}
 8006698:	469e      	mov	lr, r3
 800669a:	4770      	bx	lr

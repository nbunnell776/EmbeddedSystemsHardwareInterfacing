
UCSD-Embedded-HW-Interfacing-FinalProject-Nathan-Bunnell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006574  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  08006704  08006704  00016704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006968  08006968  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006968  08006968  00016968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006970  08006970  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006970  08006970  00016970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006974  08006974  00016974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000788  20000070  080069e8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007f8  080069e8  000207f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019197  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e2a  00000000  00000000  00039237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001588  00000000  00000000  0003c068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001460  00000000  00000000  0003d5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000280c6  00000000  00000000  0003ea50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000170ba  00000000  00000000  00066b16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3b15  00000000  00000000  0007dbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001716e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000600c  00000000  00000000  00171738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080066ec 	.word	0x080066ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080066ec 	.word	0x080066ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <do_toggle_LED>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void do_toggle_LED(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 5; i++)
 800057e:	2300      	movs	r3, #0
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	e00a      	b.n	800059a <do_toggle_LED+0x22>
	{
		  HAL_GPIO_TogglePin(LED3_WIFI__LED4_BLE_GPIO_Port, LED3_WIFI__LED4_BLE_Pin);
 8000584:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000588:	4808      	ldr	r0, [pc, #32]	; (80005ac <do_toggle_LED+0x34>)
 800058a:	f002 f91d 	bl	80027c8 <HAL_GPIO_TogglePin>
		  HAL_Delay(250);
 800058e:	20fa      	movs	r0, #250	; 0xfa
 8000590:	f001 fd16 	bl	8001fc0 <HAL_Delay>
	for (int i = 0; i < 5; i++)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	3301      	adds	r3, #1
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2b04      	cmp	r3, #4
 800059e:	ddf1      	ble.n	8000584 <do_toggle_LED+0xc>
	}
}
 80005a0:	bf00      	nop
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	48000800 	.word	0x48000800

080005b0 <do_get_time>:

static void do_get_time(void)
{
 80005b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005b2:	b0b3      	sub	sp, #204	; 0xcc
 80005b4:	af0c      	add	r7, sp, #48	; 0x30
	// Large char buffer for strings sent over the console
	char buffer[100] = {0};
 80005b6:	2300      	movs	r3, #0
 80005b8:	627b      	str	r3, [r7, #36]	; 0x24
 80005ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005be:	2260      	movs	r2, #96	; 0x60
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f005 fc48 	bl	8005e58 <memset>

	// Register Seconds, address 0x00
	uint8_t Seconds_Address = 0x00;
 80005c8:	2300      	movs	r3, #0
 80005ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Seconds_Address, sizeof(Seconds_Address), 1000);
 80005ce:	f107 0223 	add.w	r2, r7, #35	; 0x23
 80005d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2301      	movs	r3, #1
 80005da:	2168      	movs	r1, #104	; 0x68
 80005dc:	488f      	ldr	r0, [pc, #572]	; (800081c <do_get_time+0x26c>)
 80005de:	f002 f9bf 	bl	8002960 <HAL_I2C_Master_Transmit>
	uint8_t Seconds_Value;
	HAL_I2C_Master_Receive(&hi2c1, DS3231_READ_ADDRESS, (uint8_t *)&Seconds_Value, sizeof(Seconds_Value), 1000);
 80005e2:	f107 0222 	add.w	r2, r7, #34	; 0x22
 80005e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	2301      	movs	r3, #1
 80005ee:	2168      	movs	r1, #104	; 0x68
 80005f0:	488a      	ldr	r0, [pc, #552]	; (800081c <do_get_time+0x26c>)
 80005f2:	f002 faa9 	bl	8002b48 <HAL_I2C_Master_Receive>
	uint8_t Seconds = (Seconds_Value & 0x0f);
 80005f6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80005fa:	f003 030f 	and.w	r3, r3, #15
 80005fe:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	uint8_t s10_Seconds = (Seconds_Value & 0x70);
 8000602:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000606:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800060a:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

	// Register Minutes, address 0x01
	uint8_t Minutes_Address = 0x01;
 800060e:	2301      	movs	r3, #1
 8000610:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Minutes_Address, sizeof(Minutes_Address), 1000);
 8000614:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8000618:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	2301      	movs	r3, #1
 8000620:	2168      	movs	r1, #104	; 0x68
 8000622:	487e      	ldr	r0, [pc, #504]	; (800081c <do_get_time+0x26c>)
 8000624:	f002 f99c 	bl	8002960 <HAL_I2C_Master_Transmit>
	uint8_t Minutes_Value;
	HAL_I2C_Master_Receive(&hi2c1, DS3231_READ_ADDRESS, (uint8_t *)&Minutes_Value, sizeof(Minutes_Value), 1000);
 8000628:	f107 0220 	add.w	r2, r7, #32
 800062c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2301      	movs	r3, #1
 8000634:	2168      	movs	r1, #104	; 0x68
 8000636:	4879      	ldr	r0, [pc, #484]	; (800081c <do_get_time+0x26c>)
 8000638:	f002 fa86 	bl	8002b48 <HAL_I2C_Master_Receive>
	uint8_t Minutes = (Minutes_Value & 0x0f);
 800063c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000640:	f003 030f 	and.w	r3, r3, #15
 8000644:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
	uint8_t s10_Minutes = (Minutes_Value & 0x70);
 8000648:	f897 3020 	ldrb.w	r3, [r7, #32]
 800064c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000650:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94

	// Register Hour, address 0x02
	uint8_t Hour_Address = 0x02;
 8000654:	2302      	movs	r3, #2
 8000656:	77fb      	strb	r3, [r7, #31]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Hour_Address, sizeof(Hour_Address), 1000);
 8000658:	f107 021f 	add.w	r2, r7, #31
 800065c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	2301      	movs	r3, #1
 8000664:	2168      	movs	r1, #104	; 0x68
 8000666:	486d      	ldr	r0, [pc, #436]	; (800081c <do_get_time+0x26c>)
 8000668:	f002 f97a 	bl	8002960 <HAL_I2C_Master_Transmit>
	uint8_t Hour_Value;
	HAL_I2C_Master_Receive(&hi2c1, DS3231_READ_ADDRESS, (uint8_t *)&Hour_Value, sizeof(Hour_Value), 1000);
 800066c:	f107 021e 	add.w	r2, r7, #30
 8000670:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	2301      	movs	r3, #1
 8000678:	2168      	movs	r1, #104	; 0x68
 800067a:	4868      	ldr	r0, [pc, #416]	; (800081c <do_get_time+0x26c>)
 800067c:	f002 fa64 	bl	8002b48 <HAL_I2C_Master_Receive>
	uint8_t Hours = (Hour_Value & 0x0f);
 8000680:	7fbb      	ldrb	r3, [r7, #30]
 8000682:	f003 030f 	and.w	r3, r3, #15
 8000686:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	uint8_t s10_Hours = (Hour_Value & 0x10);
 800068a:	7fbb      	ldrb	r3, [r7, #30]
 800068c:	f003 0310 	and.w	r3, r3, #16
 8000690:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92

	// Register Day, address 0x03
	uint8_t Day_Address = 0x03;
 8000694:	2303      	movs	r3, #3
 8000696:	777b      	strb	r3, [r7, #29]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Day_Address, sizeof(Day_Address), 1000);
 8000698:	f107 021d 	add.w	r2, r7, #29
 800069c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	2301      	movs	r3, #1
 80006a4:	2168      	movs	r1, #104	; 0x68
 80006a6:	485d      	ldr	r0, [pc, #372]	; (800081c <do_get_time+0x26c>)
 80006a8:	f002 f95a 	bl	8002960 <HAL_I2C_Master_Transmit>
	uint8_t Day_Value;
	HAL_I2C_Master_Receive(&hi2c1, DS3231_READ_ADDRESS, (uint8_t *)&Day_Value, sizeof(Day_Value), 1000);
 80006ac:	f107 021c 	add.w	r2, r7, #28
 80006b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2301      	movs	r3, #1
 80006b8:	2168      	movs	r1, #104	; 0x68
 80006ba:	4858      	ldr	r0, [pc, #352]	; (800081c <do_get_time+0x26c>)
 80006bc:	f002 fa44 	bl	8002b48 <HAL_I2C_Master_Receive>
	uint8_t Days = (Hour_Value & 0x07);
 80006c0:	7fbb      	ldrb	r3, [r7, #30]
 80006c2:	f003 0307 	and.w	r3, r3, #7
 80006c6:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91

	// Register Date, address 0x04
	uint8_t Date_Address = 0x04;
 80006ca:	2304      	movs	r3, #4
 80006cc:	76fb      	strb	r3, [r7, #27]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Date_Address, sizeof(Date_Address), 1000);
 80006ce:	f107 021b 	add.w	r2, r7, #27
 80006d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d6:	9300      	str	r3, [sp, #0]
 80006d8:	2301      	movs	r3, #1
 80006da:	2168      	movs	r1, #104	; 0x68
 80006dc:	484f      	ldr	r0, [pc, #316]	; (800081c <do_get_time+0x26c>)
 80006de:	f002 f93f 	bl	8002960 <HAL_I2C_Master_Transmit>
	uint8_t Date_Value;
	HAL_I2C_Master_Receive(&hi2c1, DS3231_READ_ADDRESS, (uint8_t *)&Date_Value, sizeof(Date_Value), 1000);
 80006e2:	f107 021a 	add.w	r2, r7, #26
 80006e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ea:	9300      	str	r3, [sp, #0]
 80006ec:	2301      	movs	r3, #1
 80006ee:	2168      	movs	r1, #104	; 0x68
 80006f0:	484a      	ldr	r0, [pc, #296]	; (800081c <do_get_time+0x26c>)
 80006f2:	f002 fa29 	bl	8002b48 <HAL_I2C_Master_Receive>
	uint8_t Date = (Date_Value & 0x0f);
 80006f6:	7ebb      	ldrb	r3, [r7, #26]
 80006f8:	f003 030f 	and.w	r3, r3, #15
 80006fc:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
	uint8_t s10_Date = (Date_Value & 0x30);
 8000700:	7ebb      	ldrb	r3, [r7, #26]
 8000702:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000706:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	// Register Month, address 0x05
	uint8_t Month_Address = 0x05;
 800070a:	2305      	movs	r3, #5
 800070c:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Month_Address, sizeof(Month_Address), 1000);
 800070e:	f107 0219 	add.w	r2, r7, #25
 8000712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	2301      	movs	r3, #1
 800071a:	2168      	movs	r1, #104	; 0x68
 800071c:	483f      	ldr	r0, [pc, #252]	; (800081c <do_get_time+0x26c>)
 800071e:	f002 f91f 	bl	8002960 <HAL_I2C_Master_Transmit>
	uint8_t Month_Value;
	HAL_I2C_Master_Receive(&hi2c1, DS3231_READ_ADDRESS, (uint8_t *)&Month_Value, sizeof(Month_Value), 1000);
 8000722:	f107 0218 	add.w	r2, r7, #24
 8000726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	2301      	movs	r3, #1
 800072e:	2168      	movs	r1, #104	; 0x68
 8000730:	483a      	ldr	r0, [pc, #232]	; (800081c <do_get_time+0x26c>)
 8000732:	f002 fa09 	bl	8002b48 <HAL_I2C_Master_Receive>
	uint8_t Months = (Month_Value & 0x0f);
 8000736:	7e3b      	ldrb	r3, [r7, #24]
 8000738:	f003 030f 	and.w	r3, r3, #15
 800073c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
	uint8_t s10_Months = (Month_Value & 0x10);
 8000740:	7e3b      	ldrb	r3, [r7, #24]
 8000742:	f003 0310 	and.w	r3, r3, #16
 8000746:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

	// Register Year, address 0x06
	uint8_t Year_Address = 0x06;
 800074a:	2306      	movs	r3, #6
 800074c:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Year_Address, sizeof(Year_Address), 1000);
 800074e:	f107 0217 	add.w	r2, r7, #23
 8000752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	2301      	movs	r3, #1
 800075a:	2168      	movs	r1, #104	; 0x68
 800075c:	482f      	ldr	r0, [pc, #188]	; (800081c <do_get_time+0x26c>)
 800075e:	f002 f8ff 	bl	8002960 <HAL_I2C_Master_Transmit>
	uint8_t Year_Value;
	HAL_I2C_Master_Receive(&hi2c1, DS3231_READ_ADDRESS, (uint8_t *)&Year_Value, sizeof(Year_Value), 1000);
 8000762:	f107 0216 	add.w	r2, r7, #22
 8000766:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	2301      	movs	r3, #1
 800076e:	2168      	movs	r1, #104	; 0x68
 8000770:	482a      	ldr	r0, [pc, #168]	; (800081c <do_get_time+0x26c>)
 8000772:	f002 f9e9 	bl	8002b48 <HAL_I2C_Master_Receive>
	uint8_t Year = (Year_Value & 0x0f);
 8000776:	7dbb      	ldrb	r3, [r7, #22]
 8000778:	f003 030f 	and.w	r3, r3, #15
 800077c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
	uint8_t s10_Year = (Year_Value & 0xf0);
 8000780:	7dbb      	ldrb	r3, [r7, #22]
 8000782:	f023 030f 	bic.w	r3, r3, #15
 8000786:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

	// Print results to console
	snprintf(buffer, sizeof(buffer), "\tCurrent time is %d%d:%d%d:%d%d on %d%d-%d%d-%d%d", s10_Hours, Hours, s10_Minutes, Minutes, s10_Seconds, Seconds, s10_Months, Months, s10_Date, Date, s10_Year, Year);
 800078a:	f897 e092 	ldrb.w	lr, [r7, #146]	; 0x92
 800078e:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
 8000798:	4613      	mov	r3, r2
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	f897 1095 	ldrb.w	r1, [r7, #149]	; 0x95
 80007a0:	f897 0096 	ldrb.w	r0, [r7, #150]	; 0x96
 80007a4:	f897 4097 	ldrb.w	r4, [r7, #151]	; 0x97
 80007a8:	f897 508d 	ldrb.w	r5, [r7, #141]	; 0x8d
 80007ac:	f897 608e 	ldrb.w	r6, [r7, #142]	; 0x8e
 80007b0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	f897 2090 	ldrb.w	r2, [r7, #144]	; 0x90
 80007ba:	4613      	mov	r3, r2
 80007bc:	f897 208b 	ldrb.w	r2, [r7, #139]	; 0x8b
 80007c0:	603a      	str	r2, [r7, #0]
 80007c2:	f897 c08c 	ldrb.w	ip, [r7, #140]	; 0x8c
 80007c6:	4662      	mov	r2, ip
 80007c8:	f107 0c24 	add.w	ip, r7, #36	; 0x24
 80007cc:	920a      	str	r2, [sp, #40]	; 0x28
 80007ce:	683a      	ldr	r2, [r7, #0]
 80007d0:	9209      	str	r2, [sp, #36]	; 0x24
 80007d2:	9308      	str	r3, [sp, #32]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	9307      	str	r3, [sp, #28]
 80007d8:	9606      	str	r6, [sp, #24]
 80007da:	9505      	str	r5, [sp, #20]
 80007dc:	9404      	str	r4, [sp, #16]
 80007de:	9003      	str	r0, [sp, #12]
 80007e0:	9102      	str	r1, [sp, #8]
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	9301      	str	r3, [sp, #4]
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	9300      	str	r3, [sp, #0]
 80007ea:	4673      	mov	r3, lr
 80007ec:	4a0c      	ldr	r2, [pc, #48]	; (8000820 <do_get_time+0x270>)
 80007ee:	2164      	movs	r1, #100	; 0x64
 80007f0:	4660      	mov	r0, ip
 80007f2:	f005 fb39 	bl	8005e68 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);
 80007f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff fce8 	bl	80001d0 <strlen>
 8000800:	4603      	mov	r3, r0
 8000802:	b29a      	uxth	r2, r3
 8000804:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000808:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800080c:	4805      	ldr	r0, [pc, #20]	; (8000824 <do_get_time+0x274>)
 800080e:	f004 fb3a 	bl	8004e86 <HAL_UART_Transmit>
}
 8000812:	bf00      	nop
 8000814:	379c      	adds	r7, #156	; 0x9c
 8000816:	46bd      	mov	sp, r7
 8000818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800081a:	bf00      	nop
 800081c:	20000180 	.word	0x20000180
 8000820:	08006704 	.word	0x08006704
 8000824:	2000068c 	.word	0x2000068c

08000828 <do_set_time>:

static void do_set_time(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af02      	add	r7, sp, #8
	// Set time to 00:00:00 on Monday, 01/01/2021. Just use this as areset point for demo purposes

	// Register Seconds, address 0x00
	uint8_t Seconds_Address = 0x00;
 800082e:	2300      	movs	r3, #0
 8000830:	74fb      	strb	r3, [r7, #19]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Seconds_Address, sizeof(Seconds_Address), 1000);
 8000832:	f107 0213 	add.w	r2, r7, #19
 8000836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800083a:	9300      	str	r3, [sp, #0]
 800083c:	2301      	movs	r3, #1
 800083e:	2168      	movs	r1, #104	; 0x68
 8000840:	4856      	ldr	r0, [pc, #344]	; (800099c <do_set_time+0x174>)
 8000842:	f002 f88d 	bl	8002960 <HAL_I2C_Master_Transmit>
	uint8_t Seconds_Value = 0x00;
 8000846:	2300      	movs	r3, #0
 8000848:	74bb      	strb	r3, [r7, #18]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Seconds_Value, sizeof(Seconds_Value), 1000);
 800084a:	f107 0212 	add.w	r2, r7, #18
 800084e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	2301      	movs	r3, #1
 8000856:	2168      	movs	r1, #104	; 0x68
 8000858:	4850      	ldr	r0, [pc, #320]	; (800099c <do_set_time+0x174>)
 800085a:	f002 f881 	bl	8002960 <HAL_I2C_Master_Transmit>

	// Register Minutes, address 0x01
	uint8_t Minutes_Address = 0x01;
 800085e:	2301      	movs	r3, #1
 8000860:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Minutes_Address, sizeof(Minutes_Address), 1000);
 8000862:	f107 0211 	add.w	r2, r7, #17
 8000866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800086a:	9300      	str	r3, [sp, #0]
 800086c:	2301      	movs	r3, #1
 800086e:	2168      	movs	r1, #104	; 0x68
 8000870:	484a      	ldr	r0, [pc, #296]	; (800099c <do_set_time+0x174>)
 8000872:	f002 f875 	bl	8002960 <HAL_I2C_Master_Transmit>
	uint8_t Minutes_Value = 0x00;
 8000876:	2300      	movs	r3, #0
 8000878:	743b      	strb	r3, [r7, #16]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Minutes_Value, sizeof(Minutes_Value), 1000);
 800087a:	f107 0210 	add.w	r2, r7, #16
 800087e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	2301      	movs	r3, #1
 8000886:	2168      	movs	r1, #104	; 0x68
 8000888:	4844      	ldr	r0, [pc, #272]	; (800099c <do_set_time+0x174>)
 800088a:	f002 f869 	bl	8002960 <HAL_I2C_Master_Transmit>

	// Register Hour, address 0x02
	uint8_t Hour_Address = 0x02;
 800088e:	2302      	movs	r3, #2
 8000890:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Hour_Address, sizeof(Hour_Address), 1000);
 8000892:	f107 020f 	add.w	r2, r7, #15
 8000896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089a:	9300      	str	r3, [sp, #0]
 800089c:	2301      	movs	r3, #1
 800089e:	2168      	movs	r1, #104	; 0x68
 80008a0:	483e      	ldr	r0, [pc, #248]	; (800099c <do_set_time+0x174>)
 80008a2:	f002 f85d 	bl	8002960 <HAL_I2C_Master_Transmit>
	uint8_t Hour_Value = 0x00;
 80008a6:	2300      	movs	r3, #0
 80008a8:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Hour_Value, sizeof(Hour_Value), 1000);
 80008aa:	f107 020e 	add.w	r2, r7, #14
 80008ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b2:	9300      	str	r3, [sp, #0]
 80008b4:	2301      	movs	r3, #1
 80008b6:	2168      	movs	r1, #104	; 0x68
 80008b8:	4838      	ldr	r0, [pc, #224]	; (800099c <do_set_time+0x174>)
 80008ba:	f002 f851 	bl	8002960 <HAL_I2C_Master_Transmit>

	// Register Day, address 0x03
	uint8_t Day_Address = 0x03;
 80008be:	2303      	movs	r3, #3
 80008c0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Day_Address, sizeof(Day_Address), 1000);
 80008c2:	f107 020d 	add.w	r2, r7, #13
 80008c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2301      	movs	r3, #1
 80008ce:	2168      	movs	r1, #104	; 0x68
 80008d0:	4832      	ldr	r0, [pc, #200]	; (800099c <do_set_time+0x174>)
 80008d2:	f002 f845 	bl	8002960 <HAL_I2C_Master_Transmit>
	uint8_t Day_Value = 0x01;
 80008d6:	2301      	movs	r3, #1
 80008d8:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Day_Value, sizeof(Day_Value), 1000);
 80008da:	f107 020c 	add.w	r2, r7, #12
 80008de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e2:	9300      	str	r3, [sp, #0]
 80008e4:	2301      	movs	r3, #1
 80008e6:	2168      	movs	r1, #104	; 0x68
 80008e8:	482c      	ldr	r0, [pc, #176]	; (800099c <do_set_time+0x174>)
 80008ea:	f002 f839 	bl	8002960 <HAL_I2C_Master_Transmit>

	// Register Date, address 0x04
	uint8_t Date_Address = 0x04;
 80008ee:	2304      	movs	r3, #4
 80008f0:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Date_Address, sizeof(Date_Address), 1000);
 80008f2:	f107 020b 	add.w	r2, r7, #11
 80008f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008fa:	9300      	str	r3, [sp, #0]
 80008fc:	2301      	movs	r3, #1
 80008fe:	2168      	movs	r1, #104	; 0x68
 8000900:	4826      	ldr	r0, [pc, #152]	; (800099c <do_set_time+0x174>)
 8000902:	f002 f82d 	bl	8002960 <HAL_I2C_Master_Transmit>
	uint8_t Date_Value = 0x01;
 8000906:	2301      	movs	r3, #1
 8000908:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Date_Value, sizeof(Date_Value), 1000);
 800090a:	f107 020a 	add.w	r2, r7, #10
 800090e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000912:	9300      	str	r3, [sp, #0]
 8000914:	2301      	movs	r3, #1
 8000916:	2168      	movs	r1, #104	; 0x68
 8000918:	4820      	ldr	r0, [pc, #128]	; (800099c <do_set_time+0x174>)
 800091a:	f002 f821 	bl	8002960 <HAL_I2C_Master_Transmit>

	// Register Month, address 0x05
	uint8_t Month_Address = 0x05;
 800091e:	2305      	movs	r3, #5
 8000920:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Month_Address, sizeof(Month_Address), 1000);
 8000922:	f107 0209 	add.w	r2, r7, #9
 8000926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800092a:	9300      	str	r3, [sp, #0]
 800092c:	2301      	movs	r3, #1
 800092e:	2168      	movs	r1, #104	; 0x68
 8000930:	481a      	ldr	r0, [pc, #104]	; (800099c <do_set_time+0x174>)
 8000932:	f002 f815 	bl	8002960 <HAL_I2C_Master_Transmit>
	uint8_t Month_Value = 0x01;
 8000936:	2301      	movs	r3, #1
 8000938:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Month_Value, sizeof(Month_Value), 1000);
 800093a:	f107 0208 	add.w	r2, r7, #8
 800093e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	2301      	movs	r3, #1
 8000946:	2168      	movs	r1, #104	; 0x68
 8000948:	4814      	ldr	r0, [pc, #80]	; (800099c <do_set_time+0x174>)
 800094a:	f002 f809 	bl	8002960 <HAL_I2C_Master_Transmit>

	// Register Year, address 0x06
	uint8_t Year_Address = 0x06;
 800094e:	2306      	movs	r3, #6
 8000950:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Year_Address, sizeof(Year_Address), 1000);
 8000952:	1dfa      	adds	r2, r7, #7
 8000954:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	2301      	movs	r3, #1
 800095c:	2168      	movs	r1, #104	; 0x68
 800095e:	480f      	ldr	r0, [pc, #60]	; (800099c <do_set_time+0x174>)
 8000960:	f001 fffe 	bl	8002960 <HAL_I2C_Master_Transmit>
	uint8_t Year_Value = 0x21;
 8000964:	2321      	movs	r3, #33	; 0x21
 8000966:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, DS3231_WRITE_ADDRESS, &Year_Value, sizeof(Year_Value), 1000);
 8000968:	1dba      	adds	r2, r7, #6
 800096a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096e:	9300      	str	r3, [sp, #0]
 8000970:	2301      	movs	r3, #1
 8000972:	2168      	movs	r1, #104	; 0x68
 8000974:	4809      	ldr	r0, [pc, #36]	; (800099c <do_set_time+0x174>)
 8000976:	f001 fff3 	bl	8002960 <HAL_I2C_Master_Transmit>

	char* statusString = "\tTime is set to 00:00:00 on Monday, 01/01/2021!\n";
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <do_set_time+0x178>)
 800097c:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(&huart1, (uint8_t*) statusString, strlen(statusString), 1000);
 800097e:	6978      	ldr	r0, [r7, #20]
 8000980:	f7ff fc26 	bl	80001d0 <strlen>
 8000984:	4603      	mov	r3, r0
 8000986:	b29a      	uxth	r2, r3
 8000988:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098c:	6979      	ldr	r1, [r7, #20]
 800098e:	4805      	ldr	r0, [pc, #20]	; (80009a4 <do_set_time+0x17c>)
 8000990:	f004 fa79 	bl	8004e86 <HAL_UART_Transmit>

}
 8000994:	bf00      	nop
 8000996:	3718      	adds	r7, #24
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000180 	.word	0x20000180
 80009a0:	08006738 	.word	0x08006738
 80009a4:	2000068c 	.word	0x2000068c

080009a8 <HTS221_pwr_en>:

static void HTS221_pwr_en(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af02      	add	r7, sp, #8
	// Configure control register 1 (CTRL_REG1, 0x20) bit 7 to enable one-shot
    uint8_t ctrlReg1 = 0x20;
 80009ae:	2320      	movs	r3, #32
 80009b0:	71fb      	strb	r3, [r7, #7]
    uint8_t CTRL_REG2_Value[] = {ctrlReg1, (1 << 7)};
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	713b      	strb	r3, [r7, #4]
 80009b6:	2380      	movs	r3, #128	; 0x80
 80009b8:	717b      	strb	r3, [r7, #5]

    // Send the target register to the device
    HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, CTRL_REG2_Value, sizeof(CTRL_REG2_Value), 1000);
 80009ba:	1d3a      	adds	r2, r7, #4
 80009bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c0:	9300      	str	r3, [sp, #0]
 80009c2:	2302      	movs	r3, #2
 80009c4:	21be      	movs	r1, #190	; 0xbe
 80009c6:	4803      	ldr	r0, [pc, #12]	; (80009d4 <HTS221_pwr_en+0x2c>)
 80009c8:	f001 ffca 	bl	8002960 <HAL_I2C_Master_Transmit>

}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	200005d4 	.word	0x200005d4

080009d8 <HTS221_get_cal_data>:

static void HTS221_get_cal_data(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af02      	add	r7, sp, #8

    /*****************************************************************************************************************/
    // Humidity calibration values

    // Register H0_rh_x2, address 0x30. Divide register value by 2 for calibration value
    uint8_t H0_rH_Address = 0x30;
 80009de:	2330      	movs	r3, #48	; 0x30
 80009e0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &H0_rH_Address, sizeof(H0_rH_Address), 1000);
 80009e2:	f107 020f 	add.w	r2, r7, #15
 80009e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	2301      	movs	r3, #1
 80009ee:	21be      	movs	r1, #190	; 0xbe
 80009f0:	487f      	ldr	r0, [pc, #508]	; (8000bf0 <HTS221_get_cal_data+0x218>)
 80009f2:	f001 ffb5 	bl	8002960 <HAL_I2C_Master_Transmit>
	H0_rH_Value = 0xff; // Junk default value
 80009f6:	4b7f      	ldr	r3, [pc, #508]	; (8000bf4 <HTS221_get_cal_data+0x21c>)
 80009f8:	22ff      	movs	r2, #255	; 0xff
 80009fa:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&H0_rH_Value, sizeof(H0_rH_Value), 1000);
 80009fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	2301      	movs	r3, #1
 8000a04:	4a7b      	ldr	r2, [pc, #492]	; (8000bf4 <HTS221_get_cal_data+0x21c>)
 8000a06:	21bf      	movs	r1, #191	; 0xbf
 8000a08:	4879      	ldr	r0, [pc, #484]	; (8000bf0 <HTS221_get_cal_data+0x218>)
 8000a0a:	f002 f89d 	bl	8002b48 <HAL_I2C_Master_Receive>
	H0_rH_Value = H0_rH_Value / 2;
 8000a0e:	4b79      	ldr	r3, [pc, #484]	; (8000bf4 <HTS221_get_cal_data+0x21c>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	085b      	lsrs	r3, r3, #1
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4b77      	ldr	r3, [pc, #476]	; (8000bf4 <HTS221_get_cal_data+0x21c>)
 8000a18:	701a      	strb	r2, [r3, #0]

	// Register H1_rh_x2, address 0x31. Divide register value by 2 for calibration value
	uint8_t H1_rH_Address = 0x31;
 8000a1a:	2331      	movs	r3, #49	; 0x31
 8000a1c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &H1_rH_Address, sizeof(H1_rH_Address), 1000);
 8000a1e:	f107 020e 	add.w	r2, r7, #14
 8000a22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	2301      	movs	r3, #1
 8000a2a:	21be      	movs	r1, #190	; 0xbe
 8000a2c:	4870      	ldr	r0, [pc, #448]	; (8000bf0 <HTS221_get_cal_data+0x218>)
 8000a2e:	f001 ff97 	bl	8002960 <HAL_I2C_Master_Transmit>
	H1_rH_Value = 0xff; // Junk default value
 8000a32:	4b71      	ldr	r3, [pc, #452]	; (8000bf8 <HTS221_get_cal_data+0x220>)
 8000a34:	22ff      	movs	r2, #255	; 0xff
 8000a36:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&H1_rH_Value, sizeof(H1_rH_Value), 1000);
 8000a38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	2301      	movs	r3, #1
 8000a40:	4a6d      	ldr	r2, [pc, #436]	; (8000bf8 <HTS221_get_cal_data+0x220>)
 8000a42:	21bf      	movs	r1, #191	; 0xbf
 8000a44:	486a      	ldr	r0, [pc, #424]	; (8000bf0 <HTS221_get_cal_data+0x218>)
 8000a46:	f002 f87f 	bl	8002b48 <HAL_I2C_Master_Receive>
	H1_rH_Value = H1_rH_Value / 2;
 8000a4a:	4b6b      	ldr	r3, [pc, #428]	; (8000bf8 <HTS221_get_cal_data+0x220>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	085b      	lsrs	r3, r3, #1
 8000a50:	b2da      	uxtb	r2, r3
 8000a52:	4b69      	ldr	r3, [pc, #420]	; (8000bf8 <HTS221_get_cal_data+0x220>)
 8000a54:	701a      	strb	r2, [r3, #0]

	// Register H0_T0_OUT, addresses 0x36 and 0x37
	uint8_t H0_T0_OUT_Address = 0x36 | 0x80;
 8000a56:	23b6      	movs	r3, #182	; 0xb6
 8000a58:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &H0_T0_OUT_Address, sizeof(H0_T0_OUT_Address), 1000);
 8000a5a:	f107 020d 	add.w	r2, r7, #13
 8000a5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a62:	9300      	str	r3, [sp, #0]
 8000a64:	2301      	movs	r3, #1
 8000a66:	21be      	movs	r1, #190	; 0xbe
 8000a68:	4861      	ldr	r0, [pc, #388]	; (8000bf0 <HTS221_get_cal_data+0x218>)
 8000a6a:	f001 ff79 	bl	8002960 <HAL_I2C_Master_Transmit>
	H0_T0_OUT_Value = 0xffff; // Junk default value
 8000a6e:	4b63      	ldr	r3, [pc, #396]	; (8000bfc <HTS221_get_cal_data+0x224>)
 8000a70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a74:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&H0_T0_OUT_Value, sizeof(H0_T0_OUT_Value), 1000);
 8000a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7a:	9300      	str	r3, [sp, #0]
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	4a5f      	ldr	r2, [pc, #380]	; (8000bfc <HTS221_get_cal_data+0x224>)
 8000a80:	21bf      	movs	r1, #191	; 0xbf
 8000a82:	485b      	ldr	r0, [pc, #364]	; (8000bf0 <HTS221_get_cal_data+0x218>)
 8000a84:	f002 f860 	bl	8002b48 <HAL_I2C_Master_Receive>

	// Register H1_T0_OUT, addresses 0x3A and 0x3B
	uint8_t H1_T0_OUT_Address = 0x3A | 0x80;
 8000a88:	23ba      	movs	r3, #186	; 0xba
 8000a8a:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &H1_T0_OUT_Address, sizeof(H1_T0_OUT_Address), 1000);
 8000a8c:	f107 020c 	add.w	r2, r7, #12
 8000a90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	2301      	movs	r3, #1
 8000a98:	21be      	movs	r1, #190	; 0xbe
 8000a9a:	4855      	ldr	r0, [pc, #340]	; (8000bf0 <HTS221_get_cal_data+0x218>)
 8000a9c:	f001 ff60 	bl	8002960 <HAL_I2C_Master_Transmit>
	H1_T0_OUT_Value = 0xffff; // Junk default value
 8000aa0:	4b57      	ldr	r3, [pc, #348]	; (8000c00 <HTS221_get_cal_data+0x228>)
 8000aa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000aa6:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&H1_T0_OUT_Value, sizeof(H1_T0_OUT_Value), 1000);
 8000aa8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aac:	9300      	str	r3, [sp, #0]
 8000aae:	2302      	movs	r3, #2
 8000ab0:	4a53      	ldr	r2, [pc, #332]	; (8000c00 <HTS221_get_cal_data+0x228>)
 8000ab2:	21bf      	movs	r1, #191	; 0xbf
 8000ab4:	484e      	ldr	r0, [pc, #312]	; (8000bf0 <HTS221_get_cal_data+0x218>)
 8000ab6:	f002 f847 	bl	8002b48 <HAL_I2C_Master_Receive>

    /*****************************************************************************************************************/
    // Temperature calibration values

    // Register T0_degC_x8, address 0x32. Divide register value by 8 for calibration value
    uint8_t T0_degC_Address = 0x32;
 8000aba:	2332      	movs	r3, #50	; 0x32
 8000abc:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &T0_degC_Address, sizeof(T0_degC_Address), 1000);
 8000abe:	f107 020b 	add.w	r2, r7, #11
 8000ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	2301      	movs	r3, #1
 8000aca:	21be      	movs	r1, #190	; 0xbe
 8000acc:	4848      	ldr	r0, [pc, #288]	; (8000bf0 <HTS221_get_cal_data+0x218>)
 8000ace:	f001 ff47 	bl	8002960 <HAL_I2C_Master_Transmit>
	T0_degC_Value = 0xff; // Junk default value
 8000ad2:	4b4c      	ldr	r3, [pc, #304]	; (8000c04 <HTS221_get_cal_data+0x22c>)
 8000ad4:	22ff      	movs	r2, #255	; 0xff
 8000ad6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&T0_degC_Value, sizeof(T0_degC_Value), 1000);
 8000ad8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	2301      	movs	r3, #1
 8000ae0:	4a48      	ldr	r2, [pc, #288]	; (8000c04 <HTS221_get_cal_data+0x22c>)
 8000ae2:	21bf      	movs	r1, #191	; 0xbf
 8000ae4:	4842      	ldr	r0, [pc, #264]	; (8000bf0 <HTS221_get_cal_data+0x218>)
 8000ae6:	f002 f82f 	bl	8002b48 <HAL_I2C_Master_Receive>
	T0_degC_Value = T0_degC_Value / 8;
 8000aea:	4b46      	ldr	r3, [pc, #280]	; (8000c04 <HTS221_get_cal_data+0x22c>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	08db      	lsrs	r3, r3, #3
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	4b44      	ldr	r3, [pc, #272]	; (8000c04 <HTS221_get_cal_data+0x22c>)
 8000af4:	701a      	strb	r2, [r3, #0]

    // Register T1_degC_x8, address 0x33. Divide register value by 8 for calibration value
    uint8_t T1_degC_Address = 0x33;
 8000af6:	2333      	movs	r3, #51	; 0x33
 8000af8:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &T1_degC_Address, sizeof(T1_degC_Address), 1000);
 8000afa:	f107 020a 	add.w	r2, r7, #10
 8000afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b02:	9300      	str	r3, [sp, #0]
 8000b04:	2301      	movs	r3, #1
 8000b06:	21be      	movs	r1, #190	; 0xbe
 8000b08:	4839      	ldr	r0, [pc, #228]	; (8000bf0 <HTS221_get_cal_data+0x218>)
 8000b0a:	f001 ff29 	bl	8002960 <HAL_I2C_Master_Transmit>
	T1_degC_Value = 0xff; // Junk default value
 8000b0e:	4b3e      	ldr	r3, [pc, #248]	; (8000c08 <HTS221_get_cal_data+0x230>)
 8000b10:	22ff      	movs	r2, #255	; 0xff
 8000b12:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&T1_degC_Value, sizeof(T1_degC_Value), 1000);
 8000b14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b18:	9300      	str	r3, [sp, #0]
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	4a3a      	ldr	r2, [pc, #232]	; (8000c08 <HTS221_get_cal_data+0x230>)
 8000b1e:	21bf      	movs	r1, #191	; 0xbf
 8000b20:	4833      	ldr	r0, [pc, #204]	; (8000bf0 <HTS221_get_cal_data+0x218>)
 8000b22:	f002 f811 	bl	8002b48 <HAL_I2C_Master_Receive>
	T1_degC_Value = T1_degC_Value / 8;
 8000b26:	4b38      	ldr	r3, [pc, #224]	; (8000c08 <HTS221_get_cal_data+0x230>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	08db      	lsrs	r3, r3, #3
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	4b36      	ldr	r3, [pc, #216]	; (8000c08 <HTS221_get_cal_data+0x230>)
 8000b30:	701a      	strb	r2, [r3, #0]

    // Register T1/T0 msb, address 0x35. Mask bits (0 & 1), (2 & 3) to get values of T0_degC & T1_degC
    uint8_t T1_T0_msb_Address = 0x35;
 8000b32:	2335      	movs	r3, #53	; 0x35
 8000b34:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &T1_T0_msb_Address, sizeof(T1_T0_msb_Address), 1000);
 8000b36:	f107 0209 	add.w	r2, r7, #9
 8000b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3e:	9300      	str	r3, [sp, #0]
 8000b40:	2301      	movs	r3, #1
 8000b42:	21be      	movs	r1, #190	; 0xbe
 8000b44:	482a      	ldr	r0, [pc, #168]	; (8000bf0 <HTS221_get_cal_data+0x218>)
 8000b46:	f001 ff0b 	bl	8002960 <HAL_I2C_Master_Transmit>
	uint8_t T1_T0_msb_Value = 0xff; // Junk default value
 8000b4a:	23ff      	movs	r3, #255	; 0xff
 8000b4c:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&T1_T0_msb_Value, sizeof(T1_T0_msb_Value), 1000);
 8000b4e:	f107 0208 	add.w	r2, r7, #8
 8000b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	2301      	movs	r3, #1
 8000b5a:	21bf      	movs	r1, #191	; 0xbf
 8000b5c:	4824      	ldr	r0, [pc, #144]	; (8000bf0 <HTS221_get_cal_data+0x218>)
 8000b5e:	f001 fff3 	bl	8002b48 <HAL_I2C_Master_Receive>
	T0_degC = (T1_T0_msb_Value && (0b0011));
 8000b62:	7a3b      	ldrb	r3, [r7, #8]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	bf14      	ite	ne
 8000b68:	2301      	movne	r3, #1
 8000b6a:	2300      	moveq	r3, #0
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	461a      	mov	r2, r3
 8000b70:	4b26      	ldr	r3, [pc, #152]	; (8000c0c <HTS221_get_cal_data+0x234>)
 8000b72:	701a      	strb	r2, [r3, #0]
    T1_degC = (T1_T0_msb_Value && (0b1100));
 8000b74:	7a3b      	ldrb	r3, [r7, #8]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	bf14      	ite	ne
 8000b7a:	2301      	movne	r3, #1
 8000b7c:	2300      	moveq	r3, #0
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	461a      	mov	r2, r3
 8000b82:	4b23      	ldr	r3, [pc, #140]	; (8000c10 <HTS221_get_cal_data+0x238>)
 8000b84:	701a      	strb	r2, [r3, #0]

    // Register T0_OUT, addresses 0x3C and 0x3D
	uint8_t T0_OUT_Address = 0x3C | 0x80;
 8000b86:	23bc      	movs	r3, #188	; 0xbc
 8000b88:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &T0_OUT_Address, sizeof(T0_OUT_Address), 1000);
 8000b8a:	1dfa      	adds	r2, r7, #7
 8000b8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b90:	9300      	str	r3, [sp, #0]
 8000b92:	2301      	movs	r3, #1
 8000b94:	21be      	movs	r1, #190	; 0xbe
 8000b96:	4816      	ldr	r0, [pc, #88]	; (8000bf0 <HTS221_get_cal_data+0x218>)
 8000b98:	f001 fee2 	bl	8002960 <HAL_I2C_Master_Transmit>
	T0_OUT_Value = 0xffff; // Junk default value
 8000b9c:	4b1d      	ldr	r3, [pc, #116]	; (8000c14 <HTS221_get_cal_data+0x23c>)
 8000b9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ba2:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&T0_OUT_Value, sizeof(T0_OUT_Value), 1000);
 8000ba4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba8:	9300      	str	r3, [sp, #0]
 8000baa:	2302      	movs	r3, #2
 8000bac:	4a19      	ldr	r2, [pc, #100]	; (8000c14 <HTS221_get_cal_data+0x23c>)
 8000bae:	21bf      	movs	r1, #191	; 0xbf
 8000bb0:	480f      	ldr	r0, [pc, #60]	; (8000bf0 <HTS221_get_cal_data+0x218>)
 8000bb2:	f001 ffc9 	bl	8002b48 <HAL_I2C_Master_Receive>

    // Register T1_OUT, addresses 0x3C and 0x3D
	uint8_t T1_OUT_Address = 0x3C | 0x80;
 8000bb6:	23bc      	movs	r3, #188	; 0xbc
 8000bb8:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &T1_OUT_Address, sizeof(T1_OUT_Address), 1000);
 8000bba:	1dba      	adds	r2, r7, #6
 8000bbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc0:	9300      	str	r3, [sp, #0]
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	21be      	movs	r1, #190	; 0xbe
 8000bc6:	480a      	ldr	r0, [pc, #40]	; (8000bf0 <HTS221_get_cal_data+0x218>)
 8000bc8:	f001 feca 	bl	8002960 <HAL_I2C_Master_Transmit>
	T1_OUT_Value = 0xffff; // Junk default value
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HTS221_get_cal_data+0x240>)
 8000bce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bd2:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&T1_OUT_Value, sizeof(T1_OUT_Value), 1000);
 8000bd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd8:	9300      	str	r3, [sp, #0]
 8000bda:	2302      	movs	r3, #2
 8000bdc:	4a0e      	ldr	r2, [pc, #56]	; (8000c18 <HTS221_get_cal_data+0x240>)
 8000bde:	21bf      	movs	r1, #191	; 0xbf
 8000be0:	4803      	ldr	r0, [pc, #12]	; (8000bf0 <HTS221_get_cal_data+0x218>)
 8000be2:	f001 ffb1 	bl	8002b48 <HAL_I2C_Master_Receive>

}
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200005d4 	.word	0x200005d4
 8000bf4:	20000798 	.word	0x20000798
 8000bf8:	2000079c 	.word	0x2000079c
 8000bfc:	20000620 	.word	0x20000620
 8000c00:	20000688 	.word	0x20000688
 8000c04:	200000f8 	.word	0x200000f8
 8000c08:	2000079d 	.word	0x2000079d
 8000c0c:	20000622 	.word	0x20000622
 8000c10:	20000710 	.word	0x20000710
 8000c14:	2000079a 	.word	0x2000079a
 8000c18:	20000712 	.word	0x20000712

08000c1c <HTS221_get_sensor_data>:

static void HTS221_get_sensor_data(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b0a2      	sub	sp, #136	; 0x88
 8000c20:	af02      	add	r7, sp, #8
    // Large char buffer for strings sent over the console
    char buffer[100] = {0};
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
 8000c26:	f107 0318 	add.w	r3, r7, #24
 8000c2a:	2260      	movs	r2, #96	; 0x60
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f005 f912 	bl	8005e58 <memset>

	// Configure control register 2 (CTRL_REG2, 0x21) bit 0 to enable one-shot
    uint8_t CTRL_REG2_Address = 0x21;
 8000c34:	2321      	movs	r3, #33	; 0x21
 8000c36:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
    uint8_t CTRL_REG2_Value[] = {CTRL_REG2_Address, (1 << 0)};
 8000c3a:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8000c3e:	743b      	strb	r3, [r7, #16]
 8000c40:	2301      	movs	r3, #1
 8000c42:	747b      	strb	r3, [r7, #17]

    // Send the target register to the device
    HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, CTRL_REG2_Value, sizeof(CTRL_REG2_Value), 1000);
 8000c44:	f107 0210 	add.w	r2, r7, #16
 8000c48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	2302      	movs	r3, #2
 8000c50:	21be      	movs	r1, #190	; 0xbe
 8000c52:	487f      	ldr	r0, [pc, #508]	; (8000e50 <HTS221_get_sensor_data+0x234>)
 8000c54:	f001 fe84 	bl	8002960 <HAL_I2C_Master_Transmit>

    // Define status register (STATUS_REG2, 0x27) bit 0 to monitor for new sample available
    uint8_t STATUS_Address = 0x27;
 8000c58:	2327      	movs	r3, #39	; 0x27
 8000c5a:	73fb      	strb	r3, [r7, #15]
    uint8_t STATUS_Value = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	73bb      	strb	r3, [r7, #14]

    // Print status message to console
	snprintf(buffer, sizeof(buffer), "\tRequesting new sample...");
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	4a7b      	ldr	r2, [pc, #492]	; (8000e54 <HTS221_get_sensor_data+0x238>)
 8000c66:	2164      	movs	r1, #100	; 0x64
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f005 f8fd 	bl	8005e68 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff faac 	bl	80001d0 <strlen>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	f107 0114 	add.w	r1, r7, #20
 8000c80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c84:	4874      	ldr	r0, [pc, #464]	; (8000e58 <HTS221_get_sensor_data+0x23c>)
 8000c86:	f004 f8fe 	bl	8004e86 <HAL_UART_Transmit>

    // Loiter for a bit to allow time for conversion to complete and be made available
    uint8_t count = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    while (count < 10)  // arbitrary "long enough" delay value
 8000c90:	e035      	b.n	8000cfe <HTS221_get_sensor_data+0xe2>
    {
        // Send the address of the status register
        HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &STATUS_Address, sizeof(STATUS_Address), 1000);
 8000c92:	f107 020f 	add.w	r2, r7, #15
 8000c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c9a:	9300      	str	r3, [sp, #0]
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	21be      	movs	r1, #190	; 0xbe
 8000ca0:	486b      	ldr	r0, [pc, #428]	; (8000e50 <HTS221_get_sensor_data+0x234>)
 8000ca2:	f001 fe5d 	bl	8002960 <HAL_I2C_Master_Transmit>

        // Read back the value of the status register
        HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&STATUS_Value, sizeof(STATUS_Value), 1000);
 8000ca6:	f107 020e 	add.w	r2, r7, #14
 8000caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cae:	9300      	str	r3, [sp, #0]
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	21bf      	movs	r1, #191	; 0xbf
 8000cb4:	4866      	ldr	r0, [pc, #408]	; (8000e50 <HTS221_get_sensor_data+0x234>)
 8000cb6:	f001 ff47 	bl	8002b48 <HAL_I2C_Master_Receive>

        // If the new sample is ready, break out of while-loop...
        if (STATUS_Value & 0x01)
 8000cba:	7bbb      	ldrb	r3, [r7, #14]
 8000cbc:	f003 0301 	and.w	r3, r3, #1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d121      	bne.n	8000d08 <HTS221_get_sensor_data+0xec>
        {
            break;
        }

        // Update status message on console with '.' to indicate processing
		snprintf(buffer, sizeof(buffer), ".");
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	4a64      	ldr	r2, [pc, #400]	; (8000e5c <HTS221_get_sensor_data+0x240>)
 8000cca:	2164      	movs	r1, #100	; 0x64
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f005 f8cb 	bl	8005e68 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);
 8000cd2:	f107 0314 	add.w	r3, r7, #20
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fa7a 	bl	80001d0 <strlen>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	f107 0114 	add.w	r1, r7, #20
 8000ce4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce8:	485b      	ldr	r0, [pc, #364]	; (8000e58 <HTS221_get_sensor_data+0x23c>)
 8000cea:	f004 f8cc 	bl	8004e86 <HAL_UART_Transmit>

        // Else wait for a bit, increment the counter, and keep looping
        HAL_Delay(100);
 8000cee:	2064      	movs	r0, #100	; 0x64
 8000cf0:	f001 f966 	bl	8001fc0 <HAL_Delay>
        count++;
 8000cf4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    while (count < 10)  // arbitrary "long enough" delay value
 8000cfe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000d02:	2b09      	cmp	r3, #9
 8000d04:	d9c5      	bls.n	8000c92 <HTS221_get_sensor_data+0x76>
 8000d06:	e000      	b.n	8000d0a <HTS221_get_sensor_data+0xee>
            break;
 8000d08:	bf00      	nop
    }

    // Read the values of the humidity register H_OUT, address 0x28 and 0x29
	uint8_t H_OUT_Address = 0x28 | 0x80;
 8000d0a:	23a8      	movs	r3, #168	; 0xa8
 8000d0c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &H_OUT_Address, sizeof(H_OUT_Address), 1000);
 8000d0e:	f107 020d 	add.w	r2, r7, #13
 8000d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	2301      	movs	r3, #1
 8000d1a:	21be      	movs	r1, #190	; 0xbe
 8000d1c:	484c      	ldr	r0, [pc, #304]	; (8000e50 <HTS221_get_sensor_data+0x234>)
 8000d1e:	f001 fe1f 	bl	8002960 <HAL_I2C_Master_Transmit>
	int16_t H_OUT_Value = 0xbeef; // Junk default value
 8000d22:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8000d26:	817b      	strh	r3, [r7, #10]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&H_OUT_Value, sizeof(H_OUT_Value), 1000);
 8000d28:	f107 020a 	add.w	r2, r7, #10
 8000d2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	2302      	movs	r3, #2
 8000d34:	21bf      	movs	r1, #191	; 0xbf
 8000d36:	4846      	ldr	r0, [pc, #280]	; (8000e50 <HTS221_get_sensor_data+0x234>)
 8000d38:	f001 ff06 	bl	8002b48 <HAL_I2C_Master_Receive>

	// Calculate and print value of humidity in %rH.
	int16_t humidityValue = (((H1_rH_Value - H0_rH_Value) * (H_OUT_Value - H0_T0_OUT_Value))/(H1_T0_OUT_Value - H0_T0_OUT_Value)) + (H0_rH_Value);
 8000d3c:	4b48      	ldr	r3, [pc, #288]	; (8000e60 <HTS221_get_sensor_data+0x244>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	461a      	mov	r2, r3
 8000d42:	4b48      	ldr	r3, [pc, #288]	; (8000e64 <HTS221_get_sensor_data+0x248>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000d4c:	4611      	mov	r1, r2
 8000d4e:	4a46      	ldr	r2, [pc, #280]	; (8000e68 <HTS221_get_sensor_data+0x24c>)
 8000d50:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000d54:	1a8a      	subs	r2, r1, r2
 8000d56:	fb02 f203 	mul.w	r2, r2, r3
 8000d5a:	4b44      	ldr	r3, [pc, #272]	; (8000e6c <HTS221_get_sensor_data+0x250>)
 8000d5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d60:	4619      	mov	r1, r3
 8000d62:	4b41      	ldr	r3, [pc, #260]	; (8000e68 <HTS221_get_sensor_data+0x24c>)
 8000d64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d68:	1acb      	subs	r3, r1, r3
 8000d6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	4b3c      	ldr	r3, [pc, #240]	; (8000e64 <HTS221_get_sensor_data+0x248>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	4413      	add	r3, r2
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
	snprintf(buffer, sizeof(buffer), "\n\tHumidity: %d%%rH\n", humidityValue);
 8000d7e:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 8000d82:	f107 0014 	add.w	r0, r7, #20
 8000d86:	4a3a      	ldr	r2, [pc, #232]	; (8000e70 <HTS221_get_sensor_data+0x254>)
 8000d88:	2164      	movs	r1, #100	; 0x64
 8000d8a:	f005 f86d 	bl	8005e68 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff fa1c 	bl	80001d0 <strlen>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	b29a      	uxth	r2, r3
 8000d9c:	f107 0114 	add.w	r1, r7, #20
 8000da0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da4:	482c      	ldr	r0, [pc, #176]	; (8000e58 <HTS221_get_sensor_data+0x23c>)
 8000da6:	f004 f86e 	bl	8004e86 <HAL_UART_Transmit>


	// Read the values of the temperature register T_OUT, address 0x2A and 0x2B
	uint8_t T_OUT_Address = 0x28 | 0x80;
 8000daa:	23a8      	movs	r3, #168	; 0xa8
 8000dac:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_WRITE_ADDRESS, &T_OUT_Address, sizeof(T_OUT_Address), 1000);
 8000dae:	f107 0209 	add.w	r2, r7, #9
 8000db2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	2301      	movs	r3, #1
 8000dba:	21be      	movs	r1, #190	; 0xbe
 8000dbc:	4824      	ldr	r0, [pc, #144]	; (8000e50 <HTS221_get_sensor_data+0x234>)
 8000dbe:	f001 fdcf 	bl	8002960 <HAL_I2C_Master_Transmit>
	int16_t T_OUT_Value = 0xbeef; // Junk default value
 8000dc2:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8000dc6:	80fb      	strh	r3, [r7, #6]
	HAL_I2C_Master_Receive(&hi2c2, HTS221_READ_ADDRESS, (uint8_t *)&T_OUT_Value, sizeof(T_OUT_Value), 1000);
 8000dc8:	1dba      	adds	r2, r7, #6
 8000dca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	21bf      	movs	r1, #191	; 0xbf
 8000dd4:	481e      	ldr	r0, [pc, #120]	; (8000e50 <HTS221_get_sensor_data+0x234>)
 8000dd6:	f001 feb7 	bl	8002b48 <HAL_I2C_Master_Receive>

    // Calculate and print value of temperature in degC.
	int16_t temperatureValue = (((T1_degC_Value - T0_degC_Value) * (T_OUT_Value - T0_OUT_Value))/(T1_OUT_Value - T0_OUT_Value)) + (T0_degC_Value);
 8000dda:	4b26      	ldr	r3, [pc, #152]	; (8000e74 <HTS221_get_sensor_data+0x258>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	4b25      	ldr	r3, [pc, #148]	; (8000e78 <HTS221_get_sensor_data+0x25c>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000dea:	4611      	mov	r1, r2
 8000dec:	4a23      	ldr	r2, [pc, #140]	; (8000e7c <HTS221_get_sensor_data+0x260>)
 8000dee:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000df2:	1a8a      	subs	r2, r1, r2
 8000df4:	fb02 f203 	mul.w	r2, r2, r3
 8000df8:	4b21      	ldr	r3, [pc, #132]	; (8000e80 <HTS221_get_sensor_data+0x264>)
 8000dfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <HTS221_get_sensor_data+0x260>)
 8000e02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e06:	1acb      	subs	r3, r1, r3
 8000e08:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e0c:	b29a      	uxth	r2, r3
 8000e0e:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <HTS221_get_sensor_data+0x25c>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	4413      	add	r3, r2
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	snprintf(buffer, sizeof(buffer), "\tTemperature: %ddegC\n\n", temperatureValue);
 8000e1c:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 8000e20:	f107 0014 	add.w	r0, r7, #20
 8000e24:	4a17      	ldr	r2, [pc, #92]	; (8000e84 <HTS221_get_sensor_data+0x268>)
 8000e26:	2164      	movs	r1, #100	; 0x64
 8000e28:	f005 f81e 	bl	8005e68 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff f9cd 	bl	80001d0 <strlen>
 8000e36:	4603      	mov	r3, r0
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	f107 0114 	add.w	r1, r7, #20
 8000e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e42:	4805      	ldr	r0, [pc, #20]	; (8000e58 <HTS221_get_sensor_data+0x23c>)
 8000e44:	f004 f81f 	bl	8004e86 <HAL_UART_Transmit>
}
 8000e48:	bf00      	nop
 8000e4a:	3780      	adds	r7, #128	; 0x80
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	200005d4 	.word	0x200005d4
 8000e54:	0800676c 	.word	0x0800676c
 8000e58:	2000068c 	.word	0x2000068c
 8000e5c:	08006788 	.word	0x08006788
 8000e60:	2000079c 	.word	0x2000079c
 8000e64:	20000798 	.word	0x20000798
 8000e68:	20000620 	.word	0x20000620
 8000e6c:	20000688 	.word	0x20000688
 8000e70:	0800678c 	.word	0x0800678c
 8000e74:	2000079d 	.word	0x2000079d
 8000e78:	200000f8 	.word	0x200000f8
 8000e7c:	2000079a 	.word	0x2000079a
 8000e80:	20000712 	.word	0x20000712
 8000e84:	080067a0 	.word	0x080067a0

08000e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e8e:	f001 f822 	bl	8001ed6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e92:	f000 f8ab 	bl	8000fec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e96:	f000 fb2b 	bl	80014f0 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000e9a:	f000 f94f 	bl	800113c <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000e9e:	f000 f9c5 	bl	800122c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000ea2:	f000 fa03 	bl	80012ac <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000ea6:	f000 fa27 	bl	80012f8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000eaa:	f000 fa93 	bl	80013d4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000eae:	f000 fac1 	bl	8001434 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000eb2:	f000 faef 	bl	8001494 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000eb6:	f000 f979 	bl	80011ac <MX_I2C1_Init>
  MX_UART4_Init();
 8000eba:	f000 fa5b 	bl	8001374 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  HTS221_pwr_en();
 8000ebe:	f7ff fd73 	bl	80009a8 <HTS221_pwr_en>
  HTS221_get_cal_data();
 8000ec2:	f7ff fd89 	bl	80009d8 <HTS221_get_cal_data>

  char* cliHeader = "\nsimpleCLI Interface v0.5\n--------------------------------------\n";
 8000ec6:	4b41      	ldr	r3, [pc, #260]	; (8000fcc <main+0x144>)
 8000ec8:	60fb      	str	r3, [r7, #12]
  HAL_UART_Transmit(&huart1, (uint8_t*) cliHeader, strlen(cliHeader), 1000);
 8000eca:	68f8      	ldr	r0, [r7, #12]
 8000ecc:	f7ff f980 	bl	80001d0 <strlen>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed8:	68f9      	ldr	r1, [r7, #12]
 8000eda:	483d      	ldr	r0, [pc, #244]	; (8000fd0 <main+0x148>)
 8000edc:	f003 ffd3 	bl	8004e86 <HAL_UART_Transmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  char* cliPrompt = "Options:\n    1: Blink LEDs!\n    2: Read the temperature & RH!\n    3: Get the time!\n    4: Set the time!\n$>";
 8000ee0:	4b3c      	ldr	r3, [pc, #240]	; (8000fd4 <main+0x14c>)
 8000ee2:	60bb      	str	r3, [r7, #8]

	  HAL_UART_Transmit(&huart1, (uint8_t*) cliPrompt, strlen(cliPrompt), 1000);
 8000ee4:	68b8      	ldr	r0, [r7, #8]
 8000ee6:	f7ff f973 	bl	80001d0 <strlen>
 8000eea:	4603      	mov	r3, r0
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef2:	68b9      	ldr	r1, [r7, #8]
 8000ef4:	4836      	ldr	r0, [pc, #216]	; (8000fd0 <main+0x148>)
 8000ef6:	f003 ffc6 	bl	8004e86 <HAL_UART_Transmit>

	  char cliInput = '\0';
 8000efa:	2300      	movs	r3, #0
 8000efc:	71fb      	strb	r3, [r7, #7]
	  HAL_UART_Receive(&huart1, (uint8_t*) &cliInput, 1, HAL_MAX_DELAY);
 8000efe:	1df9      	adds	r1, r7, #7
 8000f00:	f04f 33ff 	mov.w	r3, #4294967295
 8000f04:	2201      	movs	r2, #1
 8000f06:	4832      	ldr	r0, [pc, #200]	; (8000fd0 <main+0x148>)
 8000f08:	f004 f851 	bl	8004fae <HAL_UART_Receive>

	  switch (cliInput)
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	3b31      	subs	r3, #49	; 0x31
 8000f10:	2b03      	cmp	r3, #3
 8000f12:	d84b      	bhi.n	8000fac <main+0x124>
 8000f14:	a201      	add	r2, pc, #4	; (adr r2, 8000f1c <main+0x94>)
 8000f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f1a:	bf00      	nop
 8000f1c:	08000f2d 	.word	0x08000f2d
 8000f20:	08000f4d 	.word	0x08000f4d
 8000f24:	08000f6d 	.word	0x08000f6d
 8000f28:	08000f8d 	.word	0x08000f8d
	  {
		case '1':
			cliPrompt = "\nToggle BLE/WiFi LED...\n\n";
 8000f2c:	4b2a      	ldr	r3, [pc, #168]	; (8000fd8 <main+0x150>)
 8000f2e:	60bb      	str	r3, [r7, #8]
			HAL_UART_Transmit(&huart1, (uint8_t*) cliPrompt, strlen(cliPrompt), 1000);
 8000f30:	68b8      	ldr	r0, [r7, #8]
 8000f32:	f7ff f94d 	bl	80001d0 <strlen>
 8000f36:	4603      	mov	r3, r0
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3e:	68b9      	ldr	r1, [r7, #8]
 8000f40:	4823      	ldr	r0, [pc, #140]	; (8000fd0 <main+0x148>)
 8000f42:	f003 ffa0 	bl	8004e86 <HAL_UART_Transmit>
			do_toggle_LED();
 8000f46:	f7ff fb17 	bl	8000578 <do_toggle_LED>
			break;
 8000f4a:	e03d      	b.n	8000fc8 <main+0x140>

		case '2':
			cliPrompt = "\nReading the temperature and RH...\n";
 8000f4c:	4b23      	ldr	r3, [pc, #140]	; (8000fdc <main+0x154>)
 8000f4e:	60bb      	str	r3, [r7, #8]
			HAL_UART_Transmit(&huart1, (uint8_t*) cliPrompt, strlen(cliPrompt), 1000);
 8000f50:	68b8      	ldr	r0, [r7, #8]
 8000f52:	f7ff f93d 	bl	80001d0 <strlen>
 8000f56:	4603      	mov	r3, r0
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5e:	68b9      	ldr	r1, [r7, #8]
 8000f60:	481b      	ldr	r0, [pc, #108]	; (8000fd0 <main+0x148>)
 8000f62:	f003 ff90 	bl	8004e86 <HAL_UART_Transmit>
			HTS221_get_sensor_data();
 8000f66:	f7ff fe59 	bl	8000c1c <HTS221_get_sensor_data>
			break;
 8000f6a:	e02d      	b.n	8000fc8 <main+0x140>

		case '3':
			cliPrompt = "\nGetting the time...\n";
 8000f6c:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <main+0x158>)
 8000f6e:	60bb      	str	r3, [r7, #8]
			HAL_UART_Transmit(&huart1, (uint8_t*) cliPrompt, strlen(cliPrompt), 1000);
 8000f70:	68b8      	ldr	r0, [r7, #8]
 8000f72:	f7ff f92d 	bl	80001d0 <strlen>
 8000f76:	4603      	mov	r3, r0
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7e:	68b9      	ldr	r1, [r7, #8]
 8000f80:	4813      	ldr	r0, [pc, #76]	; (8000fd0 <main+0x148>)
 8000f82:	f003 ff80 	bl	8004e86 <HAL_UART_Transmit>
			do_get_time();
 8000f86:	f7ff fb13 	bl	80005b0 <do_get_time>
			break;
 8000f8a:	e01d      	b.n	8000fc8 <main+0x140>

		case '4':
			cliPrompt = "\nSetting the time...\n";
 8000f8c:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <main+0x15c>)
 8000f8e:	60bb      	str	r3, [r7, #8]
			HAL_UART_Transmit(&huart1, (uint8_t*) cliPrompt, strlen(cliPrompt), 1000);
 8000f90:	68b8      	ldr	r0, [r7, #8]
 8000f92:	f7ff f91d 	bl	80001d0 <strlen>
 8000f96:	4603      	mov	r3, r0
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9e:	68b9      	ldr	r1, [r7, #8]
 8000fa0:	480b      	ldr	r0, [pc, #44]	; (8000fd0 <main+0x148>)
 8000fa2:	f003 ff70 	bl	8004e86 <HAL_UART_Transmit>
			do_set_time();
 8000fa6:	f7ff fc3f 	bl	8000828 <do_set_time>
			break;
 8000faa:	e00d      	b.n	8000fc8 <main+0x140>

		default:
			cliPrompt = "Invalid input!\r\n";
 8000fac:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <main+0x160>)
 8000fae:	60bb      	str	r3, [r7, #8]
			HAL_UART_Transmit(&huart1, (uint8_t*) cliPrompt, strlen(cliPrompt), 1000);
 8000fb0:	68b8      	ldr	r0, [r7, #8]
 8000fb2:	f7ff f90d 	bl	80001d0 <strlen>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fbe:	68b9      	ldr	r1, [r7, #8]
 8000fc0:	4803      	ldr	r0, [pc, #12]	; (8000fd0 <main+0x148>)
 8000fc2:	f003 ff60 	bl	8004e86 <HAL_UART_Transmit>
			break;
 8000fc6:	bf00      	nop
  {
 8000fc8:	e78a      	b.n	8000ee0 <main+0x58>
 8000fca:	bf00      	nop
 8000fcc:	080067b8 	.word	0x080067b8
 8000fd0:	2000068c 	.word	0x2000068c
 8000fd4:	080067fc 	.word	0x080067fc
 8000fd8:	08006868 	.word	0x08006868
 8000fdc:	08006884 	.word	0x08006884
 8000fe0:	080068a8 	.word	0x080068a8
 8000fe4:	080068c0 	.word	0x080068c0
 8000fe8:	080068d8 	.word	0x080068d8

08000fec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b0b8      	sub	sp, #224	; 0xe0
 8000ff0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ff6:	2244      	movs	r2, #68	; 0x44
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f004 ff2c 	bl	8005e58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001000:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001010:	463b      	mov	r3, r7
 8001012:	2288      	movs	r2, #136	; 0x88
 8001014:	2100      	movs	r1, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f004 ff1e 	bl	8005e58 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800101c:	f002 fa4a 	bl	80034b4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001020:	4b44      	ldr	r3, [pc, #272]	; (8001134 <SystemClock_Config+0x148>)
 8001022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001026:	4a43      	ldr	r2, [pc, #268]	; (8001134 <SystemClock_Config+0x148>)
 8001028:	f023 0318 	bic.w	r3, r3, #24
 800102c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001030:	2314      	movs	r3, #20
 8001032:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001036:	2301      	movs	r3, #1
 8001038:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800103c:	2301      	movs	r3, #1
 800103e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001048:	2360      	movs	r3, #96	; 0x60
 800104a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800104e:	2302      	movs	r3, #2
 8001050:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001054:	2301      	movs	r3, #1
 8001056:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800105a:	2301      	movs	r3, #1
 800105c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001060:	2328      	movs	r3, #40	; 0x28
 8001062:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001066:	2307      	movs	r3, #7
 8001068:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800106c:	2302      	movs	r3, #2
 800106e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001072:	2302      	movs	r3, #2
 8001074:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001078:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800107c:	4618      	mov	r0, r3
 800107e:	f002 fb59 	bl	8003734 <HAL_RCC_OscConfig>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001088:	f000 fbbc 	bl	8001804 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108c:	230f      	movs	r3, #15
 800108e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001092:	2303      	movs	r3, #3
 8001094:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001098:	2300      	movs	r3, #0
 800109a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800109e:	2300      	movs	r3, #0
 80010a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010aa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80010ae:	2104      	movs	r1, #4
 80010b0:	4618      	mov	r0, r3
 80010b2:	f002 ff25 	bl	8003f00 <HAL_RCC_ClockConfig>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80010bc:	f000 fba2 	bl	8001804 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 80010c0:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <SystemClock_Config+0x14c>)
 80010c2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010c4:	2300      	movs	r3, #0
 80010c6:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010c8:	2300      	movs	r3, #0
 80010ca:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80010cc:	2300      	movs	r3, #0
 80010ce:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010d0:	2300      	movs	r3, #0
 80010d2:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80010d8:	2300      	movs	r3, #0
 80010da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80010de:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80010e2:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80010e4:	2301      	movs	r3, #1
 80010e6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80010e8:	2301      	movs	r3, #1
 80010ea:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80010ec:	2318      	movs	r3, #24
 80010ee:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80010f0:	2307      	movs	r3, #7
 80010f2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80010f4:	2302      	movs	r3, #2
 80010f6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80010f8:	2302      	movs	r3, #2
 80010fa:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80010fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001100:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001102:	463b      	mov	r3, r7
 8001104:	4618      	mov	r0, r3
 8001106:	f003 f901 	bl	800430c <HAL_RCCEx_PeriphCLKConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <SystemClock_Config+0x128>
  {
    Error_Handler();
 8001110:	f000 fb78 	bl	8001804 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001114:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001118:	f002 f9ea 	bl	80034f0 <HAL_PWREx_ControlVoltageScaling>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <SystemClock_Config+0x13a>
  {
    Error_Handler();
 8001122:	f000 fb6f 	bl	8001804 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001126:	f003 fbdb 	bl	80048e0 <HAL_RCCEx_EnableMSIPLLMode>
}
 800112a:	bf00      	nop
 800112c:	37e0      	adds	r7, #224	; 0xe0
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40021000 	.word	0x40021000
 8001138:	000120cd 	.word	0x000120cd

0800113c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001140:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <MX_DFSDM1_Init+0x68>)
 8001142:	4a19      	ldr	r2, [pc, #100]	; (80011a8 <MX_DFSDM1_Init+0x6c>)
 8001144:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8001146:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <MX_DFSDM1_Init+0x68>)
 8001148:	2201      	movs	r2, #1
 800114a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800114c:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <MX_DFSDM1_Init+0x68>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8001152:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <MX_DFSDM1_Init+0x68>)
 8001154:	2202      	movs	r2, #2
 8001156:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <MX_DFSDM1_Init+0x68>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <MX_DFSDM1_Init+0x68>)
 8001160:	2200      	movs	r2, #0
 8001162:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001164:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <MX_DFSDM1_Init+0x68>)
 8001166:	f44f 7280 	mov.w	r2, #256	; 0x100
 800116a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800116c:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <MX_DFSDM1_Init+0x68>)
 800116e:	2200      	movs	r2, #0
 8001170:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <MX_DFSDM1_Init+0x68>)
 8001174:	2204      	movs	r2, #4
 8001176:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001178:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <MX_DFSDM1_Init+0x68>)
 800117a:	2200      	movs	r2, #0
 800117c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <MX_DFSDM1_Init+0x68>)
 8001180:	2201      	movs	r2, #1
 8001182:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001184:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <MX_DFSDM1_Init+0x68>)
 8001186:	2200      	movs	r2, #0
 8001188:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <MX_DFSDM1_Init+0x68>)
 800118c:	2200      	movs	r2, #0
 800118e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001190:	4804      	ldr	r0, [pc, #16]	; (80011a4 <MX_DFSDM1_Init+0x68>)
 8001192:	f001 f84b 	bl	800222c <HAL_DFSDM_ChannelInit>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 800119c:	f000 fb32 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	200000c0 	.word	0x200000c0
 80011a8:	40016020 	.word	0x40016020

080011ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011b0:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <MX_I2C1_Init+0x74>)
 80011b2:	4a1c      	ldr	r2, [pc, #112]	; (8001224 <MX_I2C1_Init+0x78>)
 80011b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80011b6:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <MX_I2C1_Init+0x74>)
 80011b8:	4a1b      	ldr	r2, [pc, #108]	; (8001228 <MX_I2C1_Init+0x7c>)
 80011ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <MX_I2C1_Init+0x74>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011c2:	4b17      	ldr	r3, [pc, #92]	; (8001220 <MX_I2C1_Init+0x74>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c8:	4b15      	ldr	r3, [pc, #84]	; (8001220 <MX_I2C1_Init+0x74>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011ce:	4b14      	ldr	r3, [pc, #80]	; (8001220 <MX_I2C1_Init+0x74>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <MX_I2C1_Init+0x74>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <MX_I2C1_Init+0x74>)
 80011dc:	2200      	movs	r2, #0
 80011de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <MX_I2C1_Init+0x74>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011e6:	480e      	ldr	r0, [pc, #56]	; (8001220 <MX_I2C1_Init+0x74>)
 80011e8:	f001 fb2b 	bl	8002842 <HAL_I2C_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011f2:	f000 fb07 	bl	8001804 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011f6:	2100      	movs	r1, #0
 80011f8:	4809      	ldr	r0, [pc, #36]	; (8001220 <MX_I2C1_Init+0x74>)
 80011fa:	f001 ff7b 	bl	80030f4 <HAL_I2CEx_ConfigAnalogFilter>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001204:	f000 fafe 	bl	8001804 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001208:	2100      	movs	r1, #0
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <MX_I2C1_Init+0x74>)
 800120c:	f001 ffbd 	bl	800318a <HAL_I2CEx_ConfigDigitalFilter>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001216:	f000 faf5 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000180 	.word	0x20000180
 8001224:	40005400 	.word	0x40005400
 8001228:	10909cec 	.word	0x10909cec

0800122c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001230:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <MX_I2C2_Init+0x74>)
 8001232:	4a1c      	ldr	r2, [pc, #112]	; (80012a4 <MX_I2C2_Init+0x78>)
 8001234:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8001236:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <MX_I2C2_Init+0x74>)
 8001238:	4a1b      	ldr	r2, [pc, #108]	; (80012a8 <MX_I2C2_Init+0x7c>)
 800123a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800123c:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <MX_I2C2_Init+0x74>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001242:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <MX_I2C2_Init+0x74>)
 8001244:	2201      	movs	r2, #1
 8001246:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001248:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <MX_I2C2_Init+0x74>)
 800124a:	2200      	movs	r2, #0
 800124c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800124e:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <MX_I2C2_Init+0x74>)
 8001250:	2200      	movs	r2, #0
 8001252:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <MX_I2C2_Init+0x74>)
 8001256:	2200      	movs	r2, #0
 8001258:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <MX_I2C2_Init+0x74>)
 800125c:	2200      	movs	r2, #0
 800125e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001260:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <MX_I2C2_Init+0x74>)
 8001262:	2200      	movs	r2, #0
 8001264:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001266:	480e      	ldr	r0, [pc, #56]	; (80012a0 <MX_I2C2_Init+0x74>)
 8001268:	f001 faeb 	bl	8002842 <HAL_I2C_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001272:	f000 fac7 	bl	8001804 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001276:	2100      	movs	r1, #0
 8001278:	4809      	ldr	r0, [pc, #36]	; (80012a0 <MX_I2C2_Init+0x74>)
 800127a:	f001 ff3b 	bl	80030f4 <HAL_I2CEx_ConfigAnalogFilter>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001284:	f000 fabe 	bl	8001804 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001288:	2100      	movs	r1, #0
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <MX_I2C2_Init+0x74>)
 800128c:	f001 ff7d 	bl	800318a <HAL_I2CEx_ConfigDigitalFilter>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001296:	f000 fab5 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200005d4 	.word	0x200005d4
 80012a4:	40005800 	.word	0x40005800
 80012a8:	10909cec 	.word	0x10909cec

080012ac <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <MX_QUADSPI_Init+0x44>)
 80012b2:	4a10      	ldr	r2, [pc, #64]	; (80012f4 <MX_QUADSPI_Init+0x48>)
 80012b4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_QUADSPI_Init+0x44>)
 80012b8:	2202      	movs	r2, #2
 80012ba:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <MX_QUADSPI_Init+0x44>)
 80012be:	2204      	movs	r2, #4
 80012c0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <MX_QUADSPI_Init+0x44>)
 80012c4:	2210      	movs	r2, #16
 80012c6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80012c8:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <MX_QUADSPI_Init+0x44>)
 80012ca:	2217      	movs	r2, #23
 80012cc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80012ce:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <MX_QUADSPI_Init+0x44>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <MX_QUADSPI_Init+0x44>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80012da:	4805      	ldr	r0, [pc, #20]	; (80012f0 <MX_QUADSPI_Init+0x44>)
 80012dc:	f002 f96e 	bl	80035bc <HAL_QSPI_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80012e6:	f000 fa8d 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200007a0 	.word	0x200007a0
 80012f4:	a0001000 	.word	0xa0001000

080012f8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80012fc:	4b1b      	ldr	r3, [pc, #108]	; (800136c <MX_SPI3_Init+0x74>)
 80012fe:	4a1c      	ldr	r2, [pc, #112]	; (8001370 <MX_SPI3_Init+0x78>)
 8001300:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001302:	4b1a      	ldr	r3, [pc, #104]	; (800136c <MX_SPI3_Init+0x74>)
 8001304:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001308:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800130a:	4b18      	ldr	r3, [pc, #96]	; (800136c <MX_SPI3_Init+0x74>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001310:	4b16      	ldr	r3, [pc, #88]	; (800136c <MX_SPI3_Init+0x74>)
 8001312:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001316:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001318:	4b14      	ldr	r3, [pc, #80]	; (800136c <MX_SPI3_Init+0x74>)
 800131a:	2200      	movs	r2, #0
 800131c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800131e:	4b13      	ldr	r3, [pc, #76]	; (800136c <MX_SPI3_Init+0x74>)
 8001320:	2200      	movs	r2, #0
 8001322:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001324:	4b11      	ldr	r3, [pc, #68]	; (800136c <MX_SPI3_Init+0x74>)
 8001326:	f44f 7200 	mov.w	r2, #512	; 0x200
 800132a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800132c:	4b0f      	ldr	r3, [pc, #60]	; (800136c <MX_SPI3_Init+0x74>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <MX_SPI3_Init+0x74>)
 8001334:	2200      	movs	r2, #0
 8001336:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <MX_SPI3_Init+0x74>)
 800133a:	2200      	movs	r2, #0
 800133c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <MX_SPI3_Init+0x74>)
 8001340:	2200      	movs	r2, #0
 8001342:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <MX_SPI3_Init+0x74>)
 8001346:	2207      	movs	r2, #7
 8001348:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800134a:	4b08      	ldr	r3, [pc, #32]	; (800136c <MX_SPI3_Init+0x74>)
 800134c:	2200      	movs	r2, #0
 800134e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <MX_SPI3_Init+0x74>)
 8001352:	2208      	movs	r2, #8
 8001354:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001356:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_SPI3_Init+0x74>)
 8001358:	f003 fca4 	bl	8004ca4 <HAL_SPI_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001362:	f000 fa4f 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000624 	.word	0x20000624
 8001370:	40003c00 	.word	0x40003c00

08001374 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001378:	4b14      	ldr	r3, [pc, #80]	; (80013cc <MX_UART4_Init+0x58>)
 800137a:	4a15      	ldr	r2, [pc, #84]	; (80013d0 <MX_UART4_Init+0x5c>)
 800137c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800137e:	4b13      	ldr	r3, [pc, #76]	; (80013cc <MX_UART4_Init+0x58>)
 8001380:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001384:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <MX_UART4_Init+0x58>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800138c:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <MX_UART4_Init+0x58>)
 800138e:	2200      	movs	r2, #0
 8001390:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <MX_UART4_Init+0x58>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <MX_UART4_Init+0x58>)
 800139a:	220c      	movs	r2, #12
 800139c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <MX_UART4_Init+0x58>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <MX_UART4_Init+0x58>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013aa:	4b08      	ldr	r3, [pc, #32]	; (80013cc <MX_UART4_Init+0x58>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <MX_UART4_Init+0x58>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80013b6:	4805      	ldr	r0, [pc, #20]	; (80013cc <MX_UART4_Init+0x58>)
 80013b8:	f003 fd17 	bl	8004dea <HAL_UART_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80013c2:	f000 fa1f 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000714 	.word	0x20000714
 80013d0:	40004c00 	.word	0x40004c00

080013d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013d8:	4b14      	ldr	r3, [pc, #80]	; (800142c <MX_USART1_UART_Init+0x58>)
 80013da:	4a15      	ldr	r2, [pc, #84]	; (8001430 <MX_USART1_UART_Init+0x5c>)
 80013dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013de:	4b13      	ldr	r3, [pc, #76]	; (800142c <MX_USART1_UART_Init+0x58>)
 80013e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <MX_USART1_UART_Init+0x58>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013ec:	4b0f      	ldr	r3, [pc, #60]	; (800142c <MX_USART1_UART_Init+0x58>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013f2:	4b0e      	ldr	r3, [pc, #56]	; (800142c <MX_USART1_UART_Init+0x58>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013f8:	4b0c      	ldr	r3, [pc, #48]	; (800142c <MX_USART1_UART_Init+0x58>)
 80013fa:	220c      	movs	r2, #12
 80013fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <MX_USART1_UART_Init+0x58>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001404:	4b09      	ldr	r3, [pc, #36]	; (800142c <MX_USART1_UART_Init+0x58>)
 8001406:	2200      	movs	r2, #0
 8001408:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800140a:	4b08      	ldr	r3, [pc, #32]	; (800142c <MX_USART1_UART_Init+0x58>)
 800140c:	2200      	movs	r2, #0
 800140e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <MX_USART1_UART_Init+0x58>)
 8001412:	2200      	movs	r2, #0
 8001414:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001416:	4805      	ldr	r0, [pc, #20]	; (800142c <MX_USART1_UART_Init+0x58>)
 8001418:	f003 fce7 	bl	8004dea <HAL_UART_Init>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001422:	f000 f9ef 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	2000068c 	.word	0x2000068c
 8001430:	40013800 	.word	0x40013800

08001434 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001438:	4b14      	ldr	r3, [pc, #80]	; (800148c <MX_USART3_UART_Init+0x58>)
 800143a:	4a15      	ldr	r2, [pc, #84]	; (8001490 <MX_USART3_UART_Init+0x5c>)
 800143c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800143e:	4b13      	ldr	r3, [pc, #76]	; (800148c <MX_USART3_UART_Init+0x58>)
 8001440:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001444:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001446:	4b11      	ldr	r3, [pc, #68]	; (800148c <MX_USART3_UART_Init+0x58>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800144c:	4b0f      	ldr	r3, [pc, #60]	; (800148c <MX_USART3_UART_Init+0x58>)
 800144e:	2200      	movs	r2, #0
 8001450:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001452:	4b0e      	ldr	r3, [pc, #56]	; (800148c <MX_USART3_UART_Init+0x58>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <MX_USART3_UART_Init+0x58>)
 800145a:	220c      	movs	r2, #12
 800145c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <MX_USART3_UART_Init+0x58>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001464:	4b09      	ldr	r3, [pc, #36]	; (800148c <MX_USART3_UART_Init+0x58>)
 8001466:	2200      	movs	r2, #0
 8001468:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800146a:	4b08      	ldr	r3, [pc, #32]	; (800148c <MX_USART3_UART_Init+0x58>)
 800146c:	2200      	movs	r2, #0
 800146e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <MX_USART3_UART_Init+0x58>)
 8001472:	2200      	movs	r2, #0
 8001474:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001476:	4805      	ldr	r0, [pc, #20]	; (800148c <MX_USART3_UART_Init+0x58>)
 8001478:	f003 fcb7 	bl	8004dea <HAL_UART_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001482:	f000 f9bf 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	200000fc 	.word	0x200000fc
 8001490:	40004800 	.word	0x40004800

08001494 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001498:	4b14      	ldr	r3, [pc, #80]	; (80014ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 800149a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800149e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014a2:	2206      	movs	r2, #6
 80014a4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80014a6:	4b11      	ldr	r3, [pc, #68]	; (80014ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014a8:	2202      	movs	r2, #2
 80014aa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ae:	2202      	movs	r2, #2
 80014b0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80014b2:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80014be:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80014c4:	4b09      	ldr	r3, [pc, #36]	; (80014ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80014ca:	4b08      	ldr	r3, [pc, #32]	; (80014ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80014d6:	4805      	ldr	r0, [pc, #20]	; (80014ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014d8:	f001 fea3 	bl	8003222 <HAL_PCD_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80014e2:	f000 f98f 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	200001cc 	.word	0x200001cc

080014f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	; 0x28
 80014f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
 8001504:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001506:	4bb8      	ldr	r3, [pc, #736]	; (80017e8 <MX_GPIO_Init+0x2f8>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	4ab7      	ldr	r2, [pc, #732]	; (80017e8 <MX_GPIO_Init+0x2f8>)
 800150c:	f043 0310 	orr.w	r3, r3, #16
 8001510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001512:	4bb5      	ldr	r3, [pc, #724]	; (80017e8 <MX_GPIO_Init+0x2f8>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	f003 0310 	and.w	r3, r3, #16
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800151e:	4bb2      	ldr	r3, [pc, #712]	; (80017e8 <MX_GPIO_Init+0x2f8>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001522:	4ab1      	ldr	r2, [pc, #708]	; (80017e8 <MX_GPIO_Init+0x2f8>)
 8001524:	f043 0304 	orr.w	r3, r3, #4
 8001528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800152a:	4baf      	ldr	r3, [pc, #700]	; (80017e8 <MX_GPIO_Init+0x2f8>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152e:	f003 0304 	and.w	r3, r3, #4
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001536:	4bac      	ldr	r3, [pc, #688]	; (80017e8 <MX_GPIO_Init+0x2f8>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153a:	4aab      	ldr	r2, [pc, #684]	; (80017e8 <MX_GPIO_Init+0x2f8>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001542:	4ba9      	ldr	r3, [pc, #676]	; (80017e8 <MX_GPIO_Init+0x2f8>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800154e:	4ba6      	ldr	r3, [pc, #664]	; (80017e8 <MX_GPIO_Init+0x2f8>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001552:	4aa5      	ldr	r2, [pc, #660]	; (80017e8 <MX_GPIO_Init+0x2f8>)
 8001554:	f043 0302 	orr.w	r3, r3, #2
 8001558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800155a:	4ba3      	ldr	r3, [pc, #652]	; (80017e8 <MX_GPIO_Init+0x2f8>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001566:	4ba0      	ldr	r3, [pc, #640]	; (80017e8 <MX_GPIO_Init+0x2f8>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156a:	4a9f      	ldr	r2, [pc, #636]	; (80017e8 <MX_GPIO_Init+0x2f8>)
 800156c:	f043 0308 	orr.w	r3, r3, #8
 8001570:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001572:	4b9d      	ldr	r3, [pc, #628]	; (80017e8 <MX_GPIO_Init+0x2f8>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001576:	f003 0308 	and.w	r3, r3, #8
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800157e:	2200      	movs	r2, #0
 8001580:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001584:	4899      	ldr	r0, [pc, #612]	; (80017ec <MX_GPIO_Init+0x2fc>)
 8001586:	f001 f907 	bl	8002798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800158a:	2200      	movs	r2, #0
 800158c:	f248 1104 	movw	r1, #33028	; 0x8104
 8001590:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001594:	f001 f900 	bl	8002798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001598:	2200      	movs	r2, #0
 800159a:	f24f 0114 	movw	r1, #61460	; 0xf014
 800159e:	4894      	ldr	r0, [pc, #592]	; (80017f0 <MX_GPIO_Init+0x300>)
 80015a0:	f001 f8fa 	bl	8002798 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80015a4:	2200      	movs	r2, #0
 80015a6:	f241 0181 	movw	r1, #4225	; 0x1081
 80015aa:	4892      	ldr	r0, [pc, #584]	; (80017f4 <MX_GPIO_Init+0x304>)
 80015ac:	f001 f8f4 	bl	8002798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80015b0:	2201      	movs	r2, #1
 80015b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015b6:	488f      	ldr	r0, [pc, #572]	; (80017f4 <MX_GPIO_Init+0x304>)
 80015b8:	f001 f8ee 	bl	8002798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80015bc:	2200      	movs	r2, #0
 80015be:	f44f 7110 	mov.w	r1, #576	; 0x240
 80015c2:	488d      	ldr	r0, [pc, #564]	; (80017f8 <MX_GPIO_Init+0x308>)
 80015c4:	f001 f8e8 	bl	8002798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80015c8:	2201      	movs	r2, #1
 80015ca:	2120      	movs	r1, #32
 80015cc:	4888      	ldr	r0, [pc, #544]	; (80017f0 <MX_GPIO_Init+0x300>)
 80015ce:	f001 f8e3 	bl	8002798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80015d2:	2201      	movs	r2, #1
 80015d4:	2101      	movs	r1, #1
 80015d6:	4885      	ldr	r0, [pc, #532]	; (80017ec <MX_GPIO_Init+0x2fc>)
 80015d8:	f001 f8de 	bl	8002798 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80015dc:	f240 1315 	movw	r3, #277	; 0x115
 80015e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e2:	2301      	movs	r3, #1
 80015e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2300      	movs	r3, #0
 80015ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	4619      	mov	r1, r3
 80015f4:	487d      	ldr	r0, [pc, #500]	; (80017ec <MX_GPIO_Init+0x2fc>)
 80015f6:	f000 ff25 	bl	8002444 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80015fa:	236a      	movs	r3, #106	; 0x6a
 80015fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015fe:	4b7f      	ldr	r3, [pc, #508]	; (80017fc <MX_GPIO_Init+0x30c>)
 8001600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	4619      	mov	r1, r3
 800160c:	4877      	ldr	r0, [pc, #476]	; (80017ec <MX_GPIO_Init+0x2fc>)
 800160e:	f000 ff19 	bl	8002444 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001612:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001618:	4b79      	ldr	r3, [pc, #484]	; (8001800 <MX_GPIO_Init+0x310>)
 800161a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	4619      	mov	r1, r3
 8001626:	4874      	ldr	r0, [pc, #464]	; (80017f8 <MX_GPIO_Init+0x308>)
 8001628:	f000 ff0c 	bl	8002444 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 800162c:	233f      	movs	r3, #63	; 0x3f
 800162e:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001630:	230b      	movs	r3, #11
 8001632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	486e      	ldr	r0, [pc, #440]	; (80017f8 <MX_GPIO_Init+0x308>)
 8001640:	f000 ff00 	bl	8002444 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001644:	f248 1304 	movw	r3, #33028	; 0x8104
 8001648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164a:	2301      	movs	r3, #1
 800164c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001652:	2300      	movs	r3, #0
 8001654:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	4619      	mov	r1, r3
 800165c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001660:	f000 fef0 	bl	8002444 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001664:	2308      	movs	r3, #8
 8001666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001670:	2300      	movs	r3, #0
 8001672:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001674:	2301      	movs	r3, #1
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	4619      	mov	r1, r3
 800167e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001682:	f000 fedf 	bl	8002444 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001686:	2310      	movs	r3, #16
 8001688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800168a:	230b      	movs	r3, #11
 800168c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	4619      	mov	r1, r3
 8001698:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800169c:	f000 fed2 	bl	8002444 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80016a0:	23e0      	movs	r3, #224	; 0xe0
 80016a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a4:	2302      	movs	r3, #2
 80016a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ac:	2303      	movs	r3, #3
 80016ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016b0:	2305      	movs	r3, #5
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	4619      	mov	r1, r3
 80016ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016be:	f000 fec1 	bl	8002444 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80016c2:	2301      	movs	r3, #1
 80016c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016c6:	4b4d      	ldr	r3, [pc, #308]	; (80017fc <MX_GPIO_Init+0x30c>)
 80016c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	4619      	mov	r1, r3
 80016d4:	4846      	ldr	r0, [pc, #280]	; (80017f0 <MX_GPIO_Init+0x300>)
 80016d6:	f000 feb5 	bl	8002444 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80016da:	2302      	movs	r3, #2
 80016dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016de:	230b      	movs	r3, #11
 80016e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	4619      	mov	r1, r3
 80016ec:	4840      	ldr	r0, [pc, #256]	; (80017f0 <MX_GPIO_Init+0x300>)
 80016ee:	f000 fea9 	bl	8002444 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80016f2:	f24f 0334 	movw	r3, #61492	; 0xf034
 80016f6:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f8:	2301      	movs	r3, #1
 80016fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2300      	movs	r3, #0
 8001702:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	4619      	mov	r1, r3
 800170a:	4839      	ldr	r0, [pc, #228]	; (80017f0 <MX_GPIO_Init+0x300>)
 800170c:	f000 fe9a 	bl	8002444 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001710:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001714:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001716:	4b39      	ldr	r3, [pc, #228]	; (80017fc <MX_GPIO_Init+0x30c>)
 8001718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	4619      	mov	r1, r3
 8001724:	4833      	ldr	r0, [pc, #204]	; (80017f4 <MX_GPIO_Init+0x304>)
 8001726:	f000 fe8d 	bl	8002444 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 800172a:	f243 0381 	movw	r3, #12417	; 0x3081
 800172e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001730:	2301      	movs	r3, #1
 8001732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	4619      	mov	r1, r3
 8001742:	482c      	ldr	r0, [pc, #176]	; (80017f4 <MX_GPIO_Init+0x304>)
 8001744:	f000 fe7e 	bl	8002444 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001748:	f44f 7310 	mov.w	r3, #576	; 0x240
 800174c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174e:	2301      	movs	r3, #1
 8001750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001756:	2300      	movs	r3, #0
 8001758:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	4619      	mov	r1, r3
 8001760:	4825      	ldr	r0, [pc, #148]	; (80017f8 <MX_GPIO_Init+0x308>)
 8001762:	f000 fe6f 	bl	8002444 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001766:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800176a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800176c:	4b23      	ldr	r3, [pc, #140]	; (80017fc <MX_GPIO_Init+0x30c>)
 800176e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	4619      	mov	r1, r3
 800177a:	481f      	ldr	r0, [pc, #124]	; (80017f8 <MX_GPIO_Init+0x308>)
 800177c:	f000 fe62 	bl	8002444 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001780:	2302      	movs	r3, #2
 8001782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001784:	2302      	movs	r3, #2
 8001786:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178c:	2303      	movs	r3, #3
 800178e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001790:	2305      	movs	r3, #5
 8001792:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	4619      	mov	r1, r3
 800179a:	4816      	ldr	r0, [pc, #88]	; (80017f4 <MX_GPIO_Init+0x304>)
 800179c:	f000 fe52 	bl	8002444 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80017a0:	2378      	movs	r3, #120	; 0x78
 80017a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a4:	2302      	movs	r3, #2
 80017a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ac:	2303      	movs	r3, #3
 80017ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017b0:	2307      	movs	r3, #7
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	4619      	mov	r1, r3
 80017ba:	480e      	ldr	r0, [pc, #56]	; (80017f4 <MX_GPIO_Init+0x304>)
 80017bc:	f000 fe42 	bl	8002444 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80017c0:	2200      	movs	r2, #0
 80017c2:	2100      	movs	r1, #0
 80017c4:	2017      	movs	r0, #23
 80017c6:	f000 fcfa 	bl	80021be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017ca:	2017      	movs	r0, #23
 80017cc:	f000 fd13 	bl	80021f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017d0:	2200      	movs	r2, #0
 80017d2:	2100      	movs	r1, #0
 80017d4:	2028      	movs	r0, #40	; 0x28
 80017d6:	f000 fcf2 	bl	80021be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017da:	2028      	movs	r0, #40	; 0x28
 80017dc:	f000 fd0b 	bl	80021f6 <HAL_NVIC_EnableIRQ>

}
 80017e0:	bf00      	nop
 80017e2:	3728      	adds	r7, #40	; 0x28
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40021000 	.word	0x40021000
 80017ec:	48001000 	.word	0x48001000
 80017f0:	48000400 	.word	0x48000400
 80017f4:	48000c00 	.word	0x48000c00
 80017f8:	48000800 	.word	0x48000800
 80017fc:	10110000 	.word	0x10110000
 8001800:	10210000 	.word	0x10210000

08001804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001808:	b672      	cpsid	i
}
 800180a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800180c:	e7fe      	b.n	800180c <Error_Handler+0x8>
	...

08001810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001816:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <HAL_MspInit+0x44>)
 8001818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800181a:	4a0e      	ldr	r2, [pc, #56]	; (8001854 <HAL_MspInit+0x44>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	6613      	str	r3, [r2, #96]	; 0x60
 8001822:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <HAL_MspInit+0x44>)
 8001824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800182e:	4b09      	ldr	r3, [pc, #36]	; (8001854 <HAL_MspInit+0x44>)
 8001830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001832:	4a08      	ldr	r2, [pc, #32]	; (8001854 <HAL_MspInit+0x44>)
 8001834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001838:	6593      	str	r3, [r2, #88]	; 0x58
 800183a:	4b06      	ldr	r3, [pc, #24]	; (8001854 <HAL_MspInit+0x44>)
 800183c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001842:	603b      	str	r3, [r7, #0]
 8001844:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	40021000 	.word	0x40021000

08001858 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08a      	sub	sp, #40	; 0x28
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8001870:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <HAL_DFSDM_ChannelMspInit+0x84>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d12d      	bne.n	80018d4 <HAL_DFSDM_ChannelMspInit+0x7c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001878:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <HAL_DFSDM_ChannelMspInit+0x88>)
 800187a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800187c:	4a18      	ldr	r2, [pc, #96]	; (80018e0 <HAL_DFSDM_ChannelMspInit+0x88>)
 800187e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001882:	6613      	str	r3, [r2, #96]	; 0x60
 8001884:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001888:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001890:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001894:	4a12      	ldr	r2, [pc, #72]	; (80018e0 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001896:	f043 0310 	orr.w	r3, r3, #16
 800189a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800189c:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <HAL_DFSDM_ChannelMspInit+0x88>)
 800189e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a0:	f003 0310 	and.w	r3, r3, #16
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80018a8:	f44f 7320 	mov.w	r3, #640	; 0x280
 80018ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	2300      	movs	r3, #0
 80018b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80018ba:	2306      	movs	r3, #6
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	4619      	mov	r1, r3
 80018c4:	4807      	ldr	r0, [pc, #28]	; (80018e4 <HAL_DFSDM_ChannelMspInit+0x8c>)
 80018c6:	f000 fdbd 	bl	8002444 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80018ca:	4b04      	ldr	r3, [pc, #16]	; (80018dc <HAL_DFSDM_ChannelMspInit+0x84>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	3301      	adds	r3, #1
 80018d0:	4a02      	ldr	r2, [pc, #8]	; (80018dc <HAL_DFSDM_ChannelMspInit+0x84>)
 80018d2:	6013      	str	r3, [r2, #0]
  }

}
 80018d4:	bf00      	nop
 80018d6:	3728      	adds	r7, #40	; 0x28
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	2000008c 	.word	0x2000008c
 80018e0:	40021000 	.word	0x40021000
 80018e4:	48001000 	.word	0x48001000

080018e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08c      	sub	sp, #48	; 0x30
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 031c 	add.w	r3, r7, #28
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a2f      	ldr	r2, [pc, #188]	; (80019c4 <HAL_I2C_MspInit+0xdc>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d129      	bne.n	800195e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800190a:	4b2f      	ldr	r3, [pc, #188]	; (80019c8 <HAL_I2C_MspInit+0xe0>)
 800190c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190e:	4a2e      	ldr	r2, [pc, #184]	; (80019c8 <HAL_I2C_MspInit+0xe0>)
 8001910:	f043 0302 	orr.w	r3, r3, #2
 8001914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001916:	4b2c      	ldr	r3, [pc, #176]	; (80019c8 <HAL_I2C_MspInit+0xe0>)
 8001918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	61bb      	str	r3, [r7, #24]
 8001920:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001922:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001928:	2312      	movs	r3, #18
 800192a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800192c:	2301      	movs	r3, #1
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001930:	2303      	movs	r3, #3
 8001932:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001934:	2304      	movs	r3, #4
 8001936:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001938:	f107 031c 	add.w	r3, r7, #28
 800193c:	4619      	mov	r1, r3
 800193e:	4823      	ldr	r0, [pc, #140]	; (80019cc <HAL_I2C_MspInit+0xe4>)
 8001940:	f000 fd80 	bl	8002444 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001944:	4b20      	ldr	r3, [pc, #128]	; (80019c8 <HAL_I2C_MspInit+0xe0>)
 8001946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001948:	4a1f      	ldr	r2, [pc, #124]	; (80019c8 <HAL_I2C_MspInit+0xe0>)
 800194a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800194e:	6593      	str	r3, [r2, #88]	; 0x58
 8001950:	4b1d      	ldr	r3, [pc, #116]	; (80019c8 <HAL_I2C_MspInit+0xe0>)
 8001952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001958:	617b      	str	r3, [r7, #20]
 800195a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800195c:	e02d      	b.n	80019ba <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C2)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a1b      	ldr	r2, [pc, #108]	; (80019d0 <HAL_I2C_MspInit+0xe8>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d128      	bne.n	80019ba <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001968:	4b17      	ldr	r3, [pc, #92]	; (80019c8 <HAL_I2C_MspInit+0xe0>)
 800196a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196c:	4a16      	ldr	r2, [pc, #88]	; (80019c8 <HAL_I2C_MspInit+0xe0>)
 800196e:	f043 0302 	orr.w	r3, r3, #2
 8001972:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001974:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <HAL_I2C_MspInit+0xe0>)
 8001976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001980:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001986:	2312      	movs	r3, #18
 8001988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800198a:	2301      	movs	r3, #1
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198e:	2303      	movs	r3, #3
 8001990:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001992:	2304      	movs	r3, #4
 8001994:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001996:	f107 031c 	add.w	r3, r7, #28
 800199a:	4619      	mov	r1, r3
 800199c:	480b      	ldr	r0, [pc, #44]	; (80019cc <HAL_I2C_MspInit+0xe4>)
 800199e:	f000 fd51 	bl	8002444 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <HAL_I2C_MspInit+0xe0>)
 80019a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a6:	4a08      	ldr	r2, [pc, #32]	; (80019c8 <HAL_I2C_MspInit+0xe0>)
 80019a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019ac:	6593      	str	r3, [r2, #88]	; 0x58
 80019ae:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <HAL_I2C_MspInit+0xe0>)
 80019b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
}
 80019ba:	bf00      	nop
 80019bc:	3730      	adds	r7, #48	; 0x30
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40005400 	.word	0x40005400
 80019c8:	40021000 	.word	0x40021000
 80019cc:	48000400 	.word	0x48000400
 80019d0:	40005800 	.word	0x40005800

080019d4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08a      	sub	sp, #40	; 0x28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a17      	ldr	r2, [pc, #92]	; (8001a50 <HAL_QSPI_MspInit+0x7c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d128      	bne.n	8001a48 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80019f6:	4b17      	ldr	r3, [pc, #92]	; (8001a54 <HAL_QSPI_MspInit+0x80>)
 80019f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019fa:	4a16      	ldr	r2, [pc, #88]	; (8001a54 <HAL_QSPI_MspInit+0x80>)
 80019fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a00:	6513      	str	r3, [r2, #80]	; 0x50
 8001a02:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <HAL_QSPI_MspInit+0x80>)
 8001a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a0e:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <HAL_QSPI_MspInit+0x80>)
 8001a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a12:	4a10      	ldr	r2, [pc, #64]	; (8001a54 <HAL_QSPI_MspInit+0x80>)
 8001a14:	f043 0310 	orr.w	r3, r3, #16
 8001a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <HAL_QSPI_MspInit+0x80>)
 8001a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1e:	f003 0310 	and.w	r3, r3, #16
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001a26:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001a2a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a34:	2303      	movs	r3, #3
 8001a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001a38:	230a      	movs	r3, #10
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	4619      	mov	r1, r3
 8001a42:	4805      	ldr	r0, [pc, #20]	; (8001a58 <HAL_QSPI_MspInit+0x84>)
 8001a44:	f000 fcfe 	bl	8002444 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001a48:	bf00      	nop
 8001a4a:	3728      	adds	r7, #40	; 0x28
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	a0001000 	.word	0xa0001000
 8001a54:	40021000 	.word	0x40021000
 8001a58:	48001000 	.word	0x48001000

08001a5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08a      	sub	sp, #40	; 0x28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	f107 0314 	add.w	r3, r7, #20
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a17      	ldr	r2, [pc, #92]	; (8001ad8 <HAL_SPI_MspInit+0x7c>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d128      	bne.n	8001ad0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a7e:	4b17      	ldr	r3, [pc, #92]	; (8001adc <HAL_SPI_MspInit+0x80>)
 8001a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a82:	4a16      	ldr	r2, [pc, #88]	; (8001adc <HAL_SPI_MspInit+0x80>)
 8001a84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a88:	6593      	str	r3, [r2, #88]	; 0x58
 8001a8a:	4b14      	ldr	r3, [pc, #80]	; (8001adc <HAL_SPI_MspInit+0x80>)
 8001a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a96:	4b11      	ldr	r3, [pc, #68]	; (8001adc <HAL_SPI_MspInit+0x80>)
 8001a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9a:	4a10      	ldr	r2, [pc, #64]	; (8001adc <HAL_SPI_MspInit+0x80>)
 8001a9c:	f043 0304 	orr.w	r3, r3, #4
 8001aa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <HAL_SPI_MspInit+0x80>)
 8001aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa6:	f003 0304 	and.w	r3, r3, #4
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001aae:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001abc:	2303      	movs	r3, #3
 8001abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ac0:	2306      	movs	r3, #6
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <HAL_SPI_MspInit+0x84>)
 8001acc:	f000 fcba 	bl	8002444 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001ad0:	bf00      	nop
 8001ad2:	3728      	adds	r7, #40	; 0x28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40003c00 	.word	0x40003c00
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	48000800 	.word	0x48000800

08001ae4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08e      	sub	sp, #56	; 0x38
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a46      	ldr	r2, [pc, #280]	; (8001c1c <HAL_UART_MspInit+0x138>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d129      	bne.n	8001b5a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001b06:	4b46      	ldr	r3, [pc, #280]	; (8001c20 <HAL_UART_MspInit+0x13c>)
 8001b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0a:	4a45      	ldr	r2, [pc, #276]	; (8001c20 <HAL_UART_MspInit+0x13c>)
 8001b0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b10:	6593      	str	r3, [r2, #88]	; 0x58
 8001b12:	4b43      	ldr	r3, [pc, #268]	; (8001c20 <HAL_UART_MspInit+0x13c>)
 8001b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b1a:	623b      	str	r3, [r7, #32]
 8001b1c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1e:	4b40      	ldr	r3, [pc, #256]	; (8001c20 <HAL_UART_MspInit+0x13c>)
 8001b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b22:	4a3f      	ldr	r2, [pc, #252]	; (8001c20 <HAL_UART_MspInit+0x13c>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b2a:	4b3d      	ldr	r3, [pc, #244]	; (8001c20 <HAL_UART_MspInit+0x13c>)
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	61fb      	str	r3, [r7, #28]
 8001b34:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001b36:	2303      	movs	r3, #3
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b42:	2303      	movs	r3, #3
 8001b44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001b46:	2308      	movs	r3, #8
 8001b48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b4e:	4619      	mov	r1, r3
 8001b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b54:	f000 fc76 	bl	8002444 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b58:	e05b      	b.n	8001c12 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART1)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a31      	ldr	r2, [pc, #196]	; (8001c24 <HAL_UART_MspInit+0x140>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d128      	bne.n	8001bb6 <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b64:	4b2e      	ldr	r3, [pc, #184]	; (8001c20 <HAL_UART_MspInit+0x13c>)
 8001b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b68:	4a2d      	ldr	r2, [pc, #180]	; (8001c20 <HAL_UART_MspInit+0x13c>)
 8001b6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b6e:	6613      	str	r3, [r2, #96]	; 0x60
 8001b70:	4b2b      	ldr	r3, [pc, #172]	; (8001c20 <HAL_UART_MspInit+0x13c>)
 8001b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b78:	61bb      	str	r3, [r7, #24]
 8001b7a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7c:	4b28      	ldr	r3, [pc, #160]	; (8001c20 <HAL_UART_MspInit+0x13c>)
 8001b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b80:	4a27      	ldr	r2, [pc, #156]	; (8001c20 <HAL_UART_MspInit+0x13c>)
 8001b82:	f043 0302 	orr.w	r3, r3, #2
 8001b86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b88:	4b25      	ldr	r3, [pc, #148]	; (8001c20 <HAL_UART_MspInit+0x13c>)
 8001b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001b94:	23c0      	movs	r3, #192	; 0xc0
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ba4:	2307      	movs	r3, #7
 8001ba6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bac:	4619      	mov	r1, r3
 8001bae:	481e      	ldr	r0, [pc, #120]	; (8001c28 <HAL_UART_MspInit+0x144>)
 8001bb0:	f000 fc48 	bl	8002444 <HAL_GPIO_Init>
}
 8001bb4:	e02d      	b.n	8001c12 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART3)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a1c      	ldr	r2, [pc, #112]	; (8001c2c <HAL_UART_MspInit+0x148>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d128      	bne.n	8001c12 <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bc0:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <HAL_UART_MspInit+0x13c>)
 8001bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc4:	4a16      	ldr	r2, [pc, #88]	; (8001c20 <HAL_UART_MspInit+0x13c>)
 8001bc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bca:	6593      	str	r3, [r2, #88]	; 0x58
 8001bcc:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <HAL_UART_MspInit+0x13c>)
 8001bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bd8:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <HAL_UART_MspInit+0x13c>)
 8001bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bdc:	4a10      	ldr	r2, [pc, #64]	; (8001c20 <HAL_UART_MspInit+0x13c>)
 8001bde:	f043 0308 	orr.w	r3, r3, #8
 8001be2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001be4:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <HAL_UART_MspInit+0x13c>)
 8001be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be8:	f003 0308 	and.w	r3, r3, #8
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001bf0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c02:	2307      	movs	r3, #7
 8001c04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4808      	ldr	r0, [pc, #32]	; (8001c30 <HAL_UART_MspInit+0x14c>)
 8001c0e:	f000 fc19 	bl	8002444 <HAL_GPIO_Init>
}
 8001c12:	bf00      	nop
 8001c14:	3738      	adds	r7, #56	; 0x38
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40004c00 	.word	0x40004c00
 8001c20:	40021000 	.word	0x40021000
 8001c24:	40013800 	.word	0x40013800
 8001c28:	48000400 	.word	0x48000400
 8001c2c:	40004800 	.word	0x40004800
 8001c30:	48000c00 	.word	0x48000c00

08001c34 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	; 0x28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c54:	d154      	bne.n	8001d00 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c56:	4b2c      	ldr	r3, [pc, #176]	; (8001d08 <HAL_PCD_MspInit+0xd4>)
 8001c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5a:	4a2b      	ldr	r2, [pc, #172]	; (8001d08 <HAL_PCD_MspInit+0xd4>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c62:	4b29      	ldr	r3, [pc, #164]	; (8001d08 <HAL_PCD_MspInit+0xd4>)
 8001c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001c6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	4619      	mov	r1, r3
 8001c82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c86:	f000 fbdd 	bl	8002444 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001c8a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c90:	2302      	movs	r3, #2
 8001c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c9c:	230a      	movs	r3, #10
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca0:	f107 0314 	add.w	r3, r7, #20
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001caa:	f000 fbcb 	bl	8002444 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001cae:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <HAL_PCD_MspInit+0xd4>)
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb2:	4a15      	ldr	r2, [pc, #84]	; (8001d08 <HAL_PCD_MspInit+0xd4>)
 8001cb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cba:	4b13      	ldr	r3, [pc, #76]	; (8001d08 <HAL_PCD_MspInit+0xd4>)
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cc6:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <HAL_PCD_MspInit+0xd4>)
 8001cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d114      	bne.n	8001cfc <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <HAL_PCD_MspInit+0xd4>)
 8001cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd6:	4a0c      	ldr	r2, [pc, #48]	; (8001d08 <HAL_PCD_MspInit+0xd4>)
 8001cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cdc:	6593      	str	r3, [r2, #88]	; 0x58
 8001cde:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <HAL_PCD_MspInit+0xd4>)
 8001ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	60bb      	str	r3, [r7, #8]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001cea:	f001 fc57 	bl	800359c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cee:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <HAL_PCD_MspInit+0xd4>)
 8001cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf2:	4a05      	ldr	r2, [pc, #20]	; (8001d08 <HAL_PCD_MspInit+0xd4>)
 8001cf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cf8:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001cfa:	e001      	b.n	8001d00 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8001cfc:	f001 fc4e 	bl	800359c <HAL_PWREx_EnableVddUSB>
}
 8001d00:	bf00      	nop
 8001d02:	3728      	adds	r7, #40	; 0x28
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40021000 	.word	0x40021000

08001d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d10:	e7fe      	b.n	8001d10 <NMI_Handler+0x4>

08001d12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d16:	e7fe      	b.n	8001d16 <HardFault_Handler+0x4>

08001d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d1c:	e7fe      	b.n	8001d1c <MemManage_Handler+0x4>

08001d1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d22:	e7fe      	b.n	8001d22 <BusFault_Handler+0x4>

08001d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d28:	e7fe      	b.n	8001d28 <UsageFault_Handler+0x4>

08001d2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d58:	f000 f912 	bl	8001f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001d64:	2020      	movs	r0, #32
 8001d66:	f000 fd49 	bl	80027fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001d6a:	2040      	movs	r0, #64	; 0x40
 8001d6c:	f000 fd46 	bl	80027fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001d70:	2080      	movs	r0, #128	; 0x80
 8001d72:	f000 fd43 	bl	80027fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001d76:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001d7a:	f000 fd3f 	bl	80027fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001d86:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001d8a:	f000 fd37 	bl	80027fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001d8e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001d92:	f000 fd33 	bl	80027fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001d96:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d9a:	f000 fd2f 	bl	80027fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001d9e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001da2:	f000 fd2b 	bl	80027fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001da6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001daa:	f000 fd27 	bl	80027fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
	...

08001db4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dbc:	4a14      	ldr	r2, [pc, #80]	; (8001e10 <_sbrk+0x5c>)
 8001dbe:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <_sbrk+0x60>)
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dc8:	4b13      	ldr	r3, [pc, #76]	; (8001e18 <_sbrk+0x64>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d102      	bne.n	8001dd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dd0:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <_sbrk+0x64>)
 8001dd2:	4a12      	ldr	r2, [pc, #72]	; (8001e1c <_sbrk+0x68>)
 8001dd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dd6:	4b10      	ldr	r3, [pc, #64]	; (8001e18 <_sbrk+0x64>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d207      	bcs.n	8001df4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001de4:	f004 f80e 	bl	8005e04 <__errno>
 8001de8:	4603      	mov	r3, r0
 8001dea:	220c      	movs	r2, #12
 8001dec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dee:	f04f 33ff 	mov.w	r3, #4294967295
 8001df2:	e009      	b.n	8001e08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001df4:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <_sbrk+0x64>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dfa:	4b07      	ldr	r3, [pc, #28]	; (8001e18 <_sbrk+0x64>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4413      	add	r3, r2
 8001e02:	4a05      	ldr	r2, [pc, #20]	; (8001e18 <_sbrk+0x64>)
 8001e04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e06:	68fb      	ldr	r3, [r7, #12]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3718      	adds	r7, #24
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20018000 	.word	0x20018000
 8001e14:	00000400 	.word	0x00000400
 8001e18:	20000090 	.word	0x20000090
 8001e1c:	200007f8 	.word	0x200007f8

08001e20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e24:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <SystemInit+0x5c>)
 8001e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e2a:	4a14      	ldr	r2, [pc, #80]	; (8001e7c <SystemInit+0x5c>)
 8001e2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001e34:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <SystemInit+0x60>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a11      	ldr	r2, [pc, #68]	; (8001e80 <SystemInit+0x60>)
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001e40:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <SystemInit+0x60>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001e46:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <SystemInit+0x60>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a0d      	ldr	r2, [pc, #52]	; (8001e80 <SystemInit+0x60>)
 8001e4c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001e50:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001e54:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001e56:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <SystemInit+0x60>)
 8001e58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e5c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e5e:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <SystemInit+0x60>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a07      	ldr	r2, [pc, #28]	; (8001e80 <SystemInit+0x60>)
 8001e64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e68:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001e6a:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <SystemInit+0x60>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	619a      	str	r2, [r3, #24]
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	e000ed00 	.word	0xe000ed00
 8001e80:	40021000 	.word	0x40021000

08001e84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ebc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e88:	f7ff ffca 	bl	8001e20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001e8c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001e8e:	e003      	b.n	8001e98 <LoopCopyDataInit>

08001e90 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001e90:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001e92:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001e94:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001e96:	3104      	adds	r1, #4

08001e98 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001e98:	480a      	ldr	r0, [pc, #40]	; (8001ec4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001e9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001e9c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001e9e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001ea0:	d3f6      	bcc.n	8001e90 <CopyDataInit>
	ldr	r2, =_sbss
 8001ea2:	4a0a      	ldr	r2, [pc, #40]	; (8001ecc <LoopForever+0x12>)
	b	LoopFillZerobss
 8001ea4:	e002      	b.n	8001eac <LoopFillZerobss>

08001ea6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001ea6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001ea8:	f842 3b04 	str.w	r3, [r2], #4

08001eac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001eac:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <LoopForever+0x16>)
	cmp	r2, r3
 8001eae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001eb0:	d3f9      	bcc.n	8001ea6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eb2:	f003 ffad 	bl	8005e10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001eb6:	f7fe ffe7 	bl	8000e88 <main>

08001eba <LoopForever>:

LoopForever:
    b LoopForever
 8001eba:	e7fe      	b.n	8001eba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ebc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001ec0:	08006978 	.word	0x08006978
	ldr	r0, =_sdata
 8001ec4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001ec8:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001ecc:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001ed0:	200007f8 	.word	0x200007f8

08001ed4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ed4:	e7fe      	b.n	8001ed4 <ADC1_2_IRQHandler>

08001ed6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001edc:	2300      	movs	r3, #0
 8001ede:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee0:	2003      	movs	r0, #3
 8001ee2:	f000 f961 	bl	80021a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f000 f80e 	bl	8001f08 <HAL_InitTick>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d002      	beq.n	8001ef8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	71fb      	strb	r3, [r7, #7]
 8001ef6:	e001      	b.n	8001efc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ef8:	f7ff fc8a 	bl	8001810 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001efc:	79fb      	ldrb	r3, [r7, #7]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f10:	2300      	movs	r3, #0
 8001f12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f14:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <HAL_InitTick+0x6c>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d023      	beq.n	8001f64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f1c:	4b16      	ldr	r3, [pc, #88]	; (8001f78 <HAL_InitTick+0x70>)
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <HAL_InitTick+0x6c>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	4619      	mov	r1, r3
 8001f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f32:	4618      	mov	r0, r3
 8001f34:	f000 f96d 	bl	8002212 <HAL_SYSTICK_Config>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10f      	bne.n	8001f5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b0f      	cmp	r3, #15
 8001f42:	d809      	bhi.n	8001f58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f44:	2200      	movs	r2, #0
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	f04f 30ff 	mov.w	r0, #4294967295
 8001f4c:	f000 f937 	bl	80021be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f50:	4a0a      	ldr	r2, [pc, #40]	; (8001f7c <HAL_InitTick+0x74>)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	e007      	b.n	8001f68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	73fb      	strb	r3, [r7, #15]
 8001f5c:	e004      	b.n	8001f68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	73fb      	strb	r3, [r7, #15]
 8001f62:	e001      	b.n	8001f68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000008 	.word	0x20000008
 8001f78:	20000000 	.word	0x20000000
 8001f7c:	20000004 	.word	0x20000004

08001f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_IncTick+0x20>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <HAL_IncTick+0x24>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4413      	add	r3, r2
 8001f90:	4a04      	ldr	r2, [pc, #16]	; (8001fa4 <HAL_IncTick+0x24>)
 8001f92:	6013      	str	r3, [r2, #0]
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	20000008 	.word	0x20000008
 8001fa4:	200007e4 	.word	0x200007e4

08001fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return uwTick;
 8001fac:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <HAL_GetTick+0x14>)
 8001fae:	681b      	ldr	r3, [r3, #0]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	200007e4 	.word	0x200007e4

08001fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fc8:	f7ff ffee 	bl	8001fa8 <HAL_GetTick>
 8001fcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd8:	d005      	beq.n	8001fe6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001fda:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <HAL_Delay+0x44>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fe6:	bf00      	nop
 8001fe8:	f7ff ffde 	bl	8001fa8 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d8f7      	bhi.n	8001fe8 <HAL_Delay+0x28>
  {
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000008 	.word	0x20000008

08002008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002018:	4b0c      	ldr	r3, [pc, #48]	; (800204c <__NVIC_SetPriorityGrouping+0x44>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002024:	4013      	ands	r3, r2
 8002026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002030:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800203a:	4a04      	ldr	r2, [pc, #16]	; (800204c <__NVIC_SetPriorityGrouping+0x44>)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	60d3      	str	r3, [r2, #12]
}
 8002040:	bf00      	nop
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002054:	4b04      	ldr	r3, [pc, #16]	; (8002068 <__NVIC_GetPriorityGrouping+0x18>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	0a1b      	lsrs	r3, r3, #8
 800205a:	f003 0307 	and.w	r3, r3, #7
}
 800205e:	4618      	mov	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207a:	2b00      	cmp	r3, #0
 800207c:	db0b      	blt.n	8002096 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	f003 021f 	and.w	r2, r3, #31
 8002084:	4907      	ldr	r1, [pc, #28]	; (80020a4 <__NVIC_EnableIRQ+0x38>)
 8002086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208a:	095b      	lsrs	r3, r3, #5
 800208c:	2001      	movs	r0, #1
 800208e:	fa00 f202 	lsl.w	r2, r0, r2
 8002092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	e000e100 	.word	0xe000e100

080020a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	6039      	str	r1, [r7, #0]
 80020b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	db0a      	blt.n	80020d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	490c      	ldr	r1, [pc, #48]	; (80020f4 <__NVIC_SetPriority+0x4c>)
 80020c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c6:	0112      	lsls	r2, r2, #4
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	440b      	add	r3, r1
 80020cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d0:	e00a      	b.n	80020e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	4908      	ldr	r1, [pc, #32]	; (80020f8 <__NVIC_SetPriority+0x50>)
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	3b04      	subs	r3, #4
 80020e0:	0112      	lsls	r2, r2, #4
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	440b      	add	r3, r1
 80020e6:	761a      	strb	r2, [r3, #24]
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	e000e100 	.word	0xe000e100
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b089      	sub	sp, #36	; 0x24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f1c3 0307 	rsb	r3, r3, #7
 8002116:	2b04      	cmp	r3, #4
 8002118:	bf28      	it	cs
 800211a:	2304      	movcs	r3, #4
 800211c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3304      	adds	r3, #4
 8002122:	2b06      	cmp	r3, #6
 8002124:	d902      	bls.n	800212c <NVIC_EncodePriority+0x30>
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3b03      	subs	r3, #3
 800212a:	e000      	b.n	800212e <NVIC_EncodePriority+0x32>
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	f04f 32ff 	mov.w	r2, #4294967295
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43da      	mvns	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	401a      	ands	r2, r3
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002144:	f04f 31ff 	mov.w	r1, #4294967295
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	fa01 f303 	lsl.w	r3, r1, r3
 800214e:	43d9      	mvns	r1, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002154:	4313      	orrs	r3, r2
         );
}
 8002156:	4618      	mov	r0, r3
 8002158:	3724      	adds	r7, #36	; 0x24
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
	...

08002164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3b01      	subs	r3, #1
 8002170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002174:	d301      	bcc.n	800217a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002176:	2301      	movs	r3, #1
 8002178:	e00f      	b.n	800219a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800217a:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <SysTick_Config+0x40>)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3b01      	subs	r3, #1
 8002180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002182:	210f      	movs	r1, #15
 8002184:	f04f 30ff 	mov.w	r0, #4294967295
 8002188:	f7ff ff8e 	bl	80020a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800218c:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <SysTick_Config+0x40>)
 800218e:	2200      	movs	r2, #0
 8002190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002192:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <SysTick_Config+0x40>)
 8002194:	2207      	movs	r2, #7
 8002196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	e000e010 	.word	0xe000e010

080021a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7ff ff29 	bl	8002008 <__NVIC_SetPriorityGrouping>
}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b086      	sub	sp, #24
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	4603      	mov	r3, r0
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
 80021ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021d0:	f7ff ff3e 	bl	8002050 <__NVIC_GetPriorityGrouping>
 80021d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	68b9      	ldr	r1, [r7, #8]
 80021da:	6978      	ldr	r0, [r7, #20]
 80021dc:	f7ff ff8e 	bl	80020fc <NVIC_EncodePriority>
 80021e0:	4602      	mov	r2, r0
 80021e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e6:	4611      	mov	r1, r2
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ff5d 	bl	80020a8 <__NVIC_SetPriority>
}
 80021ee:	bf00      	nop
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	4603      	mov	r3, r0
 80021fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ff31 	bl	800206c <__NVIC_EnableIRQ>
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff ffa2 	bl	8002164 <SysTick_Config>
 8002220:	4603      	mov	r3, r0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
	...

0800222c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e0ac      	b.n	8002398 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f000 f8b2 	bl	80023ac <DFSDM_GetChannelFromInstance>
 8002248:	4603      	mov	r3, r0
 800224a:	4a55      	ldr	r2, [pc, #340]	; (80023a0 <HAL_DFSDM_ChannelInit+0x174>)
 800224c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e09f      	b.n	8002398 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f7ff fafd 	bl	8001858 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800225e:	4b51      	ldr	r3, [pc, #324]	; (80023a4 <HAL_DFSDM_ChannelInit+0x178>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	3301      	adds	r3, #1
 8002264:	4a4f      	ldr	r2, [pc, #316]	; (80023a4 <HAL_DFSDM_ChannelInit+0x178>)
 8002266:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002268:	4b4e      	ldr	r3, [pc, #312]	; (80023a4 <HAL_DFSDM_ChannelInit+0x178>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d125      	bne.n	80022bc <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002270:	4b4d      	ldr	r3, [pc, #308]	; (80023a8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a4c      	ldr	r2, [pc, #304]	; (80023a8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002276:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800227a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800227c:	4b4a      	ldr	r3, [pc, #296]	; (80023a8 <HAL_DFSDM_ChannelInit+0x17c>)
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	4948      	ldr	r1, [pc, #288]	; (80023a8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002286:	4313      	orrs	r3, r2
 8002288:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800228a:	4b47      	ldr	r3, [pc, #284]	; (80023a8 <HAL_DFSDM_ChannelInit+0x17c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a46      	ldr	r2, [pc, #280]	; (80023a8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002290:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002294:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	791b      	ldrb	r3, [r3, #4]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d108      	bne.n	80022b0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800229e:	4b42      	ldr	r3, [pc, #264]	; (80023a8 <HAL_DFSDM_ChannelInit+0x17c>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	041b      	lsls	r3, r3, #16
 80022aa:	493f      	ldr	r1, [pc, #252]	; (80023a8 <HAL_DFSDM_ChannelInit+0x17c>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80022b0:	4b3d      	ldr	r3, [pc, #244]	; (80023a8 <HAL_DFSDM_ChannelInit+0x17c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a3c      	ldr	r2, [pc, #240]	; (80023a8 <HAL_DFSDM_ChannelInit+0x17c>)
 80022b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022ba:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80022ca:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6819      	ldr	r1, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80022da:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80022e0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 020f 	bic.w	r2, r2, #15
 80022f8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6819      	ldr	r1, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002308:	431a      	orrs	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	430a      	orrs	r2, r1
 8002310:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002320:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6899      	ldr	r1, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002330:	3b01      	subs	r3, #1
 8002332:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002334:	431a      	orrs	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	430a      	orrs	r2, r1
 800233c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f002 0207 	and.w	r2, r2, #7
 800234c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6859      	ldr	r1, [r3, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002358:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002360:	431a      	orrs	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002378:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f000 f810 	bl	80023ac <DFSDM_GetChannelFromInstance>
 800238c:	4602      	mov	r2, r0
 800238e:	4904      	ldr	r1, [pc, #16]	; (80023a0 <HAL_DFSDM_ChannelInit+0x174>)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	20000098 	.word	0x20000098
 80023a4:	20000094 	.word	0x20000094
 80023a8:	40016000 	.word	0x40016000

080023ac <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a1c      	ldr	r2, [pc, #112]	; (8002428 <DFSDM_GetChannelFromInstance+0x7c>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d102      	bne.n	80023c2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	e02b      	b.n	800241a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a19      	ldr	r2, [pc, #100]	; (800242c <DFSDM_GetChannelFromInstance+0x80>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d102      	bne.n	80023d0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80023ca:	2301      	movs	r3, #1
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	e024      	b.n	800241a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a17      	ldr	r2, [pc, #92]	; (8002430 <DFSDM_GetChannelFromInstance+0x84>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d102      	bne.n	80023de <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80023d8:	2302      	movs	r3, #2
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	e01d      	b.n	800241a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a14      	ldr	r2, [pc, #80]	; (8002434 <DFSDM_GetChannelFromInstance+0x88>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d102      	bne.n	80023ec <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80023e6:	2304      	movs	r3, #4
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	e016      	b.n	800241a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a12      	ldr	r2, [pc, #72]	; (8002438 <DFSDM_GetChannelFromInstance+0x8c>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d102      	bne.n	80023fa <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80023f4:	2305      	movs	r3, #5
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	e00f      	b.n	800241a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a0f      	ldr	r2, [pc, #60]	; (800243c <DFSDM_GetChannelFromInstance+0x90>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d102      	bne.n	8002408 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002402:	2306      	movs	r3, #6
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	e008      	b.n	800241a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a0d      	ldr	r2, [pc, #52]	; (8002440 <DFSDM_GetChannelFromInstance+0x94>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d102      	bne.n	8002416 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002410:	2307      	movs	r3, #7
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	e001      	b.n	800241a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002416:	2303      	movs	r3, #3
 8002418:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800241a:	68fb      	ldr	r3, [r7, #12]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	40016000 	.word	0x40016000
 800242c:	40016020 	.word	0x40016020
 8002430:	40016040 	.word	0x40016040
 8002434:	40016080 	.word	0x40016080
 8002438:	400160a0 	.word	0x400160a0
 800243c:	400160c0 	.word	0x400160c0
 8002440:	400160e0 	.word	0x400160e0

08002444 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002444:	b480      	push	{r7}
 8002446:	b087      	sub	sp, #28
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002452:	e17f      	b.n	8002754 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	2101      	movs	r1, #1
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	fa01 f303 	lsl.w	r3, r1, r3
 8002460:	4013      	ands	r3, r2
 8002462:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2b00      	cmp	r3, #0
 8002468:	f000 8171 	beq.w	800274e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d00b      	beq.n	800248c <HAL_GPIO_Init+0x48>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b02      	cmp	r3, #2
 800247a:	d007      	beq.n	800248c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002480:	2b11      	cmp	r3, #17
 8002482:	d003      	beq.n	800248c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b12      	cmp	r3, #18
 800248a:	d130      	bne.n	80024ee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	2203      	movs	r2, #3
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	4013      	ands	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	68da      	ldr	r2, [r3, #12]
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024c2:	2201      	movs	r2, #1
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43db      	mvns	r3, r3
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4013      	ands	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	091b      	lsrs	r3, r3, #4
 80024d8:	f003 0201 	and.w	r2, r3, #1
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	2b03      	cmp	r3, #3
 80024f8:	d118      	bne.n	800252c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002500:	2201      	movs	r2, #1
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4013      	ands	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	08db      	lsrs	r3, r3, #3
 8002516:	f003 0201 	and.w	r2, r3, #1
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	2203      	movs	r2, #3
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	4013      	ands	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2b02      	cmp	r3, #2
 8002562:	d003      	beq.n	800256c <HAL_GPIO_Init+0x128>
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b12      	cmp	r3, #18
 800256a:	d123      	bne.n	80025b4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	08da      	lsrs	r2, r3, #3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3208      	adds	r2, #8
 8002574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002578:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	220f      	movs	r2, #15
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	4013      	ands	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	691a      	ldr	r2, [r3, #16]
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	08da      	lsrs	r2, r3, #3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3208      	adds	r2, #8
 80025ae:	6939      	ldr	r1, [r7, #16]
 80025b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	2203      	movs	r2, #3
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	43db      	mvns	r3, r3
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	4013      	ands	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 0203 	and.w	r2, r3, #3
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	4313      	orrs	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 80ac 	beq.w	800274e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025f6:	4b5f      	ldr	r3, [pc, #380]	; (8002774 <HAL_GPIO_Init+0x330>)
 80025f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025fa:	4a5e      	ldr	r2, [pc, #376]	; (8002774 <HAL_GPIO_Init+0x330>)
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	6613      	str	r3, [r2, #96]	; 0x60
 8002602:	4b5c      	ldr	r3, [pc, #368]	; (8002774 <HAL_GPIO_Init+0x330>)
 8002604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	60bb      	str	r3, [r7, #8]
 800260c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800260e:	4a5a      	ldr	r2, [pc, #360]	; (8002778 <HAL_GPIO_Init+0x334>)
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	089b      	lsrs	r3, r3, #2
 8002614:	3302      	adds	r3, #2
 8002616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800261a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	220f      	movs	r2, #15
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43db      	mvns	r3, r3
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	4013      	ands	r3, r2
 8002630:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002638:	d025      	beq.n	8002686 <HAL_GPIO_Init+0x242>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a4f      	ldr	r2, [pc, #316]	; (800277c <HAL_GPIO_Init+0x338>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d01f      	beq.n	8002682 <HAL_GPIO_Init+0x23e>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a4e      	ldr	r2, [pc, #312]	; (8002780 <HAL_GPIO_Init+0x33c>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d019      	beq.n	800267e <HAL_GPIO_Init+0x23a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a4d      	ldr	r2, [pc, #308]	; (8002784 <HAL_GPIO_Init+0x340>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d013      	beq.n	800267a <HAL_GPIO_Init+0x236>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a4c      	ldr	r2, [pc, #304]	; (8002788 <HAL_GPIO_Init+0x344>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d00d      	beq.n	8002676 <HAL_GPIO_Init+0x232>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a4b      	ldr	r2, [pc, #300]	; (800278c <HAL_GPIO_Init+0x348>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d007      	beq.n	8002672 <HAL_GPIO_Init+0x22e>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a4a      	ldr	r2, [pc, #296]	; (8002790 <HAL_GPIO_Init+0x34c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d101      	bne.n	800266e <HAL_GPIO_Init+0x22a>
 800266a:	2306      	movs	r3, #6
 800266c:	e00c      	b.n	8002688 <HAL_GPIO_Init+0x244>
 800266e:	2307      	movs	r3, #7
 8002670:	e00a      	b.n	8002688 <HAL_GPIO_Init+0x244>
 8002672:	2305      	movs	r3, #5
 8002674:	e008      	b.n	8002688 <HAL_GPIO_Init+0x244>
 8002676:	2304      	movs	r3, #4
 8002678:	e006      	b.n	8002688 <HAL_GPIO_Init+0x244>
 800267a:	2303      	movs	r3, #3
 800267c:	e004      	b.n	8002688 <HAL_GPIO_Init+0x244>
 800267e:	2302      	movs	r3, #2
 8002680:	e002      	b.n	8002688 <HAL_GPIO_Init+0x244>
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <HAL_GPIO_Init+0x244>
 8002686:	2300      	movs	r3, #0
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	f002 0203 	and.w	r2, r2, #3
 800268e:	0092      	lsls	r2, r2, #2
 8002690:	4093      	lsls	r3, r2
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	4313      	orrs	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002698:	4937      	ldr	r1, [pc, #220]	; (8002778 <HAL_GPIO_Init+0x334>)
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	089b      	lsrs	r3, r3, #2
 800269e:	3302      	adds	r3, #2
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80026a6:	4b3b      	ldr	r3, [pc, #236]	; (8002794 <HAL_GPIO_Init+0x350>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	43db      	mvns	r3, r3
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	4013      	ands	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026ca:	4a32      	ldr	r2, [pc, #200]	; (8002794 <HAL_GPIO_Init+0x350>)
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80026d0:	4b30      	ldr	r3, [pc, #192]	; (8002794 <HAL_GPIO_Init+0x350>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	43db      	mvns	r3, r3
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4013      	ands	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026f4:	4a27      	ldr	r2, [pc, #156]	; (8002794 <HAL_GPIO_Init+0x350>)
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026fa:	4b26      	ldr	r3, [pc, #152]	; (8002794 <HAL_GPIO_Init+0x350>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	43db      	mvns	r3, r3
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	4013      	ands	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4313      	orrs	r3, r2
 800271c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800271e:	4a1d      	ldr	r2, [pc, #116]	; (8002794 <HAL_GPIO_Init+0x350>)
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002724:	4b1b      	ldr	r3, [pc, #108]	; (8002794 <HAL_GPIO_Init+0x350>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	43db      	mvns	r3, r3
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	4013      	ands	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	4313      	orrs	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002748:	4a12      	ldr	r2, [pc, #72]	; (8002794 <HAL_GPIO_Init+0x350>)
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	3301      	adds	r3, #1
 8002752:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	fa22 f303 	lsr.w	r3, r2, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	f47f ae78 	bne.w	8002454 <HAL_GPIO_Init+0x10>
  }
}
 8002764:	bf00      	nop
 8002766:	bf00      	nop
 8002768:	371c      	adds	r7, #28
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40021000 	.word	0x40021000
 8002778:	40010000 	.word	0x40010000
 800277c:	48000400 	.word	0x48000400
 8002780:	48000800 	.word	0x48000800
 8002784:	48000c00 	.word	0x48000c00
 8002788:	48001000 	.word	0x48001000
 800278c:	48001400 	.word	0x48001400
 8002790:	48001800 	.word	0x48001800
 8002794:	40010400 	.word	0x40010400

08002798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	460b      	mov	r3, r1
 80027a2:	807b      	strh	r3, [r7, #2]
 80027a4:	4613      	mov	r3, r2
 80027a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027a8:	787b      	ldrb	r3, [r7, #1]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027ae:	887a      	ldrh	r2, [r7, #2]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027b4:	e002      	b.n	80027bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027b6:	887a      	ldrh	r2, [r7, #2]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	460b      	mov	r3, r1
 80027d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027da:	887a      	ldrh	r2, [r7, #2]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4013      	ands	r3, r2
 80027e0:	041a      	lsls	r2, r3, #16
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	43d9      	mvns	r1, r3
 80027e6:	887b      	ldrh	r3, [r7, #2]
 80027e8:	400b      	ands	r3, r1
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	619a      	str	r2, [r3, #24]
}
 80027f0:	bf00      	nop
 80027f2:	3714      	adds	r7, #20
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002806:	4b08      	ldr	r3, [pc, #32]	; (8002828 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002808:	695a      	ldr	r2, [r3, #20]
 800280a:	88fb      	ldrh	r3, [r7, #6]
 800280c:	4013      	ands	r3, r2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d006      	beq.n	8002820 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002812:	4a05      	ldr	r2, [pc, #20]	; (8002828 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002814:	88fb      	ldrh	r3, [r7, #6]
 8002816:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002818:	88fb      	ldrh	r3, [r7, #6]
 800281a:	4618      	mov	r0, r3
 800281c:	f000 f806 	bl	800282c <HAL_GPIO_EXTI_Callback>
  }
}
 8002820:	bf00      	nop
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40010400 	.word	0x40010400

0800282c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b082      	sub	sp, #8
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e081      	b.n	8002958 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	d106      	bne.n	800286e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f7ff f83d 	bl	80018e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2224      	movs	r2, #36	; 0x24
 8002872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0201 	bic.w	r2, r2, #1
 8002884:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002892:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028a2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d107      	bne.n	80028bc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028b8:	609a      	str	r2, [r3, #8]
 80028ba:	e006      	b.n	80028ca <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80028c8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d104      	bne.n	80028dc <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028da:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6812      	ldr	r2, [r2, #0]
 80028e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028ee:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028fe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	691a      	ldr	r2, [r3, #16]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	ea42 0103 	orr.w	r1, r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	021a      	lsls	r2, r3, #8
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69d9      	ldr	r1, [r3, #28]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1a      	ldr	r2, [r3, #32]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f042 0201 	orr.w	r2, r2, #1
 8002938:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2220      	movs	r2, #32
 8002944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af02      	add	r7, sp, #8
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	607a      	str	r2, [r7, #4]
 800296a:	461a      	mov	r2, r3
 800296c:	460b      	mov	r3, r1
 800296e:	817b      	strh	r3, [r7, #10]
 8002970:	4613      	mov	r3, r2
 8002972:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b20      	cmp	r3, #32
 800297e:	f040 80da 	bne.w	8002b36 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002988:	2b01      	cmp	r3, #1
 800298a:	d101      	bne.n	8002990 <HAL_I2C_Master_Transmit+0x30>
 800298c:	2302      	movs	r3, #2
 800298e:	e0d3      	b.n	8002b38 <HAL_I2C_Master_Transmit+0x1d8>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002998:	f7ff fb06 	bl	8001fa8 <HAL_GetTick>
 800299c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	2319      	movs	r3, #25
 80029a4:	2201      	movs	r2, #1
 80029a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 f9e6 	bl	8002d7c <I2C_WaitOnFlagUntilTimeout>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e0be      	b.n	8002b38 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2221      	movs	r2, #33	; 0x21
 80029be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2210      	movs	r2, #16
 80029c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	893a      	ldrh	r2, [r7, #8]
 80029da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	2bff      	cmp	r3, #255	; 0xff
 80029ea:	d90e      	bls.n	8002a0a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	22ff      	movs	r2, #255	; 0xff
 80029f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f6:	b2da      	uxtb	r2, r3
 80029f8:	8979      	ldrh	r1, [r7, #10]
 80029fa:	4b51      	ldr	r3, [pc, #324]	; (8002b40 <HAL_I2C_Master_Transmit+0x1e0>)
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 fb48 	bl	8003098 <I2C_TransferConfig>
 8002a08:	e06c      	b.n	8002ae4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	8979      	ldrh	r1, [r7, #10]
 8002a1c:	4b48      	ldr	r3, [pc, #288]	; (8002b40 <HAL_I2C_Master_Transmit+0x1e0>)
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 fb37 	bl	8003098 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002a2a:	e05b      	b.n	8002ae4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	6a39      	ldr	r1, [r7, #32]
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 f9e3 	bl	8002dfc <I2C_WaitOnTXISFlagUntilTimeout>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e07b      	b.n	8002b38 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	781a      	ldrb	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a50:	1c5a      	adds	r2, r3, #1
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d034      	beq.n	8002ae4 <HAL_I2C_Master_Transmit+0x184>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d130      	bne.n	8002ae4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2180      	movs	r1, #128	; 0x80
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 f975 	bl	8002d7c <I2C_WaitOnFlagUntilTimeout>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e04d      	b.n	8002b38 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	2bff      	cmp	r3, #255	; 0xff
 8002aa4:	d90e      	bls.n	8002ac4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	22ff      	movs	r2, #255	; 0xff
 8002aaa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	8979      	ldrh	r1, [r7, #10]
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f000 faeb 	bl	8003098 <I2C_TransferConfig>
 8002ac2:	e00f      	b.n	8002ae4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	8979      	ldrh	r1, [r7, #10]
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 fada 	bl	8003098 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d19e      	bne.n	8002a2c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	6a39      	ldr	r1, [r7, #32]
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 f9c2 	bl	8002e7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e01a      	b.n	8002b38 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2220      	movs	r2, #32
 8002b08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6859      	ldr	r1, [r3, #4]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <HAL_I2C_Master_Transmit+0x1e4>)
 8002b16:	400b      	ands	r3, r1
 8002b18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b32:	2300      	movs	r3, #0
 8002b34:	e000      	b.n	8002b38 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002b36:	2302      	movs	r3, #2
  }
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3718      	adds	r7, #24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	80002000 	.word	0x80002000
 8002b44:	fe00e800 	.word	0xfe00e800

08002b48 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b088      	sub	sp, #32
 8002b4c:	af02      	add	r7, sp, #8
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	607a      	str	r2, [r7, #4]
 8002b52:	461a      	mov	r2, r3
 8002b54:	460b      	mov	r3, r1
 8002b56:	817b      	strh	r3, [r7, #10]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b20      	cmp	r3, #32
 8002b66:	f040 80db 	bne.w	8002d20 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d101      	bne.n	8002b78 <HAL_I2C_Master_Receive+0x30>
 8002b74:	2302      	movs	r3, #2
 8002b76:	e0d4      	b.n	8002d22 <HAL_I2C_Master_Receive+0x1da>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b80:	f7ff fa12 	bl	8001fa8 <HAL_GetTick>
 8002b84:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	2319      	movs	r3, #25
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f000 f8f2 	bl	8002d7c <I2C_WaitOnFlagUntilTimeout>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e0bf      	b.n	8002d22 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2222      	movs	r2, #34	; 0x22
 8002ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2210      	movs	r2, #16
 8002bae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	893a      	ldrh	r2, [r7, #8]
 8002bc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	2bff      	cmp	r3, #255	; 0xff
 8002bd2:	d90e      	bls.n	8002bf2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	22ff      	movs	r2, #255	; 0xff
 8002bd8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	8979      	ldrh	r1, [r7, #10]
 8002be2:	4b52      	ldr	r3, [pc, #328]	; (8002d2c <HAL_I2C_Master_Receive+0x1e4>)
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 fa54 	bl	8003098 <I2C_TransferConfig>
 8002bf0:	e06d      	b.n	8002cce <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	8979      	ldrh	r1, [r7, #10]
 8002c04:	4b49      	ldr	r3, [pc, #292]	; (8002d2c <HAL_I2C_Master_Receive+0x1e4>)
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 fa43 	bl	8003098 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002c12:	e05c      	b.n	8002cce <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	6a39      	ldr	r1, [r7, #32]
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 f96b 	bl	8002ef4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e07c      	b.n	8002d22 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	1c5a      	adds	r2, r3, #1
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c44:	3b01      	subs	r3, #1
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	3b01      	subs	r3, #1
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d034      	beq.n	8002cce <HAL_I2C_Master_Receive+0x186>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d130      	bne.n	8002cce <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	9300      	str	r3, [sp, #0]
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	2200      	movs	r2, #0
 8002c74:	2180      	movs	r1, #128	; 0x80
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 f880 	bl	8002d7c <I2C_WaitOnFlagUntilTimeout>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e04d      	b.n	8002d22 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	2bff      	cmp	r3, #255	; 0xff
 8002c8e:	d90e      	bls.n	8002cae <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	22ff      	movs	r2, #255	; 0xff
 8002c94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	8979      	ldrh	r1, [r7, #10]
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 f9f6 	bl	8003098 <I2C_TransferConfig>
 8002cac:	e00f      	b.n	8002cce <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	8979      	ldrh	r1, [r7, #10]
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 f9e5 	bl	8003098 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d19d      	bne.n	8002c14 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	6a39      	ldr	r1, [r7, #32]
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 f8cd 	bl	8002e7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e01a      	b.n	8002d22 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6859      	ldr	r1, [r3, #4]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	4b0c      	ldr	r3, [pc, #48]	; (8002d30 <HAL_I2C_Master_Receive+0x1e8>)
 8002d00:	400b      	ands	r3, r1
 8002d02:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2220      	movs	r2, #32
 8002d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	e000      	b.n	8002d22 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002d20:	2302      	movs	r3, #2
  }
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	80002400 	.word	0x80002400
 8002d30:	fe00e800 	.word	0xfe00e800

08002d34 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d103      	bne.n	8002d52 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d007      	beq.n	8002d70 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	699a      	ldr	r2, [r3, #24]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0201 	orr.w	r2, r2, #1
 8002d6e:	619a      	str	r2, [r3, #24]
  }
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	603b      	str	r3, [r7, #0]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d8c:	e022      	b.n	8002dd4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d94:	d01e      	beq.n	8002dd4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d96:	f7ff f907 	bl	8001fa8 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d302      	bcc.n	8002dac <I2C_WaitOnFlagUntilTimeout+0x30>
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d113      	bne.n	8002dd4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db0:	f043 0220 	orr.w	r2, r3, #32
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2220      	movs	r2, #32
 8002dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e00f      	b.n	8002df4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	699a      	ldr	r2, [r3, #24]
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	bf0c      	ite	eq
 8002de4:	2301      	moveq	r3, #1
 8002de6:	2300      	movne	r3, #0
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	461a      	mov	r2, r3
 8002dec:	79fb      	ldrb	r3, [r7, #7]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d0cd      	beq.n	8002d8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e08:	e02c      	b.n	8002e64 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	68b9      	ldr	r1, [r7, #8]
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 f8dc 	bl	8002fcc <I2C_IsAcknowledgeFailed>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e02a      	b.n	8002e74 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e24:	d01e      	beq.n	8002e64 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e26:	f7ff f8bf 	bl	8001fa8 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d302      	bcc.n	8002e3c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d113      	bne.n	8002e64 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e40:	f043 0220 	orr.w	r2, r3, #32
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e007      	b.n	8002e74 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d1cb      	bne.n	8002e0a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e88:	e028      	b.n	8002edc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	68b9      	ldr	r1, [r7, #8]
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 f89c 	bl	8002fcc <I2C_IsAcknowledgeFailed>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e026      	b.n	8002eec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e9e:	f7ff f883 	bl	8001fa8 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d302      	bcc.n	8002eb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d113      	bne.n	8002edc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb8:	f043 0220 	orr.w	r2, r3, #32
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e007      	b.n	8002eec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f003 0320 	and.w	r3, r3, #32
 8002ee6:	2b20      	cmp	r3, #32
 8002ee8:	d1cf      	bne.n	8002e8a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f00:	e055      	b.n	8002fae <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	68b9      	ldr	r1, [r7, #8]
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 f860 	bl	8002fcc <I2C_IsAcknowledgeFailed>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e053      	b.n	8002fbe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	f003 0320 	and.w	r3, r3, #32
 8002f20:	2b20      	cmp	r3, #32
 8002f22:	d129      	bne.n	8002f78 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d105      	bne.n	8002f3e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	e03f      	b.n	8002fbe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2220      	movs	r2, #32
 8002f44:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6859      	ldr	r1, [r3, #4]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	4b1d      	ldr	r3, [pc, #116]	; (8002fc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002f52:	400b      	ands	r3, r1
 8002f54:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e022      	b.n	8002fbe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f78:	f7ff f816 	bl	8001fa8 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d302      	bcc.n	8002f8e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10f      	bne.n	8002fae <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f92:	f043 0220 	orr.w	r2, r3, #32
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e007      	b.n	8002fbe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d1a2      	bne.n	8002f02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	fe00e800 	.word	0xfe00e800

08002fcc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	f003 0310 	and.w	r3, r3, #16
 8002fe2:	2b10      	cmp	r3, #16
 8002fe4:	d151      	bne.n	800308a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fe6:	e022      	b.n	800302e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fee:	d01e      	beq.n	800302e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ff0:	f7fe ffda 	bl	8001fa8 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d302      	bcc.n	8003006 <I2C_IsAcknowledgeFailed+0x3a>
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d113      	bne.n	800302e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300a:	f043 0220 	orr.w	r2, r3, #32
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2220      	movs	r2, #32
 8003016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e02e      	b.n	800308c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	f003 0320 	and.w	r3, r3, #32
 8003038:	2b20      	cmp	r3, #32
 800303a:	d1d5      	bne.n	8002fe8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2210      	movs	r2, #16
 8003042:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2220      	movs	r2, #32
 800304a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f7ff fe71 	bl	8002d34 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6859      	ldr	r1, [r3, #4]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	4b0d      	ldr	r3, [pc, #52]	; (8003094 <I2C_IsAcknowledgeFailed+0xc8>)
 800305e:	400b      	ands	r3, r1
 8003060:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003066:	f043 0204 	orr.w	r2, r3, #4
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2220      	movs	r2, #32
 8003072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e000      	b.n	800308c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	fe00e800 	.word	0xfe00e800

08003098 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	607b      	str	r3, [r7, #4]
 80030a2:	460b      	mov	r3, r1
 80030a4:	817b      	strh	r3, [r7, #10]
 80030a6:	4613      	mov	r3, r2
 80030a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	0d5b      	lsrs	r3, r3, #21
 80030b4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80030b8:	4b0d      	ldr	r3, [pc, #52]	; (80030f0 <I2C_TransferConfig+0x58>)
 80030ba:	430b      	orrs	r3, r1
 80030bc:	43db      	mvns	r3, r3
 80030be:	ea02 0103 	and.w	r1, r2, r3
 80030c2:	897b      	ldrh	r3, [r7, #10]
 80030c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030c8:	7a7b      	ldrb	r3, [r7, #9]
 80030ca:	041b      	lsls	r3, r3, #16
 80030cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80030d0:	431a      	orrs	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	431a      	orrs	r2, r3
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	431a      	orrs	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80030e2:	bf00      	nop
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	03ff63ff 	.word	0x03ff63ff

080030f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b20      	cmp	r3, #32
 8003108:	d138      	bne.n	800317c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003110:	2b01      	cmp	r3, #1
 8003112:	d101      	bne.n	8003118 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003114:	2302      	movs	r3, #2
 8003116:	e032      	b.n	800317e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2224      	movs	r2, #36	; 0x24
 8003124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 0201 	bic.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003146:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6819      	ldr	r1, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0201 	orr.w	r2, r2, #1
 8003166:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2220      	movs	r2, #32
 800316c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003178:	2300      	movs	r3, #0
 800317a:	e000      	b.n	800317e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800317c:	2302      	movs	r3, #2
  }
}
 800317e:	4618      	mov	r0, r3
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800318a:	b480      	push	{r7}
 800318c:	b085      	sub	sp, #20
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
 8003192:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b20      	cmp	r3, #32
 800319e:	d139      	bne.n	8003214 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d101      	bne.n	80031ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80031aa:	2302      	movs	r3, #2
 80031ac:	e033      	b.n	8003216 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2224      	movs	r2, #36	; 0x24
 80031ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0201 	bic.w	r2, r2, #1
 80031cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	021b      	lsls	r3, r3, #8
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0201 	orr.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003210:	2300      	movs	r3, #0
 8003212:	e000      	b.n	8003216 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003214:	2302      	movs	r3, #2
  }
}
 8003216:	4618      	mov	r0, r3
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003222:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003224:	b08f      	sub	sp, #60	; 0x3c
 8003226:	af0a      	add	r7, sp, #40	; 0x28
 8003228:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e116      	b.n	8003462 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d106      	bne.n	8003254 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7fe fcf0 	bl	8001c34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2203      	movs	r2, #3
 8003258:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003264:	2b00      	cmp	r3, #0
 8003266:	d102      	bne.n	800326e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f002 fb89 	bl	800598a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	603b      	str	r3, [r7, #0]
 800327e:	687e      	ldr	r6, [r7, #4]
 8003280:	466d      	mov	r5, sp
 8003282:	f106 0410 	add.w	r4, r6, #16
 8003286:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003288:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800328a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800328c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800328e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003292:	e885 0003 	stmia.w	r5, {r0, r1}
 8003296:	1d33      	adds	r3, r6, #4
 8003298:	cb0e      	ldmia	r3, {r1, r2, r3}
 800329a:	6838      	ldr	r0, [r7, #0]
 800329c:	f002 fb49 	bl	8005932 <USB_CoreInit>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d005      	beq.n	80032b2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2202      	movs	r2, #2
 80032aa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e0d7      	b.n	8003462 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2100      	movs	r1, #0
 80032b8:	4618      	mov	r0, r3
 80032ba:	f002 fb77 	bl	80059ac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032be:	2300      	movs	r3, #0
 80032c0:	73fb      	strb	r3, [r7, #15]
 80032c2:	e04a      	b.n	800335a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80032c4:	7bfa      	ldrb	r2, [r7, #15]
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	4613      	mov	r3, r2
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	1a9b      	subs	r3, r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	333d      	adds	r3, #61	; 0x3d
 80032d4:	2201      	movs	r2, #1
 80032d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80032d8:	7bfa      	ldrb	r2, [r7, #15]
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	4613      	mov	r3, r2
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	1a9b      	subs	r3, r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	440b      	add	r3, r1
 80032e6:	333c      	adds	r3, #60	; 0x3c
 80032e8:	7bfa      	ldrb	r2, [r7, #15]
 80032ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80032ec:	7bfa      	ldrb	r2, [r7, #15]
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
 80032f0:	b298      	uxth	r0, r3
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	4613      	mov	r3, r2
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	1a9b      	subs	r3, r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	440b      	add	r3, r1
 80032fe:	3342      	adds	r3, #66	; 0x42
 8003300:	4602      	mov	r2, r0
 8003302:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003304:	7bfa      	ldrb	r2, [r7, #15]
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	4613      	mov	r3, r2
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	1a9b      	subs	r3, r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	440b      	add	r3, r1
 8003312:	333f      	adds	r3, #63	; 0x3f
 8003314:	2200      	movs	r2, #0
 8003316:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003318:	7bfa      	ldrb	r2, [r7, #15]
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	1a9b      	subs	r3, r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	440b      	add	r3, r1
 8003326:	3344      	adds	r3, #68	; 0x44
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800332c:	7bfa      	ldrb	r2, [r7, #15]
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	1a9b      	subs	r3, r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	3348      	adds	r3, #72	; 0x48
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003340:	7bfa      	ldrb	r2, [r7, #15]
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	4613      	mov	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	1a9b      	subs	r3, r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	3350      	adds	r3, #80	; 0x50
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003354:	7bfb      	ldrb	r3, [r7, #15]
 8003356:	3301      	adds	r3, #1
 8003358:	73fb      	strb	r3, [r7, #15]
 800335a:	7bfa      	ldrb	r2, [r7, #15]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	429a      	cmp	r2, r3
 8003362:	d3af      	bcc.n	80032c4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003364:	2300      	movs	r3, #0
 8003366:	73fb      	strb	r3, [r7, #15]
 8003368:	e044      	b.n	80033f4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800336a:	7bfa      	ldrb	r2, [r7, #15]
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	1a9b      	subs	r3, r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	440b      	add	r3, r1
 8003378:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800337c:	2200      	movs	r2, #0
 800337e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003380:	7bfa      	ldrb	r2, [r7, #15]
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	4613      	mov	r3, r2
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	1a9b      	subs	r3, r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003392:	7bfa      	ldrb	r2, [r7, #15]
 8003394:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003396:	7bfa      	ldrb	r2, [r7, #15]
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	4613      	mov	r3, r2
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	1a9b      	subs	r3, r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	440b      	add	r3, r1
 80033a4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80033a8:	2200      	movs	r2, #0
 80033aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80033ac:	7bfa      	ldrb	r2, [r7, #15]
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	4613      	mov	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	1a9b      	subs	r3, r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80033be:	2200      	movs	r2, #0
 80033c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80033c2:	7bfa      	ldrb	r2, [r7, #15]
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	4613      	mov	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	1a9b      	subs	r3, r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	440b      	add	r3, r1
 80033d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80033d8:	7bfa      	ldrb	r2, [r7, #15]
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	4613      	mov	r3, r2
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	1a9b      	subs	r3, r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
 80033f0:	3301      	adds	r3, #1
 80033f2:	73fb      	strb	r3, [r7, #15]
 80033f4:	7bfa      	ldrb	r2, [r7, #15]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d3b5      	bcc.n	800336a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	603b      	str	r3, [r7, #0]
 8003404:	687e      	ldr	r6, [r7, #4]
 8003406:	466d      	mov	r5, sp
 8003408:	f106 0410 	add.w	r4, r6, #16
 800340c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800340e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003410:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003412:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003414:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003418:	e885 0003 	stmia.w	r5, {r0, r1}
 800341c:	1d33      	adds	r3, r6, #4
 800341e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003420:	6838      	ldr	r0, [r7, #0]
 8003422:	f002 faed 	bl	8005a00 <USB_DevInit>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d005      	beq.n	8003438 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e014      	b.n	8003462 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	2b01      	cmp	r3, #1
 800344e:	d102      	bne.n	8003456 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f80a 	bl	800346a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f002 fc7d 	bl	8005d5a <USB_DevDisconnect>

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800346a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800346a:	b480      	push	{r7}
 800346c:	b085      	sub	sp, #20
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800349c:	f043 0303 	orr.w	r3, r3, #3
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
	...

080034b4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034b8:	4b05      	ldr	r3, [pc, #20]	; (80034d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a04      	ldr	r2, [pc, #16]	; (80034d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80034be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c2:	6013      	str	r3, [r2, #0]
}
 80034c4:	bf00      	nop
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	40007000 	.word	0x40007000

080034d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80034d8:	4b04      	ldr	r3, [pc, #16]	; (80034ec <HAL_PWREx_GetVoltageRange+0x18>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	40007000 	.word	0x40007000

080034f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034fe:	d130      	bne.n	8003562 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003500:	4b23      	ldr	r3, [pc, #140]	; (8003590 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800350c:	d038      	beq.n	8003580 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800350e:	4b20      	ldr	r3, [pc, #128]	; (8003590 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003516:	4a1e      	ldr	r2, [pc, #120]	; (8003590 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003518:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800351c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800351e:	4b1d      	ldr	r3, [pc, #116]	; (8003594 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2232      	movs	r2, #50	; 0x32
 8003524:	fb02 f303 	mul.w	r3, r2, r3
 8003528:	4a1b      	ldr	r2, [pc, #108]	; (8003598 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800352a:	fba2 2303 	umull	r2, r3, r2, r3
 800352e:	0c9b      	lsrs	r3, r3, #18
 8003530:	3301      	adds	r3, #1
 8003532:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003534:	e002      	b.n	800353c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	3b01      	subs	r3, #1
 800353a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800353c:	4b14      	ldr	r3, [pc, #80]	; (8003590 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003548:	d102      	bne.n	8003550 <HAL_PWREx_ControlVoltageScaling+0x60>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1f2      	bne.n	8003536 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003550:	4b0f      	ldr	r3, [pc, #60]	; (8003590 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800355c:	d110      	bne.n	8003580 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e00f      	b.n	8003582 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003562:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800356a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800356e:	d007      	beq.n	8003580 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003570:	4b07      	ldr	r3, [pc, #28]	; (8003590 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003578:	4a05      	ldr	r2, [pc, #20]	; (8003590 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800357a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800357e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	40007000 	.word	0x40007000
 8003594:	20000000 	.word	0x20000000
 8003598:	431bde83 	.word	0x431bde83

0800359c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80035a0:	4b05      	ldr	r3, [pc, #20]	; (80035b8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	4a04      	ldr	r2, [pc, #16]	; (80035b8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80035a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035aa:	6053      	str	r3, [r2, #4]
}
 80035ac:	bf00      	nop
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	40007000 	.word	0x40007000

080035bc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af02      	add	r7, sp, #8
 80035c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80035c4:	f7fe fcf0 	bl	8001fa8 <HAL_GetTick>
 80035c8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e063      	b.n	800369c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10b      	bne.n	80035f8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f7fe f9f3 	bl	80019d4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80035ee:	f241 3188 	movw	r1, #5000	; 0x1388
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f858 	bl	80036a8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	3b01      	subs	r3, #1
 8003608:	021a      	lsls	r2, r3, #8
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	2120      	movs	r1, #32
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f850 	bl	80036c4 <QSPI_WaitFlagStateUntilTimeout>
 8003624:	4603      	mov	r3, r0
 8003626:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003628:	7afb      	ldrb	r3, [r7, #11]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d131      	bne.n	8003692 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003638:	f023 0310 	bic.w	r3, r3, #16
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	6852      	ldr	r2, [r2, #4]
 8003640:	0611      	lsls	r1, r2, #24
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	68d2      	ldr	r2, [r2, #12]
 8003646:	4311      	orrs	r1, r2
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6812      	ldr	r2, [r2, #0]
 800364c:	430b      	orrs	r3, r1
 800364e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	4b13      	ldr	r3, [pc, #76]	; (80036a4 <HAL_QSPI_Init+0xe8>)
 8003658:	4013      	ands	r3, r2
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6912      	ldr	r2, [r2, #16]
 800365e:	0411      	lsls	r1, r2, #16
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6952      	ldr	r2, [r2, #20]
 8003664:	4311      	orrs	r1, r2
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	6992      	ldr	r2, [r2, #24]
 800366a:	4311      	orrs	r1, r2
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	6812      	ldr	r2, [r2, #0]
 8003670:	430b      	orrs	r3, r1
 8003672:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0201 	orr.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800369a:	7afb      	ldrb	r3, [r7, #11]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	ffe0f8fe 	.word	0xffe0f8fe

080036a8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	603b      	str	r3, [r7, #0]
 80036d0:	4613      	mov	r3, r2
 80036d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80036d4:	e01a      	b.n	800370c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036dc:	d016      	beq.n	800370c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036de:	f7fe fc63 	bl	8001fa8 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d302      	bcc.n	80036f4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10b      	bne.n	800370c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2204      	movs	r2, #4
 80036f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003700:	f043 0201 	orr.w	r2, r3, #1
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e00e      	b.n	800372a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689a      	ldr	r2, [r3, #8]
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	4013      	ands	r3, r2
 8003716:	2b00      	cmp	r3, #0
 8003718:	bf14      	ite	ne
 800371a:	2301      	movne	r3, #1
 800371c:	2300      	moveq	r3, #0
 800371e:	b2db      	uxtb	r3, r3
 8003720:	461a      	mov	r2, r3
 8003722:	79fb      	ldrb	r3, [r7, #7]
 8003724:	429a      	cmp	r2, r3
 8003726:	d1d6      	bne.n	80036d6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3710      	adds	r7, #16
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
	...

08003734 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b088      	sub	sp, #32
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e3d4      	b.n	8003ef0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003746:	4ba1      	ldr	r3, [pc, #644]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 030c 	and.w	r3, r3, #12
 800374e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003750:	4b9e      	ldr	r3, [pc, #632]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f003 0303 	and.w	r3, r3, #3
 8003758:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0310 	and.w	r3, r3, #16
 8003762:	2b00      	cmp	r3, #0
 8003764:	f000 80e4 	beq.w	8003930 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d007      	beq.n	800377e <HAL_RCC_OscConfig+0x4a>
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	2b0c      	cmp	r3, #12
 8003772:	f040 808b 	bne.w	800388c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	2b01      	cmp	r3, #1
 800377a:	f040 8087 	bne.w	800388c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800377e:	4b93      	ldr	r3, [pc, #588]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d005      	beq.n	8003796 <HAL_RCC_OscConfig+0x62>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e3ac      	b.n	8003ef0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1a      	ldr	r2, [r3, #32]
 800379a:	4b8c      	ldr	r3, [pc, #560]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d004      	beq.n	80037b0 <HAL_RCC_OscConfig+0x7c>
 80037a6:	4b89      	ldr	r3, [pc, #548]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037ae:	e005      	b.n	80037bc <HAL_RCC_OscConfig+0x88>
 80037b0:	4b86      	ldr	r3, [pc, #536]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 80037b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037b6:	091b      	lsrs	r3, r3, #4
 80037b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037bc:	4293      	cmp	r3, r2
 80037be:	d223      	bcs.n	8003808 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f000 fd41 	bl	800424c <RCC_SetFlashLatencyFromMSIRange>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e38d      	b.n	8003ef0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037d4:	4b7d      	ldr	r3, [pc, #500]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a7c      	ldr	r2, [pc, #496]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 80037da:	f043 0308 	orr.w	r3, r3, #8
 80037de:	6013      	str	r3, [r2, #0]
 80037e0:	4b7a      	ldr	r3, [pc, #488]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	4977      	ldr	r1, [pc, #476]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037f2:	4b76      	ldr	r3, [pc, #472]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	021b      	lsls	r3, r3, #8
 8003800:	4972      	ldr	r1, [pc, #456]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 8003802:	4313      	orrs	r3, r2
 8003804:	604b      	str	r3, [r1, #4]
 8003806:	e025      	b.n	8003854 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003808:	4b70      	ldr	r3, [pc, #448]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a6f      	ldr	r2, [pc, #444]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 800380e:	f043 0308 	orr.w	r3, r3, #8
 8003812:	6013      	str	r3, [r2, #0]
 8003814:	4b6d      	ldr	r3, [pc, #436]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	496a      	ldr	r1, [pc, #424]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 8003822:	4313      	orrs	r3, r2
 8003824:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003826:	4b69      	ldr	r3, [pc, #420]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	021b      	lsls	r3, r3, #8
 8003834:	4965      	ldr	r1, [pc, #404]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 8003836:	4313      	orrs	r3, r2
 8003838:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d109      	bne.n	8003854 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	4618      	mov	r0, r3
 8003846:	f000 fd01 	bl	800424c <RCC_SetFlashLatencyFromMSIRange>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e34d      	b.n	8003ef0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003854:	f000 fc36 	bl	80040c4 <HAL_RCC_GetSysClockFreq>
 8003858:	4602      	mov	r2, r0
 800385a:	4b5c      	ldr	r3, [pc, #368]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	091b      	lsrs	r3, r3, #4
 8003860:	f003 030f 	and.w	r3, r3, #15
 8003864:	495a      	ldr	r1, [pc, #360]	; (80039d0 <HAL_RCC_OscConfig+0x29c>)
 8003866:	5ccb      	ldrb	r3, [r1, r3]
 8003868:	f003 031f 	and.w	r3, r3, #31
 800386c:	fa22 f303 	lsr.w	r3, r2, r3
 8003870:	4a58      	ldr	r2, [pc, #352]	; (80039d4 <HAL_RCC_OscConfig+0x2a0>)
 8003872:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003874:	4b58      	ldr	r3, [pc, #352]	; (80039d8 <HAL_RCC_OscConfig+0x2a4>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f7fe fb45 	bl	8001f08 <HAL_InitTick>
 800387e:	4603      	mov	r3, r0
 8003880:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003882:	7bfb      	ldrb	r3, [r7, #15]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d052      	beq.n	800392e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003888:	7bfb      	ldrb	r3, [r7, #15]
 800388a:	e331      	b.n	8003ef0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d032      	beq.n	80038fa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003894:	4b4d      	ldr	r3, [pc, #308]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a4c      	ldr	r2, [pc, #304]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 800389a:	f043 0301 	orr.w	r3, r3, #1
 800389e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038a0:	f7fe fb82 	bl	8001fa8 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038a8:	f7fe fb7e 	bl	8001fa8 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e31a      	b.n	8003ef0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038ba:	4b44      	ldr	r3, [pc, #272]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0f0      	beq.n	80038a8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038c6:	4b41      	ldr	r3, [pc, #260]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a40      	ldr	r2, [pc, #256]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 80038cc:	f043 0308 	orr.w	r3, r3, #8
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	4b3e      	ldr	r3, [pc, #248]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	493b      	ldr	r1, [pc, #236]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038e4:	4b39      	ldr	r3, [pc, #228]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	69db      	ldr	r3, [r3, #28]
 80038f0:	021b      	lsls	r3, r3, #8
 80038f2:	4936      	ldr	r1, [pc, #216]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	604b      	str	r3, [r1, #4]
 80038f8:	e01a      	b.n	8003930 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80038fa:	4b34      	ldr	r3, [pc, #208]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a33      	ldr	r2, [pc, #204]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 8003900:	f023 0301 	bic.w	r3, r3, #1
 8003904:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003906:	f7fe fb4f 	bl	8001fa8 <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800390c:	e008      	b.n	8003920 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800390e:	f7fe fb4b 	bl	8001fa8 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e2e7      	b.n	8003ef0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003920:	4b2a      	ldr	r3, [pc, #168]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1f0      	bne.n	800390e <HAL_RCC_OscConfig+0x1da>
 800392c:	e000      	b.n	8003930 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800392e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b00      	cmp	r3, #0
 800393a:	d074      	beq.n	8003a26 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	2b08      	cmp	r3, #8
 8003940:	d005      	beq.n	800394e <HAL_RCC_OscConfig+0x21a>
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	2b0c      	cmp	r3, #12
 8003946:	d10e      	bne.n	8003966 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	2b03      	cmp	r3, #3
 800394c:	d10b      	bne.n	8003966 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800394e:	4b1f      	ldr	r3, [pc, #124]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d064      	beq.n	8003a24 <HAL_RCC_OscConfig+0x2f0>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d160      	bne.n	8003a24 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e2c4      	b.n	8003ef0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800396e:	d106      	bne.n	800397e <HAL_RCC_OscConfig+0x24a>
 8003970:	4b16      	ldr	r3, [pc, #88]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a15      	ldr	r2, [pc, #84]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 8003976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800397a:	6013      	str	r3, [r2, #0]
 800397c:	e01d      	b.n	80039ba <HAL_RCC_OscConfig+0x286>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003986:	d10c      	bne.n	80039a2 <HAL_RCC_OscConfig+0x26e>
 8003988:	4b10      	ldr	r3, [pc, #64]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a0f      	ldr	r2, [pc, #60]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 800398e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003992:	6013      	str	r3, [r2, #0]
 8003994:	4b0d      	ldr	r3, [pc, #52]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a0c      	ldr	r2, [pc, #48]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 800399a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800399e:	6013      	str	r3, [r2, #0]
 80039a0:	e00b      	b.n	80039ba <HAL_RCC_OscConfig+0x286>
 80039a2:	4b0a      	ldr	r3, [pc, #40]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a09      	ldr	r2, [pc, #36]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 80039a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ac:	6013      	str	r3, [r2, #0]
 80039ae:	4b07      	ldr	r3, [pc, #28]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a06      	ldr	r2, [pc, #24]	; (80039cc <HAL_RCC_OscConfig+0x298>)
 80039b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039b8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d01c      	beq.n	80039fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c2:	f7fe faf1 	bl	8001fa8 <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039c8:	e011      	b.n	80039ee <HAL_RCC_OscConfig+0x2ba>
 80039ca:	bf00      	nop
 80039cc:	40021000 	.word	0x40021000
 80039d0:	080068ec 	.word	0x080068ec
 80039d4:	20000000 	.word	0x20000000
 80039d8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039dc:	f7fe fae4 	bl	8001fa8 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b64      	cmp	r3, #100	; 0x64
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e280      	b.n	8003ef0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039ee:	4baf      	ldr	r3, [pc, #700]	; (8003cac <HAL_RCC_OscConfig+0x578>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0f0      	beq.n	80039dc <HAL_RCC_OscConfig+0x2a8>
 80039fa:	e014      	b.n	8003a26 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fc:	f7fe fad4 	bl	8001fa8 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a04:	f7fe fad0 	bl	8001fa8 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b64      	cmp	r3, #100	; 0x64
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e26c      	b.n	8003ef0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a16:	4ba5      	ldr	r3, [pc, #660]	; (8003cac <HAL_RCC_OscConfig+0x578>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1f0      	bne.n	8003a04 <HAL_RCC_OscConfig+0x2d0>
 8003a22:	e000      	b.n	8003a26 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d060      	beq.n	8003af4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	2b04      	cmp	r3, #4
 8003a36:	d005      	beq.n	8003a44 <HAL_RCC_OscConfig+0x310>
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	2b0c      	cmp	r3, #12
 8003a3c:	d119      	bne.n	8003a72 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d116      	bne.n	8003a72 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a44:	4b99      	ldr	r3, [pc, #612]	; (8003cac <HAL_RCC_OscConfig+0x578>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d005      	beq.n	8003a5c <HAL_RCC_OscConfig+0x328>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e249      	b.n	8003ef0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a5c:	4b93      	ldr	r3, [pc, #588]	; (8003cac <HAL_RCC_OscConfig+0x578>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	061b      	lsls	r3, r3, #24
 8003a6a:	4990      	ldr	r1, [pc, #576]	; (8003cac <HAL_RCC_OscConfig+0x578>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a70:	e040      	b.n	8003af4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d023      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a7a:	4b8c      	ldr	r3, [pc, #560]	; (8003cac <HAL_RCC_OscConfig+0x578>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a8b      	ldr	r2, [pc, #556]	; (8003cac <HAL_RCC_OscConfig+0x578>)
 8003a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a86:	f7fe fa8f 	bl	8001fa8 <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a8e:	f7fe fa8b 	bl	8001fa8 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e227      	b.n	8003ef0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003aa0:	4b82      	ldr	r3, [pc, #520]	; (8003cac <HAL_RCC_OscConfig+0x578>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0f0      	beq.n	8003a8e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aac:	4b7f      	ldr	r3, [pc, #508]	; (8003cac <HAL_RCC_OscConfig+0x578>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	061b      	lsls	r3, r3, #24
 8003aba:	497c      	ldr	r1, [pc, #496]	; (8003cac <HAL_RCC_OscConfig+0x578>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	604b      	str	r3, [r1, #4]
 8003ac0:	e018      	b.n	8003af4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ac2:	4b7a      	ldr	r3, [pc, #488]	; (8003cac <HAL_RCC_OscConfig+0x578>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a79      	ldr	r2, [pc, #484]	; (8003cac <HAL_RCC_OscConfig+0x578>)
 8003ac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003acc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ace:	f7fe fa6b 	bl	8001fa8 <HAL_GetTick>
 8003ad2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ad6:	f7fe fa67 	bl	8001fa8 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e203      	b.n	8003ef0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ae8:	4b70      	ldr	r3, [pc, #448]	; (8003cac <HAL_RCC_OscConfig+0x578>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1f0      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0308 	and.w	r3, r3, #8
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d03c      	beq.n	8003b7a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d01c      	beq.n	8003b42 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b08:	4b68      	ldr	r3, [pc, #416]	; (8003cac <HAL_RCC_OscConfig+0x578>)
 8003b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b0e:	4a67      	ldr	r2, [pc, #412]	; (8003cac <HAL_RCC_OscConfig+0x578>)
 8003b10:	f043 0301 	orr.w	r3, r3, #1
 8003b14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b18:	f7fe fa46 	bl	8001fa8 <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b20:	f7fe fa42 	bl	8001fa8 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e1de      	b.n	8003ef0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b32:	4b5e      	ldr	r3, [pc, #376]	; (8003cac <HAL_RCC_OscConfig+0x578>)
 8003b34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0ef      	beq.n	8003b20 <HAL_RCC_OscConfig+0x3ec>
 8003b40:	e01b      	b.n	8003b7a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b42:	4b5a      	ldr	r3, [pc, #360]	; (8003cac <HAL_RCC_OscConfig+0x578>)
 8003b44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b48:	4a58      	ldr	r2, [pc, #352]	; (8003cac <HAL_RCC_OscConfig+0x578>)
 8003b4a:	f023 0301 	bic.w	r3, r3, #1
 8003b4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b52:	f7fe fa29 	bl	8001fa8 <HAL_GetTick>
 8003b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b58:	e008      	b.n	8003b6c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b5a:	f7fe fa25 	bl	8001fa8 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e1c1      	b.n	8003ef0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b6c:	4b4f      	ldr	r3, [pc, #316]	; (8003cac <HAL_RCC_OscConfig+0x578>)
 8003b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1ef      	bne.n	8003b5a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0304 	and.w	r3, r3, #4
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 80a6 	beq.w	8003cd4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b8c:	4b47      	ldr	r3, [pc, #284]	; (8003cac <HAL_RCC_OscConfig+0x578>)
 8003b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10d      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b98:	4b44      	ldr	r3, [pc, #272]	; (8003cac <HAL_RCC_OscConfig+0x578>)
 8003b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9c:	4a43      	ldr	r2, [pc, #268]	; (8003cac <HAL_RCC_OscConfig+0x578>)
 8003b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ba4:	4b41      	ldr	r3, [pc, #260]	; (8003cac <HAL_RCC_OscConfig+0x578>)
 8003ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bac:	60bb      	str	r3, [r7, #8]
 8003bae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bb4:	4b3e      	ldr	r3, [pc, #248]	; (8003cb0 <HAL_RCC_OscConfig+0x57c>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d118      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bc0:	4b3b      	ldr	r3, [pc, #236]	; (8003cb0 <HAL_RCC_OscConfig+0x57c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a3a      	ldr	r2, [pc, #232]	; (8003cb0 <HAL_RCC_OscConfig+0x57c>)
 8003bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bcc:	f7fe f9ec 	bl	8001fa8 <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd4:	f7fe f9e8 	bl	8001fa8 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e184      	b.n	8003ef0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003be6:	4b32      	ldr	r3, [pc, #200]	; (8003cb0 <HAL_RCC_OscConfig+0x57c>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0f0      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d108      	bne.n	8003c0c <HAL_RCC_OscConfig+0x4d8>
 8003bfa:	4b2c      	ldr	r3, [pc, #176]	; (8003cac <HAL_RCC_OscConfig+0x578>)
 8003bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c00:	4a2a      	ldr	r2, [pc, #168]	; (8003cac <HAL_RCC_OscConfig+0x578>)
 8003c02:	f043 0301 	orr.w	r3, r3, #1
 8003c06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c0a:	e024      	b.n	8003c56 <HAL_RCC_OscConfig+0x522>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	2b05      	cmp	r3, #5
 8003c12:	d110      	bne.n	8003c36 <HAL_RCC_OscConfig+0x502>
 8003c14:	4b25      	ldr	r3, [pc, #148]	; (8003cac <HAL_RCC_OscConfig+0x578>)
 8003c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1a:	4a24      	ldr	r2, [pc, #144]	; (8003cac <HAL_RCC_OscConfig+0x578>)
 8003c1c:	f043 0304 	orr.w	r3, r3, #4
 8003c20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c24:	4b21      	ldr	r3, [pc, #132]	; (8003cac <HAL_RCC_OscConfig+0x578>)
 8003c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2a:	4a20      	ldr	r2, [pc, #128]	; (8003cac <HAL_RCC_OscConfig+0x578>)
 8003c2c:	f043 0301 	orr.w	r3, r3, #1
 8003c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c34:	e00f      	b.n	8003c56 <HAL_RCC_OscConfig+0x522>
 8003c36:	4b1d      	ldr	r3, [pc, #116]	; (8003cac <HAL_RCC_OscConfig+0x578>)
 8003c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3c:	4a1b      	ldr	r2, [pc, #108]	; (8003cac <HAL_RCC_OscConfig+0x578>)
 8003c3e:	f023 0301 	bic.w	r3, r3, #1
 8003c42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c46:	4b19      	ldr	r3, [pc, #100]	; (8003cac <HAL_RCC_OscConfig+0x578>)
 8003c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4c:	4a17      	ldr	r2, [pc, #92]	; (8003cac <HAL_RCC_OscConfig+0x578>)
 8003c4e:	f023 0304 	bic.w	r3, r3, #4
 8003c52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d016      	beq.n	8003c8c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c5e:	f7fe f9a3 	bl	8001fa8 <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c64:	e00a      	b.n	8003c7c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c66:	f7fe f99f 	bl	8001fa8 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e139      	b.n	8003ef0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c7c:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <HAL_RCC_OscConfig+0x578>)
 8003c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0ed      	beq.n	8003c66 <HAL_RCC_OscConfig+0x532>
 8003c8a:	e01a      	b.n	8003cc2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c8c:	f7fe f98c 	bl	8001fa8 <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c92:	e00f      	b.n	8003cb4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c94:	f7fe f988 	bl	8001fa8 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d906      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e122      	b.n	8003ef0 <HAL_RCC_OscConfig+0x7bc>
 8003caa:	bf00      	nop
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cb4:	4b90      	ldr	r3, [pc, #576]	; (8003ef8 <HAL_RCC_OscConfig+0x7c4>)
 8003cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1e8      	bne.n	8003c94 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cc2:	7ffb      	ldrb	r3, [r7, #31]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d105      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cc8:	4b8b      	ldr	r3, [pc, #556]	; (8003ef8 <HAL_RCC_OscConfig+0x7c4>)
 8003cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ccc:	4a8a      	ldr	r2, [pc, #552]	; (8003ef8 <HAL_RCC_OscConfig+0x7c4>)
 8003cce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cd2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 8108 	beq.w	8003eee <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	f040 80d0 	bne.w	8003e88 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ce8:	4b83      	ldr	r3, [pc, #524]	; (8003ef8 <HAL_RCC_OscConfig+0x7c4>)
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f003 0203 	and.w	r2, r3, #3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d130      	bne.n	8003d5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	3b01      	subs	r3, #1
 8003d08:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d127      	bne.n	8003d5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d18:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d11f      	bne.n	8003d5e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d28:	2a07      	cmp	r2, #7
 8003d2a:	bf14      	ite	ne
 8003d2c:	2201      	movne	r2, #1
 8003d2e:	2200      	moveq	r2, #0
 8003d30:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d113      	bne.n	8003d5e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d40:	085b      	lsrs	r3, r3, #1
 8003d42:	3b01      	subs	r3, #1
 8003d44:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d109      	bne.n	8003d5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d54:	085b      	lsrs	r3, r3, #1
 8003d56:	3b01      	subs	r3, #1
 8003d58:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d06e      	beq.n	8003e3c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	2b0c      	cmp	r3, #12
 8003d62:	d069      	beq.n	8003e38 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d64:	4b64      	ldr	r3, [pc, #400]	; (8003ef8 <HAL_RCC_OscConfig+0x7c4>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d105      	bne.n	8003d7c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003d70:	4b61      	ldr	r3, [pc, #388]	; (8003ef8 <HAL_RCC_OscConfig+0x7c4>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e0b7      	b.n	8003ef0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d80:	4b5d      	ldr	r3, [pc, #372]	; (8003ef8 <HAL_RCC_OscConfig+0x7c4>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a5c      	ldr	r2, [pc, #368]	; (8003ef8 <HAL_RCC_OscConfig+0x7c4>)
 8003d86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d8a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d8c:	f7fe f90c 	bl	8001fa8 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d94:	f7fe f908 	bl	8001fa8 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e0a4      	b.n	8003ef0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003da6:	4b54      	ldr	r3, [pc, #336]	; (8003ef8 <HAL_RCC_OscConfig+0x7c4>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1f0      	bne.n	8003d94 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003db2:	4b51      	ldr	r3, [pc, #324]	; (8003ef8 <HAL_RCC_OscConfig+0x7c4>)
 8003db4:	68da      	ldr	r2, [r3, #12]
 8003db6:	4b51      	ldr	r3, [pc, #324]	; (8003efc <HAL_RCC_OscConfig+0x7c8>)
 8003db8:	4013      	ands	r3, r2
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003dc2:	3a01      	subs	r2, #1
 8003dc4:	0112      	lsls	r2, r2, #4
 8003dc6:	4311      	orrs	r1, r2
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003dcc:	0212      	lsls	r2, r2, #8
 8003dce:	4311      	orrs	r1, r2
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003dd4:	0852      	lsrs	r2, r2, #1
 8003dd6:	3a01      	subs	r2, #1
 8003dd8:	0552      	lsls	r2, r2, #21
 8003dda:	4311      	orrs	r1, r2
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003de0:	0852      	lsrs	r2, r2, #1
 8003de2:	3a01      	subs	r2, #1
 8003de4:	0652      	lsls	r2, r2, #25
 8003de6:	4311      	orrs	r1, r2
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003dec:	0912      	lsrs	r2, r2, #4
 8003dee:	0452      	lsls	r2, r2, #17
 8003df0:	430a      	orrs	r2, r1
 8003df2:	4941      	ldr	r1, [pc, #260]	; (8003ef8 <HAL_RCC_OscConfig+0x7c4>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003df8:	4b3f      	ldr	r3, [pc, #252]	; (8003ef8 <HAL_RCC_OscConfig+0x7c4>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a3e      	ldr	r2, [pc, #248]	; (8003ef8 <HAL_RCC_OscConfig+0x7c4>)
 8003dfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e02:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e04:	4b3c      	ldr	r3, [pc, #240]	; (8003ef8 <HAL_RCC_OscConfig+0x7c4>)
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	4a3b      	ldr	r2, [pc, #236]	; (8003ef8 <HAL_RCC_OscConfig+0x7c4>)
 8003e0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e0e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e10:	f7fe f8ca 	bl	8001fa8 <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e18:	f7fe f8c6 	bl	8001fa8 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e062      	b.n	8003ef0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e2a:	4b33      	ldr	r3, [pc, #204]	; (8003ef8 <HAL_RCC_OscConfig+0x7c4>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d0f0      	beq.n	8003e18 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e36:	e05a      	b.n	8003eee <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e059      	b.n	8003ef0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e3c:	4b2e      	ldr	r3, [pc, #184]	; (8003ef8 <HAL_RCC_OscConfig+0x7c4>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d152      	bne.n	8003eee <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e48:	4b2b      	ldr	r3, [pc, #172]	; (8003ef8 <HAL_RCC_OscConfig+0x7c4>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a2a      	ldr	r2, [pc, #168]	; (8003ef8 <HAL_RCC_OscConfig+0x7c4>)
 8003e4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e52:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e54:	4b28      	ldr	r3, [pc, #160]	; (8003ef8 <HAL_RCC_OscConfig+0x7c4>)
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	4a27      	ldr	r2, [pc, #156]	; (8003ef8 <HAL_RCC_OscConfig+0x7c4>)
 8003e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e5e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e60:	f7fe f8a2 	bl	8001fa8 <HAL_GetTick>
 8003e64:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e68:	f7fe f89e 	bl	8001fa8 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e03a      	b.n	8003ef0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e7a:	4b1f      	ldr	r3, [pc, #124]	; (8003ef8 <HAL_RCC_OscConfig+0x7c4>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d0f0      	beq.n	8003e68 <HAL_RCC_OscConfig+0x734>
 8003e86:	e032      	b.n	8003eee <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	2b0c      	cmp	r3, #12
 8003e8c:	d02d      	beq.n	8003eea <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e8e:	4b1a      	ldr	r3, [pc, #104]	; (8003ef8 <HAL_RCC_OscConfig+0x7c4>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a19      	ldr	r2, [pc, #100]	; (8003ef8 <HAL_RCC_OscConfig+0x7c4>)
 8003e94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e98:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003e9a:	4b17      	ldr	r3, [pc, #92]	; (8003ef8 <HAL_RCC_OscConfig+0x7c4>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d105      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003ea6:	4b14      	ldr	r3, [pc, #80]	; (8003ef8 <HAL_RCC_OscConfig+0x7c4>)
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	4a13      	ldr	r2, [pc, #76]	; (8003ef8 <HAL_RCC_OscConfig+0x7c4>)
 8003eac:	f023 0303 	bic.w	r3, r3, #3
 8003eb0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003eb2:	4b11      	ldr	r3, [pc, #68]	; (8003ef8 <HAL_RCC_OscConfig+0x7c4>)
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	4a10      	ldr	r2, [pc, #64]	; (8003ef8 <HAL_RCC_OscConfig+0x7c4>)
 8003eb8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003ebc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ec0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec2:	f7fe f871 	bl	8001fa8 <HAL_GetTick>
 8003ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ec8:	e008      	b.n	8003edc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eca:	f7fe f86d 	bl	8001fa8 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e009      	b.n	8003ef0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003edc:	4b06      	ldr	r3, [pc, #24]	; (8003ef8 <HAL_RCC_OscConfig+0x7c4>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1f0      	bne.n	8003eca <HAL_RCC_OscConfig+0x796>
 8003ee8:	e001      	b.n	8003eee <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e000      	b.n	8003ef0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3720      	adds	r7, #32
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	f99d808c 	.word	0xf99d808c

08003f00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e0c8      	b.n	80040a6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f14:	4b66      	ldr	r3, [pc, #408]	; (80040b0 <HAL_RCC_ClockConfig+0x1b0>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d910      	bls.n	8003f44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f22:	4b63      	ldr	r3, [pc, #396]	; (80040b0 <HAL_RCC_ClockConfig+0x1b0>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f023 0207 	bic.w	r2, r3, #7
 8003f2a:	4961      	ldr	r1, [pc, #388]	; (80040b0 <HAL_RCC_ClockConfig+0x1b0>)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f32:	4b5f      	ldr	r3, [pc, #380]	; (80040b0 <HAL_RCC_ClockConfig+0x1b0>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d001      	beq.n	8003f44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e0b0      	b.n	80040a6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d04c      	beq.n	8003fea <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2b03      	cmp	r3, #3
 8003f56:	d107      	bne.n	8003f68 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f58:	4b56      	ldr	r3, [pc, #344]	; (80040b4 <HAL_RCC_ClockConfig+0x1b4>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d121      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e09e      	b.n	80040a6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d107      	bne.n	8003f80 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f70:	4b50      	ldr	r3, [pc, #320]	; (80040b4 <HAL_RCC_ClockConfig+0x1b4>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d115      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e092      	b.n	80040a6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d107      	bne.n	8003f98 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f88:	4b4a      	ldr	r3, [pc, #296]	; (80040b4 <HAL_RCC_ClockConfig+0x1b4>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d109      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e086      	b.n	80040a6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f98:	4b46      	ldr	r3, [pc, #280]	; (80040b4 <HAL_RCC_ClockConfig+0x1b4>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e07e      	b.n	80040a6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fa8:	4b42      	ldr	r3, [pc, #264]	; (80040b4 <HAL_RCC_ClockConfig+0x1b4>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f023 0203 	bic.w	r2, r3, #3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	493f      	ldr	r1, [pc, #252]	; (80040b4 <HAL_RCC_ClockConfig+0x1b4>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fba:	f7fd fff5 	bl	8001fa8 <HAL_GetTick>
 8003fbe:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fc0:	e00a      	b.n	8003fd8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fc2:	f7fd fff1 	bl	8001fa8 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e066      	b.n	80040a6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd8:	4b36      	ldr	r3, [pc, #216]	; (80040b4 <HAL_RCC_ClockConfig+0x1b4>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f003 020c 	and.w	r2, r3, #12
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d1eb      	bne.n	8003fc2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d008      	beq.n	8004008 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ff6:	4b2f      	ldr	r3, [pc, #188]	; (80040b4 <HAL_RCC_ClockConfig+0x1b4>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	492c      	ldr	r1, [pc, #176]	; (80040b4 <HAL_RCC_ClockConfig+0x1b4>)
 8004004:	4313      	orrs	r3, r2
 8004006:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004008:	4b29      	ldr	r3, [pc, #164]	; (80040b0 <HAL_RCC_ClockConfig+0x1b0>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	429a      	cmp	r2, r3
 8004014:	d210      	bcs.n	8004038 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004016:	4b26      	ldr	r3, [pc, #152]	; (80040b0 <HAL_RCC_ClockConfig+0x1b0>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f023 0207 	bic.w	r2, r3, #7
 800401e:	4924      	ldr	r1, [pc, #144]	; (80040b0 <HAL_RCC_ClockConfig+0x1b0>)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	4313      	orrs	r3, r2
 8004024:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004026:	4b22      	ldr	r3, [pc, #136]	; (80040b0 <HAL_RCC_ClockConfig+0x1b0>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	429a      	cmp	r2, r3
 8004032:	d001      	beq.n	8004038 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e036      	b.n	80040a6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b00      	cmp	r3, #0
 8004042:	d008      	beq.n	8004056 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004044:	4b1b      	ldr	r3, [pc, #108]	; (80040b4 <HAL_RCC_ClockConfig+0x1b4>)
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	4918      	ldr	r1, [pc, #96]	; (80040b4 <HAL_RCC_ClockConfig+0x1b4>)
 8004052:	4313      	orrs	r3, r2
 8004054:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0308 	and.w	r3, r3, #8
 800405e:	2b00      	cmp	r3, #0
 8004060:	d009      	beq.n	8004076 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004062:	4b14      	ldr	r3, [pc, #80]	; (80040b4 <HAL_RCC_ClockConfig+0x1b4>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	4910      	ldr	r1, [pc, #64]	; (80040b4 <HAL_RCC_ClockConfig+0x1b4>)
 8004072:	4313      	orrs	r3, r2
 8004074:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004076:	f000 f825 	bl	80040c4 <HAL_RCC_GetSysClockFreq>
 800407a:	4602      	mov	r2, r0
 800407c:	4b0d      	ldr	r3, [pc, #52]	; (80040b4 <HAL_RCC_ClockConfig+0x1b4>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	091b      	lsrs	r3, r3, #4
 8004082:	f003 030f 	and.w	r3, r3, #15
 8004086:	490c      	ldr	r1, [pc, #48]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004088:	5ccb      	ldrb	r3, [r1, r3]
 800408a:	f003 031f 	and.w	r3, r3, #31
 800408e:	fa22 f303 	lsr.w	r3, r2, r3
 8004092:	4a0a      	ldr	r2, [pc, #40]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004094:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004096:	4b0a      	ldr	r3, [pc, #40]	; (80040c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4618      	mov	r0, r3
 800409c:	f7fd ff34 	bl	8001f08 <HAL_InitTick>
 80040a0:	4603      	mov	r3, r0
 80040a2:	72fb      	strb	r3, [r7, #11]

  return status;
 80040a4:	7afb      	ldrb	r3, [r7, #11]
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	40022000 	.word	0x40022000
 80040b4:	40021000 	.word	0x40021000
 80040b8:	080068ec 	.word	0x080068ec
 80040bc:	20000000 	.word	0x20000000
 80040c0:	20000004 	.word	0x20000004

080040c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b089      	sub	sp, #36	; 0x24
 80040c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80040ca:	2300      	movs	r3, #0
 80040cc:	61fb      	str	r3, [r7, #28]
 80040ce:	2300      	movs	r3, #0
 80040d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040d2:	4b3e      	ldr	r3, [pc, #248]	; (80041cc <HAL_RCC_GetSysClockFreq+0x108>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 030c 	and.w	r3, r3, #12
 80040da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040dc:	4b3b      	ldr	r3, [pc, #236]	; (80041cc <HAL_RCC_GetSysClockFreq+0x108>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f003 0303 	and.w	r3, r3, #3
 80040e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d005      	beq.n	80040f8 <HAL_RCC_GetSysClockFreq+0x34>
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	2b0c      	cmp	r3, #12
 80040f0:	d121      	bne.n	8004136 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d11e      	bne.n	8004136 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80040f8:	4b34      	ldr	r3, [pc, #208]	; (80041cc <HAL_RCC_GetSysClockFreq+0x108>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0308 	and.w	r3, r3, #8
 8004100:	2b00      	cmp	r3, #0
 8004102:	d107      	bne.n	8004114 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004104:	4b31      	ldr	r3, [pc, #196]	; (80041cc <HAL_RCC_GetSysClockFreq+0x108>)
 8004106:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800410a:	0a1b      	lsrs	r3, r3, #8
 800410c:	f003 030f 	and.w	r3, r3, #15
 8004110:	61fb      	str	r3, [r7, #28]
 8004112:	e005      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004114:	4b2d      	ldr	r3, [pc, #180]	; (80041cc <HAL_RCC_GetSysClockFreq+0x108>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	091b      	lsrs	r3, r3, #4
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004120:	4a2b      	ldr	r2, [pc, #172]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004128:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10d      	bne.n	800414c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004134:	e00a      	b.n	800414c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	2b04      	cmp	r3, #4
 800413a:	d102      	bne.n	8004142 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800413c:	4b25      	ldr	r3, [pc, #148]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800413e:	61bb      	str	r3, [r7, #24]
 8004140:	e004      	b.n	800414c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	2b08      	cmp	r3, #8
 8004146:	d101      	bne.n	800414c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004148:	4b23      	ldr	r3, [pc, #140]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800414a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	2b0c      	cmp	r3, #12
 8004150:	d134      	bne.n	80041bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004152:	4b1e      	ldr	r3, [pc, #120]	; (80041cc <HAL_RCC_GetSysClockFreq+0x108>)
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	f003 0303 	and.w	r3, r3, #3
 800415a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	2b02      	cmp	r3, #2
 8004160:	d003      	beq.n	800416a <HAL_RCC_GetSysClockFreq+0xa6>
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2b03      	cmp	r3, #3
 8004166:	d003      	beq.n	8004170 <HAL_RCC_GetSysClockFreq+0xac>
 8004168:	e005      	b.n	8004176 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800416a:	4b1a      	ldr	r3, [pc, #104]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800416c:	617b      	str	r3, [r7, #20]
      break;
 800416e:	e005      	b.n	800417c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004170:	4b19      	ldr	r3, [pc, #100]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004172:	617b      	str	r3, [r7, #20]
      break;
 8004174:	e002      	b.n	800417c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	617b      	str	r3, [r7, #20]
      break;
 800417a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800417c:	4b13      	ldr	r3, [pc, #76]	; (80041cc <HAL_RCC_GetSysClockFreq+0x108>)
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	091b      	lsrs	r3, r3, #4
 8004182:	f003 0307 	and.w	r3, r3, #7
 8004186:	3301      	adds	r3, #1
 8004188:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800418a:	4b10      	ldr	r3, [pc, #64]	; (80041cc <HAL_RCC_GetSysClockFreq+0x108>)
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	0a1b      	lsrs	r3, r3, #8
 8004190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	fb02 f203 	mul.w	r2, r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041a2:	4b0a      	ldr	r3, [pc, #40]	; (80041cc <HAL_RCC_GetSysClockFreq+0x108>)
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	0e5b      	lsrs	r3, r3, #25
 80041a8:	f003 0303 	and.w	r3, r3, #3
 80041ac:	3301      	adds	r3, #1
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80041bc:	69bb      	ldr	r3, [r7, #24]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3724      	adds	r7, #36	; 0x24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	40021000 	.word	0x40021000
 80041d0:	08006904 	.word	0x08006904
 80041d4:	00f42400 	.word	0x00f42400
 80041d8:	007a1200 	.word	0x007a1200

080041dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041e0:	4b03      	ldr	r3, [pc, #12]	; (80041f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80041e2:	681b      	ldr	r3, [r3, #0]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	20000000 	.word	0x20000000

080041f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80041f8:	f7ff fff0 	bl	80041dc <HAL_RCC_GetHCLKFreq>
 80041fc:	4602      	mov	r2, r0
 80041fe:	4b06      	ldr	r3, [pc, #24]	; (8004218 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	0a1b      	lsrs	r3, r3, #8
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	4904      	ldr	r1, [pc, #16]	; (800421c <HAL_RCC_GetPCLK1Freq+0x28>)
 800420a:	5ccb      	ldrb	r3, [r1, r3]
 800420c:	f003 031f 	and.w	r3, r3, #31
 8004210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004214:	4618      	mov	r0, r3
 8004216:	bd80      	pop	{r7, pc}
 8004218:	40021000 	.word	0x40021000
 800421c:	080068fc 	.word	0x080068fc

08004220 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004224:	f7ff ffda 	bl	80041dc <HAL_RCC_GetHCLKFreq>
 8004228:	4602      	mov	r2, r0
 800422a:	4b06      	ldr	r3, [pc, #24]	; (8004244 <HAL_RCC_GetPCLK2Freq+0x24>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	0adb      	lsrs	r3, r3, #11
 8004230:	f003 0307 	and.w	r3, r3, #7
 8004234:	4904      	ldr	r1, [pc, #16]	; (8004248 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004236:	5ccb      	ldrb	r3, [r1, r3]
 8004238:	f003 031f 	and.w	r3, r3, #31
 800423c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004240:	4618      	mov	r0, r3
 8004242:	bd80      	pop	{r7, pc}
 8004244:	40021000 	.word	0x40021000
 8004248:	080068fc 	.word	0x080068fc

0800424c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004254:	2300      	movs	r3, #0
 8004256:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004258:	4b2a      	ldr	r3, [pc, #168]	; (8004304 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800425a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d003      	beq.n	800426c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004264:	f7ff f936 	bl	80034d4 <HAL_PWREx_GetVoltageRange>
 8004268:	6178      	str	r0, [r7, #20]
 800426a:	e014      	b.n	8004296 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800426c:	4b25      	ldr	r3, [pc, #148]	; (8004304 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800426e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004270:	4a24      	ldr	r2, [pc, #144]	; (8004304 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004276:	6593      	str	r3, [r2, #88]	; 0x58
 8004278:	4b22      	ldr	r3, [pc, #136]	; (8004304 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800427a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004284:	f7ff f926 	bl	80034d4 <HAL_PWREx_GetVoltageRange>
 8004288:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800428a:	4b1e      	ldr	r3, [pc, #120]	; (8004304 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800428c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428e:	4a1d      	ldr	r2, [pc, #116]	; (8004304 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004294:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800429c:	d10b      	bne.n	80042b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b80      	cmp	r3, #128	; 0x80
 80042a2:	d919      	bls.n	80042d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2ba0      	cmp	r3, #160	; 0xa0
 80042a8:	d902      	bls.n	80042b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042aa:	2302      	movs	r3, #2
 80042ac:	613b      	str	r3, [r7, #16]
 80042ae:	e013      	b.n	80042d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042b0:	2301      	movs	r3, #1
 80042b2:	613b      	str	r3, [r7, #16]
 80042b4:	e010      	b.n	80042d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2b80      	cmp	r3, #128	; 0x80
 80042ba:	d902      	bls.n	80042c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80042bc:	2303      	movs	r3, #3
 80042be:	613b      	str	r3, [r7, #16]
 80042c0:	e00a      	b.n	80042d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b80      	cmp	r3, #128	; 0x80
 80042c6:	d102      	bne.n	80042ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042c8:	2302      	movs	r3, #2
 80042ca:	613b      	str	r3, [r7, #16]
 80042cc:	e004      	b.n	80042d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b70      	cmp	r3, #112	; 0x70
 80042d2:	d101      	bne.n	80042d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042d4:	2301      	movs	r3, #1
 80042d6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80042d8:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f023 0207 	bic.w	r2, r3, #7
 80042e0:	4909      	ldr	r1, [pc, #36]	; (8004308 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80042e8:	4b07      	ldr	r3, [pc, #28]	; (8004308 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d001      	beq.n	80042fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e000      	b.n	80042fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3718      	adds	r7, #24
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	40021000 	.word	0x40021000
 8004308:	40022000 	.word	0x40022000

0800430c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004314:	2300      	movs	r3, #0
 8004316:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004318:	2300      	movs	r3, #0
 800431a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004324:	2b00      	cmp	r3, #0
 8004326:	d041      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800432c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004330:	d02a      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004332:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004336:	d824      	bhi.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004338:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800433c:	d008      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800433e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004342:	d81e      	bhi.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00a      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004348:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800434c:	d010      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800434e:	e018      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004350:	4b86      	ldr	r3, [pc, #536]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	4a85      	ldr	r2, [pc, #532]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800435a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800435c:	e015      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	3304      	adds	r3, #4
 8004362:	2100      	movs	r1, #0
 8004364:	4618      	mov	r0, r3
 8004366:	f000 facb 	bl	8004900 <RCCEx_PLLSAI1_Config>
 800436a:	4603      	mov	r3, r0
 800436c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800436e:	e00c      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3320      	adds	r3, #32
 8004374:	2100      	movs	r1, #0
 8004376:	4618      	mov	r0, r3
 8004378:	f000 fbb6 	bl	8004ae8 <RCCEx_PLLSAI2_Config>
 800437c:	4603      	mov	r3, r0
 800437e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004380:	e003      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	74fb      	strb	r3, [r7, #19]
      break;
 8004386:	e000      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004388:	bf00      	nop
    }

    if(ret == HAL_OK)
 800438a:	7cfb      	ldrb	r3, [r7, #19]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10b      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004390:	4b76      	ldr	r3, [pc, #472]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004396:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800439e:	4973      	ldr	r1, [pc, #460]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80043a6:	e001      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a8:	7cfb      	ldrb	r3, [r7, #19]
 80043aa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d041      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80043c0:	d02a      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80043c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80043c6:	d824      	bhi.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80043c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043cc:	d008      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80043ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043d2:	d81e      	bhi.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00a      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80043d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043dc:	d010      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80043de:	e018      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043e0:	4b62      	ldr	r3, [pc, #392]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	4a61      	ldr	r2, [pc, #388]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043ec:	e015      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	3304      	adds	r3, #4
 80043f2:	2100      	movs	r1, #0
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 fa83 	bl	8004900 <RCCEx_PLLSAI1_Config>
 80043fa:	4603      	mov	r3, r0
 80043fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043fe:	e00c      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	3320      	adds	r3, #32
 8004404:	2100      	movs	r1, #0
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fb6e 	bl	8004ae8 <RCCEx_PLLSAI2_Config>
 800440c:	4603      	mov	r3, r0
 800440e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004410:	e003      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	74fb      	strb	r3, [r7, #19]
      break;
 8004416:	e000      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004418:	bf00      	nop
    }

    if(ret == HAL_OK)
 800441a:	7cfb      	ldrb	r3, [r7, #19]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10b      	bne.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004420:	4b52      	ldr	r3, [pc, #328]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004426:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800442e:	494f      	ldr	r1, [pc, #316]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004436:	e001      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004438:	7cfb      	ldrb	r3, [r7, #19]
 800443a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 80a0 	beq.w	800458a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800444a:	2300      	movs	r3, #0
 800444c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800444e:	4b47      	ldr	r3, [pc, #284]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800445a:	2301      	movs	r3, #1
 800445c:	e000      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800445e:	2300      	movs	r3, #0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00d      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004464:	4b41      	ldr	r3, [pc, #260]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004468:	4a40      	ldr	r2, [pc, #256]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800446a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800446e:	6593      	str	r3, [r2, #88]	; 0x58
 8004470:	4b3e      	ldr	r3, [pc, #248]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004478:	60bb      	str	r3, [r7, #8]
 800447a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800447c:	2301      	movs	r3, #1
 800447e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004480:	4b3b      	ldr	r3, [pc, #236]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a3a      	ldr	r2, [pc, #232]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800448a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800448c:	f7fd fd8c 	bl	8001fa8 <HAL_GetTick>
 8004490:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004492:	e009      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004494:	f7fd fd88 	bl	8001fa8 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d902      	bls.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	74fb      	strb	r3, [r7, #19]
        break;
 80044a6:	e005      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044a8:	4b31      	ldr	r3, [pc, #196]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0ef      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80044b4:	7cfb      	ldrb	r3, [r7, #19]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d15c      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044ba:	4b2c      	ldr	r3, [pc, #176]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d01f      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d019      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044d8:	4b24      	ldr	r3, [pc, #144]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044e4:	4b21      	ldr	r3, [pc, #132]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ea:	4a20      	ldr	r2, [pc, #128]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044f4:	4b1d      	ldr	r3, [pc, #116]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fa:	4a1c      	ldr	r2, [pc, #112]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004500:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004504:	4a19      	ldr	r2, [pc, #100]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d016      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004516:	f7fd fd47 	bl	8001fa8 <HAL_GetTick>
 800451a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800451c:	e00b      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800451e:	f7fd fd43 	bl	8001fa8 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	f241 3288 	movw	r2, #5000	; 0x1388
 800452c:	4293      	cmp	r3, r2
 800452e:	d902      	bls.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	74fb      	strb	r3, [r7, #19]
            break;
 8004534:	e006      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004536:	4b0d      	ldr	r3, [pc, #52]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0ec      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004544:	7cfb      	ldrb	r3, [r7, #19]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10c      	bne.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800454a:	4b08      	ldr	r3, [pc, #32]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800454c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004550:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800455a:	4904      	ldr	r1, [pc, #16]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800455c:	4313      	orrs	r3, r2
 800455e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004562:	e009      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004564:	7cfb      	ldrb	r3, [r7, #19]
 8004566:	74bb      	strb	r3, [r7, #18]
 8004568:	e006      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800456a:	bf00      	nop
 800456c:	40021000 	.word	0x40021000
 8004570:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004574:	7cfb      	ldrb	r3, [r7, #19]
 8004576:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004578:	7c7b      	ldrb	r3, [r7, #17]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d105      	bne.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800457e:	4b9e      	ldr	r3, [pc, #632]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004582:	4a9d      	ldr	r2, [pc, #628]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004584:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004588:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004596:	4b98      	ldr	r3, [pc, #608]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459c:	f023 0203 	bic.w	r2, r3, #3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a4:	4994      	ldr	r1, [pc, #592]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00a      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045b8:	4b8f      	ldr	r3, [pc, #572]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045be:	f023 020c 	bic.w	r2, r3, #12
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c6:	498c      	ldr	r1, [pc, #560]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0304 	and.w	r3, r3, #4
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045da:	4b87      	ldr	r3, [pc, #540]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e8:	4983      	ldr	r1, [pc, #524]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0308 	and.w	r3, r3, #8
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00a      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045fc:	4b7e      	ldr	r3, [pc, #504]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004602:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460a:	497b      	ldr	r1, [pc, #492]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800460c:	4313      	orrs	r3, r2
 800460e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0310 	and.w	r3, r3, #16
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00a      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800461e:	4b76      	ldr	r3, [pc, #472]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004624:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800462c:	4972      	ldr	r1, [pc, #456]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800462e:	4313      	orrs	r3, r2
 8004630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0320 	and.w	r3, r3, #32
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00a      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004640:	4b6d      	ldr	r3, [pc, #436]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004646:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800464e:	496a      	ldr	r1, [pc, #424]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004650:	4313      	orrs	r3, r2
 8004652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00a      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004662:	4b65      	ldr	r3, [pc, #404]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004668:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004670:	4961      	ldr	r1, [pc, #388]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004672:	4313      	orrs	r3, r2
 8004674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00a      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004684:	4b5c      	ldr	r3, [pc, #368]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800468a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004692:	4959      	ldr	r1, [pc, #356]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004694:	4313      	orrs	r3, r2
 8004696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00a      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046a6:	4b54      	ldr	r3, [pc, #336]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b4:	4950      	ldr	r1, [pc, #320]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00a      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046c8:	4b4b      	ldr	r3, [pc, #300]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d6:	4948      	ldr	r1, [pc, #288]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00a      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046ea:	4b43      	ldr	r3, [pc, #268]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f8:	493f      	ldr	r1, [pc, #252]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d028      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800470c:	4b3a      	ldr	r3, [pc, #232]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800470e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004712:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800471a:	4937      	ldr	r1, [pc, #220]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800471c:	4313      	orrs	r3, r2
 800471e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004726:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800472a:	d106      	bne.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800472c:	4b32      	ldr	r3, [pc, #200]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	4a31      	ldr	r2, [pc, #196]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004732:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004736:	60d3      	str	r3, [r2, #12]
 8004738:	e011      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800473e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004742:	d10c      	bne.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3304      	adds	r3, #4
 8004748:	2101      	movs	r1, #1
 800474a:	4618      	mov	r0, r3
 800474c:	f000 f8d8 	bl	8004900 <RCCEx_PLLSAI1_Config>
 8004750:	4603      	mov	r3, r0
 8004752:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004754:	7cfb      	ldrb	r3, [r7, #19]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800475a:	7cfb      	ldrb	r3, [r7, #19]
 800475c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d028      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800476a:	4b23      	ldr	r3, [pc, #140]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800476c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004770:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004778:	491f      	ldr	r1, [pc, #124]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800477a:	4313      	orrs	r3, r2
 800477c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004784:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004788:	d106      	bne.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800478a:	4b1b      	ldr	r3, [pc, #108]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	4a1a      	ldr	r2, [pc, #104]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004790:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004794:	60d3      	str	r3, [r2, #12]
 8004796:	e011      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047a0:	d10c      	bne.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	3304      	adds	r3, #4
 80047a6:	2101      	movs	r1, #1
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 f8a9 	bl	8004900 <RCCEx_PLLSAI1_Config>
 80047ae:	4603      	mov	r3, r0
 80047b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047b2:	7cfb      	ldrb	r3, [r7, #19]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d001      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80047b8:	7cfb      	ldrb	r3, [r7, #19]
 80047ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d02b      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047c8:	4b0b      	ldr	r3, [pc, #44]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047d6:	4908      	ldr	r1, [pc, #32]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047e6:	d109      	bne.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047e8:	4b03      	ldr	r3, [pc, #12]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	4a02      	ldr	r2, [pc, #8]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047f2:	60d3      	str	r3, [r2, #12]
 80047f4:	e014      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80047f6:	bf00      	nop
 80047f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004800:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004804:	d10c      	bne.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	3304      	adds	r3, #4
 800480a:	2101      	movs	r1, #1
 800480c:	4618      	mov	r0, r3
 800480e:	f000 f877 	bl	8004900 <RCCEx_PLLSAI1_Config>
 8004812:	4603      	mov	r3, r0
 8004814:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004816:	7cfb      	ldrb	r3, [r7, #19]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800481c:	7cfb      	ldrb	r3, [r7, #19]
 800481e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d02f      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800482c:	4b2b      	ldr	r3, [pc, #172]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800482e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004832:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800483a:	4928      	ldr	r1, [pc, #160]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800483c:	4313      	orrs	r3, r2
 800483e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004846:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800484a:	d10d      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3304      	adds	r3, #4
 8004850:	2102      	movs	r1, #2
 8004852:	4618      	mov	r0, r3
 8004854:	f000 f854 	bl	8004900 <RCCEx_PLLSAI1_Config>
 8004858:	4603      	mov	r3, r0
 800485a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800485c:	7cfb      	ldrb	r3, [r7, #19]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d014      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004862:	7cfb      	ldrb	r3, [r7, #19]
 8004864:	74bb      	strb	r3, [r7, #18]
 8004866:	e011      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800486c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004870:	d10c      	bne.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	3320      	adds	r3, #32
 8004876:	2102      	movs	r1, #2
 8004878:	4618      	mov	r0, r3
 800487a:	f000 f935 	bl	8004ae8 <RCCEx_PLLSAI2_Config>
 800487e:	4603      	mov	r3, r0
 8004880:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004882:	7cfb      	ldrb	r3, [r7, #19]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004888:	7cfb      	ldrb	r3, [r7, #19]
 800488a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00a      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004898:	4b10      	ldr	r3, [pc, #64]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800489a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800489e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048a6:	490d      	ldr	r1, [pc, #52]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00b      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048ba:	4b08      	ldr	r3, [pc, #32]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048ca:	4904      	ldr	r1, [pc, #16]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80048d2:	7cbb      	ldrb	r3, [r7, #18]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3718      	adds	r7, #24
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	40021000 	.word	0x40021000

080048e0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80048e4:	4b05      	ldr	r3, [pc, #20]	; (80048fc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a04      	ldr	r2, [pc, #16]	; (80048fc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80048ea:	f043 0304 	orr.w	r3, r3, #4
 80048ee:	6013      	str	r3, [r2, #0]
}
 80048f0:	bf00      	nop
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40021000 	.word	0x40021000

08004900 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800490a:	2300      	movs	r3, #0
 800490c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800490e:	4b75      	ldr	r3, [pc, #468]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f003 0303 	and.w	r3, r3, #3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d018      	beq.n	800494c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800491a:	4b72      	ldr	r3, [pc, #456]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f003 0203 	and.w	r2, r3, #3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	429a      	cmp	r2, r3
 8004928:	d10d      	bne.n	8004946 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
       ||
 800492e:	2b00      	cmp	r3, #0
 8004930:	d009      	beq.n	8004946 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004932:	4b6c      	ldr	r3, [pc, #432]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	091b      	lsrs	r3, r3, #4
 8004938:	f003 0307 	and.w	r3, r3, #7
 800493c:	1c5a      	adds	r2, r3, #1
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
       ||
 8004942:	429a      	cmp	r2, r3
 8004944:	d047      	beq.n	80049d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	73fb      	strb	r3, [r7, #15]
 800494a:	e044      	b.n	80049d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b03      	cmp	r3, #3
 8004952:	d018      	beq.n	8004986 <RCCEx_PLLSAI1_Config+0x86>
 8004954:	2b03      	cmp	r3, #3
 8004956:	d825      	bhi.n	80049a4 <RCCEx_PLLSAI1_Config+0xa4>
 8004958:	2b01      	cmp	r3, #1
 800495a:	d002      	beq.n	8004962 <RCCEx_PLLSAI1_Config+0x62>
 800495c:	2b02      	cmp	r3, #2
 800495e:	d009      	beq.n	8004974 <RCCEx_PLLSAI1_Config+0x74>
 8004960:	e020      	b.n	80049a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004962:	4b60      	ldr	r3, [pc, #384]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d11d      	bne.n	80049aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004972:	e01a      	b.n	80049aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004974:	4b5b      	ldr	r3, [pc, #364]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800497c:	2b00      	cmp	r3, #0
 800497e:	d116      	bne.n	80049ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004984:	e013      	b.n	80049ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004986:	4b57      	ldr	r3, [pc, #348]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10f      	bne.n	80049b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004992:	4b54      	ldr	r3, [pc, #336]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d109      	bne.n	80049b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049a2:	e006      	b.n	80049b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	73fb      	strb	r3, [r7, #15]
      break;
 80049a8:	e004      	b.n	80049b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049aa:	bf00      	nop
 80049ac:	e002      	b.n	80049b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049ae:	bf00      	nop
 80049b0:	e000      	b.n	80049b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80049b4:	7bfb      	ldrb	r3, [r7, #15]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10d      	bne.n	80049d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049ba:	4b4a      	ldr	r3, [pc, #296]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6819      	ldr	r1, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	3b01      	subs	r3, #1
 80049cc:	011b      	lsls	r3, r3, #4
 80049ce:	430b      	orrs	r3, r1
 80049d0:	4944      	ldr	r1, [pc, #272]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049d6:	7bfb      	ldrb	r3, [r7, #15]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d17d      	bne.n	8004ad8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80049dc:	4b41      	ldr	r3, [pc, #260]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a40      	ldr	r2, [pc, #256]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049e8:	f7fd fade 	bl	8001fa8 <HAL_GetTick>
 80049ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049ee:	e009      	b.n	8004a04 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049f0:	f7fd fada 	bl	8001fa8 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d902      	bls.n	8004a04 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	73fb      	strb	r3, [r7, #15]
        break;
 8004a02:	e005      	b.n	8004a10 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a04:	4b37      	ldr	r3, [pc, #220]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1ef      	bne.n	80049f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d160      	bne.n	8004ad8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d111      	bne.n	8004a40 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a1c:	4b31      	ldr	r3, [pc, #196]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6892      	ldr	r2, [r2, #8]
 8004a2c:	0211      	lsls	r1, r2, #8
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	68d2      	ldr	r2, [r2, #12]
 8004a32:	0912      	lsrs	r2, r2, #4
 8004a34:	0452      	lsls	r2, r2, #17
 8004a36:	430a      	orrs	r2, r1
 8004a38:	492a      	ldr	r1, [pc, #168]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	610b      	str	r3, [r1, #16]
 8004a3e:	e027      	b.n	8004a90 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d112      	bne.n	8004a6c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a46:	4b27      	ldr	r3, [pc, #156]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004a4e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	6892      	ldr	r2, [r2, #8]
 8004a56:	0211      	lsls	r1, r2, #8
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6912      	ldr	r2, [r2, #16]
 8004a5c:	0852      	lsrs	r2, r2, #1
 8004a5e:	3a01      	subs	r2, #1
 8004a60:	0552      	lsls	r2, r2, #21
 8004a62:	430a      	orrs	r2, r1
 8004a64:	491f      	ldr	r1, [pc, #124]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	610b      	str	r3, [r1, #16]
 8004a6a:	e011      	b.n	8004a90 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a6c:	4b1d      	ldr	r3, [pc, #116]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a74:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6892      	ldr	r2, [r2, #8]
 8004a7c:	0211      	lsls	r1, r2, #8
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	6952      	ldr	r2, [r2, #20]
 8004a82:	0852      	lsrs	r2, r2, #1
 8004a84:	3a01      	subs	r2, #1
 8004a86:	0652      	lsls	r2, r2, #25
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	4916      	ldr	r1, [pc, #88]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a90:	4b14      	ldr	r3, [pc, #80]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a13      	ldr	r2, [pc, #76]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a9c:	f7fd fa84 	bl	8001fa8 <HAL_GetTick>
 8004aa0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004aa2:	e009      	b.n	8004ab8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004aa4:	f7fd fa80 	bl	8001fa8 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d902      	bls.n	8004ab8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	73fb      	strb	r3, [r7, #15]
          break;
 8004ab6:	e005      	b.n	8004ac4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ab8:	4b0a      	ldr	r3, [pc, #40]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d0ef      	beq.n	8004aa4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d106      	bne.n	8004ad8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004aca:	4b06      	ldr	r3, [pc, #24]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004acc:	691a      	ldr	r2, [r3, #16]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	4904      	ldr	r1, [pc, #16]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	40021000 	.word	0x40021000

08004ae8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004af2:	2300      	movs	r3, #0
 8004af4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004af6:	4b6a      	ldr	r3, [pc, #424]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	f003 0303 	and.w	r3, r3, #3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d018      	beq.n	8004b34 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004b02:	4b67      	ldr	r3, [pc, #412]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	f003 0203 	and.w	r2, r3, #3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d10d      	bne.n	8004b2e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
       ||
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d009      	beq.n	8004b2e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004b1a:	4b61      	ldr	r3, [pc, #388]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	091b      	lsrs	r3, r3, #4
 8004b20:	f003 0307 	and.w	r3, r3, #7
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
       ||
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d047      	beq.n	8004bbe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	73fb      	strb	r3, [r7, #15]
 8004b32:	e044      	b.n	8004bbe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2b03      	cmp	r3, #3
 8004b3a:	d018      	beq.n	8004b6e <RCCEx_PLLSAI2_Config+0x86>
 8004b3c:	2b03      	cmp	r3, #3
 8004b3e:	d825      	bhi.n	8004b8c <RCCEx_PLLSAI2_Config+0xa4>
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d002      	beq.n	8004b4a <RCCEx_PLLSAI2_Config+0x62>
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d009      	beq.n	8004b5c <RCCEx_PLLSAI2_Config+0x74>
 8004b48:	e020      	b.n	8004b8c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b4a:	4b55      	ldr	r3, [pc, #340]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d11d      	bne.n	8004b92 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b5a:	e01a      	b.n	8004b92 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b5c:	4b50      	ldr	r3, [pc, #320]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d116      	bne.n	8004b96 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b6c:	e013      	b.n	8004b96 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b6e:	4b4c      	ldr	r3, [pc, #304]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10f      	bne.n	8004b9a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b7a:	4b49      	ldr	r3, [pc, #292]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d109      	bne.n	8004b9a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b8a:	e006      	b.n	8004b9a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b90:	e004      	b.n	8004b9c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b92:	bf00      	nop
 8004b94:	e002      	b.n	8004b9c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b96:	bf00      	nop
 8004b98:	e000      	b.n	8004b9c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b9a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b9c:	7bfb      	ldrb	r3, [r7, #15]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d10d      	bne.n	8004bbe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ba2:	4b3f      	ldr	r3, [pc, #252]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6819      	ldr	r1, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	011b      	lsls	r3, r3, #4
 8004bb6:	430b      	orrs	r3, r1
 8004bb8:	4939      	ldr	r1, [pc, #228]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004bbe:	7bfb      	ldrb	r3, [r7, #15]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d167      	bne.n	8004c94 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004bc4:	4b36      	ldr	r3, [pc, #216]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a35      	ldr	r2, [pc, #212]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bd0:	f7fd f9ea 	bl	8001fa8 <HAL_GetTick>
 8004bd4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004bd6:	e009      	b.n	8004bec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004bd8:	f7fd f9e6 	bl	8001fa8 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d902      	bls.n	8004bec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	73fb      	strb	r3, [r7, #15]
        break;
 8004bea:	e005      	b.n	8004bf8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004bec:	4b2c      	ldr	r3, [pc, #176]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1ef      	bne.n	8004bd8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004bf8:	7bfb      	ldrb	r3, [r7, #15]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d14a      	bne.n	8004c94 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d111      	bne.n	8004c28 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c04:	4b26      	ldr	r3, [pc, #152]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	6892      	ldr	r2, [r2, #8]
 8004c14:	0211      	lsls	r1, r2, #8
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	68d2      	ldr	r2, [r2, #12]
 8004c1a:	0912      	lsrs	r2, r2, #4
 8004c1c:	0452      	lsls	r2, r2, #17
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	491f      	ldr	r1, [pc, #124]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	614b      	str	r3, [r1, #20]
 8004c26:	e011      	b.n	8004c4c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c28:	4b1d      	ldr	r3, [pc, #116]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004c30:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	6892      	ldr	r2, [r2, #8]
 8004c38:	0211      	lsls	r1, r2, #8
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	6912      	ldr	r2, [r2, #16]
 8004c3e:	0852      	lsrs	r2, r2, #1
 8004c40:	3a01      	subs	r2, #1
 8004c42:	0652      	lsls	r2, r2, #25
 8004c44:	430a      	orrs	r2, r1
 8004c46:	4916      	ldr	r1, [pc, #88]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004c4c:	4b14      	ldr	r3, [pc, #80]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a13      	ldr	r2, [pc, #76]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c56:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c58:	f7fd f9a6 	bl	8001fa8 <HAL_GetTick>
 8004c5c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c5e:	e009      	b.n	8004c74 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c60:	f7fd f9a2 	bl	8001fa8 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d902      	bls.n	8004c74 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	73fb      	strb	r3, [r7, #15]
          break;
 8004c72:	e005      	b.n	8004c80 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c74:	4b0a      	ldr	r3, [pc, #40]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d0ef      	beq.n	8004c60 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004c80:	7bfb      	ldrb	r3, [r7, #15]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d106      	bne.n	8004c94 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004c86:	4b06      	ldr	r3, [pc, #24]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c88:	695a      	ldr	r2, [r3, #20]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	4904      	ldr	r1, [pc, #16]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	40021000 	.word	0x40021000

08004ca4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e095      	b.n	8004de2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d108      	bne.n	8004cd0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cc6:	d009      	beq.n	8004cdc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	61da      	str	r2, [r3, #28]
 8004cce:	e005      	b.n	8004cdc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d106      	bne.n	8004cfc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7fc feb0 	bl	8001a5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d12:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d1c:	d902      	bls.n	8004d24 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	60fb      	str	r3, [r7, #12]
 8004d22:	e002      	b.n	8004d2a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d28:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004d32:	d007      	beq.n	8004d44 <HAL_SPI_Init+0xa0>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d3c:	d002      	beq.n	8004d44 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d54:	431a      	orrs	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	431a      	orrs	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	431a      	orrs	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d72:	431a      	orrs	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	69db      	ldr	r3, [r3, #28]
 8004d78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d7c:	431a      	orrs	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d86:	ea42 0103 	orr.w	r1, r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	430a      	orrs	r2, r1
 8004d98:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	0c1b      	lsrs	r3, r3, #16
 8004da0:	f003 0204 	and.w	r2, r3, #4
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da8:	f003 0310 	and.w	r3, r3, #16
 8004dac:	431a      	orrs	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db2:	f003 0308 	and.w	r3, r3, #8
 8004db6:	431a      	orrs	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004dc0:	ea42 0103 	orr.w	r1, r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b082      	sub	sp, #8
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d101      	bne.n	8004dfc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e040      	b.n	8004e7e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d106      	bne.n	8004e12 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f7fc fe69 	bl	8001ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2224      	movs	r2, #36	; 0x24
 8004e16:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 0201 	bic.w	r2, r2, #1
 8004e26:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 f991 	bl	8005150 <UART_SetConfig>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d101      	bne.n	8004e38 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e022      	b.n	8004e7e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d002      	beq.n	8004e46 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 fc0f 	bl	8005664 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e54:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689a      	ldr	r2, [r3, #8]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e64:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f042 0201 	orr.w	r2, r2, #1
 8004e74:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 fc96 	bl	80057a8 <UART_CheckIdleState>
 8004e7c:	4603      	mov	r3, r0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b08a      	sub	sp, #40	; 0x28
 8004e8a:	af02      	add	r7, sp, #8
 8004e8c:	60f8      	str	r0, [r7, #12]
 8004e8e:	60b9      	str	r1, [r7, #8]
 8004e90:	603b      	str	r3, [r7, #0]
 8004e92:	4613      	mov	r3, r2
 8004e94:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e9a:	2b20      	cmp	r3, #32
 8004e9c:	f040 8082 	bne.w	8004fa4 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d002      	beq.n	8004eac <HAL_UART_Transmit+0x26>
 8004ea6:	88fb      	ldrh	r3, [r7, #6]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e07a      	b.n	8004fa6 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d101      	bne.n	8004ebe <HAL_UART_Transmit+0x38>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	e073      	b.n	8004fa6 <HAL_UART_Transmit+0x120>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2221      	movs	r2, #33	; 0x21
 8004ed2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ed4:	f7fd f868 	bl	8001fa8 <HAL_GetTick>
 8004ed8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	88fa      	ldrh	r2, [r7, #6]
 8004ede:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	88fa      	ldrh	r2, [r7, #6]
 8004ee6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ef2:	d108      	bne.n	8004f06 <HAL_UART_Transmit+0x80>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d104      	bne.n	8004f06 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004efc:	2300      	movs	r3, #0
 8004efe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	61bb      	str	r3, [r7, #24]
 8004f04:	e003      	b.n	8004f0e <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004f16:	e02d      	b.n	8004f74 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	2180      	movs	r1, #128	; 0x80
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 fc89 	bl	800583a <UART_WaitOnFlagUntilTimeout>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e039      	b.n	8004fa6 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10b      	bne.n	8004f50 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	881a      	ldrh	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f44:	b292      	uxth	r2, r2
 8004f46:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	3302      	adds	r3, #2
 8004f4c:	61bb      	str	r3, [r7, #24]
 8004f4e:	e008      	b.n	8004f62 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	781a      	ldrb	r2, [r3, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	b292      	uxth	r2, r2
 8004f5a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1cb      	bne.n	8004f18 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	9300      	str	r3, [sp, #0]
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	2200      	movs	r2, #0
 8004f88:	2140      	movs	r1, #64	; 0x40
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f000 fc55 	bl	800583a <UART_WaitOnFlagUntilTimeout>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e005      	b.n	8004fa6 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2220      	movs	r2, #32
 8004f9e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	e000      	b.n	8004fa6 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004fa4:	2302      	movs	r3, #2
  }
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3720      	adds	r7, #32
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b08a      	sub	sp, #40	; 0x28
 8004fb2:	af02      	add	r7, sp, #8
 8004fb4:	60f8      	str	r0, [r7, #12]
 8004fb6:	60b9      	str	r1, [r7, #8]
 8004fb8:	603b      	str	r3, [r7, #0]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fc2:	2b20      	cmp	r3, #32
 8004fc4:	f040 80bf 	bne.w	8005146 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d002      	beq.n	8004fd4 <HAL_UART_Receive+0x26>
 8004fce:	88fb      	ldrh	r3, [r7, #6]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e0b7      	b.n	8005148 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d101      	bne.n	8004fe6 <HAL_UART_Receive+0x38>
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	e0b0      	b.n	8005148 <HAL_UART_Receive+0x19a>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2222      	movs	r2, #34	; 0x22
 8004ffa:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005002:	f7fc ffd1 	bl	8001fa8 <HAL_GetTick>
 8005006:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	88fa      	ldrh	r2, [r7, #6]
 800500c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	88fa      	ldrh	r2, [r7, #6]
 8005014:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005020:	d10e      	bne.n	8005040 <HAL_UART_Receive+0x92>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d105      	bne.n	8005036 <HAL_UART_Receive+0x88>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005030:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005034:	e02d      	b.n	8005092 <HAL_UART_Receive+0xe4>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	22ff      	movs	r2, #255	; 0xff
 800503a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800503e:	e028      	b.n	8005092 <HAL_UART_Receive+0xe4>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10d      	bne.n	8005064 <HAL_UART_Receive+0xb6>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d104      	bne.n	800505a <HAL_UART_Receive+0xac>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	22ff      	movs	r2, #255	; 0xff
 8005054:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005058:	e01b      	b.n	8005092 <HAL_UART_Receive+0xe4>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	227f      	movs	r2, #127	; 0x7f
 800505e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005062:	e016      	b.n	8005092 <HAL_UART_Receive+0xe4>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800506c:	d10d      	bne.n	800508a <HAL_UART_Receive+0xdc>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d104      	bne.n	8005080 <HAL_UART_Receive+0xd2>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	227f      	movs	r2, #127	; 0x7f
 800507a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800507e:	e008      	b.n	8005092 <HAL_UART_Receive+0xe4>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	223f      	movs	r2, #63	; 0x3f
 8005084:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005088:	e003      	b.n	8005092 <HAL_UART_Receive+0xe4>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005098:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050a2:	d108      	bne.n	80050b6 <HAL_UART_Receive+0x108>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d104      	bne.n	80050b6 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80050ac:	2300      	movs	r3, #0
 80050ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	61bb      	str	r3, [r7, #24]
 80050b4:	e003      	b.n	80050be <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050ba:	2300      	movs	r3, #0
 80050bc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80050c6:	e033      	b.n	8005130 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	2200      	movs	r2, #0
 80050d0:	2120      	movs	r1, #32
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f000 fbb1 	bl	800583a <UART_WaitOnFlagUntilTimeout>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d001      	beq.n	80050e2 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e032      	b.n	8005148 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10c      	bne.n	8005102 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	8a7b      	ldrh	r3, [r7, #18]
 80050f2:	4013      	ands	r3, r2
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	3302      	adds	r3, #2
 80050fe:	61bb      	str	r3, [r7, #24]
 8005100:	e00d      	b.n	800511e <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005108:	b29b      	uxth	r3, r3
 800510a:	b2da      	uxtb	r2, r3
 800510c:	8a7b      	ldrh	r3, [r7, #18]
 800510e:	b2db      	uxtb	r3, r3
 8005110:	4013      	ands	r3, r2
 8005112:	b2da      	uxtb	r2, r3
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	3301      	adds	r3, #1
 800511c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005124:	b29b      	uxth	r3, r3
 8005126:	3b01      	subs	r3, #1
 8005128:	b29a      	uxth	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005136:	b29b      	uxth	r3, r3
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1c5      	bne.n	80050c8 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2220      	movs	r2, #32
 8005140:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005142:	2300      	movs	r3, #0
 8005144:	e000      	b.n	8005148 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8005146:	2302      	movs	r3, #2
  }
}
 8005148:	4618      	mov	r0, r3
 800514a:	3720      	adds	r7, #32
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005150:	b5b0      	push	{r4, r5, r7, lr}
 8005152:	b088      	sub	sp, #32
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005158:	2300      	movs	r3, #0
 800515a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	431a      	orrs	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	431a      	orrs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	69db      	ldr	r3, [r3, #28]
 8005170:	4313      	orrs	r3, r2
 8005172:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	4bad      	ldr	r3, [pc, #692]	; (8005430 <UART_SetConfig+0x2e0>)
 800517c:	4013      	ands	r3, r2
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	6812      	ldr	r2, [r2, #0]
 8005182:	69f9      	ldr	r1, [r7, #28]
 8005184:	430b      	orrs	r3, r1
 8005186:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68da      	ldr	r2, [r3, #12]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4aa2      	ldr	r2, [pc, #648]	; (8005434 <UART_SetConfig+0x2e4>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d004      	beq.n	80051b8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	69fa      	ldr	r2, [r7, #28]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	69fa      	ldr	r2, [r7, #28]
 80051c8:	430a      	orrs	r2, r1
 80051ca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a99      	ldr	r2, [pc, #612]	; (8005438 <UART_SetConfig+0x2e8>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d121      	bne.n	800521a <UART_SetConfig+0xca>
 80051d6:	4b99      	ldr	r3, [pc, #612]	; (800543c <UART_SetConfig+0x2ec>)
 80051d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051dc:	f003 0303 	and.w	r3, r3, #3
 80051e0:	2b03      	cmp	r3, #3
 80051e2:	d817      	bhi.n	8005214 <UART_SetConfig+0xc4>
 80051e4:	a201      	add	r2, pc, #4	; (adr r2, 80051ec <UART_SetConfig+0x9c>)
 80051e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ea:	bf00      	nop
 80051ec:	080051fd 	.word	0x080051fd
 80051f0:	08005209 	.word	0x08005209
 80051f4:	08005203 	.word	0x08005203
 80051f8:	0800520f 	.word	0x0800520f
 80051fc:	2301      	movs	r3, #1
 80051fe:	76fb      	strb	r3, [r7, #27]
 8005200:	e0e7      	b.n	80053d2 <UART_SetConfig+0x282>
 8005202:	2302      	movs	r3, #2
 8005204:	76fb      	strb	r3, [r7, #27]
 8005206:	e0e4      	b.n	80053d2 <UART_SetConfig+0x282>
 8005208:	2304      	movs	r3, #4
 800520a:	76fb      	strb	r3, [r7, #27]
 800520c:	e0e1      	b.n	80053d2 <UART_SetConfig+0x282>
 800520e:	2308      	movs	r3, #8
 8005210:	76fb      	strb	r3, [r7, #27]
 8005212:	e0de      	b.n	80053d2 <UART_SetConfig+0x282>
 8005214:	2310      	movs	r3, #16
 8005216:	76fb      	strb	r3, [r7, #27]
 8005218:	e0db      	b.n	80053d2 <UART_SetConfig+0x282>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a88      	ldr	r2, [pc, #544]	; (8005440 <UART_SetConfig+0x2f0>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d132      	bne.n	800528a <UART_SetConfig+0x13a>
 8005224:	4b85      	ldr	r3, [pc, #532]	; (800543c <UART_SetConfig+0x2ec>)
 8005226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800522a:	f003 030c 	and.w	r3, r3, #12
 800522e:	2b0c      	cmp	r3, #12
 8005230:	d828      	bhi.n	8005284 <UART_SetConfig+0x134>
 8005232:	a201      	add	r2, pc, #4	; (adr r2, 8005238 <UART_SetConfig+0xe8>)
 8005234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005238:	0800526d 	.word	0x0800526d
 800523c:	08005285 	.word	0x08005285
 8005240:	08005285 	.word	0x08005285
 8005244:	08005285 	.word	0x08005285
 8005248:	08005279 	.word	0x08005279
 800524c:	08005285 	.word	0x08005285
 8005250:	08005285 	.word	0x08005285
 8005254:	08005285 	.word	0x08005285
 8005258:	08005273 	.word	0x08005273
 800525c:	08005285 	.word	0x08005285
 8005260:	08005285 	.word	0x08005285
 8005264:	08005285 	.word	0x08005285
 8005268:	0800527f 	.word	0x0800527f
 800526c:	2300      	movs	r3, #0
 800526e:	76fb      	strb	r3, [r7, #27]
 8005270:	e0af      	b.n	80053d2 <UART_SetConfig+0x282>
 8005272:	2302      	movs	r3, #2
 8005274:	76fb      	strb	r3, [r7, #27]
 8005276:	e0ac      	b.n	80053d2 <UART_SetConfig+0x282>
 8005278:	2304      	movs	r3, #4
 800527a:	76fb      	strb	r3, [r7, #27]
 800527c:	e0a9      	b.n	80053d2 <UART_SetConfig+0x282>
 800527e:	2308      	movs	r3, #8
 8005280:	76fb      	strb	r3, [r7, #27]
 8005282:	e0a6      	b.n	80053d2 <UART_SetConfig+0x282>
 8005284:	2310      	movs	r3, #16
 8005286:	76fb      	strb	r3, [r7, #27]
 8005288:	e0a3      	b.n	80053d2 <UART_SetConfig+0x282>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a6d      	ldr	r2, [pc, #436]	; (8005444 <UART_SetConfig+0x2f4>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d120      	bne.n	80052d6 <UART_SetConfig+0x186>
 8005294:	4b69      	ldr	r3, [pc, #420]	; (800543c <UART_SetConfig+0x2ec>)
 8005296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800529e:	2b30      	cmp	r3, #48	; 0x30
 80052a0:	d013      	beq.n	80052ca <UART_SetConfig+0x17a>
 80052a2:	2b30      	cmp	r3, #48	; 0x30
 80052a4:	d814      	bhi.n	80052d0 <UART_SetConfig+0x180>
 80052a6:	2b20      	cmp	r3, #32
 80052a8:	d009      	beq.n	80052be <UART_SetConfig+0x16e>
 80052aa:	2b20      	cmp	r3, #32
 80052ac:	d810      	bhi.n	80052d0 <UART_SetConfig+0x180>
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d002      	beq.n	80052b8 <UART_SetConfig+0x168>
 80052b2:	2b10      	cmp	r3, #16
 80052b4:	d006      	beq.n	80052c4 <UART_SetConfig+0x174>
 80052b6:	e00b      	b.n	80052d0 <UART_SetConfig+0x180>
 80052b8:	2300      	movs	r3, #0
 80052ba:	76fb      	strb	r3, [r7, #27]
 80052bc:	e089      	b.n	80053d2 <UART_SetConfig+0x282>
 80052be:	2302      	movs	r3, #2
 80052c0:	76fb      	strb	r3, [r7, #27]
 80052c2:	e086      	b.n	80053d2 <UART_SetConfig+0x282>
 80052c4:	2304      	movs	r3, #4
 80052c6:	76fb      	strb	r3, [r7, #27]
 80052c8:	e083      	b.n	80053d2 <UART_SetConfig+0x282>
 80052ca:	2308      	movs	r3, #8
 80052cc:	76fb      	strb	r3, [r7, #27]
 80052ce:	e080      	b.n	80053d2 <UART_SetConfig+0x282>
 80052d0:	2310      	movs	r3, #16
 80052d2:	76fb      	strb	r3, [r7, #27]
 80052d4:	e07d      	b.n	80053d2 <UART_SetConfig+0x282>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a5b      	ldr	r2, [pc, #364]	; (8005448 <UART_SetConfig+0x2f8>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d120      	bne.n	8005322 <UART_SetConfig+0x1d2>
 80052e0:	4b56      	ldr	r3, [pc, #344]	; (800543c <UART_SetConfig+0x2ec>)
 80052e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80052ea:	2bc0      	cmp	r3, #192	; 0xc0
 80052ec:	d013      	beq.n	8005316 <UART_SetConfig+0x1c6>
 80052ee:	2bc0      	cmp	r3, #192	; 0xc0
 80052f0:	d814      	bhi.n	800531c <UART_SetConfig+0x1cc>
 80052f2:	2b80      	cmp	r3, #128	; 0x80
 80052f4:	d009      	beq.n	800530a <UART_SetConfig+0x1ba>
 80052f6:	2b80      	cmp	r3, #128	; 0x80
 80052f8:	d810      	bhi.n	800531c <UART_SetConfig+0x1cc>
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d002      	beq.n	8005304 <UART_SetConfig+0x1b4>
 80052fe:	2b40      	cmp	r3, #64	; 0x40
 8005300:	d006      	beq.n	8005310 <UART_SetConfig+0x1c0>
 8005302:	e00b      	b.n	800531c <UART_SetConfig+0x1cc>
 8005304:	2300      	movs	r3, #0
 8005306:	76fb      	strb	r3, [r7, #27]
 8005308:	e063      	b.n	80053d2 <UART_SetConfig+0x282>
 800530a:	2302      	movs	r3, #2
 800530c:	76fb      	strb	r3, [r7, #27]
 800530e:	e060      	b.n	80053d2 <UART_SetConfig+0x282>
 8005310:	2304      	movs	r3, #4
 8005312:	76fb      	strb	r3, [r7, #27]
 8005314:	e05d      	b.n	80053d2 <UART_SetConfig+0x282>
 8005316:	2308      	movs	r3, #8
 8005318:	76fb      	strb	r3, [r7, #27]
 800531a:	e05a      	b.n	80053d2 <UART_SetConfig+0x282>
 800531c:	2310      	movs	r3, #16
 800531e:	76fb      	strb	r3, [r7, #27]
 8005320:	e057      	b.n	80053d2 <UART_SetConfig+0x282>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a49      	ldr	r2, [pc, #292]	; (800544c <UART_SetConfig+0x2fc>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d125      	bne.n	8005378 <UART_SetConfig+0x228>
 800532c:	4b43      	ldr	r3, [pc, #268]	; (800543c <UART_SetConfig+0x2ec>)
 800532e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005336:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800533a:	d017      	beq.n	800536c <UART_SetConfig+0x21c>
 800533c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005340:	d817      	bhi.n	8005372 <UART_SetConfig+0x222>
 8005342:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005346:	d00b      	beq.n	8005360 <UART_SetConfig+0x210>
 8005348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800534c:	d811      	bhi.n	8005372 <UART_SetConfig+0x222>
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <UART_SetConfig+0x20a>
 8005352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005356:	d006      	beq.n	8005366 <UART_SetConfig+0x216>
 8005358:	e00b      	b.n	8005372 <UART_SetConfig+0x222>
 800535a:	2300      	movs	r3, #0
 800535c:	76fb      	strb	r3, [r7, #27]
 800535e:	e038      	b.n	80053d2 <UART_SetConfig+0x282>
 8005360:	2302      	movs	r3, #2
 8005362:	76fb      	strb	r3, [r7, #27]
 8005364:	e035      	b.n	80053d2 <UART_SetConfig+0x282>
 8005366:	2304      	movs	r3, #4
 8005368:	76fb      	strb	r3, [r7, #27]
 800536a:	e032      	b.n	80053d2 <UART_SetConfig+0x282>
 800536c:	2308      	movs	r3, #8
 800536e:	76fb      	strb	r3, [r7, #27]
 8005370:	e02f      	b.n	80053d2 <UART_SetConfig+0x282>
 8005372:	2310      	movs	r3, #16
 8005374:	76fb      	strb	r3, [r7, #27]
 8005376:	e02c      	b.n	80053d2 <UART_SetConfig+0x282>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a2d      	ldr	r2, [pc, #180]	; (8005434 <UART_SetConfig+0x2e4>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d125      	bne.n	80053ce <UART_SetConfig+0x27e>
 8005382:	4b2e      	ldr	r3, [pc, #184]	; (800543c <UART_SetConfig+0x2ec>)
 8005384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005388:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800538c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005390:	d017      	beq.n	80053c2 <UART_SetConfig+0x272>
 8005392:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005396:	d817      	bhi.n	80053c8 <UART_SetConfig+0x278>
 8005398:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800539c:	d00b      	beq.n	80053b6 <UART_SetConfig+0x266>
 800539e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053a2:	d811      	bhi.n	80053c8 <UART_SetConfig+0x278>
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d003      	beq.n	80053b0 <UART_SetConfig+0x260>
 80053a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053ac:	d006      	beq.n	80053bc <UART_SetConfig+0x26c>
 80053ae:	e00b      	b.n	80053c8 <UART_SetConfig+0x278>
 80053b0:	2300      	movs	r3, #0
 80053b2:	76fb      	strb	r3, [r7, #27]
 80053b4:	e00d      	b.n	80053d2 <UART_SetConfig+0x282>
 80053b6:	2302      	movs	r3, #2
 80053b8:	76fb      	strb	r3, [r7, #27]
 80053ba:	e00a      	b.n	80053d2 <UART_SetConfig+0x282>
 80053bc:	2304      	movs	r3, #4
 80053be:	76fb      	strb	r3, [r7, #27]
 80053c0:	e007      	b.n	80053d2 <UART_SetConfig+0x282>
 80053c2:	2308      	movs	r3, #8
 80053c4:	76fb      	strb	r3, [r7, #27]
 80053c6:	e004      	b.n	80053d2 <UART_SetConfig+0x282>
 80053c8:	2310      	movs	r3, #16
 80053ca:	76fb      	strb	r3, [r7, #27]
 80053cc:	e001      	b.n	80053d2 <UART_SetConfig+0x282>
 80053ce:	2310      	movs	r3, #16
 80053d0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a17      	ldr	r2, [pc, #92]	; (8005434 <UART_SetConfig+0x2e4>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	f040 8087 	bne.w	80054ec <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053de:	7efb      	ldrb	r3, [r7, #27]
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	d837      	bhi.n	8005454 <UART_SetConfig+0x304>
 80053e4:	a201      	add	r2, pc, #4	; (adr r2, 80053ec <UART_SetConfig+0x29c>)
 80053e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ea:	bf00      	nop
 80053ec:	08005411 	.word	0x08005411
 80053f0:	08005455 	.word	0x08005455
 80053f4:	08005419 	.word	0x08005419
 80053f8:	08005455 	.word	0x08005455
 80053fc:	0800541f 	.word	0x0800541f
 8005400:	08005455 	.word	0x08005455
 8005404:	08005455 	.word	0x08005455
 8005408:	08005455 	.word	0x08005455
 800540c:	08005427 	.word	0x08005427
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005410:	f7fe fef0 	bl	80041f4 <HAL_RCC_GetPCLK1Freq>
 8005414:	6178      	str	r0, [r7, #20]
        break;
 8005416:	e022      	b.n	800545e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005418:	4b0d      	ldr	r3, [pc, #52]	; (8005450 <UART_SetConfig+0x300>)
 800541a:	617b      	str	r3, [r7, #20]
        break;
 800541c:	e01f      	b.n	800545e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800541e:	f7fe fe51 	bl	80040c4 <HAL_RCC_GetSysClockFreq>
 8005422:	6178      	str	r0, [r7, #20]
        break;
 8005424:	e01b      	b.n	800545e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800542a:	617b      	str	r3, [r7, #20]
        break;
 800542c:	e017      	b.n	800545e <UART_SetConfig+0x30e>
 800542e:	bf00      	nop
 8005430:	efff69f3 	.word	0xefff69f3
 8005434:	40008000 	.word	0x40008000
 8005438:	40013800 	.word	0x40013800
 800543c:	40021000 	.word	0x40021000
 8005440:	40004400 	.word	0x40004400
 8005444:	40004800 	.word	0x40004800
 8005448:	40004c00 	.word	0x40004c00
 800544c:	40005000 	.word	0x40005000
 8005450:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005454:	2300      	movs	r3, #0
 8005456:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	76bb      	strb	r3, [r7, #26]
        break;
 800545c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 80f1 	beq.w	8005648 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685a      	ldr	r2, [r3, #4]
 800546a:	4613      	mov	r3, r2
 800546c:	005b      	lsls	r3, r3, #1
 800546e:	4413      	add	r3, r2
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	429a      	cmp	r2, r3
 8005474:	d305      	bcc.n	8005482 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800547c:	697a      	ldr	r2, [r7, #20]
 800547e:	429a      	cmp	r2, r3
 8005480:	d902      	bls.n	8005488 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	76bb      	strb	r3, [r7, #26]
 8005486:	e0df      	b.n	8005648 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	4618      	mov	r0, r3
 800548c:	f04f 0100 	mov.w	r1, #0
 8005490:	f04f 0200 	mov.w	r2, #0
 8005494:	f04f 0300 	mov.w	r3, #0
 8005498:	020b      	lsls	r3, r1, #8
 800549a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800549e:	0202      	lsls	r2, r0, #8
 80054a0:	6879      	ldr	r1, [r7, #4]
 80054a2:	6849      	ldr	r1, [r1, #4]
 80054a4:	0849      	lsrs	r1, r1, #1
 80054a6:	4608      	mov	r0, r1
 80054a8:	f04f 0100 	mov.w	r1, #0
 80054ac:	1814      	adds	r4, r2, r0
 80054ae:	eb43 0501 	adc.w	r5, r3, r1
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	461a      	mov	r2, r3
 80054b8:	f04f 0300 	mov.w	r3, #0
 80054bc:	4620      	mov	r0, r4
 80054be:	4629      	mov	r1, r5
 80054c0:	f7fa fede 	bl	8000280 <__aeabi_uldivmod>
 80054c4:	4602      	mov	r2, r0
 80054c6:	460b      	mov	r3, r1
 80054c8:	4613      	mov	r3, r2
 80054ca:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054d2:	d308      	bcc.n	80054e6 <UART_SetConfig+0x396>
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054da:	d204      	bcs.n	80054e6 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	60da      	str	r2, [r3, #12]
 80054e4:	e0b0      	b.n	8005648 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	76bb      	strb	r3, [r7, #26]
 80054ea:	e0ad      	b.n	8005648 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	69db      	ldr	r3, [r3, #28]
 80054f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054f4:	d15c      	bne.n	80055b0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80054f6:	7efb      	ldrb	r3, [r7, #27]
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d828      	bhi.n	800554e <UART_SetConfig+0x3fe>
 80054fc:	a201      	add	r2, pc, #4	; (adr r2, 8005504 <UART_SetConfig+0x3b4>)
 80054fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005502:	bf00      	nop
 8005504:	08005529 	.word	0x08005529
 8005508:	08005531 	.word	0x08005531
 800550c:	08005539 	.word	0x08005539
 8005510:	0800554f 	.word	0x0800554f
 8005514:	0800553f 	.word	0x0800553f
 8005518:	0800554f 	.word	0x0800554f
 800551c:	0800554f 	.word	0x0800554f
 8005520:	0800554f 	.word	0x0800554f
 8005524:	08005547 	.word	0x08005547
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005528:	f7fe fe64 	bl	80041f4 <HAL_RCC_GetPCLK1Freq>
 800552c:	6178      	str	r0, [r7, #20]
        break;
 800552e:	e013      	b.n	8005558 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005530:	f7fe fe76 	bl	8004220 <HAL_RCC_GetPCLK2Freq>
 8005534:	6178      	str	r0, [r7, #20]
        break;
 8005536:	e00f      	b.n	8005558 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005538:	4b49      	ldr	r3, [pc, #292]	; (8005660 <UART_SetConfig+0x510>)
 800553a:	617b      	str	r3, [r7, #20]
        break;
 800553c:	e00c      	b.n	8005558 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800553e:	f7fe fdc1 	bl	80040c4 <HAL_RCC_GetSysClockFreq>
 8005542:	6178      	str	r0, [r7, #20]
        break;
 8005544:	e008      	b.n	8005558 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800554a:	617b      	str	r3, [r7, #20]
        break;
 800554c:	e004      	b.n	8005558 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800554e:	2300      	movs	r3, #0
 8005550:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	76bb      	strb	r3, [r7, #26]
        break;
 8005556:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d074      	beq.n	8005648 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	005a      	lsls	r2, r3, #1
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	085b      	lsrs	r3, r3, #1
 8005568:	441a      	add	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005572:	b29b      	uxth	r3, r3
 8005574:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	2b0f      	cmp	r3, #15
 800557a:	d916      	bls.n	80055aa <UART_SetConfig+0x45a>
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005582:	d212      	bcs.n	80055aa <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	b29b      	uxth	r3, r3
 8005588:	f023 030f 	bic.w	r3, r3, #15
 800558c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	085b      	lsrs	r3, r3, #1
 8005592:	b29b      	uxth	r3, r3
 8005594:	f003 0307 	and.w	r3, r3, #7
 8005598:	b29a      	uxth	r2, r3
 800559a:	89fb      	ldrh	r3, [r7, #14]
 800559c:	4313      	orrs	r3, r2
 800559e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	89fa      	ldrh	r2, [r7, #14]
 80055a6:	60da      	str	r2, [r3, #12]
 80055a8:	e04e      	b.n	8005648 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	76bb      	strb	r3, [r7, #26]
 80055ae:	e04b      	b.n	8005648 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055b0:	7efb      	ldrb	r3, [r7, #27]
 80055b2:	2b08      	cmp	r3, #8
 80055b4:	d827      	bhi.n	8005606 <UART_SetConfig+0x4b6>
 80055b6:	a201      	add	r2, pc, #4	; (adr r2, 80055bc <UART_SetConfig+0x46c>)
 80055b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055bc:	080055e1 	.word	0x080055e1
 80055c0:	080055e9 	.word	0x080055e9
 80055c4:	080055f1 	.word	0x080055f1
 80055c8:	08005607 	.word	0x08005607
 80055cc:	080055f7 	.word	0x080055f7
 80055d0:	08005607 	.word	0x08005607
 80055d4:	08005607 	.word	0x08005607
 80055d8:	08005607 	.word	0x08005607
 80055dc:	080055ff 	.word	0x080055ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055e0:	f7fe fe08 	bl	80041f4 <HAL_RCC_GetPCLK1Freq>
 80055e4:	6178      	str	r0, [r7, #20]
        break;
 80055e6:	e013      	b.n	8005610 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055e8:	f7fe fe1a 	bl	8004220 <HAL_RCC_GetPCLK2Freq>
 80055ec:	6178      	str	r0, [r7, #20]
        break;
 80055ee:	e00f      	b.n	8005610 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055f0:	4b1b      	ldr	r3, [pc, #108]	; (8005660 <UART_SetConfig+0x510>)
 80055f2:	617b      	str	r3, [r7, #20]
        break;
 80055f4:	e00c      	b.n	8005610 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055f6:	f7fe fd65 	bl	80040c4 <HAL_RCC_GetSysClockFreq>
 80055fa:	6178      	str	r0, [r7, #20]
        break;
 80055fc:	e008      	b.n	8005610 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005602:	617b      	str	r3, [r7, #20]
        break;
 8005604:	e004      	b.n	8005610 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005606:	2300      	movs	r3, #0
 8005608:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	76bb      	strb	r3, [r7, #26]
        break;
 800560e:	bf00      	nop
    }

    if (pclk != 0U)
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d018      	beq.n	8005648 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	085a      	lsrs	r2, r3, #1
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	441a      	add	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	fbb2 f3f3 	udiv	r3, r2, r3
 8005628:	b29b      	uxth	r3, r3
 800562a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	2b0f      	cmp	r3, #15
 8005630:	d908      	bls.n	8005644 <UART_SetConfig+0x4f4>
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005638:	d204      	bcs.n	8005644 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	60da      	str	r2, [r3, #12]
 8005642:	e001      	b.n	8005648 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005654:	7ebb      	ldrb	r3, [r7, #26]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3720      	adds	r7, #32
 800565a:	46bd      	mov	sp, r7
 800565c:	bdb0      	pop	{r4, r5, r7, pc}
 800565e:	bf00      	nop
 8005660:	00f42400 	.word	0x00f42400

08005664 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00a      	beq.n	800568e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00a      	beq.n	80056b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b4:	f003 0304 	and.w	r3, r3, #4
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00a      	beq.n	80056d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	430a      	orrs	r2, r1
 80056d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d6:	f003 0308 	and.w	r3, r3, #8
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00a      	beq.n	80056f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f8:	f003 0310 	and.w	r3, r3, #16
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00a      	beq.n	8005716 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	430a      	orrs	r2, r1
 8005714:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571a:	f003 0320 	and.w	r3, r3, #32
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00a      	beq.n	8005738 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	430a      	orrs	r2, r1
 8005736:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005740:	2b00      	cmp	r3, #0
 8005742:	d01a      	beq.n	800577a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	430a      	orrs	r2, r1
 8005758:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005762:	d10a      	bne.n	800577a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	430a      	orrs	r2, r1
 8005778:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00a      	beq.n	800579c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	430a      	orrs	r2, r1
 800579a:	605a      	str	r2, [r3, #4]
  }
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af02      	add	r7, sp, #8
 80057ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057b8:	f7fc fbf6 	bl	8001fa8 <HAL_GetTick>
 80057bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0308 	and.w	r3, r3, #8
 80057c8:	2b08      	cmp	r3, #8
 80057ca:	d10e      	bne.n	80057ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057d0:	9300      	str	r3, [sp, #0]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 f82d 	bl	800583a <UART_WaitOnFlagUntilTimeout>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d001      	beq.n	80057ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e023      	b.n	8005832 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0304 	and.w	r3, r3, #4
 80057f4:	2b04      	cmp	r3, #4
 80057f6:	d10e      	bne.n	8005816 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f817 	bl	800583a <UART_WaitOnFlagUntilTimeout>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e00d      	b.n	8005832 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2220      	movs	r2, #32
 800581a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2220      	movs	r2, #32
 8005820:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b084      	sub	sp, #16
 800583e:	af00      	add	r7, sp, #0
 8005840:	60f8      	str	r0, [r7, #12]
 8005842:	60b9      	str	r1, [r7, #8]
 8005844:	603b      	str	r3, [r7, #0]
 8005846:	4613      	mov	r3, r2
 8005848:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800584a:	e05e      	b.n	800590a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005852:	d05a      	beq.n	800590a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005854:	f7fc fba8 	bl	8001fa8 <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	69ba      	ldr	r2, [r7, #24]
 8005860:	429a      	cmp	r2, r3
 8005862:	d302      	bcc.n	800586a <UART_WaitOnFlagUntilTimeout+0x30>
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d11b      	bne.n	80058a2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005878:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	689a      	ldr	r2, [r3, #8]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f022 0201 	bic.w	r2, r2, #1
 8005888:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2220      	movs	r2, #32
 800588e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2220      	movs	r2, #32
 8005894:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e043      	b.n	800592a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0304 	and.w	r3, r3, #4
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d02c      	beq.n	800590a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058be:	d124      	bne.n	800590a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058c8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80058d8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689a      	ldr	r2, [r3, #8]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f022 0201 	bic.w	r2, r2, #1
 80058e8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2220      	movs	r2, #32
 80058ee:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2220      	movs	r2, #32
 80058f4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2220      	movs	r2, #32
 80058fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e00f      	b.n	800592a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	69da      	ldr	r2, [r3, #28]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	4013      	ands	r3, r2
 8005914:	68ba      	ldr	r2, [r7, #8]
 8005916:	429a      	cmp	r2, r3
 8005918:	bf0c      	ite	eq
 800591a:	2301      	moveq	r3, #1
 800591c:	2300      	movne	r3, #0
 800591e:	b2db      	uxtb	r3, r3
 8005920:	461a      	mov	r2, r3
 8005922:	79fb      	ldrb	r3, [r7, #7]
 8005924:	429a      	cmp	r2, r3
 8005926:	d091      	beq.n	800584c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3710      	adds	r7, #16
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005932:	b084      	sub	sp, #16
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	f107 001c 	add.w	r0, r7, #28
 8005940:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 fa23 	bl	8005d9c <USB_CoreReset>
 8005956:	4603      	mov	r3, r0
 8005958:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800595a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800595c:	2b00      	cmp	r3, #0
 800595e:	d106      	bne.n	800596e <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005964:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	639a      	str	r2, [r3, #56]	; 0x38
 800596c:	e005      	b.n	800597a <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005972:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800597a:	7bfb      	ldrb	r3, [r7, #15]
}
 800597c:	4618      	mov	r0, r3
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005986:	b004      	add	sp, #16
 8005988:	4770      	bx	lr

0800598a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800598a:	b480      	push	{r7}
 800598c:	b083      	sub	sp, #12
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f023 0201 	bic.w	r2, r3, #1
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	460b      	mov	r3, r1
 80059b6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80059c4:	78fb      	ldrb	r3, [r7, #3]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d106      	bne.n	80059d8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	60da      	str	r2, [r3, #12]
 80059d6:	e00b      	b.n	80059f0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80059d8:	78fb      	ldrb	r3, [r7, #3]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d106      	bne.n	80059ec <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	60da      	str	r2, [r3, #12]
 80059ea:	e001      	b.n	80059f0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e003      	b.n	80059f8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80059f0:	2032      	movs	r0, #50	; 0x32
 80059f2:	f7fc fae5 	bl	8001fc0 <HAL_Delay>

  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3708      	adds	r7, #8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a00:	b084      	sub	sp, #16
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b086      	sub	sp, #24
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
 8005a0a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005a0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a12:	2300      	movs	r3, #0
 8005a14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	613b      	str	r3, [r7, #16]
 8005a1e:	e009      	b.n	8005a34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	3340      	adds	r3, #64	; 0x40
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4413      	add	r3, r2
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	3301      	adds	r3, #1
 8005a32:	613b      	str	r3, [r7, #16]
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	2b0e      	cmp	r3, #14
 8005a38:	d9f2      	bls.n	8005a20 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005a3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d11c      	bne.n	8005a7a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a4e:	f043 0302 	orr.w	r3, r3, #2
 8005a52:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a58:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	601a      	str	r2, [r3, #0]
 8005a78:	e005      	b.n	8005a86 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	2300      	movs	r3, #0
 8005a90:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a98:	4619      	mov	r1, r3
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	680b      	ldr	r3, [r1, #0]
 8005aa4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005aa6:	2103      	movs	r1, #3
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 f93d 	bl	8005d28 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005aae:	2110      	movs	r1, #16
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 f8f1 	bl	8005c98 <USB_FlushTxFifo>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d001      	beq.n	8005ac0 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 f90f 	bl	8005ce4 <USB_FlushRxFifo>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	2300      	movs	r3, #0
 8005ada:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aee:	461a      	mov	r2, r3
 8005af0:	2300      	movs	r3, #0
 8005af2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005af4:	2300      	movs	r3, #0
 8005af6:	613b      	str	r3, [r7, #16]
 8005af8:	e043      	b.n	8005b82 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	015a      	lsls	r2, r3, #5
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	4413      	add	r3, r2
 8005b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b10:	d118      	bne.n	8005b44 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10a      	bne.n	8005b2e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b24:	461a      	mov	r2, r3
 8005b26:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b2a:	6013      	str	r3, [r2, #0]
 8005b2c:	e013      	b.n	8005b56 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	015a      	lsls	r2, r3, #5
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b40:	6013      	str	r3, [r2, #0]
 8005b42:	e008      	b.n	8005b56 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	015a      	lsls	r2, r3, #5
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b50:	461a      	mov	r2, r3
 8005b52:	2300      	movs	r3, #0
 8005b54:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b62:	461a      	mov	r2, r3
 8005b64:	2300      	movs	r3, #0
 8005b66:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b74:	461a      	mov	r2, r3
 8005b76:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	613b      	str	r3, [r7, #16]
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d3b7      	bcc.n	8005afa <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	613b      	str	r3, [r7, #16]
 8005b8e:	e043      	b.n	8005c18 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ba2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ba6:	d118      	bne.n	8005bda <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10a      	bne.n	8005bc4 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	015a      	lsls	r2, r3, #5
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bba:	461a      	mov	r2, r3
 8005bbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005bc0:	6013      	str	r3, [r2, #0]
 8005bc2:	e013      	b.n	8005bec <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	015a      	lsls	r2, r3, #5
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	4413      	add	r3, r2
 8005bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005bd6:	6013      	str	r3, [r2, #0]
 8005bd8:	e008      	b.n	8005bec <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	015a      	lsls	r2, r3, #5
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	4413      	add	r3, r2
 8005be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be6:	461a      	mov	r2, r3
 8005be8:	2300      	movs	r3, #0
 8005bea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	015a      	lsls	r2, r3, #5
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	015a      	lsls	r2, r3, #5
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	4413      	add	r3, r2
 8005c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c10:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	3301      	adds	r3, #1
 8005c16:	613b      	str	r3, [r7, #16]
 8005c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d3b7      	bcc.n	8005b90 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c32:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005c40:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	f043 0210 	orr.w	r2, r3, #16
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	699a      	ldr	r2, [r3, #24]
 8005c52:	4b10      	ldr	r3, [pc, #64]	; (8005c94 <USB_DevInit+0x294>)
 8005c54:	4313      	orrs	r3, r2
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d005      	beq.n	8005c6c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	f043 0208 	orr.w	r2, r3, #8
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d107      	bne.n	8005c82 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c7a:	f043 0304 	orr.w	r3, r3, #4
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3718      	adds	r7, #24
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c8e:	b004      	add	sp, #16
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	803c3800 	.word	0x803c3800

08005c98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	019b      	lsls	r3, r3, #6
 8005caa:	f043 0220 	orr.w	r2, r3, #32
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	60fb      	str	r3, [r7, #12]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	4a09      	ldr	r2, [pc, #36]	; (8005ce0 <USB_FlushTxFifo+0x48>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d901      	bls.n	8005cc4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e006      	b.n	8005cd2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	f003 0320 	and.w	r3, r3, #32
 8005ccc:	2b20      	cmp	r3, #32
 8005cce:	d0f0      	beq.n	8005cb2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3714      	adds	r7, #20
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	00030d40 	.word	0x00030d40

08005ce4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005cec:	2300      	movs	r3, #0
 8005cee:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2210      	movs	r2, #16
 8005cf4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	60fb      	str	r3, [r7, #12]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	4a09      	ldr	r2, [pc, #36]	; (8005d24 <USB_FlushRxFifo+0x40>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d901      	bls.n	8005d08 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e006      	b.n	8005d16 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	f003 0310 	and.w	r3, r3, #16
 8005d10:	2b10      	cmp	r3, #16
 8005d12:	d0f0      	beq.n	8005cf6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	00030d40 	.word	0x00030d40

08005d28 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	460b      	mov	r3, r1
 8005d32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	78fb      	ldrb	r3, [r7, #3]
 8005d42:	68f9      	ldr	r1, [r7, #12]
 8005d44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3714      	adds	r7, #20
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b085      	sub	sp, #20
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d74:	f023 0303 	bic.w	r3, r3, #3
 8005d78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d88:	f043 0302 	orr.w	r3, r3, #2
 8005d8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3714      	adds	r7, #20
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005da4:	2300      	movs	r3, #0
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	3301      	adds	r3, #1
 8005dac:	60fb      	str	r3, [r7, #12]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	4a13      	ldr	r2, [pc, #76]	; (8005e00 <USB_CoreReset+0x64>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d901      	bls.n	8005dba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e01b      	b.n	8005df2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	daf2      	bge.n	8005da8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	f043 0201 	orr.w	r2, r3, #1
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	60fb      	str	r3, [r7, #12]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	4a09      	ldr	r2, [pc, #36]	; (8005e00 <USB_CoreReset+0x64>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d901      	bls.n	8005de4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e006      	b.n	8005df2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	f003 0301 	and.w	r3, r3, #1
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d0f0      	beq.n	8005dd2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	00030d40 	.word	0x00030d40

08005e04 <__errno>:
 8005e04:	4b01      	ldr	r3, [pc, #4]	; (8005e0c <__errno+0x8>)
 8005e06:	6818      	ldr	r0, [r3, #0]
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	2000000c 	.word	0x2000000c

08005e10 <__libc_init_array>:
 8005e10:	b570      	push	{r4, r5, r6, lr}
 8005e12:	4d0d      	ldr	r5, [pc, #52]	; (8005e48 <__libc_init_array+0x38>)
 8005e14:	4c0d      	ldr	r4, [pc, #52]	; (8005e4c <__libc_init_array+0x3c>)
 8005e16:	1b64      	subs	r4, r4, r5
 8005e18:	10a4      	asrs	r4, r4, #2
 8005e1a:	2600      	movs	r6, #0
 8005e1c:	42a6      	cmp	r6, r4
 8005e1e:	d109      	bne.n	8005e34 <__libc_init_array+0x24>
 8005e20:	4d0b      	ldr	r5, [pc, #44]	; (8005e50 <__libc_init_array+0x40>)
 8005e22:	4c0c      	ldr	r4, [pc, #48]	; (8005e54 <__libc_init_array+0x44>)
 8005e24:	f000 fc62 	bl	80066ec <_init>
 8005e28:	1b64      	subs	r4, r4, r5
 8005e2a:	10a4      	asrs	r4, r4, #2
 8005e2c:	2600      	movs	r6, #0
 8005e2e:	42a6      	cmp	r6, r4
 8005e30:	d105      	bne.n	8005e3e <__libc_init_array+0x2e>
 8005e32:	bd70      	pop	{r4, r5, r6, pc}
 8005e34:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e38:	4798      	blx	r3
 8005e3a:	3601      	adds	r6, #1
 8005e3c:	e7ee      	b.n	8005e1c <__libc_init_array+0xc>
 8005e3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e42:	4798      	blx	r3
 8005e44:	3601      	adds	r6, #1
 8005e46:	e7f2      	b.n	8005e2e <__libc_init_array+0x1e>
 8005e48:	08006970 	.word	0x08006970
 8005e4c:	08006970 	.word	0x08006970
 8005e50:	08006970 	.word	0x08006970
 8005e54:	08006974 	.word	0x08006974

08005e58 <memset>:
 8005e58:	4402      	add	r2, r0
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d100      	bne.n	8005e62 <memset+0xa>
 8005e60:	4770      	bx	lr
 8005e62:	f803 1b01 	strb.w	r1, [r3], #1
 8005e66:	e7f9      	b.n	8005e5c <memset+0x4>

08005e68 <sniprintf>:
 8005e68:	b40c      	push	{r2, r3}
 8005e6a:	b530      	push	{r4, r5, lr}
 8005e6c:	4b17      	ldr	r3, [pc, #92]	; (8005ecc <sniprintf+0x64>)
 8005e6e:	1e0c      	subs	r4, r1, #0
 8005e70:	681d      	ldr	r5, [r3, #0]
 8005e72:	b09d      	sub	sp, #116	; 0x74
 8005e74:	da08      	bge.n	8005e88 <sniprintf+0x20>
 8005e76:	238b      	movs	r3, #139	; 0x8b
 8005e78:	602b      	str	r3, [r5, #0]
 8005e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e7e:	b01d      	add	sp, #116	; 0x74
 8005e80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e84:	b002      	add	sp, #8
 8005e86:	4770      	bx	lr
 8005e88:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005e8c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005e90:	bf14      	ite	ne
 8005e92:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005e96:	4623      	moveq	r3, r4
 8005e98:	9304      	str	r3, [sp, #16]
 8005e9a:	9307      	str	r3, [sp, #28]
 8005e9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ea0:	9002      	str	r0, [sp, #8]
 8005ea2:	9006      	str	r0, [sp, #24]
 8005ea4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005ea8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005eaa:	ab21      	add	r3, sp, #132	; 0x84
 8005eac:	a902      	add	r1, sp, #8
 8005eae:	4628      	mov	r0, r5
 8005eb0:	9301      	str	r3, [sp, #4]
 8005eb2:	f000 f869 	bl	8005f88 <_svfiprintf_r>
 8005eb6:	1c43      	adds	r3, r0, #1
 8005eb8:	bfbc      	itt	lt
 8005eba:	238b      	movlt	r3, #139	; 0x8b
 8005ebc:	602b      	strlt	r3, [r5, #0]
 8005ebe:	2c00      	cmp	r4, #0
 8005ec0:	d0dd      	beq.n	8005e7e <sniprintf+0x16>
 8005ec2:	9b02      	ldr	r3, [sp, #8]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	701a      	strb	r2, [r3, #0]
 8005ec8:	e7d9      	b.n	8005e7e <sniprintf+0x16>
 8005eca:	bf00      	nop
 8005ecc:	2000000c 	.word	0x2000000c

08005ed0 <__ssputs_r>:
 8005ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ed4:	688e      	ldr	r6, [r1, #8]
 8005ed6:	429e      	cmp	r6, r3
 8005ed8:	4682      	mov	sl, r0
 8005eda:	460c      	mov	r4, r1
 8005edc:	4690      	mov	r8, r2
 8005ede:	461f      	mov	r7, r3
 8005ee0:	d838      	bhi.n	8005f54 <__ssputs_r+0x84>
 8005ee2:	898a      	ldrh	r2, [r1, #12]
 8005ee4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ee8:	d032      	beq.n	8005f50 <__ssputs_r+0x80>
 8005eea:	6825      	ldr	r5, [r4, #0]
 8005eec:	6909      	ldr	r1, [r1, #16]
 8005eee:	eba5 0901 	sub.w	r9, r5, r1
 8005ef2:	6965      	ldr	r5, [r4, #20]
 8005ef4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ef8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005efc:	3301      	adds	r3, #1
 8005efe:	444b      	add	r3, r9
 8005f00:	106d      	asrs	r5, r5, #1
 8005f02:	429d      	cmp	r5, r3
 8005f04:	bf38      	it	cc
 8005f06:	461d      	movcc	r5, r3
 8005f08:	0553      	lsls	r3, r2, #21
 8005f0a:	d531      	bpl.n	8005f70 <__ssputs_r+0xa0>
 8005f0c:	4629      	mov	r1, r5
 8005f0e:	f000 fb47 	bl	80065a0 <_malloc_r>
 8005f12:	4606      	mov	r6, r0
 8005f14:	b950      	cbnz	r0, 8005f2c <__ssputs_r+0x5c>
 8005f16:	230c      	movs	r3, #12
 8005f18:	f8ca 3000 	str.w	r3, [sl]
 8005f1c:	89a3      	ldrh	r3, [r4, #12]
 8005f1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f22:	81a3      	strh	r3, [r4, #12]
 8005f24:	f04f 30ff 	mov.w	r0, #4294967295
 8005f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f2c:	6921      	ldr	r1, [r4, #16]
 8005f2e:	464a      	mov	r2, r9
 8005f30:	f000 fabe 	bl	80064b0 <memcpy>
 8005f34:	89a3      	ldrh	r3, [r4, #12]
 8005f36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f3e:	81a3      	strh	r3, [r4, #12]
 8005f40:	6126      	str	r6, [r4, #16]
 8005f42:	6165      	str	r5, [r4, #20]
 8005f44:	444e      	add	r6, r9
 8005f46:	eba5 0509 	sub.w	r5, r5, r9
 8005f4a:	6026      	str	r6, [r4, #0]
 8005f4c:	60a5      	str	r5, [r4, #8]
 8005f4e:	463e      	mov	r6, r7
 8005f50:	42be      	cmp	r6, r7
 8005f52:	d900      	bls.n	8005f56 <__ssputs_r+0x86>
 8005f54:	463e      	mov	r6, r7
 8005f56:	4632      	mov	r2, r6
 8005f58:	6820      	ldr	r0, [r4, #0]
 8005f5a:	4641      	mov	r1, r8
 8005f5c:	f000 fab6 	bl	80064cc <memmove>
 8005f60:	68a3      	ldr	r3, [r4, #8]
 8005f62:	6822      	ldr	r2, [r4, #0]
 8005f64:	1b9b      	subs	r3, r3, r6
 8005f66:	4432      	add	r2, r6
 8005f68:	60a3      	str	r3, [r4, #8]
 8005f6a:	6022      	str	r2, [r4, #0]
 8005f6c:	2000      	movs	r0, #0
 8005f6e:	e7db      	b.n	8005f28 <__ssputs_r+0x58>
 8005f70:	462a      	mov	r2, r5
 8005f72:	f000 fb6f 	bl	8006654 <_realloc_r>
 8005f76:	4606      	mov	r6, r0
 8005f78:	2800      	cmp	r0, #0
 8005f7a:	d1e1      	bne.n	8005f40 <__ssputs_r+0x70>
 8005f7c:	6921      	ldr	r1, [r4, #16]
 8005f7e:	4650      	mov	r0, sl
 8005f80:	f000 fabe 	bl	8006500 <_free_r>
 8005f84:	e7c7      	b.n	8005f16 <__ssputs_r+0x46>
	...

08005f88 <_svfiprintf_r>:
 8005f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f8c:	4698      	mov	r8, r3
 8005f8e:	898b      	ldrh	r3, [r1, #12]
 8005f90:	061b      	lsls	r3, r3, #24
 8005f92:	b09d      	sub	sp, #116	; 0x74
 8005f94:	4607      	mov	r7, r0
 8005f96:	460d      	mov	r5, r1
 8005f98:	4614      	mov	r4, r2
 8005f9a:	d50e      	bpl.n	8005fba <_svfiprintf_r+0x32>
 8005f9c:	690b      	ldr	r3, [r1, #16]
 8005f9e:	b963      	cbnz	r3, 8005fba <_svfiprintf_r+0x32>
 8005fa0:	2140      	movs	r1, #64	; 0x40
 8005fa2:	f000 fafd 	bl	80065a0 <_malloc_r>
 8005fa6:	6028      	str	r0, [r5, #0]
 8005fa8:	6128      	str	r0, [r5, #16]
 8005faa:	b920      	cbnz	r0, 8005fb6 <_svfiprintf_r+0x2e>
 8005fac:	230c      	movs	r3, #12
 8005fae:	603b      	str	r3, [r7, #0]
 8005fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb4:	e0d1      	b.n	800615a <_svfiprintf_r+0x1d2>
 8005fb6:	2340      	movs	r3, #64	; 0x40
 8005fb8:	616b      	str	r3, [r5, #20]
 8005fba:	2300      	movs	r3, #0
 8005fbc:	9309      	str	r3, [sp, #36]	; 0x24
 8005fbe:	2320      	movs	r3, #32
 8005fc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005fc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fc8:	2330      	movs	r3, #48	; 0x30
 8005fca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006174 <_svfiprintf_r+0x1ec>
 8005fce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005fd2:	f04f 0901 	mov.w	r9, #1
 8005fd6:	4623      	mov	r3, r4
 8005fd8:	469a      	mov	sl, r3
 8005fda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fde:	b10a      	cbz	r2, 8005fe4 <_svfiprintf_r+0x5c>
 8005fe0:	2a25      	cmp	r2, #37	; 0x25
 8005fe2:	d1f9      	bne.n	8005fd8 <_svfiprintf_r+0x50>
 8005fe4:	ebba 0b04 	subs.w	fp, sl, r4
 8005fe8:	d00b      	beq.n	8006002 <_svfiprintf_r+0x7a>
 8005fea:	465b      	mov	r3, fp
 8005fec:	4622      	mov	r2, r4
 8005fee:	4629      	mov	r1, r5
 8005ff0:	4638      	mov	r0, r7
 8005ff2:	f7ff ff6d 	bl	8005ed0 <__ssputs_r>
 8005ff6:	3001      	adds	r0, #1
 8005ff8:	f000 80aa 	beq.w	8006150 <_svfiprintf_r+0x1c8>
 8005ffc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ffe:	445a      	add	r2, fp
 8006000:	9209      	str	r2, [sp, #36]	; 0x24
 8006002:	f89a 3000 	ldrb.w	r3, [sl]
 8006006:	2b00      	cmp	r3, #0
 8006008:	f000 80a2 	beq.w	8006150 <_svfiprintf_r+0x1c8>
 800600c:	2300      	movs	r3, #0
 800600e:	f04f 32ff 	mov.w	r2, #4294967295
 8006012:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006016:	f10a 0a01 	add.w	sl, sl, #1
 800601a:	9304      	str	r3, [sp, #16]
 800601c:	9307      	str	r3, [sp, #28]
 800601e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006022:	931a      	str	r3, [sp, #104]	; 0x68
 8006024:	4654      	mov	r4, sl
 8006026:	2205      	movs	r2, #5
 8006028:	f814 1b01 	ldrb.w	r1, [r4], #1
 800602c:	4851      	ldr	r0, [pc, #324]	; (8006174 <_svfiprintf_r+0x1ec>)
 800602e:	f7fa f8d7 	bl	80001e0 <memchr>
 8006032:	9a04      	ldr	r2, [sp, #16]
 8006034:	b9d8      	cbnz	r0, 800606e <_svfiprintf_r+0xe6>
 8006036:	06d0      	lsls	r0, r2, #27
 8006038:	bf44      	itt	mi
 800603a:	2320      	movmi	r3, #32
 800603c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006040:	0711      	lsls	r1, r2, #28
 8006042:	bf44      	itt	mi
 8006044:	232b      	movmi	r3, #43	; 0x2b
 8006046:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800604a:	f89a 3000 	ldrb.w	r3, [sl]
 800604e:	2b2a      	cmp	r3, #42	; 0x2a
 8006050:	d015      	beq.n	800607e <_svfiprintf_r+0xf6>
 8006052:	9a07      	ldr	r2, [sp, #28]
 8006054:	4654      	mov	r4, sl
 8006056:	2000      	movs	r0, #0
 8006058:	f04f 0c0a 	mov.w	ip, #10
 800605c:	4621      	mov	r1, r4
 800605e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006062:	3b30      	subs	r3, #48	; 0x30
 8006064:	2b09      	cmp	r3, #9
 8006066:	d94e      	bls.n	8006106 <_svfiprintf_r+0x17e>
 8006068:	b1b0      	cbz	r0, 8006098 <_svfiprintf_r+0x110>
 800606a:	9207      	str	r2, [sp, #28]
 800606c:	e014      	b.n	8006098 <_svfiprintf_r+0x110>
 800606e:	eba0 0308 	sub.w	r3, r0, r8
 8006072:	fa09 f303 	lsl.w	r3, r9, r3
 8006076:	4313      	orrs	r3, r2
 8006078:	9304      	str	r3, [sp, #16]
 800607a:	46a2      	mov	sl, r4
 800607c:	e7d2      	b.n	8006024 <_svfiprintf_r+0x9c>
 800607e:	9b03      	ldr	r3, [sp, #12]
 8006080:	1d19      	adds	r1, r3, #4
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	9103      	str	r1, [sp, #12]
 8006086:	2b00      	cmp	r3, #0
 8006088:	bfbb      	ittet	lt
 800608a:	425b      	neglt	r3, r3
 800608c:	f042 0202 	orrlt.w	r2, r2, #2
 8006090:	9307      	strge	r3, [sp, #28]
 8006092:	9307      	strlt	r3, [sp, #28]
 8006094:	bfb8      	it	lt
 8006096:	9204      	strlt	r2, [sp, #16]
 8006098:	7823      	ldrb	r3, [r4, #0]
 800609a:	2b2e      	cmp	r3, #46	; 0x2e
 800609c:	d10c      	bne.n	80060b8 <_svfiprintf_r+0x130>
 800609e:	7863      	ldrb	r3, [r4, #1]
 80060a0:	2b2a      	cmp	r3, #42	; 0x2a
 80060a2:	d135      	bne.n	8006110 <_svfiprintf_r+0x188>
 80060a4:	9b03      	ldr	r3, [sp, #12]
 80060a6:	1d1a      	adds	r2, r3, #4
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	9203      	str	r2, [sp, #12]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	bfb8      	it	lt
 80060b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80060b4:	3402      	adds	r4, #2
 80060b6:	9305      	str	r3, [sp, #20]
 80060b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006184 <_svfiprintf_r+0x1fc>
 80060bc:	7821      	ldrb	r1, [r4, #0]
 80060be:	2203      	movs	r2, #3
 80060c0:	4650      	mov	r0, sl
 80060c2:	f7fa f88d 	bl	80001e0 <memchr>
 80060c6:	b140      	cbz	r0, 80060da <_svfiprintf_r+0x152>
 80060c8:	2340      	movs	r3, #64	; 0x40
 80060ca:	eba0 000a 	sub.w	r0, r0, sl
 80060ce:	fa03 f000 	lsl.w	r0, r3, r0
 80060d2:	9b04      	ldr	r3, [sp, #16]
 80060d4:	4303      	orrs	r3, r0
 80060d6:	3401      	adds	r4, #1
 80060d8:	9304      	str	r3, [sp, #16]
 80060da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060de:	4826      	ldr	r0, [pc, #152]	; (8006178 <_svfiprintf_r+0x1f0>)
 80060e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060e4:	2206      	movs	r2, #6
 80060e6:	f7fa f87b 	bl	80001e0 <memchr>
 80060ea:	2800      	cmp	r0, #0
 80060ec:	d038      	beq.n	8006160 <_svfiprintf_r+0x1d8>
 80060ee:	4b23      	ldr	r3, [pc, #140]	; (800617c <_svfiprintf_r+0x1f4>)
 80060f0:	bb1b      	cbnz	r3, 800613a <_svfiprintf_r+0x1b2>
 80060f2:	9b03      	ldr	r3, [sp, #12]
 80060f4:	3307      	adds	r3, #7
 80060f6:	f023 0307 	bic.w	r3, r3, #7
 80060fa:	3308      	adds	r3, #8
 80060fc:	9303      	str	r3, [sp, #12]
 80060fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006100:	4433      	add	r3, r6
 8006102:	9309      	str	r3, [sp, #36]	; 0x24
 8006104:	e767      	b.n	8005fd6 <_svfiprintf_r+0x4e>
 8006106:	fb0c 3202 	mla	r2, ip, r2, r3
 800610a:	460c      	mov	r4, r1
 800610c:	2001      	movs	r0, #1
 800610e:	e7a5      	b.n	800605c <_svfiprintf_r+0xd4>
 8006110:	2300      	movs	r3, #0
 8006112:	3401      	adds	r4, #1
 8006114:	9305      	str	r3, [sp, #20]
 8006116:	4619      	mov	r1, r3
 8006118:	f04f 0c0a 	mov.w	ip, #10
 800611c:	4620      	mov	r0, r4
 800611e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006122:	3a30      	subs	r2, #48	; 0x30
 8006124:	2a09      	cmp	r2, #9
 8006126:	d903      	bls.n	8006130 <_svfiprintf_r+0x1a8>
 8006128:	2b00      	cmp	r3, #0
 800612a:	d0c5      	beq.n	80060b8 <_svfiprintf_r+0x130>
 800612c:	9105      	str	r1, [sp, #20]
 800612e:	e7c3      	b.n	80060b8 <_svfiprintf_r+0x130>
 8006130:	fb0c 2101 	mla	r1, ip, r1, r2
 8006134:	4604      	mov	r4, r0
 8006136:	2301      	movs	r3, #1
 8006138:	e7f0      	b.n	800611c <_svfiprintf_r+0x194>
 800613a:	ab03      	add	r3, sp, #12
 800613c:	9300      	str	r3, [sp, #0]
 800613e:	462a      	mov	r2, r5
 8006140:	4b0f      	ldr	r3, [pc, #60]	; (8006180 <_svfiprintf_r+0x1f8>)
 8006142:	a904      	add	r1, sp, #16
 8006144:	4638      	mov	r0, r7
 8006146:	f3af 8000 	nop.w
 800614a:	1c42      	adds	r2, r0, #1
 800614c:	4606      	mov	r6, r0
 800614e:	d1d6      	bne.n	80060fe <_svfiprintf_r+0x176>
 8006150:	89ab      	ldrh	r3, [r5, #12]
 8006152:	065b      	lsls	r3, r3, #25
 8006154:	f53f af2c 	bmi.w	8005fb0 <_svfiprintf_r+0x28>
 8006158:	9809      	ldr	r0, [sp, #36]	; 0x24
 800615a:	b01d      	add	sp, #116	; 0x74
 800615c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006160:	ab03      	add	r3, sp, #12
 8006162:	9300      	str	r3, [sp, #0]
 8006164:	462a      	mov	r2, r5
 8006166:	4b06      	ldr	r3, [pc, #24]	; (8006180 <_svfiprintf_r+0x1f8>)
 8006168:	a904      	add	r1, sp, #16
 800616a:	4638      	mov	r0, r7
 800616c:	f000 f87a 	bl	8006264 <_printf_i>
 8006170:	e7eb      	b.n	800614a <_svfiprintf_r+0x1c2>
 8006172:	bf00      	nop
 8006174:	08006934 	.word	0x08006934
 8006178:	0800693e 	.word	0x0800693e
 800617c:	00000000 	.word	0x00000000
 8006180:	08005ed1 	.word	0x08005ed1
 8006184:	0800693a 	.word	0x0800693a

08006188 <_printf_common>:
 8006188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800618c:	4616      	mov	r6, r2
 800618e:	4699      	mov	r9, r3
 8006190:	688a      	ldr	r2, [r1, #8]
 8006192:	690b      	ldr	r3, [r1, #16]
 8006194:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006198:	4293      	cmp	r3, r2
 800619a:	bfb8      	it	lt
 800619c:	4613      	movlt	r3, r2
 800619e:	6033      	str	r3, [r6, #0]
 80061a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061a4:	4607      	mov	r7, r0
 80061a6:	460c      	mov	r4, r1
 80061a8:	b10a      	cbz	r2, 80061ae <_printf_common+0x26>
 80061aa:	3301      	adds	r3, #1
 80061ac:	6033      	str	r3, [r6, #0]
 80061ae:	6823      	ldr	r3, [r4, #0]
 80061b0:	0699      	lsls	r1, r3, #26
 80061b2:	bf42      	ittt	mi
 80061b4:	6833      	ldrmi	r3, [r6, #0]
 80061b6:	3302      	addmi	r3, #2
 80061b8:	6033      	strmi	r3, [r6, #0]
 80061ba:	6825      	ldr	r5, [r4, #0]
 80061bc:	f015 0506 	ands.w	r5, r5, #6
 80061c0:	d106      	bne.n	80061d0 <_printf_common+0x48>
 80061c2:	f104 0a19 	add.w	sl, r4, #25
 80061c6:	68e3      	ldr	r3, [r4, #12]
 80061c8:	6832      	ldr	r2, [r6, #0]
 80061ca:	1a9b      	subs	r3, r3, r2
 80061cc:	42ab      	cmp	r3, r5
 80061ce:	dc26      	bgt.n	800621e <_printf_common+0x96>
 80061d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80061d4:	1e13      	subs	r3, r2, #0
 80061d6:	6822      	ldr	r2, [r4, #0]
 80061d8:	bf18      	it	ne
 80061da:	2301      	movne	r3, #1
 80061dc:	0692      	lsls	r2, r2, #26
 80061de:	d42b      	bmi.n	8006238 <_printf_common+0xb0>
 80061e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061e4:	4649      	mov	r1, r9
 80061e6:	4638      	mov	r0, r7
 80061e8:	47c0      	blx	r8
 80061ea:	3001      	adds	r0, #1
 80061ec:	d01e      	beq.n	800622c <_printf_common+0xa4>
 80061ee:	6823      	ldr	r3, [r4, #0]
 80061f0:	68e5      	ldr	r5, [r4, #12]
 80061f2:	6832      	ldr	r2, [r6, #0]
 80061f4:	f003 0306 	and.w	r3, r3, #6
 80061f8:	2b04      	cmp	r3, #4
 80061fa:	bf08      	it	eq
 80061fc:	1aad      	subeq	r5, r5, r2
 80061fe:	68a3      	ldr	r3, [r4, #8]
 8006200:	6922      	ldr	r2, [r4, #16]
 8006202:	bf0c      	ite	eq
 8006204:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006208:	2500      	movne	r5, #0
 800620a:	4293      	cmp	r3, r2
 800620c:	bfc4      	itt	gt
 800620e:	1a9b      	subgt	r3, r3, r2
 8006210:	18ed      	addgt	r5, r5, r3
 8006212:	2600      	movs	r6, #0
 8006214:	341a      	adds	r4, #26
 8006216:	42b5      	cmp	r5, r6
 8006218:	d11a      	bne.n	8006250 <_printf_common+0xc8>
 800621a:	2000      	movs	r0, #0
 800621c:	e008      	b.n	8006230 <_printf_common+0xa8>
 800621e:	2301      	movs	r3, #1
 8006220:	4652      	mov	r2, sl
 8006222:	4649      	mov	r1, r9
 8006224:	4638      	mov	r0, r7
 8006226:	47c0      	blx	r8
 8006228:	3001      	adds	r0, #1
 800622a:	d103      	bne.n	8006234 <_printf_common+0xac>
 800622c:	f04f 30ff 	mov.w	r0, #4294967295
 8006230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006234:	3501      	adds	r5, #1
 8006236:	e7c6      	b.n	80061c6 <_printf_common+0x3e>
 8006238:	18e1      	adds	r1, r4, r3
 800623a:	1c5a      	adds	r2, r3, #1
 800623c:	2030      	movs	r0, #48	; 0x30
 800623e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006242:	4422      	add	r2, r4
 8006244:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006248:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800624c:	3302      	adds	r3, #2
 800624e:	e7c7      	b.n	80061e0 <_printf_common+0x58>
 8006250:	2301      	movs	r3, #1
 8006252:	4622      	mov	r2, r4
 8006254:	4649      	mov	r1, r9
 8006256:	4638      	mov	r0, r7
 8006258:	47c0      	blx	r8
 800625a:	3001      	adds	r0, #1
 800625c:	d0e6      	beq.n	800622c <_printf_common+0xa4>
 800625e:	3601      	adds	r6, #1
 8006260:	e7d9      	b.n	8006216 <_printf_common+0x8e>
	...

08006264 <_printf_i>:
 8006264:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006268:	460c      	mov	r4, r1
 800626a:	4691      	mov	r9, r2
 800626c:	7e27      	ldrb	r7, [r4, #24]
 800626e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006270:	2f78      	cmp	r7, #120	; 0x78
 8006272:	4680      	mov	r8, r0
 8006274:	469a      	mov	sl, r3
 8006276:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800627a:	d807      	bhi.n	800628c <_printf_i+0x28>
 800627c:	2f62      	cmp	r7, #98	; 0x62
 800627e:	d80a      	bhi.n	8006296 <_printf_i+0x32>
 8006280:	2f00      	cmp	r7, #0
 8006282:	f000 80d8 	beq.w	8006436 <_printf_i+0x1d2>
 8006286:	2f58      	cmp	r7, #88	; 0x58
 8006288:	f000 80a3 	beq.w	80063d2 <_printf_i+0x16e>
 800628c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006290:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006294:	e03a      	b.n	800630c <_printf_i+0xa8>
 8006296:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800629a:	2b15      	cmp	r3, #21
 800629c:	d8f6      	bhi.n	800628c <_printf_i+0x28>
 800629e:	a001      	add	r0, pc, #4	; (adr r0, 80062a4 <_printf_i+0x40>)
 80062a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80062a4:	080062fd 	.word	0x080062fd
 80062a8:	08006311 	.word	0x08006311
 80062ac:	0800628d 	.word	0x0800628d
 80062b0:	0800628d 	.word	0x0800628d
 80062b4:	0800628d 	.word	0x0800628d
 80062b8:	0800628d 	.word	0x0800628d
 80062bc:	08006311 	.word	0x08006311
 80062c0:	0800628d 	.word	0x0800628d
 80062c4:	0800628d 	.word	0x0800628d
 80062c8:	0800628d 	.word	0x0800628d
 80062cc:	0800628d 	.word	0x0800628d
 80062d0:	0800641d 	.word	0x0800641d
 80062d4:	08006341 	.word	0x08006341
 80062d8:	080063ff 	.word	0x080063ff
 80062dc:	0800628d 	.word	0x0800628d
 80062e0:	0800628d 	.word	0x0800628d
 80062e4:	0800643f 	.word	0x0800643f
 80062e8:	0800628d 	.word	0x0800628d
 80062ec:	08006341 	.word	0x08006341
 80062f0:	0800628d 	.word	0x0800628d
 80062f4:	0800628d 	.word	0x0800628d
 80062f8:	08006407 	.word	0x08006407
 80062fc:	680b      	ldr	r3, [r1, #0]
 80062fe:	1d1a      	adds	r2, r3, #4
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	600a      	str	r2, [r1, #0]
 8006304:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006308:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800630c:	2301      	movs	r3, #1
 800630e:	e0a3      	b.n	8006458 <_printf_i+0x1f4>
 8006310:	6825      	ldr	r5, [r4, #0]
 8006312:	6808      	ldr	r0, [r1, #0]
 8006314:	062e      	lsls	r6, r5, #24
 8006316:	f100 0304 	add.w	r3, r0, #4
 800631a:	d50a      	bpl.n	8006332 <_printf_i+0xce>
 800631c:	6805      	ldr	r5, [r0, #0]
 800631e:	600b      	str	r3, [r1, #0]
 8006320:	2d00      	cmp	r5, #0
 8006322:	da03      	bge.n	800632c <_printf_i+0xc8>
 8006324:	232d      	movs	r3, #45	; 0x2d
 8006326:	426d      	negs	r5, r5
 8006328:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800632c:	485e      	ldr	r0, [pc, #376]	; (80064a8 <_printf_i+0x244>)
 800632e:	230a      	movs	r3, #10
 8006330:	e019      	b.n	8006366 <_printf_i+0x102>
 8006332:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006336:	6805      	ldr	r5, [r0, #0]
 8006338:	600b      	str	r3, [r1, #0]
 800633a:	bf18      	it	ne
 800633c:	b22d      	sxthne	r5, r5
 800633e:	e7ef      	b.n	8006320 <_printf_i+0xbc>
 8006340:	680b      	ldr	r3, [r1, #0]
 8006342:	6825      	ldr	r5, [r4, #0]
 8006344:	1d18      	adds	r0, r3, #4
 8006346:	6008      	str	r0, [r1, #0]
 8006348:	0628      	lsls	r0, r5, #24
 800634a:	d501      	bpl.n	8006350 <_printf_i+0xec>
 800634c:	681d      	ldr	r5, [r3, #0]
 800634e:	e002      	b.n	8006356 <_printf_i+0xf2>
 8006350:	0669      	lsls	r1, r5, #25
 8006352:	d5fb      	bpl.n	800634c <_printf_i+0xe8>
 8006354:	881d      	ldrh	r5, [r3, #0]
 8006356:	4854      	ldr	r0, [pc, #336]	; (80064a8 <_printf_i+0x244>)
 8006358:	2f6f      	cmp	r7, #111	; 0x6f
 800635a:	bf0c      	ite	eq
 800635c:	2308      	moveq	r3, #8
 800635e:	230a      	movne	r3, #10
 8006360:	2100      	movs	r1, #0
 8006362:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006366:	6866      	ldr	r6, [r4, #4]
 8006368:	60a6      	str	r6, [r4, #8]
 800636a:	2e00      	cmp	r6, #0
 800636c:	bfa2      	ittt	ge
 800636e:	6821      	ldrge	r1, [r4, #0]
 8006370:	f021 0104 	bicge.w	r1, r1, #4
 8006374:	6021      	strge	r1, [r4, #0]
 8006376:	b90d      	cbnz	r5, 800637c <_printf_i+0x118>
 8006378:	2e00      	cmp	r6, #0
 800637a:	d04d      	beq.n	8006418 <_printf_i+0x1b4>
 800637c:	4616      	mov	r6, r2
 800637e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006382:	fb03 5711 	mls	r7, r3, r1, r5
 8006386:	5dc7      	ldrb	r7, [r0, r7]
 8006388:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800638c:	462f      	mov	r7, r5
 800638e:	42bb      	cmp	r3, r7
 8006390:	460d      	mov	r5, r1
 8006392:	d9f4      	bls.n	800637e <_printf_i+0x11a>
 8006394:	2b08      	cmp	r3, #8
 8006396:	d10b      	bne.n	80063b0 <_printf_i+0x14c>
 8006398:	6823      	ldr	r3, [r4, #0]
 800639a:	07df      	lsls	r7, r3, #31
 800639c:	d508      	bpl.n	80063b0 <_printf_i+0x14c>
 800639e:	6923      	ldr	r3, [r4, #16]
 80063a0:	6861      	ldr	r1, [r4, #4]
 80063a2:	4299      	cmp	r1, r3
 80063a4:	bfde      	ittt	le
 80063a6:	2330      	movle	r3, #48	; 0x30
 80063a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80063ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80063b0:	1b92      	subs	r2, r2, r6
 80063b2:	6122      	str	r2, [r4, #16]
 80063b4:	f8cd a000 	str.w	sl, [sp]
 80063b8:	464b      	mov	r3, r9
 80063ba:	aa03      	add	r2, sp, #12
 80063bc:	4621      	mov	r1, r4
 80063be:	4640      	mov	r0, r8
 80063c0:	f7ff fee2 	bl	8006188 <_printf_common>
 80063c4:	3001      	adds	r0, #1
 80063c6:	d14c      	bne.n	8006462 <_printf_i+0x1fe>
 80063c8:	f04f 30ff 	mov.w	r0, #4294967295
 80063cc:	b004      	add	sp, #16
 80063ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063d2:	4835      	ldr	r0, [pc, #212]	; (80064a8 <_printf_i+0x244>)
 80063d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80063d8:	6823      	ldr	r3, [r4, #0]
 80063da:	680e      	ldr	r6, [r1, #0]
 80063dc:	061f      	lsls	r7, r3, #24
 80063de:	f856 5b04 	ldr.w	r5, [r6], #4
 80063e2:	600e      	str	r6, [r1, #0]
 80063e4:	d514      	bpl.n	8006410 <_printf_i+0x1ac>
 80063e6:	07d9      	lsls	r1, r3, #31
 80063e8:	bf44      	itt	mi
 80063ea:	f043 0320 	orrmi.w	r3, r3, #32
 80063ee:	6023      	strmi	r3, [r4, #0]
 80063f0:	b91d      	cbnz	r5, 80063fa <_printf_i+0x196>
 80063f2:	6823      	ldr	r3, [r4, #0]
 80063f4:	f023 0320 	bic.w	r3, r3, #32
 80063f8:	6023      	str	r3, [r4, #0]
 80063fa:	2310      	movs	r3, #16
 80063fc:	e7b0      	b.n	8006360 <_printf_i+0xfc>
 80063fe:	6823      	ldr	r3, [r4, #0]
 8006400:	f043 0320 	orr.w	r3, r3, #32
 8006404:	6023      	str	r3, [r4, #0]
 8006406:	2378      	movs	r3, #120	; 0x78
 8006408:	4828      	ldr	r0, [pc, #160]	; (80064ac <_printf_i+0x248>)
 800640a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800640e:	e7e3      	b.n	80063d8 <_printf_i+0x174>
 8006410:	065e      	lsls	r6, r3, #25
 8006412:	bf48      	it	mi
 8006414:	b2ad      	uxthmi	r5, r5
 8006416:	e7e6      	b.n	80063e6 <_printf_i+0x182>
 8006418:	4616      	mov	r6, r2
 800641a:	e7bb      	b.n	8006394 <_printf_i+0x130>
 800641c:	680b      	ldr	r3, [r1, #0]
 800641e:	6826      	ldr	r6, [r4, #0]
 8006420:	6960      	ldr	r0, [r4, #20]
 8006422:	1d1d      	adds	r5, r3, #4
 8006424:	600d      	str	r5, [r1, #0]
 8006426:	0635      	lsls	r5, r6, #24
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	d501      	bpl.n	8006430 <_printf_i+0x1cc>
 800642c:	6018      	str	r0, [r3, #0]
 800642e:	e002      	b.n	8006436 <_printf_i+0x1d2>
 8006430:	0671      	lsls	r1, r6, #25
 8006432:	d5fb      	bpl.n	800642c <_printf_i+0x1c8>
 8006434:	8018      	strh	r0, [r3, #0]
 8006436:	2300      	movs	r3, #0
 8006438:	6123      	str	r3, [r4, #16]
 800643a:	4616      	mov	r6, r2
 800643c:	e7ba      	b.n	80063b4 <_printf_i+0x150>
 800643e:	680b      	ldr	r3, [r1, #0]
 8006440:	1d1a      	adds	r2, r3, #4
 8006442:	600a      	str	r2, [r1, #0]
 8006444:	681e      	ldr	r6, [r3, #0]
 8006446:	6862      	ldr	r2, [r4, #4]
 8006448:	2100      	movs	r1, #0
 800644a:	4630      	mov	r0, r6
 800644c:	f7f9 fec8 	bl	80001e0 <memchr>
 8006450:	b108      	cbz	r0, 8006456 <_printf_i+0x1f2>
 8006452:	1b80      	subs	r0, r0, r6
 8006454:	6060      	str	r0, [r4, #4]
 8006456:	6863      	ldr	r3, [r4, #4]
 8006458:	6123      	str	r3, [r4, #16]
 800645a:	2300      	movs	r3, #0
 800645c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006460:	e7a8      	b.n	80063b4 <_printf_i+0x150>
 8006462:	6923      	ldr	r3, [r4, #16]
 8006464:	4632      	mov	r2, r6
 8006466:	4649      	mov	r1, r9
 8006468:	4640      	mov	r0, r8
 800646a:	47d0      	blx	sl
 800646c:	3001      	adds	r0, #1
 800646e:	d0ab      	beq.n	80063c8 <_printf_i+0x164>
 8006470:	6823      	ldr	r3, [r4, #0]
 8006472:	079b      	lsls	r3, r3, #30
 8006474:	d413      	bmi.n	800649e <_printf_i+0x23a>
 8006476:	68e0      	ldr	r0, [r4, #12]
 8006478:	9b03      	ldr	r3, [sp, #12]
 800647a:	4298      	cmp	r0, r3
 800647c:	bfb8      	it	lt
 800647e:	4618      	movlt	r0, r3
 8006480:	e7a4      	b.n	80063cc <_printf_i+0x168>
 8006482:	2301      	movs	r3, #1
 8006484:	4632      	mov	r2, r6
 8006486:	4649      	mov	r1, r9
 8006488:	4640      	mov	r0, r8
 800648a:	47d0      	blx	sl
 800648c:	3001      	adds	r0, #1
 800648e:	d09b      	beq.n	80063c8 <_printf_i+0x164>
 8006490:	3501      	adds	r5, #1
 8006492:	68e3      	ldr	r3, [r4, #12]
 8006494:	9903      	ldr	r1, [sp, #12]
 8006496:	1a5b      	subs	r3, r3, r1
 8006498:	42ab      	cmp	r3, r5
 800649a:	dcf2      	bgt.n	8006482 <_printf_i+0x21e>
 800649c:	e7eb      	b.n	8006476 <_printf_i+0x212>
 800649e:	2500      	movs	r5, #0
 80064a0:	f104 0619 	add.w	r6, r4, #25
 80064a4:	e7f5      	b.n	8006492 <_printf_i+0x22e>
 80064a6:	bf00      	nop
 80064a8:	08006945 	.word	0x08006945
 80064ac:	08006956 	.word	0x08006956

080064b0 <memcpy>:
 80064b0:	440a      	add	r2, r1
 80064b2:	4291      	cmp	r1, r2
 80064b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80064b8:	d100      	bne.n	80064bc <memcpy+0xc>
 80064ba:	4770      	bx	lr
 80064bc:	b510      	push	{r4, lr}
 80064be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064c6:	4291      	cmp	r1, r2
 80064c8:	d1f9      	bne.n	80064be <memcpy+0xe>
 80064ca:	bd10      	pop	{r4, pc}

080064cc <memmove>:
 80064cc:	4288      	cmp	r0, r1
 80064ce:	b510      	push	{r4, lr}
 80064d0:	eb01 0402 	add.w	r4, r1, r2
 80064d4:	d902      	bls.n	80064dc <memmove+0x10>
 80064d6:	4284      	cmp	r4, r0
 80064d8:	4623      	mov	r3, r4
 80064da:	d807      	bhi.n	80064ec <memmove+0x20>
 80064dc:	1e43      	subs	r3, r0, #1
 80064de:	42a1      	cmp	r1, r4
 80064e0:	d008      	beq.n	80064f4 <memmove+0x28>
 80064e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80064ea:	e7f8      	b.n	80064de <memmove+0x12>
 80064ec:	4402      	add	r2, r0
 80064ee:	4601      	mov	r1, r0
 80064f0:	428a      	cmp	r2, r1
 80064f2:	d100      	bne.n	80064f6 <memmove+0x2a>
 80064f4:	bd10      	pop	{r4, pc}
 80064f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80064fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80064fe:	e7f7      	b.n	80064f0 <memmove+0x24>

08006500 <_free_r>:
 8006500:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006502:	2900      	cmp	r1, #0
 8006504:	d048      	beq.n	8006598 <_free_r+0x98>
 8006506:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800650a:	9001      	str	r0, [sp, #4]
 800650c:	2b00      	cmp	r3, #0
 800650e:	f1a1 0404 	sub.w	r4, r1, #4
 8006512:	bfb8      	it	lt
 8006514:	18e4      	addlt	r4, r4, r3
 8006516:	f000 f8d3 	bl	80066c0 <__malloc_lock>
 800651a:	4a20      	ldr	r2, [pc, #128]	; (800659c <_free_r+0x9c>)
 800651c:	9801      	ldr	r0, [sp, #4]
 800651e:	6813      	ldr	r3, [r2, #0]
 8006520:	4615      	mov	r5, r2
 8006522:	b933      	cbnz	r3, 8006532 <_free_r+0x32>
 8006524:	6063      	str	r3, [r4, #4]
 8006526:	6014      	str	r4, [r2, #0]
 8006528:	b003      	add	sp, #12
 800652a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800652e:	f000 b8cd 	b.w	80066cc <__malloc_unlock>
 8006532:	42a3      	cmp	r3, r4
 8006534:	d90b      	bls.n	800654e <_free_r+0x4e>
 8006536:	6821      	ldr	r1, [r4, #0]
 8006538:	1862      	adds	r2, r4, r1
 800653a:	4293      	cmp	r3, r2
 800653c:	bf04      	itt	eq
 800653e:	681a      	ldreq	r2, [r3, #0]
 8006540:	685b      	ldreq	r3, [r3, #4]
 8006542:	6063      	str	r3, [r4, #4]
 8006544:	bf04      	itt	eq
 8006546:	1852      	addeq	r2, r2, r1
 8006548:	6022      	streq	r2, [r4, #0]
 800654a:	602c      	str	r4, [r5, #0]
 800654c:	e7ec      	b.n	8006528 <_free_r+0x28>
 800654e:	461a      	mov	r2, r3
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	b10b      	cbz	r3, 8006558 <_free_r+0x58>
 8006554:	42a3      	cmp	r3, r4
 8006556:	d9fa      	bls.n	800654e <_free_r+0x4e>
 8006558:	6811      	ldr	r1, [r2, #0]
 800655a:	1855      	adds	r5, r2, r1
 800655c:	42a5      	cmp	r5, r4
 800655e:	d10b      	bne.n	8006578 <_free_r+0x78>
 8006560:	6824      	ldr	r4, [r4, #0]
 8006562:	4421      	add	r1, r4
 8006564:	1854      	adds	r4, r2, r1
 8006566:	42a3      	cmp	r3, r4
 8006568:	6011      	str	r1, [r2, #0]
 800656a:	d1dd      	bne.n	8006528 <_free_r+0x28>
 800656c:	681c      	ldr	r4, [r3, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	6053      	str	r3, [r2, #4]
 8006572:	4421      	add	r1, r4
 8006574:	6011      	str	r1, [r2, #0]
 8006576:	e7d7      	b.n	8006528 <_free_r+0x28>
 8006578:	d902      	bls.n	8006580 <_free_r+0x80>
 800657a:	230c      	movs	r3, #12
 800657c:	6003      	str	r3, [r0, #0]
 800657e:	e7d3      	b.n	8006528 <_free_r+0x28>
 8006580:	6825      	ldr	r5, [r4, #0]
 8006582:	1961      	adds	r1, r4, r5
 8006584:	428b      	cmp	r3, r1
 8006586:	bf04      	itt	eq
 8006588:	6819      	ldreq	r1, [r3, #0]
 800658a:	685b      	ldreq	r3, [r3, #4]
 800658c:	6063      	str	r3, [r4, #4]
 800658e:	bf04      	itt	eq
 8006590:	1949      	addeq	r1, r1, r5
 8006592:	6021      	streq	r1, [r4, #0]
 8006594:	6054      	str	r4, [r2, #4]
 8006596:	e7c7      	b.n	8006528 <_free_r+0x28>
 8006598:	b003      	add	sp, #12
 800659a:	bd30      	pop	{r4, r5, pc}
 800659c:	200000b8 	.word	0x200000b8

080065a0 <_malloc_r>:
 80065a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a2:	1ccd      	adds	r5, r1, #3
 80065a4:	f025 0503 	bic.w	r5, r5, #3
 80065a8:	3508      	adds	r5, #8
 80065aa:	2d0c      	cmp	r5, #12
 80065ac:	bf38      	it	cc
 80065ae:	250c      	movcc	r5, #12
 80065b0:	2d00      	cmp	r5, #0
 80065b2:	4606      	mov	r6, r0
 80065b4:	db01      	blt.n	80065ba <_malloc_r+0x1a>
 80065b6:	42a9      	cmp	r1, r5
 80065b8:	d903      	bls.n	80065c2 <_malloc_r+0x22>
 80065ba:	230c      	movs	r3, #12
 80065bc:	6033      	str	r3, [r6, #0]
 80065be:	2000      	movs	r0, #0
 80065c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065c2:	f000 f87d 	bl	80066c0 <__malloc_lock>
 80065c6:	4921      	ldr	r1, [pc, #132]	; (800664c <_malloc_r+0xac>)
 80065c8:	680a      	ldr	r2, [r1, #0]
 80065ca:	4614      	mov	r4, r2
 80065cc:	b99c      	cbnz	r4, 80065f6 <_malloc_r+0x56>
 80065ce:	4f20      	ldr	r7, [pc, #128]	; (8006650 <_malloc_r+0xb0>)
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	b923      	cbnz	r3, 80065de <_malloc_r+0x3e>
 80065d4:	4621      	mov	r1, r4
 80065d6:	4630      	mov	r0, r6
 80065d8:	f000 f862 	bl	80066a0 <_sbrk_r>
 80065dc:	6038      	str	r0, [r7, #0]
 80065de:	4629      	mov	r1, r5
 80065e0:	4630      	mov	r0, r6
 80065e2:	f000 f85d 	bl	80066a0 <_sbrk_r>
 80065e6:	1c43      	adds	r3, r0, #1
 80065e8:	d123      	bne.n	8006632 <_malloc_r+0x92>
 80065ea:	230c      	movs	r3, #12
 80065ec:	6033      	str	r3, [r6, #0]
 80065ee:	4630      	mov	r0, r6
 80065f0:	f000 f86c 	bl	80066cc <__malloc_unlock>
 80065f4:	e7e3      	b.n	80065be <_malloc_r+0x1e>
 80065f6:	6823      	ldr	r3, [r4, #0]
 80065f8:	1b5b      	subs	r3, r3, r5
 80065fa:	d417      	bmi.n	800662c <_malloc_r+0x8c>
 80065fc:	2b0b      	cmp	r3, #11
 80065fe:	d903      	bls.n	8006608 <_malloc_r+0x68>
 8006600:	6023      	str	r3, [r4, #0]
 8006602:	441c      	add	r4, r3
 8006604:	6025      	str	r5, [r4, #0]
 8006606:	e004      	b.n	8006612 <_malloc_r+0x72>
 8006608:	6863      	ldr	r3, [r4, #4]
 800660a:	42a2      	cmp	r2, r4
 800660c:	bf0c      	ite	eq
 800660e:	600b      	streq	r3, [r1, #0]
 8006610:	6053      	strne	r3, [r2, #4]
 8006612:	4630      	mov	r0, r6
 8006614:	f000 f85a 	bl	80066cc <__malloc_unlock>
 8006618:	f104 000b 	add.w	r0, r4, #11
 800661c:	1d23      	adds	r3, r4, #4
 800661e:	f020 0007 	bic.w	r0, r0, #7
 8006622:	1ac2      	subs	r2, r0, r3
 8006624:	d0cc      	beq.n	80065c0 <_malloc_r+0x20>
 8006626:	1a1b      	subs	r3, r3, r0
 8006628:	50a3      	str	r3, [r4, r2]
 800662a:	e7c9      	b.n	80065c0 <_malloc_r+0x20>
 800662c:	4622      	mov	r2, r4
 800662e:	6864      	ldr	r4, [r4, #4]
 8006630:	e7cc      	b.n	80065cc <_malloc_r+0x2c>
 8006632:	1cc4      	adds	r4, r0, #3
 8006634:	f024 0403 	bic.w	r4, r4, #3
 8006638:	42a0      	cmp	r0, r4
 800663a:	d0e3      	beq.n	8006604 <_malloc_r+0x64>
 800663c:	1a21      	subs	r1, r4, r0
 800663e:	4630      	mov	r0, r6
 8006640:	f000 f82e 	bl	80066a0 <_sbrk_r>
 8006644:	3001      	adds	r0, #1
 8006646:	d1dd      	bne.n	8006604 <_malloc_r+0x64>
 8006648:	e7cf      	b.n	80065ea <_malloc_r+0x4a>
 800664a:	bf00      	nop
 800664c:	200000b8 	.word	0x200000b8
 8006650:	200000bc 	.word	0x200000bc

08006654 <_realloc_r>:
 8006654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006656:	4607      	mov	r7, r0
 8006658:	4614      	mov	r4, r2
 800665a:	460e      	mov	r6, r1
 800665c:	b921      	cbnz	r1, 8006668 <_realloc_r+0x14>
 800665e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006662:	4611      	mov	r1, r2
 8006664:	f7ff bf9c 	b.w	80065a0 <_malloc_r>
 8006668:	b922      	cbnz	r2, 8006674 <_realloc_r+0x20>
 800666a:	f7ff ff49 	bl	8006500 <_free_r>
 800666e:	4625      	mov	r5, r4
 8006670:	4628      	mov	r0, r5
 8006672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006674:	f000 f830 	bl	80066d8 <_malloc_usable_size_r>
 8006678:	42a0      	cmp	r0, r4
 800667a:	d20f      	bcs.n	800669c <_realloc_r+0x48>
 800667c:	4621      	mov	r1, r4
 800667e:	4638      	mov	r0, r7
 8006680:	f7ff ff8e 	bl	80065a0 <_malloc_r>
 8006684:	4605      	mov	r5, r0
 8006686:	2800      	cmp	r0, #0
 8006688:	d0f2      	beq.n	8006670 <_realloc_r+0x1c>
 800668a:	4631      	mov	r1, r6
 800668c:	4622      	mov	r2, r4
 800668e:	f7ff ff0f 	bl	80064b0 <memcpy>
 8006692:	4631      	mov	r1, r6
 8006694:	4638      	mov	r0, r7
 8006696:	f7ff ff33 	bl	8006500 <_free_r>
 800669a:	e7e9      	b.n	8006670 <_realloc_r+0x1c>
 800669c:	4635      	mov	r5, r6
 800669e:	e7e7      	b.n	8006670 <_realloc_r+0x1c>

080066a0 <_sbrk_r>:
 80066a0:	b538      	push	{r3, r4, r5, lr}
 80066a2:	4d06      	ldr	r5, [pc, #24]	; (80066bc <_sbrk_r+0x1c>)
 80066a4:	2300      	movs	r3, #0
 80066a6:	4604      	mov	r4, r0
 80066a8:	4608      	mov	r0, r1
 80066aa:	602b      	str	r3, [r5, #0]
 80066ac:	f7fb fb82 	bl	8001db4 <_sbrk>
 80066b0:	1c43      	adds	r3, r0, #1
 80066b2:	d102      	bne.n	80066ba <_sbrk_r+0x1a>
 80066b4:	682b      	ldr	r3, [r5, #0]
 80066b6:	b103      	cbz	r3, 80066ba <_sbrk_r+0x1a>
 80066b8:	6023      	str	r3, [r4, #0]
 80066ba:	bd38      	pop	{r3, r4, r5, pc}
 80066bc:	200007e8 	.word	0x200007e8

080066c0 <__malloc_lock>:
 80066c0:	4801      	ldr	r0, [pc, #4]	; (80066c8 <__malloc_lock+0x8>)
 80066c2:	f000 b811 	b.w	80066e8 <__retarget_lock_acquire_recursive>
 80066c6:	bf00      	nop
 80066c8:	200007f0 	.word	0x200007f0

080066cc <__malloc_unlock>:
 80066cc:	4801      	ldr	r0, [pc, #4]	; (80066d4 <__malloc_unlock+0x8>)
 80066ce:	f000 b80c 	b.w	80066ea <__retarget_lock_release_recursive>
 80066d2:	bf00      	nop
 80066d4:	200007f0 	.word	0x200007f0

080066d8 <_malloc_usable_size_r>:
 80066d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066dc:	1f18      	subs	r0, r3, #4
 80066de:	2b00      	cmp	r3, #0
 80066e0:	bfbc      	itt	lt
 80066e2:	580b      	ldrlt	r3, [r1, r0]
 80066e4:	18c0      	addlt	r0, r0, r3
 80066e6:	4770      	bx	lr

080066e8 <__retarget_lock_acquire_recursive>:
 80066e8:	4770      	bx	lr

080066ea <__retarget_lock_release_recursive>:
 80066ea:	4770      	bx	lr

080066ec <_init>:
 80066ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ee:	bf00      	nop
 80066f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066f2:	bc08      	pop	{r3}
 80066f4:	469e      	mov	lr, r3
 80066f6:	4770      	bx	lr

080066f8 <_fini>:
 80066f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066fa:	bf00      	nop
 80066fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066fe:	bc08      	pop	{r3}
 8006700:	469e      	mov	lr, r3
 8006702:	4770      	bx	lr

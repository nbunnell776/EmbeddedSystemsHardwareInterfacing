
UCSD-Embedded-HW-Interfacing-USB-Nathan-Bunnell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087b4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800893c  0800893c  0001893c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089cc  080089cc  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  080089cc  080089cc  000189cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089d4  080089d4  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089d4  080089d4  000189d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089d8  080089d8  000189d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  080089dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d78  20000190  08008b6c  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f08  08008b6c  00021f08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022c25  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004250  00000000  00000000  00042de5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001928  00000000  00000000  00047038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001790  00000000  00000000  00048960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ac66  00000000  00000000  0004a0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d393  00000000  00000000  00074d56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4f41  00000000  00000000  000920e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018702a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a0c  00000000  00000000  00187080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000190 	.word	0x20000190
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008924 	.word	0x08008924

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000194 	.word	0x20000194
 80001c4:	08008924 	.word	0x08008924

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fe0f 	bl	80010e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f812 	bl	80004f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f9ee 	bl	80008ac <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80004d0:	f000 f8b2 	bl	8000638 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80004d4:	f000 f8e8 	bl	80006a8 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80004d8:	f000 f924 	bl	8000724 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80004dc:	f000 f948 	bl	8000770 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80004e0:	f000 f984 	bl	80007ec <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80004e4:	f000 f9b2 	bl	800084c <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80004e8:	f007 fbd8 	bl	8007c9c <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ec:	e7fe      	b.n	80004ec <main+0x2c>
	...

080004f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b0b8      	sub	sp, #224	; 0xe0
 80004f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80004fa:	2244      	movs	r2, #68	; 0x44
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f008 fa08 	bl	8008914 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000504:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000514:	463b      	mov	r3, r7
 8000516:	2288      	movs	r2, #136	; 0x88
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f008 f9fa 	bl	8008914 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000520:	f002 fc42 	bl	8002da8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000524:	4b42      	ldr	r3, [pc, #264]	; (8000630 <SystemClock_Config+0x140>)
 8000526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800052a:	4a41      	ldr	r2, [pc, #260]	; (8000630 <SystemClock_Config+0x140>)
 800052c:	f023 0318 	bic.w	r3, r3, #24
 8000530:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000534:	2314      	movs	r3, #20
 8000536:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800053a:	2301      	movs	r3, #1
 800053c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000540:	2301      	movs	r3, #1
 8000542:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000546:	2300      	movs	r3, #0
 8000548:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800054c:	2360      	movs	r3, #96	; 0x60
 800054e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000552:	2302      	movs	r3, #2
 8000554:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000558:	2301      	movs	r3, #1
 800055a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800055e:	2301      	movs	r3, #1
 8000560:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000564:	2328      	movs	r3, #40	; 0x28
 8000566:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800056a:	2307      	movs	r3, #7
 800056c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000570:	2302      	movs	r3, #2
 8000572:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000576:	2302      	movs	r3, #2
 8000578:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000580:	4618      	mov	r0, r3
 8000582:	f002 fd51 	bl	8003028 <HAL_RCC_OscConfig>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800058c:	f000 fb3e 	bl	8000c0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000590:	230f      	movs	r3, #15
 8000592:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000596:	2303      	movs	r3, #3
 8000598:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ae:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005b2:	2104      	movs	r1, #4
 80005b4:	4618      	mov	r0, r3
 80005b6:	f003 f91d 	bl	80037f4 <HAL_RCC_ClockConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80005c0:	f000 fb24 	bl	8000c0c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 80005c4:	4b1b      	ldr	r3, [pc, #108]	; (8000634 <SystemClock_Config+0x144>)
 80005c6:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005c8:	2300      	movs	r3, #0
 80005ca:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80005d4:	2300      	movs	r3, #0
 80005d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80005da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80005de:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80005e0:	2301      	movs	r3, #1
 80005e2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80005e8:	2318      	movs	r3, #24
 80005ea:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80005ec:	2307      	movs	r3, #7
 80005ee:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80005f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80005fc:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005fe:	463b      	mov	r3, r7
 8000600:	4618      	mov	r0, r3
 8000602:	f003 fafd 	bl	8003c00 <HAL_RCCEx_PeriphCLKConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x120>
  {
    Error_Handler();
 800060c:	f000 fafe 	bl	8000c0c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000610:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000614:	f002 fbe6 	bl	8002de4 <HAL_PWREx_ControlVoltageScaling>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x132>
  {
    Error_Handler();
 800061e:	f000 faf5 	bl	8000c0c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000622:	f003 fdd7 	bl	80041d4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000626:	bf00      	nop
 8000628:	37e0      	adds	r7, #224	; 0xe0
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40021000 	.word	0x40021000
 8000634:	00012085 	.word	0x00012085

08000638 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800063c:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <MX_DFSDM1_Init+0x68>)
 800063e:	4a19      	ldr	r2, [pc, #100]	; (80006a4 <MX_DFSDM1_Init+0x6c>)
 8000640:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000642:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <MX_DFSDM1_Init+0x68>)
 8000644:	2201      	movs	r2, #1
 8000646:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000648:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <MX_DFSDM1_Init+0x68>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800064e:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <MX_DFSDM1_Init+0x68>)
 8000650:	2202      	movs	r2, #2
 8000652:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <MX_DFSDM1_Init+0x68>)
 8000656:	2200      	movs	r2, #0
 8000658:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800065a:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <MX_DFSDM1_Init+0x68>)
 800065c:	2200      	movs	r2, #0
 800065e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000660:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <MX_DFSDM1_Init+0x68>)
 8000662:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000666:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000668:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <MX_DFSDM1_Init+0x68>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800066e:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <MX_DFSDM1_Init+0x68>)
 8000670:	2204      	movs	r2, #4
 8000672:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000674:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <MX_DFSDM1_Init+0x68>)
 8000676:	2200      	movs	r2, #0
 8000678:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800067a:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MX_DFSDM1_Init+0x68>)
 800067c:	2201      	movs	r2, #1
 800067e:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000680:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <MX_DFSDM1_Init+0x68>)
 8000682:	2200      	movs	r2, #0
 8000684:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <MX_DFSDM1_Init+0x68>)
 8000688:	2200      	movs	r2, #0
 800068a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800068c:	4804      	ldr	r0, [pc, #16]	; (80006a0 <MX_DFSDM1_Init+0x68>)
 800068e:	f000 fed5 	bl	800143c <HAL_DFSDM_ChannelInit>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000698:	f000 fab8 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	200003f8 	.word	0x200003f8
 80006a4:	40016020 	.word	0x40016020

080006a8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006ac:	4b1b      	ldr	r3, [pc, #108]	; (800071c <MX_I2C2_Init+0x74>)
 80006ae:	4a1c      	ldr	r2, [pc, #112]	; (8000720 <MX_I2C2_Init+0x78>)
 80006b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80006b2:	4b1a      	ldr	r3, [pc, #104]	; (800071c <MX_I2C2_Init+0x74>)
 80006b4:	f640 6214 	movw	r2, #3604	; 0xe14
 80006b8:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006ba:	4b18      	ldr	r3, [pc, #96]	; (800071c <MX_I2C2_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c0:	4b16      	ldr	r3, [pc, #88]	; (800071c <MX_I2C2_Init+0x74>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c6:	4b15      	ldr	r3, [pc, #84]	; (800071c <MX_I2C2_Init+0x74>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006cc:	4b13      	ldr	r3, [pc, #76]	; (800071c <MX_I2C2_Init+0x74>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006d2:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_I2C2_Init+0x74>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d8:	4b10      	ldr	r3, [pc, #64]	; (800071c <MX_I2C2_Init+0x74>)
 80006da:	2200      	movs	r2, #0
 80006dc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_I2C2_Init+0x74>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006e4:	480d      	ldr	r0, [pc, #52]	; (800071c <MX_I2C2_Init+0x74>)
 80006e6:	f001 f99a 	bl	8001a1e <HAL_I2C_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006f0:	f000 fa8c 	bl	8000c0c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006f4:	2100      	movs	r1, #0
 80006f6:	4809      	ldr	r0, [pc, #36]	; (800071c <MX_I2C2_Init+0x74>)
 80006f8:	f001 fa20 	bl	8001b3c <HAL_I2CEx_ConfigAnalogFilter>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000702:	f000 fa83 	bl	8000c0c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000706:	2100      	movs	r1, #0
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <MX_I2C2_Init+0x74>)
 800070a:	f001 fa62 	bl	8001bd2 <HAL_I2CEx_ConfigDigitalFilter>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000714:	f000 fa7a 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200004b4 	.word	0x200004b4
 8000720:	40005800 	.word	0x40005800

08000724 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_QUADSPI_Init+0x44>)
 800072a:	4a10      	ldr	r2, [pc, #64]	; (800076c <MX_QUADSPI_Init+0x48>)
 800072c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_QUADSPI_Init+0x44>)
 8000730:	2202      	movs	r2, #2
 8000732:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_QUADSPI_Init+0x44>)
 8000736:	2204      	movs	r2, #4
 8000738:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <MX_QUADSPI_Init+0x44>)
 800073c:	2210      	movs	r2, #16
 800073e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_QUADSPI_Init+0x44>)
 8000742:	2217      	movs	r2, #23
 8000744:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <MX_QUADSPI_Init+0x44>)
 8000748:	2200      	movs	r2, #0
 800074a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_QUADSPI_Init+0x44>)
 800074e:	2200      	movs	r2, #0
 8000750:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_QUADSPI_Init+0x44>)
 8000754:	f002 fbac 	bl	8002eb0 <HAL_QSPI_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800075e:	f000 fa55 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200005e8 	.word	0x200005e8
 800076c:	a0001000 	.word	0xa0001000

08000770 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000774:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <MX_SPI3_Init+0x74>)
 8000776:	4a1c      	ldr	r2, [pc, #112]	; (80007e8 <MX_SPI3_Init+0x78>)
 8000778:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800077a:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <MX_SPI3_Init+0x74>)
 800077c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000780:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000782:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <MX_SPI3_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000788:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <MX_SPI3_Init+0x74>)
 800078a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800078e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000790:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_SPI3_Init+0x74>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000796:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <MX_SPI3_Init+0x74>)
 8000798:	2200      	movs	r2, #0
 800079a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_SPI3_Init+0x74>)
 800079e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_SPI3_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_SPI3_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_SPI3_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <MX_SPI3_Init+0x74>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_SPI3_Init+0x74>)
 80007be:	2207      	movs	r2, #7
 80007c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <MX_SPI3_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_SPI3_Init+0x74>)
 80007ca:	2208      	movs	r2, #8
 80007cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_SPI3_Init+0x74>)
 80007d0:	f003 fee2 	bl	8004598 <HAL_SPI_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80007da:	f000 fa17 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000500 	.word	0x20000500
 80007e8:	40003c00 	.word	0x40003c00

080007ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007f0:	4b14      	ldr	r3, [pc, #80]	; (8000844 <MX_USART1_UART_Init+0x58>)
 80007f2:	4a15      	ldr	r2, [pc, #84]	; (8000848 <MX_USART1_UART_Init+0x5c>)
 80007f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007f6:	4b13      	ldr	r3, [pc, #76]	; (8000844 <MX_USART1_UART_Init+0x58>)
 80007f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_USART1_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_USART1_UART_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_USART1_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_USART1_UART_Init+0x58>)
 8000812:	220c      	movs	r2, #12
 8000814:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <MX_USART1_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_USART1_UART_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <MX_USART1_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_USART1_UART_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800082e:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_USART1_UART_Init+0x58>)
 8000830:	f003 ff55 	bl	80046de <HAL_UART_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800083a:	f000 f9e7 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000564 	.word	0x20000564
 8000848:	40013800 	.word	0x40013800

0800084c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000850:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000852:	4a15      	ldr	r2, [pc, #84]	; (80008a8 <MX_USART3_UART_Init+0x5c>)
 8000854:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000856:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000858:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800085c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000872:	220c      	movs	r2, #12
 8000874:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000890:	f003 ff25 	bl	80046de <HAL_UART_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800089a:	f000 f9b7 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000430 	.word	0x20000430
 80008a8:	40004800 	.word	0x40004800

080008ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08a      	sub	sp, #40	; 0x28
 80008b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008c2:	4bba      	ldr	r3, [pc, #744]	; (8000bac <MX_GPIO_Init+0x300>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	4ab9      	ldr	r2, [pc, #740]	; (8000bac <MX_GPIO_Init+0x300>)
 80008c8:	f043 0310 	orr.w	r3, r3, #16
 80008cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ce:	4bb7      	ldr	r3, [pc, #732]	; (8000bac <MX_GPIO_Init+0x300>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	f003 0310 	and.w	r3, r3, #16
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008da:	4bb4      	ldr	r3, [pc, #720]	; (8000bac <MX_GPIO_Init+0x300>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	4ab3      	ldr	r2, [pc, #716]	; (8000bac <MX_GPIO_Init+0x300>)
 80008e0:	f043 0304 	orr.w	r3, r3, #4
 80008e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e6:	4bb1      	ldr	r3, [pc, #708]	; (8000bac <MX_GPIO_Init+0x300>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	f003 0304 	and.w	r3, r3, #4
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	4bae      	ldr	r3, [pc, #696]	; (8000bac <MX_GPIO_Init+0x300>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	4aad      	ldr	r2, [pc, #692]	; (8000bac <MX_GPIO_Init+0x300>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fe:	4bab      	ldr	r3, [pc, #684]	; (8000bac <MX_GPIO_Init+0x300>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090a:	4ba8      	ldr	r3, [pc, #672]	; (8000bac <MX_GPIO_Init+0x300>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	4aa7      	ldr	r2, [pc, #668]	; (8000bac <MX_GPIO_Init+0x300>)
 8000910:	f043 0302 	orr.w	r3, r3, #2
 8000914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000916:	4ba5      	ldr	r3, [pc, #660]	; (8000bac <MX_GPIO_Init+0x300>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000922:	4ba2      	ldr	r3, [pc, #648]	; (8000bac <MX_GPIO_Init+0x300>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	4aa1      	ldr	r2, [pc, #644]	; (8000bac <MX_GPIO_Init+0x300>)
 8000928:	f043 0308 	orr.w	r3, r3, #8
 800092c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092e:	4b9f      	ldr	r3, [pc, #636]	; (8000bac <MX_GPIO_Init+0x300>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	f003 0308 	and.w	r3, r3, #8
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000940:	489b      	ldr	r0, [pc, #620]	; (8000bb0 <MX_GPIO_Init+0x304>)
 8000942:	f001 f831 	bl	80019a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	f248 1104 	movw	r1, #33028	; 0x8104
 800094c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000950:	f001 f82a 	bl	80019a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000954:	2200      	movs	r2, #0
 8000956:	f24f 0114 	movw	r1, #61460	; 0xf014
 800095a:	4896      	ldr	r0, [pc, #600]	; (8000bb4 <MX_GPIO_Init+0x308>)
 800095c:	f001 f824 	bl	80019a8 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	f241 0181 	movw	r1, #4225	; 0x1081
 8000966:	4894      	ldr	r0, [pc, #592]	; (8000bb8 <MX_GPIO_Init+0x30c>)
 8000968:	f001 f81e 	bl	80019a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 800096c:	2201      	movs	r2, #1
 800096e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000972:	4891      	ldr	r0, [pc, #580]	; (8000bb8 <MX_GPIO_Init+0x30c>)
 8000974:	f001 f818 	bl	80019a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800097e:	488f      	ldr	r0, [pc, #572]	; (8000bbc <MX_GPIO_Init+0x310>)
 8000980:	f001 f812 	bl	80019a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000984:	2201      	movs	r2, #1
 8000986:	2120      	movs	r1, #32
 8000988:	488a      	ldr	r0, [pc, #552]	; (8000bb4 <MX_GPIO_Init+0x308>)
 800098a:	f001 f80d 	bl	80019a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800098e:	2201      	movs	r2, #1
 8000990:	2101      	movs	r1, #1
 8000992:	4887      	ldr	r0, [pc, #540]	; (8000bb0 <MX_GPIO_Init+0x304>)
 8000994:	f001 f808 	bl	80019a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000998:	f240 1315 	movw	r3, #277	; 0x115
 800099c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	2301      	movs	r3, #1
 80009a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	4619      	mov	r1, r3
 80009b0:	487f      	ldr	r0, [pc, #508]	; (8000bb0 <MX_GPIO_Init+0x304>)
 80009b2:	f000 fe4f 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80009b6:	236a      	movs	r3, #106	; 0x6a
 80009b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ba:	4b81      	ldr	r3, [pc, #516]	; (8000bc0 <MX_GPIO_Init+0x314>)
 80009bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4619      	mov	r1, r3
 80009c8:	4879      	ldr	r0, [pc, #484]	; (8000bb0 <MX_GPIO_Init+0x304>)
 80009ca:	f000 fe43 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80009ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009d4:	4b7b      	ldr	r3, [pc, #492]	; (8000bc4 <MX_GPIO_Init+0x318>)
 80009d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	4876      	ldr	r0, [pc, #472]	; (8000bbc <MX_GPIO_Init+0x310>)
 80009e4:	f000 fe36 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80009e8:	233f      	movs	r3, #63	; 0x3f
 80009ea:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009ec:	230b      	movs	r3, #11
 80009ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4619      	mov	r1, r3
 80009fa:	4870      	ldr	r0, [pc, #448]	; (8000bbc <MX_GPIO_Init+0x310>)
 80009fc:	f000 fe2a 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000a00:	2303      	movs	r3, #3
 8000a02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a10:	2308      	movs	r3, #8
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1e:	f000 fe19 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000a22:	f248 1304 	movw	r3, #33028	; 0x8104
 8000a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3e:	f000 fe09 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000a42:	2308      	movs	r3, #8
 8000a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a52:	2301      	movs	r3, #1
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a60:	f000 fdf8 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000a64:	2310      	movs	r3, #16
 8000a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a68:	230b      	movs	r3, #11
 8000a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4619      	mov	r1, r3
 8000a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7a:	f000 fdeb 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000a7e:	23e0      	movs	r3, #224	; 0xe0
 8000a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a82:	2302      	movs	r3, #2
 8000a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a8e:	2305      	movs	r3, #5
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4619      	mov	r1, r3
 8000a98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9c:	f000 fdda 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aa4:	4b46      	ldr	r3, [pc, #280]	; (8000bc0 <MX_GPIO_Init+0x314>)
 8000aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4840      	ldr	r0, [pc, #256]	; (8000bb4 <MX_GPIO_Init+0x308>)
 8000ab4:	f000 fdce 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000abc:	230b      	movs	r3, #11
 8000abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	483a      	ldr	r0, [pc, #232]	; (8000bb4 <MX_GPIO_Init+0x308>)
 8000acc:	f000 fdc2 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000ad0:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000ad4:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4832      	ldr	r0, [pc, #200]	; (8000bb4 <MX_GPIO_Init+0x308>)
 8000aea:	f000 fdb3 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000aee:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000af2:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af4:	4b32      	ldr	r3, [pc, #200]	; (8000bc0 <MX_GPIO_Init+0x314>)
 8000af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	4619      	mov	r1, r3
 8000b02:	482d      	ldr	r0, [pc, #180]	; (8000bb8 <MX_GPIO_Init+0x30c>)
 8000b04:	f000 fda6 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000b08:	f243 0381 	movw	r3, #12417	; 0x3081
 8000b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4825      	ldr	r0, [pc, #148]	; (8000bb8 <MX_GPIO_Init+0x30c>)
 8000b22:	f000 fd97 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000b26:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	481f      	ldr	r0, [pc, #124]	; (8000bbc <MX_GPIO_Init+0x310>)
 8000b40:	f000 fd88 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000b44:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b4a:	4b1d      	ldr	r3, [pc, #116]	; (8000bc0 <MX_GPIO_Init+0x314>)
 8000b4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	4818      	ldr	r0, [pc, #96]	; (8000bbc <MX_GPIO_Init+0x310>)
 8000b5a:	f000 fd7b 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b6e:	2305      	movs	r3, #5
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	480f      	ldr	r0, [pc, #60]	; (8000bb8 <MX_GPIO_Init+0x30c>)
 8000b7a:	f000 fd6b 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000b7e:	2378      	movs	r3, #120	; 0x78
 8000b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b8e:	2307      	movs	r3, #7
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	4807      	ldr	r0, [pc, #28]	; (8000bb8 <MX_GPIO_Init+0x30c>)
 8000b9a:	f000 fd5b 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000b9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ba4:	2312      	movs	r3, #18
 8000ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	e00d      	b.n	8000bc8 <MX_GPIO_Init+0x31c>
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	48001000 	.word	0x48001000
 8000bb4:	48000400 	.word	0x48000400
 8000bb8:	48000c00 	.word	0x48000c00
 8000bbc:	48000800 	.word	0x48000800
 8000bc0:	10110000 	.word	0x10110000
 8000bc4:	10210000 	.word	0x10210000
 8000bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bce:	2304      	movs	r3, #4
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	480b      	ldr	r0, [pc, #44]	; (8000c08 <MX_GPIO_Init+0x35c>)
 8000bda:	f000 fd3b 	bl	8001654 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	2017      	movs	r0, #23
 8000be4:	f000 fbf3 	bl	80013ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000be8:	2017      	movs	r0, #23
 8000bea:	f000 fc0c 	bl	8001406 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2028      	movs	r0, #40	; 0x28
 8000bf4:	f000 fbeb 	bl	80013ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bf8:	2028      	movs	r0, #40	; 0x28
 8000bfa:	f000 fc04 	bl	8001406 <HAL_NVIC_EnableIRQ>

}
 8000bfe:	bf00      	nop
 8000c00:	3728      	adds	r7, #40	; 0x28
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	48000400 	.word	0x48000400

08000c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c10:	b672      	cpsid	i
}
 8000c12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <Error_Handler+0x8>
	...

08000c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <HAL_MspInit+0x44>)
 8000c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c22:	4a0e      	ldr	r2, [pc, #56]	; (8000c5c <HAL_MspInit+0x44>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6613      	str	r3, [r2, #96]	; 0x60
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <HAL_MspInit+0x44>)
 8000c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <HAL_MspInit+0x44>)
 8000c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c3a:	4a08      	ldr	r2, [pc, #32]	; (8000c5c <HAL_MspInit+0x44>)
 8000c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c40:	6593      	str	r3, [r2, #88]	; 0x58
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_MspInit+0x44>)
 8000c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	603b      	str	r3, [r7, #0]
 8000c4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	40021000 	.word	0x40021000

08000c60 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	; 0x28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000c78:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <HAL_DFSDM_ChannelMspInit+0x84>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d12d      	bne.n	8000cdc <HAL_DFSDM_ChannelMspInit+0x7c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000c80:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c84:	4a18      	ldr	r2, [pc, #96]	; (8000ce8 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000c86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c8a:	6613      	str	r3, [r2, #96]	; 0x60
 8000c8c:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c98:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9c:	4a12      	ldr	r2, [pc, #72]	; (8000ce8 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000c9e:	f043 0310 	orr.w	r3, r3, #16
 8000ca2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca4:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca8:	f003 0310 	and.w	r3, r3, #16
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000cb0:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000cc2:	2306      	movs	r3, #6
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4807      	ldr	r0, [pc, #28]	; (8000cec <HAL_DFSDM_ChannelMspInit+0x8c>)
 8000cce:	f000 fcc1 	bl	8001654 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000cd2:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <HAL_DFSDM_ChannelMspInit+0x84>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	4a02      	ldr	r2, [pc, #8]	; (8000ce4 <HAL_DFSDM_ChannelMspInit+0x84>)
 8000cda:	6013      	str	r3, [r2, #0]
  }

}
 8000cdc:	bf00      	nop
 8000cde:	3728      	adds	r7, #40	; 0x28
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	200001ac 	.word	0x200001ac
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	48001000 	.word	0x48001000

08000cf0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a17      	ldr	r2, [pc, #92]	; (8000d6c <HAL_I2C_MspInit+0x7c>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d128      	bne.n	8000d64 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d12:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <HAL_I2C_MspInit+0x80>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d16:	4a16      	ldr	r2, [pc, #88]	; (8000d70 <HAL_I2C_MspInit+0x80>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d1e:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <HAL_I2C_MspInit+0x80>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000d2a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d30:	2312      	movs	r3, #18
 8000d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d34:	2301      	movs	r3, #1
 8000d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d3c:	2304      	movs	r3, #4
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4619      	mov	r1, r3
 8000d46:	480b      	ldr	r0, [pc, #44]	; (8000d74 <HAL_I2C_MspInit+0x84>)
 8000d48:	f000 fc84 	bl	8001654 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <HAL_I2C_MspInit+0x80>)
 8000d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d50:	4a07      	ldr	r2, [pc, #28]	; (8000d70 <HAL_I2C_MspInit+0x80>)
 8000d52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d56:	6593      	str	r3, [r2, #88]	; 0x58
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <HAL_I2C_MspInit+0x80>)
 8000d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000d64:	bf00      	nop
 8000d66:	3728      	adds	r7, #40	; 0x28
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40005800 	.word	0x40005800
 8000d70:	40021000 	.word	0x40021000
 8000d74:	48000400 	.word	0x48000400

08000d78 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	; 0x28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a17      	ldr	r2, [pc, #92]	; (8000df4 <HAL_QSPI_MspInit+0x7c>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d128      	bne.n	8000dec <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000d9a:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <HAL_QSPI_MspInit+0x80>)
 8000d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d9e:	4a16      	ldr	r2, [pc, #88]	; (8000df8 <HAL_QSPI_MspInit+0x80>)
 8000da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da4:	6513      	str	r3, [r2, #80]	; 0x50
 8000da6:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <HAL_QSPI_MspInit+0x80>)
 8000da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000db2:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <HAL_QSPI_MspInit+0x80>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	4a10      	ldr	r2, [pc, #64]	; (8000df8 <HAL_QSPI_MspInit+0x80>)
 8000db8:	f043 0310 	orr.w	r3, r3, #16
 8000dbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <HAL_QSPI_MspInit+0x80>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	f003 0310 	and.w	r3, r3, #16
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000dca:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000dce:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000ddc:	230a      	movs	r3, #10
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4619      	mov	r1, r3
 8000de6:	4805      	ldr	r0, [pc, #20]	; (8000dfc <HAL_QSPI_MspInit+0x84>)
 8000de8:	f000 fc34 	bl	8001654 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000dec:	bf00      	nop
 8000dee:	3728      	adds	r7, #40	; 0x28
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	a0001000 	.word	0xa0001000
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	48001000 	.word	0x48001000

08000e00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	; 0x28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a17      	ldr	r2, [pc, #92]	; (8000e7c <HAL_SPI_MspInit+0x7c>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d128      	bne.n	8000e74 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e22:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <HAL_SPI_MspInit+0x80>)
 8000e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e26:	4a16      	ldr	r2, [pc, #88]	; (8000e80 <HAL_SPI_MspInit+0x80>)
 8000e28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e2e:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <HAL_SPI_MspInit+0x80>)
 8000e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <HAL_SPI_MspInit+0x80>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3e:	4a10      	ldr	r2, [pc, #64]	; (8000e80 <HAL_SPI_MspInit+0x80>)
 8000e40:	f043 0304 	orr.w	r3, r3, #4
 8000e44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <HAL_SPI_MspInit+0x80>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	f003 0304 	and.w	r3, r3, #4
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000e52:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e60:	2303      	movs	r3, #3
 8000e62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e64:	2306      	movs	r3, #6
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4805      	ldr	r0, [pc, #20]	; (8000e84 <HAL_SPI_MspInit+0x84>)
 8000e70:	f000 fbf0 	bl	8001654 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e74:	bf00      	nop
 8000e76:	3728      	adds	r7, #40	; 0x28
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40003c00 	.word	0x40003c00
 8000e80:	40021000 	.word	0x40021000
 8000e84:	48000800 	.word	0x48000800

08000e88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08c      	sub	sp, #48	; 0x30
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 031c 	add.w	r3, r7, #28
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a2e      	ldr	r2, [pc, #184]	; (8000f60 <HAL_UART_MspInit+0xd8>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d128      	bne.n	8000efc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000eaa:	4b2e      	ldr	r3, [pc, #184]	; (8000f64 <HAL_UART_MspInit+0xdc>)
 8000eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eae:	4a2d      	ldr	r2, [pc, #180]	; (8000f64 <HAL_UART_MspInit+0xdc>)
 8000eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb4:	6613      	str	r3, [r2, #96]	; 0x60
 8000eb6:	4b2b      	ldr	r3, [pc, #172]	; (8000f64 <HAL_UART_MspInit+0xdc>)
 8000eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ebe:	61bb      	str	r3, [r7, #24]
 8000ec0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec2:	4b28      	ldr	r3, [pc, #160]	; (8000f64 <HAL_UART_MspInit+0xdc>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	4a27      	ldr	r2, [pc, #156]	; (8000f64 <HAL_UART_MspInit+0xdc>)
 8000ec8:	f043 0302 	orr.w	r3, r3, #2
 8000ecc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ece:	4b25      	ldr	r3, [pc, #148]	; (8000f64 <HAL_UART_MspInit+0xdc>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	617b      	str	r3, [r7, #20]
 8000ed8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000eda:	23c0      	movs	r3, #192	; 0xc0
 8000edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000eea:	2307      	movs	r3, #7
 8000eec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eee:	f107 031c 	add.w	r3, r7, #28
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	481c      	ldr	r0, [pc, #112]	; (8000f68 <HAL_UART_MspInit+0xe0>)
 8000ef6:	f000 fbad 	bl	8001654 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000efa:	e02d      	b.n	8000f58 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a1a      	ldr	r2, [pc, #104]	; (8000f6c <HAL_UART_MspInit+0xe4>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d128      	bne.n	8000f58 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f06:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <HAL_UART_MspInit+0xdc>)
 8000f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0a:	4a16      	ldr	r2, [pc, #88]	; (8000f64 <HAL_UART_MspInit+0xdc>)
 8000f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f10:	6593      	str	r3, [r2, #88]	; 0x58
 8000f12:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <HAL_UART_MspInit+0xdc>)
 8000f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <HAL_UART_MspInit+0xdc>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f22:	4a10      	ldr	r2, [pc, #64]	; (8000f64 <HAL_UART_MspInit+0xdc>)
 8000f24:	f043 0308 	orr.w	r3, r3, #8
 8000f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <HAL_UART_MspInit+0xdc>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2e:	f003 0308 	and.w	r3, r3, #8
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000f36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f44:	2303      	movs	r3, #3
 8000f46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f48:	2307      	movs	r3, #7
 8000f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f4c:	f107 031c 	add.w	r3, r7, #28
 8000f50:	4619      	mov	r1, r3
 8000f52:	4807      	ldr	r0, [pc, #28]	; (8000f70 <HAL_UART_MspInit+0xe8>)
 8000f54:	f000 fb7e 	bl	8001654 <HAL_GPIO_Init>
}
 8000f58:	bf00      	nop
 8000f5a:	3730      	adds	r7, #48	; 0x30
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40013800 	.word	0x40013800
 8000f64:	40021000 	.word	0x40021000
 8000f68:	48000400 	.word	0x48000400
 8000f6c:	40004800 	.word	0x40004800
 8000f70:	48000c00 	.word	0x48000c00

08000f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <NMI_Handler+0x4>

08000f7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <HardFault_Handler+0x4>

08000f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <MemManage_Handler+0x4>

08000f86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <BusFault_Handler+0x4>

08000f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <UsageFault_Handler+0x4>

08000f92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc0:	f000 f8e6 	bl	8001190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000fcc:	2020      	movs	r0, #32
 8000fce:	f000 fd03 	bl	80019d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000fd2:	2040      	movs	r0, #64	; 0x40
 8000fd4:	f000 fd00 	bl	80019d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000fd8:	2080      	movs	r0, #128	; 0x80
 8000fda:	f000 fcfd 	bl	80019d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000fde:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000fe2:	f000 fcf9 	bl	80019d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000fee:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000ff2:	f000 fcf1 	bl	80019d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000ff6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000ffa:	f000 fced 	bl	80019d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ffe:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001002:	f000 fce9 	bl	80019d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001006:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800100a:	f000 fce5 	bl	80019d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800100e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001012:	f000 fce1 	bl	80019d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001020:	4802      	ldr	r0, [pc, #8]	; (800102c <OTG_FS_IRQHandler+0x10>)
 8001022:	f000 ff75 	bl	8001f10 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20001b00 	.word	0x20001b00

08001030 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001034:	4b15      	ldr	r3, [pc, #84]	; (800108c <SystemInit+0x5c>)
 8001036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800103a:	4a14      	ldr	r2, [pc, #80]	; (800108c <SystemInit+0x5c>)
 800103c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001040:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <SystemInit+0x60>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a11      	ldr	r2, [pc, #68]	; (8001090 <SystemInit+0x60>)
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001050:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <SystemInit+0x60>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <SystemInit+0x60>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <SystemInit+0x60>)
 800105c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001060:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001064:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001066:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <SystemInit+0x60>)
 8001068:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800106c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <SystemInit+0x60>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a07      	ldr	r2, [pc, #28]	; (8001090 <SystemInit+0x60>)
 8001074:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001078:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800107a:	4b05      	ldr	r3, [pc, #20]	; (8001090 <SystemInit+0x60>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	e000ed00 	.word	0xe000ed00
 8001090:	40021000 	.word	0x40021000

08001094 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001094:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001098:	f7ff ffca 	bl	8001030 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800109c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800109e:	e003      	b.n	80010a8 <LoopCopyDataInit>

080010a0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80010a0:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80010a2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80010a4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80010a6:	3104      	adds	r1, #4

080010a8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80010a8:	480a      	ldr	r0, [pc, #40]	; (80010d4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80010aa:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80010ac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80010ae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80010b0:	d3f6      	bcc.n	80010a0 <CopyDataInit>
	ldr	r2, =_sbss
 80010b2:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <LoopForever+0x12>)
	b	LoopFillZerobss
 80010b4:	e002      	b.n	80010bc <LoopFillZerobss>

080010b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80010b6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80010b8:	f842 3b04 	str.w	r3, [r2], #4

080010bc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80010bc:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <LoopForever+0x16>)
	cmp	r2, r3
 80010be:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80010c0:	d3f9      	bcc.n	80010b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010c2:	f007 fc03 	bl	80088cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010c6:	f7ff f9fb 	bl	80004c0 <main>

080010ca <LoopForever>:

LoopForever:
    b LoopForever
 80010ca:	e7fe      	b.n	80010ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010cc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80010d0:	080089dc 	.word	0x080089dc
	ldr	r0, =_sdata
 80010d4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80010d8:	20000190 	.word	0x20000190
	ldr	r2, =_sbss
 80010dc:	20000190 	.word	0x20000190
	ldr	r3, = _ebss
 80010e0:	20001f08 	.word	0x20001f08

080010e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010e4:	e7fe      	b.n	80010e4 <ADC1_2_IRQHandler>

080010e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010ec:	2300      	movs	r3, #0
 80010ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f0:	2003      	movs	r0, #3
 80010f2:	f000 f961 	bl	80013b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010f6:	2000      	movs	r0, #0
 80010f8:	f000 f80e 	bl	8001118 <HAL_InitTick>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d002      	beq.n	8001108 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	71fb      	strb	r3, [r7, #7]
 8001106:	e001      	b.n	800110c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001108:	f7ff fd86 	bl	8000c18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800110c:	79fb      	ldrb	r3, [r7, #7]
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001120:	2300      	movs	r3, #0
 8001122:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001124:	4b17      	ldr	r3, [pc, #92]	; (8001184 <HAL_InitTick+0x6c>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d023      	beq.n	8001174 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800112c:	4b16      	ldr	r3, [pc, #88]	; (8001188 <HAL_InitTick+0x70>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <HAL_InitTick+0x6c>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	4619      	mov	r1, r3
 8001136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113a:	fbb3 f3f1 	udiv	r3, r3, r1
 800113e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001142:	4618      	mov	r0, r3
 8001144:	f000 f96d 	bl	8001422 <HAL_SYSTICK_Config>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d10f      	bne.n	800116e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b0f      	cmp	r3, #15
 8001152:	d809      	bhi.n	8001168 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001154:	2200      	movs	r2, #0
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	f000 f937 	bl	80013ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001160:	4a0a      	ldr	r2, [pc, #40]	; (800118c <HAL_InitTick+0x74>)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	e007      	b.n	8001178 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	73fb      	strb	r3, [r7, #15]
 800116c:	e004      	b.n	8001178 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	73fb      	strb	r3, [r7, #15]
 8001172:	e001      	b.n	8001178 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001178:	7bfb      	ldrb	r3, [r7, #15]
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000008 	.word	0x20000008
 8001188:	20000000 	.word	0x20000000
 800118c:	20000004 	.word	0x20000004

08001190 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_IncTick+0x20>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_IncTick+0x24>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4413      	add	r3, r2
 80011a0:	4a04      	ldr	r2, [pc, #16]	; (80011b4 <HAL_IncTick+0x24>)
 80011a2:	6013      	str	r3, [r2, #0]
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20000008 	.word	0x20000008
 80011b4:	2000062c 	.word	0x2000062c

080011b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return uwTick;
 80011bc:	4b03      	ldr	r3, [pc, #12]	; (80011cc <HAL_GetTick+0x14>)
 80011be:	681b      	ldr	r3, [r3, #0]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	2000062c 	.word	0x2000062c

080011d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d8:	f7ff ffee 	bl	80011b8 <HAL_GetTick>
 80011dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e8:	d005      	beq.n	80011f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <HAL_Delay+0x44>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	461a      	mov	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4413      	add	r3, r2
 80011f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011f6:	bf00      	nop
 80011f8:	f7ff ffde 	bl	80011b8 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	429a      	cmp	r2, r3
 8001206:	d8f7      	bhi.n	80011f8 <HAL_Delay+0x28>
  {
  }
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000008 	.word	0x20000008

08001218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <__NVIC_SetPriorityGrouping+0x44>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001234:	4013      	ands	r3, r2
 8001236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001240:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124a:	4a04      	ldr	r2, [pc, #16]	; (800125c <__NVIC_SetPriorityGrouping+0x44>)
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	60d3      	str	r3, [r2, #12]
}
 8001250:	bf00      	nop
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <__NVIC_GetPriorityGrouping+0x18>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	0a1b      	lsrs	r3, r3, #8
 800126a:	f003 0307 	and.w	r3, r3, #7
}
 800126e:	4618      	mov	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	2b00      	cmp	r3, #0
 800128c:	db0b      	blt.n	80012a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	f003 021f 	and.w	r2, r3, #31
 8001294:	4907      	ldr	r1, [pc, #28]	; (80012b4 <__NVIC_EnableIRQ+0x38>)
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	095b      	lsrs	r3, r3, #5
 800129c:	2001      	movs	r0, #1
 800129e:	fa00 f202 	lsl.w	r2, r0, r2
 80012a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	e000e100 	.word	0xe000e100

080012b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	6039      	str	r1, [r7, #0]
 80012c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	db0a      	blt.n	80012e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	490c      	ldr	r1, [pc, #48]	; (8001304 <__NVIC_SetPriority+0x4c>)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	0112      	lsls	r2, r2, #4
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	440b      	add	r3, r1
 80012dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e0:	e00a      	b.n	80012f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	4908      	ldr	r1, [pc, #32]	; (8001308 <__NVIC_SetPriority+0x50>)
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	f003 030f 	and.w	r3, r3, #15
 80012ee:	3b04      	subs	r3, #4
 80012f0:	0112      	lsls	r2, r2, #4
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	440b      	add	r3, r1
 80012f6:	761a      	strb	r2, [r3, #24]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000e100 	.word	0xe000e100
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800130c:	b480      	push	{r7}
 800130e:	b089      	sub	sp, #36	; 0x24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f1c3 0307 	rsb	r3, r3, #7
 8001326:	2b04      	cmp	r3, #4
 8001328:	bf28      	it	cs
 800132a:	2304      	movcs	r3, #4
 800132c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3304      	adds	r3, #4
 8001332:	2b06      	cmp	r3, #6
 8001334:	d902      	bls.n	800133c <NVIC_EncodePriority+0x30>
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3b03      	subs	r3, #3
 800133a:	e000      	b.n	800133e <NVIC_EncodePriority+0x32>
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	f04f 32ff 	mov.w	r2, #4294967295
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43da      	mvns	r2, r3
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	401a      	ands	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001354:	f04f 31ff 	mov.w	r1, #4294967295
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	fa01 f303 	lsl.w	r3, r1, r3
 800135e:	43d9      	mvns	r1, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	4313      	orrs	r3, r2
         );
}
 8001366:	4618      	mov	r0, r3
 8001368:	3724      	adds	r7, #36	; 0x24
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
	...

08001374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3b01      	subs	r3, #1
 8001380:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001384:	d301      	bcc.n	800138a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001386:	2301      	movs	r3, #1
 8001388:	e00f      	b.n	80013aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800138a:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <SysTick_Config+0x40>)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3b01      	subs	r3, #1
 8001390:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001392:	210f      	movs	r1, #15
 8001394:	f04f 30ff 	mov.w	r0, #4294967295
 8001398:	f7ff ff8e 	bl	80012b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800139c:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <SysTick_Config+0x40>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013a2:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <SysTick_Config+0x40>)
 80013a4:	2207      	movs	r2, #7
 80013a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	e000e010 	.word	0xe000e010

080013b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ff29 	bl	8001218 <__NVIC_SetPriorityGrouping>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b086      	sub	sp, #24
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	4603      	mov	r3, r0
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
 80013da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013e0:	f7ff ff3e 	bl	8001260 <__NVIC_GetPriorityGrouping>
 80013e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	68b9      	ldr	r1, [r7, #8]
 80013ea:	6978      	ldr	r0, [r7, #20]
 80013ec:	f7ff ff8e 	bl	800130c <NVIC_EncodePriority>
 80013f0:	4602      	mov	r2, r0
 80013f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f6:	4611      	mov	r1, r2
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff5d 	bl	80012b8 <__NVIC_SetPriority>
}
 80013fe:	bf00      	nop
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	4603      	mov	r3, r0
 800140e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ff31 	bl	800127c <__NVIC_EnableIRQ>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff ffa2 	bl	8001374 <SysTick_Config>
 8001430:	4603      	mov	r3, r0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e0ac      	b.n	80015a8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f000 f8b2 	bl	80015bc <DFSDM_GetChannelFromInstance>
 8001458:	4603      	mov	r3, r0
 800145a:	4a55      	ldr	r2, [pc, #340]	; (80015b0 <HAL_DFSDM_ChannelInit+0x174>)
 800145c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e09f      	b.n	80015a8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff fbf9 	bl	8000c60 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800146e:	4b51      	ldr	r3, [pc, #324]	; (80015b4 <HAL_DFSDM_ChannelInit+0x178>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	3301      	adds	r3, #1
 8001474:	4a4f      	ldr	r2, [pc, #316]	; (80015b4 <HAL_DFSDM_ChannelInit+0x178>)
 8001476:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001478:	4b4e      	ldr	r3, [pc, #312]	; (80015b4 <HAL_DFSDM_ChannelInit+0x178>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d125      	bne.n	80014cc <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001480:	4b4d      	ldr	r3, [pc, #308]	; (80015b8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a4c      	ldr	r2, [pc, #304]	; (80015b8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001486:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800148a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800148c:	4b4a      	ldr	r3, [pc, #296]	; (80015b8 <HAL_DFSDM_ChannelInit+0x17c>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	4948      	ldr	r1, [pc, #288]	; (80015b8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001496:	4313      	orrs	r3, r2
 8001498:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800149a:	4b47      	ldr	r3, [pc, #284]	; (80015b8 <HAL_DFSDM_ChannelInit+0x17c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a46      	ldr	r2, [pc, #280]	; (80015b8 <HAL_DFSDM_ChannelInit+0x17c>)
 80014a0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80014a4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	791b      	ldrb	r3, [r3, #4]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d108      	bne.n	80014c0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80014ae:	4b42      	ldr	r3, [pc, #264]	; (80015b8 <HAL_DFSDM_ChannelInit+0x17c>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	041b      	lsls	r3, r3, #16
 80014ba:	493f      	ldr	r1, [pc, #252]	; (80015b8 <HAL_DFSDM_ChannelInit+0x17c>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80014c0:	4b3d      	ldr	r3, [pc, #244]	; (80015b8 <HAL_DFSDM_ChannelInit+0x17c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a3c      	ldr	r2, [pc, #240]	; (80015b8 <HAL_DFSDM_ChannelInit+0x17c>)
 80014c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80014ca:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80014da:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6819      	ldr	r1, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80014ea:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80014f0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 020f 	bic.w	r2, r2, #15
 8001508:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6819      	ldr	r1, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001518:	431a      	orrs	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	430a      	orrs	r2, r1
 8001520:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001530:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6899      	ldr	r1, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001540:	3b01      	subs	r3, #1
 8001542:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001544:	431a      	orrs	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	430a      	orrs	r2, r1
 800154c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f002 0207 	and.w	r2, r2, #7
 800155c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6859      	ldr	r1, [r3, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001568:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001570:	431a      	orrs	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	430a      	orrs	r2, r1
 8001578:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001588:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2201      	movs	r2, #1
 800158e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f000 f810 	bl	80015bc <DFSDM_GetChannelFromInstance>
 800159c:	4602      	mov	r2, r0
 800159e:	4904      	ldr	r1, [pc, #16]	; (80015b0 <HAL_DFSDM_ChannelInit+0x174>)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	200001b4 	.word	0x200001b4
 80015b4:	200001b0 	.word	0x200001b0
 80015b8:	40016000 	.word	0x40016000

080015bc <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a1c      	ldr	r2, [pc, #112]	; (8001638 <DFSDM_GetChannelFromInstance+0x7c>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d102      	bne.n	80015d2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	e02b      	b.n	800162a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a19      	ldr	r2, [pc, #100]	; (800163c <DFSDM_GetChannelFromInstance+0x80>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d102      	bne.n	80015e0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80015da:	2301      	movs	r3, #1
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	e024      	b.n	800162a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a17      	ldr	r2, [pc, #92]	; (8001640 <DFSDM_GetChannelFromInstance+0x84>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d102      	bne.n	80015ee <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80015e8:	2302      	movs	r3, #2
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	e01d      	b.n	800162a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a14      	ldr	r2, [pc, #80]	; (8001644 <DFSDM_GetChannelFromInstance+0x88>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d102      	bne.n	80015fc <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80015f6:	2304      	movs	r3, #4
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	e016      	b.n	800162a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a12      	ldr	r2, [pc, #72]	; (8001648 <DFSDM_GetChannelFromInstance+0x8c>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d102      	bne.n	800160a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001604:	2305      	movs	r3, #5
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	e00f      	b.n	800162a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a0f      	ldr	r2, [pc, #60]	; (800164c <DFSDM_GetChannelFromInstance+0x90>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d102      	bne.n	8001618 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001612:	2306      	movs	r3, #6
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	e008      	b.n	800162a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a0d      	ldr	r2, [pc, #52]	; (8001650 <DFSDM_GetChannelFromInstance+0x94>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d102      	bne.n	8001626 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001620:	2307      	movs	r3, #7
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	e001      	b.n	800162a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001626:	2303      	movs	r3, #3
 8001628:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800162a:	68fb      	ldr	r3, [r7, #12]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	40016000 	.word	0x40016000
 800163c:	40016020 	.word	0x40016020
 8001640:	40016040 	.word	0x40016040
 8001644:	40016080 	.word	0x40016080
 8001648:	400160a0 	.word	0x400160a0
 800164c:	400160c0 	.word	0x400160c0
 8001650:	400160e0 	.word	0x400160e0

08001654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001654:	b480      	push	{r7}
 8001656:	b087      	sub	sp, #28
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800165e:	2300      	movs	r3, #0
 8001660:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001662:	e17f      	b.n	8001964 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	2101      	movs	r1, #1
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	fa01 f303 	lsl.w	r3, r1, r3
 8001670:	4013      	ands	r3, r2
 8001672:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 8171 	beq.w	800195e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d00b      	beq.n	800169c <HAL_GPIO_Init+0x48>
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b02      	cmp	r3, #2
 800168a:	d007      	beq.n	800169c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001690:	2b11      	cmp	r3, #17
 8001692:	d003      	beq.n	800169c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b12      	cmp	r3, #18
 800169a:	d130      	bne.n	80016fe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	2203      	movs	r2, #3
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4013      	ands	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	68da      	ldr	r2, [r3, #12]
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016d2:	2201      	movs	r2, #1
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	4013      	ands	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	091b      	lsrs	r3, r3, #4
 80016e8:	f003 0201 	and.w	r2, r3, #1
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f003 0303 	and.w	r3, r3, #3
 8001706:	2b03      	cmp	r3, #3
 8001708:	d118      	bne.n	800173c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001710:	2201      	movs	r2, #1
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4013      	ands	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	08db      	lsrs	r3, r3, #3
 8001726:	f003 0201 	and.w	r2, r3, #1
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	4313      	orrs	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	2203      	movs	r2, #3
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4313      	orrs	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b02      	cmp	r3, #2
 8001772:	d003      	beq.n	800177c <HAL_GPIO_Init+0x128>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b12      	cmp	r3, #18
 800177a:	d123      	bne.n	80017c4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	08da      	lsrs	r2, r3, #3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3208      	adds	r2, #8
 8001784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001788:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	220f      	movs	r2, #15
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4013      	ands	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	691a      	ldr	r2, [r3, #16]
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	08da      	lsrs	r2, r3, #3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3208      	adds	r2, #8
 80017be:	6939      	ldr	r1, [r7, #16]
 80017c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	2203      	movs	r2, #3
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4013      	ands	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 0203 	and.w	r2, r3, #3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001800:	2b00      	cmp	r3, #0
 8001802:	f000 80ac 	beq.w	800195e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001806:	4b5f      	ldr	r3, [pc, #380]	; (8001984 <HAL_GPIO_Init+0x330>)
 8001808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800180a:	4a5e      	ldr	r2, [pc, #376]	; (8001984 <HAL_GPIO_Init+0x330>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6613      	str	r3, [r2, #96]	; 0x60
 8001812:	4b5c      	ldr	r3, [pc, #368]	; (8001984 <HAL_GPIO_Init+0x330>)
 8001814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800181e:	4a5a      	ldr	r2, [pc, #360]	; (8001988 <HAL_GPIO_Init+0x334>)
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	089b      	lsrs	r3, r3, #2
 8001824:	3302      	adds	r3, #2
 8001826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	220f      	movs	r2, #15
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001848:	d025      	beq.n	8001896 <HAL_GPIO_Init+0x242>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a4f      	ldr	r2, [pc, #316]	; (800198c <HAL_GPIO_Init+0x338>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d01f      	beq.n	8001892 <HAL_GPIO_Init+0x23e>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a4e      	ldr	r2, [pc, #312]	; (8001990 <HAL_GPIO_Init+0x33c>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d019      	beq.n	800188e <HAL_GPIO_Init+0x23a>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a4d      	ldr	r2, [pc, #308]	; (8001994 <HAL_GPIO_Init+0x340>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d013      	beq.n	800188a <HAL_GPIO_Init+0x236>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a4c      	ldr	r2, [pc, #304]	; (8001998 <HAL_GPIO_Init+0x344>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d00d      	beq.n	8001886 <HAL_GPIO_Init+0x232>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a4b      	ldr	r2, [pc, #300]	; (800199c <HAL_GPIO_Init+0x348>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d007      	beq.n	8001882 <HAL_GPIO_Init+0x22e>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a4a      	ldr	r2, [pc, #296]	; (80019a0 <HAL_GPIO_Init+0x34c>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d101      	bne.n	800187e <HAL_GPIO_Init+0x22a>
 800187a:	2306      	movs	r3, #6
 800187c:	e00c      	b.n	8001898 <HAL_GPIO_Init+0x244>
 800187e:	2307      	movs	r3, #7
 8001880:	e00a      	b.n	8001898 <HAL_GPIO_Init+0x244>
 8001882:	2305      	movs	r3, #5
 8001884:	e008      	b.n	8001898 <HAL_GPIO_Init+0x244>
 8001886:	2304      	movs	r3, #4
 8001888:	e006      	b.n	8001898 <HAL_GPIO_Init+0x244>
 800188a:	2303      	movs	r3, #3
 800188c:	e004      	b.n	8001898 <HAL_GPIO_Init+0x244>
 800188e:	2302      	movs	r3, #2
 8001890:	e002      	b.n	8001898 <HAL_GPIO_Init+0x244>
 8001892:	2301      	movs	r3, #1
 8001894:	e000      	b.n	8001898 <HAL_GPIO_Init+0x244>
 8001896:	2300      	movs	r3, #0
 8001898:	697a      	ldr	r2, [r7, #20]
 800189a:	f002 0203 	and.w	r2, r2, #3
 800189e:	0092      	lsls	r2, r2, #2
 80018a0:	4093      	lsls	r3, r2
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018a8:	4937      	ldr	r1, [pc, #220]	; (8001988 <HAL_GPIO_Init+0x334>)
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	089b      	lsrs	r3, r3, #2
 80018ae:	3302      	adds	r3, #2
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018b6:	4b3b      	ldr	r3, [pc, #236]	; (80019a4 <HAL_GPIO_Init+0x350>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	43db      	mvns	r3, r3
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	4013      	ands	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018da:	4a32      	ldr	r2, [pc, #200]	; (80019a4 <HAL_GPIO_Init+0x350>)
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80018e0:	4b30      	ldr	r3, [pc, #192]	; (80019a4 <HAL_GPIO_Init+0x350>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	43db      	mvns	r3, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4013      	ands	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	4313      	orrs	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001904:	4a27      	ldr	r2, [pc, #156]	; (80019a4 <HAL_GPIO_Init+0x350>)
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800190a:	4b26      	ldr	r3, [pc, #152]	; (80019a4 <HAL_GPIO_Init+0x350>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	43db      	mvns	r3, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4013      	ands	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	4313      	orrs	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800192e:	4a1d      	ldr	r2, [pc, #116]	; (80019a4 <HAL_GPIO_Init+0x350>)
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001934:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <HAL_GPIO_Init+0x350>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	43db      	mvns	r3, r3
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4013      	ands	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d003      	beq.n	8001958 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	4313      	orrs	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001958:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <HAL_GPIO_Init+0x350>)
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	3301      	adds	r3, #1
 8001962:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	fa22 f303 	lsr.w	r3, r2, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	f47f ae78 	bne.w	8001664 <HAL_GPIO_Init+0x10>
  }
}
 8001974:	bf00      	nop
 8001976:	bf00      	nop
 8001978:	371c      	adds	r7, #28
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40021000 	.word	0x40021000
 8001988:	40010000 	.word	0x40010000
 800198c:	48000400 	.word	0x48000400
 8001990:	48000800 	.word	0x48000800
 8001994:	48000c00 	.word	0x48000c00
 8001998:	48001000 	.word	0x48001000
 800199c:	48001400 	.word	0x48001400
 80019a0:	48001800 	.word	0x48001800
 80019a4:	40010400 	.word	0x40010400

080019a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	460b      	mov	r3, r1
 80019b2:	807b      	strh	r3, [r7, #2]
 80019b4:	4613      	mov	r3, r2
 80019b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019b8:	787b      	ldrb	r3, [r7, #1]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019be:	887a      	ldrh	r2, [r7, #2]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019c4:	e002      	b.n	80019cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019c6:	887a      	ldrh	r2, [r7, #2]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019e2:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019e4:	695a      	ldr	r2, [r3, #20]
 80019e6:	88fb      	ldrh	r3, [r7, #6]
 80019e8:	4013      	ands	r3, r2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d006      	beq.n	80019fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019ee:	4a05      	ldr	r2, [pc, #20]	; (8001a04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019f0:	88fb      	ldrh	r3, [r7, #6]
 80019f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019f4:	88fb      	ldrh	r3, [r7, #6]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 f806 	bl	8001a08 <HAL_GPIO_EXTI_Callback>
  }
}
 80019fc:	bf00      	nop
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40010400 	.word	0x40010400

08001a08 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e081      	b.n	8001b34 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d106      	bne.n	8001a4a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff f953 	bl	8000cf0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2224      	movs	r2, #36	; 0x24
 8001a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0201 	bic.w	r2, r2, #1
 8001a60:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a6e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	689a      	ldr	r2, [r3, #8]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a7e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d107      	bne.n	8001a98 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	e006      	b.n	8001aa6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001aa4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d104      	bne.n	8001ab8 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ab6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6812      	ldr	r2, [r2, #0]
 8001ac2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aca:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68da      	ldr	r2, [r3, #12]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ada:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	691a      	ldr	r2, [r3, #16]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	ea42 0103 	orr.w	r1, r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	021a      	lsls	r2, r3, #8
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	430a      	orrs	r2, r1
 8001af4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69d9      	ldr	r1, [r3, #28]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a1a      	ldr	r2, [r3, #32]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	430a      	orrs	r2, r1
 8001b04:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f042 0201 	orr.w	r2, r2, #1
 8001b14:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2220      	movs	r2, #32
 8001b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b20      	cmp	r3, #32
 8001b50:	d138      	bne.n	8001bc4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d101      	bne.n	8001b60 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	e032      	b.n	8001bc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2224      	movs	r2, #36	; 0x24
 8001b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 0201 	bic.w	r2, r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6819      	ldr	r1, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f042 0201 	orr.w	r2, r2, #1
 8001bae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2220      	movs	r2, #32
 8001bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	e000      	b.n	8001bc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001bc4:	2302      	movs	r3, #2
  }
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b085      	sub	sp, #20
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b20      	cmp	r3, #32
 8001be6:	d139      	bne.n	8001c5c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d101      	bne.n	8001bf6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e033      	b.n	8001c5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2224      	movs	r2, #36	; 0x24
 8001c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 0201 	bic.w	r2, r2, #1
 8001c14:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c24:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	021b      	lsls	r3, r3, #8
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f042 0201 	orr.w	r2, r2, #1
 8001c46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2220      	movs	r2, #32
 8001c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	e000      	b.n	8001c5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c5c:	2302      	movs	r3, #2
  }
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c6c:	b08f      	sub	sp, #60	; 0x3c
 8001c6e:	af0a      	add	r7, sp, #40	; 0x28
 8001c70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e116      	b.n	8001eaa <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d106      	bne.n	8001c9c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f006 f9f2 	bl	8008080 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2203      	movs	r2, #3
 8001ca0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d102      	bne.n	8001cb6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f003 fa29 	bl	8005112 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	603b      	str	r3, [r7, #0]
 8001cc6:	687e      	ldr	r6, [r7, #4]
 8001cc8:	466d      	mov	r5, sp
 8001cca:	f106 0410 	add.w	r4, r6, #16
 8001cce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cd6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cda:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cde:	1d33      	adds	r3, r6, #4
 8001ce0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ce2:	6838      	ldr	r0, [r7, #0]
 8001ce4:	f003 f93b 	bl	8004f5e <USB_CoreInit>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d005      	beq.n	8001cfa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e0d7      	b.n	8001eaa <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4618      	mov	r0, r3
 8001d02:	f003 fa17 	bl	8005134 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d06:	2300      	movs	r3, #0
 8001d08:	73fb      	strb	r3, [r7, #15]
 8001d0a:	e04a      	b.n	8001da2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d0c:	7bfa      	ldrb	r2, [r7, #15]
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	4613      	mov	r3, r2
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	1a9b      	subs	r3, r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	440b      	add	r3, r1
 8001d1a:	333d      	adds	r3, #61	; 0x3d
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d20:	7bfa      	ldrb	r2, [r7, #15]
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	4613      	mov	r3, r2
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	1a9b      	subs	r3, r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	333c      	adds	r3, #60	; 0x3c
 8001d30:	7bfa      	ldrb	r2, [r7, #15]
 8001d32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d34:	7bfa      	ldrb	r2, [r7, #15]
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
 8001d38:	b298      	uxth	r0, r3
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	1a9b      	subs	r3, r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	440b      	add	r3, r1
 8001d46:	3342      	adds	r3, #66	; 0x42
 8001d48:	4602      	mov	r2, r0
 8001d4a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d4c:	7bfa      	ldrb	r2, [r7, #15]
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	4613      	mov	r3, r2
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	1a9b      	subs	r3, r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	440b      	add	r3, r1
 8001d5a:	333f      	adds	r3, #63	; 0x3f
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d60:	7bfa      	ldrb	r2, [r7, #15]
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	1a9b      	subs	r3, r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	3344      	adds	r3, #68	; 0x44
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d74:	7bfa      	ldrb	r2, [r7, #15]
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	1a9b      	subs	r3, r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	440b      	add	r3, r1
 8001d82:	3348      	adds	r3, #72	; 0x48
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d88:	7bfa      	ldrb	r2, [r7, #15]
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	1a9b      	subs	r3, r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	440b      	add	r3, r1
 8001d96:	3350      	adds	r3, #80	; 0x50
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	73fb      	strb	r3, [r7, #15]
 8001da2:	7bfa      	ldrb	r2, [r7, #15]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d3af      	bcc.n	8001d0c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dac:	2300      	movs	r3, #0
 8001dae:	73fb      	strb	r3, [r7, #15]
 8001db0:	e044      	b.n	8001e3c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001db2:	7bfa      	ldrb	r2, [r7, #15]
 8001db4:	6879      	ldr	r1, [r7, #4]
 8001db6:	4613      	mov	r3, r2
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	1a9b      	subs	r3, r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	440b      	add	r3, r1
 8001dc0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001dc8:	7bfa      	ldrb	r2, [r7, #15]
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	1a9b      	subs	r3, r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001dda:	7bfa      	ldrb	r2, [r7, #15]
 8001ddc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001dde:	7bfa      	ldrb	r2, [r7, #15]
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	4613      	mov	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	1a9b      	subs	r3, r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	440b      	add	r3, r1
 8001dec:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001df0:	2200      	movs	r2, #0
 8001df2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001df4:	7bfa      	ldrb	r2, [r7, #15]
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	1a9b      	subs	r3, r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	440b      	add	r3, r1
 8001e02:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e0a:	7bfa      	ldrb	r2, [r7, #15]
 8001e0c:	6879      	ldr	r1, [r7, #4]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	1a9b      	subs	r3, r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	440b      	add	r3, r1
 8001e18:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e20:	7bfa      	ldrb	r2, [r7, #15]
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	4613      	mov	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	1a9b      	subs	r3, r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	73fb      	strb	r3, [r7, #15]
 8001e3c:	7bfa      	ldrb	r2, [r7, #15]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d3b5      	bcc.n	8001db2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	603b      	str	r3, [r7, #0]
 8001e4c:	687e      	ldr	r6, [r7, #4]
 8001e4e:	466d      	mov	r5, sp
 8001e50:	f106 0410 	add.w	r4, r6, #16
 8001e54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e5c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e60:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e64:	1d33      	adds	r3, r6, #4
 8001e66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e68:	6838      	ldr	r0, [r7, #0]
 8001e6a:	f003 f98d 	bl	8005188 <USB_DevInit>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d005      	beq.n	8001e80 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2202      	movs	r2, #2
 8001e78:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e014      	b.n	8001eaa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d102      	bne.n	8001e9e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 ff61 	bl	8002d60 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f004 f90f 	bl	80060c6 <USB_DevDisconnect>

  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001eb2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b084      	sub	sp, #16
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d101      	bne.n	8001ece <HAL_PCD_Start+0x1c>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	e01c      	b.n	8001f08 <HAL_PCD_Start+0x56>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d105      	bne.n	8001eea <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f003 f8fe 	bl	80050f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f004 f8c3 	bl	8006084 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f10:	b590      	push	{r4, r7, lr}
 8001f12:	b08d      	sub	sp, #52	; 0x34
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f1e:	6a3b      	ldr	r3, [r7, #32]
 8001f20:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f004 f981 	bl	800622e <USB_GetMode>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f040 838f 	bne.w	8002652 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f004 f8e5 	bl	8006108 <USB_ReadInterrupts>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 8385 	beq.w	8002650 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f004 f8dc 	bl	8006108 <USB_ReadInterrupts>
 8001f50:	4603      	mov	r3, r0
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d107      	bne.n	8001f6a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	695a      	ldr	r2, [r3, #20]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f002 0202 	and.w	r2, r2, #2
 8001f68:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f004 f8ca 	bl	8006108 <USB_ReadInterrupts>
 8001f74:	4603      	mov	r3, r0
 8001f76:	f003 0310 	and.w	r3, r3, #16
 8001f7a:	2b10      	cmp	r3, #16
 8001f7c:	d161      	bne.n	8002042 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	699a      	ldr	r2, [r3, #24]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 0210 	bic.w	r2, r2, #16
 8001f8c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001f8e:	6a3b      	ldr	r3, [r7, #32]
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	f003 020f 	and.w	r2, r3, #15
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	1a9b      	subs	r3, r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	4413      	add	r3, r2
 8001faa:	3304      	adds	r3, #4
 8001fac:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	0c5b      	lsrs	r3, r3, #17
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d124      	bne.n	8002004 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d035      	beq.n	8002032 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	091b      	lsrs	r3, r3, #4
 8001fce:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001fd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	6a38      	ldr	r0, [r7, #32]
 8001fda:	f003 ff30 	bl	8005e3e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	68da      	ldr	r2, [r3, #12]
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	091b      	lsrs	r3, r3, #4
 8001fe6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fea:	441a      	add	r2, r3
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	699a      	ldr	r2, [r3, #24]
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	091b      	lsrs	r3, r3, #4
 8001ff8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ffc:	441a      	add	r2, r3
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	619a      	str	r2, [r3, #24]
 8002002:	e016      	b.n	8002032 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	0c5b      	lsrs	r3, r3, #17
 8002008:	f003 030f 	and.w	r3, r3, #15
 800200c:	2b06      	cmp	r3, #6
 800200e:	d110      	bne.n	8002032 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002016:	2208      	movs	r2, #8
 8002018:	4619      	mov	r1, r3
 800201a:	6a38      	ldr	r0, [r7, #32]
 800201c:	f003 ff0f 	bl	8005e3e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	699a      	ldr	r2, [r3, #24]
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	091b      	lsrs	r3, r3, #4
 8002028:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800202c:	441a      	add	r2, r3
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	699a      	ldr	r2, [r3, #24]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f042 0210 	orr.w	r2, r2, #16
 8002040:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f004 f85e 	bl	8006108 <USB_ReadInterrupts>
 800204c:	4603      	mov	r3, r0
 800204e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002052:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002056:	d16e      	bne.n	8002136 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002058:	2300      	movs	r3, #0
 800205a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f004 f864 	bl	800612e <USB_ReadDevAllOutEpInterrupt>
 8002066:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002068:	e062      	b.n	8002130 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800206a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b00      	cmp	r3, #0
 8002072:	d057      	beq.n	8002124 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	4611      	mov	r1, r2
 800207e:	4618      	mov	r0, r3
 8002080:	f004 f889 	bl	8006196 <USB_ReadDevOutEPInterrupt>
 8002084:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00c      	beq.n	80020aa <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	015a      	lsls	r2, r3, #5
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	4413      	add	r3, r2
 8002098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800209c:	461a      	mov	r2, r3
 800209e:	2301      	movs	r3, #1
 80020a0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80020a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 fd81 	bl	8002bac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00c      	beq.n	80020ce <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	015a      	lsls	r2, r3, #5
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	4413      	add	r3, r2
 80020bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020c0:	461a      	mov	r2, r3
 80020c2:	2308      	movs	r3, #8
 80020c4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80020c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 fdbd 	bl	8002c48 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	f003 0310 	and.w	r3, r3, #16
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d008      	beq.n	80020ea <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	015a      	lsls	r2, r3, #5
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	4413      	add	r3, r2
 80020e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020e4:	461a      	mov	r2, r3
 80020e6:	2310      	movs	r3, #16
 80020e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	f003 0320 	and.w	r3, r3, #32
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d008      	beq.n	8002106 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f6:	015a      	lsls	r2, r3, #5
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	4413      	add	r3, r2
 80020fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002100:	461a      	mov	r2, r3
 8002102:	2320      	movs	r3, #32
 8002104:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d009      	beq.n	8002124 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	015a      	lsls	r2, r3, #5
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	4413      	add	r3, r2
 8002118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800211c:	461a      	mov	r2, r3
 800211e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002122:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	3301      	adds	r3, #1
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800212a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212c:	085b      	lsrs	r3, r3, #1
 800212e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002132:	2b00      	cmp	r3, #0
 8002134:	d199      	bne.n	800206a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f003 ffe4 	bl	8006108 <USB_ReadInterrupts>
 8002140:	4603      	mov	r3, r0
 8002142:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002146:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800214a:	f040 8087 	bne.w	800225c <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f004 f805 	bl	8006162 <USB_ReadDevAllInEpInterrupt>
 8002158:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800215a:	2300      	movs	r3, #0
 800215c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800215e:	e07a      	b.n	8002256 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d06f      	beq.n	800224a <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	4611      	mov	r1, r2
 8002174:	4618      	mov	r0, r3
 8002176:	f004 f82c 	bl	80061d2 <USB_ReadDevInEPInterrupt>
 800217a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d020      	beq.n	80021c8 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	f003 030f 	and.w	r3, r3, #15
 800218c:	2201      	movs	r2, #1
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800219a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	43db      	mvns	r3, r3
 80021a0:	69f9      	ldr	r1, [r7, #28]
 80021a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80021a6:	4013      	ands	r3, r2
 80021a8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	015a      	lsls	r2, r3, #5
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	4413      	add	r3, r2
 80021b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021b6:	461a      	mov	r2, r3
 80021b8:	2301      	movs	r3, #1
 80021ba:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80021bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	4619      	mov	r1, r3
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f005 fffd 	bl	80081c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d008      	beq.n	80021e4 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	015a      	lsls	r2, r3, #5
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	4413      	add	r3, r2
 80021da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021de:	461a      	mov	r2, r3
 80021e0:	2308      	movs	r3, #8
 80021e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	f003 0310 	and.w	r3, r3, #16
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d008      	beq.n	8002200 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	015a      	lsls	r2, r3, #5
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	4413      	add	r3, r2
 80021f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021fa:	461a      	mov	r2, r3
 80021fc:	2310      	movs	r3, #16
 80021fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002206:	2b00      	cmp	r3, #0
 8002208:	d008      	beq.n	800221c <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	015a      	lsls	r2, r3, #5
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	4413      	add	r3, r2
 8002212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002216:	461a      	mov	r2, r3
 8002218:	2340      	movs	r3, #64	; 0x40
 800221a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d008      	beq.n	8002238 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	015a      	lsls	r2, r3, #5
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	4413      	add	r3, r2
 800222e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002232:	461a      	mov	r2, r3
 8002234:	2302      	movs	r3, #2
 8002236:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002242:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 fc29 	bl	8002a9c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	3301      	adds	r3, #1
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002252:	085b      	lsrs	r3, r3, #1
 8002254:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002258:	2b00      	cmp	r3, #0
 800225a:	d181      	bne.n	8002160 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f003 ff51 	bl	8006108 <USB_ReadInterrupts>
 8002266:	4603      	mov	r3, r0
 8002268:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800226c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002270:	d122      	bne.n	80022b8 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	69fa      	ldr	r2, [r7, #28]
 800227c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002280:	f023 0301 	bic.w	r3, r3, #1
 8002284:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800228c:	2b01      	cmp	r3, #1
 800228e:	d108      	bne.n	80022a2 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002298:	2100      	movs	r1, #0
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f006 faaa 	bl	80087f4 <HAL_PCDEx_LPM_Callback>
 80022a0:	e002      	b.n	80022a8 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f005 fffa 	bl	800829c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	695a      	ldr	r2, [r3, #20]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80022b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f003 ff23 	bl	8006108 <USB_ReadInterrupts>
 80022c2:	4603      	mov	r3, r0
 80022c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022cc:	d112      	bne.n	80022f4 <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d102      	bne.n	80022e4 <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f005 ffb6 	bl	8008250 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	695a      	ldr	r2, [r3, #20]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80022f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f003 ff05 	bl	8006108 <USB_ReadInterrupts>
 80022fe:	4603      	mov	r3, r0
 8002300:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002304:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002308:	d121      	bne.n	800234e <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	695a      	ldr	r2, [r3, #20]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002318:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002320:	2b00      	cmp	r3, #0
 8002322:	d111      	bne.n	8002348 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002332:	089b      	lsrs	r3, r3, #2
 8002334:	f003 020f 	and.w	r2, r3, #15
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800233e:	2101      	movs	r1, #1
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f006 fa57 	bl	80087f4 <HAL_PCDEx_LPM_Callback>
 8002346:	e002      	b.n	800234e <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f005 ff81 	bl	8008250 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f003 fed8 	bl	8006108 <USB_ReadInterrupts>
 8002358:	4603      	mov	r3, r0
 800235a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800235e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002362:	f040 80c5 	bne.w	80024f0 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	69fa      	ldr	r2, [r7, #28]
 8002370:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002374:	f023 0301 	bic.w	r3, r3, #1
 8002378:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2110      	movs	r1, #16
 8002380:	4618      	mov	r0, r3
 8002382:	f003 f84d 	bl	8005420 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002386:	2300      	movs	r3, #0
 8002388:	62fb      	str	r3, [r7, #44]	; 0x2c
 800238a:	e056      	b.n	800243a <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800238c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800238e:	015a      	lsls	r2, r3, #5
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	4413      	add	r3, r2
 8002394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002398:	461a      	mov	r2, r3
 800239a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800239e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80023a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a2:	015a      	lsls	r2, r3, #5
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	4413      	add	r3, r2
 80023a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023b0:	0151      	lsls	r1, r2, #5
 80023b2:	69fa      	ldr	r2, [r7, #28]
 80023b4:	440a      	add	r2, r1
 80023b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80023ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80023be:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80023c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c2:	015a      	lsls	r2, r3, #5
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	4413      	add	r3, r2
 80023c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023d0:	0151      	lsls	r1, r2, #5
 80023d2:	69fa      	ldr	r2, [r7, #28]
 80023d4:	440a      	add	r2, r1
 80023d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80023da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80023de:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80023e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e2:	015a      	lsls	r2, r3, #5
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	4413      	add	r3, r2
 80023e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ec:	461a      	mov	r2, r3
 80023ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80023f2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80023f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f6:	015a      	lsls	r2, r3, #5
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	4413      	add	r3, r2
 80023fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002404:	0151      	lsls	r1, r2, #5
 8002406:	69fa      	ldr	r2, [r7, #28]
 8002408:	440a      	add	r2, r1
 800240a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800240e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002412:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002416:	015a      	lsls	r2, r3, #5
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	4413      	add	r3, r2
 800241c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002424:	0151      	lsls	r1, r2, #5
 8002426:	69fa      	ldr	r2, [r7, #28]
 8002428:	440a      	add	r2, r1
 800242a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800242e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002432:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002436:	3301      	adds	r3, #1
 8002438:	62fb      	str	r3, [r7, #44]	; 0x2c
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002440:	429a      	cmp	r2, r3
 8002442:	d3a3      	bcc.n	800238c <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800244a:	69db      	ldr	r3, [r3, #28]
 800244c:	69fa      	ldr	r2, [r7, #28]
 800244e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002452:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002456:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	2b00      	cmp	r3, #0
 800245e:	d016      	beq.n	800248e <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002466:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800246a:	69fa      	ldr	r2, [r7, #28]
 800246c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002470:	f043 030b 	orr.w	r3, r3, #11
 8002474:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800247e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002480:	69fa      	ldr	r2, [r7, #28]
 8002482:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002486:	f043 030b 	orr.w	r3, r3, #11
 800248a:	6453      	str	r3, [r2, #68]	; 0x44
 800248c:	e015      	b.n	80024ba <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	69fa      	ldr	r2, [r7, #28]
 8002498:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800249c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024a0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80024a4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	69fa      	ldr	r2, [r7, #28]
 80024b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024b4:	f043 030b 	orr.w	r3, r3, #11
 80024b8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	69fa      	ldr	r2, [r7, #28]
 80024c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024c8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80024cc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024d8:	4619      	mov	r1, r3
 80024da:	4610      	mov	r0, r2
 80024dc:	f003 fed8 	bl	8006290 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	695a      	ldr	r2, [r3, #20]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80024ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f003 fe07 	bl	8006108 <USB_ReadInterrupts>
 80024fa:	4603      	mov	r3, r0
 80024fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002500:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002504:	d124      	bne.n	8002550 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f003 fe9d 	bl	800624a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f002 ffe4 	bl	80054e2 <USB_GetDevSpeed>
 800251a:	4603      	mov	r3, r0
 800251c:	461a      	mov	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681c      	ldr	r4, [r3, #0]
 8002526:	f001 fad3 	bl	8003ad0 <HAL_RCC_GetHCLKFreq>
 800252a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002530:	b2db      	uxtb	r3, r3
 8002532:	461a      	mov	r2, r3
 8002534:	4620      	mov	r0, r4
 8002536:	f002 fd3f 	bl	8004fb8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f005 fe69 	bl	8008212 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	695a      	ldr	r2, [r3, #20]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800254e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f003 fdd7 	bl	8006108 <USB_ReadInterrupts>
 800255a:	4603      	mov	r3, r0
 800255c:	f003 0308 	and.w	r3, r3, #8
 8002560:	2b08      	cmp	r3, #8
 8002562:	d10a      	bne.n	800257a <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f005 fe46 	bl	80081f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	695a      	ldr	r2, [r3, #20]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f002 0208 	and.w	r2, r2, #8
 8002578:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f003 fdc2 	bl	8006108 <USB_ReadInterrupts>
 8002584:	4603      	mov	r3, r0
 8002586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800258a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800258e:	d10f      	bne.n	80025b0 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002590:	2300      	movs	r3, #0
 8002592:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	b2db      	uxtb	r3, r3
 8002598:	4619      	mov	r1, r3
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f005 feb8 	bl	8008310 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695a      	ldr	r2, [r3, #20]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80025ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f003 fda7 	bl	8006108 <USB_ReadInterrupts>
 80025ba:	4603      	mov	r3, r0
 80025bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025c4:	d10f      	bne.n	80025e6 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	4619      	mov	r1, r3
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f005 fe8b 	bl	80082ec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	695a      	ldr	r2, [r3, #20]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80025e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f003 fd8c 	bl	8006108 <USB_ReadInterrupts>
 80025f0:	4603      	mov	r3, r0
 80025f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80025f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025fa:	d10a      	bne.n	8002612 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f005 fe99 	bl	8008334 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	695a      	ldr	r2, [r3, #20]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002610:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f003 fd76 	bl	8006108 <USB_ReadInterrupts>
 800261c:	4603      	mov	r3, r0
 800261e:	f003 0304 	and.w	r3, r3, #4
 8002622:	2b04      	cmp	r3, #4
 8002624:	d115      	bne.n	8002652 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	2b00      	cmp	r3, #0
 8002636:	d002      	beq.n	800263e <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f005 fe89 	bl	8008350 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6859      	ldr	r1, [r3, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	430a      	orrs	r2, r1
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	e000      	b.n	8002652 <HAL_PCD_IRQHandler+0x742>
      return;
 8002650:	bf00      	nop
    }
  }
}
 8002652:	3734      	adds	r7, #52	; 0x34
 8002654:	46bd      	mov	sp, r7
 8002656:	bd90      	pop	{r4, r7, pc}

08002658 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <HAL_PCD_SetAddress+0x1a>
 800266e:	2302      	movs	r3, #2
 8002670:	e013      	b.n	800269a <HAL_PCD_SetAddress+0x42>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	78fa      	ldrb	r2, [r7, #3]
 800267e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	78fa      	ldrb	r2, [r7, #3]
 8002688:	4611      	mov	r1, r2
 800268a:	4618      	mov	r0, r3
 800268c:	f003 fcd4 	bl	8006038 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b084      	sub	sp, #16
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
 80026aa:	4608      	mov	r0, r1
 80026ac:	4611      	mov	r1, r2
 80026ae:	461a      	mov	r2, r3
 80026b0:	4603      	mov	r3, r0
 80026b2:	70fb      	strb	r3, [r7, #3]
 80026b4:	460b      	mov	r3, r1
 80026b6:	803b      	strh	r3, [r7, #0]
 80026b8:	4613      	mov	r3, r2
 80026ba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80026bc:	2300      	movs	r3, #0
 80026be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	da0f      	bge.n	80026e8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026c8:	78fb      	ldrb	r3, [r7, #3]
 80026ca:	f003 020f 	and.w	r2, r3, #15
 80026ce:	4613      	mov	r3, r2
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	1a9b      	subs	r3, r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	3338      	adds	r3, #56	; 0x38
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	4413      	add	r3, r2
 80026dc:	3304      	adds	r3, #4
 80026de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2201      	movs	r2, #1
 80026e4:	705a      	strb	r2, [r3, #1]
 80026e6:	e00f      	b.n	8002708 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026e8:	78fb      	ldrb	r3, [r7, #3]
 80026ea:	f003 020f 	and.w	r2, r3, #15
 80026ee:	4613      	mov	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	1a9b      	subs	r3, r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	4413      	add	r3, r2
 80026fe:	3304      	adds	r3, #4
 8002700:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002708:	78fb      	ldrb	r3, [r7, #3]
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	b2da      	uxtb	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002714:	883a      	ldrh	r2, [r7, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	78ba      	ldrb	r2, [r7, #2]
 800271e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	785b      	ldrb	r3, [r3, #1]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d004      	beq.n	8002732 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	b29a      	uxth	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002732:	78bb      	ldrb	r3, [r7, #2]
 8002734:	2b02      	cmp	r3, #2
 8002736:	d102      	bne.n	800273e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002744:	2b01      	cmp	r3, #1
 8002746:	d101      	bne.n	800274c <HAL_PCD_EP_Open+0xaa>
 8002748:	2302      	movs	r3, #2
 800274a:	e00e      	b.n	800276a <HAL_PCD_EP_Open+0xc8>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68f9      	ldr	r1, [r7, #12]
 800275a:	4618      	mov	r0, r3
 800275c:	f002 fee0 	bl	8005520 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002768:	7afb      	ldrb	r3, [r7, #11]
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b084      	sub	sp, #16
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
 800277a:	460b      	mov	r3, r1
 800277c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800277e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002782:	2b00      	cmp	r3, #0
 8002784:	da0f      	bge.n	80027a6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002786:	78fb      	ldrb	r3, [r7, #3]
 8002788:	f003 020f 	and.w	r2, r3, #15
 800278c:	4613      	mov	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	1a9b      	subs	r3, r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	3338      	adds	r3, #56	; 0x38
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	4413      	add	r3, r2
 800279a:	3304      	adds	r3, #4
 800279c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2201      	movs	r2, #1
 80027a2:	705a      	strb	r2, [r3, #1]
 80027a4:	e00f      	b.n	80027c6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027a6:	78fb      	ldrb	r3, [r7, #3]
 80027a8:	f003 020f 	and.w	r2, r3, #15
 80027ac:	4613      	mov	r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	1a9b      	subs	r3, r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	4413      	add	r3, r2
 80027bc:	3304      	adds	r3, #4
 80027be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80027c6:	78fb      	ldrb	r3, [r7, #3]
 80027c8:	f003 030f 	and.w	r3, r3, #15
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <HAL_PCD_EP_Close+0x6e>
 80027dc:	2302      	movs	r3, #2
 80027de:	e00e      	b.n	80027fe <HAL_PCD_EP_Close+0x8c>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68f9      	ldr	r1, [r7, #12]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f002 ff1e 	bl	8005630 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b086      	sub	sp, #24
 800280a:	af00      	add	r7, sp, #0
 800280c:	60f8      	str	r0, [r7, #12]
 800280e:	607a      	str	r2, [r7, #4]
 8002810:	603b      	str	r3, [r7, #0]
 8002812:	460b      	mov	r3, r1
 8002814:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002816:	7afb      	ldrb	r3, [r7, #11]
 8002818:	f003 020f 	and.w	r2, r3, #15
 800281c:	4613      	mov	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	1a9b      	subs	r3, r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	4413      	add	r3, r2
 800282c:	3304      	adds	r3, #4
 800282e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	2200      	movs	r2, #0
 8002840:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	2200      	movs	r2, #0
 8002846:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002848:	7afb      	ldrb	r3, [r7, #11]
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	b2da      	uxtb	r2, r3
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002854:	7afb      	ldrb	r3, [r7, #11]
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	2b00      	cmp	r3, #0
 800285c:	d106      	bne.n	800286c <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6979      	ldr	r1, [r7, #20]
 8002864:	4618      	mov	r0, r3
 8002866:	f003 f99b 	bl	8005ba0 <USB_EP0StartXfer>
 800286a:	e005      	b.n	8002878 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6979      	ldr	r1, [r7, #20]
 8002872:	4618      	mov	r0, r3
 8002874:	f002 ffb8 	bl	80057e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3718      	adds	r7, #24
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
 800288a:	460b      	mov	r3, r1
 800288c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800288e:	78fb      	ldrb	r3, [r7, #3]
 8002890:	f003 020f 	and.w	r2, r3, #15
 8002894:	6879      	ldr	r1, [r7, #4]
 8002896:	4613      	mov	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	1a9b      	subs	r3, r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	440b      	add	r3, r1
 80028a0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80028a4:	681b      	ldr	r3, [r3, #0]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b086      	sub	sp, #24
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	60f8      	str	r0, [r7, #12]
 80028ba:	607a      	str	r2, [r7, #4]
 80028bc:	603b      	str	r3, [r7, #0]
 80028be:	460b      	mov	r3, r1
 80028c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028c2:	7afb      	ldrb	r3, [r7, #11]
 80028c4:	f003 020f 	and.w	r2, r3, #15
 80028c8:	4613      	mov	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	3338      	adds	r3, #56	; 0x38
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	4413      	add	r3, r2
 80028d6:	3304      	adds	r3, #4
 80028d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	2200      	movs	r2, #0
 80028ea:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	2201      	movs	r2, #1
 80028f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028f2:	7afb      	ldrb	r3, [r7, #11]
 80028f4:	f003 030f 	and.w	r3, r3, #15
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028fe:	7afb      	ldrb	r3, [r7, #11]
 8002900:	f003 030f 	and.w	r3, r3, #15
 8002904:	2b00      	cmp	r3, #0
 8002906:	d106      	bne.n	8002916 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6979      	ldr	r1, [r7, #20]
 800290e:	4618      	mov	r0, r3
 8002910:	f003 f946 	bl	8005ba0 <USB_EP0StartXfer>
 8002914:	e005      	b.n	8002922 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6979      	ldr	r1, [r7, #20]
 800291c:	4618      	mov	r0, r3
 800291e:	f002 ff63 	bl	80057e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002938:	78fb      	ldrb	r3, [r7, #3]
 800293a:	f003 020f 	and.w	r2, r3, #15
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	429a      	cmp	r2, r3
 8002944:	d901      	bls.n	800294a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e04e      	b.n	80029e8 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800294a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800294e:	2b00      	cmp	r3, #0
 8002950:	da0f      	bge.n	8002972 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002952:	78fb      	ldrb	r3, [r7, #3]
 8002954:	f003 020f 	and.w	r2, r3, #15
 8002958:	4613      	mov	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	1a9b      	subs	r3, r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	3338      	adds	r3, #56	; 0x38
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	4413      	add	r3, r2
 8002966:	3304      	adds	r3, #4
 8002968:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2201      	movs	r2, #1
 800296e:	705a      	strb	r2, [r3, #1]
 8002970:	e00d      	b.n	800298e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002972:	78fa      	ldrb	r2, [r7, #3]
 8002974:	4613      	mov	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	1a9b      	subs	r3, r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	4413      	add	r3, r2
 8002984:	3304      	adds	r3, #4
 8002986:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2201      	movs	r2, #1
 8002992:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002994:	78fb      	ldrb	r3, [r7, #3]
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	b2da      	uxtb	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d101      	bne.n	80029ae <HAL_PCD_EP_SetStall+0x82>
 80029aa:	2302      	movs	r3, #2
 80029ac:	e01c      	b.n	80029e8 <HAL_PCD_EP_SetStall+0xbc>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68f9      	ldr	r1, [r7, #12]
 80029bc:	4618      	mov	r0, r3
 80029be:	f003 fa67 	bl	8005e90 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029c2:	78fb      	ldrb	r3, [r7, #3]
 80029c4:	f003 030f 	and.w	r3, r3, #15
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d108      	bne.n	80029de <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029d6:	4619      	mov	r1, r3
 80029d8:	4610      	mov	r0, r2
 80029da:	f003 fc59 	bl	8006290 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	460b      	mov	r3, r1
 80029fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80029fc:	78fb      	ldrb	r3, [r7, #3]
 80029fe:	f003 020f 	and.w	r2, r3, #15
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d901      	bls.n	8002a0e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e042      	b.n	8002a94 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	da0f      	bge.n	8002a36 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a16:	78fb      	ldrb	r3, [r7, #3]
 8002a18:	f003 020f 	and.w	r2, r3, #15
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	1a9b      	subs	r3, r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	3338      	adds	r3, #56	; 0x38
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	4413      	add	r3, r2
 8002a2a:	3304      	adds	r3, #4
 8002a2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2201      	movs	r2, #1
 8002a32:	705a      	strb	r2, [r3, #1]
 8002a34:	e00f      	b.n	8002a56 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a36:	78fb      	ldrb	r3, [r7, #3]
 8002a38:	f003 020f 	and.w	r2, r3, #15
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	1a9b      	subs	r3, r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a5c:	78fb      	ldrb	r3, [r7, #3]
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d101      	bne.n	8002a76 <HAL_PCD_EP_ClrStall+0x86>
 8002a72:	2302      	movs	r3, #2
 8002a74:	e00e      	b.n	8002a94 <HAL_PCD_EP_ClrStall+0xa4>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68f9      	ldr	r1, [r7, #12]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f003 fa71 	bl	8005f6c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b088      	sub	sp, #32
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	1a9b      	subs	r3, r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	3338      	adds	r3, #56	; 0x38
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	4413      	add	r3, r2
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	699a      	ldr	r2, [r3, #24]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d901      	bls.n	8002ad4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e067      	b.n	8002ba4 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	695a      	ldr	r2, [r3, #20]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	69fa      	ldr	r2, [r7, #28]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d902      	bls.n	8002af0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	3303      	adds	r3, #3
 8002af4:	089b      	lsrs	r3, r3, #2
 8002af6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002af8:	e026      	b.n	8002b48 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	695a      	ldr	r2, [r3, #20]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	69fa      	ldr	r2, [r7, #28]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d902      	bls.n	8002b16 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	3303      	adds	r3, #3
 8002b1a:	089b      	lsrs	r3, r3, #2
 8002b1c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	68d9      	ldr	r1, [r3, #12]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	6978      	ldr	r0, [r7, #20]
 8002b2c:	f003 f956 	bl	8005ddc <USB_WritePacket>

    ep->xfer_buff  += len;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	68da      	ldr	r2, [r3, #12]
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	441a      	add	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	699a      	ldr	r2, [r3, #24]
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	441a      	add	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	015a      	lsls	r2, r3, #5
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d809      	bhi.n	8002b72 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	699a      	ldr	r2, [r3, #24]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d203      	bcs.n	8002b72 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1c3      	bne.n	8002afa <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	695a      	ldr	r2, [r3, #20]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d811      	bhi.n	8002ba2 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	f003 030f 	and.w	r3, r3, #15
 8002b84:	2201      	movs	r2, #1
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	43db      	mvns	r3, r3
 8002b98:	6939      	ldr	r1, [r7, #16]
 8002b9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3720      	adds	r7, #32
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	333c      	adds	r3, #60	; 0x3c
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	015a      	lsls	r2, r3, #5
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4a19      	ldr	r2, [pc, #100]	; (8002c44 <PCD_EP_OutXfrComplete_int+0x98>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d124      	bne.n	8002c2c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00a      	beq.n	8002c02 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	015a      	lsls	r2, r3, #5
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bfe:	6093      	str	r3, [r2, #8]
 8002c00:	e01a      	b.n	8002c38 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	f003 0320 	and.w	r3, r3, #32
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d008      	beq.n	8002c1e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	015a      	lsls	r2, r3, #5
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	4413      	add	r3, r2
 8002c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c18:	461a      	mov	r2, r3
 8002c1a:	2320      	movs	r3, #32
 8002c1c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	4619      	mov	r1, r3
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f005 fab1 	bl	800818c <HAL_PCD_DataOutStageCallback>
 8002c2a:	e005      	b.n	8002c38 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	4619      	mov	r1, r3
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f005 faaa 	bl	800818c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	4f54310a 	.word	0x4f54310a

08002c48 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	333c      	adds	r3, #60	; 0x3c
 8002c60:	3304      	adds	r3, #4
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	015a      	lsls	r2, r3, #5
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	4a0c      	ldr	r2, [pc, #48]	; (8002cac <PCD_EP_OutSetupPacket_int+0x64>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d90e      	bls.n	8002c9c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d009      	beq.n	8002c9c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	015a      	lsls	r2, r3, #5
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c94:	461a      	mov	r2, r3
 8002c96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c9a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f005 fa63 	bl	8008168 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3718      	adds	r7, #24
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	4f54300a 	.word	0x4f54300a

08002cb0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	460b      	mov	r3, r1
 8002cba:	70fb      	strb	r3, [r7, #3]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002cc8:	78fb      	ldrb	r3, [r7, #3]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d107      	bne.n	8002cde <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002cce:	883b      	ldrh	r3, [r7, #0]
 8002cd0:	0419      	lsls	r1, r3, #16
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	629a      	str	r2, [r3, #40]	; 0x28
 8002cdc:	e028      	b.n	8002d30 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce4:	0c1b      	lsrs	r3, r3, #16
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	4413      	add	r3, r2
 8002cea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002cec:	2300      	movs	r3, #0
 8002cee:	73fb      	strb	r3, [r7, #15]
 8002cf0:	e00d      	b.n	8002d0e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	7bfb      	ldrb	r3, [r7, #15]
 8002cf8:	3340      	adds	r3, #64	; 0x40
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	0c1b      	lsrs	r3, r3, #16
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	4413      	add	r3, r2
 8002d06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d08:	7bfb      	ldrb	r3, [r7, #15]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	73fb      	strb	r3, [r7, #15]
 8002d0e:	7bfa      	ldrb	r2, [r7, #15]
 8002d10:	78fb      	ldrb	r3, [r7, #3]
 8002d12:	3b01      	subs	r3, #1
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d3ec      	bcc.n	8002cf2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002d18:	883b      	ldrh	r3, [r7, #0]
 8002d1a:	0418      	lsls	r0, r3, #16
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6819      	ldr	r1, [r3, #0]
 8002d20:	78fb      	ldrb	r3, [r7, #3]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	68ba      	ldr	r2, [r7, #8]
 8002d26:	4302      	orrs	r2, r0
 8002d28:	3340      	adds	r3, #64	; 0x40
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
 8002d46:	460b      	mov	r3, r1
 8002d48:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	887a      	ldrh	r2, [r7, #2]
 8002d50:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d92:	f043 0303 	orr.w	r3, r3, #3
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dac:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a04      	ldr	r2, [pc, #16]	; (8002dc4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db6:	6013      	str	r3, [r2, #0]
}
 8002db8:	bf00      	nop
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	40007000 	.word	0x40007000

08002dc8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002dcc:	4b04      	ldr	r3, [pc, #16]	; (8002de0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40007000 	.word	0x40007000

08002de4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002df2:	d130      	bne.n	8002e56 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002df4:	4b23      	ldr	r3, [pc, #140]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e00:	d038      	beq.n	8002e74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e02:	4b20      	ldr	r3, [pc, #128]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e0a:	4a1e      	ldr	r2, [pc, #120]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e10:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e12:	4b1d      	ldr	r3, [pc, #116]	; (8002e88 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2232      	movs	r2, #50	; 0x32
 8002e18:	fb02 f303 	mul.w	r3, r2, r3
 8002e1c:	4a1b      	ldr	r2, [pc, #108]	; (8002e8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e22:	0c9b      	lsrs	r3, r3, #18
 8002e24:	3301      	adds	r3, #1
 8002e26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e28:	e002      	b.n	8002e30 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e30:	4b14      	ldr	r3, [pc, #80]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e3c:	d102      	bne.n	8002e44 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1f2      	bne.n	8002e2a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e44:	4b0f      	ldr	r3, [pc, #60]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e50:	d110      	bne.n	8002e74 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e00f      	b.n	8002e76 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e56:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e62:	d007      	beq.n	8002e74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e64:	4b07      	ldr	r3, [pc, #28]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e6c:	4a05      	ldr	r2, [pc, #20]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e72:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	40007000 	.word	0x40007000
 8002e88:	20000000 	.word	0x20000000
 8002e8c:	431bde83 	.word	0x431bde83

08002e90 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002e94:	4b05      	ldr	r3, [pc, #20]	; (8002eac <HAL_PWREx_EnableVddUSB+0x1c>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	4a04      	ldr	r2, [pc, #16]	; (8002eac <HAL_PWREx_EnableVddUSB+0x1c>)
 8002e9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e9e:	6053      	str	r3, [r2, #4]
}
 8002ea0:	bf00      	nop
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	40007000 	.word	0x40007000

08002eb0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af02      	add	r7, sp, #8
 8002eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002eb8:	f7fe f97e 	bl	80011b8 <HAL_GetTick>
 8002ebc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e063      	b.n	8002f90 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10b      	bne.n	8002eec <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f7fd ff4b 	bl	8000d78 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002ee2:	f241 3188 	movw	r1, #5000	; 0x1388
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f858 	bl	8002f9c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	021a      	lsls	r2, r3, #8
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	2120      	movs	r1, #32
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f850 	bl	8002fb8 <QSPI_WaitFlagStateUntilTimeout>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002f1c:	7afb      	ldrb	r3, [r7, #11]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d131      	bne.n	8002f86 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f2c:	f023 0310 	bic.w	r3, r3, #16
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6852      	ldr	r2, [r2, #4]
 8002f34:	0611      	lsls	r1, r2, #24
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	68d2      	ldr	r2, [r2, #12]
 8002f3a:	4311      	orrs	r1, r2
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6812      	ldr	r2, [r2, #0]
 8002f40:	430b      	orrs	r3, r1
 8002f42:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	4b13      	ldr	r3, [pc, #76]	; (8002f98 <HAL_QSPI_Init+0xe8>)
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6912      	ldr	r2, [r2, #16]
 8002f52:	0411      	lsls	r1, r2, #16
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	6952      	ldr	r2, [r2, #20]
 8002f58:	4311      	orrs	r1, r2
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6992      	ldr	r2, [r2, #24]
 8002f5e:	4311      	orrs	r1, r2
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	430b      	orrs	r3, r1
 8002f66:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0201 	orr.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002f8e:	7afb      	ldrb	r3, [r7, #11]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	ffe0f8fe 	.word	0xffe0f8fe

08002f9c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	603b      	str	r3, [r7, #0]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002fc8:	e01a      	b.n	8003000 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd0:	d016      	beq.n	8003000 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd2:	f7fe f8f1 	bl	80011b8 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d302      	bcc.n	8002fe8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10b      	bne.n	8003000 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2204      	movs	r2, #4
 8002fec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff4:	f043 0201 	orr.w	r2, r3, #1
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e00e      	b.n	800301e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689a      	ldr	r2, [r3, #8]
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	4013      	ands	r3, r2
 800300a:	2b00      	cmp	r3, #0
 800300c:	bf14      	ite	ne
 800300e:	2301      	movne	r3, #1
 8003010:	2300      	moveq	r3, #0
 8003012:	b2db      	uxtb	r3, r3
 8003014:	461a      	mov	r2, r3
 8003016:	79fb      	ldrb	r3, [r7, #7]
 8003018:	429a      	cmp	r2, r3
 800301a:	d1d6      	bne.n	8002fca <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b088      	sub	sp, #32
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e3d4      	b.n	80037e4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800303a:	4ba1      	ldr	r3, [pc, #644]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 030c 	and.w	r3, r3, #12
 8003042:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003044:	4b9e      	ldr	r3, [pc, #632]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	f003 0303 	and.w	r3, r3, #3
 800304c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0310 	and.w	r3, r3, #16
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 80e4 	beq.w	8003224 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d007      	beq.n	8003072 <HAL_RCC_OscConfig+0x4a>
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	2b0c      	cmp	r3, #12
 8003066:	f040 808b 	bne.w	8003180 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2b01      	cmp	r3, #1
 800306e:	f040 8087 	bne.w	8003180 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003072:	4b93      	ldr	r3, [pc, #588]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d005      	beq.n	800308a <HAL_RCC_OscConfig+0x62>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e3ac      	b.n	80037e4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1a      	ldr	r2, [r3, #32]
 800308e:	4b8c      	ldr	r3, [pc, #560]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	2b00      	cmp	r3, #0
 8003098:	d004      	beq.n	80030a4 <HAL_RCC_OscConfig+0x7c>
 800309a:	4b89      	ldr	r3, [pc, #548]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030a2:	e005      	b.n	80030b0 <HAL_RCC_OscConfig+0x88>
 80030a4:	4b86      	ldr	r3, [pc, #536]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 80030a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030aa:	091b      	lsrs	r3, r3, #4
 80030ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d223      	bcs.n	80030fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 fd41 	bl	8003b40 <RCC_SetFlashLatencyFromMSIRange>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e38d      	b.n	80037e4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030c8:	4b7d      	ldr	r3, [pc, #500]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a7c      	ldr	r2, [pc, #496]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 80030ce:	f043 0308 	orr.w	r3, r3, #8
 80030d2:	6013      	str	r3, [r2, #0]
 80030d4:	4b7a      	ldr	r3, [pc, #488]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	4977      	ldr	r1, [pc, #476]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030e6:	4b76      	ldr	r3, [pc, #472]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	021b      	lsls	r3, r3, #8
 80030f4:	4972      	ldr	r1, [pc, #456]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	604b      	str	r3, [r1, #4]
 80030fa:	e025      	b.n	8003148 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030fc:	4b70      	ldr	r3, [pc, #448]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a6f      	ldr	r2, [pc, #444]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 8003102:	f043 0308 	orr.w	r3, r3, #8
 8003106:	6013      	str	r3, [r2, #0]
 8003108:	4b6d      	ldr	r3, [pc, #436]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	496a      	ldr	r1, [pc, #424]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 8003116:	4313      	orrs	r3, r2
 8003118:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800311a:	4b69      	ldr	r3, [pc, #420]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	021b      	lsls	r3, r3, #8
 8003128:	4965      	ldr	r1, [pc, #404]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 800312a:	4313      	orrs	r3, r2
 800312c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d109      	bne.n	8003148 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	4618      	mov	r0, r3
 800313a:	f000 fd01 	bl	8003b40 <RCC_SetFlashLatencyFromMSIRange>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e34d      	b.n	80037e4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003148:	f000 fc36 	bl	80039b8 <HAL_RCC_GetSysClockFreq>
 800314c:	4602      	mov	r2, r0
 800314e:	4b5c      	ldr	r3, [pc, #368]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	091b      	lsrs	r3, r3, #4
 8003154:	f003 030f 	and.w	r3, r3, #15
 8003158:	495a      	ldr	r1, [pc, #360]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 800315a:	5ccb      	ldrb	r3, [r1, r3]
 800315c:	f003 031f 	and.w	r3, r3, #31
 8003160:	fa22 f303 	lsr.w	r3, r2, r3
 8003164:	4a58      	ldr	r2, [pc, #352]	; (80032c8 <HAL_RCC_OscConfig+0x2a0>)
 8003166:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003168:	4b58      	ldr	r3, [pc, #352]	; (80032cc <HAL_RCC_OscConfig+0x2a4>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f7fd ffd3 	bl	8001118 <HAL_InitTick>
 8003172:	4603      	mov	r3, r0
 8003174:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003176:	7bfb      	ldrb	r3, [r7, #15]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d052      	beq.n	8003222 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800317c:	7bfb      	ldrb	r3, [r7, #15]
 800317e:	e331      	b.n	80037e4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d032      	beq.n	80031ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003188:	4b4d      	ldr	r3, [pc, #308]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a4c      	ldr	r2, [pc, #304]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 800318e:	f043 0301 	orr.w	r3, r3, #1
 8003192:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003194:	f7fe f810 	bl	80011b8 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800319c:	f7fe f80c 	bl	80011b8 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e31a      	b.n	80037e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031ae:	4b44      	ldr	r3, [pc, #272]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0f0      	beq.n	800319c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031ba:	4b41      	ldr	r3, [pc, #260]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a40      	ldr	r2, [pc, #256]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 80031c0:	f043 0308 	orr.w	r3, r3, #8
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	4b3e      	ldr	r3, [pc, #248]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	493b      	ldr	r1, [pc, #236]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031d8:	4b39      	ldr	r3, [pc, #228]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	021b      	lsls	r3, r3, #8
 80031e6:	4936      	ldr	r1, [pc, #216]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	604b      	str	r3, [r1, #4]
 80031ec:	e01a      	b.n	8003224 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031ee:	4b34      	ldr	r3, [pc, #208]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a33      	ldr	r2, [pc, #204]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 80031f4:	f023 0301 	bic.w	r3, r3, #1
 80031f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031fa:	f7fd ffdd 	bl	80011b8 <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003200:	e008      	b.n	8003214 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003202:	f7fd ffd9 	bl	80011b8 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d901      	bls.n	8003214 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e2e7      	b.n	80037e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003214:	4b2a      	ldr	r3, [pc, #168]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1f0      	bne.n	8003202 <HAL_RCC_OscConfig+0x1da>
 8003220:	e000      	b.n	8003224 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003222:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	d074      	beq.n	800331a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	2b08      	cmp	r3, #8
 8003234:	d005      	beq.n	8003242 <HAL_RCC_OscConfig+0x21a>
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	2b0c      	cmp	r3, #12
 800323a:	d10e      	bne.n	800325a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	2b03      	cmp	r3, #3
 8003240:	d10b      	bne.n	800325a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003242:	4b1f      	ldr	r3, [pc, #124]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d064      	beq.n	8003318 <HAL_RCC_OscConfig+0x2f0>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d160      	bne.n	8003318 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e2c4      	b.n	80037e4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003262:	d106      	bne.n	8003272 <HAL_RCC_OscConfig+0x24a>
 8003264:	4b16      	ldr	r3, [pc, #88]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a15      	ldr	r2, [pc, #84]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 800326a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800326e:	6013      	str	r3, [r2, #0]
 8003270:	e01d      	b.n	80032ae <HAL_RCC_OscConfig+0x286>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800327a:	d10c      	bne.n	8003296 <HAL_RCC_OscConfig+0x26e>
 800327c:	4b10      	ldr	r3, [pc, #64]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a0f      	ldr	r2, [pc, #60]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 8003282:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	4b0d      	ldr	r3, [pc, #52]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a0c      	ldr	r2, [pc, #48]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 800328e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003292:	6013      	str	r3, [r2, #0]
 8003294:	e00b      	b.n	80032ae <HAL_RCC_OscConfig+0x286>
 8003296:	4b0a      	ldr	r3, [pc, #40]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a09      	ldr	r2, [pc, #36]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 800329c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	4b07      	ldr	r3, [pc, #28]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a06      	ldr	r2, [pc, #24]	; (80032c0 <HAL_RCC_OscConfig+0x298>)
 80032a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d01c      	beq.n	80032f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b6:	f7fd ff7f 	bl	80011b8 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032bc:	e011      	b.n	80032e2 <HAL_RCC_OscConfig+0x2ba>
 80032be:	bf00      	nop
 80032c0:	40021000 	.word	0x40021000
 80032c4:	08008984 	.word	0x08008984
 80032c8:	20000000 	.word	0x20000000
 80032cc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032d0:	f7fd ff72 	bl	80011b8 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b64      	cmp	r3, #100	; 0x64
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e280      	b.n	80037e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032e2:	4baf      	ldr	r3, [pc, #700]	; (80035a0 <HAL_RCC_OscConfig+0x578>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0f0      	beq.n	80032d0 <HAL_RCC_OscConfig+0x2a8>
 80032ee:	e014      	b.n	800331a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f0:	f7fd ff62 	bl	80011b8 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f8:	f7fd ff5e 	bl	80011b8 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b64      	cmp	r3, #100	; 0x64
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e26c      	b.n	80037e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800330a:	4ba5      	ldr	r3, [pc, #660]	; (80035a0 <HAL_RCC_OscConfig+0x578>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f0      	bne.n	80032f8 <HAL_RCC_OscConfig+0x2d0>
 8003316:	e000      	b.n	800331a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d060      	beq.n	80033e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	2b04      	cmp	r3, #4
 800332a:	d005      	beq.n	8003338 <HAL_RCC_OscConfig+0x310>
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	2b0c      	cmp	r3, #12
 8003330:	d119      	bne.n	8003366 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	2b02      	cmp	r3, #2
 8003336:	d116      	bne.n	8003366 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003338:	4b99      	ldr	r3, [pc, #612]	; (80035a0 <HAL_RCC_OscConfig+0x578>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003340:	2b00      	cmp	r3, #0
 8003342:	d005      	beq.n	8003350 <HAL_RCC_OscConfig+0x328>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e249      	b.n	80037e4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003350:	4b93      	ldr	r3, [pc, #588]	; (80035a0 <HAL_RCC_OscConfig+0x578>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	061b      	lsls	r3, r3, #24
 800335e:	4990      	ldr	r1, [pc, #576]	; (80035a0 <HAL_RCC_OscConfig+0x578>)
 8003360:	4313      	orrs	r3, r2
 8003362:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003364:	e040      	b.n	80033e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d023      	beq.n	80033b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800336e:	4b8c      	ldr	r3, [pc, #560]	; (80035a0 <HAL_RCC_OscConfig+0x578>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a8b      	ldr	r2, [pc, #556]	; (80035a0 <HAL_RCC_OscConfig+0x578>)
 8003374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337a:	f7fd ff1d 	bl	80011b8 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003382:	f7fd ff19 	bl	80011b8 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e227      	b.n	80037e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003394:	4b82      	ldr	r3, [pc, #520]	; (80035a0 <HAL_RCC_OscConfig+0x578>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0f0      	beq.n	8003382 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a0:	4b7f      	ldr	r3, [pc, #508]	; (80035a0 <HAL_RCC_OscConfig+0x578>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	061b      	lsls	r3, r3, #24
 80033ae:	497c      	ldr	r1, [pc, #496]	; (80035a0 <HAL_RCC_OscConfig+0x578>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	604b      	str	r3, [r1, #4]
 80033b4:	e018      	b.n	80033e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033b6:	4b7a      	ldr	r3, [pc, #488]	; (80035a0 <HAL_RCC_OscConfig+0x578>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a79      	ldr	r2, [pc, #484]	; (80035a0 <HAL_RCC_OscConfig+0x578>)
 80033bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c2:	f7fd fef9 	bl	80011b8 <HAL_GetTick>
 80033c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033c8:	e008      	b.n	80033dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ca:	f7fd fef5 	bl	80011b8 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e203      	b.n	80037e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033dc:	4b70      	ldr	r3, [pc, #448]	; (80035a0 <HAL_RCC_OscConfig+0x578>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1f0      	bne.n	80033ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d03c      	beq.n	800346e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d01c      	beq.n	8003436 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033fc:	4b68      	ldr	r3, [pc, #416]	; (80035a0 <HAL_RCC_OscConfig+0x578>)
 80033fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003402:	4a67      	ldr	r2, [pc, #412]	; (80035a0 <HAL_RCC_OscConfig+0x578>)
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340c:	f7fd fed4 	bl	80011b8 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003414:	f7fd fed0 	bl	80011b8 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e1de      	b.n	80037e4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003426:	4b5e      	ldr	r3, [pc, #376]	; (80035a0 <HAL_RCC_OscConfig+0x578>)
 8003428:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0ef      	beq.n	8003414 <HAL_RCC_OscConfig+0x3ec>
 8003434:	e01b      	b.n	800346e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003436:	4b5a      	ldr	r3, [pc, #360]	; (80035a0 <HAL_RCC_OscConfig+0x578>)
 8003438:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800343c:	4a58      	ldr	r2, [pc, #352]	; (80035a0 <HAL_RCC_OscConfig+0x578>)
 800343e:	f023 0301 	bic.w	r3, r3, #1
 8003442:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003446:	f7fd feb7 	bl	80011b8 <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800344c:	e008      	b.n	8003460 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800344e:	f7fd feb3 	bl	80011b8 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d901      	bls.n	8003460 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e1c1      	b.n	80037e4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003460:	4b4f      	ldr	r3, [pc, #316]	; (80035a0 <HAL_RCC_OscConfig+0x578>)
 8003462:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1ef      	bne.n	800344e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0304 	and.w	r3, r3, #4
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 80a6 	beq.w	80035c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800347c:	2300      	movs	r3, #0
 800347e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003480:	4b47      	ldr	r3, [pc, #284]	; (80035a0 <HAL_RCC_OscConfig+0x578>)
 8003482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10d      	bne.n	80034a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800348c:	4b44      	ldr	r3, [pc, #272]	; (80035a0 <HAL_RCC_OscConfig+0x578>)
 800348e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003490:	4a43      	ldr	r2, [pc, #268]	; (80035a0 <HAL_RCC_OscConfig+0x578>)
 8003492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003496:	6593      	str	r3, [r2, #88]	; 0x58
 8003498:	4b41      	ldr	r3, [pc, #260]	; (80035a0 <HAL_RCC_OscConfig+0x578>)
 800349a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800349c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a0:	60bb      	str	r3, [r7, #8]
 80034a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034a4:	2301      	movs	r3, #1
 80034a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034a8:	4b3e      	ldr	r3, [pc, #248]	; (80035a4 <HAL_RCC_OscConfig+0x57c>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d118      	bne.n	80034e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034b4:	4b3b      	ldr	r3, [pc, #236]	; (80035a4 <HAL_RCC_OscConfig+0x57c>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a3a      	ldr	r2, [pc, #232]	; (80035a4 <HAL_RCC_OscConfig+0x57c>)
 80034ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034c0:	f7fd fe7a 	bl	80011b8 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034c8:	f7fd fe76 	bl	80011b8 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e184      	b.n	80037e4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034da:	4b32      	ldr	r3, [pc, #200]	; (80035a4 <HAL_RCC_OscConfig+0x57c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d0f0      	beq.n	80034c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d108      	bne.n	8003500 <HAL_RCC_OscConfig+0x4d8>
 80034ee:	4b2c      	ldr	r3, [pc, #176]	; (80035a0 <HAL_RCC_OscConfig+0x578>)
 80034f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f4:	4a2a      	ldr	r2, [pc, #168]	; (80035a0 <HAL_RCC_OscConfig+0x578>)
 80034f6:	f043 0301 	orr.w	r3, r3, #1
 80034fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034fe:	e024      	b.n	800354a <HAL_RCC_OscConfig+0x522>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	2b05      	cmp	r3, #5
 8003506:	d110      	bne.n	800352a <HAL_RCC_OscConfig+0x502>
 8003508:	4b25      	ldr	r3, [pc, #148]	; (80035a0 <HAL_RCC_OscConfig+0x578>)
 800350a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350e:	4a24      	ldr	r2, [pc, #144]	; (80035a0 <HAL_RCC_OscConfig+0x578>)
 8003510:	f043 0304 	orr.w	r3, r3, #4
 8003514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003518:	4b21      	ldr	r3, [pc, #132]	; (80035a0 <HAL_RCC_OscConfig+0x578>)
 800351a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351e:	4a20      	ldr	r2, [pc, #128]	; (80035a0 <HAL_RCC_OscConfig+0x578>)
 8003520:	f043 0301 	orr.w	r3, r3, #1
 8003524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003528:	e00f      	b.n	800354a <HAL_RCC_OscConfig+0x522>
 800352a:	4b1d      	ldr	r3, [pc, #116]	; (80035a0 <HAL_RCC_OscConfig+0x578>)
 800352c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003530:	4a1b      	ldr	r2, [pc, #108]	; (80035a0 <HAL_RCC_OscConfig+0x578>)
 8003532:	f023 0301 	bic.w	r3, r3, #1
 8003536:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800353a:	4b19      	ldr	r3, [pc, #100]	; (80035a0 <HAL_RCC_OscConfig+0x578>)
 800353c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003540:	4a17      	ldr	r2, [pc, #92]	; (80035a0 <HAL_RCC_OscConfig+0x578>)
 8003542:	f023 0304 	bic.w	r3, r3, #4
 8003546:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d016      	beq.n	8003580 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003552:	f7fd fe31 	bl	80011b8 <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003558:	e00a      	b.n	8003570 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355a:	f7fd fe2d 	bl	80011b8 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	f241 3288 	movw	r2, #5000	; 0x1388
 8003568:	4293      	cmp	r3, r2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e139      	b.n	80037e4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003570:	4b0b      	ldr	r3, [pc, #44]	; (80035a0 <HAL_RCC_OscConfig+0x578>)
 8003572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0ed      	beq.n	800355a <HAL_RCC_OscConfig+0x532>
 800357e:	e01a      	b.n	80035b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003580:	f7fd fe1a 	bl	80011b8 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003586:	e00f      	b.n	80035a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003588:	f7fd fe16 	bl	80011b8 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	f241 3288 	movw	r2, #5000	; 0x1388
 8003596:	4293      	cmp	r3, r2
 8003598:	d906      	bls.n	80035a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e122      	b.n	80037e4 <HAL_RCC_OscConfig+0x7bc>
 800359e:	bf00      	nop
 80035a0:	40021000 	.word	0x40021000
 80035a4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035a8:	4b90      	ldr	r3, [pc, #576]	; (80037ec <HAL_RCC_OscConfig+0x7c4>)
 80035aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1e8      	bne.n	8003588 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035b6:	7ffb      	ldrb	r3, [r7, #31]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d105      	bne.n	80035c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035bc:	4b8b      	ldr	r3, [pc, #556]	; (80037ec <HAL_RCC_OscConfig+0x7c4>)
 80035be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c0:	4a8a      	ldr	r2, [pc, #552]	; (80037ec <HAL_RCC_OscConfig+0x7c4>)
 80035c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035c6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 8108 	beq.w	80037e2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	f040 80d0 	bne.w	800377c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80035dc:	4b83      	ldr	r3, [pc, #524]	; (80037ec <HAL_RCC_OscConfig+0x7c4>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f003 0203 	and.w	r2, r3, #3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d130      	bne.n	8003652 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fa:	3b01      	subs	r3, #1
 80035fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035fe:	429a      	cmp	r2, r3
 8003600:	d127      	bne.n	8003652 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800360c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800360e:	429a      	cmp	r2, r3
 8003610:	d11f      	bne.n	8003652 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800361c:	2a07      	cmp	r2, #7
 800361e:	bf14      	ite	ne
 8003620:	2201      	movne	r2, #1
 8003622:	2200      	moveq	r2, #0
 8003624:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003626:	4293      	cmp	r3, r2
 8003628:	d113      	bne.n	8003652 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003634:	085b      	lsrs	r3, r3, #1
 8003636:	3b01      	subs	r3, #1
 8003638:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800363a:	429a      	cmp	r2, r3
 800363c:	d109      	bne.n	8003652 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003648:	085b      	lsrs	r3, r3, #1
 800364a:	3b01      	subs	r3, #1
 800364c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800364e:	429a      	cmp	r2, r3
 8003650:	d06e      	beq.n	8003730 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	2b0c      	cmp	r3, #12
 8003656:	d069      	beq.n	800372c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003658:	4b64      	ldr	r3, [pc, #400]	; (80037ec <HAL_RCC_OscConfig+0x7c4>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d105      	bne.n	8003670 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003664:	4b61      	ldr	r3, [pc, #388]	; (80037ec <HAL_RCC_OscConfig+0x7c4>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e0b7      	b.n	80037e4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003674:	4b5d      	ldr	r3, [pc, #372]	; (80037ec <HAL_RCC_OscConfig+0x7c4>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a5c      	ldr	r2, [pc, #368]	; (80037ec <HAL_RCC_OscConfig+0x7c4>)
 800367a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800367e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003680:	f7fd fd9a 	bl	80011b8 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003688:	f7fd fd96 	bl	80011b8 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e0a4      	b.n	80037e4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800369a:	4b54      	ldr	r3, [pc, #336]	; (80037ec <HAL_RCC_OscConfig+0x7c4>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1f0      	bne.n	8003688 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036a6:	4b51      	ldr	r3, [pc, #324]	; (80037ec <HAL_RCC_OscConfig+0x7c4>)
 80036a8:	68da      	ldr	r2, [r3, #12]
 80036aa:	4b51      	ldr	r3, [pc, #324]	; (80037f0 <HAL_RCC_OscConfig+0x7c8>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80036b6:	3a01      	subs	r2, #1
 80036b8:	0112      	lsls	r2, r2, #4
 80036ba:	4311      	orrs	r1, r2
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036c0:	0212      	lsls	r2, r2, #8
 80036c2:	4311      	orrs	r1, r2
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036c8:	0852      	lsrs	r2, r2, #1
 80036ca:	3a01      	subs	r2, #1
 80036cc:	0552      	lsls	r2, r2, #21
 80036ce:	4311      	orrs	r1, r2
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80036d4:	0852      	lsrs	r2, r2, #1
 80036d6:	3a01      	subs	r2, #1
 80036d8:	0652      	lsls	r2, r2, #25
 80036da:	4311      	orrs	r1, r2
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036e0:	0912      	lsrs	r2, r2, #4
 80036e2:	0452      	lsls	r2, r2, #17
 80036e4:	430a      	orrs	r2, r1
 80036e6:	4941      	ldr	r1, [pc, #260]	; (80037ec <HAL_RCC_OscConfig+0x7c4>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80036ec:	4b3f      	ldr	r3, [pc, #252]	; (80037ec <HAL_RCC_OscConfig+0x7c4>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a3e      	ldr	r2, [pc, #248]	; (80037ec <HAL_RCC_OscConfig+0x7c4>)
 80036f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036f8:	4b3c      	ldr	r3, [pc, #240]	; (80037ec <HAL_RCC_OscConfig+0x7c4>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	4a3b      	ldr	r2, [pc, #236]	; (80037ec <HAL_RCC_OscConfig+0x7c4>)
 80036fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003702:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003704:	f7fd fd58 	bl	80011b8 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800370c:	f7fd fd54 	bl	80011b8 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e062      	b.n	80037e4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800371e:	4b33      	ldr	r3, [pc, #204]	; (80037ec <HAL_RCC_OscConfig+0x7c4>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0f0      	beq.n	800370c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800372a:	e05a      	b.n	80037e2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e059      	b.n	80037e4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003730:	4b2e      	ldr	r3, [pc, #184]	; (80037ec <HAL_RCC_OscConfig+0x7c4>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d152      	bne.n	80037e2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800373c:	4b2b      	ldr	r3, [pc, #172]	; (80037ec <HAL_RCC_OscConfig+0x7c4>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a2a      	ldr	r2, [pc, #168]	; (80037ec <HAL_RCC_OscConfig+0x7c4>)
 8003742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003746:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003748:	4b28      	ldr	r3, [pc, #160]	; (80037ec <HAL_RCC_OscConfig+0x7c4>)
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	4a27      	ldr	r2, [pc, #156]	; (80037ec <HAL_RCC_OscConfig+0x7c4>)
 800374e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003752:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003754:	f7fd fd30 	bl	80011b8 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800375c:	f7fd fd2c 	bl	80011b8 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e03a      	b.n	80037e4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800376e:	4b1f      	ldr	r3, [pc, #124]	; (80037ec <HAL_RCC_OscConfig+0x7c4>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0f0      	beq.n	800375c <HAL_RCC_OscConfig+0x734>
 800377a:	e032      	b.n	80037e2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	2b0c      	cmp	r3, #12
 8003780:	d02d      	beq.n	80037de <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003782:	4b1a      	ldr	r3, [pc, #104]	; (80037ec <HAL_RCC_OscConfig+0x7c4>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a19      	ldr	r2, [pc, #100]	; (80037ec <HAL_RCC_OscConfig+0x7c4>)
 8003788:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800378c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800378e:	4b17      	ldr	r3, [pc, #92]	; (80037ec <HAL_RCC_OscConfig+0x7c4>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d105      	bne.n	80037a6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800379a:	4b14      	ldr	r3, [pc, #80]	; (80037ec <HAL_RCC_OscConfig+0x7c4>)
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	4a13      	ldr	r2, [pc, #76]	; (80037ec <HAL_RCC_OscConfig+0x7c4>)
 80037a0:	f023 0303 	bic.w	r3, r3, #3
 80037a4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80037a6:	4b11      	ldr	r3, [pc, #68]	; (80037ec <HAL_RCC_OscConfig+0x7c4>)
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	4a10      	ldr	r2, [pc, #64]	; (80037ec <HAL_RCC_OscConfig+0x7c4>)
 80037ac:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80037b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b6:	f7fd fcff 	bl	80011b8 <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037be:	f7fd fcfb 	bl	80011b8 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e009      	b.n	80037e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037d0:	4b06      	ldr	r3, [pc, #24]	; (80037ec <HAL_RCC_OscConfig+0x7c4>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1f0      	bne.n	80037be <HAL_RCC_OscConfig+0x796>
 80037dc:	e001      	b.n	80037e2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e000      	b.n	80037e4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3720      	adds	r7, #32
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40021000 	.word	0x40021000
 80037f0:	f99d808c 	.word	0xf99d808c

080037f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e0c8      	b.n	800399a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003808:	4b66      	ldr	r3, [pc, #408]	; (80039a4 <HAL_RCC_ClockConfig+0x1b0>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	429a      	cmp	r2, r3
 8003814:	d910      	bls.n	8003838 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003816:	4b63      	ldr	r3, [pc, #396]	; (80039a4 <HAL_RCC_ClockConfig+0x1b0>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f023 0207 	bic.w	r2, r3, #7
 800381e:	4961      	ldr	r1, [pc, #388]	; (80039a4 <HAL_RCC_ClockConfig+0x1b0>)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	4313      	orrs	r3, r2
 8003824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003826:	4b5f      	ldr	r3, [pc, #380]	; (80039a4 <HAL_RCC_ClockConfig+0x1b0>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	429a      	cmp	r2, r3
 8003832:	d001      	beq.n	8003838 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e0b0      	b.n	800399a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	2b00      	cmp	r3, #0
 8003842:	d04c      	beq.n	80038de <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2b03      	cmp	r3, #3
 800384a:	d107      	bne.n	800385c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800384c:	4b56      	ldr	r3, [pc, #344]	; (80039a8 <HAL_RCC_ClockConfig+0x1b4>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d121      	bne.n	800389c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e09e      	b.n	800399a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	2b02      	cmp	r3, #2
 8003862:	d107      	bne.n	8003874 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003864:	4b50      	ldr	r3, [pc, #320]	; (80039a8 <HAL_RCC_ClockConfig+0x1b4>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d115      	bne.n	800389c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e092      	b.n	800399a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d107      	bne.n	800388c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800387c:	4b4a      	ldr	r3, [pc, #296]	; (80039a8 <HAL_RCC_ClockConfig+0x1b4>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d109      	bne.n	800389c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e086      	b.n	800399a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800388c:	4b46      	ldr	r3, [pc, #280]	; (80039a8 <HAL_RCC_ClockConfig+0x1b4>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003894:	2b00      	cmp	r3, #0
 8003896:	d101      	bne.n	800389c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e07e      	b.n	800399a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800389c:	4b42      	ldr	r3, [pc, #264]	; (80039a8 <HAL_RCC_ClockConfig+0x1b4>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f023 0203 	bic.w	r2, r3, #3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	493f      	ldr	r1, [pc, #252]	; (80039a8 <HAL_RCC_ClockConfig+0x1b4>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038ae:	f7fd fc83 	bl	80011b8 <HAL_GetTick>
 80038b2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b4:	e00a      	b.n	80038cc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038b6:	f7fd fc7f 	bl	80011b8 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e066      	b.n	800399a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038cc:	4b36      	ldr	r3, [pc, #216]	; (80039a8 <HAL_RCC_ClockConfig+0x1b4>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f003 020c 	and.w	r2, r3, #12
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	429a      	cmp	r2, r3
 80038dc:	d1eb      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d008      	beq.n	80038fc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ea:	4b2f      	ldr	r3, [pc, #188]	; (80039a8 <HAL_RCC_ClockConfig+0x1b4>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	492c      	ldr	r1, [pc, #176]	; (80039a8 <HAL_RCC_ClockConfig+0x1b4>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038fc:	4b29      	ldr	r3, [pc, #164]	; (80039a4 <HAL_RCC_ClockConfig+0x1b0>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	429a      	cmp	r2, r3
 8003908:	d210      	bcs.n	800392c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800390a:	4b26      	ldr	r3, [pc, #152]	; (80039a4 <HAL_RCC_ClockConfig+0x1b0>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f023 0207 	bic.w	r2, r3, #7
 8003912:	4924      	ldr	r1, [pc, #144]	; (80039a4 <HAL_RCC_ClockConfig+0x1b0>)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	4313      	orrs	r3, r2
 8003918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800391a:	4b22      	ldr	r3, [pc, #136]	; (80039a4 <HAL_RCC_ClockConfig+0x1b0>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0307 	and.w	r3, r3, #7
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	429a      	cmp	r2, r3
 8003926:	d001      	beq.n	800392c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e036      	b.n	800399a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b00      	cmp	r3, #0
 8003936:	d008      	beq.n	800394a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003938:	4b1b      	ldr	r3, [pc, #108]	; (80039a8 <HAL_RCC_ClockConfig+0x1b4>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	4918      	ldr	r1, [pc, #96]	; (80039a8 <HAL_RCC_ClockConfig+0x1b4>)
 8003946:	4313      	orrs	r3, r2
 8003948:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	2b00      	cmp	r3, #0
 8003954:	d009      	beq.n	800396a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003956:	4b14      	ldr	r3, [pc, #80]	; (80039a8 <HAL_RCC_ClockConfig+0x1b4>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	4910      	ldr	r1, [pc, #64]	; (80039a8 <HAL_RCC_ClockConfig+0x1b4>)
 8003966:	4313      	orrs	r3, r2
 8003968:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800396a:	f000 f825 	bl	80039b8 <HAL_RCC_GetSysClockFreq>
 800396e:	4602      	mov	r2, r0
 8003970:	4b0d      	ldr	r3, [pc, #52]	; (80039a8 <HAL_RCC_ClockConfig+0x1b4>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	091b      	lsrs	r3, r3, #4
 8003976:	f003 030f 	and.w	r3, r3, #15
 800397a:	490c      	ldr	r1, [pc, #48]	; (80039ac <HAL_RCC_ClockConfig+0x1b8>)
 800397c:	5ccb      	ldrb	r3, [r1, r3]
 800397e:	f003 031f 	and.w	r3, r3, #31
 8003982:	fa22 f303 	lsr.w	r3, r2, r3
 8003986:	4a0a      	ldr	r2, [pc, #40]	; (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800398a:	4b0a      	ldr	r3, [pc, #40]	; (80039b4 <HAL_RCC_ClockConfig+0x1c0>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f7fd fbc2 	bl	8001118 <HAL_InitTick>
 8003994:	4603      	mov	r3, r0
 8003996:	72fb      	strb	r3, [r7, #11]

  return status;
 8003998:	7afb      	ldrb	r3, [r7, #11]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40022000 	.word	0x40022000
 80039a8:	40021000 	.word	0x40021000
 80039ac:	08008984 	.word	0x08008984
 80039b0:	20000000 	.word	0x20000000
 80039b4:	20000004 	.word	0x20000004

080039b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b089      	sub	sp, #36	; 0x24
 80039bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	61fb      	str	r3, [r7, #28]
 80039c2:	2300      	movs	r3, #0
 80039c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039c6:	4b3e      	ldr	r3, [pc, #248]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x108>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 030c 	and.w	r3, r3, #12
 80039ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039d0:	4b3b      	ldr	r3, [pc, #236]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x108>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f003 0303 	and.w	r3, r3, #3
 80039d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d005      	beq.n	80039ec <HAL_RCC_GetSysClockFreq+0x34>
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	2b0c      	cmp	r3, #12
 80039e4:	d121      	bne.n	8003a2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d11e      	bne.n	8003a2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039ec:	4b34      	ldr	r3, [pc, #208]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x108>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0308 	and.w	r3, r3, #8
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d107      	bne.n	8003a08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039f8:	4b31      	ldr	r3, [pc, #196]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x108>)
 80039fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039fe:	0a1b      	lsrs	r3, r3, #8
 8003a00:	f003 030f 	and.w	r3, r3, #15
 8003a04:	61fb      	str	r3, [r7, #28]
 8003a06:	e005      	b.n	8003a14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a08:	4b2d      	ldr	r3, [pc, #180]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	091b      	lsrs	r3, r3, #4
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a14:	4a2b      	ldr	r2, [pc, #172]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10d      	bne.n	8003a40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a28:	e00a      	b.n	8003a40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	2b04      	cmp	r3, #4
 8003a2e:	d102      	bne.n	8003a36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a30:	4b25      	ldr	r3, [pc, #148]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a32:	61bb      	str	r3, [r7, #24]
 8003a34:	e004      	b.n	8003a40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	2b08      	cmp	r3, #8
 8003a3a:	d101      	bne.n	8003a40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a3c:	4b23      	ldr	r3, [pc, #140]	; (8003acc <HAL_RCC_GetSysClockFreq+0x114>)
 8003a3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	2b0c      	cmp	r3, #12
 8003a44:	d134      	bne.n	8003ab0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a46:	4b1e      	ldr	r3, [pc, #120]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d003      	beq.n	8003a5e <HAL_RCC_GetSysClockFreq+0xa6>
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	2b03      	cmp	r3, #3
 8003a5a:	d003      	beq.n	8003a64 <HAL_RCC_GetSysClockFreq+0xac>
 8003a5c:	e005      	b.n	8003a6a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a5e:	4b1a      	ldr	r3, [pc, #104]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a60:	617b      	str	r3, [r7, #20]
      break;
 8003a62:	e005      	b.n	8003a70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a64:	4b19      	ldr	r3, [pc, #100]	; (8003acc <HAL_RCC_GetSysClockFreq+0x114>)
 8003a66:	617b      	str	r3, [r7, #20]
      break;
 8003a68:	e002      	b.n	8003a70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	617b      	str	r3, [r7, #20]
      break;
 8003a6e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a70:	4b13      	ldr	r3, [pc, #76]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	091b      	lsrs	r3, r3, #4
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a7e:	4b10      	ldr	r3, [pc, #64]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	0a1b      	lsrs	r3, r3, #8
 8003a84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	fb02 f203 	mul.w	r2, r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a94:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a96:	4b0a      	ldr	r3, [pc, #40]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	0e5b      	lsrs	r3, r3, #25
 8003a9c:	f003 0303 	and.w	r3, r3, #3
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ab0:	69bb      	ldr	r3, [r7, #24]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3724      	adds	r7, #36	; 0x24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	0800899c 	.word	0x0800899c
 8003ac8:	00f42400 	.word	0x00f42400
 8003acc:	007a1200 	.word	0x007a1200

08003ad0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ad4:	4b03      	ldr	r3, [pc, #12]	; (8003ae4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	20000000 	.word	0x20000000

08003ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003aec:	f7ff fff0 	bl	8003ad0 <HAL_RCC_GetHCLKFreq>
 8003af0:	4602      	mov	r2, r0
 8003af2:	4b06      	ldr	r3, [pc, #24]	; (8003b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	0a1b      	lsrs	r3, r3, #8
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	4904      	ldr	r1, [pc, #16]	; (8003b10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003afe:	5ccb      	ldrb	r3, [r1, r3]
 8003b00:	f003 031f 	and.w	r3, r3, #31
 8003b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	08008994 	.word	0x08008994

08003b14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b18:	f7ff ffda 	bl	8003ad0 <HAL_RCC_GetHCLKFreq>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	0adb      	lsrs	r3, r3, #11
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	4904      	ldr	r1, [pc, #16]	; (8003b3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b2a:	5ccb      	ldrb	r3, [r1, r3]
 8003b2c:	f003 031f 	and.w	r3, r3, #31
 8003b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	08008994 	.word	0x08008994

08003b40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b48:	2300      	movs	r3, #0
 8003b4a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b4c:	4b2a      	ldr	r3, [pc, #168]	; (8003bf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d003      	beq.n	8003b60 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b58:	f7ff f936 	bl	8002dc8 <HAL_PWREx_GetVoltageRange>
 8003b5c:	6178      	str	r0, [r7, #20]
 8003b5e:	e014      	b.n	8003b8a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b60:	4b25      	ldr	r3, [pc, #148]	; (8003bf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b64:	4a24      	ldr	r2, [pc, #144]	; (8003bf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b6a:	6593      	str	r3, [r2, #88]	; 0x58
 8003b6c:	4b22      	ldr	r3, [pc, #136]	; (8003bf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b74:	60fb      	str	r3, [r7, #12]
 8003b76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b78:	f7ff f926 	bl	8002dc8 <HAL_PWREx_GetVoltageRange>
 8003b7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b7e:	4b1e      	ldr	r3, [pc, #120]	; (8003bf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b82:	4a1d      	ldr	r2, [pc, #116]	; (8003bf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b88:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b90:	d10b      	bne.n	8003baa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b80      	cmp	r3, #128	; 0x80
 8003b96:	d919      	bls.n	8003bcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2ba0      	cmp	r3, #160	; 0xa0
 8003b9c:	d902      	bls.n	8003ba4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	613b      	str	r3, [r7, #16]
 8003ba2:	e013      	b.n	8003bcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	613b      	str	r3, [r7, #16]
 8003ba8:	e010      	b.n	8003bcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b80      	cmp	r3, #128	; 0x80
 8003bae:	d902      	bls.n	8003bb6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	613b      	str	r3, [r7, #16]
 8003bb4:	e00a      	b.n	8003bcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b80      	cmp	r3, #128	; 0x80
 8003bba:	d102      	bne.n	8003bc2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	613b      	str	r3, [r7, #16]
 8003bc0:	e004      	b.n	8003bcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b70      	cmp	r3, #112	; 0x70
 8003bc6:	d101      	bne.n	8003bcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bc8:	2301      	movs	r3, #1
 8003bca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003bcc:	4b0b      	ldr	r3, [pc, #44]	; (8003bfc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f023 0207 	bic.w	r2, r3, #7
 8003bd4:	4909      	ldr	r1, [pc, #36]	; (8003bfc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003bdc:	4b07      	ldr	r3, [pc, #28]	; (8003bfc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0307 	and.w	r3, r3, #7
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d001      	beq.n	8003bee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e000      	b.n	8003bf0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	40022000 	.word	0x40022000

08003c00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c08:	2300      	movs	r3, #0
 8003c0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d041      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c20:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c24:	d02a      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003c26:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c2a:	d824      	bhi.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c30:	d008      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c36:	d81e      	bhi.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00a      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003c3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c40:	d010      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c42:	e018      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c44:	4b86      	ldr	r3, [pc, #536]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	4a85      	ldr	r2, [pc, #532]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c4e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c50:	e015      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	3304      	adds	r3, #4
 8003c56:	2100      	movs	r1, #0
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f000 facb 	bl	80041f4 <RCCEx_PLLSAI1_Config>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c62:	e00c      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	3320      	adds	r3, #32
 8003c68:	2100      	movs	r1, #0
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 fbb6 	bl	80043dc <RCCEx_PLLSAI2_Config>
 8003c70:	4603      	mov	r3, r0
 8003c72:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c74:	e003      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	74fb      	strb	r3, [r7, #19]
      break;
 8003c7a:	e000      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003c7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c7e:	7cfb      	ldrb	r3, [r7, #19]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10b      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c84:	4b76      	ldr	r3, [pc, #472]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c92:	4973      	ldr	r1, [pc, #460]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c9a:	e001      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c9c:	7cfb      	ldrb	r3, [r7, #19]
 8003c9e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d041      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cb0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003cb4:	d02a      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003cb6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003cba:	d824      	bhi.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003cbc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cc0:	d008      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003cc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cc6:	d81e      	bhi.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00a      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003ccc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cd0:	d010      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003cd2:	e018      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003cd4:	4b62      	ldr	r3, [pc, #392]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	4a61      	ldr	r2, [pc, #388]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cde:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ce0:	e015      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f000 fa83 	bl	80041f4 <RCCEx_PLLSAI1_Config>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003cf2:	e00c      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3320      	adds	r3, #32
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 fb6e 	bl	80043dc <RCCEx_PLLSAI2_Config>
 8003d00:	4603      	mov	r3, r0
 8003d02:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d04:	e003      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	74fb      	strb	r3, [r7, #19]
      break;
 8003d0a:	e000      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003d0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d0e:	7cfb      	ldrb	r3, [r7, #19]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10b      	bne.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d14:	4b52      	ldr	r3, [pc, #328]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d22:	494f      	ldr	r1, [pc, #316]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d2a:	e001      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d2c:	7cfb      	ldrb	r3, [r7, #19]
 8003d2e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 80a0 	beq.w	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d42:	4b47      	ldr	r3, [pc, #284]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e000      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003d52:	2300      	movs	r3, #0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00d      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d58:	4b41      	ldr	r3, [pc, #260]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5c:	4a40      	ldr	r2, [pc, #256]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d62:	6593      	str	r3, [r2, #88]	; 0x58
 8003d64:	4b3e      	ldr	r3, [pc, #248]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d6c:	60bb      	str	r3, [r7, #8]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d70:	2301      	movs	r3, #1
 8003d72:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d74:	4b3b      	ldr	r3, [pc, #236]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a3a      	ldr	r2, [pc, #232]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d80:	f7fd fa1a 	bl	80011b8 <HAL_GetTick>
 8003d84:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d86:	e009      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d88:	f7fd fa16 	bl	80011b8 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d902      	bls.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	74fb      	strb	r3, [r7, #19]
        break;
 8003d9a:	e005      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d9c:	4b31      	ldr	r3, [pc, #196]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0ef      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003da8:	7cfb      	ldrb	r3, [r7, #19]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d15c      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003dae:	4b2c      	ldr	r3, [pc, #176]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003db8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d01f      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d019      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003dcc:	4b24      	ldr	r3, [pc, #144]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dd6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dd8:	4b21      	ldr	r3, [pc, #132]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dde:	4a20      	ldr	r2, [pc, #128]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003de8:	4b1d      	ldr	r3, [pc, #116]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dee:	4a1c      	ldr	r2, [pc, #112]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003df0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003df4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003df8:	4a19      	ldr	r2, [pc, #100]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d016      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0a:	f7fd f9d5 	bl	80011b8 <HAL_GetTick>
 8003e0e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e10:	e00b      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e12:	f7fd f9d1 	bl	80011b8 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d902      	bls.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	74fb      	strb	r3, [r7, #19]
            break;
 8003e28:	e006      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e2a:	4b0d      	ldr	r3, [pc, #52]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0ec      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003e38:	7cfb      	ldrb	r3, [r7, #19]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10c      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e3e:	4b08      	ldr	r3, [pc, #32]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e4e:	4904      	ldr	r1, [pc, #16]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e56:	e009      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e58:	7cfb      	ldrb	r3, [r7, #19]
 8003e5a:	74bb      	strb	r3, [r7, #18]
 8003e5c:	e006      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003e5e:	bf00      	nop
 8003e60:	40021000 	.word	0x40021000
 8003e64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e68:	7cfb      	ldrb	r3, [r7, #19]
 8003e6a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e6c:	7c7b      	ldrb	r3, [r7, #17]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d105      	bne.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e72:	4b9e      	ldr	r3, [pc, #632]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e76:	4a9d      	ldr	r2, [pc, #628]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e7c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00a      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e8a:	4b98      	ldr	r3, [pc, #608]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e90:	f023 0203 	bic.w	r2, r3, #3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e98:	4994      	ldr	r1, [pc, #592]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00a      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003eac:	4b8f      	ldr	r3, [pc, #572]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb2:	f023 020c 	bic.w	r2, r3, #12
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eba:	498c      	ldr	r1, [pc, #560]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0304 	and.w	r3, r3, #4
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00a      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ece:	4b87      	ldr	r3, [pc, #540]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003edc:	4983      	ldr	r1, [pc, #524]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0308 	and.w	r3, r3, #8
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00a      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ef0:	4b7e      	ldr	r3, [pc, #504]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efe:	497b      	ldr	r1, [pc, #492]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0310 	and.w	r3, r3, #16
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00a      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f12:	4b76      	ldr	r3, [pc, #472]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f20:	4972      	ldr	r1, [pc, #456]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0320 	and.w	r3, r3, #32
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00a      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f34:	4b6d      	ldr	r3, [pc, #436]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f42:	496a      	ldr	r1, [pc, #424]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00a      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f56:	4b65      	ldr	r3, [pc, #404]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f64:	4961      	ldr	r1, [pc, #388]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00a      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f78:	4b5c      	ldr	r3, [pc, #368]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f86:	4959      	ldr	r1, [pc, #356]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00a      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f9a:	4b54      	ldr	r3, [pc, #336]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fa8:	4950      	ldr	r1, [pc, #320]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00a      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fbc:	4b4b      	ldr	r3, [pc, #300]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fca:	4948      	ldr	r1, [pc, #288]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00a      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fde:	4b43      	ldr	r3, [pc, #268]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fec:	493f      	ldr	r1, [pc, #252]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d028      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004000:	4b3a      	ldr	r3, [pc, #232]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004006:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800400e:	4937      	ldr	r1, [pc, #220]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004010:	4313      	orrs	r3, r2
 8004012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800401a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800401e:	d106      	bne.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004020:	4b32      	ldr	r3, [pc, #200]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	4a31      	ldr	r2, [pc, #196]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004026:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800402a:	60d3      	str	r3, [r2, #12]
 800402c:	e011      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004032:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004036:	d10c      	bne.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	3304      	adds	r3, #4
 800403c:	2101      	movs	r1, #1
 800403e:	4618      	mov	r0, r3
 8004040:	f000 f8d8 	bl	80041f4 <RCCEx_PLLSAI1_Config>
 8004044:	4603      	mov	r3, r0
 8004046:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004048:	7cfb      	ldrb	r3, [r7, #19]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800404e:	7cfb      	ldrb	r3, [r7, #19]
 8004050:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d028      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800405e:	4b23      	ldr	r3, [pc, #140]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004064:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406c:	491f      	ldr	r1, [pc, #124]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800406e:	4313      	orrs	r3, r2
 8004070:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004078:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800407c:	d106      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800407e:	4b1b      	ldr	r3, [pc, #108]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	4a1a      	ldr	r2, [pc, #104]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004084:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004088:	60d3      	str	r3, [r2, #12]
 800408a:	e011      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004090:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004094:	d10c      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3304      	adds	r3, #4
 800409a:	2101      	movs	r1, #1
 800409c:	4618      	mov	r0, r3
 800409e:	f000 f8a9 	bl	80041f4 <RCCEx_PLLSAI1_Config>
 80040a2:	4603      	mov	r3, r0
 80040a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040a6:	7cfb      	ldrb	r3, [r7, #19]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80040ac:	7cfb      	ldrb	r3, [r7, #19]
 80040ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d02b      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040bc:	4b0b      	ldr	r3, [pc, #44]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ca:	4908      	ldr	r1, [pc, #32]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040da:	d109      	bne.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040dc:	4b03      	ldr	r3, [pc, #12]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	4a02      	ldr	r2, [pc, #8]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040e6:	60d3      	str	r3, [r2, #12]
 80040e8:	e014      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80040ea:	bf00      	nop
 80040ec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040f8:	d10c      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	3304      	adds	r3, #4
 80040fe:	2101      	movs	r1, #1
 8004100:	4618      	mov	r0, r3
 8004102:	f000 f877 	bl	80041f4 <RCCEx_PLLSAI1_Config>
 8004106:	4603      	mov	r3, r0
 8004108:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800410a:	7cfb      	ldrb	r3, [r7, #19]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004110:	7cfb      	ldrb	r3, [r7, #19]
 8004112:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d02f      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004120:	4b2b      	ldr	r3, [pc, #172]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004126:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800412e:	4928      	ldr	r1, [pc, #160]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004130:	4313      	orrs	r3, r2
 8004132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800413a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800413e:	d10d      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3304      	adds	r3, #4
 8004144:	2102      	movs	r1, #2
 8004146:	4618      	mov	r0, r3
 8004148:	f000 f854 	bl	80041f4 <RCCEx_PLLSAI1_Config>
 800414c:	4603      	mov	r3, r0
 800414e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004150:	7cfb      	ldrb	r3, [r7, #19]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d014      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004156:	7cfb      	ldrb	r3, [r7, #19]
 8004158:	74bb      	strb	r3, [r7, #18]
 800415a:	e011      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004160:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004164:	d10c      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	3320      	adds	r3, #32
 800416a:	2102      	movs	r1, #2
 800416c:	4618      	mov	r0, r3
 800416e:	f000 f935 	bl	80043dc <RCCEx_PLLSAI2_Config>
 8004172:	4603      	mov	r3, r0
 8004174:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004176:	7cfb      	ldrb	r3, [r7, #19]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800417c:	7cfb      	ldrb	r3, [r7, #19]
 800417e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00a      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800418c:	4b10      	ldr	r3, [pc, #64]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800418e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004192:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800419a:	490d      	ldr	r1, [pc, #52]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800419c:	4313      	orrs	r3, r2
 800419e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00b      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041ae:	4b08      	ldr	r3, [pc, #32]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041be:	4904      	ldr	r1, [pc, #16]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80041c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3718      	adds	r7, #24
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	40021000 	.word	0x40021000

080041d4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80041d8:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a04      	ldr	r2, [pc, #16]	; (80041f0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80041de:	f043 0304 	orr.w	r3, r3, #4
 80041e2:	6013      	str	r3, [r2, #0]
}
 80041e4:	bf00      	nop
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	40021000 	.word	0x40021000

080041f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041fe:	2300      	movs	r3, #0
 8004200:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004202:	4b75      	ldr	r3, [pc, #468]	; (80043d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d018      	beq.n	8004240 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800420e:	4b72      	ldr	r3, [pc, #456]	; (80043d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f003 0203 	and.w	r2, r3, #3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d10d      	bne.n	800423a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
       ||
 8004222:	2b00      	cmp	r3, #0
 8004224:	d009      	beq.n	800423a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004226:	4b6c      	ldr	r3, [pc, #432]	; (80043d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	091b      	lsrs	r3, r3, #4
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	1c5a      	adds	r2, r3, #1
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
       ||
 8004236:	429a      	cmp	r2, r3
 8004238:	d047      	beq.n	80042ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	73fb      	strb	r3, [r7, #15]
 800423e:	e044      	b.n	80042ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b03      	cmp	r3, #3
 8004246:	d018      	beq.n	800427a <RCCEx_PLLSAI1_Config+0x86>
 8004248:	2b03      	cmp	r3, #3
 800424a:	d825      	bhi.n	8004298 <RCCEx_PLLSAI1_Config+0xa4>
 800424c:	2b01      	cmp	r3, #1
 800424e:	d002      	beq.n	8004256 <RCCEx_PLLSAI1_Config+0x62>
 8004250:	2b02      	cmp	r3, #2
 8004252:	d009      	beq.n	8004268 <RCCEx_PLLSAI1_Config+0x74>
 8004254:	e020      	b.n	8004298 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004256:	4b60      	ldr	r3, [pc, #384]	; (80043d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d11d      	bne.n	800429e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004266:	e01a      	b.n	800429e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004268:	4b5b      	ldr	r3, [pc, #364]	; (80043d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004270:	2b00      	cmp	r3, #0
 8004272:	d116      	bne.n	80042a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004278:	e013      	b.n	80042a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800427a:	4b57      	ldr	r3, [pc, #348]	; (80043d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10f      	bne.n	80042a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004286:	4b54      	ldr	r3, [pc, #336]	; (80043d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d109      	bne.n	80042a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004296:	e006      	b.n	80042a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	73fb      	strb	r3, [r7, #15]
      break;
 800429c:	e004      	b.n	80042a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800429e:	bf00      	nop
 80042a0:	e002      	b.n	80042a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042a2:	bf00      	nop
 80042a4:	e000      	b.n	80042a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80042a8:	7bfb      	ldrb	r3, [r7, #15]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10d      	bne.n	80042ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042ae:	4b4a      	ldr	r3, [pc, #296]	; (80043d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6819      	ldr	r1, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	3b01      	subs	r3, #1
 80042c0:	011b      	lsls	r3, r3, #4
 80042c2:	430b      	orrs	r3, r1
 80042c4:	4944      	ldr	r1, [pc, #272]	; (80043d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80042ca:	7bfb      	ldrb	r3, [r7, #15]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d17d      	bne.n	80043cc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80042d0:	4b41      	ldr	r3, [pc, #260]	; (80043d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a40      	ldr	r2, [pc, #256]	; (80043d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042dc:	f7fc ff6c 	bl	80011b8 <HAL_GetTick>
 80042e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042e2:	e009      	b.n	80042f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042e4:	f7fc ff68 	bl	80011b8 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d902      	bls.n	80042f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	73fb      	strb	r3, [r7, #15]
        break;
 80042f6:	e005      	b.n	8004304 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042f8:	4b37      	ldr	r3, [pc, #220]	; (80043d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1ef      	bne.n	80042e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004304:	7bfb      	ldrb	r3, [r7, #15]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d160      	bne.n	80043cc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d111      	bne.n	8004334 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004310:	4b31      	ldr	r3, [pc, #196]	; (80043d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	6892      	ldr	r2, [r2, #8]
 8004320:	0211      	lsls	r1, r2, #8
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	68d2      	ldr	r2, [r2, #12]
 8004326:	0912      	lsrs	r2, r2, #4
 8004328:	0452      	lsls	r2, r2, #17
 800432a:	430a      	orrs	r2, r1
 800432c:	492a      	ldr	r1, [pc, #168]	; (80043d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800432e:	4313      	orrs	r3, r2
 8004330:	610b      	str	r3, [r1, #16]
 8004332:	e027      	b.n	8004384 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d112      	bne.n	8004360 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800433a:	4b27      	ldr	r3, [pc, #156]	; (80043d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004342:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	6892      	ldr	r2, [r2, #8]
 800434a:	0211      	lsls	r1, r2, #8
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	6912      	ldr	r2, [r2, #16]
 8004350:	0852      	lsrs	r2, r2, #1
 8004352:	3a01      	subs	r2, #1
 8004354:	0552      	lsls	r2, r2, #21
 8004356:	430a      	orrs	r2, r1
 8004358:	491f      	ldr	r1, [pc, #124]	; (80043d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800435a:	4313      	orrs	r3, r2
 800435c:	610b      	str	r3, [r1, #16]
 800435e:	e011      	b.n	8004384 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004360:	4b1d      	ldr	r3, [pc, #116]	; (80043d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004368:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6892      	ldr	r2, [r2, #8]
 8004370:	0211      	lsls	r1, r2, #8
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	6952      	ldr	r2, [r2, #20]
 8004376:	0852      	lsrs	r2, r2, #1
 8004378:	3a01      	subs	r2, #1
 800437a:	0652      	lsls	r2, r2, #25
 800437c:	430a      	orrs	r2, r1
 800437e:	4916      	ldr	r1, [pc, #88]	; (80043d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004380:	4313      	orrs	r3, r2
 8004382:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004384:	4b14      	ldr	r3, [pc, #80]	; (80043d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a13      	ldr	r2, [pc, #76]	; (80043d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800438a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800438e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004390:	f7fc ff12 	bl	80011b8 <HAL_GetTick>
 8004394:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004396:	e009      	b.n	80043ac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004398:	f7fc ff0e 	bl	80011b8 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d902      	bls.n	80043ac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	73fb      	strb	r3, [r7, #15]
          break;
 80043aa:	e005      	b.n	80043b8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043ac:	4b0a      	ldr	r3, [pc, #40]	; (80043d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0ef      	beq.n	8004398 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80043b8:	7bfb      	ldrb	r3, [r7, #15]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d106      	bne.n	80043cc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80043be:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043c0:	691a      	ldr	r2, [r3, #16]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	4904      	ldr	r1, [pc, #16]	; (80043d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80043cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	40021000 	.word	0x40021000

080043dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043e6:	2300      	movs	r3, #0
 80043e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043ea:	4b6a      	ldr	r3, [pc, #424]	; (8004594 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d018      	beq.n	8004428 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80043f6:	4b67      	ldr	r3, [pc, #412]	; (8004594 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	f003 0203 	and.w	r2, r3, #3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	429a      	cmp	r2, r3
 8004404:	d10d      	bne.n	8004422 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
       ||
 800440a:	2b00      	cmp	r3, #0
 800440c:	d009      	beq.n	8004422 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800440e:	4b61      	ldr	r3, [pc, #388]	; (8004594 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	091b      	lsrs	r3, r3, #4
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	1c5a      	adds	r2, r3, #1
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
       ||
 800441e:	429a      	cmp	r2, r3
 8004420:	d047      	beq.n	80044b2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	73fb      	strb	r3, [r7, #15]
 8004426:	e044      	b.n	80044b2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2b03      	cmp	r3, #3
 800442e:	d018      	beq.n	8004462 <RCCEx_PLLSAI2_Config+0x86>
 8004430:	2b03      	cmp	r3, #3
 8004432:	d825      	bhi.n	8004480 <RCCEx_PLLSAI2_Config+0xa4>
 8004434:	2b01      	cmp	r3, #1
 8004436:	d002      	beq.n	800443e <RCCEx_PLLSAI2_Config+0x62>
 8004438:	2b02      	cmp	r3, #2
 800443a:	d009      	beq.n	8004450 <RCCEx_PLLSAI2_Config+0x74>
 800443c:	e020      	b.n	8004480 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800443e:	4b55      	ldr	r3, [pc, #340]	; (8004594 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d11d      	bne.n	8004486 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800444e:	e01a      	b.n	8004486 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004450:	4b50      	ldr	r3, [pc, #320]	; (8004594 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004458:	2b00      	cmp	r3, #0
 800445a:	d116      	bne.n	800448a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004460:	e013      	b.n	800448a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004462:	4b4c      	ldr	r3, [pc, #304]	; (8004594 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10f      	bne.n	800448e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800446e:	4b49      	ldr	r3, [pc, #292]	; (8004594 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d109      	bne.n	800448e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800447e:	e006      	b.n	800448e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	73fb      	strb	r3, [r7, #15]
      break;
 8004484:	e004      	b.n	8004490 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004486:	bf00      	nop
 8004488:	e002      	b.n	8004490 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800448a:	bf00      	nop
 800448c:	e000      	b.n	8004490 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800448e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004490:	7bfb      	ldrb	r3, [r7, #15]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10d      	bne.n	80044b2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004496:	4b3f      	ldr	r3, [pc, #252]	; (8004594 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6819      	ldr	r1, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	3b01      	subs	r3, #1
 80044a8:	011b      	lsls	r3, r3, #4
 80044aa:	430b      	orrs	r3, r1
 80044ac:	4939      	ldr	r1, [pc, #228]	; (8004594 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044b2:	7bfb      	ldrb	r3, [r7, #15]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d167      	bne.n	8004588 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80044b8:	4b36      	ldr	r3, [pc, #216]	; (8004594 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a35      	ldr	r2, [pc, #212]	; (8004594 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044c4:	f7fc fe78 	bl	80011b8 <HAL_GetTick>
 80044c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044ca:	e009      	b.n	80044e0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044cc:	f7fc fe74 	bl	80011b8 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d902      	bls.n	80044e0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	73fb      	strb	r3, [r7, #15]
        break;
 80044de:	e005      	b.n	80044ec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044e0:	4b2c      	ldr	r3, [pc, #176]	; (8004594 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1ef      	bne.n	80044cc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80044ec:	7bfb      	ldrb	r3, [r7, #15]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d14a      	bne.n	8004588 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d111      	bne.n	800451c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044f8:	4b26      	ldr	r3, [pc, #152]	; (8004594 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	6892      	ldr	r2, [r2, #8]
 8004508:	0211      	lsls	r1, r2, #8
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	68d2      	ldr	r2, [r2, #12]
 800450e:	0912      	lsrs	r2, r2, #4
 8004510:	0452      	lsls	r2, r2, #17
 8004512:	430a      	orrs	r2, r1
 8004514:	491f      	ldr	r1, [pc, #124]	; (8004594 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004516:	4313      	orrs	r3, r2
 8004518:	614b      	str	r3, [r1, #20]
 800451a:	e011      	b.n	8004540 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800451c:	4b1d      	ldr	r3, [pc, #116]	; (8004594 <RCCEx_PLLSAI2_Config+0x1b8>)
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004524:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	6892      	ldr	r2, [r2, #8]
 800452c:	0211      	lsls	r1, r2, #8
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6912      	ldr	r2, [r2, #16]
 8004532:	0852      	lsrs	r2, r2, #1
 8004534:	3a01      	subs	r2, #1
 8004536:	0652      	lsls	r2, r2, #25
 8004538:	430a      	orrs	r2, r1
 800453a:	4916      	ldr	r1, [pc, #88]	; (8004594 <RCCEx_PLLSAI2_Config+0x1b8>)
 800453c:	4313      	orrs	r3, r2
 800453e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004540:	4b14      	ldr	r3, [pc, #80]	; (8004594 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a13      	ldr	r2, [pc, #76]	; (8004594 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800454a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800454c:	f7fc fe34 	bl	80011b8 <HAL_GetTick>
 8004550:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004552:	e009      	b.n	8004568 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004554:	f7fc fe30 	bl	80011b8 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d902      	bls.n	8004568 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	73fb      	strb	r3, [r7, #15]
          break;
 8004566:	e005      	b.n	8004574 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004568:	4b0a      	ldr	r3, [pc, #40]	; (8004594 <RCCEx_PLLSAI2_Config+0x1b8>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0ef      	beq.n	8004554 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004574:	7bfb      	ldrb	r3, [r7, #15]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d106      	bne.n	8004588 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800457a:	4b06      	ldr	r3, [pc, #24]	; (8004594 <RCCEx_PLLSAI2_Config+0x1b8>)
 800457c:	695a      	ldr	r2, [r3, #20]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	4904      	ldr	r1, [pc, #16]	; (8004594 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004584:	4313      	orrs	r3, r2
 8004586:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004588:	7bfb      	ldrb	r3, [r7, #15]
}
 800458a:	4618      	mov	r0, r3
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	40021000 	.word	0x40021000

08004598 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e095      	b.n	80046d6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d108      	bne.n	80045c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ba:	d009      	beq.n	80045d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	61da      	str	r2, [r3, #28]
 80045c2:	e005      	b.n	80045d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d106      	bne.n	80045f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7fc fc08 	bl	8000e00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004606:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004610:	d902      	bls.n	8004618 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004612:	2300      	movs	r3, #0
 8004614:	60fb      	str	r3, [r7, #12]
 8004616:	e002      	b.n	800461e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800461c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004626:	d007      	beq.n	8004638 <HAL_SPI_Init+0xa0>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004630:	d002      	beq.n	8004638 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004648:	431a      	orrs	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	431a      	orrs	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	431a      	orrs	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004666:	431a      	orrs	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	69db      	ldr	r3, [r3, #28]
 800466c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004670:	431a      	orrs	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467a:	ea42 0103 	orr.w	r1, r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004682:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	430a      	orrs	r2, r1
 800468c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	0c1b      	lsrs	r3, r3, #16
 8004694:	f003 0204 	and.w	r2, r3, #4
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	f003 0310 	and.w	r3, r3, #16
 80046a0:	431a      	orrs	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a6:	f003 0308 	and.w	r3, r3, #8
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80046b4:	ea42 0103 	orr.w	r1, r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b082      	sub	sp, #8
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e040      	b.n	8004772 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d106      	bne.n	8004706 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f7fc fbc1 	bl	8000e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2224      	movs	r2, #36	; 0x24
 800470a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 0201 	bic.w	r2, r2, #1
 800471a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 f82d 	bl	800477c <UART_SetConfig>
 8004722:	4603      	mov	r3, r0
 8004724:	2b01      	cmp	r3, #1
 8004726:	d101      	bne.n	800472c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e022      	b.n	8004772 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004730:	2b00      	cmp	r3, #0
 8004732:	d002      	beq.n	800473a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 faab 	bl	8004c90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004748:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004758:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f042 0201 	orr.w	r2, r2, #1
 8004768:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 fb32 	bl	8004dd4 <UART_CheckIdleState>
 8004770:	4603      	mov	r3, r0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
	...

0800477c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800477c:	b5b0      	push	{r4, r5, r7, lr}
 800477e:	b088      	sub	sp, #32
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004784:	2300      	movs	r3, #0
 8004786:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	431a      	orrs	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	69db      	ldr	r3, [r3, #28]
 800479c:	4313      	orrs	r3, r2
 800479e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	4bad      	ldr	r3, [pc, #692]	; (8004a5c <UART_SetConfig+0x2e0>)
 80047a8:	4013      	ands	r3, r2
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	6812      	ldr	r2, [r2, #0]
 80047ae:	69f9      	ldr	r1, [r7, #28]
 80047b0:	430b      	orrs	r3, r1
 80047b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68da      	ldr	r2, [r3, #12]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4aa2      	ldr	r2, [pc, #648]	; (8004a60 <UART_SetConfig+0x2e4>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d004      	beq.n	80047e4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	69fa      	ldr	r2, [r7, #28]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	69fa      	ldr	r2, [r7, #28]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a99      	ldr	r2, [pc, #612]	; (8004a64 <UART_SetConfig+0x2e8>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d121      	bne.n	8004846 <UART_SetConfig+0xca>
 8004802:	4b99      	ldr	r3, [pc, #612]	; (8004a68 <UART_SetConfig+0x2ec>)
 8004804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004808:	f003 0303 	and.w	r3, r3, #3
 800480c:	2b03      	cmp	r3, #3
 800480e:	d817      	bhi.n	8004840 <UART_SetConfig+0xc4>
 8004810:	a201      	add	r2, pc, #4	; (adr r2, 8004818 <UART_SetConfig+0x9c>)
 8004812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004816:	bf00      	nop
 8004818:	08004829 	.word	0x08004829
 800481c:	08004835 	.word	0x08004835
 8004820:	0800482f 	.word	0x0800482f
 8004824:	0800483b 	.word	0x0800483b
 8004828:	2301      	movs	r3, #1
 800482a:	76fb      	strb	r3, [r7, #27]
 800482c:	e0e7      	b.n	80049fe <UART_SetConfig+0x282>
 800482e:	2302      	movs	r3, #2
 8004830:	76fb      	strb	r3, [r7, #27]
 8004832:	e0e4      	b.n	80049fe <UART_SetConfig+0x282>
 8004834:	2304      	movs	r3, #4
 8004836:	76fb      	strb	r3, [r7, #27]
 8004838:	e0e1      	b.n	80049fe <UART_SetConfig+0x282>
 800483a:	2308      	movs	r3, #8
 800483c:	76fb      	strb	r3, [r7, #27]
 800483e:	e0de      	b.n	80049fe <UART_SetConfig+0x282>
 8004840:	2310      	movs	r3, #16
 8004842:	76fb      	strb	r3, [r7, #27]
 8004844:	e0db      	b.n	80049fe <UART_SetConfig+0x282>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a88      	ldr	r2, [pc, #544]	; (8004a6c <UART_SetConfig+0x2f0>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d132      	bne.n	80048b6 <UART_SetConfig+0x13a>
 8004850:	4b85      	ldr	r3, [pc, #532]	; (8004a68 <UART_SetConfig+0x2ec>)
 8004852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004856:	f003 030c 	and.w	r3, r3, #12
 800485a:	2b0c      	cmp	r3, #12
 800485c:	d828      	bhi.n	80048b0 <UART_SetConfig+0x134>
 800485e:	a201      	add	r2, pc, #4	; (adr r2, 8004864 <UART_SetConfig+0xe8>)
 8004860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004864:	08004899 	.word	0x08004899
 8004868:	080048b1 	.word	0x080048b1
 800486c:	080048b1 	.word	0x080048b1
 8004870:	080048b1 	.word	0x080048b1
 8004874:	080048a5 	.word	0x080048a5
 8004878:	080048b1 	.word	0x080048b1
 800487c:	080048b1 	.word	0x080048b1
 8004880:	080048b1 	.word	0x080048b1
 8004884:	0800489f 	.word	0x0800489f
 8004888:	080048b1 	.word	0x080048b1
 800488c:	080048b1 	.word	0x080048b1
 8004890:	080048b1 	.word	0x080048b1
 8004894:	080048ab 	.word	0x080048ab
 8004898:	2300      	movs	r3, #0
 800489a:	76fb      	strb	r3, [r7, #27]
 800489c:	e0af      	b.n	80049fe <UART_SetConfig+0x282>
 800489e:	2302      	movs	r3, #2
 80048a0:	76fb      	strb	r3, [r7, #27]
 80048a2:	e0ac      	b.n	80049fe <UART_SetConfig+0x282>
 80048a4:	2304      	movs	r3, #4
 80048a6:	76fb      	strb	r3, [r7, #27]
 80048a8:	e0a9      	b.n	80049fe <UART_SetConfig+0x282>
 80048aa:	2308      	movs	r3, #8
 80048ac:	76fb      	strb	r3, [r7, #27]
 80048ae:	e0a6      	b.n	80049fe <UART_SetConfig+0x282>
 80048b0:	2310      	movs	r3, #16
 80048b2:	76fb      	strb	r3, [r7, #27]
 80048b4:	e0a3      	b.n	80049fe <UART_SetConfig+0x282>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a6d      	ldr	r2, [pc, #436]	; (8004a70 <UART_SetConfig+0x2f4>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d120      	bne.n	8004902 <UART_SetConfig+0x186>
 80048c0:	4b69      	ldr	r3, [pc, #420]	; (8004a68 <UART_SetConfig+0x2ec>)
 80048c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80048ca:	2b30      	cmp	r3, #48	; 0x30
 80048cc:	d013      	beq.n	80048f6 <UART_SetConfig+0x17a>
 80048ce:	2b30      	cmp	r3, #48	; 0x30
 80048d0:	d814      	bhi.n	80048fc <UART_SetConfig+0x180>
 80048d2:	2b20      	cmp	r3, #32
 80048d4:	d009      	beq.n	80048ea <UART_SetConfig+0x16e>
 80048d6:	2b20      	cmp	r3, #32
 80048d8:	d810      	bhi.n	80048fc <UART_SetConfig+0x180>
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d002      	beq.n	80048e4 <UART_SetConfig+0x168>
 80048de:	2b10      	cmp	r3, #16
 80048e0:	d006      	beq.n	80048f0 <UART_SetConfig+0x174>
 80048e2:	e00b      	b.n	80048fc <UART_SetConfig+0x180>
 80048e4:	2300      	movs	r3, #0
 80048e6:	76fb      	strb	r3, [r7, #27]
 80048e8:	e089      	b.n	80049fe <UART_SetConfig+0x282>
 80048ea:	2302      	movs	r3, #2
 80048ec:	76fb      	strb	r3, [r7, #27]
 80048ee:	e086      	b.n	80049fe <UART_SetConfig+0x282>
 80048f0:	2304      	movs	r3, #4
 80048f2:	76fb      	strb	r3, [r7, #27]
 80048f4:	e083      	b.n	80049fe <UART_SetConfig+0x282>
 80048f6:	2308      	movs	r3, #8
 80048f8:	76fb      	strb	r3, [r7, #27]
 80048fa:	e080      	b.n	80049fe <UART_SetConfig+0x282>
 80048fc:	2310      	movs	r3, #16
 80048fe:	76fb      	strb	r3, [r7, #27]
 8004900:	e07d      	b.n	80049fe <UART_SetConfig+0x282>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a5b      	ldr	r2, [pc, #364]	; (8004a74 <UART_SetConfig+0x2f8>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d120      	bne.n	800494e <UART_SetConfig+0x1d2>
 800490c:	4b56      	ldr	r3, [pc, #344]	; (8004a68 <UART_SetConfig+0x2ec>)
 800490e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004912:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004916:	2bc0      	cmp	r3, #192	; 0xc0
 8004918:	d013      	beq.n	8004942 <UART_SetConfig+0x1c6>
 800491a:	2bc0      	cmp	r3, #192	; 0xc0
 800491c:	d814      	bhi.n	8004948 <UART_SetConfig+0x1cc>
 800491e:	2b80      	cmp	r3, #128	; 0x80
 8004920:	d009      	beq.n	8004936 <UART_SetConfig+0x1ba>
 8004922:	2b80      	cmp	r3, #128	; 0x80
 8004924:	d810      	bhi.n	8004948 <UART_SetConfig+0x1cc>
 8004926:	2b00      	cmp	r3, #0
 8004928:	d002      	beq.n	8004930 <UART_SetConfig+0x1b4>
 800492a:	2b40      	cmp	r3, #64	; 0x40
 800492c:	d006      	beq.n	800493c <UART_SetConfig+0x1c0>
 800492e:	e00b      	b.n	8004948 <UART_SetConfig+0x1cc>
 8004930:	2300      	movs	r3, #0
 8004932:	76fb      	strb	r3, [r7, #27]
 8004934:	e063      	b.n	80049fe <UART_SetConfig+0x282>
 8004936:	2302      	movs	r3, #2
 8004938:	76fb      	strb	r3, [r7, #27]
 800493a:	e060      	b.n	80049fe <UART_SetConfig+0x282>
 800493c:	2304      	movs	r3, #4
 800493e:	76fb      	strb	r3, [r7, #27]
 8004940:	e05d      	b.n	80049fe <UART_SetConfig+0x282>
 8004942:	2308      	movs	r3, #8
 8004944:	76fb      	strb	r3, [r7, #27]
 8004946:	e05a      	b.n	80049fe <UART_SetConfig+0x282>
 8004948:	2310      	movs	r3, #16
 800494a:	76fb      	strb	r3, [r7, #27]
 800494c:	e057      	b.n	80049fe <UART_SetConfig+0x282>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a49      	ldr	r2, [pc, #292]	; (8004a78 <UART_SetConfig+0x2fc>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d125      	bne.n	80049a4 <UART_SetConfig+0x228>
 8004958:	4b43      	ldr	r3, [pc, #268]	; (8004a68 <UART_SetConfig+0x2ec>)
 800495a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800495e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004962:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004966:	d017      	beq.n	8004998 <UART_SetConfig+0x21c>
 8004968:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800496c:	d817      	bhi.n	800499e <UART_SetConfig+0x222>
 800496e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004972:	d00b      	beq.n	800498c <UART_SetConfig+0x210>
 8004974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004978:	d811      	bhi.n	800499e <UART_SetConfig+0x222>
 800497a:	2b00      	cmp	r3, #0
 800497c:	d003      	beq.n	8004986 <UART_SetConfig+0x20a>
 800497e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004982:	d006      	beq.n	8004992 <UART_SetConfig+0x216>
 8004984:	e00b      	b.n	800499e <UART_SetConfig+0x222>
 8004986:	2300      	movs	r3, #0
 8004988:	76fb      	strb	r3, [r7, #27]
 800498a:	e038      	b.n	80049fe <UART_SetConfig+0x282>
 800498c:	2302      	movs	r3, #2
 800498e:	76fb      	strb	r3, [r7, #27]
 8004990:	e035      	b.n	80049fe <UART_SetConfig+0x282>
 8004992:	2304      	movs	r3, #4
 8004994:	76fb      	strb	r3, [r7, #27]
 8004996:	e032      	b.n	80049fe <UART_SetConfig+0x282>
 8004998:	2308      	movs	r3, #8
 800499a:	76fb      	strb	r3, [r7, #27]
 800499c:	e02f      	b.n	80049fe <UART_SetConfig+0x282>
 800499e:	2310      	movs	r3, #16
 80049a0:	76fb      	strb	r3, [r7, #27]
 80049a2:	e02c      	b.n	80049fe <UART_SetConfig+0x282>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a2d      	ldr	r2, [pc, #180]	; (8004a60 <UART_SetConfig+0x2e4>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d125      	bne.n	80049fa <UART_SetConfig+0x27e>
 80049ae:	4b2e      	ldr	r3, [pc, #184]	; (8004a68 <UART_SetConfig+0x2ec>)
 80049b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049bc:	d017      	beq.n	80049ee <UART_SetConfig+0x272>
 80049be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049c2:	d817      	bhi.n	80049f4 <UART_SetConfig+0x278>
 80049c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049c8:	d00b      	beq.n	80049e2 <UART_SetConfig+0x266>
 80049ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ce:	d811      	bhi.n	80049f4 <UART_SetConfig+0x278>
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d003      	beq.n	80049dc <UART_SetConfig+0x260>
 80049d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049d8:	d006      	beq.n	80049e8 <UART_SetConfig+0x26c>
 80049da:	e00b      	b.n	80049f4 <UART_SetConfig+0x278>
 80049dc:	2300      	movs	r3, #0
 80049de:	76fb      	strb	r3, [r7, #27]
 80049e0:	e00d      	b.n	80049fe <UART_SetConfig+0x282>
 80049e2:	2302      	movs	r3, #2
 80049e4:	76fb      	strb	r3, [r7, #27]
 80049e6:	e00a      	b.n	80049fe <UART_SetConfig+0x282>
 80049e8:	2304      	movs	r3, #4
 80049ea:	76fb      	strb	r3, [r7, #27]
 80049ec:	e007      	b.n	80049fe <UART_SetConfig+0x282>
 80049ee:	2308      	movs	r3, #8
 80049f0:	76fb      	strb	r3, [r7, #27]
 80049f2:	e004      	b.n	80049fe <UART_SetConfig+0x282>
 80049f4:	2310      	movs	r3, #16
 80049f6:	76fb      	strb	r3, [r7, #27]
 80049f8:	e001      	b.n	80049fe <UART_SetConfig+0x282>
 80049fa:	2310      	movs	r3, #16
 80049fc:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a17      	ldr	r2, [pc, #92]	; (8004a60 <UART_SetConfig+0x2e4>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	f040 8087 	bne.w	8004b18 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a0a:	7efb      	ldrb	r3, [r7, #27]
 8004a0c:	2b08      	cmp	r3, #8
 8004a0e:	d837      	bhi.n	8004a80 <UART_SetConfig+0x304>
 8004a10:	a201      	add	r2, pc, #4	; (adr r2, 8004a18 <UART_SetConfig+0x29c>)
 8004a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a16:	bf00      	nop
 8004a18:	08004a3d 	.word	0x08004a3d
 8004a1c:	08004a81 	.word	0x08004a81
 8004a20:	08004a45 	.word	0x08004a45
 8004a24:	08004a81 	.word	0x08004a81
 8004a28:	08004a4b 	.word	0x08004a4b
 8004a2c:	08004a81 	.word	0x08004a81
 8004a30:	08004a81 	.word	0x08004a81
 8004a34:	08004a81 	.word	0x08004a81
 8004a38:	08004a53 	.word	0x08004a53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a3c:	f7ff f854 	bl	8003ae8 <HAL_RCC_GetPCLK1Freq>
 8004a40:	6178      	str	r0, [r7, #20]
        break;
 8004a42:	e022      	b.n	8004a8a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a44:	4b0d      	ldr	r3, [pc, #52]	; (8004a7c <UART_SetConfig+0x300>)
 8004a46:	617b      	str	r3, [r7, #20]
        break;
 8004a48:	e01f      	b.n	8004a8a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a4a:	f7fe ffb5 	bl	80039b8 <HAL_RCC_GetSysClockFreq>
 8004a4e:	6178      	str	r0, [r7, #20]
        break;
 8004a50:	e01b      	b.n	8004a8a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a56:	617b      	str	r3, [r7, #20]
        break;
 8004a58:	e017      	b.n	8004a8a <UART_SetConfig+0x30e>
 8004a5a:	bf00      	nop
 8004a5c:	efff69f3 	.word	0xefff69f3
 8004a60:	40008000 	.word	0x40008000
 8004a64:	40013800 	.word	0x40013800
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	40004400 	.word	0x40004400
 8004a70:	40004800 	.word	0x40004800
 8004a74:	40004c00 	.word	0x40004c00
 8004a78:	40005000 	.word	0x40005000
 8004a7c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004a80:	2300      	movs	r3, #0
 8004a82:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	76bb      	strb	r3, [r7, #26]
        break;
 8004a88:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 80f1 	beq.w	8004c74 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	4613      	mov	r3, r2
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	4413      	add	r3, r2
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d305      	bcc.n	8004aae <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d902      	bls.n	8004ab4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	76bb      	strb	r3, [r7, #26]
 8004ab2:	e0df      	b.n	8004c74 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f04f 0100 	mov.w	r1, #0
 8004abc:	f04f 0200 	mov.w	r2, #0
 8004ac0:	f04f 0300 	mov.w	r3, #0
 8004ac4:	020b      	lsls	r3, r1, #8
 8004ac6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004aca:	0202      	lsls	r2, r0, #8
 8004acc:	6879      	ldr	r1, [r7, #4]
 8004ace:	6849      	ldr	r1, [r1, #4]
 8004ad0:	0849      	lsrs	r1, r1, #1
 8004ad2:	4608      	mov	r0, r1
 8004ad4:	f04f 0100 	mov.w	r1, #0
 8004ad8:	1814      	adds	r4, r2, r0
 8004ada:	eb43 0501 	adc.w	r5, r3, r1
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	f04f 0300 	mov.w	r3, #0
 8004ae8:	4620      	mov	r0, r4
 8004aea:	4629      	mov	r1, r5
 8004aec:	f7fb fb6c 	bl	80001c8 <__aeabi_uldivmod>
 8004af0:	4602      	mov	r2, r0
 8004af2:	460b      	mov	r3, r1
 8004af4:	4613      	mov	r3, r2
 8004af6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004afe:	d308      	bcc.n	8004b12 <UART_SetConfig+0x396>
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b06:	d204      	bcs.n	8004b12 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	60da      	str	r2, [r3, #12]
 8004b10:	e0b0      	b.n	8004c74 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	76bb      	strb	r3, [r7, #26]
 8004b16:	e0ad      	b.n	8004c74 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	69db      	ldr	r3, [r3, #28]
 8004b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b20:	d15c      	bne.n	8004bdc <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004b22:	7efb      	ldrb	r3, [r7, #27]
 8004b24:	2b08      	cmp	r3, #8
 8004b26:	d828      	bhi.n	8004b7a <UART_SetConfig+0x3fe>
 8004b28:	a201      	add	r2, pc, #4	; (adr r2, 8004b30 <UART_SetConfig+0x3b4>)
 8004b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2e:	bf00      	nop
 8004b30:	08004b55 	.word	0x08004b55
 8004b34:	08004b5d 	.word	0x08004b5d
 8004b38:	08004b65 	.word	0x08004b65
 8004b3c:	08004b7b 	.word	0x08004b7b
 8004b40:	08004b6b 	.word	0x08004b6b
 8004b44:	08004b7b 	.word	0x08004b7b
 8004b48:	08004b7b 	.word	0x08004b7b
 8004b4c:	08004b7b 	.word	0x08004b7b
 8004b50:	08004b73 	.word	0x08004b73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b54:	f7fe ffc8 	bl	8003ae8 <HAL_RCC_GetPCLK1Freq>
 8004b58:	6178      	str	r0, [r7, #20]
        break;
 8004b5a:	e013      	b.n	8004b84 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b5c:	f7fe ffda 	bl	8003b14 <HAL_RCC_GetPCLK2Freq>
 8004b60:	6178      	str	r0, [r7, #20]
        break;
 8004b62:	e00f      	b.n	8004b84 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b64:	4b49      	ldr	r3, [pc, #292]	; (8004c8c <UART_SetConfig+0x510>)
 8004b66:	617b      	str	r3, [r7, #20]
        break;
 8004b68:	e00c      	b.n	8004b84 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b6a:	f7fe ff25 	bl	80039b8 <HAL_RCC_GetSysClockFreq>
 8004b6e:	6178      	str	r0, [r7, #20]
        break;
 8004b70:	e008      	b.n	8004b84 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b76:	617b      	str	r3, [r7, #20]
        break;
 8004b78:	e004      	b.n	8004b84 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	76bb      	strb	r3, [r7, #26]
        break;
 8004b82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d074      	beq.n	8004c74 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	005a      	lsls	r2, r3, #1
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	085b      	lsrs	r3, r3, #1
 8004b94:	441a      	add	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	2b0f      	cmp	r3, #15
 8004ba6:	d916      	bls.n	8004bd6 <UART_SetConfig+0x45a>
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bae:	d212      	bcs.n	8004bd6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	f023 030f 	bic.w	r3, r3, #15
 8004bb8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	085b      	lsrs	r3, r3, #1
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	89fb      	ldrh	r3, [r7, #14]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	89fa      	ldrh	r2, [r7, #14]
 8004bd2:	60da      	str	r2, [r3, #12]
 8004bd4:	e04e      	b.n	8004c74 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	76bb      	strb	r3, [r7, #26]
 8004bda:	e04b      	b.n	8004c74 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bdc:	7efb      	ldrb	r3, [r7, #27]
 8004bde:	2b08      	cmp	r3, #8
 8004be0:	d827      	bhi.n	8004c32 <UART_SetConfig+0x4b6>
 8004be2:	a201      	add	r2, pc, #4	; (adr r2, 8004be8 <UART_SetConfig+0x46c>)
 8004be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be8:	08004c0d 	.word	0x08004c0d
 8004bec:	08004c15 	.word	0x08004c15
 8004bf0:	08004c1d 	.word	0x08004c1d
 8004bf4:	08004c33 	.word	0x08004c33
 8004bf8:	08004c23 	.word	0x08004c23
 8004bfc:	08004c33 	.word	0x08004c33
 8004c00:	08004c33 	.word	0x08004c33
 8004c04:	08004c33 	.word	0x08004c33
 8004c08:	08004c2b 	.word	0x08004c2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c0c:	f7fe ff6c 	bl	8003ae8 <HAL_RCC_GetPCLK1Freq>
 8004c10:	6178      	str	r0, [r7, #20]
        break;
 8004c12:	e013      	b.n	8004c3c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c14:	f7fe ff7e 	bl	8003b14 <HAL_RCC_GetPCLK2Freq>
 8004c18:	6178      	str	r0, [r7, #20]
        break;
 8004c1a:	e00f      	b.n	8004c3c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c1c:	4b1b      	ldr	r3, [pc, #108]	; (8004c8c <UART_SetConfig+0x510>)
 8004c1e:	617b      	str	r3, [r7, #20]
        break;
 8004c20:	e00c      	b.n	8004c3c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c22:	f7fe fec9 	bl	80039b8 <HAL_RCC_GetSysClockFreq>
 8004c26:	6178      	str	r0, [r7, #20]
        break;
 8004c28:	e008      	b.n	8004c3c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c2e:	617b      	str	r3, [r7, #20]
        break;
 8004c30:	e004      	b.n	8004c3c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004c32:	2300      	movs	r3, #0
 8004c34:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	76bb      	strb	r3, [r7, #26]
        break;
 8004c3a:	bf00      	nop
    }

    if (pclk != 0U)
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d018      	beq.n	8004c74 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	085a      	lsrs	r2, r3, #1
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	441a      	add	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	2b0f      	cmp	r3, #15
 8004c5c:	d908      	bls.n	8004c70 <UART_SetConfig+0x4f4>
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c64:	d204      	bcs.n	8004c70 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	60da      	str	r2, [r3, #12]
 8004c6e:	e001      	b.n	8004c74 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004c80:	7ebb      	ldrb	r3, [r7, #26]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3720      	adds	r7, #32
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bdb0      	pop	{r4, r5, r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	00f42400 	.word	0x00f42400

08004c90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00a      	beq.n	8004cba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00a      	beq.n	8004cfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	f003 0308 	and.w	r3, r3, #8
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	f003 0310 	and.w	r3, r3, #16
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00a      	beq.n	8004d42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	f003 0320 	and.w	r3, r3, #32
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d01a      	beq.n	8004da6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d8e:	d10a      	bne.n	8004da6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00a      	beq.n	8004dc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	605a      	str	r2, [r3, #4]
  }
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af02      	add	r7, sp, #8
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004de4:	f7fc f9e8 	bl	80011b8 <HAL_GetTick>
 8004de8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0308 	and.w	r3, r3, #8
 8004df4:	2b08      	cmp	r3, #8
 8004df6:	d10e      	bne.n	8004e16 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004df8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f82d 	bl	8004e66 <UART_WaitOnFlagUntilTimeout>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e023      	b.n	8004e5e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0304 	and.w	r3, r3, #4
 8004e20:	2b04      	cmp	r3, #4
 8004e22:	d10e      	bne.n	8004e42 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f817 	bl	8004e66 <UART_WaitOnFlagUntilTimeout>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e00d      	b.n	8004e5e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2220      	movs	r2, #32
 8004e46:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b084      	sub	sp, #16
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	60f8      	str	r0, [r7, #12]
 8004e6e:	60b9      	str	r1, [r7, #8]
 8004e70:	603b      	str	r3, [r7, #0]
 8004e72:	4613      	mov	r3, r2
 8004e74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e76:	e05e      	b.n	8004f36 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e7e:	d05a      	beq.n	8004f36 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e80:	f7fc f99a 	bl	80011b8 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d302      	bcc.n	8004e96 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d11b      	bne.n	8004ece <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ea4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	689a      	ldr	r2, [r3, #8]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0201 	bic.w	r2, r2, #1
 8004eb4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e043      	b.n	8004f56 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d02c      	beq.n	8004f36 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	69db      	ldr	r3, [r3, #28]
 8004ee2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ee6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eea:	d124      	bne.n	8004f36 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ef4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f04:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689a      	ldr	r2, [r3, #8]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 0201 	bic.w	r2, r2, #1
 8004f14:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2220      	movs	r2, #32
 8004f26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e00f      	b.n	8004f56 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	69da      	ldr	r2, [r3, #28]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	4013      	ands	r3, r2
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	bf0c      	ite	eq
 8004f46:	2301      	moveq	r3, #1
 8004f48:	2300      	movne	r3, #0
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	79fb      	ldrb	r3, [r7, #7]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d091      	beq.n	8004e78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f5e:	b084      	sub	sp, #16
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	f107 001c 	add.w	r0, r7, #28
 8004f6c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f001 f9cf 	bl	8006320 <USB_CoreReset>
 8004f82:	4603      	mov	r3, r0
 8004f84:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d106      	bne.n	8004f9a <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f90:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	639a      	str	r2, [r3, #56]	; 0x38
 8004f98:	e005      	b.n	8004fa6 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fb2:	b004      	add	sp, #16
 8004fb4:	4770      	bx	lr
	...

08004fb8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b087      	sub	sp, #28
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004fc6:	79fb      	ldrb	r3, [r7, #7]
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d165      	bne.n	8005098 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	4a3e      	ldr	r2, [pc, #248]	; (80050c8 <USB_SetTurnaroundTime+0x110>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d906      	bls.n	8004fe2 <USB_SetTurnaroundTime+0x2a>
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	4a3d      	ldr	r2, [pc, #244]	; (80050cc <USB_SetTurnaroundTime+0x114>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d202      	bcs.n	8004fe2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004fdc:	230f      	movs	r3, #15
 8004fde:	617b      	str	r3, [r7, #20]
 8004fe0:	e05c      	b.n	800509c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	4a39      	ldr	r2, [pc, #228]	; (80050cc <USB_SetTurnaroundTime+0x114>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d306      	bcc.n	8004ff8 <USB_SetTurnaroundTime+0x40>
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	4a38      	ldr	r2, [pc, #224]	; (80050d0 <USB_SetTurnaroundTime+0x118>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d202      	bcs.n	8004ff8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004ff2:	230e      	movs	r3, #14
 8004ff4:	617b      	str	r3, [r7, #20]
 8004ff6:	e051      	b.n	800509c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	4a35      	ldr	r2, [pc, #212]	; (80050d0 <USB_SetTurnaroundTime+0x118>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d306      	bcc.n	800500e <USB_SetTurnaroundTime+0x56>
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	4a34      	ldr	r2, [pc, #208]	; (80050d4 <USB_SetTurnaroundTime+0x11c>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d202      	bcs.n	800500e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005008:	230d      	movs	r3, #13
 800500a:	617b      	str	r3, [r7, #20]
 800500c:	e046      	b.n	800509c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	4a30      	ldr	r2, [pc, #192]	; (80050d4 <USB_SetTurnaroundTime+0x11c>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d306      	bcc.n	8005024 <USB_SetTurnaroundTime+0x6c>
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	4a2f      	ldr	r2, [pc, #188]	; (80050d8 <USB_SetTurnaroundTime+0x120>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d802      	bhi.n	8005024 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800501e:	230c      	movs	r3, #12
 8005020:	617b      	str	r3, [r7, #20]
 8005022:	e03b      	b.n	800509c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	4a2c      	ldr	r2, [pc, #176]	; (80050d8 <USB_SetTurnaroundTime+0x120>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d906      	bls.n	800503a <USB_SetTurnaroundTime+0x82>
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	4a2b      	ldr	r2, [pc, #172]	; (80050dc <USB_SetTurnaroundTime+0x124>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d802      	bhi.n	800503a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005034:	230b      	movs	r3, #11
 8005036:	617b      	str	r3, [r7, #20]
 8005038:	e030      	b.n	800509c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	4a27      	ldr	r2, [pc, #156]	; (80050dc <USB_SetTurnaroundTime+0x124>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d906      	bls.n	8005050 <USB_SetTurnaroundTime+0x98>
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	4a26      	ldr	r2, [pc, #152]	; (80050e0 <USB_SetTurnaroundTime+0x128>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d802      	bhi.n	8005050 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800504a:	230a      	movs	r3, #10
 800504c:	617b      	str	r3, [r7, #20]
 800504e:	e025      	b.n	800509c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	4a23      	ldr	r2, [pc, #140]	; (80050e0 <USB_SetTurnaroundTime+0x128>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d906      	bls.n	8005066 <USB_SetTurnaroundTime+0xae>
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	4a22      	ldr	r2, [pc, #136]	; (80050e4 <USB_SetTurnaroundTime+0x12c>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d202      	bcs.n	8005066 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005060:	2309      	movs	r3, #9
 8005062:	617b      	str	r3, [r7, #20]
 8005064:	e01a      	b.n	800509c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	4a1e      	ldr	r2, [pc, #120]	; (80050e4 <USB_SetTurnaroundTime+0x12c>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d306      	bcc.n	800507c <USB_SetTurnaroundTime+0xc4>
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	4a1d      	ldr	r2, [pc, #116]	; (80050e8 <USB_SetTurnaroundTime+0x130>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d802      	bhi.n	800507c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005076:	2308      	movs	r3, #8
 8005078:	617b      	str	r3, [r7, #20]
 800507a:	e00f      	b.n	800509c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	4a1a      	ldr	r2, [pc, #104]	; (80050e8 <USB_SetTurnaroundTime+0x130>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d906      	bls.n	8005092 <USB_SetTurnaroundTime+0xda>
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	4a19      	ldr	r2, [pc, #100]	; (80050ec <USB_SetTurnaroundTime+0x134>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d202      	bcs.n	8005092 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800508c:	2307      	movs	r3, #7
 800508e:	617b      	str	r3, [r7, #20]
 8005090:	e004      	b.n	800509c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005092:	2306      	movs	r3, #6
 8005094:	617b      	str	r3, [r7, #20]
 8005096:	e001      	b.n	800509c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005098:	2309      	movs	r3, #9
 800509a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	68da      	ldr	r2, [r3, #12]
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	029b      	lsls	r3, r3, #10
 80050b0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80050b4:	431a      	orrs	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	371c      	adds	r7, #28
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	00d8acbf 	.word	0x00d8acbf
 80050cc:	00e4e1c0 	.word	0x00e4e1c0
 80050d0:	00f42400 	.word	0x00f42400
 80050d4:	01067380 	.word	0x01067380
 80050d8:	011a499f 	.word	0x011a499f
 80050dc:	01312cff 	.word	0x01312cff
 80050e0:	014ca43f 	.word	0x014ca43f
 80050e4:	016e3600 	.word	0x016e3600
 80050e8:	01a6ab1f 	.word	0x01a6ab1f
 80050ec:	01e84800 	.word	0x01e84800

080050f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f043 0201 	orr.w	r2, r3, #1
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005112:	b480      	push	{r7}
 8005114:	b083      	sub	sp, #12
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f023 0201 	bic.w	r2, r3, #1
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	460b      	mov	r3, r1
 800513e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800514c:	78fb      	ldrb	r3, [r7, #3]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d106      	bne.n	8005160 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	60da      	str	r2, [r3, #12]
 800515e:	e00b      	b.n	8005178 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005160:	78fb      	ldrb	r3, [r7, #3]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d106      	bne.n	8005174 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	60da      	str	r2, [r3, #12]
 8005172:	e001      	b.n	8005178 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e003      	b.n	8005180 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005178:	2032      	movs	r0, #50	; 0x32
 800517a:	f7fc f829 	bl	80011d0 <HAL_Delay>

  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005188:	b084      	sub	sp, #16
 800518a:	b580      	push	{r7, lr}
 800518c:	b086      	sub	sp, #24
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
 8005192:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005196:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800519a:	2300      	movs	r3, #0
 800519c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80051a2:	2300      	movs	r3, #0
 80051a4:	613b      	str	r3, [r7, #16]
 80051a6:	e009      	b.n	80051bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	3340      	adds	r3, #64	; 0x40
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4413      	add	r3, r2
 80051b2:	2200      	movs	r2, #0
 80051b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	3301      	adds	r3, #1
 80051ba:	613b      	str	r3, [r7, #16]
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	2b0e      	cmp	r3, #14
 80051c0:	d9f2      	bls.n	80051a8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80051c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d11c      	bne.n	8005202 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051d6:	f043 0302 	orr.w	r3, r3, #2
 80051da:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	601a      	str	r2, [r3, #0]
 8005200:	e005      	b.n	800520e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005206:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005214:	461a      	mov	r2, r3
 8005216:	2300      	movs	r3, #0
 8005218:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005220:	4619      	mov	r1, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005228:	461a      	mov	r2, r3
 800522a:	680b      	ldr	r3, [r1, #0]
 800522c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800522e:	2103      	movs	r1, #3
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 f93d 	bl	80054b0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005236:	2110      	movs	r1, #16
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 f8f1 	bl	8005420 <USB_FlushTxFifo>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d001      	beq.n	8005248 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 f90f 	bl	800546c <USB_FlushRxFifo>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d001      	beq.n	8005258 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800525e:	461a      	mov	r2, r3
 8005260:	2300      	movs	r3, #0
 8005262:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800526a:	461a      	mov	r2, r3
 800526c:	2300      	movs	r3, #0
 800526e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005276:	461a      	mov	r2, r3
 8005278:	2300      	movs	r3, #0
 800527a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800527c:	2300      	movs	r3, #0
 800527e:	613b      	str	r3, [r7, #16]
 8005280:	e043      	b.n	800530a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	015a      	lsls	r2, r3, #5
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	4413      	add	r3, r2
 800528a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005294:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005298:	d118      	bne.n	80052cc <USB_DevInit+0x144>
    {
      if (i == 0U)
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10a      	bne.n	80052b6 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ac:	461a      	mov	r2, r3
 80052ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80052b2:	6013      	str	r3, [r2, #0]
 80052b4:	e013      	b.n	80052de <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	015a      	lsls	r2, r3, #5
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	4413      	add	r3, r2
 80052be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c2:	461a      	mov	r2, r3
 80052c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80052c8:	6013      	str	r3, [r2, #0]
 80052ca:	e008      	b.n	80052de <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d8:	461a      	mov	r2, r3
 80052da:	2300      	movs	r3, #0
 80052dc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ea:	461a      	mov	r2, r3
 80052ec:	2300      	movs	r3, #0
 80052ee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052fc:	461a      	mov	r2, r3
 80052fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005302:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	3301      	adds	r3, #1
 8005308:	613b      	str	r3, [r7, #16]
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	429a      	cmp	r2, r3
 8005310:	d3b7      	bcc.n	8005282 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005312:	2300      	movs	r3, #0
 8005314:	613b      	str	r3, [r7, #16]
 8005316:	e043      	b.n	80053a0 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	015a      	lsls	r2, r3, #5
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	4413      	add	r3, r2
 8005320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800532a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800532e:	d118      	bne.n	8005362 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d10a      	bne.n	800534c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	015a      	lsls	r2, r3, #5
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	4413      	add	r3, r2
 800533e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005342:	461a      	mov	r2, r3
 8005344:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005348:	6013      	str	r3, [r2, #0]
 800534a:	e013      	b.n	8005374 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	015a      	lsls	r2, r3, #5
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4413      	add	r3, r2
 8005354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005358:	461a      	mov	r2, r3
 800535a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800535e:	6013      	str	r3, [r2, #0]
 8005360:	e008      	b.n	8005374 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	015a      	lsls	r2, r3, #5
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	4413      	add	r3, r2
 800536a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800536e:	461a      	mov	r2, r3
 8005370:	2300      	movs	r3, #0
 8005372:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	015a      	lsls	r2, r3, #5
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	4413      	add	r3, r2
 800537c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005380:	461a      	mov	r2, r3
 8005382:	2300      	movs	r3, #0
 8005384:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	015a      	lsls	r2, r3, #5
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	4413      	add	r3, r2
 800538e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005392:	461a      	mov	r2, r3
 8005394:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005398:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	3301      	adds	r3, #1
 800539e:	613b      	str	r3, [r7, #16]
 80053a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d3b7      	bcc.n	8005318 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053ba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80053c8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	f043 0210 	orr.w	r2, r3, #16
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	699a      	ldr	r2, [r3, #24]
 80053da:	4b10      	ldr	r3, [pc, #64]	; (800541c <USB_DevInit+0x294>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80053e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d005      	beq.n	80053f4 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	f043 0208 	orr.w	r2, r3, #8
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80053f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d107      	bne.n	800540a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005402:	f043 0304 	orr.w	r3, r3, #4
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800540a:	7dfb      	ldrb	r3, [r7, #23]
}
 800540c:	4618      	mov	r0, r3
 800540e:	3718      	adds	r7, #24
 8005410:	46bd      	mov	sp, r7
 8005412:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005416:	b004      	add	sp, #16
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	803c3800 	.word	0x803c3800

08005420 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800542a:	2300      	movs	r3, #0
 800542c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	019b      	lsls	r3, r3, #6
 8005432:	f043 0220 	orr.w	r2, r3, #32
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	3301      	adds	r3, #1
 800543e:	60fb      	str	r3, [r7, #12]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4a09      	ldr	r2, [pc, #36]	; (8005468 <USB_FlushTxFifo+0x48>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d901      	bls.n	800544c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e006      	b.n	800545a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	f003 0320 	and.w	r3, r3, #32
 8005454:	2b20      	cmp	r3, #32
 8005456:	d0f0      	beq.n	800543a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	00030d40 	.word	0x00030d40

0800546c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005474:	2300      	movs	r3, #0
 8005476:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2210      	movs	r2, #16
 800547c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	3301      	adds	r3, #1
 8005482:	60fb      	str	r3, [r7, #12]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	4a09      	ldr	r2, [pc, #36]	; (80054ac <USB_FlushRxFifo+0x40>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d901      	bls.n	8005490 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e006      	b.n	800549e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	f003 0310 	and.w	r3, r3, #16
 8005498:	2b10      	cmp	r3, #16
 800549a:	d0f0      	beq.n	800547e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	00030d40 	.word	0x00030d40

080054b0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	460b      	mov	r3, r1
 80054ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	78fb      	ldrb	r3, [r7, #3]
 80054ca:	68f9      	ldr	r1, [r7, #12]
 80054cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054d0:	4313      	orrs	r3, r2
 80054d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3714      	adds	r7, #20
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b087      	sub	sp, #28
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f003 0306 	and.w	r3, r3, #6
 80054fa:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d002      	beq.n	8005508 <USB_GetDevSpeed+0x26>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2b06      	cmp	r3, #6
 8005506:	d102      	bne.n	800550e <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005508:	2302      	movs	r3, #2
 800550a:	75fb      	strb	r3, [r7, #23]
 800550c:	e001      	b.n	8005512 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800550e:	230f      	movs	r3, #15
 8005510:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005512:	7dfb      	ldrb	r3, [r7, #23]
}
 8005514:	4618      	mov	r0, r3
 8005516:	371c      	adds	r7, #28
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	785b      	ldrb	r3, [r3, #1]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d13a      	bne.n	80055b2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005542:	69da      	ldr	r2, [r3, #28]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	f003 030f 	and.w	r3, r3, #15
 800554c:	2101      	movs	r1, #1
 800554e:	fa01 f303 	lsl.w	r3, r1, r3
 8005552:	b29b      	uxth	r3, r3
 8005554:	68f9      	ldr	r1, [r7, #12]
 8005556:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800555a:	4313      	orrs	r3, r2
 800555c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	4413      	add	r3, r2
 8005566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d155      	bne.n	8005620 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	78db      	ldrb	r3, [r3, #3]
 800558e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005590:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	059b      	lsls	r3, r3, #22
 8005596:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005598:	4313      	orrs	r3, r2
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	0151      	lsls	r1, r2, #5
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	440a      	add	r2, r1
 80055a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ae:	6013      	str	r3, [r2, #0]
 80055b0:	e036      	b.n	8005620 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b8:	69da      	ldr	r2, [r3, #28]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	f003 030f 	and.w	r3, r3, #15
 80055c2:	2101      	movs	r1, #1
 80055c4:	fa01 f303 	lsl.w	r3, r1, r3
 80055c8:	041b      	lsls	r3, r3, #16
 80055ca:	68f9      	ldr	r1, [r7, #12]
 80055cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055d0:	4313      	orrs	r3, r2
 80055d2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d11a      	bne.n	8005620 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	015a      	lsls	r2, r3, #5
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	4413      	add	r3, r2
 80055f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	78db      	ldrb	r3, [r3, #3]
 8005604:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005606:	430b      	orrs	r3, r1
 8005608:	4313      	orrs	r3, r2
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	0151      	lsls	r1, r2, #5
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	440a      	add	r2, r1
 8005612:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800561a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800561e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3714      	adds	r7, #20
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
	...

08005630 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	785b      	ldrb	r3, [r3, #1]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d161      	bne.n	8005710 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	015a      	lsls	r2, r3, #5
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4413      	add	r3, r2
 8005654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800565e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005662:	d11f      	bne.n	80056a4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68ba      	ldr	r2, [r7, #8]
 8005674:	0151      	lsls	r1, r2, #5
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	440a      	add	r2, r1
 800567a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800567e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005682:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	015a      	lsls	r2, r3, #5
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4413      	add	r3, r2
 800568c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68ba      	ldr	r2, [r7, #8]
 8005694:	0151      	lsls	r1, r2, #5
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	440a      	add	r2, r1
 800569a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800569e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	f003 030f 	and.w	r3, r3, #15
 80056b4:	2101      	movs	r1, #1
 80056b6:	fa01 f303 	lsl.w	r3, r1, r3
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	43db      	mvns	r3, r3
 80056be:	68f9      	ldr	r1, [r7, #12]
 80056c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056c4:	4013      	ands	r3, r2
 80056c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ce:	69da      	ldr	r2, [r3, #28]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	f003 030f 	and.w	r3, r3, #15
 80056d8:	2101      	movs	r1, #1
 80056da:	fa01 f303 	lsl.w	r3, r1, r3
 80056de:	b29b      	uxth	r3, r3
 80056e0:	43db      	mvns	r3, r3
 80056e2:	68f9      	ldr	r1, [r7, #12]
 80056e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056e8:	4013      	ands	r3, r2
 80056ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	0159      	lsls	r1, r3, #5
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	440b      	add	r3, r1
 8005702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005706:	4619      	mov	r1, r3
 8005708:	4b35      	ldr	r3, [pc, #212]	; (80057e0 <USB_DeactivateEndpoint+0x1b0>)
 800570a:	4013      	ands	r3, r2
 800570c:	600b      	str	r3, [r1, #0]
 800570e:	e060      	b.n	80057d2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	4413      	add	r3, r2
 8005718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005722:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005726:	d11f      	bne.n	8005768 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	015a      	lsls	r2, r3, #5
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4413      	add	r3, r2
 8005730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	0151      	lsls	r1, r2, #5
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	440a      	add	r2, r1
 800573e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005742:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005746:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	4413      	add	r3, r2
 8005750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	0151      	lsls	r1, r2, #5
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	440a      	add	r2, r1
 800575e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005762:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005766:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800576e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	f003 030f 	and.w	r3, r3, #15
 8005778:	2101      	movs	r1, #1
 800577a:	fa01 f303 	lsl.w	r3, r1, r3
 800577e:	041b      	lsls	r3, r3, #16
 8005780:	43db      	mvns	r3, r3
 8005782:	68f9      	ldr	r1, [r7, #12]
 8005784:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005788:	4013      	ands	r3, r2
 800578a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005792:	69da      	ldr	r2, [r3, #28]
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	f003 030f 	and.w	r3, r3, #15
 800579c:	2101      	movs	r1, #1
 800579e:	fa01 f303 	lsl.w	r3, r1, r3
 80057a2:	041b      	lsls	r3, r3, #16
 80057a4:	43db      	mvns	r3, r3
 80057a6:	68f9      	ldr	r1, [r7, #12]
 80057a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057ac:	4013      	ands	r3, r2
 80057ae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	0159      	lsls	r1, r3, #5
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	440b      	add	r3, r1
 80057c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ca:	4619      	mov	r1, r3
 80057cc:	4b05      	ldr	r3, [pc, #20]	; (80057e4 <USB_DeactivateEndpoint+0x1b4>)
 80057ce:	4013      	ands	r3, r2
 80057d0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr
 80057e0:	ec337800 	.word	0xec337800
 80057e4:	eff37800 	.word	0xeff37800

080057e8 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	785b      	ldrb	r3, [r3, #1]
 8005800:	2b01      	cmp	r3, #1
 8005802:	f040 810a 	bne.w	8005a1a <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d132      	bne.n	8005874 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	015a      	lsls	r2, r3, #5
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	4413      	add	r3, r2
 8005816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	0151      	lsls	r1, r2, #5
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	440a      	add	r2, r1
 8005824:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005828:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800582c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005830:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	4413      	add	r3, r2
 800583a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	0151      	lsls	r1, r2, #5
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	440a      	add	r2, r1
 8005848:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800584c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005850:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	015a      	lsls	r2, r3, #5
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	4413      	add	r3, r2
 800585a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	0151      	lsls	r1, r2, #5
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	440a      	add	r2, r1
 8005868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800586c:	0cdb      	lsrs	r3, r3, #19
 800586e:	04db      	lsls	r3, r3, #19
 8005870:	6113      	str	r3, [r2, #16]
 8005872:	e074      	b.n	800595e <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	4413      	add	r3, r2
 800587c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	0151      	lsls	r1, r2, #5
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	440a      	add	r2, r1
 800588a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800588e:	0cdb      	lsrs	r3, r3, #19
 8005890:	04db      	lsls	r3, r3, #19
 8005892:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	015a      	lsls	r2, r3, #5
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	4413      	add	r3, r2
 800589c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	0151      	lsls	r1, r2, #5
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	440a      	add	r2, r1
 80058aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c4:	691a      	ldr	r2, [r3, #16]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	6959      	ldr	r1, [r3, #20]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	440b      	add	r3, r1
 80058d0:	1e59      	subs	r1, r3, #1
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80058da:	04d9      	lsls	r1, r3, #19
 80058dc:	4baf      	ldr	r3, [pc, #700]	; (8005b9c <USB_EPStartXfer+0x3b4>)
 80058de:	400b      	ands	r3, r1
 80058e0:	6939      	ldr	r1, [r7, #16]
 80058e2:	0148      	lsls	r0, r1, #5
 80058e4:	6979      	ldr	r1, [r7, #20]
 80058e6:	4401      	add	r1, r0
 80058e8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80058ec:	4313      	orrs	r3, r2
 80058ee:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058fc:	691a      	ldr	r2, [r3, #16]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005906:	6939      	ldr	r1, [r7, #16]
 8005908:	0148      	lsls	r0, r1, #5
 800590a:	6979      	ldr	r1, [r7, #20]
 800590c:	4401      	add	r1, r0
 800590e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005912:	4313      	orrs	r3, r2
 8005914:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	78db      	ldrb	r3, [r3, #3]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d11f      	bne.n	800595e <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	015a      	lsls	r2, r3, #5
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	4413      	add	r3, r2
 8005926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	0151      	lsls	r1, r2, #5
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	440a      	add	r2, r1
 8005934:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005938:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800593c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	015a      	lsls	r2, r3, #5
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	4413      	add	r3, r2
 8005946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	0151      	lsls	r1, r2, #5
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	440a      	add	r2, r1
 8005954:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005958:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800595c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	015a      	lsls	r2, r3, #5
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	4413      	add	r3, r2
 8005966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	0151      	lsls	r1, r2, #5
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	440a      	add	r2, r1
 8005974:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005978:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800597c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	78db      	ldrb	r3, [r3, #3]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d015      	beq.n	80059b2 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	2b00      	cmp	r3, #0
 800598c:	f000 8100 	beq.w	8005b90 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	f003 030f 	and.w	r3, r3, #15
 80059a0:	2101      	movs	r1, #1
 80059a2:	fa01 f303 	lsl.w	r3, r1, r3
 80059a6:	6979      	ldr	r1, [r7, #20]
 80059a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059ac:	4313      	orrs	r3, r2
 80059ae:	634b      	str	r3, [r1, #52]	; 0x34
 80059b0:	e0ee      	b.n	8005b90 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d110      	bne.n	80059e4 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	015a      	lsls	r2, r3, #5
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	4413      	add	r3, r2
 80059ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	0151      	lsls	r1, r2, #5
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	440a      	add	r2, r1
 80059d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059e0:	6013      	str	r3, [r2, #0]
 80059e2:	e00f      	b.n	8005a04 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	015a      	lsls	r2, r3, #5
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	4413      	add	r3, r2
 80059ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	693a      	ldr	r2, [r7, #16]
 80059f4:	0151      	lsls	r1, r2, #5
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	440a      	add	r2, r1
 80059fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a02:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	68d9      	ldr	r1, [r3, #12]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	781a      	ldrb	r2, [r3, #0]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	695b      	ldr	r3, [r3, #20]
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f9e2 	bl	8005ddc <USB_WritePacket>
 8005a18:	e0ba      	b.n	8005b90 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	015a      	lsls	r2, r3, #5
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	4413      	add	r3, r2
 8005a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	0151      	lsls	r1, r2, #5
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	440a      	add	r2, r1
 8005a30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a34:	0cdb      	lsrs	r3, r3, #19
 8005a36:	04db      	lsls	r3, r3, #19
 8005a38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	0151      	lsls	r1, r2, #5
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	440a      	add	r2, r1
 8005a50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a54:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a58:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a5c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d123      	bne.n	8005aae <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	015a      	lsls	r2, r3, #5
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a72:	691a      	ldr	r2, [r3, #16]
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a7c:	6939      	ldr	r1, [r7, #16]
 8005a7e:	0148      	lsls	r0, r1, #5
 8005a80:	6979      	ldr	r1, [r7, #20]
 8005a82:	4401      	add	r1, r0
 8005a84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	015a      	lsls	r2, r3, #5
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	4413      	add	r3, r2
 8005a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	0151      	lsls	r1, r2, #5
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	440a      	add	r2, r1
 8005aa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aa6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005aaa:	6113      	str	r3, [r2, #16]
 8005aac:	e033      	b.n	8005b16 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	695a      	ldr	r2, [r3, #20]
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	1e5a      	subs	r2, r3, #1
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac2:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	015a      	lsls	r2, r3, #5
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	4413      	add	r3, r2
 8005acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad0:	691a      	ldr	r2, [r3, #16]
 8005ad2:	89fb      	ldrh	r3, [r7, #14]
 8005ad4:	04d9      	lsls	r1, r3, #19
 8005ad6:	4b31      	ldr	r3, [pc, #196]	; (8005b9c <USB_EPStartXfer+0x3b4>)
 8005ad8:	400b      	ands	r3, r1
 8005ada:	6939      	ldr	r1, [r7, #16]
 8005adc:	0148      	lsls	r0, r1, #5
 8005ade:	6979      	ldr	r1, [r7, #20]
 8005ae0:	4401      	add	r1, r0
 8005ae2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	015a      	lsls	r2, r3, #5
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	4413      	add	r3, r2
 8005af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af6:	691a      	ldr	r2, [r3, #16]
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	89f9      	ldrh	r1, [r7, #14]
 8005afe:	fb01 f303 	mul.w	r3, r1, r3
 8005b02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b06:	6939      	ldr	r1, [r7, #16]
 8005b08:	0148      	lsls	r0, r1, #5
 8005b0a:	6979      	ldr	r1, [r7, #20]
 8005b0c:	4401      	add	r1, r0
 8005b0e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b12:	4313      	orrs	r3, r2
 8005b14:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	78db      	ldrb	r3, [r3, #3]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d128      	bne.n	8005b70 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d110      	bne.n	8005b50 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	015a      	lsls	r2, r3, #5
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	0151      	lsls	r1, r2, #5
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	440a      	add	r2, r1
 8005b44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b4c:	6013      	str	r3, [r2, #0]
 8005b4e:	e00f      	b.n	8005b70 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	015a      	lsls	r2, r3, #5
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	0151      	lsls	r1, r2, #5
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	440a      	add	r2, r1
 8005b66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b6e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	0151      	lsls	r1, r2, #5
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	440a      	add	r2, r1
 8005b86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3718      	adds	r7, #24
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	1ff80000 	.word	0x1ff80000

08005ba0 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	785b      	ldrb	r3, [r3, #1]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	f040 80ab 	bne.w	8005d14 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d132      	bne.n	8005c2c <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	015a      	lsls	r2, r3, #5
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	4413      	add	r3, r2
 8005bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	0151      	lsls	r1, r2, #5
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	440a      	add	r2, r1
 8005bdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005be4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005be8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	68ba      	ldr	r2, [r7, #8]
 8005bfa:	0151      	lsls	r1, r2, #5
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	440a      	add	r2, r1
 8005c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	0151      	lsls	r1, r2, #5
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	440a      	add	r2, r1
 8005c20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c24:	0cdb      	lsrs	r3, r3, #19
 8005c26:	04db      	lsls	r3, r3, #19
 8005c28:	6113      	str	r3, [r2, #16]
 8005c2a:	e04e      	b.n	8005cca <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	0151      	lsls	r1, r2, #5
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	440a      	add	r2, r1
 8005c42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c46:	0cdb      	lsrs	r3, r3, #19
 8005c48:	04db      	lsls	r3, r3, #19
 8005c4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	0151      	lsls	r1, r2, #5
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	440a      	add	r2, r1
 8005c62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c66:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c6a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c6e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	695a      	ldr	r2, [r3, #20]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d903      	bls.n	8005c84 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	689a      	ldr	r2, [r3, #8]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	0151      	lsls	r1, r2, #5
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	440a      	add	r2, r1
 8005c9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ca2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb0:	691a      	ldr	r2, [r3, #16]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cba:	68b9      	ldr	r1, [r7, #8]
 8005cbc:	0148      	lsls	r0, r1, #5
 8005cbe:	68f9      	ldr	r1, [r7, #12]
 8005cc0:	4401      	add	r1, r0
 8005cc2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	015a      	lsls	r2, r3, #5
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	0151      	lsls	r1, r2, #5
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	440a      	add	r2, r1
 8005ce0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ce4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ce8:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d06d      	beq.n	8005dce <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	f003 030f 	and.w	r3, r3, #15
 8005d02:	2101      	movs	r1, #1
 8005d04:	fa01 f303 	lsl.w	r3, r1, r3
 8005d08:	68f9      	ldr	r1, [r7, #12]
 8005d0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	634b      	str	r3, [r1, #52]	; 0x34
 8005d12:	e05c      	b.n	8005dce <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	0151      	lsls	r1, r2, #5
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	440a      	add	r2, r1
 8005d2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d2e:	0cdb      	lsrs	r3, r3, #19
 8005d30:	04db      	lsls	r3, r3, #19
 8005d32:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	015a      	lsls	r2, r3, #5
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	0151      	lsls	r1, r2, #5
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	440a      	add	r2, r1
 8005d4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d4e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d52:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d56:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	695b      	ldr	r3, [r3, #20]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d003      	beq.n	8005d68 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	689a      	ldr	r2, [r3, #8]
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	015a      	lsls	r2, r3, #5
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	4413      	add	r3, r2
 8005d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	0151      	lsls	r1, r2, #5
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	440a      	add	r2, r1
 8005d7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d86:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	015a      	lsls	r2, r3, #5
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	4413      	add	r3, r2
 8005d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d94:	691a      	ldr	r2, [r3, #16]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d9e:	68b9      	ldr	r1, [r7, #8]
 8005da0:	0148      	lsls	r0, r1, #5
 8005da2:	68f9      	ldr	r1, [r7, #12]
 8005da4:	4401      	add	r1, r0
 8005da6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005daa:	4313      	orrs	r3, r2
 8005dac:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	0151      	lsls	r1, r2, #5
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	440a      	add	r2, r1
 8005dc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dc8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005dcc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3714      	adds	r7, #20
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b089      	sub	sp, #36	; 0x24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	4611      	mov	r1, r2
 8005de8:	461a      	mov	r2, r3
 8005dea:	460b      	mov	r3, r1
 8005dec:	71fb      	strb	r3, [r7, #7]
 8005dee:	4613      	mov	r3, r2
 8005df0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8005dfa:	88bb      	ldrh	r3, [r7, #4]
 8005dfc:	3303      	adds	r3, #3
 8005dfe:	089b      	lsrs	r3, r3, #2
 8005e00:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005e02:	2300      	movs	r3, #0
 8005e04:	61bb      	str	r3, [r7, #24]
 8005e06:	e00f      	b.n	8005e28 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e08:	79fb      	ldrb	r3, [r7, #7]
 8005e0a:	031a      	lsls	r2, r3, #12
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e14:	461a      	mov	r2, r3
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	6013      	str	r3, [r2, #0]
    pSrc++;
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	3304      	adds	r3, #4
 8005e20:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	3301      	adds	r3, #1
 8005e26:	61bb      	str	r3, [r7, #24]
 8005e28:	69ba      	ldr	r2, [r7, #24]
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d3eb      	bcc.n	8005e08 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3724      	adds	r7, #36	; 0x24
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b089      	sub	sp, #36	; 0x24
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	60f8      	str	r0, [r7, #12]
 8005e46:	60b9      	str	r1, [r7, #8]
 8005e48:	4613      	mov	r3, r2
 8005e4a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005e54:	88fb      	ldrh	r3, [r7, #6]
 8005e56:	3303      	adds	r3, #3
 8005e58:	089b      	lsrs	r3, r3, #2
 8005e5a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	61bb      	str	r3, [r7, #24]
 8005e60:	e00b      	b.n	8005e7a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	601a      	str	r2, [r3, #0]
    pDest++;
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	3304      	adds	r3, #4
 8005e72:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	3301      	adds	r3, #1
 8005e78:	61bb      	str	r3, [r7, #24]
 8005e7a:	69ba      	ldr	r2, [r7, #24]
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d3ef      	bcc.n	8005e62 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005e82:	69fb      	ldr	r3, [r7, #28]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3724      	adds	r7, #36	; 0x24
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	785b      	ldrb	r3, [r3, #1]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d12c      	bne.n	8005f06 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	db12      	blt.n	8005ee4 <USB_EPSetStall+0x54>
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00f      	beq.n	8005ee4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	0151      	lsls	r1, r2, #5
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	440a      	add	r2, r1
 8005eda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ede:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ee2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	0151      	lsls	r1, r2, #5
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	440a      	add	r2, r1
 8005efa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005efe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f02:	6013      	str	r3, [r2, #0]
 8005f04:	e02b      	b.n	8005f5e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	015a      	lsls	r2, r3, #5
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	db12      	blt.n	8005f3e <USB_EPSetStall+0xae>
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00f      	beq.n	8005f3e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	015a      	lsls	r2, r3, #5
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	4413      	add	r3, r2
 8005f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	0151      	lsls	r1, r2, #5
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	440a      	add	r2, r1
 8005f34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f38:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f3c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	0151      	lsls	r1, r2, #5
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	440a      	add	r2, r1
 8005f54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f5c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3714      	adds	r7, #20
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	785b      	ldrb	r3, [r3, #1]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d128      	bne.n	8005fda <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	0151      	lsls	r1, r2, #5
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	440a      	add	r2, r1
 8005f9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fa2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fa6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	78db      	ldrb	r3, [r3, #3]
 8005fac:	2b03      	cmp	r3, #3
 8005fae:	d003      	beq.n	8005fb8 <USB_EPClearStall+0x4c>
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	78db      	ldrb	r3, [r3, #3]
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d138      	bne.n	800602a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	0151      	lsls	r1, r2, #5
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	440a      	add	r2, r1
 8005fce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fd6:	6013      	str	r3, [r2, #0]
 8005fd8:	e027      	b.n	800602a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	015a      	lsls	r2, r3, #5
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	0151      	lsls	r1, r2, #5
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	440a      	add	r2, r1
 8005ff0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ff4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ff8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	78db      	ldrb	r3, [r3, #3]
 8005ffe:	2b03      	cmp	r3, #3
 8006000:	d003      	beq.n	800600a <USB_EPClearStall+0x9e>
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	78db      	ldrb	r3, [r3, #3]
 8006006:	2b02      	cmp	r3, #2
 8006008:	d10f      	bne.n	800602a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	015a      	lsls	r2, r3, #5
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	4413      	add	r3, r2
 8006012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68ba      	ldr	r2, [r7, #8]
 800601a:	0151      	lsls	r1, r2, #5
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	440a      	add	r2, r1
 8006020:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006028:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	460b      	mov	r3, r1
 8006042:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006056:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800605a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	78fb      	ldrb	r3, [r7, #3]
 8006066:	011b      	lsls	r3, r3, #4
 8006068:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800606c:	68f9      	ldr	r1, [r7, #12]
 800606e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006072:	4313      	orrs	r3, r2
 8006074:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3714      	adds	r7, #20
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800609e:	f023 0303 	bic.w	r3, r3, #3
 80060a2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060b2:	f023 0302 	bic.w	r3, r3, #2
 80060b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b085      	sub	sp, #20
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80060e0:	f023 0303 	bic.w	r3, r3, #3
 80060e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060f4:	f043 0302 	orr.w	r3, r3, #2
 80060f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3714      	adds	r7, #20
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	4013      	ands	r3, r2
 800611e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006120:	68fb      	ldr	r3, [r7, #12]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800612e:	b480      	push	{r7}
 8006130:	b085      	sub	sp, #20
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800614a:	69db      	ldr	r3, [r3, #28]
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	4013      	ands	r3, r2
 8006150:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	0c1b      	lsrs	r3, r3, #16
}
 8006156:	4618      	mov	r0, r3
 8006158:	3714      	adds	r7, #20
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006162:	b480      	push	{r7}
 8006164:	b085      	sub	sp, #20
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800617e:	69db      	ldr	r3, [r3, #28]
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	4013      	ands	r3, r2
 8006184:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	b29b      	uxth	r3, r3
}
 800618a:	4618      	mov	r0, r3
 800618c:	3714      	adds	r7, #20
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr

08006196 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006196:	b480      	push	{r7}
 8006198:	b085      	sub	sp, #20
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
 800619e:	460b      	mov	r3, r1
 80061a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80061a6:	78fb      	ldrb	r3, [r7, #3]
 80061a8:	015a      	lsls	r2, r3, #5
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	4413      	add	r3, r2
 80061ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	4013      	ands	r3, r2
 80061c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80061c4:	68bb      	ldr	r3, [r7, #8]
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3714      	adds	r7, #20
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr

080061d2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80061d2:	b480      	push	{r7}
 80061d4:	b087      	sub	sp, #28
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
 80061da:	460b      	mov	r3, r1
 80061dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061f4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80061f6:	78fb      	ldrb	r3, [r7, #3]
 80061f8:	f003 030f 	and.w	r3, r3, #15
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006202:	01db      	lsls	r3, r3, #7
 8006204:	b2db      	uxtb	r3, r3
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	4313      	orrs	r3, r2
 800620a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800620c:	78fb      	ldrb	r3, [r7, #3]
 800620e:	015a      	lsls	r2, r3, #5
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	4413      	add	r3, r2
 8006214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	4013      	ands	r3, r2
 800621e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006220:	68bb      	ldr	r3, [r7, #8]
}
 8006222:	4618      	mov	r0, r3
 8006224:	371c      	adds	r7, #28
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800622e:	b480      	push	{r7}
 8006230:	b083      	sub	sp, #12
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	f003 0301 	and.w	r3, r3, #1
}
 800623e:	4618      	mov	r0, r3
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr

0800624a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800624a:	b480      	push	{r7}
 800624c:	b085      	sub	sp, #20
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006264:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006268:	f023 0307 	bic.w	r3, r3, #7
 800626c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800627c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006280:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	333c      	adds	r3, #60	; 0x3c
 80062a2:	3304      	adds	r3, #4
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	4a1c      	ldr	r2, [pc, #112]	; (800631c <USB_EP0_OutStart+0x8c>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d90a      	bls.n	80062c6 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062c0:	d101      	bne.n	80062c6 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 80062c2:	2300      	movs	r3, #0
 80062c4:	e024      	b.n	8006310 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062cc:	461a      	mov	r2, r3
 80062ce:	2300      	movs	r3, #0
 80062d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062f4:	f043 0318 	orr.w	r3, r3, #24
 80062f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006308:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800630c:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3714      	adds	r7, #20
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr
 800631c:	4f54300a 	.word	0x4f54300a

08006320 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006328:	2300      	movs	r3, #0
 800632a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	3301      	adds	r3, #1
 8006330:	60fb      	str	r3, [r7, #12]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	4a13      	ldr	r2, [pc, #76]	; (8006384 <USB_CoreReset+0x64>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d901      	bls.n	800633e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e01b      	b.n	8006376 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	2b00      	cmp	r3, #0
 8006344:	daf2      	bge.n	800632c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006346:	2300      	movs	r3, #0
 8006348:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	f043 0201 	orr.w	r2, r3, #1
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	3301      	adds	r3, #1
 800635a:	60fb      	str	r3, [r7, #12]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	4a09      	ldr	r2, [pc, #36]	; (8006384 <USB_CoreReset+0x64>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d901      	bls.n	8006368 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006364:	2303      	movs	r3, #3
 8006366:	e006      	b.n	8006376 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	2b01      	cmp	r3, #1
 8006372:	d0f0      	beq.n	8006356 <USB_CoreReset+0x36>

  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3714      	adds	r7, #20
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	00030d40 	.word	0x00030d40

08006388 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	460b      	mov	r3, r1
 8006392:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006394:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006398:	f002 fa7a 	bl	8008890 <USBD_static_malloc>
 800639c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d105      	bne.n	80063b0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80063ac:	2302      	movs	r3, #2
 80063ae:	e066      	b.n	800647e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	7c1b      	ldrb	r3, [r3, #16]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d119      	bne.n	80063f4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80063c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063c4:	2202      	movs	r2, #2
 80063c6:	2181      	movs	r1, #129	; 0x81
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f002 f84d 	bl	8008468 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80063d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063d8:	2202      	movs	r2, #2
 80063da:	2101      	movs	r1, #1
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f002 f843 	bl	8008468 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2210      	movs	r2, #16
 80063ee:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80063f2:	e016      	b.n	8006422 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80063f4:	2340      	movs	r3, #64	; 0x40
 80063f6:	2202      	movs	r2, #2
 80063f8:	2181      	movs	r1, #129	; 0x81
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f002 f834 	bl	8008468 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006406:	2340      	movs	r3, #64	; 0x40
 8006408:	2202      	movs	r2, #2
 800640a:	2101      	movs	r1, #1
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f002 f82b 	bl	8008468 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2210      	movs	r2, #16
 800641e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006422:	2308      	movs	r3, #8
 8006424:	2203      	movs	r2, #3
 8006426:	2182      	movs	r1, #130	; 0x82
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f002 f81d 	bl	8008468 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2201      	movs	r2, #1
 8006432:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	7c1b      	ldrb	r3, [r3, #16]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d109      	bne.n	800646c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800645e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006462:	2101      	movs	r1, #1
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f002 f979 	bl	800875c <USBD_LL_PrepareReceive>
 800646a:	e007      	b.n	800647c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006472:	2340      	movs	r3, #64	; 0x40
 8006474:	2101      	movs	r1, #1
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f002 f970 	bl	800875c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006486:	b580      	push	{r7, lr}
 8006488:	b082      	sub	sp, #8
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	460b      	mov	r3, r1
 8006490:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006492:	2181      	movs	r1, #129	; 0x81
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f002 f825 	bl	80084e4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80064a0:	2101      	movs	r1, #1
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f002 f81e 	bl	80084e4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80064b0:	2182      	movs	r1, #130	; 0x82
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f002 f816 	bl	80084e4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00e      	beq.n	80064f0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064e2:	4618      	mov	r0, r3
 80064e4:	f002 f9e2 	bl	80088ac <USBD_static_free>
    pdev->pClassData = NULL;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
	...

080064fc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800650c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800650e:	2300      	movs	r3, #0
 8006510:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006512:	2300      	movs	r3, #0
 8006514:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006516:	2300      	movs	r3, #0
 8006518:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d101      	bne.n	8006524 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006520:	2303      	movs	r3, #3
 8006522:	e0af      	b.n	8006684 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800652c:	2b00      	cmp	r3, #0
 800652e:	d03f      	beq.n	80065b0 <USBD_CDC_Setup+0xb4>
 8006530:	2b20      	cmp	r3, #32
 8006532:	f040 809f 	bne.w	8006674 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	88db      	ldrh	r3, [r3, #6]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d02e      	beq.n	800659c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	b25b      	sxtb	r3, r3
 8006544:	2b00      	cmp	r3, #0
 8006546:	da16      	bge.n	8006576 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	683a      	ldr	r2, [r7, #0]
 8006552:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006554:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006556:	683a      	ldr	r2, [r7, #0]
 8006558:	88d2      	ldrh	r2, [r2, #6]
 800655a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	88db      	ldrh	r3, [r3, #6]
 8006560:	2b07      	cmp	r3, #7
 8006562:	bf28      	it	cs
 8006564:	2307      	movcs	r3, #7
 8006566:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	89fa      	ldrh	r2, [r7, #14]
 800656c:	4619      	mov	r1, r3
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f001 fb13 	bl	8007b9a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006574:	e085      	b.n	8006682 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	785a      	ldrb	r2, [r3, #1]
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	88db      	ldrh	r3, [r3, #6]
 8006584:	b2da      	uxtb	r2, r3
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800658c:	6939      	ldr	r1, [r7, #16]
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	88db      	ldrh	r3, [r3, #6]
 8006592:	461a      	mov	r2, r3
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f001 fb2c 	bl	8007bf2 <USBD_CtlPrepareRx>
      break;
 800659a:	e072      	b.n	8006682 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	683a      	ldr	r2, [r7, #0]
 80065a6:	7850      	ldrb	r0, [r2, #1]
 80065a8:	2200      	movs	r2, #0
 80065aa:	6839      	ldr	r1, [r7, #0]
 80065ac:	4798      	blx	r3
      break;
 80065ae:	e068      	b.n	8006682 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	785b      	ldrb	r3, [r3, #1]
 80065b4:	2b0b      	cmp	r3, #11
 80065b6:	d852      	bhi.n	800665e <USBD_CDC_Setup+0x162>
 80065b8:	a201      	add	r2, pc, #4	; (adr r2, 80065c0 <USBD_CDC_Setup+0xc4>)
 80065ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065be:	bf00      	nop
 80065c0:	080065f1 	.word	0x080065f1
 80065c4:	0800666d 	.word	0x0800666d
 80065c8:	0800665f 	.word	0x0800665f
 80065cc:	0800665f 	.word	0x0800665f
 80065d0:	0800665f 	.word	0x0800665f
 80065d4:	0800665f 	.word	0x0800665f
 80065d8:	0800665f 	.word	0x0800665f
 80065dc:	0800665f 	.word	0x0800665f
 80065e0:	0800665f 	.word	0x0800665f
 80065e4:	0800665f 	.word	0x0800665f
 80065e8:	0800661b 	.word	0x0800661b
 80065ec:	08006645 	.word	0x08006645
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	2b03      	cmp	r3, #3
 80065fa:	d107      	bne.n	800660c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80065fc:	f107 030a 	add.w	r3, r7, #10
 8006600:	2202      	movs	r2, #2
 8006602:	4619      	mov	r1, r3
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f001 fac8 	bl	8007b9a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800660a:	e032      	b.n	8006672 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800660c:	6839      	ldr	r1, [r7, #0]
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f001 fa52 	bl	8007ab8 <USBD_CtlError>
            ret = USBD_FAIL;
 8006614:	2303      	movs	r3, #3
 8006616:	75fb      	strb	r3, [r7, #23]
          break;
 8006618:	e02b      	b.n	8006672 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006620:	b2db      	uxtb	r3, r3
 8006622:	2b03      	cmp	r3, #3
 8006624:	d107      	bne.n	8006636 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006626:	f107 030d 	add.w	r3, r7, #13
 800662a:	2201      	movs	r2, #1
 800662c:	4619      	mov	r1, r3
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f001 fab3 	bl	8007b9a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006634:	e01d      	b.n	8006672 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006636:	6839      	ldr	r1, [r7, #0]
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f001 fa3d 	bl	8007ab8 <USBD_CtlError>
            ret = USBD_FAIL;
 800663e:	2303      	movs	r3, #3
 8006640:	75fb      	strb	r3, [r7, #23]
          break;
 8006642:	e016      	b.n	8006672 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800664a:	b2db      	uxtb	r3, r3
 800664c:	2b03      	cmp	r3, #3
 800664e:	d00f      	beq.n	8006670 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006650:	6839      	ldr	r1, [r7, #0]
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f001 fa30 	bl	8007ab8 <USBD_CtlError>
            ret = USBD_FAIL;
 8006658:	2303      	movs	r3, #3
 800665a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800665c:	e008      	b.n	8006670 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800665e:	6839      	ldr	r1, [r7, #0]
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f001 fa29 	bl	8007ab8 <USBD_CtlError>
          ret = USBD_FAIL;
 8006666:	2303      	movs	r3, #3
 8006668:	75fb      	strb	r3, [r7, #23]
          break;
 800666a:	e002      	b.n	8006672 <USBD_CDC_Setup+0x176>
          break;
 800666c:	bf00      	nop
 800666e:	e008      	b.n	8006682 <USBD_CDC_Setup+0x186>
          break;
 8006670:	bf00      	nop
      }
      break;
 8006672:	e006      	b.n	8006682 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006674:	6839      	ldr	r1, [r7, #0]
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f001 fa1e 	bl	8007ab8 <USBD_CtlError>
      ret = USBD_FAIL;
 800667c:	2303      	movs	r3, #3
 800667e:	75fb      	strb	r3, [r7, #23]
      break;
 8006680:	bf00      	nop
  }

  return (uint8_t)ret;
 8006682:	7dfb      	ldrb	r3, [r7, #23]
}
 8006684:	4618      	mov	r0, r3
 8006686:	3718      	adds	r7, #24
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	460b      	mov	r3, r1
 8006696:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800669e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d101      	bne.n	80066ae <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e04f      	b.n	800674e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066b4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80066b6:	78fa      	ldrb	r2, [r7, #3]
 80066b8:	6879      	ldr	r1, [r7, #4]
 80066ba:	4613      	mov	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	440b      	add	r3, r1
 80066c4:	3318      	adds	r3, #24
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d029      	beq.n	8006720 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80066cc:	78fa      	ldrb	r2, [r7, #3]
 80066ce:	6879      	ldr	r1, [r7, #4]
 80066d0:	4613      	mov	r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4413      	add	r3, r2
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	440b      	add	r3, r1
 80066da:	3318      	adds	r3, #24
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	78f9      	ldrb	r1, [r7, #3]
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	460b      	mov	r3, r1
 80066e4:	00db      	lsls	r3, r3, #3
 80066e6:	1a5b      	subs	r3, r3, r1
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4403      	add	r3, r0
 80066ec:	3344      	adds	r3, #68	; 0x44
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	fbb2 f1f3 	udiv	r1, r2, r3
 80066f4:	fb03 f301 	mul.w	r3, r3, r1
 80066f8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d110      	bne.n	8006720 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80066fe:	78fa      	ldrb	r2, [r7, #3]
 8006700:	6879      	ldr	r1, [r7, #4]
 8006702:	4613      	mov	r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4413      	add	r3, r2
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	440b      	add	r3, r1
 800670c:	3318      	adds	r3, #24
 800670e:	2200      	movs	r2, #0
 8006710:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006712:	78f9      	ldrb	r1, [r7, #3]
 8006714:	2300      	movs	r3, #0
 8006716:	2200      	movs	r2, #0
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f001 ffe7 	bl	80086ec <USBD_LL_Transmit>
 800671e:	e015      	b.n	800674c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	2200      	movs	r2, #0
 8006724:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00b      	beq.n	800674c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	68ba      	ldr	r2, [r7, #8]
 800673e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006748:	78fa      	ldrb	r2, [r7, #3]
 800674a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b084      	sub	sp, #16
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
 800675e:	460b      	mov	r3, r1
 8006760:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006768:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006770:	2b00      	cmp	r3, #0
 8006772:	d101      	bne.n	8006778 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006774:	2303      	movs	r3, #3
 8006776:	e015      	b.n	80067a4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006778:	78fb      	ldrb	r3, [r7, #3]
 800677a:	4619      	mov	r1, r3
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f002 f825 	bl	80087cc <USBD_LL_GetRxDataSize>
 8006782:	4602      	mov	r2, r0
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800679e:	4611      	mov	r1, r2
 80067a0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067ba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d101      	bne.n	80067c6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e01b      	b.n	80067fe <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d015      	beq.n	80067fc <USBD_CDC_EP0_RxReady+0x50>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80067d6:	2bff      	cmp	r3, #255	; 0xff
 80067d8:	d010      	beq.n	80067fc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80067e8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80067f0:	b292      	uxth	r2, r2
 80067f2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	22ff      	movs	r2, #255	; 0xff
 80067f8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
	...

08006808 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2243      	movs	r2, #67	; 0x43
 8006814:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006816:	4b03      	ldr	r3, [pc, #12]	; (8006824 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006818:	4618      	mov	r0, r3
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr
 8006824:	20000094 	.word	0x20000094

08006828 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2243      	movs	r2, #67	; 0x43
 8006834:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006836:	4b03      	ldr	r3, [pc, #12]	; (8006844 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006838:	4618      	mov	r0, r3
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr
 8006844:	20000050 	.word	0x20000050

08006848 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2243      	movs	r2, #67	; 0x43
 8006854:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006856:	4b03      	ldr	r3, [pc, #12]	; (8006864 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006858:	4618      	mov	r0, r3
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr
 8006864:	200000d8 	.word	0x200000d8

08006868 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	220a      	movs	r2, #10
 8006874:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006876:	4b03      	ldr	r3, [pc, #12]	; (8006884 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006878:	4618      	mov	r0, r3
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr
 8006884:	2000000c 	.word	0x2000000c

08006888 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d101      	bne.n	800689c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006898:	2303      	movs	r3, #3
 800689a:	e004      	b.n	80068a6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	683a      	ldr	r2, [r7, #0]
 80068a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	370c      	adds	r7, #12
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr

080068b2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80068b2:	b480      	push	{r7}
 80068b4:	b087      	sub	sp, #28
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	60f8      	str	r0, [r7, #12]
 80068ba:	60b9      	str	r1, [r7, #8]
 80068bc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068c4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d101      	bne.n	80068d0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e008      	b.n	80068e2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	371c      	adds	r7, #28
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr

080068ee <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80068ee:	b480      	push	{r7}
 80068f0:	b085      	sub	sp, #20
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
 80068f6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068fe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d101      	bne.n	800690a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006906:	2303      	movs	r3, #3
 8006908:	e004      	b.n	8006914 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	683a      	ldr	r2, [r7, #0]
 800690e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3714      	adds	r7, #20
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800692e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006936:	2b00      	cmp	r3, #0
 8006938:	d101      	bne.n	800693e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800693a:	2303      	movs	r3, #3
 800693c:	e016      	b.n	800696c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	7c1b      	ldrb	r3, [r3, #16]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d109      	bne.n	800695a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800694c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006950:	2101      	movs	r1, #1
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f001 ff02 	bl	800875c <USBD_LL_PrepareReceive>
 8006958:	e007      	b.n	800696a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006960:	2340      	movs	r3, #64	; 0x40
 8006962:	2101      	movs	r1, #1
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f001 fef9 	bl	800875c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b086      	sub	sp, #24
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	4613      	mov	r3, r2
 8006980:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d101      	bne.n	800698c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006988:	2303      	movs	r3, #3
 800698a:	e01f      	b.n	80069cc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2200      	movs	r2, #0
 8006998:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d003      	beq.n	80069b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	68ba      	ldr	r2, [r7, #8]
 80069ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2201      	movs	r2, #1
 80069b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	79fa      	ldrb	r2, [r7, #7]
 80069be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f001 fcd3 	bl	800836c <USBD_LL_Init>
 80069c6:	4603      	mov	r3, r0
 80069c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80069ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3718      	adds	r7, #24
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80069de:	2300      	movs	r3, #0
 80069e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d101      	bne.n	80069ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e016      	b.n	8006a1a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00b      	beq.n	8006a18 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a08:	f107 020e 	add.w	r2, r7, #14
 8006a0c:	4610      	mov	r0, r2
 8006a0e:	4798      	blx	r3
 8006a10:	4602      	mov	r2, r0
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b082      	sub	sp, #8
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f001 fcea 	bl	8008404 <USBD_LL_Start>
 8006a30:	4603      	mov	r3, r0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3708      	adds	r7, #8
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b083      	sub	sp, #12
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	460b      	mov	r3, r1
 8006a5a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d009      	beq.n	8006a7e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	78fa      	ldrb	r2, [r7, #3]
 8006a74:	4611      	mov	r1, r2
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	4798      	blx	r3
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3710      	adds	r7, #16
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	460b      	mov	r3, r1
 8006a92:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d007      	beq.n	8006aae <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	78fa      	ldrb	r2, [r7, #3]
 8006aa8:	4611      	mov	r1, r2
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	4798      	blx	r3
  }

  return USBD_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3708      	adds	r7, #8
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ac8:	6839      	ldr	r1, [r7, #0]
 8006aca:	4618      	mov	r0, r3
 8006acc:	f000 ffba 	bl	8007a44 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006ade:	461a      	mov	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006aec:	f003 031f 	and.w	r3, r3, #31
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d01a      	beq.n	8006b2a <USBD_LL_SetupStage+0x72>
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d822      	bhi.n	8006b3e <USBD_LL_SetupStage+0x86>
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d002      	beq.n	8006b02 <USBD_LL_SetupStage+0x4a>
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d00a      	beq.n	8006b16 <USBD_LL_SetupStage+0x5e>
 8006b00:	e01d      	b.n	8006b3e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b08:	4619      	mov	r1, r3
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 fa62 	bl	8006fd4 <USBD_StdDevReq>
 8006b10:	4603      	mov	r3, r0
 8006b12:	73fb      	strb	r3, [r7, #15]
      break;
 8006b14:	e020      	b.n	8006b58 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fac6 	bl	80070b0 <USBD_StdItfReq>
 8006b24:	4603      	mov	r3, r0
 8006b26:	73fb      	strb	r3, [r7, #15]
      break;
 8006b28:	e016      	b.n	8006b58 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b30:	4619      	mov	r1, r3
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 fb05 	bl	8007142 <USBD_StdEPReq>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b3c:	e00c      	b.n	8006b58 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006b44:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f001 fcff 	bl	8008550 <USBD_LL_StallEP>
 8006b52:	4603      	mov	r3, r0
 8006b54:	73fb      	strb	r3, [r7, #15]
      break;
 8006b56:	bf00      	nop
  }

  return ret;
 8006b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b086      	sub	sp, #24
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	60f8      	str	r0, [r7, #12]
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	607a      	str	r2, [r7, #4]
 8006b6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006b70:	7afb      	ldrb	r3, [r7, #11]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d138      	bne.n	8006be8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006b7c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b84:	2b03      	cmp	r3, #3
 8006b86:	d14a      	bne.n	8006c1e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	689a      	ldr	r2, [r3, #8]
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d913      	bls.n	8006bbc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	689a      	ldr	r2, [r3, #8]
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	1ad2      	subs	r2, r2, r3
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	68da      	ldr	r2, [r3, #12]
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	4293      	cmp	r3, r2
 8006bac:	bf28      	it	cs
 8006bae:	4613      	movcs	r3, r2
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	6879      	ldr	r1, [r7, #4]
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f001 f839 	bl	8007c2c <USBD_CtlContinueRx>
 8006bba:	e030      	b.n	8006c1e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	2b03      	cmp	r3, #3
 8006bc6:	d10b      	bne.n	8006be0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d005      	beq.n	8006be0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f001 f834 	bl	8007c4e <USBD_CtlSendStatus>
 8006be6:	e01a      	b.n	8006c1e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	2b03      	cmp	r3, #3
 8006bf2:	d114      	bne.n	8006c1e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bfa:	699b      	ldr	r3, [r3, #24]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00e      	beq.n	8006c1e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c06:	699b      	ldr	r3, [r3, #24]
 8006c08:	7afa      	ldrb	r2, [r7, #11]
 8006c0a:	4611      	mov	r1, r2
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	4798      	blx	r3
 8006c10:	4603      	mov	r3, r0
 8006c12:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006c14:	7dfb      	ldrb	r3, [r7, #23]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d001      	beq.n	8006c1e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006c1a:	7dfb      	ldrb	r3, [r7, #23]
 8006c1c:	e000      	b.n	8006c20 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3718      	adds	r7, #24
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b086      	sub	sp, #24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	460b      	mov	r3, r1
 8006c32:	607a      	str	r2, [r7, #4]
 8006c34:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006c36:	7afb      	ldrb	r3, [r7, #11]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d16b      	bne.n	8006d14 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	3314      	adds	r3, #20
 8006c40:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d156      	bne.n	8006cfa <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	689a      	ldr	r2, [r3, #8]
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d914      	bls.n	8006c82 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	689a      	ldr	r2, [r3, #8]
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	1ad2      	subs	r2, r2, r3
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	6879      	ldr	r1, [r7, #4]
 8006c6e:	68f8      	ldr	r0, [r7, #12]
 8006c70:	f000 ffae 	bl	8007bd0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c74:	2300      	movs	r3, #0
 8006c76:	2200      	movs	r2, #0
 8006c78:	2100      	movs	r1, #0
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f001 fd6e 	bl	800875c <USBD_LL_PrepareReceive>
 8006c80:	e03b      	b.n	8006cfa <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	68da      	ldr	r2, [r3, #12]
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d11c      	bne.n	8006cc8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	685a      	ldr	r2, [r3, #4]
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d316      	bcc.n	8006cc8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	685a      	ldr	r2, [r3, #4]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d20f      	bcs.n	8006cc8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006ca8:	2200      	movs	r2, #0
 8006caa:	2100      	movs	r1, #0
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f000 ff8f 	bl	8007bd0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cba:	2300      	movs	r3, #0
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	2100      	movs	r1, #0
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f001 fd4b 	bl	800875c <USBD_LL_PrepareReceive>
 8006cc6:	e018      	b.n	8006cfa <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	2b03      	cmp	r3, #3
 8006cd2:	d10b      	bne.n	8006cec <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d005      	beq.n	8006cec <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006cec:	2180      	movs	r1, #128	; 0x80
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f001 fc2e 	bl	8008550 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f000 ffbd 	bl	8007c74 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d122      	bne.n	8006d4a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	f7ff fe98 	bl	8006a3a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006d12:	e01a      	b.n	8006d4a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	2b03      	cmp	r3, #3
 8006d1e:	d114      	bne.n	8006d4a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00e      	beq.n	8006d4a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d32:	695b      	ldr	r3, [r3, #20]
 8006d34:	7afa      	ldrb	r2, [r7, #11]
 8006d36:	4611      	mov	r1, r2
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	4798      	blx	r3
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006d40:	7dfb      	ldrb	r3, [r7, #23]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d001      	beq.n	8006d4a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006d46:	7dfb      	ldrb	r3, [r7, #23]
 8006d48:	e000      	b.n	8006d4c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3718      	adds	r7, #24
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d101      	bne.n	8006d88 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006d84:	2303      	movs	r3, #3
 8006d86:	e02f      	b.n	8006de8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00f      	beq.n	8006db2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d009      	beq.n	8006db2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	6852      	ldr	r2, [r2, #4]
 8006daa:	b2d2      	uxtb	r2, r2
 8006dac:	4611      	mov	r1, r2
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006db2:	2340      	movs	r3, #64	; 0x40
 8006db4:	2200      	movs	r2, #0
 8006db6:	2100      	movs	r1, #0
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f001 fb55 	bl	8008468 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2240      	movs	r2, #64	; 0x40
 8006dca:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006dce:	2340      	movs	r3, #64	; 0x40
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	2180      	movs	r1, #128	; 0x80
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f001 fb47 	bl	8008468 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2240      	movs	r2, #64	; 0x40
 8006de4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3708      	adds	r7, #8
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	460b      	mov	r3, r1
 8006dfa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	78fa      	ldrb	r2, [r7, #3]
 8006e00:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e1e:	b2da      	uxtb	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2204      	movs	r2, #4
 8006e2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	2b04      	cmp	r3, #4
 8006e4e:	d106      	bne.n	8006e5e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006e56:	b2da      	uxtb	r2, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d101      	bne.n	8006e82 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e012      	b.n	8006ea8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2b03      	cmp	r3, #3
 8006e8c:	d10b      	bne.n	8006ea6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e94:	69db      	ldr	r3, [r3, #28]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d005      	beq.n	8006ea6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ea0:	69db      	ldr	r3, [r3, #28]
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3708      	adds	r7, #8
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	460b      	mov	r3, r1
 8006eba:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d101      	bne.n	8006eca <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e014      	b.n	8006ef4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b03      	cmp	r3, #3
 8006ed4:	d10d      	bne.n	8006ef2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006edc:	6a1b      	ldr	r3, [r3, #32]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d007      	beq.n	8006ef2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ee8:	6a1b      	ldr	r3, [r3, #32]
 8006eea:	78fa      	ldrb	r2, [r7, #3]
 8006eec:	4611      	mov	r1, r2
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3708      	adds	r7, #8
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	460b      	mov	r3, r1
 8006f06:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d101      	bne.n	8006f16 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e014      	b.n	8006f40 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	2b03      	cmp	r3, #3
 8006f20:	d10d      	bne.n	8006f3e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d007      	beq.n	8006f3e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f36:	78fa      	ldrb	r2, [r7, #3]
 8006f38:	4611      	mov	r1, r2
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3708      	adds	r7, #8
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	370c      	adds	r7, #12
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b082      	sub	sp, #8
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d009      	beq.n	8006f8c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	6852      	ldr	r2, [r2, #4]
 8006f84:	b2d2      	uxtb	r2, r2
 8006f86:	4611      	mov	r1, r2
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	4798      	blx	r3
  }

  return USBD_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3708      	adds	r7, #8
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006f96:	b480      	push	{r7}
 8006f98:	b087      	sub	sp, #28
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	3301      	adds	r3, #1
 8006fac:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006fb4:	8a3b      	ldrh	r3, [r7, #16]
 8006fb6:	021b      	lsls	r3, r3, #8
 8006fb8:	b21a      	sxth	r2, r3
 8006fba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	b21b      	sxth	r3, r3
 8006fc2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006fc4:	89fb      	ldrh	r3, [r7, #14]
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	371c      	adds	r7, #28
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
	...

08006fd4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fea:	2b40      	cmp	r3, #64	; 0x40
 8006fec:	d005      	beq.n	8006ffa <USBD_StdDevReq+0x26>
 8006fee:	2b40      	cmp	r3, #64	; 0x40
 8006ff0:	d853      	bhi.n	800709a <USBD_StdDevReq+0xc6>
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00b      	beq.n	800700e <USBD_StdDevReq+0x3a>
 8006ff6:	2b20      	cmp	r3, #32
 8006ff8:	d14f      	bne.n	800709a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	6839      	ldr	r1, [r7, #0]
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	4798      	blx	r3
 8007008:	4603      	mov	r3, r0
 800700a:	73fb      	strb	r3, [r7, #15]
      break;
 800700c:	e04a      	b.n	80070a4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	785b      	ldrb	r3, [r3, #1]
 8007012:	2b09      	cmp	r3, #9
 8007014:	d83b      	bhi.n	800708e <USBD_StdDevReq+0xba>
 8007016:	a201      	add	r2, pc, #4	; (adr r2, 800701c <USBD_StdDevReq+0x48>)
 8007018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800701c:	08007071 	.word	0x08007071
 8007020:	08007085 	.word	0x08007085
 8007024:	0800708f 	.word	0x0800708f
 8007028:	0800707b 	.word	0x0800707b
 800702c:	0800708f 	.word	0x0800708f
 8007030:	0800704f 	.word	0x0800704f
 8007034:	08007045 	.word	0x08007045
 8007038:	0800708f 	.word	0x0800708f
 800703c:	08007067 	.word	0x08007067
 8007040:	08007059 	.word	0x08007059
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007044:	6839      	ldr	r1, [r7, #0]
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f9de 	bl	8007408 <USBD_GetDescriptor>
          break;
 800704c:	e024      	b.n	8007098 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800704e:	6839      	ldr	r1, [r7, #0]
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 fb6d 	bl	8007730 <USBD_SetAddress>
          break;
 8007056:	e01f      	b.n	8007098 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007058:	6839      	ldr	r1, [r7, #0]
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 fbac 	bl	80077b8 <USBD_SetConfig>
 8007060:	4603      	mov	r3, r0
 8007062:	73fb      	strb	r3, [r7, #15]
          break;
 8007064:	e018      	b.n	8007098 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007066:	6839      	ldr	r1, [r7, #0]
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 fc4b 	bl	8007904 <USBD_GetConfig>
          break;
 800706e:	e013      	b.n	8007098 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007070:	6839      	ldr	r1, [r7, #0]
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 fc7c 	bl	8007970 <USBD_GetStatus>
          break;
 8007078:	e00e      	b.n	8007098 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800707a:	6839      	ldr	r1, [r7, #0]
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 fcab 	bl	80079d8 <USBD_SetFeature>
          break;
 8007082:	e009      	b.n	8007098 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007084:	6839      	ldr	r1, [r7, #0]
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 fcba 	bl	8007a00 <USBD_ClrFeature>
          break;
 800708c:	e004      	b.n	8007098 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800708e:	6839      	ldr	r1, [r7, #0]
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 fd11 	bl	8007ab8 <USBD_CtlError>
          break;
 8007096:	bf00      	nop
      }
      break;
 8007098:	e004      	b.n	80070a4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800709a:	6839      	ldr	r1, [r7, #0]
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 fd0b 	bl	8007ab8 <USBD_CtlError>
      break;
 80070a2:	bf00      	nop
  }

  return ret;
 80070a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop

080070b0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070ba:	2300      	movs	r3, #0
 80070bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070c6:	2b40      	cmp	r3, #64	; 0x40
 80070c8:	d005      	beq.n	80070d6 <USBD_StdItfReq+0x26>
 80070ca:	2b40      	cmp	r3, #64	; 0x40
 80070cc:	d82f      	bhi.n	800712e <USBD_StdItfReq+0x7e>
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d001      	beq.n	80070d6 <USBD_StdItfReq+0x26>
 80070d2:	2b20      	cmp	r3, #32
 80070d4:	d12b      	bne.n	800712e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	3b01      	subs	r3, #1
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d81d      	bhi.n	8007120 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	889b      	ldrh	r3, [r3, #4]
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d813      	bhi.n	8007116 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	6839      	ldr	r1, [r7, #0]
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	4798      	blx	r3
 80070fc:	4603      	mov	r3, r0
 80070fe:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	88db      	ldrh	r3, [r3, #6]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d110      	bne.n	800712a <USBD_StdItfReq+0x7a>
 8007108:	7bfb      	ldrb	r3, [r7, #15]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10d      	bne.n	800712a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fd9d 	bl	8007c4e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007114:	e009      	b.n	800712a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007116:	6839      	ldr	r1, [r7, #0]
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 fccd 	bl	8007ab8 <USBD_CtlError>
          break;
 800711e:	e004      	b.n	800712a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007120:	6839      	ldr	r1, [r7, #0]
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 fcc8 	bl	8007ab8 <USBD_CtlError>
          break;
 8007128:	e000      	b.n	800712c <USBD_StdItfReq+0x7c>
          break;
 800712a:	bf00      	nop
      }
      break;
 800712c:	e004      	b.n	8007138 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800712e:	6839      	ldr	r1, [r7, #0]
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fcc1 	bl	8007ab8 <USBD_CtlError>
      break;
 8007136:	bf00      	nop
  }

  return ret;
 8007138:	7bfb      	ldrb	r3, [r7, #15]
}
 800713a:	4618      	mov	r0, r3
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b084      	sub	sp, #16
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
 800714a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800714c:	2300      	movs	r3, #0
 800714e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	889b      	ldrh	r3, [r3, #4]
 8007154:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800715e:	2b40      	cmp	r3, #64	; 0x40
 8007160:	d007      	beq.n	8007172 <USBD_StdEPReq+0x30>
 8007162:	2b40      	cmp	r3, #64	; 0x40
 8007164:	f200 8145 	bhi.w	80073f2 <USBD_StdEPReq+0x2b0>
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00c      	beq.n	8007186 <USBD_StdEPReq+0x44>
 800716c:	2b20      	cmp	r3, #32
 800716e:	f040 8140 	bne.w	80073f2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	6839      	ldr	r1, [r7, #0]
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	4798      	blx	r3
 8007180:	4603      	mov	r3, r0
 8007182:	73fb      	strb	r3, [r7, #15]
      break;
 8007184:	e13a      	b.n	80073fc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	785b      	ldrb	r3, [r3, #1]
 800718a:	2b03      	cmp	r3, #3
 800718c:	d007      	beq.n	800719e <USBD_StdEPReq+0x5c>
 800718e:	2b03      	cmp	r3, #3
 8007190:	f300 8129 	bgt.w	80073e6 <USBD_StdEPReq+0x2a4>
 8007194:	2b00      	cmp	r3, #0
 8007196:	d07f      	beq.n	8007298 <USBD_StdEPReq+0x156>
 8007198:	2b01      	cmp	r3, #1
 800719a:	d03c      	beq.n	8007216 <USBD_StdEPReq+0xd4>
 800719c:	e123      	b.n	80073e6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d002      	beq.n	80071b0 <USBD_StdEPReq+0x6e>
 80071aa:	2b03      	cmp	r3, #3
 80071ac:	d016      	beq.n	80071dc <USBD_StdEPReq+0x9a>
 80071ae:	e02c      	b.n	800720a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071b0:	7bbb      	ldrb	r3, [r7, #14]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00d      	beq.n	80071d2 <USBD_StdEPReq+0x90>
 80071b6:	7bbb      	ldrb	r3, [r7, #14]
 80071b8:	2b80      	cmp	r3, #128	; 0x80
 80071ba:	d00a      	beq.n	80071d2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80071bc:	7bbb      	ldrb	r3, [r7, #14]
 80071be:	4619      	mov	r1, r3
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f001 f9c5 	bl	8008550 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80071c6:	2180      	movs	r1, #128	; 0x80
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f001 f9c1 	bl	8008550 <USBD_LL_StallEP>
 80071ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80071d0:	e020      	b.n	8007214 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80071d2:	6839      	ldr	r1, [r7, #0]
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 fc6f 	bl	8007ab8 <USBD_CtlError>
              break;
 80071da:	e01b      	b.n	8007214 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	885b      	ldrh	r3, [r3, #2]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10e      	bne.n	8007202 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80071e4:	7bbb      	ldrb	r3, [r7, #14]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00b      	beq.n	8007202 <USBD_StdEPReq+0xc0>
 80071ea:	7bbb      	ldrb	r3, [r7, #14]
 80071ec:	2b80      	cmp	r3, #128	; 0x80
 80071ee:	d008      	beq.n	8007202 <USBD_StdEPReq+0xc0>
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	88db      	ldrh	r3, [r3, #6]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d104      	bne.n	8007202 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80071f8:	7bbb      	ldrb	r3, [r7, #14]
 80071fa:	4619      	mov	r1, r3
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f001 f9a7 	bl	8008550 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fd23 	bl	8007c4e <USBD_CtlSendStatus>

              break;
 8007208:	e004      	b.n	8007214 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800720a:	6839      	ldr	r1, [r7, #0]
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 fc53 	bl	8007ab8 <USBD_CtlError>
              break;
 8007212:	bf00      	nop
          }
          break;
 8007214:	e0ec      	b.n	80073f0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800721c:	b2db      	uxtb	r3, r3
 800721e:	2b02      	cmp	r3, #2
 8007220:	d002      	beq.n	8007228 <USBD_StdEPReq+0xe6>
 8007222:	2b03      	cmp	r3, #3
 8007224:	d016      	beq.n	8007254 <USBD_StdEPReq+0x112>
 8007226:	e030      	b.n	800728a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007228:	7bbb      	ldrb	r3, [r7, #14]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00d      	beq.n	800724a <USBD_StdEPReq+0x108>
 800722e:	7bbb      	ldrb	r3, [r7, #14]
 8007230:	2b80      	cmp	r3, #128	; 0x80
 8007232:	d00a      	beq.n	800724a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007234:	7bbb      	ldrb	r3, [r7, #14]
 8007236:	4619      	mov	r1, r3
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f001 f989 	bl	8008550 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800723e:	2180      	movs	r1, #128	; 0x80
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f001 f985 	bl	8008550 <USBD_LL_StallEP>
 8007246:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007248:	e025      	b.n	8007296 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800724a:	6839      	ldr	r1, [r7, #0]
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 fc33 	bl	8007ab8 <USBD_CtlError>
              break;
 8007252:	e020      	b.n	8007296 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	885b      	ldrh	r3, [r3, #2]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d11b      	bne.n	8007294 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800725c:	7bbb      	ldrb	r3, [r7, #14]
 800725e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007262:	2b00      	cmp	r3, #0
 8007264:	d004      	beq.n	8007270 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007266:	7bbb      	ldrb	r3, [r7, #14]
 8007268:	4619      	mov	r1, r3
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f001 f9a6 	bl	80085bc <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 fcec 	bl	8007c4e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	6839      	ldr	r1, [r7, #0]
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	4798      	blx	r3
 8007284:	4603      	mov	r3, r0
 8007286:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007288:	e004      	b.n	8007294 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800728a:	6839      	ldr	r1, [r7, #0]
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fc13 	bl	8007ab8 <USBD_CtlError>
              break;
 8007292:	e000      	b.n	8007296 <USBD_StdEPReq+0x154>
              break;
 8007294:	bf00      	nop
          }
          break;
 8007296:	e0ab      	b.n	80073f0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d002      	beq.n	80072aa <USBD_StdEPReq+0x168>
 80072a4:	2b03      	cmp	r3, #3
 80072a6:	d032      	beq.n	800730e <USBD_StdEPReq+0x1cc>
 80072a8:	e097      	b.n	80073da <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072aa:	7bbb      	ldrb	r3, [r7, #14]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d007      	beq.n	80072c0 <USBD_StdEPReq+0x17e>
 80072b0:	7bbb      	ldrb	r3, [r7, #14]
 80072b2:	2b80      	cmp	r3, #128	; 0x80
 80072b4:	d004      	beq.n	80072c0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80072b6:	6839      	ldr	r1, [r7, #0]
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fbfd 	bl	8007ab8 <USBD_CtlError>
                break;
 80072be:	e091      	b.n	80073e4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	da0b      	bge.n	80072e0 <USBD_StdEPReq+0x19e>
 80072c8:	7bbb      	ldrb	r3, [r7, #14]
 80072ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072ce:	4613      	mov	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4413      	add	r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	3310      	adds	r3, #16
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	4413      	add	r3, r2
 80072dc:	3304      	adds	r3, #4
 80072de:	e00b      	b.n	80072f8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80072e0:	7bbb      	ldrb	r3, [r7, #14]
 80072e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072e6:	4613      	mov	r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4413      	add	r3, r2
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	4413      	add	r3, r2
 80072f6:	3304      	adds	r3, #4
 80072f8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	2200      	movs	r2, #0
 80072fe:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	2202      	movs	r2, #2
 8007304:	4619      	mov	r1, r3
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 fc47 	bl	8007b9a <USBD_CtlSendData>
              break;
 800730c:	e06a      	b.n	80073e4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800730e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007312:	2b00      	cmp	r3, #0
 8007314:	da11      	bge.n	800733a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007316:	7bbb      	ldrb	r3, [r7, #14]
 8007318:	f003 020f 	and.w	r2, r3, #15
 800731c:	6879      	ldr	r1, [r7, #4]
 800731e:	4613      	mov	r3, r2
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	4413      	add	r3, r2
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	440b      	add	r3, r1
 8007328:	3324      	adds	r3, #36	; 0x24
 800732a:	881b      	ldrh	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d117      	bne.n	8007360 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007330:	6839      	ldr	r1, [r7, #0]
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fbc0 	bl	8007ab8 <USBD_CtlError>
                  break;
 8007338:	e054      	b.n	80073e4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800733a:	7bbb      	ldrb	r3, [r7, #14]
 800733c:	f003 020f 	and.w	r2, r3, #15
 8007340:	6879      	ldr	r1, [r7, #4]
 8007342:	4613      	mov	r3, r2
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	4413      	add	r3, r2
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	440b      	add	r3, r1
 800734c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007350:	881b      	ldrh	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d104      	bne.n	8007360 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007356:	6839      	ldr	r1, [r7, #0]
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 fbad 	bl	8007ab8 <USBD_CtlError>
                  break;
 800735e:	e041      	b.n	80073e4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007360:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007364:	2b00      	cmp	r3, #0
 8007366:	da0b      	bge.n	8007380 <USBD_StdEPReq+0x23e>
 8007368:	7bbb      	ldrb	r3, [r7, #14]
 800736a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800736e:	4613      	mov	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	4413      	add	r3, r2
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	3310      	adds	r3, #16
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	4413      	add	r3, r2
 800737c:	3304      	adds	r3, #4
 800737e:	e00b      	b.n	8007398 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007380:	7bbb      	ldrb	r3, [r7, #14]
 8007382:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007386:	4613      	mov	r3, r2
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	4413      	add	r3, r2
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	4413      	add	r3, r2
 8007396:	3304      	adds	r3, #4
 8007398:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800739a:	7bbb      	ldrb	r3, [r7, #14]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d002      	beq.n	80073a6 <USBD_StdEPReq+0x264>
 80073a0:	7bbb      	ldrb	r3, [r7, #14]
 80073a2:	2b80      	cmp	r3, #128	; 0x80
 80073a4:	d103      	bne.n	80073ae <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	2200      	movs	r2, #0
 80073aa:	601a      	str	r2, [r3, #0]
 80073ac:	e00e      	b.n	80073cc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80073ae:	7bbb      	ldrb	r3, [r7, #14]
 80073b0:	4619      	mov	r1, r3
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f001 f938 	bl	8008628 <USBD_LL_IsStallEP>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d003      	beq.n	80073c6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	2201      	movs	r2, #1
 80073c2:	601a      	str	r2, [r3, #0]
 80073c4:	e002      	b.n	80073cc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	2200      	movs	r2, #0
 80073ca:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	2202      	movs	r2, #2
 80073d0:	4619      	mov	r1, r3
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fbe1 	bl	8007b9a <USBD_CtlSendData>
              break;
 80073d8:	e004      	b.n	80073e4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80073da:	6839      	ldr	r1, [r7, #0]
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 fb6b 	bl	8007ab8 <USBD_CtlError>
              break;
 80073e2:	bf00      	nop
          }
          break;
 80073e4:	e004      	b.n	80073f0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80073e6:	6839      	ldr	r1, [r7, #0]
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 fb65 	bl	8007ab8 <USBD_CtlError>
          break;
 80073ee:	bf00      	nop
      }
      break;
 80073f0:	e004      	b.n	80073fc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80073f2:	6839      	ldr	r1, [r7, #0]
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 fb5f 	bl	8007ab8 <USBD_CtlError>
      break;
 80073fa:	bf00      	nop
  }

  return ret;
 80073fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
	...

08007408 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007412:	2300      	movs	r3, #0
 8007414:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007416:	2300      	movs	r3, #0
 8007418:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800741a:	2300      	movs	r3, #0
 800741c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	885b      	ldrh	r3, [r3, #2]
 8007422:	0a1b      	lsrs	r3, r3, #8
 8007424:	b29b      	uxth	r3, r3
 8007426:	3b01      	subs	r3, #1
 8007428:	2b0e      	cmp	r3, #14
 800742a:	f200 8152 	bhi.w	80076d2 <USBD_GetDescriptor+0x2ca>
 800742e:	a201      	add	r2, pc, #4	; (adr r2, 8007434 <USBD_GetDescriptor+0x2c>)
 8007430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007434:	080074a5 	.word	0x080074a5
 8007438:	080074bd 	.word	0x080074bd
 800743c:	080074fd 	.word	0x080074fd
 8007440:	080076d3 	.word	0x080076d3
 8007444:	080076d3 	.word	0x080076d3
 8007448:	08007673 	.word	0x08007673
 800744c:	0800769f 	.word	0x0800769f
 8007450:	080076d3 	.word	0x080076d3
 8007454:	080076d3 	.word	0x080076d3
 8007458:	080076d3 	.word	0x080076d3
 800745c:	080076d3 	.word	0x080076d3
 8007460:	080076d3 	.word	0x080076d3
 8007464:	080076d3 	.word	0x080076d3
 8007468:	080076d3 	.word	0x080076d3
 800746c:	08007471 	.word	0x08007471
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007476:	69db      	ldr	r3, [r3, #28]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00b      	beq.n	8007494 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007482:	69db      	ldr	r3, [r3, #28]
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	7c12      	ldrb	r2, [r2, #16]
 8007488:	f107 0108 	add.w	r1, r7, #8
 800748c:	4610      	mov	r0, r2
 800748e:	4798      	blx	r3
 8007490:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007492:	e126      	b.n	80076e2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007494:	6839      	ldr	r1, [r7, #0]
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 fb0e 	bl	8007ab8 <USBD_CtlError>
        err++;
 800749c:	7afb      	ldrb	r3, [r7, #11]
 800749e:	3301      	adds	r3, #1
 80074a0:	72fb      	strb	r3, [r7, #11]
      break;
 80074a2:	e11e      	b.n	80076e2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	7c12      	ldrb	r2, [r2, #16]
 80074b0:	f107 0108 	add.w	r1, r7, #8
 80074b4:	4610      	mov	r0, r2
 80074b6:	4798      	blx	r3
 80074b8:	60f8      	str	r0, [r7, #12]
      break;
 80074ba:	e112      	b.n	80076e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	7c1b      	ldrb	r3, [r3, #16]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d10d      	bne.n	80074e0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074cc:	f107 0208 	add.w	r2, r7, #8
 80074d0:	4610      	mov	r0, r2
 80074d2:	4798      	blx	r3
 80074d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	3301      	adds	r3, #1
 80074da:	2202      	movs	r2, #2
 80074dc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80074de:	e100      	b.n	80076e2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e8:	f107 0208 	add.w	r2, r7, #8
 80074ec:	4610      	mov	r0, r2
 80074ee:	4798      	blx	r3
 80074f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	3301      	adds	r3, #1
 80074f6:	2202      	movs	r2, #2
 80074f8:	701a      	strb	r2, [r3, #0]
      break;
 80074fa:	e0f2      	b.n	80076e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	885b      	ldrh	r3, [r3, #2]
 8007500:	b2db      	uxtb	r3, r3
 8007502:	2b05      	cmp	r3, #5
 8007504:	f200 80ac 	bhi.w	8007660 <USBD_GetDescriptor+0x258>
 8007508:	a201      	add	r2, pc, #4	; (adr r2, 8007510 <USBD_GetDescriptor+0x108>)
 800750a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750e:	bf00      	nop
 8007510:	08007529 	.word	0x08007529
 8007514:	0800755d 	.word	0x0800755d
 8007518:	08007591 	.word	0x08007591
 800751c:	080075c5 	.word	0x080075c5
 8007520:	080075f9 	.word	0x080075f9
 8007524:	0800762d 	.word	0x0800762d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00b      	beq.n	800754c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	7c12      	ldrb	r2, [r2, #16]
 8007540:	f107 0108 	add.w	r1, r7, #8
 8007544:	4610      	mov	r0, r2
 8007546:	4798      	blx	r3
 8007548:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800754a:	e091      	b.n	8007670 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800754c:	6839      	ldr	r1, [r7, #0]
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 fab2 	bl	8007ab8 <USBD_CtlError>
            err++;
 8007554:	7afb      	ldrb	r3, [r7, #11]
 8007556:	3301      	adds	r3, #1
 8007558:	72fb      	strb	r3, [r7, #11]
          break;
 800755a:	e089      	b.n	8007670 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00b      	beq.n	8007580 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	7c12      	ldrb	r2, [r2, #16]
 8007574:	f107 0108 	add.w	r1, r7, #8
 8007578:	4610      	mov	r0, r2
 800757a:	4798      	blx	r3
 800757c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800757e:	e077      	b.n	8007670 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007580:	6839      	ldr	r1, [r7, #0]
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 fa98 	bl	8007ab8 <USBD_CtlError>
            err++;
 8007588:	7afb      	ldrb	r3, [r7, #11]
 800758a:	3301      	adds	r3, #1
 800758c:	72fb      	strb	r3, [r7, #11]
          break;
 800758e:	e06f      	b.n	8007670 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00b      	beq.n	80075b4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	7c12      	ldrb	r2, [r2, #16]
 80075a8:	f107 0108 	add.w	r1, r7, #8
 80075ac:	4610      	mov	r0, r2
 80075ae:	4798      	blx	r3
 80075b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075b2:	e05d      	b.n	8007670 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80075b4:	6839      	ldr	r1, [r7, #0]
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 fa7e 	bl	8007ab8 <USBD_CtlError>
            err++;
 80075bc:	7afb      	ldrb	r3, [r7, #11]
 80075be:	3301      	adds	r3, #1
 80075c0:	72fb      	strb	r3, [r7, #11]
          break;
 80075c2:	e055      	b.n	8007670 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00b      	beq.n	80075e8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	7c12      	ldrb	r2, [r2, #16]
 80075dc:	f107 0108 	add.w	r1, r7, #8
 80075e0:	4610      	mov	r0, r2
 80075e2:	4798      	blx	r3
 80075e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075e6:	e043      	b.n	8007670 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80075e8:	6839      	ldr	r1, [r7, #0]
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 fa64 	bl	8007ab8 <USBD_CtlError>
            err++;
 80075f0:	7afb      	ldrb	r3, [r7, #11]
 80075f2:	3301      	adds	r3, #1
 80075f4:	72fb      	strb	r3, [r7, #11]
          break;
 80075f6:	e03b      	b.n	8007670 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075fe:	695b      	ldr	r3, [r3, #20]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00b      	beq.n	800761c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800760a:	695b      	ldr	r3, [r3, #20]
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	7c12      	ldrb	r2, [r2, #16]
 8007610:	f107 0108 	add.w	r1, r7, #8
 8007614:	4610      	mov	r0, r2
 8007616:	4798      	blx	r3
 8007618:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800761a:	e029      	b.n	8007670 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800761c:	6839      	ldr	r1, [r7, #0]
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 fa4a 	bl	8007ab8 <USBD_CtlError>
            err++;
 8007624:	7afb      	ldrb	r3, [r7, #11]
 8007626:	3301      	adds	r3, #1
 8007628:	72fb      	strb	r3, [r7, #11]
          break;
 800762a:	e021      	b.n	8007670 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d00b      	beq.n	8007650 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800763e:	699b      	ldr	r3, [r3, #24]
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	7c12      	ldrb	r2, [r2, #16]
 8007644:	f107 0108 	add.w	r1, r7, #8
 8007648:	4610      	mov	r0, r2
 800764a:	4798      	blx	r3
 800764c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800764e:	e00f      	b.n	8007670 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007650:	6839      	ldr	r1, [r7, #0]
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 fa30 	bl	8007ab8 <USBD_CtlError>
            err++;
 8007658:	7afb      	ldrb	r3, [r7, #11]
 800765a:	3301      	adds	r3, #1
 800765c:	72fb      	strb	r3, [r7, #11]
          break;
 800765e:	e007      	b.n	8007670 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007660:	6839      	ldr	r1, [r7, #0]
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 fa28 	bl	8007ab8 <USBD_CtlError>
          err++;
 8007668:	7afb      	ldrb	r3, [r7, #11]
 800766a:	3301      	adds	r3, #1
 800766c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800766e:	bf00      	nop
      }
      break;
 8007670:	e037      	b.n	80076e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	7c1b      	ldrb	r3, [r3, #16]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d109      	bne.n	800768e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007682:	f107 0208 	add.w	r2, r7, #8
 8007686:	4610      	mov	r0, r2
 8007688:	4798      	blx	r3
 800768a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800768c:	e029      	b.n	80076e2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800768e:	6839      	ldr	r1, [r7, #0]
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 fa11 	bl	8007ab8 <USBD_CtlError>
        err++;
 8007696:	7afb      	ldrb	r3, [r7, #11]
 8007698:	3301      	adds	r3, #1
 800769a:	72fb      	strb	r3, [r7, #11]
      break;
 800769c:	e021      	b.n	80076e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	7c1b      	ldrb	r3, [r3, #16]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d10d      	bne.n	80076c2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ae:	f107 0208 	add.w	r2, r7, #8
 80076b2:	4610      	mov	r0, r2
 80076b4:	4798      	blx	r3
 80076b6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	3301      	adds	r3, #1
 80076bc:	2207      	movs	r2, #7
 80076be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076c0:	e00f      	b.n	80076e2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80076c2:	6839      	ldr	r1, [r7, #0]
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 f9f7 	bl	8007ab8 <USBD_CtlError>
        err++;
 80076ca:	7afb      	ldrb	r3, [r7, #11]
 80076cc:	3301      	adds	r3, #1
 80076ce:	72fb      	strb	r3, [r7, #11]
      break;
 80076d0:	e007      	b.n	80076e2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80076d2:	6839      	ldr	r1, [r7, #0]
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 f9ef 	bl	8007ab8 <USBD_CtlError>
      err++;
 80076da:	7afb      	ldrb	r3, [r7, #11]
 80076dc:	3301      	adds	r3, #1
 80076de:	72fb      	strb	r3, [r7, #11]
      break;
 80076e0:	bf00      	nop
  }

  if (err != 0U)
 80076e2:	7afb      	ldrb	r3, [r7, #11]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d11e      	bne.n	8007726 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	88db      	ldrh	r3, [r3, #6]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d016      	beq.n	800771e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80076f0:	893b      	ldrh	r3, [r7, #8]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00e      	beq.n	8007714 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	88da      	ldrh	r2, [r3, #6]
 80076fa:	893b      	ldrh	r3, [r7, #8]
 80076fc:	4293      	cmp	r3, r2
 80076fe:	bf28      	it	cs
 8007700:	4613      	movcs	r3, r2
 8007702:	b29b      	uxth	r3, r3
 8007704:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007706:	893b      	ldrh	r3, [r7, #8]
 8007708:	461a      	mov	r2, r3
 800770a:	68f9      	ldr	r1, [r7, #12]
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 fa44 	bl	8007b9a <USBD_CtlSendData>
 8007712:	e009      	b.n	8007728 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007714:	6839      	ldr	r1, [r7, #0]
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f9ce 	bl	8007ab8 <USBD_CtlError>
 800771c:	e004      	b.n	8007728 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 fa95 	bl	8007c4e <USBD_CtlSendStatus>
 8007724:	e000      	b.n	8007728 <USBD_GetDescriptor+0x320>
    return;
 8007726:	bf00      	nop
  }
}
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop

08007730 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	889b      	ldrh	r3, [r3, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d131      	bne.n	80077a6 <USBD_SetAddress+0x76>
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	88db      	ldrh	r3, [r3, #6]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d12d      	bne.n	80077a6 <USBD_SetAddress+0x76>
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	885b      	ldrh	r3, [r3, #2]
 800774e:	2b7f      	cmp	r3, #127	; 0x7f
 8007750:	d829      	bhi.n	80077a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	885b      	ldrh	r3, [r3, #2]
 8007756:	b2db      	uxtb	r3, r3
 8007758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800775c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007764:	b2db      	uxtb	r3, r3
 8007766:	2b03      	cmp	r3, #3
 8007768:	d104      	bne.n	8007774 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800776a:	6839      	ldr	r1, [r7, #0]
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 f9a3 	bl	8007ab8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007772:	e01d      	b.n	80077b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	7bfa      	ldrb	r2, [r7, #15]
 8007778:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800777c:	7bfb      	ldrb	r3, [r7, #15]
 800777e:	4619      	mov	r1, r3
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 ff7d 	bl	8008680 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 fa61 	bl	8007c4e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800778c:	7bfb      	ldrb	r3, [r7, #15]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d004      	beq.n	800779c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2202      	movs	r2, #2
 8007796:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800779a:	e009      	b.n	80077b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077a4:	e004      	b.n	80077b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80077a6:	6839      	ldr	r1, [r7, #0]
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 f985 	bl	8007ab8 <USBD_CtlError>
  }
}
 80077ae:	bf00      	nop
 80077b0:	bf00      	nop
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077c2:	2300      	movs	r3, #0
 80077c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	885b      	ldrh	r3, [r3, #2]
 80077ca:	b2da      	uxtb	r2, r3
 80077cc:	4b4c      	ldr	r3, [pc, #304]	; (8007900 <USBD_SetConfig+0x148>)
 80077ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80077d0:	4b4b      	ldr	r3, [pc, #300]	; (8007900 <USBD_SetConfig+0x148>)
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d905      	bls.n	80077e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80077d8:	6839      	ldr	r1, [r7, #0]
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f96c 	bl	8007ab8 <USBD_CtlError>
    return USBD_FAIL;
 80077e0:	2303      	movs	r3, #3
 80077e2:	e088      	b.n	80078f6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	d002      	beq.n	80077f6 <USBD_SetConfig+0x3e>
 80077f0:	2b03      	cmp	r3, #3
 80077f2:	d025      	beq.n	8007840 <USBD_SetConfig+0x88>
 80077f4:	e071      	b.n	80078da <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80077f6:	4b42      	ldr	r3, [pc, #264]	; (8007900 <USBD_SetConfig+0x148>)
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d01c      	beq.n	8007838 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80077fe:	4b40      	ldr	r3, [pc, #256]	; (8007900 <USBD_SetConfig+0x148>)
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	461a      	mov	r2, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007808:	4b3d      	ldr	r3, [pc, #244]	; (8007900 <USBD_SetConfig+0x148>)
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	4619      	mov	r1, r3
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f7ff f91e 	bl	8006a50 <USBD_SetClassConfig>
 8007814:	4603      	mov	r3, r0
 8007816:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007818:	7bfb      	ldrb	r3, [r7, #15]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d004      	beq.n	8007828 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800781e:	6839      	ldr	r1, [r7, #0]
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 f949 	bl	8007ab8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007826:	e065      	b.n	80078f4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fa10 	bl	8007c4e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2203      	movs	r2, #3
 8007832:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007836:	e05d      	b.n	80078f4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 fa08 	bl	8007c4e <USBD_CtlSendStatus>
      break;
 800783e:	e059      	b.n	80078f4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007840:	4b2f      	ldr	r3, [pc, #188]	; (8007900 <USBD_SetConfig+0x148>)
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d112      	bne.n	800786e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2202      	movs	r2, #2
 800784c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007850:	4b2b      	ldr	r3, [pc, #172]	; (8007900 <USBD_SetConfig+0x148>)
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	461a      	mov	r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800785a:	4b29      	ldr	r3, [pc, #164]	; (8007900 <USBD_SetConfig+0x148>)
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	4619      	mov	r1, r3
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f7ff f911 	bl	8006a88 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f9f1 	bl	8007c4e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800786c:	e042      	b.n	80078f4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800786e:	4b24      	ldr	r3, [pc, #144]	; (8007900 <USBD_SetConfig+0x148>)
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	461a      	mov	r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	429a      	cmp	r2, r3
 800787a:	d02a      	beq.n	80078d2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	b2db      	uxtb	r3, r3
 8007882:	4619      	mov	r1, r3
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f7ff f8ff 	bl	8006a88 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800788a:	4b1d      	ldr	r3, [pc, #116]	; (8007900 <USBD_SetConfig+0x148>)
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	461a      	mov	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007894:	4b1a      	ldr	r3, [pc, #104]	; (8007900 <USBD_SetConfig+0x148>)
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	4619      	mov	r1, r3
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f7ff f8d8 	bl	8006a50 <USBD_SetClassConfig>
 80078a0:	4603      	mov	r3, r0
 80078a2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80078a4:	7bfb      	ldrb	r3, [r7, #15]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00f      	beq.n	80078ca <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80078aa:	6839      	ldr	r1, [r7, #0]
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 f903 	bl	8007ab8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	4619      	mov	r1, r3
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f7ff f8e4 	bl	8006a88 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2202      	movs	r2, #2
 80078c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80078c8:	e014      	b.n	80078f4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f9bf 	bl	8007c4e <USBD_CtlSendStatus>
      break;
 80078d0:	e010      	b.n	80078f4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f9bb 	bl	8007c4e <USBD_CtlSendStatus>
      break;
 80078d8:	e00c      	b.n	80078f4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80078da:	6839      	ldr	r1, [r7, #0]
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 f8eb 	bl	8007ab8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80078e2:	4b07      	ldr	r3, [pc, #28]	; (8007900 <USBD_SetConfig+0x148>)
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	4619      	mov	r1, r3
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f7ff f8cd 	bl	8006a88 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80078ee:	2303      	movs	r3, #3
 80078f0:	73fb      	strb	r3, [r7, #15]
      break;
 80078f2:	bf00      	nop
  }

  return ret;
 80078f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	200001d4 	.word	0x200001d4

08007904 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	88db      	ldrh	r3, [r3, #6]
 8007912:	2b01      	cmp	r3, #1
 8007914:	d004      	beq.n	8007920 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007916:	6839      	ldr	r1, [r7, #0]
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 f8cd 	bl	8007ab8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800791e:	e023      	b.n	8007968 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007926:	b2db      	uxtb	r3, r3
 8007928:	2b02      	cmp	r3, #2
 800792a:	dc02      	bgt.n	8007932 <USBD_GetConfig+0x2e>
 800792c:	2b00      	cmp	r3, #0
 800792e:	dc03      	bgt.n	8007938 <USBD_GetConfig+0x34>
 8007930:	e015      	b.n	800795e <USBD_GetConfig+0x5a>
 8007932:	2b03      	cmp	r3, #3
 8007934:	d00b      	beq.n	800794e <USBD_GetConfig+0x4a>
 8007936:	e012      	b.n	800795e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	3308      	adds	r3, #8
 8007942:	2201      	movs	r2, #1
 8007944:	4619      	mov	r1, r3
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f927 	bl	8007b9a <USBD_CtlSendData>
        break;
 800794c:	e00c      	b.n	8007968 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	3304      	adds	r3, #4
 8007952:	2201      	movs	r2, #1
 8007954:	4619      	mov	r1, r3
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 f91f 	bl	8007b9a <USBD_CtlSendData>
        break;
 800795c:	e004      	b.n	8007968 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800795e:	6839      	ldr	r1, [r7, #0]
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 f8a9 	bl	8007ab8 <USBD_CtlError>
        break;
 8007966:	bf00      	nop
}
 8007968:	bf00      	nop
 800796a:	3708      	adds	r7, #8
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007980:	b2db      	uxtb	r3, r3
 8007982:	3b01      	subs	r3, #1
 8007984:	2b02      	cmp	r3, #2
 8007986:	d81e      	bhi.n	80079c6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	88db      	ldrh	r3, [r3, #6]
 800798c:	2b02      	cmp	r3, #2
 800798e:	d004      	beq.n	800799a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007990:	6839      	ldr	r1, [r7, #0]
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f890 	bl	8007ab8 <USBD_CtlError>
        break;
 8007998:	e01a      	b.n	80079d0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2201      	movs	r2, #1
 800799e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d005      	beq.n	80079b6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	f043 0202 	orr.w	r2, r3, #2
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	330c      	adds	r3, #12
 80079ba:	2202      	movs	r2, #2
 80079bc:	4619      	mov	r1, r3
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f8eb 	bl	8007b9a <USBD_CtlSendData>
      break;
 80079c4:	e004      	b.n	80079d0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80079c6:	6839      	ldr	r1, [r7, #0]
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 f875 	bl	8007ab8 <USBD_CtlError>
      break;
 80079ce:	bf00      	nop
  }
}
 80079d0:	bf00      	nop
 80079d2:	3708      	adds	r7, #8
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	885b      	ldrh	r3, [r3, #2]
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d106      	bne.n	80079f8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2201      	movs	r2, #1
 80079ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f92b 	bl	8007c4e <USBD_CtlSendStatus>
  }
}
 80079f8:	bf00      	nop
 80079fa:	3708      	adds	r7, #8
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	3b01      	subs	r3, #1
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	d80b      	bhi.n	8007a30 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	885b      	ldrh	r3, [r3, #2]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d10c      	bne.n	8007a3a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 f910 	bl	8007c4e <USBD_CtlSendStatus>
      }
      break;
 8007a2e:	e004      	b.n	8007a3a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007a30:	6839      	ldr	r1, [r7, #0]
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 f840 	bl	8007ab8 <USBD_CtlError>
      break;
 8007a38:	e000      	b.n	8007a3c <USBD_ClrFeature+0x3c>
      break;
 8007a3a:	bf00      	nop
  }
}
 8007a3c:	bf00      	nop
 8007a3e:	3708      	adds	r7, #8
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	781a      	ldrb	r2, [r3, #0]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	781a      	ldrb	r2, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007a6e:	68f8      	ldr	r0, [r7, #12]
 8007a70:	f7ff fa91 	bl	8006f96 <SWAPBYTE>
 8007a74:	4603      	mov	r3, r0
 8007a76:	461a      	mov	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	3301      	adds	r3, #1
 8007a86:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f7ff fa84 	bl	8006f96 <SWAPBYTE>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	461a      	mov	r2, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	3301      	adds	r3, #1
 8007a9a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	f7ff fa77 	bl	8006f96 <SWAPBYTE>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	461a      	mov	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	80da      	strh	r2, [r3, #6]
}
 8007ab0:	bf00      	nop
 8007ab2:	3710      	adds	r7, #16
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ac2:	2180      	movs	r1, #128	; 0x80
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 fd43 	bl	8008550 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007aca:	2100      	movs	r1, #0
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 fd3f 	bl	8008550 <USBD_LL_StallEP>
}
 8007ad2:	bf00      	nop
 8007ad4:	3708      	adds	r7, #8
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b086      	sub	sp, #24
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	60f8      	str	r0, [r7, #12]
 8007ae2:	60b9      	str	r1, [r7, #8]
 8007ae4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d036      	beq.n	8007b5e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007af4:	6938      	ldr	r0, [r7, #16]
 8007af6:	f000 f836 	bl	8007b66 <USBD_GetLen>
 8007afa:	4603      	mov	r3, r0
 8007afc:	3301      	adds	r3, #1
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	005b      	lsls	r3, r3, #1
 8007b02:	b29a      	uxth	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007b08:	7dfb      	ldrb	r3, [r7, #23]
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	7812      	ldrb	r2, [r2, #0]
 8007b12:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b14:	7dfb      	ldrb	r3, [r7, #23]
 8007b16:	3301      	adds	r3, #1
 8007b18:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007b1a:	7dfb      	ldrb	r3, [r7, #23]
 8007b1c:	68ba      	ldr	r2, [r7, #8]
 8007b1e:	4413      	add	r3, r2
 8007b20:	2203      	movs	r2, #3
 8007b22:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b24:	7dfb      	ldrb	r3, [r7, #23]
 8007b26:	3301      	adds	r3, #1
 8007b28:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007b2a:	e013      	b.n	8007b54 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007b2c:	7dfb      	ldrb	r3, [r7, #23]
 8007b2e:	68ba      	ldr	r2, [r7, #8]
 8007b30:	4413      	add	r3, r2
 8007b32:	693a      	ldr	r2, [r7, #16]
 8007b34:	7812      	ldrb	r2, [r2, #0]
 8007b36:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	613b      	str	r3, [r7, #16]
    idx++;
 8007b3e:	7dfb      	ldrb	r3, [r7, #23]
 8007b40:	3301      	adds	r3, #1
 8007b42:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007b44:	7dfb      	ldrb	r3, [r7, #23]
 8007b46:	68ba      	ldr	r2, [r7, #8]
 8007b48:	4413      	add	r3, r2
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	701a      	strb	r2, [r3, #0]
    idx++;
 8007b4e:	7dfb      	ldrb	r3, [r7, #23]
 8007b50:	3301      	adds	r3, #1
 8007b52:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d1e7      	bne.n	8007b2c <USBD_GetString+0x52>
 8007b5c:	e000      	b.n	8007b60 <USBD_GetString+0x86>
    return;
 8007b5e:	bf00      	nop
  }
}
 8007b60:	3718      	adds	r7, #24
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007b66:	b480      	push	{r7}
 8007b68:	b085      	sub	sp, #20
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007b76:	e005      	b.n	8007b84 <USBD_GetLen+0x1e>
  {
    len++;
 8007b78:	7bfb      	ldrb	r3, [r7, #15]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	3301      	adds	r3, #1
 8007b82:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d1f5      	bne.n	8007b78 <USBD_GetLen+0x12>
  }

  return len;
 8007b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3714      	adds	r7, #20
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr

08007b9a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b084      	sub	sp, #16
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	60f8      	str	r0, [r7, #12]
 8007ba2:	60b9      	str	r1, [r7, #8]
 8007ba4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2202      	movs	r2, #2
 8007baa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	68ba      	ldr	r2, [r7, #8]
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	68f8      	ldr	r0, [r7, #12]
 8007bc2:	f000 fd93 	bl	80086ec <USBD_LL_Transmit>

  return USBD_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3710      	adds	r7, #16
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68ba      	ldr	r2, [r7, #8]
 8007be0:	2100      	movs	r1, #0
 8007be2:	68f8      	ldr	r0, [r7, #12]
 8007be4:	f000 fd82 	bl	80086ec <USBD_LL_Transmit>

  return USBD_OK;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b084      	sub	sp, #16
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	60f8      	str	r0, [r7, #12]
 8007bfa:	60b9      	str	r1, [r7, #8]
 8007bfc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2203      	movs	r2, #3
 8007c02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	68ba      	ldr	r2, [r7, #8]
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	68f8      	ldr	r0, [r7, #12]
 8007c1e:	f000 fd9d 	bl	800875c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3710      	adds	r7, #16
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f000 fd8c 	bl	800875c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b082      	sub	sp, #8
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2204      	movs	r2, #4
 8007c5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c5e:	2300      	movs	r3, #0
 8007c60:	2200      	movs	r2, #0
 8007c62:	2100      	movs	r1, #0
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 fd41 	bl	80086ec <USBD_LL_Transmit>

  return USBD_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3708      	adds	r7, #8
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2205      	movs	r2, #5
 8007c80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c84:	2300      	movs	r3, #0
 8007c86:	2200      	movs	r2, #0
 8007c88:	2100      	movs	r1, #0
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fd66 	bl	800875c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3708      	adds	r7, #8
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
	...

08007c9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	4912      	ldr	r1, [pc, #72]	; (8007cec <MX_USB_DEVICE_Init+0x50>)
 8007ca4:	4812      	ldr	r0, [pc, #72]	; (8007cf0 <MX_USB_DEVICE_Init+0x54>)
 8007ca6:	f7fe fe65 	bl	8006974 <USBD_Init>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d001      	beq.n	8007cb4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007cb0:	f7f8 ffac 	bl	8000c0c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007cb4:	490f      	ldr	r1, [pc, #60]	; (8007cf4 <MX_USB_DEVICE_Init+0x58>)
 8007cb6:	480e      	ldr	r0, [pc, #56]	; (8007cf0 <MX_USB_DEVICE_Init+0x54>)
 8007cb8:	f7fe fe8c 	bl	80069d4 <USBD_RegisterClass>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d001      	beq.n	8007cc6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007cc2:	f7f8 ffa3 	bl	8000c0c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007cc6:	490c      	ldr	r1, [pc, #48]	; (8007cf8 <MX_USB_DEVICE_Init+0x5c>)
 8007cc8:	4809      	ldr	r0, [pc, #36]	; (8007cf0 <MX_USB_DEVICE_Init+0x54>)
 8007cca:	f7fe fddd 	bl	8006888 <USBD_CDC_RegisterInterface>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d001      	beq.n	8007cd8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007cd4:	f7f8 ff9a 	bl	8000c0c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007cd8:	4805      	ldr	r0, [pc, #20]	; (8007cf0 <MX_USB_DEVICE_Init+0x54>)
 8007cda:	f7fe fea2 	bl	8006a22 <USBD_Start>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d001      	beq.n	8007ce8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007ce4:	f7f8 ff92 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007ce8:	bf00      	nop
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	20000130 	.word	0x20000130
 8007cf0:	20000630 	.word	0x20000630
 8007cf4:	20000018 	.word	0x20000018
 8007cf8:	2000011c 	.word	0x2000011c

08007cfc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007d00:	2200      	movs	r2, #0
 8007d02:	4905      	ldr	r1, [pc, #20]	; (8007d18 <CDC_Init_FS+0x1c>)
 8007d04:	4805      	ldr	r0, [pc, #20]	; (8007d1c <CDC_Init_FS+0x20>)
 8007d06:	f7fe fdd4 	bl	80068b2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007d0a:	4905      	ldr	r1, [pc, #20]	; (8007d20 <CDC_Init_FS+0x24>)
 8007d0c:	4803      	ldr	r0, [pc, #12]	; (8007d1c <CDC_Init_FS+0x20>)
 8007d0e:	f7fe fdee 	bl	80068ee <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007d12:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	20001100 	.word	0x20001100
 8007d1c:	20000630 	.word	0x20000630
 8007d20:	20000900 	.word	0x20000900

08007d24 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007d24:	b480      	push	{r7}
 8007d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007d28:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	6039      	str	r1, [r7, #0]
 8007d3e:	71fb      	strb	r3, [r7, #7]
 8007d40:	4613      	mov	r3, r2
 8007d42:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007d44:	79fb      	ldrb	r3, [r7, #7]
 8007d46:	2b23      	cmp	r3, #35	; 0x23
 8007d48:	d84a      	bhi.n	8007de0 <CDC_Control_FS+0xac>
 8007d4a:	a201      	add	r2, pc, #4	; (adr r2, 8007d50 <CDC_Control_FS+0x1c>)
 8007d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d50:	08007de1 	.word	0x08007de1
 8007d54:	08007de1 	.word	0x08007de1
 8007d58:	08007de1 	.word	0x08007de1
 8007d5c:	08007de1 	.word	0x08007de1
 8007d60:	08007de1 	.word	0x08007de1
 8007d64:	08007de1 	.word	0x08007de1
 8007d68:	08007de1 	.word	0x08007de1
 8007d6c:	08007de1 	.word	0x08007de1
 8007d70:	08007de1 	.word	0x08007de1
 8007d74:	08007de1 	.word	0x08007de1
 8007d78:	08007de1 	.word	0x08007de1
 8007d7c:	08007de1 	.word	0x08007de1
 8007d80:	08007de1 	.word	0x08007de1
 8007d84:	08007de1 	.word	0x08007de1
 8007d88:	08007de1 	.word	0x08007de1
 8007d8c:	08007de1 	.word	0x08007de1
 8007d90:	08007de1 	.word	0x08007de1
 8007d94:	08007de1 	.word	0x08007de1
 8007d98:	08007de1 	.word	0x08007de1
 8007d9c:	08007de1 	.word	0x08007de1
 8007da0:	08007de1 	.word	0x08007de1
 8007da4:	08007de1 	.word	0x08007de1
 8007da8:	08007de1 	.word	0x08007de1
 8007dac:	08007de1 	.word	0x08007de1
 8007db0:	08007de1 	.word	0x08007de1
 8007db4:	08007de1 	.word	0x08007de1
 8007db8:	08007de1 	.word	0x08007de1
 8007dbc:	08007de1 	.word	0x08007de1
 8007dc0:	08007de1 	.word	0x08007de1
 8007dc4:	08007de1 	.word	0x08007de1
 8007dc8:	08007de1 	.word	0x08007de1
 8007dcc:	08007de1 	.word	0x08007de1
 8007dd0:	08007de1 	.word	0x08007de1
 8007dd4:	08007de1 	.word	0x08007de1
 8007dd8:	08007de1 	.word	0x08007de1
 8007ddc:	08007de1 	.word	0x08007de1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007de0:	bf00      	nop
  }

  return (USBD_OK);
 8007de2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007dfa:	6879      	ldr	r1, [r7, #4]
 8007dfc:	4805      	ldr	r0, [pc, #20]	; (8007e14 <CDC_Receive_FS+0x24>)
 8007dfe:	f7fe fd76 	bl	80068ee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007e02:	4804      	ldr	r0, [pc, #16]	; (8007e14 <CDC_Receive_FS+0x24>)
 8007e04:	f7fe fd8c 	bl	8006920 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007e08:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3708      	adds	r7, #8
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	20000630 	.word	0x20000630

08007e18 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b087      	sub	sp, #28
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	4613      	mov	r3, r2
 8007e24:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007e26:	2300      	movs	r3, #0
 8007e28:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007e2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	371c      	adds	r7, #28
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr
	...

08007e3c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	4603      	mov	r3, r0
 8007e44:	6039      	str	r1, [r7, #0]
 8007e46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	2212      	movs	r2, #18
 8007e4c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007e4e:	4b03      	ldr	r3, [pc, #12]	; (8007e5c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr
 8007e5c:	20000150 	.word	0x20000150

08007e60 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	4603      	mov	r3, r0
 8007e68:	6039      	str	r1, [r7, #0]
 8007e6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	2204      	movs	r2, #4
 8007e70:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007e72:	4b03      	ldr	r3, [pc, #12]	; (8007e80 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	370c      	adds	r7, #12
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr
 8007e80:	20000170 	.word	0x20000170

08007e84 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	6039      	str	r1, [r7, #0]
 8007e8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e90:	79fb      	ldrb	r3, [r7, #7]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d105      	bne.n	8007ea2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007e96:	683a      	ldr	r2, [r7, #0]
 8007e98:	4907      	ldr	r1, [pc, #28]	; (8007eb8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007e9a:	4808      	ldr	r0, [pc, #32]	; (8007ebc <USBD_FS_ProductStrDescriptor+0x38>)
 8007e9c:	f7ff fe1d 	bl	8007ada <USBD_GetString>
 8007ea0:	e004      	b.n	8007eac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ea2:	683a      	ldr	r2, [r7, #0]
 8007ea4:	4904      	ldr	r1, [pc, #16]	; (8007eb8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ea6:	4805      	ldr	r0, [pc, #20]	; (8007ebc <USBD_FS_ProductStrDescriptor+0x38>)
 8007ea8:	f7ff fe17 	bl	8007ada <USBD_GetString>
  }
  return USBD_StrDesc;
 8007eac:	4b02      	ldr	r3, [pc, #8]	; (8007eb8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3708      	adds	r7, #8
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	20001900 	.word	0x20001900
 8007ebc:	0800893c 	.word	0x0800893c

08007ec0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	6039      	str	r1, [r7, #0]
 8007eca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007ecc:	683a      	ldr	r2, [r7, #0]
 8007ece:	4904      	ldr	r1, [pc, #16]	; (8007ee0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007ed0:	4804      	ldr	r0, [pc, #16]	; (8007ee4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007ed2:	f7ff fe02 	bl	8007ada <USBD_GetString>
  return USBD_StrDesc;
 8007ed6:	4b02      	ldr	r3, [pc, #8]	; (8007ee0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3708      	adds	r7, #8
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	20001900 	.word	0x20001900
 8007ee4:	08008954 	.word	0x08008954

08007ee8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	4603      	mov	r3, r0
 8007ef0:	6039      	str	r1, [r7, #0]
 8007ef2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	221a      	movs	r2, #26
 8007ef8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007efa:	f000 f855 	bl	8007fa8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007efe:	4b02      	ldr	r3, [pc, #8]	; (8007f08 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	20000174 	.word	0x20000174

08007f0c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	4603      	mov	r3, r0
 8007f14:	6039      	str	r1, [r7, #0]
 8007f16:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007f18:	79fb      	ldrb	r3, [r7, #7]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d105      	bne.n	8007f2a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f1e:	683a      	ldr	r2, [r7, #0]
 8007f20:	4907      	ldr	r1, [pc, #28]	; (8007f40 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f22:	4808      	ldr	r0, [pc, #32]	; (8007f44 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f24:	f7ff fdd9 	bl	8007ada <USBD_GetString>
 8007f28:	e004      	b.n	8007f34 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f2a:	683a      	ldr	r2, [r7, #0]
 8007f2c:	4904      	ldr	r1, [pc, #16]	; (8007f40 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f2e:	4805      	ldr	r0, [pc, #20]	; (8007f44 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f30:	f7ff fdd3 	bl	8007ada <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f34:	4b02      	ldr	r3, [pc, #8]	; (8007f40 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3708      	adds	r7, #8
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	20001900 	.word	0x20001900
 8007f44:	08008968 	.word	0x08008968

08007f48 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	4603      	mov	r3, r0
 8007f50:	6039      	str	r1, [r7, #0]
 8007f52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f54:	79fb      	ldrb	r3, [r7, #7]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d105      	bne.n	8007f66 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f5a:	683a      	ldr	r2, [r7, #0]
 8007f5c:	4907      	ldr	r1, [pc, #28]	; (8007f7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f5e:	4808      	ldr	r0, [pc, #32]	; (8007f80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f60:	f7ff fdbb 	bl	8007ada <USBD_GetString>
 8007f64:	e004      	b.n	8007f70 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f66:	683a      	ldr	r2, [r7, #0]
 8007f68:	4904      	ldr	r1, [pc, #16]	; (8007f7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f6a:	4805      	ldr	r0, [pc, #20]	; (8007f80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f6c:	f7ff fdb5 	bl	8007ada <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f70:	4b02      	ldr	r3, [pc, #8]	; (8007f7c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3708      	adds	r7, #8
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	20001900 	.word	0x20001900
 8007f80:	08008974 	.word	0x08008974

08007f84 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	6039      	str	r1, [r7, #0]
 8007f8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	220c      	movs	r2, #12
 8007f94:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8007f96:	4b03      	ldr	r3, [pc, #12]	; (8007fa4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	370c      	adds	r7, #12
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr
 8007fa4:	20000164 	.word	0x20000164

08007fa8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007fae:	4b0f      	ldr	r3, [pc, #60]	; (8007fec <Get_SerialNum+0x44>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007fb4:	4b0e      	ldr	r3, [pc, #56]	; (8007ff0 <Get_SerialNum+0x48>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007fba:	4b0e      	ldr	r3, [pc, #56]	; (8007ff4 <Get_SerialNum+0x4c>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007fc0:	68fa      	ldr	r2, [r7, #12]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d009      	beq.n	8007fe2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007fce:	2208      	movs	r2, #8
 8007fd0:	4909      	ldr	r1, [pc, #36]	; (8007ff8 <Get_SerialNum+0x50>)
 8007fd2:	68f8      	ldr	r0, [r7, #12]
 8007fd4:	f000 f814 	bl	8008000 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007fd8:	2204      	movs	r2, #4
 8007fda:	4908      	ldr	r1, [pc, #32]	; (8007ffc <Get_SerialNum+0x54>)
 8007fdc:	68b8      	ldr	r0, [r7, #8]
 8007fde:	f000 f80f 	bl	8008000 <IntToUnicode>
  }
}
 8007fe2:	bf00      	nop
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	1fff7590 	.word	0x1fff7590
 8007ff0:	1fff7594 	.word	0x1fff7594
 8007ff4:	1fff7598 	.word	0x1fff7598
 8007ff8:	20000176 	.word	0x20000176
 8007ffc:	20000186 	.word	0x20000186

08008000 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008000:	b480      	push	{r7}
 8008002:	b087      	sub	sp, #28
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	4613      	mov	r3, r2
 800800c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800800e:	2300      	movs	r3, #0
 8008010:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008012:	2300      	movs	r3, #0
 8008014:	75fb      	strb	r3, [r7, #23]
 8008016:	e027      	b.n	8008068 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	0f1b      	lsrs	r3, r3, #28
 800801c:	2b09      	cmp	r3, #9
 800801e:	d80b      	bhi.n	8008038 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	0f1b      	lsrs	r3, r3, #28
 8008024:	b2da      	uxtb	r2, r3
 8008026:	7dfb      	ldrb	r3, [r7, #23]
 8008028:	005b      	lsls	r3, r3, #1
 800802a:	4619      	mov	r1, r3
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	440b      	add	r3, r1
 8008030:	3230      	adds	r2, #48	; 0x30
 8008032:	b2d2      	uxtb	r2, r2
 8008034:	701a      	strb	r2, [r3, #0]
 8008036:	e00a      	b.n	800804e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	0f1b      	lsrs	r3, r3, #28
 800803c:	b2da      	uxtb	r2, r3
 800803e:	7dfb      	ldrb	r3, [r7, #23]
 8008040:	005b      	lsls	r3, r3, #1
 8008042:	4619      	mov	r1, r3
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	440b      	add	r3, r1
 8008048:	3237      	adds	r2, #55	; 0x37
 800804a:	b2d2      	uxtb	r2, r2
 800804c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	011b      	lsls	r3, r3, #4
 8008052:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008054:	7dfb      	ldrb	r3, [r7, #23]
 8008056:	005b      	lsls	r3, r3, #1
 8008058:	3301      	adds	r3, #1
 800805a:	68ba      	ldr	r2, [r7, #8]
 800805c:	4413      	add	r3, r2
 800805e:	2200      	movs	r2, #0
 8008060:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008062:	7dfb      	ldrb	r3, [r7, #23]
 8008064:	3301      	adds	r3, #1
 8008066:	75fb      	strb	r3, [r7, #23]
 8008068:	7dfa      	ldrb	r2, [r7, #23]
 800806a:	79fb      	ldrb	r3, [r7, #7]
 800806c:	429a      	cmp	r2, r3
 800806e:	d3d3      	bcc.n	8008018 <IntToUnicode+0x18>
  }
}
 8008070:	bf00      	nop
 8008072:	bf00      	nop
 8008074:	371c      	adds	r7, #28
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr
	...

08008080 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b08a      	sub	sp, #40	; 0x28
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008088:	f107 0314 	add.w	r3, r7, #20
 800808c:	2200      	movs	r2, #0
 800808e:	601a      	str	r2, [r3, #0]
 8008090:	605a      	str	r2, [r3, #4]
 8008092:	609a      	str	r2, [r3, #8]
 8008094:	60da      	str	r2, [r3, #12]
 8008096:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080a0:	d15c      	bne.n	800815c <HAL_PCD_MspInit+0xdc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080a2:	4b30      	ldr	r3, [pc, #192]	; (8008164 <HAL_PCD_MspInit+0xe4>)
 80080a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080a6:	4a2f      	ldr	r2, [pc, #188]	; (8008164 <HAL_PCD_MspInit+0xe4>)
 80080a8:	f043 0301 	orr.w	r3, r3, #1
 80080ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80080ae:	4b2d      	ldr	r3, [pc, #180]	; (8008164 <HAL_PCD_MspInit+0xe4>)
 80080b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080b2:	f003 0301 	and.w	r3, r3, #1
 80080b6:	613b      	str	r3, [r7, #16]
 80080b8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80080ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80080c0:	2300      	movs	r3, #0
 80080c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080c4:	2300      	movs	r3, #0
 80080c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80080c8:	f107 0314 	add.w	r3, r7, #20
 80080cc:	4619      	mov	r1, r3
 80080ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80080d2:	f7f9 fabf 	bl	8001654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80080d6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80080da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080dc:	2302      	movs	r3, #2
 80080de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080e0:	2300      	movs	r3, #0
 80080e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080e4:	2303      	movs	r3, #3
 80080e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80080e8:	230a      	movs	r3, #10
 80080ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080ec:	f107 0314 	add.w	r3, r7, #20
 80080f0:	4619      	mov	r1, r3
 80080f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80080f6:	f7f9 faad 	bl	8001654 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80080fa:	4b1a      	ldr	r3, [pc, #104]	; (8008164 <HAL_PCD_MspInit+0xe4>)
 80080fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080fe:	4a19      	ldr	r2, [pc, #100]	; (8008164 <HAL_PCD_MspInit+0xe4>)
 8008100:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008106:	4b17      	ldr	r3, [pc, #92]	; (8008164 <HAL_PCD_MspInit+0xe4>)
 8008108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800810a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800810e:	60fb      	str	r3, [r7, #12]
 8008110:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008112:	4b14      	ldr	r3, [pc, #80]	; (8008164 <HAL_PCD_MspInit+0xe4>)
 8008114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800811a:	2b00      	cmp	r3, #0
 800811c:	d114      	bne.n	8008148 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800811e:	4b11      	ldr	r3, [pc, #68]	; (8008164 <HAL_PCD_MspInit+0xe4>)
 8008120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008122:	4a10      	ldr	r2, [pc, #64]	; (8008164 <HAL_PCD_MspInit+0xe4>)
 8008124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008128:	6593      	str	r3, [r2, #88]	; 0x58
 800812a:	4b0e      	ldr	r3, [pc, #56]	; (8008164 <HAL_PCD_MspInit+0xe4>)
 800812c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800812e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008132:	60bb      	str	r3, [r7, #8]
 8008134:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8008136:	f7fa feab 	bl	8002e90 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800813a:	4b0a      	ldr	r3, [pc, #40]	; (8008164 <HAL_PCD_MspInit+0xe4>)
 800813c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800813e:	4a09      	ldr	r2, [pc, #36]	; (8008164 <HAL_PCD_MspInit+0xe4>)
 8008140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008144:	6593      	str	r3, [r2, #88]	; 0x58
 8008146:	e001      	b.n	800814c <HAL_PCD_MspInit+0xcc>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8008148:	f7fa fea2 	bl	8002e90 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800814c:	2200      	movs	r2, #0
 800814e:	2100      	movs	r1, #0
 8008150:	2043      	movs	r0, #67	; 0x43
 8008152:	f7f9 f93c 	bl	80013ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008156:	2043      	movs	r0, #67	; 0x43
 8008158:	f7f9 f955 	bl	8001406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800815c:	bf00      	nop
 800815e:	3728      	adds	r7, #40	; 0x28
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}
 8008164:	40021000 	.word	0x40021000

08008168 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800817c:	4619      	mov	r1, r3
 800817e:	4610      	mov	r0, r2
 8008180:	f7fe fc9a 	bl	8006ab8 <USBD_LL_SetupStage>
}
 8008184:	bf00      	nop
 8008186:	3708      	adds	r7, #8
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	460b      	mov	r3, r1
 8008196:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800819e:	78fa      	ldrb	r2, [r7, #3]
 80081a0:	6879      	ldr	r1, [r7, #4]
 80081a2:	4613      	mov	r3, r2
 80081a4:	00db      	lsls	r3, r3, #3
 80081a6:	1a9b      	subs	r3, r3, r2
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	440b      	add	r3, r1
 80081ac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	78fb      	ldrb	r3, [r7, #3]
 80081b4:	4619      	mov	r1, r3
 80081b6:	f7fe fcd4 	bl	8006b62 <USBD_LL_DataOutStage>
}
 80081ba:	bf00      	nop
 80081bc:	3708      	adds	r7, #8
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b082      	sub	sp, #8
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
 80081ca:	460b      	mov	r3, r1
 80081cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80081d4:	78fa      	ldrb	r2, [r7, #3]
 80081d6:	6879      	ldr	r1, [r7, #4]
 80081d8:	4613      	mov	r3, r2
 80081da:	00db      	lsls	r3, r3, #3
 80081dc:	1a9b      	subs	r3, r3, r2
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	440b      	add	r3, r1
 80081e2:	3348      	adds	r3, #72	; 0x48
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	78fb      	ldrb	r3, [r7, #3]
 80081e8:	4619      	mov	r1, r3
 80081ea:	f7fe fd1d 	bl	8006c28 <USBD_LL_DataInStage>
}
 80081ee:	bf00      	nop
 80081f0:	3708      	adds	r7, #8
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b082      	sub	sp, #8
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008204:	4618      	mov	r0, r3
 8008206:	f7fe fe31 	bl	8006e6c <USBD_LL_SOF>
}
 800820a:	bf00      	nop
 800820c:	3708      	adds	r7, #8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b084      	sub	sp, #16
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800821a:	2301      	movs	r3, #1
 800821c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	2b02      	cmp	r3, #2
 8008224:	d001      	beq.n	800822a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008226:	f7f8 fcf1 	bl	8000c0c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008230:	7bfa      	ldrb	r2, [r7, #15]
 8008232:	4611      	mov	r1, r2
 8008234:	4618      	mov	r0, r3
 8008236:	f7fe fddb 	bl	8006df0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008240:	4618      	mov	r0, r3
 8008242:	f7fe fd87 	bl	8006d54 <USBD_LL_Reset>
}
 8008246:	bf00      	nop
 8008248:	3710      	adds	r7, #16
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
	...

08008250 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	6812      	ldr	r2, [r2, #0]
 8008266:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800826a:	f043 0301 	orr.w	r3, r3, #1
 800826e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008276:	4618      	mov	r0, r3
 8008278:	f7fe fdca 	bl	8006e10 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6a1b      	ldr	r3, [r3, #32]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d005      	beq.n	8008290 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008284:	4b04      	ldr	r3, [pc, #16]	; (8008298 <HAL_PCD_SuspendCallback+0x48>)
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	4a03      	ldr	r2, [pc, #12]	; (8008298 <HAL_PCD_SuspendCallback+0x48>)
 800828a:	f043 0306 	orr.w	r3, r3, #6
 800828e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008290:	bf00      	nop
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}
 8008298:	e000ed00 	.word	0xe000ed00

0800829c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	6812      	ldr	r2, [r2, #0]
 80082b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80082b6:	f023 0301 	bic.w	r3, r3, #1
 80082ba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a1b      	ldr	r3, [r3, #32]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d007      	beq.n	80082d4 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80082c4:	4b08      	ldr	r3, [pc, #32]	; (80082e8 <HAL_PCD_ResumeCallback+0x4c>)
 80082c6:	691b      	ldr	r3, [r3, #16]
 80082c8:	4a07      	ldr	r2, [pc, #28]	; (80082e8 <HAL_PCD_ResumeCallback+0x4c>)
 80082ca:	f023 0306 	bic.w	r3, r3, #6
 80082ce:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80082d0:	f000 faf6 	bl	80088c0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80082da:	4618      	mov	r0, r3
 80082dc:	f7fe fdae 	bl	8006e3c <USBD_LL_Resume>
}
 80082e0:	bf00      	nop
 80082e2:	3708      	adds	r7, #8
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	e000ed00 	.word	0xe000ed00

080082ec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	460b      	mov	r3, r1
 80082f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80082fe:	78fa      	ldrb	r2, [r7, #3]
 8008300:	4611      	mov	r1, r2
 8008302:	4618      	mov	r0, r3
 8008304:	f7fe fdfa 	bl	8006efc <USBD_LL_IsoOUTIncomplete>
}
 8008308:	bf00      	nop
 800830a:	3708      	adds	r7, #8
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	460b      	mov	r3, r1
 800831a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008322:	78fa      	ldrb	r2, [r7, #3]
 8008324:	4611      	mov	r1, r2
 8008326:	4618      	mov	r0, r3
 8008328:	f7fe fdc2 	bl	8006eb0 <USBD_LL_IsoINIncomplete>
}
 800832c:	bf00      	nop
 800832e:	3708      	adds	r7, #8
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008342:	4618      	mov	r0, r3
 8008344:	f7fe fe00 	bl	8006f48 <USBD_LL_DevConnected>
}
 8008348:	bf00      	nop
 800834a:	3708      	adds	r7, #8
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800835e:	4618      	mov	r0, r3
 8008360:	f7fe fdfd 	bl	8006f5e <USBD_LL_DevDisconnected>
}
 8008364:	bf00      	nop
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d13c      	bne.n	80083f6 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800837c:	4a20      	ldr	r2, [pc, #128]	; (8008400 <USBD_LL_Init+0x94>)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	4a1e      	ldr	r2, [pc, #120]	; (8008400 <USBD_LL_Init+0x94>)
 8008388:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800838c:	4b1c      	ldr	r3, [pc, #112]	; (8008400 <USBD_LL_Init+0x94>)
 800838e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008392:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008394:	4b1a      	ldr	r3, [pc, #104]	; (8008400 <USBD_LL_Init+0x94>)
 8008396:	2206      	movs	r2, #6
 8008398:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800839a:	4b19      	ldr	r3, [pc, #100]	; (8008400 <USBD_LL_Init+0x94>)
 800839c:	2202      	movs	r2, #2
 800839e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80083a0:	4b17      	ldr	r3, [pc, #92]	; (8008400 <USBD_LL_Init+0x94>)
 80083a2:	2202      	movs	r2, #2
 80083a4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80083a6:	4b16      	ldr	r3, [pc, #88]	; (8008400 <USBD_LL_Init+0x94>)
 80083a8:	2201      	movs	r2, #1
 80083aa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80083ac:	4b14      	ldr	r3, [pc, #80]	; (8008400 <USBD_LL_Init+0x94>)
 80083ae:	2200      	movs	r2, #0
 80083b0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80083b2:	4b13      	ldr	r3, [pc, #76]	; (8008400 <USBD_LL_Init+0x94>)
 80083b4:	2200      	movs	r2, #0
 80083b6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80083b8:	4b11      	ldr	r3, [pc, #68]	; (8008400 <USBD_LL_Init+0x94>)
 80083ba:	2200      	movs	r2, #0
 80083bc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80083be:	4b10      	ldr	r3, [pc, #64]	; (8008400 <USBD_LL_Init+0x94>)
 80083c0:	2200      	movs	r2, #0
 80083c2:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80083c4:	4b0e      	ldr	r3, [pc, #56]	; (8008400 <USBD_LL_Init+0x94>)
 80083c6:	2200      	movs	r2, #0
 80083c8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80083ca:	480d      	ldr	r0, [pc, #52]	; (8008400 <USBD_LL_Init+0x94>)
 80083cc:	f7f9 fc4d 	bl	8001c6a <HAL_PCD_Init>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d001      	beq.n	80083da <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80083d6:	f7f8 fc19 	bl	8000c0c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80083da:	2180      	movs	r1, #128	; 0x80
 80083dc:	4808      	ldr	r0, [pc, #32]	; (8008400 <USBD_LL_Init+0x94>)
 80083de:	f7fa fcae 	bl	8002d3e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80083e2:	2240      	movs	r2, #64	; 0x40
 80083e4:	2100      	movs	r1, #0
 80083e6:	4806      	ldr	r0, [pc, #24]	; (8008400 <USBD_LL_Init+0x94>)
 80083e8:	f7fa fc62 	bl	8002cb0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80083ec:	2280      	movs	r2, #128	; 0x80
 80083ee:	2101      	movs	r1, #1
 80083f0:	4803      	ldr	r0, [pc, #12]	; (8008400 <USBD_LL_Init+0x94>)
 80083f2:	f7fa fc5d 	bl	8002cb0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80083f6:	2300      	movs	r3, #0
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3708      	adds	r7, #8
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	20001b00 	.word	0x20001b00

08008404 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800840c:	2300      	movs	r3, #0
 800840e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008410:	2300      	movs	r3, #0
 8008412:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800841a:	4618      	mov	r0, r3
 800841c:	f7f9 fd49 	bl	8001eb2 <HAL_PCD_Start>
 8008420:	4603      	mov	r3, r0
 8008422:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008424:	7bbb      	ldrb	r3, [r7, #14]
 8008426:	2b03      	cmp	r3, #3
 8008428:	d816      	bhi.n	8008458 <USBD_LL_Start+0x54>
 800842a:	a201      	add	r2, pc, #4	; (adr r2, 8008430 <USBD_LL_Start+0x2c>)
 800842c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008430:	08008441 	.word	0x08008441
 8008434:	08008447 	.word	0x08008447
 8008438:	0800844d 	.word	0x0800844d
 800843c:	08008453 	.word	0x08008453
    case HAL_OK :
      usb_status = USBD_OK;
 8008440:	2300      	movs	r3, #0
 8008442:	73fb      	strb	r3, [r7, #15]
    break;
 8008444:	e00b      	b.n	800845e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008446:	2303      	movs	r3, #3
 8008448:	73fb      	strb	r3, [r7, #15]
    break;
 800844a:	e008      	b.n	800845e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800844c:	2301      	movs	r3, #1
 800844e:	73fb      	strb	r3, [r7, #15]
    break;
 8008450:	e005      	b.n	800845e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008452:	2303      	movs	r3, #3
 8008454:	73fb      	strb	r3, [r7, #15]
    break;
 8008456:	e002      	b.n	800845e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008458:	2303      	movs	r3, #3
 800845a:	73fb      	strb	r3, [r7, #15]
    break;
 800845c:	bf00      	nop
  }
  return usb_status;
 800845e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008460:	4618      	mov	r0, r3
 8008462:	3710      	adds	r7, #16
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	4608      	mov	r0, r1
 8008472:	4611      	mov	r1, r2
 8008474:	461a      	mov	r2, r3
 8008476:	4603      	mov	r3, r0
 8008478:	70fb      	strb	r3, [r7, #3]
 800847a:	460b      	mov	r3, r1
 800847c:	70bb      	strb	r3, [r7, #2]
 800847e:	4613      	mov	r3, r2
 8008480:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008482:	2300      	movs	r3, #0
 8008484:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008486:	2300      	movs	r3, #0
 8008488:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008490:	78bb      	ldrb	r3, [r7, #2]
 8008492:	883a      	ldrh	r2, [r7, #0]
 8008494:	78f9      	ldrb	r1, [r7, #3]
 8008496:	f7fa f904 	bl	80026a2 <HAL_PCD_EP_Open>
 800849a:	4603      	mov	r3, r0
 800849c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800849e:	7bbb      	ldrb	r3, [r7, #14]
 80084a0:	2b03      	cmp	r3, #3
 80084a2:	d817      	bhi.n	80084d4 <USBD_LL_OpenEP+0x6c>
 80084a4:	a201      	add	r2, pc, #4	; (adr r2, 80084ac <USBD_LL_OpenEP+0x44>)
 80084a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084aa:	bf00      	nop
 80084ac:	080084bd 	.word	0x080084bd
 80084b0:	080084c3 	.word	0x080084c3
 80084b4:	080084c9 	.word	0x080084c9
 80084b8:	080084cf 	.word	0x080084cf
    case HAL_OK :
      usb_status = USBD_OK;
 80084bc:	2300      	movs	r3, #0
 80084be:	73fb      	strb	r3, [r7, #15]
    break;
 80084c0:	e00b      	b.n	80084da <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80084c2:	2303      	movs	r3, #3
 80084c4:	73fb      	strb	r3, [r7, #15]
    break;
 80084c6:	e008      	b.n	80084da <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80084c8:	2301      	movs	r3, #1
 80084ca:	73fb      	strb	r3, [r7, #15]
    break;
 80084cc:	e005      	b.n	80084da <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80084ce:	2303      	movs	r3, #3
 80084d0:	73fb      	strb	r3, [r7, #15]
    break;
 80084d2:	e002      	b.n	80084da <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80084d4:	2303      	movs	r3, #3
 80084d6:	73fb      	strb	r3, [r7, #15]
    break;
 80084d8:	bf00      	nop
  }
  return usb_status;
 80084da:	7bfb      	ldrb	r3, [r7, #15]
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3710      	adds	r7, #16
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	460b      	mov	r3, r1
 80084ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084f0:	2300      	movs	r3, #0
 80084f2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084f4:	2300      	movs	r3, #0
 80084f6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80084fe:	78fa      	ldrb	r2, [r7, #3]
 8008500:	4611      	mov	r1, r2
 8008502:	4618      	mov	r0, r3
 8008504:	f7fa f935 	bl	8002772 <HAL_PCD_EP_Close>
 8008508:	4603      	mov	r3, r0
 800850a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800850c:	7bbb      	ldrb	r3, [r7, #14]
 800850e:	2b03      	cmp	r3, #3
 8008510:	d816      	bhi.n	8008540 <USBD_LL_CloseEP+0x5c>
 8008512:	a201      	add	r2, pc, #4	; (adr r2, 8008518 <USBD_LL_CloseEP+0x34>)
 8008514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008518:	08008529 	.word	0x08008529
 800851c:	0800852f 	.word	0x0800852f
 8008520:	08008535 	.word	0x08008535
 8008524:	0800853b 	.word	0x0800853b
    case HAL_OK :
      usb_status = USBD_OK;
 8008528:	2300      	movs	r3, #0
 800852a:	73fb      	strb	r3, [r7, #15]
    break;
 800852c:	e00b      	b.n	8008546 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800852e:	2303      	movs	r3, #3
 8008530:	73fb      	strb	r3, [r7, #15]
    break;
 8008532:	e008      	b.n	8008546 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008534:	2301      	movs	r3, #1
 8008536:	73fb      	strb	r3, [r7, #15]
    break;
 8008538:	e005      	b.n	8008546 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800853a:	2303      	movs	r3, #3
 800853c:	73fb      	strb	r3, [r7, #15]
    break;
 800853e:	e002      	b.n	8008546 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008540:	2303      	movs	r3, #3
 8008542:	73fb      	strb	r3, [r7, #15]
    break;
 8008544:	bf00      	nop
  }
  return usb_status;
 8008546:	7bfb      	ldrb	r3, [r7, #15]
}
 8008548:	4618      	mov	r0, r3
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	460b      	mov	r3, r1
 800855a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800855c:	2300      	movs	r3, #0
 800855e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008560:	2300      	movs	r3, #0
 8008562:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800856a:	78fa      	ldrb	r2, [r7, #3]
 800856c:	4611      	mov	r1, r2
 800856e:	4618      	mov	r0, r3
 8008570:	f7fa f9dc 	bl	800292c <HAL_PCD_EP_SetStall>
 8008574:	4603      	mov	r3, r0
 8008576:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008578:	7bbb      	ldrb	r3, [r7, #14]
 800857a:	2b03      	cmp	r3, #3
 800857c:	d816      	bhi.n	80085ac <USBD_LL_StallEP+0x5c>
 800857e:	a201      	add	r2, pc, #4	; (adr r2, 8008584 <USBD_LL_StallEP+0x34>)
 8008580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008584:	08008595 	.word	0x08008595
 8008588:	0800859b 	.word	0x0800859b
 800858c:	080085a1 	.word	0x080085a1
 8008590:	080085a7 	.word	0x080085a7
    case HAL_OK :
      usb_status = USBD_OK;
 8008594:	2300      	movs	r3, #0
 8008596:	73fb      	strb	r3, [r7, #15]
    break;
 8008598:	e00b      	b.n	80085b2 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800859a:	2303      	movs	r3, #3
 800859c:	73fb      	strb	r3, [r7, #15]
    break;
 800859e:	e008      	b.n	80085b2 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80085a0:	2301      	movs	r3, #1
 80085a2:	73fb      	strb	r3, [r7, #15]
    break;
 80085a4:	e005      	b.n	80085b2 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80085a6:	2303      	movs	r3, #3
 80085a8:	73fb      	strb	r3, [r7, #15]
    break;
 80085aa:	e002      	b.n	80085b2 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80085ac:	2303      	movs	r3, #3
 80085ae:	73fb      	strb	r3, [r7, #15]
    break;
 80085b0:	bf00      	nop
  }
  return usb_status;
 80085b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3710      	adds	r7, #16
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	460b      	mov	r3, r1
 80085c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085c8:	2300      	movs	r3, #0
 80085ca:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085cc:	2300      	movs	r3, #0
 80085ce:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80085d6:	78fa      	ldrb	r2, [r7, #3]
 80085d8:	4611      	mov	r1, r2
 80085da:	4618      	mov	r0, r3
 80085dc:	f7fa fa08 	bl	80029f0 <HAL_PCD_EP_ClrStall>
 80085e0:	4603      	mov	r3, r0
 80085e2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80085e4:	7bbb      	ldrb	r3, [r7, #14]
 80085e6:	2b03      	cmp	r3, #3
 80085e8:	d816      	bhi.n	8008618 <USBD_LL_ClearStallEP+0x5c>
 80085ea:	a201      	add	r2, pc, #4	; (adr r2, 80085f0 <USBD_LL_ClearStallEP+0x34>)
 80085ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f0:	08008601 	.word	0x08008601
 80085f4:	08008607 	.word	0x08008607
 80085f8:	0800860d 	.word	0x0800860d
 80085fc:	08008613 	.word	0x08008613
    case HAL_OK :
      usb_status = USBD_OK;
 8008600:	2300      	movs	r3, #0
 8008602:	73fb      	strb	r3, [r7, #15]
    break;
 8008604:	e00b      	b.n	800861e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008606:	2303      	movs	r3, #3
 8008608:	73fb      	strb	r3, [r7, #15]
    break;
 800860a:	e008      	b.n	800861e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800860c:	2301      	movs	r3, #1
 800860e:	73fb      	strb	r3, [r7, #15]
    break;
 8008610:	e005      	b.n	800861e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008612:	2303      	movs	r3, #3
 8008614:	73fb      	strb	r3, [r7, #15]
    break;
 8008616:	e002      	b.n	800861e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008618:	2303      	movs	r3, #3
 800861a:	73fb      	strb	r3, [r7, #15]
    break;
 800861c:	bf00      	nop
  }
  return usb_status;
 800861e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008620:	4618      	mov	r0, r3
 8008622:	3710      	adds	r7, #16
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008628:	b480      	push	{r7}
 800862a:	b085      	sub	sp, #20
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	460b      	mov	r3, r1
 8008632:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800863a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800863c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008640:	2b00      	cmp	r3, #0
 8008642:	da0b      	bge.n	800865c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008644:	78fb      	ldrb	r3, [r7, #3]
 8008646:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800864a:	68f9      	ldr	r1, [r7, #12]
 800864c:	4613      	mov	r3, r2
 800864e:	00db      	lsls	r3, r3, #3
 8008650:	1a9b      	subs	r3, r3, r2
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	440b      	add	r3, r1
 8008656:	333e      	adds	r3, #62	; 0x3e
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	e00b      	b.n	8008674 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800865c:	78fb      	ldrb	r3, [r7, #3]
 800865e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008662:	68f9      	ldr	r1, [r7, #12]
 8008664:	4613      	mov	r3, r2
 8008666:	00db      	lsls	r3, r3, #3
 8008668:	1a9b      	subs	r3, r3, r2
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	440b      	add	r3, r1
 800866e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008672:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008674:	4618      	mov	r0, r3
 8008676:	3714      	adds	r7, #20
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	460b      	mov	r3, r1
 800868a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800868c:	2300      	movs	r3, #0
 800868e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008690:	2300      	movs	r3, #0
 8008692:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800869a:	78fa      	ldrb	r2, [r7, #3]
 800869c:	4611      	mov	r1, r2
 800869e:	4618      	mov	r0, r3
 80086a0:	f7f9 ffda 	bl	8002658 <HAL_PCD_SetAddress>
 80086a4:	4603      	mov	r3, r0
 80086a6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80086a8:	7bbb      	ldrb	r3, [r7, #14]
 80086aa:	2b03      	cmp	r3, #3
 80086ac:	d816      	bhi.n	80086dc <USBD_LL_SetUSBAddress+0x5c>
 80086ae:	a201      	add	r2, pc, #4	; (adr r2, 80086b4 <USBD_LL_SetUSBAddress+0x34>)
 80086b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b4:	080086c5 	.word	0x080086c5
 80086b8:	080086cb 	.word	0x080086cb
 80086bc:	080086d1 	.word	0x080086d1
 80086c0:	080086d7 	.word	0x080086d7
    case HAL_OK :
      usb_status = USBD_OK;
 80086c4:	2300      	movs	r3, #0
 80086c6:	73fb      	strb	r3, [r7, #15]
    break;
 80086c8:	e00b      	b.n	80086e2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80086ca:	2303      	movs	r3, #3
 80086cc:	73fb      	strb	r3, [r7, #15]
    break;
 80086ce:	e008      	b.n	80086e2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80086d0:	2301      	movs	r3, #1
 80086d2:	73fb      	strb	r3, [r7, #15]
    break;
 80086d4:	e005      	b.n	80086e2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80086d6:	2303      	movs	r3, #3
 80086d8:	73fb      	strb	r3, [r7, #15]
    break;
 80086da:	e002      	b.n	80086e2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 80086dc:	2303      	movs	r3, #3
 80086de:	73fb      	strb	r3, [r7, #15]
    break;
 80086e0:	bf00      	nop
  }
  return usb_status;
 80086e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3710      	adds	r7, #16
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b086      	sub	sp, #24
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	607a      	str	r2, [r7, #4]
 80086f6:	603b      	str	r3, [r7, #0]
 80086f8:	460b      	mov	r3, r1
 80086fa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086fc:	2300      	movs	r3, #0
 80086fe:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008700:	2300      	movs	r3, #0
 8008702:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800870a:	7af9      	ldrb	r1, [r7, #11]
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	f7fa f8cf 	bl	80028b2 <HAL_PCD_EP_Transmit>
 8008714:	4603      	mov	r3, r0
 8008716:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008718:	7dbb      	ldrb	r3, [r7, #22]
 800871a:	2b03      	cmp	r3, #3
 800871c:	d816      	bhi.n	800874c <USBD_LL_Transmit+0x60>
 800871e:	a201      	add	r2, pc, #4	; (adr r2, 8008724 <USBD_LL_Transmit+0x38>)
 8008720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008724:	08008735 	.word	0x08008735
 8008728:	0800873b 	.word	0x0800873b
 800872c:	08008741 	.word	0x08008741
 8008730:	08008747 	.word	0x08008747
    case HAL_OK :
      usb_status = USBD_OK;
 8008734:	2300      	movs	r3, #0
 8008736:	75fb      	strb	r3, [r7, #23]
    break;
 8008738:	e00b      	b.n	8008752 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800873a:	2303      	movs	r3, #3
 800873c:	75fb      	strb	r3, [r7, #23]
    break;
 800873e:	e008      	b.n	8008752 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008740:	2301      	movs	r3, #1
 8008742:	75fb      	strb	r3, [r7, #23]
    break;
 8008744:	e005      	b.n	8008752 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008746:	2303      	movs	r3, #3
 8008748:	75fb      	strb	r3, [r7, #23]
    break;
 800874a:	e002      	b.n	8008752 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800874c:	2303      	movs	r3, #3
 800874e:	75fb      	strb	r3, [r7, #23]
    break;
 8008750:	bf00      	nop
  }
  return usb_status;
 8008752:	7dfb      	ldrb	r3, [r7, #23]
}
 8008754:	4618      	mov	r0, r3
 8008756:	3718      	adds	r7, #24
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b086      	sub	sp, #24
 8008760:	af00      	add	r7, sp, #0
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	607a      	str	r2, [r7, #4]
 8008766:	603b      	str	r3, [r7, #0]
 8008768:	460b      	mov	r3, r1
 800876a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800876c:	2300      	movs	r3, #0
 800876e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008770:	2300      	movs	r3, #0
 8008772:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800877a:	7af9      	ldrb	r1, [r7, #11]
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	f7fa f841 	bl	8002806 <HAL_PCD_EP_Receive>
 8008784:	4603      	mov	r3, r0
 8008786:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008788:	7dbb      	ldrb	r3, [r7, #22]
 800878a:	2b03      	cmp	r3, #3
 800878c:	d816      	bhi.n	80087bc <USBD_LL_PrepareReceive+0x60>
 800878e:	a201      	add	r2, pc, #4	; (adr r2, 8008794 <USBD_LL_PrepareReceive+0x38>)
 8008790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008794:	080087a5 	.word	0x080087a5
 8008798:	080087ab 	.word	0x080087ab
 800879c:	080087b1 	.word	0x080087b1
 80087a0:	080087b7 	.word	0x080087b7
    case HAL_OK :
      usb_status = USBD_OK;
 80087a4:	2300      	movs	r3, #0
 80087a6:	75fb      	strb	r3, [r7, #23]
    break;
 80087a8:	e00b      	b.n	80087c2 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80087aa:	2303      	movs	r3, #3
 80087ac:	75fb      	strb	r3, [r7, #23]
    break;
 80087ae:	e008      	b.n	80087c2 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80087b0:	2301      	movs	r3, #1
 80087b2:	75fb      	strb	r3, [r7, #23]
    break;
 80087b4:	e005      	b.n	80087c2 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80087b6:	2303      	movs	r3, #3
 80087b8:	75fb      	strb	r3, [r7, #23]
    break;
 80087ba:	e002      	b.n	80087c2 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80087bc:	2303      	movs	r3, #3
 80087be:	75fb      	strb	r3, [r7, #23]
    break;
 80087c0:	bf00      	nop
  }
  return usb_status;
 80087c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3718      	adds	r7, #24
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	460b      	mov	r3, r1
 80087d6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80087de:	78fa      	ldrb	r2, [r7, #3]
 80087e0:	4611      	mov	r1, r2
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7fa f84d 	bl	8002882 <HAL_PCD_EP_GetRxCount>
 80087e8:	4603      	mov	r3, r0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3708      	adds	r7, #8
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
	...

080087f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	460b      	mov	r3, r1
 80087fe:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008800:	78fb      	ldrb	r3, [r7, #3]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d002      	beq.n	800880c <HAL_PCDEx_LPM_Callback+0x18>
 8008806:	2b01      	cmp	r3, #1
 8008808:	d01f      	beq.n	800884a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800880a:	e03b      	b.n	8008884 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6a1b      	ldr	r3, [r3, #32]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d007      	beq.n	8008824 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008814:	f000 f854 	bl	80088c0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008818:	4b1c      	ldr	r3, [pc, #112]	; (800888c <HAL_PCDEx_LPM_Callback+0x98>)
 800881a:	691b      	ldr	r3, [r3, #16]
 800881c:	4a1b      	ldr	r2, [pc, #108]	; (800888c <HAL_PCDEx_LPM_Callback+0x98>)
 800881e:	f023 0306 	bic.w	r3, r3, #6
 8008822:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	6812      	ldr	r2, [r2, #0]
 8008832:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008836:	f023 0301 	bic.w	r3, r3, #1
 800883a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008842:	4618      	mov	r0, r3
 8008844:	f7fe fafa 	bl	8006e3c <USBD_LL_Resume>
    break;
 8008848:	e01c      	b.n	8008884 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	6812      	ldr	r2, [r2, #0]
 8008858:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800885c:	f043 0301 	orr.w	r3, r3, #1
 8008860:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008868:	4618      	mov	r0, r3
 800886a:	f7fe fad1 	bl	8006e10 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6a1b      	ldr	r3, [r3, #32]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d005      	beq.n	8008882 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008876:	4b05      	ldr	r3, [pc, #20]	; (800888c <HAL_PCDEx_LPM_Callback+0x98>)
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	4a04      	ldr	r2, [pc, #16]	; (800888c <HAL_PCDEx_LPM_Callback+0x98>)
 800887c:	f043 0306 	orr.w	r3, r3, #6
 8008880:	6113      	str	r3, [r2, #16]
    break;
 8008882:	bf00      	nop
}
 8008884:	bf00      	nop
 8008886:	3708      	adds	r7, #8
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}
 800888c:	e000ed00 	.word	0xe000ed00

08008890 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008898:	4b03      	ldr	r3, [pc, #12]	; (80088a8 <USBD_static_malloc+0x18>)
}
 800889a:	4618      	mov	r0, r3
 800889c:	370c      	adds	r7, #12
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr
 80088a6:	bf00      	nop
 80088a8:	200001d8 	.word	0x200001d8

080088ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]

}
 80088b4:	bf00      	nop
 80088b6:	370c      	adds	r7, #12
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80088c4:	f7f7 fe14 	bl	80004f0 <SystemClock_Config>
}
 80088c8:	bf00      	nop
 80088ca:	bd80      	pop	{r7, pc}

080088cc <__libc_init_array>:
 80088cc:	b570      	push	{r4, r5, r6, lr}
 80088ce:	4d0d      	ldr	r5, [pc, #52]	; (8008904 <__libc_init_array+0x38>)
 80088d0:	4c0d      	ldr	r4, [pc, #52]	; (8008908 <__libc_init_array+0x3c>)
 80088d2:	1b64      	subs	r4, r4, r5
 80088d4:	10a4      	asrs	r4, r4, #2
 80088d6:	2600      	movs	r6, #0
 80088d8:	42a6      	cmp	r6, r4
 80088da:	d109      	bne.n	80088f0 <__libc_init_array+0x24>
 80088dc:	4d0b      	ldr	r5, [pc, #44]	; (800890c <__libc_init_array+0x40>)
 80088de:	4c0c      	ldr	r4, [pc, #48]	; (8008910 <__libc_init_array+0x44>)
 80088e0:	f000 f820 	bl	8008924 <_init>
 80088e4:	1b64      	subs	r4, r4, r5
 80088e6:	10a4      	asrs	r4, r4, #2
 80088e8:	2600      	movs	r6, #0
 80088ea:	42a6      	cmp	r6, r4
 80088ec:	d105      	bne.n	80088fa <__libc_init_array+0x2e>
 80088ee:	bd70      	pop	{r4, r5, r6, pc}
 80088f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80088f4:	4798      	blx	r3
 80088f6:	3601      	adds	r6, #1
 80088f8:	e7ee      	b.n	80088d8 <__libc_init_array+0xc>
 80088fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80088fe:	4798      	blx	r3
 8008900:	3601      	adds	r6, #1
 8008902:	e7f2      	b.n	80088ea <__libc_init_array+0x1e>
 8008904:	080089d4 	.word	0x080089d4
 8008908:	080089d4 	.word	0x080089d4
 800890c:	080089d4 	.word	0x080089d4
 8008910:	080089d8 	.word	0x080089d8

08008914 <memset>:
 8008914:	4402      	add	r2, r0
 8008916:	4603      	mov	r3, r0
 8008918:	4293      	cmp	r3, r2
 800891a:	d100      	bne.n	800891e <memset+0xa>
 800891c:	4770      	bx	lr
 800891e:	f803 1b01 	strb.w	r1, [r3], #1
 8008922:	e7f9      	b.n	8008918 <memset+0x4>

08008924 <_init>:
 8008924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008926:	bf00      	nop
 8008928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800892a:	bc08      	pop	{r3}
 800892c:	469e      	mov	lr, r3
 800892e:	4770      	bx	lr

08008930 <_fini>:
 8008930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008932:	bf00      	nop
 8008934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008936:	bc08      	pop	{r3}
 8008938:	469e      	mov	lr, r3
 800893a:	4770      	bx	lr


UCSD-Embedded-HW-Interfacing-Serial-Nathan-Bunnell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a30  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08006bc0  08006bc0  00016bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d08  08006d08  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  08006d08  08006d08  00016d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d10  08006d10  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d10  08006d10  00016d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d14  08006d14  00016d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08006d18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b8  200000b0  08006dc8  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000868  08006dc8  00020868  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001abd2  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032f6  00000000  00000000  0003acb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001690  00000000  00000000  0003dfa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001548  00000000  00000000  0003f638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000284d2  00000000  00000000  00040b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018818  00000000  00000000  00069052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3c8f  00000000  00000000  0008186a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001754f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006414  00000000  00000000  0017554c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b0 	.word	0x200000b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006ba8 	.word	0x08006ba8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	08006ba8 	.word	0x08006ba8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <do_polling>:

// Define an interrupt-complete flag
static int do_interrupt_done = 0;

static void do_polling(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b0a0      	sub	sp, #128	; 0x80
 800057c:	af02      	add	r7, sp, #8
	// Get pointers to data buffers
	char* txBuffPtr = txBuffer;
 800057e:	4b29      	ldr	r3, [pc, #164]	; (8000624 <do_polling+0xac>)
 8000580:	677b      	str	r3, [r7, #116]	; 0x74
	char* rxBuffPtr = rxBuffer;
 8000582:	4b29      	ldr	r3, [pc, #164]	; (8000628 <do_polling+0xb0>)
 8000584:	673b      	str	r3, [r7, #112]	; 0x70

	// Fill RX data buffer with known value ('?')
	for (int i = 0; i < sizeof(rxBuffer); i++)
 8000586:	2300      	movs	r3, #0
 8000588:	66fb      	str	r3, [r7, #108]	; 0x6c
 800058a:	e007      	b.n	800059c <do_polling+0x24>
	{
		rxBuffer[i] = '?';
 800058c:	4a26      	ldr	r2, [pc, #152]	; (8000628 <do_polling+0xb0>)
 800058e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000590:	4413      	add	r3, r2
 8000592:	223f      	movs	r2, #63	; 0x3f
 8000594:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(rxBuffer); i++)
 8000596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000598:	3301      	adds	r3, #1
 800059a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800059c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800059e:	2b1d      	cmp	r3, #29
 80005a0:	d9f4      	bls.n	800058c <do_polling+0x14>

	// Do-loop with body of functional code
	do
	{
		// Pipe out a heartbeat indicator ('.')
		char ch = '.';
 80005a2:	232e      	movs	r3, #46	; 0x2e
 80005a4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
		HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 100);
 80005a8:	f107 016b 	add.w	r1, r7, #107	; 0x6b
 80005ac:	2364      	movs	r3, #100	; 0x64
 80005ae:	2201      	movs	r2, #1
 80005b0:	481e      	ldr	r0, [pc, #120]	; (800062c <do_polling+0xb4>)
 80005b2:	f003 ff98 	bl	80044e6 <HAL_UART_Transmit>

		// Transceive a character from the data buffers
		//
		// WARNING: This functionality is predicated on
		// UART4 being hard-wired into loopback mode!
		HAL_UART_Transmit(&huart4, (uint8_t*) txBuffPtr, 1, 100);
 80005b6:	2364      	movs	r3, #100	; 0x64
 80005b8:	2201      	movs	r2, #1
 80005ba:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80005bc:	481c      	ldr	r0, [pc, #112]	; (8000630 <do_polling+0xb8>)
 80005be:	f003 ff92 	bl	80044e6 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart4, (uint8_t*) rxBuffPtr, 1, 100);
 80005c2:	2364      	movs	r3, #100	; 0x64
 80005c4:	2201      	movs	r2, #1
 80005c6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80005c8:	4819      	ldr	r0, [pc, #100]	; (8000630 <do_polling+0xb8>)
 80005ca:	f004 f820 	bl	800460e <HAL_UART_Receive>
		// Duplicate output from TX data buffer to UART1 to show the actual data
		// Should result in output similar to ".a.b.c"...
		//HAL_UART_Transmit(&huart1, (uint8_t*) txBuffPtr, 1, 100);

		// Error check comparison of buffer values
		if (*txBuffPtr != *rxBuffPtr)
 80005ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80005d0:	781a      	ldrb	r2, [r3, #0]
 80005d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d011      	beq.n	80005fe <do_polling+0x86>
		{
			char errorBuffer[100];
			snprintf(errorBuffer, sizeof(errorBuffer), "\r\nError: 0x%02x != 0x%02x\r\n", *txBuffPtr, *rxBuffPtr);
 80005da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	461a      	mov	r2, r3
 80005e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	1d38      	adds	r0, r7, #4
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	4613      	mov	r3, r2
 80005ea:	4a12      	ldr	r2, [pc, #72]	; (8000634 <do_polling+0xbc>)
 80005ec:	2164      	movs	r1, #100	; 0x64
 80005ee:	f005 fe99 	bl	8006324 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) errorBuffer, sizeof(errorBuffer), 100);
 80005f2:	1d39      	adds	r1, r7, #4
 80005f4:	2364      	movs	r3, #100	; 0x64
 80005f6:	2264      	movs	r2, #100	; 0x64
 80005f8:	480c      	ldr	r0, [pc, #48]	; (800062c <do_polling+0xb4>)
 80005fa:	f003 ff74 	bl	80044e6 <HAL_UART_Transmit>
		}

		// Increment pointers to both data buffers
		*txBuffPtr++;
 80005fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000600:	3301      	adds	r3, #1
 8000602:	677b      	str	r3, [r7, #116]	; 0x74
		*rxBuffPtr++;
 8000604:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000606:	3301      	adds	r3, #1
 8000608:	673b      	str	r3, [r7, #112]	; 0x70

		HAL_Delay(100);
 800060a:	2064      	movs	r0, #100	; 0x64
 800060c:	f001 f976 	bl	80018fc <HAL_Delay>

	// Maintain loop through length of transmit data buffer
	} while (txBuffPtr < (txBuffer + sizeof(txBuffer)));
 8000610:	4a09      	ldr	r2, [pc, #36]	; (8000638 <do_polling+0xc0>)
 8000612:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000614:	4293      	cmp	r3, r2
 8000616:	d3c4      	bcc.n	80005a2 <do_polling+0x2a>
}
 8000618:	bf00      	nop
 800061a:	bf00      	nop
 800061c:	3778      	adds	r7, #120	; 0x78
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000000 	.word	0x20000000
 8000628:	20000020 	.word	0x20000020
 800062c:	200006c0 	.word	0x200006c0
 8000630:	20000744 	.word	0x20000744
 8000634:	08006bc0 	.word	0x08006bc0
 8000638:	2000001e 	.word	0x2000001e

0800063c <HAL_UART_TxCpltCallback>:


// Define our interrupt-driven callback functions
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	// Print out a char to indicate we reached this point ('T')
	char ch = 'T';
 8000644:	2354      	movs	r3, #84	; 0x54
 8000646:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 100);
 8000648:	f107 010f 	add.w	r1, r7, #15
 800064c:	2364      	movs	r3, #100	; 0x64
 800064e:	2201      	movs	r2, #1
 8000650:	4803      	ldr	r0, [pc, #12]	; (8000660 <HAL_UART_TxCpltCallback+0x24>)
 8000652:	f003 ff48 	bl	80044e6 <HAL_UART_Transmit>
}
 8000656:	bf00      	nop
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	200006c0 	.word	0x200006c0

08000664 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	// Print out a char to indicate we reached this point ('R')
	char ch = 'R';
 800066c:	2352      	movs	r3, #82	; 0x52
 800066e:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 100);
 8000670:	f107 010f 	add.w	r1, r7, #15
 8000674:	2364      	movs	r3, #100	; 0x64
 8000676:	2201      	movs	r2, #1
 8000678:	4807      	ldr	r0, [pc, #28]	; (8000698 <HAL_UART_RxCpltCallback+0x34>)
 800067a:	f003 ff34 	bl	80044e6 <HAL_UART_Transmit>

	// Send out the contents of the RX data buffer to UART1
	HAL_UART_Transmit(&huart1, (uint8_t *) rxBuffer, sizeof(rxBuffer), 100);
 800067e:	2364      	movs	r3, #100	; 0x64
 8000680:	221e      	movs	r2, #30
 8000682:	4906      	ldr	r1, [pc, #24]	; (800069c <HAL_UART_RxCpltCallback+0x38>)
 8000684:	4804      	ldr	r0, [pc, #16]	; (8000698 <HAL_UART_RxCpltCallback+0x34>)
 8000686:	f003 ff2e 	bl	80044e6 <HAL_UART_Transmit>

	// Set our complete flag
	do_interrupt_done = 1;
 800068a:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <HAL_UART_RxCpltCallback+0x3c>)
 800068c:	2201      	movs	r2, #1
 800068e:	601a      	str	r2, [r3, #0]
}
 8000690:	bf00      	nop
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200006c0 	.word	0x200006c0
 800069c:	20000020 	.word	0x20000020
 80006a0:	200000cc 	.word	0x200000cc

080006a4 <do_interrupt>:

static void do_interrupt(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
	// Fill RX data buffer with known value ('?')
	for (int i = 0; i < sizeof(rxBuffer); i++)
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	e007      	b.n	80006c0 <do_interrupt+0x1c>
	{
		rxBuffer[i] = '?';
 80006b0:	4a1a      	ldr	r2, [pc, #104]	; (800071c <do_interrupt+0x78>)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4413      	add	r3, r2
 80006b6:	223f      	movs	r2, #63	; 0x3f
 80006b8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(rxBuffer); i++)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	3301      	adds	r3, #1
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2b1d      	cmp	r3, #29
 80006c4:	d9f4      	bls.n	80006b0 <do_interrupt+0xc>
	}

	// Pipe out a heartbeat indicator ('.')
	char ch = '.';
 80006c6:	232e      	movs	r3, #46	; 0x2e
 80006c8:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 100);
 80006ca:	1cf9      	adds	r1, r7, #3
 80006cc:	2364      	movs	r3, #100	; 0x64
 80006ce:	2201      	movs	r2, #1
 80006d0:	4813      	ldr	r0, [pc, #76]	; (8000720 <do_interrupt+0x7c>)
 80006d2:	f003 ff08 	bl	80044e6 <HAL_UART_Transmit>

	// Clear the complete flag
	do_interrupt_done = 0;
 80006d6:	4b13      	ldr	r3, [pc, #76]	; (8000724 <do_interrupt+0x80>)
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]

	// Using the IT-specific function calls, transceive data from the TX buffer
	HAL_UART_Receive_IT(&huart4, (uint8_t*) rxBuffer, sizeof(rxBuffer));
 80006dc:	221e      	movs	r2, #30
 80006de:	490f      	ldr	r1, [pc, #60]	; (800071c <do_interrupt+0x78>)
 80006e0:	4811      	ldr	r0, [pc, #68]	; (8000728 <do_interrupt+0x84>)
 80006e2:	f004 f8c1 	bl	8004868 <HAL_UART_Receive_IT>
	HAL_UART_Transmit_IT(&huart4, (uint8_t*) txBuffer, sizeof(txBuffer));
 80006e6:	221e      	movs	r2, #30
 80006e8:	4910      	ldr	r1, [pc, #64]	; (800072c <do_interrupt+0x88>)
 80006ea:	480f      	ldr	r0, [pc, #60]	; (8000728 <do_interrupt+0x84>)
 80006ec:	f004 f860 	bl	80047b0 <HAL_UART_Transmit_IT>

	// Indicate on UART1 that the IT functions are in progress
	while (!do_interrupt_done)
 80006f0:	e00a      	b.n	8000708 <do_interrupt+0x64>
	{
		char ch = '~';
 80006f2:	237e      	movs	r3, #126	; 0x7e
 80006f4:	70bb      	strb	r3, [r7, #2]
		HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 100);
 80006f6:	1cb9      	adds	r1, r7, #2
 80006f8:	2364      	movs	r3, #100	; 0x64
 80006fa:	2201      	movs	r2, #1
 80006fc:	4808      	ldr	r0, [pc, #32]	; (8000720 <do_interrupt+0x7c>)
 80006fe:	f003 fef2 	bl	80044e6 <HAL_UART_Transmit>
		HAL_Delay(100);
 8000702:	2064      	movs	r0, #100	; 0x64
 8000704:	f001 f8fa 	bl	80018fc <HAL_Delay>
	while (!do_interrupt_done)
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <do_interrupt+0x80>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d0f0      	beq.n	80006f2 <do_interrupt+0x4e>
	}

}
 8000710:	bf00      	nop
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000020 	.word	0x20000020
 8000720:	200006c0 	.word	0x200006c0
 8000724:	200000cc 	.word	0x200000cc
 8000728:	20000744 	.word	0x20000744
 800072c:	20000000 	.word	0x20000000

08000730 <do_dma>:

static void do_dma(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
	// Fill RX data buffer with known value ('?')
	for (int i = 0; i < sizeof(rxBuffer); i++)
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	e007      	b.n	800074c <do_dma+0x1c>
	{
		rxBuffer[i] = '?';
 800073c:	4a1a      	ldr	r2, [pc, #104]	; (80007a8 <do_dma+0x78>)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4413      	add	r3, r2
 8000742:	223f      	movs	r2, #63	; 0x3f
 8000744:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(rxBuffer); i++)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	3301      	adds	r3, #1
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2b1d      	cmp	r3, #29
 8000750:	d9f4      	bls.n	800073c <do_dma+0xc>
	}

	// Pipe out a heartbeat indicator ('.')
	char ch = '.';
 8000752:	232e      	movs	r3, #46	; 0x2e
 8000754:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 100);
 8000756:	1cf9      	adds	r1, r7, #3
 8000758:	2364      	movs	r3, #100	; 0x64
 800075a:	2201      	movs	r2, #1
 800075c:	4813      	ldr	r0, [pc, #76]	; (80007ac <do_dma+0x7c>)
 800075e:	f003 fec2 	bl	80044e6 <HAL_UART_Transmit>

	// Clear the complete flag
	do_interrupt_done = 0;
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <do_dma+0x80>)
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]

	// Using the DMA-specific function calls, transceive data from the TX buffer
	HAL_UART_Receive_DMA(&huart4, (uint8_t*) rxBuffer, sizeof(rxBuffer));
 8000768:	221e      	movs	r2, #30
 800076a:	490f      	ldr	r1, [pc, #60]	; (80007a8 <do_dma+0x78>)
 800076c:	4811      	ldr	r0, [pc, #68]	; (80007b4 <do_dma+0x84>)
 800076e:	f004 f93d 	bl	80049ec <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart4, (uint8_t*) txBuffer, sizeof(txBuffer));
 8000772:	221e      	movs	r2, #30
 8000774:	4910      	ldr	r1, [pc, #64]	; (80007b8 <do_dma+0x88>)
 8000776:	480f      	ldr	r0, [pc, #60]	; (80007b4 <do_dma+0x84>)
 8000778:	f004 f8ba 	bl	80048f0 <HAL_UART_Transmit_DMA>

	// Indicate on UART1 that the DMA functions are in progress
	while (!do_interrupt_done)
 800077c:	e00a      	b.n	8000794 <do_dma+0x64>
	{
		char ch = '~';
 800077e:	237e      	movs	r3, #126	; 0x7e
 8000780:	70bb      	strb	r3, [r7, #2]
		HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 100);
 8000782:	1cb9      	adds	r1, r7, #2
 8000784:	2364      	movs	r3, #100	; 0x64
 8000786:	2201      	movs	r2, #1
 8000788:	4808      	ldr	r0, [pc, #32]	; (80007ac <do_dma+0x7c>)
 800078a:	f003 feac 	bl	80044e6 <HAL_UART_Transmit>
		HAL_Delay(100);
 800078e:	2064      	movs	r0, #100	; 0x64
 8000790:	f001 f8b4 	bl	80018fc <HAL_Delay>
	while (!do_interrupt_done)
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <do_dma+0x80>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d0f0      	beq.n	800077e <do_dma+0x4e>
	}
}
 800079c:	bf00      	nop
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000020 	.word	0x20000020
 80007ac:	200006c0 	.word	0x200006c0
 80007b0:	200000cc 	.word	0x200000cc
 80007b4:	20000744 	.word	0x20000744
 80007b8:	20000000 	.word	0x20000000

080007bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c2:	f001 f826 	bl	8001812 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c6:	f000 f86b 	bl	80008a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ca:	f000 facf 	bl	8000d6c <MX_GPIO_Init>
  MX_DMA_Init();
 80007ce:	f000 faa7 	bl	8000d20 <MX_DMA_Init>
  MX_DFSDM1_Init();
 80007d2:	f000 f90b 	bl	80009ec <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80007d6:	f000 f941 	bl	8000a5c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80007da:	f000 f97f 	bl	8000adc <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80007de:	f000 f9a3 	bl	8000b28 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80007e2:	f000 fa0f 	bl	8000c04 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80007e6:	f000 fa3d 	bl	8000c64 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007ea:	f000 fa6b 	bl	8000cc4 <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 80007ee:	f000 f9d9 	bl	8000ba4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  // Header info for CLI
  char* cliHeader = "\r\nsimpleCLI Interface v0.1\r\n";
 80007f2:	4b24      	ldr	r3, [pc, #144]	; (8000884 <main+0xc8>)
 80007f4:	60bb      	str	r3, [r7, #8]
  HAL_UART_Transmit(&huart1, (uint8_t*) cliHeader, strlen(cliHeader), 1000);
 80007f6:	68b8      	ldr	r0, [r7, #8]
 80007f8:	f7ff fcea 	bl	80001d0 <strlen>
 80007fc:	4603      	mov	r3, r0
 80007fe:	b29a      	uxth	r2, r3
 8000800:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000804:	68b9      	ldr	r1, [r7, #8]
 8000806:	4820      	ldr	r0, [pc, #128]	; (8000888 <main+0xcc>)
 8000808:	f003 fe6d 	bl	80044e6 <HAL_UART_Transmit>
	    * 	driven data Tx/Rx
	    *
	    ***********************************/

	  // Define strings to structure prompt around
	  char* cliPrompt = "Options:\r\n\t1: polling mode\r\n\t2: interrupt mode\r\n\t3: DMA mode\r\n$> ";
 800080c:	4b1f      	ldr	r3, [pc, #124]	; (800088c <main+0xd0>)
 800080e:	607b      	str	r3, [r7, #4]
	  char* cliResponse = "Invalid input!\r\n";
 8000810:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <main+0xd4>)
 8000812:	60fb      	str	r3, [r7, #12]

	  // Issue prompt
	  HAL_UART_Transmit(&huart1, (uint8_t*) cliPrompt, strlen(cliPrompt), 1000);
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f7ff fcdb 	bl	80001d0 <strlen>
 800081a:	4603      	mov	r3, r0
 800081c:	b29a      	uxth	r2, r3
 800081e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000822:	6879      	ldr	r1, [r7, #4]
 8000824:	4818      	ldr	r0, [pc, #96]	; (8000888 <main+0xcc>)
 8000826:	f003 fe5e 	bl	80044e6 <HAL_UART_Transmit>

	  // Get the user selection
	  char cliInput;
	  HAL_UART_Receive(&huart1, (uint8_t*) &cliInput, 1, HAL_MAX_DELAY);
 800082a:	1cf9      	adds	r1, r7, #3
 800082c:	f04f 33ff 	mov.w	r3, #4294967295
 8000830:	2201      	movs	r2, #1
 8000832:	4815      	ldr	r0, [pc, #84]	; (8000888 <main+0xcc>)
 8000834:	f003 feeb 	bl	800460e <HAL_UART_Receive>

	  // Evaluate input
	  switch (cliInput)
 8000838:	78fb      	ldrb	r3, [r7, #3]
 800083a:	2b33      	cmp	r3, #51	; 0x33
 800083c:	d010      	beq.n	8000860 <main+0xa4>
 800083e:	2b33      	cmp	r3, #51	; 0x33
 8000840:	dc13      	bgt.n	800086a <main+0xae>
 8000842:	2b31      	cmp	r3, #49	; 0x31
 8000844:	d002      	beq.n	800084c <main+0x90>
 8000846:	2b32      	cmp	r3, #50	; 0x32
 8000848:	d005      	beq.n	8000856 <main+0x9a>
	  		  cliResponse = "\r\nDMA mode\r\n";
	  		  do_dma();
	  		  break;

	  	  default:
	  		  break;
 800084a:	e00e      	b.n	800086a <main+0xae>
	  		  cliResponse = "\r\nPolling mode\r\n";
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <main+0xd8>)
 800084e:	60fb      	str	r3, [r7, #12]
	  		  do_polling();
 8000850:	f7ff fe92 	bl	8000578 <do_polling>
	  		  break;
 8000854:	e00a      	b.n	800086c <main+0xb0>
	  		  cliResponse = "\r\nInterrupt mode\r\n";
 8000856:	4b10      	ldr	r3, [pc, #64]	; (8000898 <main+0xdc>)
 8000858:	60fb      	str	r3, [r7, #12]
	  		  do_interrupt();
 800085a:	f7ff ff23 	bl	80006a4 <do_interrupt>
	  		  break;
 800085e:	e005      	b.n	800086c <main+0xb0>
	  		  cliResponse = "\r\nDMA mode\r\n";
 8000860:	4b0e      	ldr	r3, [pc, #56]	; (800089c <main+0xe0>)
 8000862:	60fb      	str	r3, [r7, #12]
	  		  do_dma();
 8000864:	f7ff ff64 	bl	8000730 <do_dma>
	  		  break;
 8000868:	e000      	b.n	800086c <main+0xb0>
	  		  break;
 800086a:	bf00      	nop
	  }

	  // Print response
	  HAL_UART_Transmit(&huart1, (uint8_t*) cliResponse, strlen(cliResponse), 1000);
 800086c:	68f8      	ldr	r0, [r7, #12]
 800086e:	f7ff fcaf 	bl	80001d0 <strlen>
 8000872:	4603      	mov	r3, r0
 8000874:	b29a      	uxth	r2, r3
 8000876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087a:	68f9      	ldr	r1, [r7, #12]
 800087c:	4802      	ldr	r0, [pc, #8]	; (8000888 <main+0xcc>)
 800087e:	f003 fe32 	bl	80044e6 <HAL_UART_Transmit>
  {
 8000882:	e7c3      	b.n	800080c <main+0x50>
 8000884:	08006bdc 	.word	0x08006bdc
 8000888:	200006c0 	.word	0x200006c0
 800088c:	08006bfc 	.word	0x08006bfc
 8000890:	08006c40 	.word	0x08006c40
 8000894:	08006c54 	.word	0x08006c54
 8000898:	08006c68 	.word	0x08006c68
 800089c:	08006c7c 	.word	0x08006c7c

080008a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b0b8      	sub	sp, #224	; 0xe0
 80008a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008aa:	2244      	movs	r2, #68	; 0x44
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f005 fd30 	bl	8006314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c4:	463b      	mov	r3, r7
 80008c6:	2288      	movs	r2, #136	; 0x88
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f005 fd22 	bl	8006314 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008d0:	f002 f920 	bl	8002b14 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008d4:	4b43      	ldr	r3, [pc, #268]	; (80009e4 <SystemClock_Config+0x144>)
 80008d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008da:	4a42      	ldr	r2, [pc, #264]	; (80009e4 <SystemClock_Config+0x144>)
 80008dc:	f023 0318 	bic.w	r3, r3, #24
 80008e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80008e4:	2314      	movs	r3, #20
 80008e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008ea:	2301      	movs	r3, #1
 80008ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008f0:	2301      	movs	r3, #1
 80008f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008fc:	2360      	movs	r3, #96	; 0x60
 80008fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000902:	2302      	movs	r3, #2
 8000904:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000908:	2301      	movs	r3, #1
 800090a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800090e:	2301      	movs	r3, #1
 8000910:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000914:	2328      	movs	r3, #40	; 0x28
 8000916:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800091a:	2307      	movs	r3, #7
 800091c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000920:	2302      	movs	r3, #2
 8000922:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000926:	2302      	movs	r3, #2
 8000928:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000930:	4618      	mov	r0, r3
 8000932:	f002 fa2f 	bl	8002d94 <HAL_RCC_OscConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800093c:	f000 fbb2 	bl	80010a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000940:	230f      	movs	r3, #15
 8000942:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000946:	2303      	movs	r3, #3
 8000948:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800094c:	2300      	movs	r3, #0
 800094e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000952:	2300      	movs	r3, #0
 8000954:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800095e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000962:	2104      	movs	r1, #4
 8000964:	4618      	mov	r0, r3
 8000966:	f002 fdfb 	bl	8003560 <HAL_RCC_ClockConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000970:	f000 fb98 	bl	80010a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8000974:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <SystemClock_Config+0x148>)
 8000976:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000978:	2300      	movs	r3, #0
 800097a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800097c:	2300      	movs	r3, #0
 800097e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000980:	2300      	movs	r3, #0
 8000982:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000984:	2300      	movs	r3, #0
 8000986:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000988:	2300      	movs	r3, #0
 800098a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800098e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000992:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000994:	2301      	movs	r3, #1
 8000996:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000998:	2301      	movs	r3, #1
 800099a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800099c:	2318      	movs	r3, #24
 800099e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80009a0:	2307      	movs	r3, #7
 80009a2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80009a4:	2302      	movs	r3, #2
 80009a6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80009a8:	2302      	movs	r3, #2
 80009aa:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80009ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80009b0:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009b2:	463b      	mov	r3, r7
 80009b4:	4618      	mov	r0, r3
 80009b6:	f002 ffd9 	bl	800396c <HAL_RCCEx_PeriphCLKConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0x124>
  {
    Error_Handler();
 80009c0:	f000 fb70 	bl	80010a4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009c4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009c8:	f002 f8c2 	bl	8002b50 <HAL_PWREx_ControlVoltageScaling>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0x136>
  {
    Error_Handler();
 80009d2:	f000 fb67 	bl	80010a4 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80009d6:	f003 fab3 	bl	8003f40 <HAL_RCCEx_EnableMSIPLLMode>
}
 80009da:	bf00      	nop
 80009dc:	37e0      	adds	r7, #224	; 0xe0
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40021000 	.word	0x40021000
 80009e8:	0001208d 	.word	0x0001208d

080009ec <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80009f0:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <MX_DFSDM1_Init+0x68>)
 80009f2:	4a19      	ldr	r2, [pc, #100]	; (8000a58 <MX_DFSDM1_Init+0x6c>)
 80009f4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80009f6:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <MX_DFSDM1_Init+0x68>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80009fc:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <MX_DFSDM1_Init+0x68>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000a02:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <MX_DFSDM1_Init+0x68>)
 8000a04:	2202      	movs	r2, #2
 8000a06:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <MX_DFSDM1_Init+0x68>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_DFSDM1_Init+0x68>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_DFSDM1_Init+0x68>)
 8000a16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a1a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000a1c:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <MX_DFSDM1_Init+0x68>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000a22:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MX_DFSDM1_Init+0x68>)
 8000a24:	2204      	movs	r2, #4
 8000a26:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000a28:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <MX_DFSDM1_Init+0x68>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_DFSDM1_Init+0x68>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000a34:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <MX_DFSDM1_Init+0x68>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_DFSDM1_Init+0x68>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000a40:	4804      	ldr	r0, [pc, #16]	; (8000a54 <MX_DFSDM1_Init+0x68>)
 8000a42:	f001 f891 	bl	8001b68 <HAL_DFSDM_ChannelInit>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000a4c:	f000 fb2a 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000104 	.word	0x20000104
 8000a58:	40016020 	.word	0x40016020

08000a5c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a60:	4b1b      	ldr	r3, [pc, #108]	; (8000ad0 <MX_I2C2_Init+0x74>)
 8000a62:	4a1c      	ldr	r2, [pc, #112]	; (8000ad4 <MX_I2C2_Init+0x78>)
 8000a64:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000a66:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <MX_I2C2_Init+0x74>)
 8000a68:	4a1b      	ldr	r2, [pc, #108]	; (8000ad8 <MX_I2C2_Init+0x7c>)
 8000a6a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a6c:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <MX_I2C2_Init+0x74>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a72:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <MX_I2C2_Init+0x74>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a78:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <MX_I2C2_Init+0x74>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a7e:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <MX_I2C2_Init+0x74>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <MX_I2C2_Init+0x74>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <MX_I2C2_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <MX_I2C2_Init+0x74>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a96:	480e      	ldr	r0, [pc, #56]	; (8000ad0 <MX_I2C2_Init+0x74>)
 8000a98:	f001 fdcd 	bl	8002636 <HAL_I2C_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000aa2:	f000 faff 	bl	80010a4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4809      	ldr	r0, [pc, #36]	; (8000ad0 <MX_I2C2_Init+0x74>)
 8000aaa:	f001 fe53 	bl	8002754 <HAL_I2CEx_ConfigAnalogFilter>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ab4:	f000 faf6 	bl	80010a4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <MX_I2C2_Init+0x74>)
 8000abc:	f001 fe95 	bl	80027ea <HAL_I2CEx_ConfigDigitalFilter>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ac6:	f000 faed 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000610 	.word	0x20000610
 8000ad4:	40005800 	.word	0x40005800
 8000ad8:	10909cec 	.word	0x10909cec

08000adc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_QUADSPI_Init+0x44>)
 8000ae2:	4a10      	ldr	r2, [pc, #64]	; (8000b24 <MX_QUADSPI_Init+0x48>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_QUADSPI_Init+0x44>)
 8000ae8:	2202      	movs	r2, #2
 8000aea:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_QUADSPI_Init+0x44>)
 8000aee:	2204      	movs	r2, #4
 8000af0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <MX_QUADSPI_Init+0x44>)
 8000af4:	2210      	movs	r2, #16
 8000af6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_QUADSPI_Init+0x44>)
 8000afa:	2217      	movs	r2, #23
 8000afc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <MX_QUADSPI_Init+0x44>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_QUADSPI_Init+0x44>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_QUADSPI_Init+0x44>)
 8000b0c:	f002 f886 	bl	8002c1c <HAL_QSPI_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000b16:	f000 fac5 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000810 	.word	0x20000810
 8000b24:	a0001000 	.word	0xa0001000

08000b28 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000b2c:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <MX_SPI3_Init+0x74>)
 8000b2e:	4a1c      	ldr	r2, [pc, #112]	; (8000ba0 <MX_SPI3_Init+0x78>)
 8000b30:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b32:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <MX_SPI3_Init+0x74>)
 8000b34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b38:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b3a:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <MX_SPI3_Init+0x74>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b40:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <MX_SPI3_Init+0x74>)
 8000b42:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000b46:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <MX_SPI3_Init+0x74>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b4e:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <MX_SPI3_Init+0x74>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_SPI3_Init+0x74>)
 8000b56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b5a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_SPI3_Init+0x74>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_SPI3_Init+0x74>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_SPI3_Init+0x74>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <MX_SPI3_Init+0x74>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_SPI3_Init+0x74>)
 8000b76:	2207      	movs	r2, #7
 8000b78:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b7a:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <MX_SPI3_Init+0x74>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_SPI3_Init+0x74>)
 8000b82:	2208      	movs	r2, #8
 8000b84:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <MX_SPI3_Init+0x74>)
 8000b88:	f003 fbbc 	bl	8004304 <HAL_SPI_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000b92:	f000 fa87 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	2000065c 	.word	0x2000065c
 8000ba0:	40003c00 	.word	0x40003c00

08000ba4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ba8:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <MX_UART4_Init+0x58>)
 8000baa:	4a15      	ldr	r2, [pc, #84]	; (8000c00 <MX_UART4_Init+0x5c>)
 8000bac:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000bae:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <MX_UART4_Init+0x58>)
 8000bb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <MX_UART4_Init+0x58>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <MX_UART4_Init+0x58>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <MX_UART4_Init+0x58>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <MX_UART4_Init+0x58>)
 8000bca:	220c      	movs	r2, #12
 8000bcc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <MX_UART4_Init+0x58>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd4:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <MX_UART4_Init+0x58>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <MX_UART4_Init+0x58>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <MX_UART4_Init+0x58>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000be6:	4805      	ldr	r0, [pc, #20]	; (8000bfc <MX_UART4_Init+0x58>)
 8000be8:	f003 fc2f 	bl	800444a <HAL_UART_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000bf2:	f000 fa57 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000744 	.word	0x20000744
 8000c00:	40004c00 	.word	0x40004c00

08000c04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c08:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c0a:	4a15      	ldr	r2, [pc, #84]	; (8000c60 <MX_USART1_UART_Init+0x5c>)
 8000c0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c0e:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c2a:	220c      	movs	r2, #12
 8000c2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c34:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c3a:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c48:	f003 fbff 	bl	800444a <HAL_UART_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c52:	f000 fa27 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200006c0 	.word	0x200006c0
 8000c60:	40013800 	.word	0x40013800

08000c64 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c68:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <MX_USART3_UART_Init+0x58>)
 8000c6a:	4a15      	ldr	r2, [pc, #84]	; (8000cc0 <MX_USART3_UART_Init+0x5c>)
 8000c6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <MX_USART3_UART_Init+0x58>)
 8000c70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <MX_USART3_UART_Init+0x58>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <MX_USART3_UART_Init+0x58>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <MX_USART3_UART_Init+0x58>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <MX_USART3_UART_Init+0x58>)
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <MX_USART3_UART_Init+0x58>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c94:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <MX_USART3_UART_Init+0x58>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <MX_USART3_UART_Init+0x58>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <MX_USART3_UART_Init+0x58>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ca6:	4805      	ldr	r0, [pc, #20]	; (8000cbc <MX_USART3_UART_Init+0x58>)
 8000ca8:	f003 fbcf 	bl	800444a <HAL_UART_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000cb2:	f000 f9f7 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000184 	.word	0x20000184
 8000cc0:	40004800 	.word	0x40004800

08000cc4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000cc8:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000cce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cd2:	2206      	movs	r2, #6
 8000cd4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cd8:	2202      	movs	r2, #2
 8000cda:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cde:	2202      	movs	r2, #2
 8000ce0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000cee:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000cf4:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000cfa:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d06:	4805      	ldr	r0, [pc, #20]	; (8000d1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d08:	f001 fdbb 	bl	8002882 <HAL_PCD_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000d12:	f000 f9c7 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000208 	.word	0x20000208

08000d20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <MX_DMA_Init+0x48>)
 8000d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d2a:	4a0f      	ldr	r2, [pc, #60]	; (8000d68 <MX_DMA_Init+0x48>)
 8000d2c:	f043 0302 	orr.w	r3, r3, #2
 8000d30:	6493      	str	r3, [r2, #72]	; 0x48
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <MX_DMA_Init+0x48>)
 8000d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2100      	movs	r1, #0
 8000d42:	203a      	movs	r0, #58	; 0x3a
 8000d44:	f000 fed9 	bl	8001afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8000d48:	203a      	movs	r0, #58	; 0x3a
 8000d4a:	f000 fef2 	bl	8001b32 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2100      	movs	r1, #0
 8000d52:	203c      	movs	r0, #60	; 0x3c
 8000d54:	f000 fed1 	bl	8001afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8000d58:	203c      	movs	r0, #60	; 0x3c
 8000d5a:	f000 feea 	bl	8001b32 <HAL_NVIC_EnableIRQ>

}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40021000 	.word	0x40021000

08000d6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	; 0x28
 8000d70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d72:	f107 0314 	add.w	r3, r7, #20
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
 8000d80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d82:	4bba      	ldr	r3, [pc, #744]	; (800106c <MX_GPIO_Init+0x300>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d86:	4ab9      	ldr	r2, [pc, #740]	; (800106c <MX_GPIO_Init+0x300>)
 8000d88:	f043 0310 	orr.w	r3, r3, #16
 8000d8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d8e:	4bb7      	ldr	r3, [pc, #732]	; (800106c <MX_GPIO_Init+0x300>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	f003 0310 	and.w	r3, r3, #16
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9a:	4bb4      	ldr	r3, [pc, #720]	; (800106c <MX_GPIO_Init+0x300>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	4ab3      	ldr	r2, [pc, #716]	; (800106c <MX_GPIO_Init+0x300>)
 8000da0:	f043 0304 	orr.w	r3, r3, #4
 8000da4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da6:	4bb1      	ldr	r3, [pc, #708]	; (800106c <MX_GPIO_Init+0x300>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	f003 0304 	and.w	r3, r3, #4
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db2:	4bae      	ldr	r3, [pc, #696]	; (800106c <MX_GPIO_Init+0x300>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	4aad      	ldr	r2, [pc, #692]	; (800106c <MX_GPIO_Init+0x300>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dbe:	4bab      	ldr	r3, [pc, #684]	; (800106c <MX_GPIO_Init+0x300>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dca:	4ba8      	ldr	r3, [pc, #672]	; (800106c <MX_GPIO_Init+0x300>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	4aa7      	ldr	r2, [pc, #668]	; (800106c <MX_GPIO_Init+0x300>)
 8000dd0:	f043 0302 	orr.w	r3, r3, #2
 8000dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd6:	4ba5      	ldr	r3, [pc, #660]	; (800106c <MX_GPIO_Init+0x300>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de2:	4ba2      	ldr	r3, [pc, #648]	; (800106c <MX_GPIO_Init+0x300>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	4aa1      	ldr	r2, [pc, #644]	; (800106c <MX_GPIO_Init+0x300>)
 8000de8:	f043 0308 	orr.w	r3, r3, #8
 8000dec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dee:	4b9f      	ldr	r3, [pc, #636]	; (800106c <MX_GPIO_Init+0x300>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	f003 0308 	and.w	r3, r3, #8
 8000df6:	603b      	str	r3, [r7, #0]
 8000df8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000e00:	489b      	ldr	r0, [pc, #620]	; (8001070 <MX_GPIO_Init+0x304>)
 8000e02:	f001 fbdd 	bl	80025c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	f248 1104 	movw	r1, #33028	; 0x8104
 8000e0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e10:	f001 fbd6 	bl	80025c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000e14:	2200      	movs	r2, #0
 8000e16:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000e1a:	4896      	ldr	r0, [pc, #600]	; (8001074 <MX_GPIO_Init+0x308>)
 8000e1c:	f001 fbd0 	bl	80025c0 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	f241 0181 	movw	r1, #4225	; 0x1081
 8000e26:	4894      	ldr	r0, [pc, #592]	; (8001078 <MX_GPIO_Init+0x30c>)
 8000e28:	f001 fbca 	bl	80025c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e32:	4891      	ldr	r0, [pc, #580]	; (8001078 <MX_GPIO_Init+0x30c>)
 8000e34:	f001 fbc4 	bl	80025c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000e3e:	488f      	ldr	r0, [pc, #572]	; (800107c <MX_GPIO_Init+0x310>)
 8000e40:	f001 fbbe 	bl	80025c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000e44:	2201      	movs	r2, #1
 8000e46:	2120      	movs	r1, #32
 8000e48:	488a      	ldr	r0, [pc, #552]	; (8001074 <MX_GPIO_Init+0x308>)
 8000e4a:	f001 fbb9 	bl	80025c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000e4e:	2201      	movs	r2, #1
 8000e50:	2101      	movs	r1, #1
 8000e52:	4887      	ldr	r0, [pc, #540]	; (8001070 <MX_GPIO_Init+0x304>)
 8000e54:	f001 fbb4 	bl	80025c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000e58:	f240 1315 	movw	r3, #277	; 0x115
 8000e5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	2300      	movs	r3, #0
 8000e68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	487f      	ldr	r0, [pc, #508]	; (8001070 <MX_GPIO_Init+0x304>)
 8000e72:	f001 f9fb 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000e76:	236a      	movs	r3, #106	; 0x6a
 8000e78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e7a:	4b81      	ldr	r3, [pc, #516]	; (8001080 <MX_GPIO_Init+0x314>)
 8000e7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	4619      	mov	r1, r3
 8000e88:	4879      	ldr	r0, [pc, #484]	; (8001070 <MX_GPIO_Init+0x304>)
 8000e8a:	f001 f9ef 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000e8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e94:	4b7b      	ldr	r3, [pc, #492]	; (8001084 <MX_GPIO_Init+0x318>)
 8000e96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4876      	ldr	r0, [pc, #472]	; (800107c <MX_GPIO_Init+0x310>)
 8000ea4:	f001 f9e2 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000ea8:	233f      	movs	r3, #63	; 0x3f
 8000eaa:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000eac:	230b      	movs	r3, #11
 8000eae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4870      	ldr	r0, [pc, #448]	; (800107c <MX_GPIO_Init+0x310>)
 8000ebc:	f001 f9d6 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000ec0:	f248 1304 	movw	r3, #33028	; 0x8104
 8000ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000edc:	f001 f9c6 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000ee0:	2308      	movs	r3, #8
 8000ee2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2300      	movs	r3, #0
 8000eee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efe:	f001 f9b5 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000f02:	2310      	movs	r3, #16
 8000f04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f06:	230b      	movs	r3, #11
 8000f08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	4619      	mov	r1, r3
 8000f14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f18:	f001 f9a8 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000f1c:	23e0      	movs	r3, #224	; 0xe0
 8000f1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f2c:	2305      	movs	r3, #5
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f3a:	f001 f997 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f42:	4b4f      	ldr	r3, [pc, #316]	; (8001080 <MX_GPIO_Init+0x314>)
 8000f44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4848      	ldr	r0, [pc, #288]	; (8001074 <MX_GPIO_Init+0x308>)
 8000f52:	f001 f98b 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000f56:	2302      	movs	r3, #2
 8000f58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f5a:	230b      	movs	r3, #11
 8000f5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	4619      	mov	r1, r3
 8000f68:	4842      	ldr	r0, [pc, #264]	; (8001074 <MX_GPIO_Init+0x308>)
 8000f6a:	f001 f97f 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000f6e:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000f72:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f74:	2301      	movs	r3, #1
 8000f76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	4619      	mov	r1, r3
 8000f86:	483b      	ldr	r0, [pc, #236]	; (8001074 <MX_GPIO_Init+0x308>)
 8000f88:	f001 f970 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000f8c:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000f90:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f92:	4b3b      	ldr	r3, [pc, #236]	; (8001080 <MX_GPIO_Init+0x314>)
 8000f94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4835      	ldr	r0, [pc, #212]	; (8001078 <MX_GPIO_Init+0x30c>)
 8000fa2:	f001 f963 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000fa6:	f243 0381 	movw	r3, #12417	; 0x3081
 8000faa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	482e      	ldr	r0, [pc, #184]	; (8001078 <MX_GPIO_Init+0x30c>)
 8000fc0:	f001 f954 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000fc4:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000fc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4827      	ldr	r0, [pc, #156]	; (800107c <MX_GPIO_Init+0x310>)
 8000fde:	f001 f945 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000fe2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000fe6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fe8:	4b25      	ldr	r3, [pc, #148]	; (8001080 <MX_GPIO_Init+0x314>)
 8000fea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4821      	ldr	r0, [pc, #132]	; (800107c <MX_GPIO_Init+0x310>)
 8000ff8:	f001 f938 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	2302      	movs	r3, #2
 8001002:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001008:	2303      	movs	r3, #3
 800100a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800100c:	2305      	movs	r3, #5
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	4619      	mov	r1, r3
 8001016:	4818      	ldr	r0, [pc, #96]	; (8001078 <MX_GPIO_Init+0x30c>)
 8001018:	f001 f928 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800101c:	2378      	movs	r3, #120	; 0x78
 800101e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	2302      	movs	r3, #2
 8001022:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001028:	2303      	movs	r3, #3
 800102a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800102c:	2307      	movs	r3, #7
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	4619      	mov	r1, r3
 8001036:	4810      	ldr	r0, [pc, #64]	; (8001078 <MX_GPIO_Init+0x30c>)
 8001038:	f001 f918 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800103c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001040:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001042:	2312      	movs	r3, #18
 8001044:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001046:	2301      	movs	r3, #1
 8001048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104a:	2303      	movs	r3, #3
 800104c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800104e:	2304      	movs	r3, #4
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	4619      	mov	r1, r3
 8001058:	4806      	ldr	r0, [pc, #24]	; (8001074 <MX_GPIO_Init+0x308>)
 800105a:	f001 f907 	bl	800226c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2100      	movs	r1, #0
 8001062:	2017      	movs	r0, #23
 8001064:	f000 fd49 	bl	8001afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001068:	2017      	movs	r0, #23
 800106a:	e00d      	b.n	8001088 <MX_GPIO_Init+0x31c>
 800106c:	40021000 	.word	0x40021000
 8001070:	48001000 	.word	0x48001000
 8001074:	48000400 	.word	0x48000400
 8001078:	48000c00 	.word	0x48000c00
 800107c:	48000800 	.word	0x48000800
 8001080:	10110000 	.word	0x10110000
 8001084:	10210000 	.word	0x10210000
 8001088:	f000 fd53 	bl	8001b32 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800108c:	2200      	movs	r2, #0
 800108e:	2100      	movs	r1, #0
 8001090:	2028      	movs	r0, #40	; 0x28
 8001092:	f000 fd32 	bl	8001afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001096:	2028      	movs	r0, #40	; 0x28
 8001098:	f000 fd4b 	bl	8001b32 <HAL_NVIC_EnableIRQ>

}
 800109c:	bf00      	nop
 800109e:	3728      	adds	r7, #40	; 0x28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a8:	b672      	cpsid	i
}
 80010aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ac:	e7fe      	b.n	80010ac <Error_Handler+0x8>
	...

080010b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b6:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <HAL_MspInit+0x44>)
 80010b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ba:	4a0e      	ldr	r2, [pc, #56]	; (80010f4 <HAL_MspInit+0x44>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	6613      	str	r3, [r2, #96]	; 0x60
 80010c2:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <HAL_MspInit+0x44>)
 80010c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <HAL_MspInit+0x44>)
 80010d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d2:	4a08      	ldr	r2, [pc, #32]	; (80010f4 <HAL_MspInit+0x44>)
 80010d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d8:	6593      	str	r3, [r2, #88]	; 0x58
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_MspInit+0x44>)
 80010dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e2:	603b      	str	r3, [r7, #0]
 80010e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	40021000 	.word	0x40021000

080010f8 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	; 0x28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8001110:	4b1a      	ldr	r3, [pc, #104]	; (800117c <HAL_DFSDM_ChannelMspInit+0x84>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d12d      	bne.n	8001174 <HAL_DFSDM_ChannelMspInit+0x7c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001118:	4b19      	ldr	r3, [pc, #100]	; (8001180 <HAL_DFSDM_ChannelMspInit+0x88>)
 800111a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800111c:	4a18      	ldr	r2, [pc, #96]	; (8001180 <HAL_DFSDM_ChannelMspInit+0x88>)
 800111e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001122:	6613      	str	r3, [r2, #96]	; 0x60
 8001124:	4b16      	ldr	r3, [pc, #88]	; (8001180 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001128:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001130:	4b13      	ldr	r3, [pc, #76]	; (8001180 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001134:	4a12      	ldr	r2, [pc, #72]	; (8001180 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001136:	f043 0310 	orr.w	r3, r3, #16
 800113a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113c:	4b10      	ldr	r3, [pc, #64]	; (8001180 <HAL_DFSDM_ChannelMspInit+0x88>)
 800113e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001140:	f003 0310 	and.w	r3, r3, #16
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001148:	f44f 7320 	mov.w	r3, #640	; 0x280
 800114c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114e:	2302      	movs	r3, #2
 8001150:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2300      	movs	r3, #0
 8001158:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800115a:	2306      	movs	r3, #6
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	4619      	mov	r1, r3
 8001164:	4807      	ldr	r0, [pc, #28]	; (8001184 <HAL_DFSDM_ChannelMspInit+0x8c>)
 8001166:	f001 f881 	bl	800226c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800116a:	4b04      	ldr	r3, [pc, #16]	; (800117c <HAL_DFSDM_ChannelMspInit+0x84>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	3301      	adds	r3, #1
 8001170:	4a02      	ldr	r2, [pc, #8]	; (800117c <HAL_DFSDM_ChannelMspInit+0x84>)
 8001172:	6013      	str	r3, [r2, #0]
  }

}
 8001174:	bf00      	nop
 8001176:	3728      	adds	r7, #40	; 0x28
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	200000d0 	.word	0x200000d0
 8001180:	40021000 	.word	0x40021000
 8001184:	48001000 	.word	0x48001000

08001188 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a17      	ldr	r2, [pc, #92]	; (8001204 <HAL_I2C_MspInit+0x7c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d128      	bne.n	80011fc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011aa:	4b17      	ldr	r3, [pc, #92]	; (8001208 <HAL_I2C_MspInit+0x80>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	4a16      	ldr	r2, [pc, #88]	; (8001208 <HAL_I2C_MspInit+0x80>)
 80011b0:	f043 0302 	orr.w	r3, r3, #2
 80011b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <HAL_I2C_MspInit+0x80>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80011c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011c8:	2312      	movs	r3, #18
 80011ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d0:	2303      	movs	r3, #3
 80011d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011d4:	2304      	movs	r3, #4
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	480b      	ldr	r0, [pc, #44]	; (800120c <HAL_I2C_MspInit+0x84>)
 80011e0:	f001 f844 	bl	800226c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <HAL_I2C_MspInit+0x80>)
 80011e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e8:	4a07      	ldr	r2, [pc, #28]	; (8001208 <HAL_I2C_MspInit+0x80>)
 80011ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011ee:	6593      	str	r3, [r2, #88]	; 0x58
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <HAL_I2C_MspInit+0x80>)
 80011f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80011fc:	bf00      	nop
 80011fe:	3728      	adds	r7, #40	; 0x28
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40005800 	.word	0x40005800
 8001208:	40021000 	.word	0x40021000
 800120c:	48000400 	.word	0x48000400

08001210 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	; 0x28
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a17      	ldr	r2, [pc, #92]	; (800128c <HAL_QSPI_MspInit+0x7c>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d128      	bne.n	8001284 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <HAL_QSPI_MspInit+0x80>)
 8001234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001236:	4a16      	ldr	r2, [pc, #88]	; (8001290 <HAL_QSPI_MspInit+0x80>)
 8001238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800123c:	6513      	str	r3, [r2, #80]	; 0x50
 800123e:	4b14      	ldr	r3, [pc, #80]	; (8001290 <HAL_QSPI_MspInit+0x80>)
 8001240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <HAL_QSPI_MspInit+0x80>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	4a10      	ldr	r2, [pc, #64]	; (8001290 <HAL_QSPI_MspInit+0x80>)
 8001250:	f043 0310 	orr.w	r3, r3, #16
 8001254:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <HAL_QSPI_MspInit+0x80>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	f003 0310 	and.w	r3, r3, #16
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001262:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001266:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2302      	movs	r3, #2
 800126a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001270:	2303      	movs	r3, #3
 8001272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001274:	230a      	movs	r3, #10
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	4619      	mov	r1, r3
 800127e:	4805      	ldr	r0, [pc, #20]	; (8001294 <HAL_QSPI_MspInit+0x84>)
 8001280:	f000 fff4 	bl	800226c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001284:	bf00      	nop
 8001286:	3728      	adds	r7, #40	; 0x28
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	a0001000 	.word	0xa0001000
 8001290:	40021000 	.word	0x40021000
 8001294:	48001000 	.word	0x48001000

08001298 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a17      	ldr	r2, [pc, #92]	; (8001314 <HAL_SPI_MspInit+0x7c>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d128      	bne.n	800130c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80012ba:	4b17      	ldr	r3, [pc, #92]	; (8001318 <HAL_SPI_MspInit+0x80>)
 80012bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012be:	4a16      	ldr	r2, [pc, #88]	; (8001318 <HAL_SPI_MspInit+0x80>)
 80012c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012c4:	6593      	str	r3, [r2, #88]	; 0x58
 80012c6:	4b14      	ldr	r3, [pc, #80]	; (8001318 <HAL_SPI_MspInit+0x80>)
 80012c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <HAL_SPI_MspInit+0x80>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	4a10      	ldr	r2, [pc, #64]	; (8001318 <HAL_SPI_MspInit+0x80>)
 80012d8:	f043 0304 	orr.w	r3, r3, #4
 80012dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <HAL_SPI_MspInit+0x80>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80012ea:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80012ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f0:	2302      	movs	r3, #2
 80012f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f8:	2303      	movs	r3, #3
 80012fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012fc:	2306      	movs	r3, #6
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	4619      	mov	r1, r3
 8001306:	4805      	ldr	r0, [pc, #20]	; (800131c <HAL_SPI_MspInit+0x84>)
 8001308:	f000 ffb0 	bl	800226c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800130c:	bf00      	nop
 800130e:	3728      	adds	r7, #40	; 0x28
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40003c00 	.word	0x40003c00
 8001318:	40021000 	.word	0x40021000
 800131c:	48000800 	.word	0x48000800

08001320 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08e      	sub	sp, #56	; 0x38
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a73      	ldr	r2, [pc, #460]	; (800150c <HAL_UART_MspInit+0x1ec>)
 800133e:	4293      	cmp	r3, r2
 8001340:	f040 8084 	bne.w	800144c <HAL_UART_MspInit+0x12c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001344:	4b72      	ldr	r3, [pc, #456]	; (8001510 <HAL_UART_MspInit+0x1f0>)
 8001346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001348:	4a71      	ldr	r2, [pc, #452]	; (8001510 <HAL_UART_MspInit+0x1f0>)
 800134a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800134e:	6593      	str	r3, [r2, #88]	; 0x58
 8001350:	4b6f      	ldr	r3, [pc, #444]	; (8001510 <HAL_UART_MspInit+0x1f0>)
 8001352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001354:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001358:	623b      	str	r3, [r7, #32]
 800135a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135c:	4b6c      	ldr	r3, [pc, #432]	; (8001510 <HAL_UART_MspInit+0x1f0>)
 800135e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001360:	4a6b      	ldr	r2, [pc, #428]	; (8001510 <HAL_UART_MspInit+0x1f0>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001368:	4b69      	ldr	r3, [pc, #420]	; (8001510 <HAL_UART_MspInit+0x1f0>)
 800136a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	61fb      	str	r3, [r7, #28]
 8001372:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001374:	2303      	movs	r3, #3
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001378:	2302      	movs	r3, #2
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001380:	2303      	movs	r3, #3
 8001382:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001384:	2308      	movs	r3, #8
 8001386:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138c:	4619      	mov	r1, r3
 800138e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001392:	f000 ff6b 	bl	800226c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 8001396:	4b5f      	ldr	r3, [pc, #380]	; (8001514 <HAL_UART_MspInit+0x1f4>)
 8001398:	4a5f      	ldr	r2, [pc, #380]	; (8001518 <HAL_UART_MspInit+0x1f8>)
 800139a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 800139c:	4b5d      	ldr	r3, [pc, #372]	; (8001514 <HAL_UART_MspInit+0x1f4>)
 800139e:	2202      	movs	r2, #2
 80013a0:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013a2:	4b5c      	ldr	r3, [pc, #368]	; (8001514 <HAL_UART_MspInit+0x1f4>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013a8:	4b5a      	ldr	r3, [pc, #360]	; (8001514 <HAL_UART_MspInit+0x1f4>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013ae:	4b59      	ldr	r3, [pc, #356]	; (8001514 <HAL_UART_MspInit+0x1f4>)
 80013b0:	2280      	movs	r2, #128	; 0x80
 80013b2:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013b4:	4b57      	ldr	r3, [pc, #348]	; (8001514 <HAL_UART_MspInit+0x1f4>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013ba:	4b56      	ldr	r3, [pc, #344]	; (8001514 <HAL_UART_MspInit+0x1f4>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80013c0:	4b54      	ldr	r3, [pc, #336]	; (8001514 <HAL_UART_MspInit+0x1f4>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013c6:	4b53      	ldr	r3, [pc, #332]	; (8001514 <HAL_UART_MspInit+0x1f4>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80013cc:	4851      	ldr	r0, [pc, #324]	; (8001514 <HAL_UART_MspInit+0x1f4>)
 80013ce:	f000 fcd7 	bl	8001d80 <HAL_DMA_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 80013d8:	f7ff fe64 	bl	80010a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a4d      	ldr	r2, [pc, #308]	; (8001514 <HAL_UART_MspInit+0x1f4>)
 80013e0:	671a      	str	r2, [r3, #112]	; 0x70
 80013e2:	4a4c      	ldr	r2, [pc, #304]	; (8001514 <HAL_UART_MspInit+0x1f4>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Channel3;
 80013e8:	4b4c      	ldr	r3, [pc, #304]	; (800151c <HAL_UART_MspInit+0x1fc>)
 80013ea:	4a4d      	ldr	r2, [pc, #308]	; (8001520 <HAL_UART_MspInit+0x200>)
 80013ec:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_2;
 80013ee:	4b4b      	ldr	r3, [pc, #300]	; (800151c <HAL_UART_MspInit+0x1fc>)
 80013f0:	2202      	movs	r2, #2
 80013f2:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013f4:	4b49      	ldr	r3, [pc, #292]	; (800151c <HAL_UART_MspInit+0x1fc>)
 80013f6:	2210      	movs	r2, #16
 80013f8:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013fa:	4b48      	ldr	r3, [pc, #288]	; (800151c <HAL_UART_MspInit+0x1fc>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001400:	4b46      	ldr	r3, [pc, #280]	; (800151c <HAL_UART_MspInit+0x1fc>)
 8001402:	2280      	movs	r2, #128	; 0x80
 8001404:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001406:	4b45      	ldr	r3, [pc, #276]	; (800151c <HAL_UART_MspInit+0x1fc>)
 8001408:	2200      	movs	r2, #0
 800140a:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800140c:	4b43      	ldr	r3, [pc, #268]	; (800151c <HAL_UART_MspInit+0x1fc>)
 800140e:	2200      	movs	r2, #0
 8001410:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001412:	4b42      	ldr	r3, [pc, #264]	; (800151c <HAL_UART_MspInit+0x1fc>)
 8001414:	2200      	movs	r2, #0
 8001416:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001418:	4b40      	ldr	r3, [pc, #256]	; (800151c <HAL_UART_MspInit+0x1fc>)
 800141a:	2200      	movs	r2, #0
 800141c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800141e:	483f      	ldr	r0, [pc, #252]	; (800151c <HAL_UART_MspInit+0x1fc>)
 8001420:	f000 fcae 	bl	8001d80 <HAL_DMA_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 800142a:	f7ff fe3b 	bl	80010a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a3a      	ldr	r2, [pc, #232]	; (800151c <HAL_UART_MspInit+0x1fc>)
 8001432:	66da      	str	r2, [r3, #108]	; 0x6c
 8001434:	4a39      	ldr	r2, [pc, #228]	; (800151c <HAL_UART_MspInit+0x1fc>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800143a:	2200      	movs	r2, #0
 800143c:	2100      	movs	r1, #0
 800143e:	2034      	movs	r0, #52	; 0x34
 8001440:	f000 fb5b 	bl	8001afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001444:	2034      	movs	r0, #52	; 0x34
 8001446:	f000 fb74 	bl	8001b32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800144a:	e05b      	b.n	8001504 <HAL_UART_MspInit+0x1e4>
  else if(huart->Instance==USART1)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a34      	ldr	r2, [pc, #208]	; (8001524 <HAL_UART_MspInit+0x204>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d128      	bne.n	80014a8 <HAL_UART_MspInit+0x188>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001456:	4b2e      	ldr	r3, [pc, #184]	; (8001510 <HAL_UART_MspInit+0x1f0>)
 8001458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800145a:	4a2d      	ldr	r2, [pc, #180]	; (8001510 <HAL_UART_MspInit+0x1f0>)
 800145c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001460:	6613      	str	r3, [r2, #96]	; 0x60
 8001462:	4b2b      	ldr	r3, [pc, #172]	; (8001510 <HAL_UART_MspInit+0x1f0>)
 8001464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800146a:	61bb      	str	r3, [r7, #24]
 800146c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146e:	4b28      	ldr	r3, [pc, #160]	; (8001510 <HAL_UART_MspInit+0x1f0>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001472:	4a27      	ldr	r2, [pc, #156]	; (8001510 <HAL_UART_MspInit+0x1f0>)
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800147a:	4b25      	ldr	r3, [pc, #148]	; (8001510 <HAL_UART_MspInit+0x1f0>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001486:	23c0      	movs	r3, #192	; 0xc0
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001492:	2303      	movs	r3, #3
 8001494:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001496:	2307      	movs	r3, #7
 8001498:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149e:	4619      	mov	r1, r3
 80014a0:	4821      	ldr	r0, [pc, #132]	; (8001528 <HAL_UART_MspInit+0x208>)
 80014a2:	f000 fee3 	bl	800226c <HAL_GPIO_Init>
}
 80014a6:	e02d      	b.n	8001504 <HAL_UART_MspInit+0x1e4>
  else if(huart->Instance==USART3)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a1f      	ldr	r2, [pc, #124]	; (800152c <HAL_UART_MspInit+0x20c>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d128      	bne.n	8001504 <HAL_UART_MspInit+0x1e4>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014b2:	4b17      	ldr	r3, [pc, #92]	; (8001510 <HAL_UART_MspInit+0x1f0>)
 80014b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b6:	4a16      	ldr	r2, [pc, #88]	; (8001510 <HAL_UART_MspInit+0x1f0>)
 80014b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014bc:	6593      	str	r3, [r2, #88]	; 0x58
 80014be:	4b14      	ldr	r3, [pc, #80]	; (8001510 <HAL_UART_MspInit+0x1f0>)
 80014c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ca:	4b11      	ldr	r3, [pc, #68]	; (8001510 <HAL_UART_MspInit+0x1f0>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ce:	4a10      	ldr	r2, [pc, #64]	; (8001510 <HAL_UART_MspInit+0x1f0>)
 80014d0:	f043 0308 	orr.w	r3, r3, #8
 80014d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <HAL_UART_MspInit+0x1f0>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80014e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f0:	2303      	movs	r3, #3
 80014f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014f4:	2307      	movs	r3, #7
 80014f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fc:	4619      	mov	r1, r3
 80014fe:	480c      	ldr	r0, [pc, #48]	; (8001530 <HAL_UART_MspInit+0x210>)
 8001500:	f000 feb4 	bl	800226c <HAL_GPIO_Init>
}
 8001504:	bf00      	nop
 8001506:	3738      	adds	r7, #56	; 0x38
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40004c00 	.word	0x40004c00
 8001510:	40021000 	.word	0x40021000
 8001514:	2000013c 	.word	0x2000013c
 8001518:	40020458 	.word	0x40020458
 800151c:	200007c8 	.word	0x200007c8
 8001520:	40020430 	.word	0x40020430
 8001524:	40013800 	.word	0x40013800
 8001528:	48000400 	.word	0x48000400
 800152c:	40004800 	.word	0x40004800
 8001530:	48000c00 	.word	0x48000c00

08001534 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08a      	sub	sp, #40	; 0x28
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001554:	d154      	bne.n	8001600 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001556:	4b2c      	ldr	r3, [pc, #176]	; (8001608 <HAL_PCD_MspInit+0xd4>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155a:	4a2b      	ldr	r2, [pc, #172]	; (8001608 <HAL_PCD_MspInit+0xd4>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001562:	4b29      	ldr	r3, [pc, #164]	; (8001608 <HAL_PCD_MspInit+0xd4>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800156e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001574:	2300      	movs	r3, #0
 8001576:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	4619      	mov	r1, r3
 8001582:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001586:	f000 fe71 	bl	800226c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800158a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800158e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800159c:	230a      	movs	r3, #10
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015aa:	f000 fe5f 	bl	800226c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015ae:	4b16      	ldr	r3, [pc, #88]	; (8001608 <HAL_PCD_MspInit+0xd4>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b2:	4a15      	ldr	r2, [pc, #84]	; (8001608 <HAL_PCD_MspInit+0xd4>)
 80015b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ba:	4b13      	ldr	r3, [pc, #76]	; (8001608 <HAL_PCD_MspInit+0xd4>)
 80015bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <HAL_PCD_MspInit+0xd4>)
 80015c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d114      	bne.n	80015fc <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015d2:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <HAL_PCD_MspInit+0xd4>)
 80015d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d6:	4a0c      	ldr	r2, [pc, #48]	; (8001608 <HAL_PCD_MspInit+0xd4>)
 80015d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015dc:	6593      	str	r3, [r2, #88]	; 0x58
 80015de:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <HAL_PCD_MspInit+0xd4>)
 80015e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80015ea:	f001 fb07 	bl	8002bfc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ee:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_PCD_MspInit+0xd4>)
 80015f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f2:	4a05      	ldr	r2, [pc, #20]	; (8001608 <HAL_PCD_MspInit+0xd4>)
 80015f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015f8:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80015fa:	e001      	b.n	8001600 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 80015fc:	f001 fafe 	bl	8002bfc <HAL_PWREx_EnableVddUSB>
}
 8001600:	bf00      	nop
 8001602:	3728      	adds	r7, #40	; 0x28
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40021000 	.word	0x40021000

0800160c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001610:	e7fe      	b.n	8001610 <NMI_Handler+0x4>

08001612 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001616:	e7fe      	b.n	8001616 <HardFault_Handler+0x4>

08001618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800161c:	e7fe      	b.n	800161c <MemManage_Handler+0x4>

0800161e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001622:	e7fe      	b.n	8001622 <BusFault_Handler+0x4>

08001624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001628:	e7fe      	b.n	8001628 <UsageFault_Handler+0x4>

0800162a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001658:	f000 f930 	bl	80018bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}

08001660 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001664:	2020      	movs	r0, #32
 8001666:	f000 ffc3 	bl	80025f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800166a:	2040      	movs	r0, #64	; 0x40
 800166c:	f000 ffc0 	bl	80025f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001670:	2080      	movs	r0, #128	; 0x80
 8001672:	f000 ffbd 	bl	80025f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001676:	f44f 7080 	mov.w	r0, #256	; 0x100
 800167a:	f000 ffb9 	bl	80025f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}

08001682 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001686:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800168a:	f000 ffb1 	bl	80025f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800168e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001692:	f000 ffad 	bl	80025f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001696:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800169a:	f000 ffa9 	bl	80025f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800169e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80016a2:	f000 ffa5 	bl	80025f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80016a6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80016aa:	f000 ffa1 	bl	80025f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
	...

080016b4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80016b8:	4802      	ldr	r0, [pc, #8]	; (80016c4 <UART4_IRQHandler+0x10>)
 80016ba:	f003 f9db 	bl	8004a74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000744 	.word	0x20000744

080016c8 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80016cc:	4802      	ldr	r0, [pc, #8]	; (80016d8 <DMA2_Channel3_IRQHandler+0x10>)
 80016ce:	f000 fcee 	bl	80020ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200007c8 	.word	0x200007c8

080016dc <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80016e0:	4802      	ldr	r0, [pc, #8]	; (80016ec <DMA2_Channel5_IRQHandler+0x10>)
 80016e2:	f000 fce4 	bl	80020ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	2000013c 	.word	0x2000013c

080016f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f8:	4a14      	ldr	r2, [pc, #80]	; (800174c <_sbrk+0x5c>)
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <_sbrk+0x60>)
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001704:	4b13      	ldr	r3, [pc, #76]	; (8001754 <_sbrk+0x64>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d102      	bne.n	8001712 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800170c:	4b11      	ldr	r3, [pc, #68]	; (8001754 <_sbrk+0x64>)
 800170e:	4a12      	ldr	r2, [pc, #72]	; (8001758 <_sbrk+0x68>)
 8001710:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001712:	4b10      	ldr	r3, [pc, #64]	; (8001754 <_sbrk+0x64>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	429a      	cmp	r2, r3
 800171e:	d207      	bcs.n	8001730 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001720:	f004 fdce 	bl	80062c0 <__errno>
 8001724:	4603      	mov	r3, r0
 8001726:	220c      	movs	r2, #12
 8001728:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800172a:	f04f 33ff 	mov.w	r3, #4294967295
 800172e:	e009      	b.n	8001744 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <_sbrk+0x64>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001736:	4b07      	ldr	r3, [pc, #28]	; (8001754 <_sbrk+0x64>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	4a05      	ldr	r2, [pc, #20]	; (8001754 <_sbrk+0x64>)
 8001740:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001742:	68fb      	ldr	r3, [r7, #12]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20018000 	.word	0x20018000
 8001750:	00000400 	.word	0x00000400
 8001754:	200000d4 	.word	0x200000d4
 8001758:	20000868 	.word	0x20000868

0800175c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001760:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <SystemInit+0x5c>)
 8001762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001766:	4a14      	ldr	r2, [pc, #80]	; (80017b8 <SystemInit+0x5c>)
 8001768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800176c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <SystemInit+0x60>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a11      	ldr	r2, [pc, #68]	; (80017bc <SystemInit+0x60>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800177c:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <SystemInit+0x60>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <SystemInit+0x60>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a0d      	ldr	r2, [pc, #52]	; (80017bc <SystemInit+0x60>)
 8001788:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800178c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001790:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001792:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <SystemInit+0x60>)
 8001794:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001798:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800179a:	4b08      	ldr	r3, [pc, #32]	; (80017bc <SystemInit+0x60>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a07      	ldr	r2, [pc, #28]	; (80017bc <SystemInit+0x60>)
 80017a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017a4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80017a6:	4b05      	ldr	r3, [pc, #20]	; (80017bc <SystemInit+0x60>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	619a      	str	r2, [r3, #24]
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000ed00 	.word	0xe000ed00
 80017bc:	40021000 	.word	0x40021000

080017c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017c4:	f7ff ffca 	bl	800175c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80017c8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80017ca:	e003      	b.n	80017d4 <LoopCopyDataInit>

080017cc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80017ce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80017d0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80017d2:	3104      	adds	r1, #4

080017d4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80017d4:	480a      	ldr	r0, [pc, #40]	; (8001800 <LoopForever+0xa>)
	ldr	r3, =_edata
 80017d6:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <LoopForever+0xe>)
	adds	r2, r0, r1
 80017d8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80017da:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80017dc:	d3f6      	bcc.n	80017cc <CopyDataInit>
	ldr	r2, =_sbss
 80017de:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <LoopForever+0x12>)
	b	LoopFillZerobss
 80017e0:	e002      	b.n	80017e8 <LoopFillZerobss>

080017e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80017e2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80017e4:	f842 3b04 	str.w	r3, [r2], #4

080017e8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <LoopForever+0x16>)
	cmp	r2, r3
 80017ea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80017ec:	d3f9      	bcc.n	80017e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ee:	f004 fd6d 	bl	80062cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017f2:	f7fe ffe3 	bl	80007bc <main>

080017f6 <LoopForever>:

LoopForever:
    b LoopForever
 80017f6:	e7fe      	b.n	80017f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017f8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80017fc:	08006d18 	.word	0x08006d18
	ldr	r0, =_sdata
 8001800:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001804:	200000b0 	.word	0x200000b0
	ldr	r2, =_sbss
 8001808:	200000b0 	.word	0x200000b0
	ldr	r3, = _ebss
 800180c:	20000868 	.word	0x20000868

08001810 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001810:	e7fe      	b.n	8001810 <ADC1_2_IRQHandler>

08001812 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001818:	2300      	movs	r3, #0
 800181a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800181c:	2003      	movs	r0, #3
 800181e:	f000 f961 	bl	8001ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001822:	2000      	movs	r0, #0
 8001824:	f000 f80e 	bl	8001844 <HAL_InitTick>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d002      	beq.n	8001834 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	71fb      	strb	r3, [r7, #7]
 8001832:	e001      	b.n	8001838 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001834:	f7ff fc3c 	bl	80010b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001838:	79fb      	ldrb	r3, [r7, #7]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800184c:	2300      	movs	r3, #0
 800184e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001850:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <HAL_InitTick+0x6c>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d023      	beq.n	80018a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001858:	4b16      	ldr	r3, [pc, #88]	; (80018b4 <HAL_InitTick+0x70>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <HAL_InitTick+0x6c>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	4619      	mov	r1, r3
 8001862:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001866:	fbb3 f3f1 	udiv	r3, r3, r1
 800186a:	fbb2 f3f3 	udiv	r3, r2, r3
 800186e:	4618      	mov	r0, r3
 8001870:	f000 f96d 	bl	8001b4e <HAL_SYSTICK_Config>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d10f      	bne.n	800189a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b0f      	cmp	r3, #15
 800187e:	d809      	bhi.n	8001894 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001880:	2200      	movs	r2, #0
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	f04f 30ff 	mov.w	r0, #4294967295
 8001888:	f000 f937 	bl	8001afa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800188c:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <HAL_InitTick+0x74>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6013      	str	r3, [r2, #0]
 8001892:	e007      	b.n	80018a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	73fb      	strb	r3, [r7, #15]
 8001898:	e004      	b.n	80018a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	73fb      	strb	r3, [r7, #15]
 800189e:	e001      	b.n	80018a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000048 	.word	0x20000048
 80018b4:	20000040 	.word	0x20000040
 80018b8:	20000044 	.word	0x20000044

080018bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018c0:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_IncTick+0x20>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	461a      	mov	r2, r3
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_IncTick+0x24>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4413      	add	r3, r2
 80018cc:	4a04      	ldr	r2, [pc, #16]	; (80018e0 <HAL_IncTick+0x24>)
 80018ce:	6013      	str	r3, [r2, #0]
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	20000048 	.word	0x20000048
 80018e0:	20000854 	.word	0x20000854

080018e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return uwTick;
 80018e8:	4b03      	ldr	r3, [pc, #12]	; (80018f8 <HAL_GetTick+0x14>)
 80018ea:	681b      	ldr	r3, [r3, #0]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	20000854 	.word	0x20000854

080018fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001904:	f7ff ffee 	bl	80018e4 <HAL_GetTick>
 8001908:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001914:	d005      	beq.n	8001922 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <HAL_Delay+0x44>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	461a      	mov	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4413      	add	r3, r2
 8001920:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001922:	bf00      	nop
 8001924:	f7ff ffde 	bl	80018e4 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	429a      	cmp	r2, r3
 8001932:	d8f7      	bhi.n	8001924 <HAL_Delay+0x28>
  {
  }
}
 8001934:	bf00      	nop
 8001936:	bf00      	nop
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000048 	.word	0x20000048

08001944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001954:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <__NVIC_SetPriorityGrouping+0x44>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001960:	4013      	ands	r3, r2
 8001962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800196c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001976:	4a04      	ldr	r2, [pc, #16]	; (8001988 <__NVIC_SetPriorityGrouping+0x44>)
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	60d3      	str	r3, [r2, #12]
}
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001990:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	0a1b      	lsrs	r3, r3, #8
 8001996:	f003 0307 	and.w	r3, r3, #7
}
 800199a:	4618      	mov	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	db0b      	blt.n	80019d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	f003 021f 	and.w	r2, r3, #31
 80019c0:	4907      	ldr	r1, [pc, #28]	; (80019e0 <__NVIC_EnableIRQ+0x38>)
 80019c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c6:	095b      	lsrs	r3, r3, #5
 80019c8:	2001      	movs	r0, #1
 80019ca:	fa00 f202 	lsl.w	r2, r0, r2
 80019ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000e100 	.word	0xe000e100

080019e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	6039      	str	r1, [r7, #0]
 80019ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	db0a      	blt.n	8001a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	490c      	ldr	r1, [pc, #48]	; (8001a30 <__NVIC_SetPriority+0x4c>)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	0112      	lsls	r2, r2, #4
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	440b      	add	r3, r1
 8001a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a0c:	e00a      	b.n	8001a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	4908      	ldr	r1, [pc, #32]	; (8001a34 <__NVIC_SetPriority+0x50>)
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	3b04      	subs	r3, #4
 8001a1c:	0112      	lsls	r2, r2, #4
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	440b      	add	r3, r1
 8001a22:	761a      	strb	r2, [r3, #24]
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	e000e100 	.word	0xe000e100
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b089      	sub	sp, #36	; 0x24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f1c3 0307 	rsb	r3, r3, #7
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	bf28      	it	cs
 8001a56:	2304      	movcs	r3, #4
 8001a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	2b06      	cmp	r3, #6
 8001a60:	d902      	bls.n	8001a68 <NVIC_EncodePriority+0x30>
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3b03      	subs	r3, #3
 8001a66:	e000      	b.n	8001a6a <NVIC_EncodePriority+0x32>
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43da      	mvns	r2, r3
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a80:	f04f 31ff 	mov.w	r1, #4294967295
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8a:	43d9      	mvns	r1, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a90:	4313      	orrs	r3, r2
         );
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3724      	adds	r7, #36	; 0x24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
	...

08001aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ab0:	d301      	bcc.n	8001ab6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e00f      	b.n	8001ad6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ab6:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <SysTick_Config+0x40>)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001abe:	210f      	movs	r1, #15
 8001ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac4:	f7ff ff8e 	bl	80019e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <SysTick_Config+0x40>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ace:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <SysTick_Config+0x40>)
 8001ad0:	2207      	movs	r2, #7
 8001ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	e000e010 	.word	0xe000e010

08001ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff ff29 	bl	8001944 <__NVIC_SetPriorityGrouping>
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b086      	sub	sp, #24
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	4603      	mov	r3, r0
 8001b02:	60b9      	str	r1, [r7, #8]
 8001b04:	607a      	str	r2, [r7, #4]
 8001b06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b0c:	f7ff ff3e 	bl	800198c <__NVIC_GetPriorityGrouping>
 8001b10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	68b9      	ldr	r1, [r7, #8]
 8001b16:	6978      	ldr	r0, [r7, #20]
 8001b18:	f7ff ff8e 	bl	8001a38 <NVIC_EncodePriority>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b22:	4611      	mov	r1, r2
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff ff5d 	bl	80019e4 <__NVIC_SetPriority>
}
 8001b2a:	bf00      	nop
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	4603      	mov	r3, r0
 8001b3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff ff31 	bl	80019a8 <__NVIC_EnableIRQ>
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff ffa2 	bl	8001aa0 <SysTick_Config>
 8001b5c:	4603      	mov	r3, r0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
	...

08001b68 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e0ac      	b.n	8001cd4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 f8b2 	bl	8001ce8 <DFSDM_GetChannelFromInstance>
 8001b84:	4603      	mov	r3, r0
 8001b86:	4a55      	ldr	r2, [pc, #340]	; (8001cdc <HAL_DFSDM_ChannelInit+0x174>)
 8001b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e09f      	b.n	8001cd4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff faaf 	bl	80010f8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001b9a:	4b51      	ldr	r3, [pc, #324]	; (8001ce0 <HAL_DFSDM_ChannelInit+0x178>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	4a4f      	ldr	r2, [pc, #316]	; (8001ce0 <HAL_DFSDM_ChannelInit+0x178>)
 8001ba2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001ba4:	4b4e      	ldr	r3, [pc, #312]	; (8001ce0 <HAL_DFSDM_ChannelInit+0x178>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d125      	bne.n	8001bf8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001bac:	4b4d      	ldr	r3, [pc, #308]	; (8001ce4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a4c      	ldr	r2, [pc, #304]	; (8001ce4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001bb2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001bb6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001bb8:	4b4a      	ldr	r3, [pc, #296]	; (8001ce4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	4948      	ldr	r1, [pc, #288]	; (8001ce4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001bc6:	4b47      	ldr	r3, [pc, #284]	; (8001ce4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a46      	ldr	r2, [pc, #280]	; (8001ce4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001bcc:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001bd0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	791b      	ldrb	r3, [r3, #4]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d108      	bne.n	8001bec <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001bda:	4b42      	ldr	r3, [pc, #264]	; (8001ce4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	041b      	lsls	r3, r3, #16
 8001be6:	493f      	ldr	r1, [pc, #252]	; (8001ce4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001bec:	4b3d      	ldr	r3, [pc, #244]	; (8001ce4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a3c      	ldr	r2, [pc, #240]	; (8001ce4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001bf6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001c06:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6819      	ldr	r1, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001c16:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001c1c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	430a      	orrs	r2, r1
 8001c24:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 020f 	bic.w	r2, r2, #15
 8001c34:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6819      	ldr	r1, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001c44:	431a      	orrs	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001c5c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6899      	ldr	r1, [r3, #8]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001c70:	431a      	orrs	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f002 0207 	and.w	r2, r2, #7
 8001c88:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6859      	ldr	r1, [r3, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c94:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cb4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 f810 	bl	8001ce8 <DFSDM_GetChannelFromInstance>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	4904      	ldr	r1, [pc, #16]	; (8001cdc <HAL_DFSDM_ChannelInit+0x174>)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	200000dc 	.word	0x200000dc
 8001ce0:	200000d8 	.word	0x200000d8
 8001ce4:	40016000 	.word	0x40016000

08001ce8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a1c      	ldr	r2, [pc, #112]	; (8001d64 <DFSDM_GetChannelFromInstance+0x7c>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d102      	bne.n	8001cfe <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	e02b      	b.n	8001d56 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a19      	ldr	r2, [pc, #100]	; (8001d68 <DFSDM_GetChannelFromInstance+0x80>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d102      	bne.n	8001d0c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001d06:	2301      	movs	r3, #1
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	e024      	b.n	8001d56 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a17      	ldr	r2, [pc, #92]	; (8001d6c <DFSDM_GetChannelFromInstance+0x84>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d102      	bne.n	8001d1a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001d14:	2302      	movs	r3, #2
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	e01d      	b.n	8001d56 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a14      	ldr	r2, [pc, #80]	; (8001d70 <DFSDM_GetChannelFromInstance+0x88>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d102      	bne.n	8001d28 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001d22:	2304      	movs	r3, #4
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	e016      	b.n	8001d56 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a12      	ldr	r2, [pc, #72]	; (8001d74 <DFSDM_GetChannelFromInstance+0x8c>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d102      	bne.n	8001d36 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001d30:	2305      	movs	r3, #5
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	e00f      	b.n	8001d56 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a0f      	ldr	r2, [pc, #60]	; (8001d78 <DFSDM_GetChannelFromInstance+0x90>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d102      	bne.n	8001d44 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001d3e:	2306      	movs	r3, #6
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	e008      	b.n	8001d56 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a0d      	ldr	r2, [pc, #52]	; (8001d7c <DFSDM_GetChannelFromInstance+0x94>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d102      	bne.n	8001d52 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001d4c:	2307      	movs	r3, #7
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	e001      	b.n	8001d56 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001d52:	2303      	movs	r3, #3
 8001d54:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001d56:	68fb      	ldr	r3, [r7, #12]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	40016000 	.word	0x40016000
 8001d68:	40016020 	.word	0x40016020
 8001d6c:	40016040 	.word	0x40016040
 8001d70:	40016080 	.word	0x40016080
 8001d74:	400160a0 	.word	0x400160a0
 8001d78:	400160c0 	.word	0x400160c0
 8001d7c:	400160e0 	.word	0x400160e0

08001d80 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e098      	b.n	8001ec4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	461a      	mov	r2, r3
 8001d98:	4b4d      	ldr	r3, [pc, #308]	; (8001ed0 <HAL_DMA_Init+0x150>)
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d80f      	bhi.n	8001dbe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	461a      	mov	r2, r3
 8001da4:	4b4b      	ldr	r3, [pc, #300]	; (8001ed4 <HAL_DMA_Init+0x154>)
 8001da6:	4413      	add	r3, r2
 8001da8:	4a4b      	ldr	r2, [pc, #300]	; (8001ed8 <HAL_DMA_Init+0x158>)
 8001daa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dae:	091b      	lsrs	r3, r3, #4
 8001db0:	009a      	lsls	r2, r3, #2
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a48      	ldr	r2, [pc, #288]	; (8001edc <HAL_DMA_Init+0x15c>)
 8001dba:	641a      	str	r2, [r3, #64]	; 0x40
 8001dbc:	e00e      	b.n	8001ddc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	4b46      	ldr	r3, [pc, #280]	; (8001ee0 <HAL_DMA_Init+0x160>)
 8001dc6:	4413      	add	r3, r2
 8001dc8:	4a43      	ldr	r2, [pc, #268]	; (8001ed8 <HAL_DMA_Init+0x158>)
 8001dca:	fba2 2303 	umull	r2, r3, r2, r3
 8001dce:	091b      	lsrs	r3, r3, #4
 8001dd0:	009a      	lsls	r2, r3, #2
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a42      	ldr	r2, [pc, #264]	; (8001ee4 <HAL_DMA_Init+0x164>)
 8001dda:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2202      	movs	r2, #2
 8001de0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001df6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001e00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e36:	d039      	beq.n	8001eac <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3c:	4a27      	ldr	r2, [pc, #156]	; (8001edc <HAL_DMA_Init+0x15c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d11a      	bne.n	8001e78 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001e42:	4b29      	ldr	r3, [pc, #164]	; (8001ee8 <HAL_DMA_Init+0x168>)
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	f003 031c 	and.w	r3, r3, #28
 8001e4e:	210f      	movs	r1, #15
 8001e50:	fa01 f303 	lsl.w	r3, r1, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	4924      	ldr	r1, [pc, #144]	; (8001ee8 <HAL_DMA_Init+0x168>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001e5c:	4b22      	ldr	r3, [pc, #136]	; (8001ee8 <HAL_DMA_Init+0x168>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6859      	ldr	r1, [r3, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e68:	f003 031c 	and.w	r3, r3, #28
 8001e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e70:	491d      	ldr	r1, [pc, #116]	; (8001ee8 <HAL_DMA_Init+0x168>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	600b      	str	r3, [r1, #0]
 8001e76:	e019      	b.n	8001eac <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001e78:	4b1c      	ldr	r3, [pc, #112]	; (8001eec <HAL_DMA_Init+0x16c>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e80:	f003 031c 	and.w	r3, r3, #28
 8001e84:	210f      	movs	r1, #15
 8001e86:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	4917      	ldr	r1, [pc, #92]	; (8001eec <HAL_DMA_Init+0x16c>)
 8001e8e:	4013      	ands	r3, r2
 8001e90:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001e92:	4b16      	ldr	r3, [pc, #88]	; (8001eec <HAL_DMA_Init+0x16c>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6859      	ldr	r1, [r3, #4]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9e:	f003 031c 	and.w	r3, r3, #28
 8001ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea6:	4911      	ldr	r1, [pc, #68]	; (8001eec <HAL_DMA_Init+0x16c>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	40020407 	.word	0x40020407
 8001ed4:	bffdfff8 	.word	0xbffdfff8
 8001ed8:	cccccccd 	.word	0xcccccccd
 8001edc:	40020000 	.word	0x40020000
 8001ee0:	bffdfbf8 	.word	0xbffdfbf8
 8001ee4:	40020400 	.word	0x40020400
 8001ee8:	400200a8 	.word	0x400200a8
 8001eec:	400204a8 	.word	0x400204a8

08001ef0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
 8001efc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001efe:	2300      	movs	r3, #0
 8001f00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <HAL_DMA_Start_IT+0x20>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	e04b      	b.n	8001fa8 <HAL_DMA_Start_IT+0xb8>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d13a      	bne.n	8001f9a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2202      	movs	r2, #2
 8001f28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0201 	bic.w	r2, r2, #1
 8001f40:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	68b9      	ldr	r1, [r7, #8]
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f000 f95f 	bl	800220c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d008      	beq.n	8001f68 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f042 020e 	orr.w	r2, r2, #14
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	e00f      	b.n	8001f88 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0204 	bic.w	r2, r2, #4
 8001f76:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f042 020a 	orr.w	r2, r2, #10
 8001f86:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0201 	orr.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	e005      	b.n	8001fa6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d008      	beq.n	8001fda <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2204      	movs	r2, #4
 8001fcc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e022      	b.n	8002020 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 020e 	bic.w	r2, r2, #14
 8001fe8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 0201 	bic.w	r2, r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	f003 021c 	and.w	r2, r3, #28
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	2101      	movs	r1, #1
 8002008:	fa01 f202 	lsl.w	r2, r1, r2
 800200c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800201e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002020:	4618      	mov	r0, r3
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002034:	2300      	movs	r3, #0
 8002036:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d005      	beq.n	8002050 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2204      	movs	r2, #4
 8002048:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	73fb      	strb	r3, [r7, #15]
 800204e:	e029      	b.n	80020a4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 020e 	bic.w	r2, r2, #14
 800205e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 0201 	bic.w	r2, r2, #1
 800206e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002074:	f003 021c 	and.w	r2, r3, #28
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207c:	2101      	movs	r1, #1
 800207e:	fa01 f202 	lsl.w	r2, r1, r2
 8002082:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	4798      	blx	r3
    }
  }
  return status;
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b084      	sub	sp, #16
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	f003 031c 	and.w	r3, r3, #28
 80020ce:	2204      	movs	r2, #4
 80020d0:	409a      	lsls	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	4013      	ands	r3, r2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d026      	beq.n	8002128 <HAL_DMA_IRQHandler+0x7a>
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d021      	beq.n	8002128 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0320 	and.w	r3, r3, #32
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d107      	bne.n	8002102 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0204 	bic.w	r2, r2, #4
 8002100:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	f003 021c 	and.w	r2, r3, #28
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	2104      	movs	r1, #4
 8002110:	fa01 f202 	lsl.w	r2, r1, r2
 8002114:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	2b00      	cmp	r3, #0
 800211c:	d071      	beq.n	8002202 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002126:	e06c      	b.n	8002202 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212c:	f003 031c 	and.w	r3, r3, #28
 8002130:	2202      	movs	r2, #2
 8002132:	409a      	lsls	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4013      	ands	r3, r2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d02e      	beq.n	800219a <HAL_DMA_IRQHandler+0xec>
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d029      	beq.n	800219a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0320 	and.w	r3, r3, #32
 8002150:	2b00      	cmp	r3, #0
 8002152:	d10b      	bne.n	800216c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 020a 	bic.w	r2, r2, #10
 8002162:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002170:	f003 021c 	and.w	r2, r3, #28
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	2102      	movs	r1, #2
 800217a:	fa01 f202 	lsl.w	r2, r1, r2
 800217e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218c:	2b00      	cmp	r3, #0
 800218e:	d038      	beq.n	8002202 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002198:	e033      	b.n	8002202 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	f003 031c 	and.w	r3, r3, #28
 80021a2:	2208      	movs	r2, #8
 80021a4:	409a      	lsls	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4013      	ands	r3, r2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d02a      	beq.n	8002204 <HAL_DMA_IRQHandler+0x156>
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	f003 0308 	and.w	r3, r3, #8
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d025      	beq.n	8002204 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 020e 	bic.w	r2, r2, #14
 80021c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021cc:	f003 021c 	and.w	r2, r3, #28
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	2101      	movs	r1, #1
 80021d6:	fa01 f202 	lsl.w	r2, r1, r2
 80021da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d004      	beq.n	8002204 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002202:	bf00      	nop
 8002204:	bf00      	nop
}
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
 8002218:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221e:	f003 021c 	and.w	r2, r3, #28
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	2101      	movs	r1, #1
 8002228:	fa01 f202 	lsl.w	r2, r1, r2
 800222c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	2b10      	cmp	r3, #16
 800223c:	d108      	bne.n	8002250 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800224e:	e007      	b.n	8002260 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	60da      	str	r2, [r3, #12]
}
 8002260:	bf00      	nop
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800226c:	b480      	push	{r7}
 800226e:	b087      	sub	sp, #28
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800227a:	e17f      	b.n	800257c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	2101      	movs	r1, #1
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	fa01 f303 	lsl.w	r3, r1, r3
 8002288:	4013      	ands	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 8171 	beq.w	8002576 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d00b      	beq.n	80022b4 <HAL_GPIO_Init+0x48>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d007      	beq.n	80022b4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022a8:	2b11      	cmp	r3, #17
 80022aa:	d003      	beq.n	80022b4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b12      	cmp	r3, #18
 80022b2:	d130      	bne.n	8002316 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	2203      	movs	r2, #3
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	68da      	ldr	r2, [r3, #12]
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4313      	orrs	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022ea:	2201      	movs	r2, #1
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43db      	mvns	r3, r3
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	4013      	ands	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	091b      	lsrs	r3, r3, #4
 8002300:	f003 0201 	and.w	r2, r3, #1
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	4313      	orrs	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	2b03      	cmp	r3, #3
 8002320:	d118      	bne.n	8002354 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002326:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002328:	2201      	movs	r2, #1
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4013      	ands	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	08db      	lsrs	r3, r3, #3
 800233e:	f003 0201 	and.w	r2, r3, #1
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	2203      	movs	r2, #3
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	4013      	ands	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	4313      	orrs	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2b02      	cmp	r3, #2
 800238a:	d003      	beq.n	8002394 <HAL_GPIO_Init+0x128>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b12      	cmp	r3, #18
 8002392:	d123      	bne.n	80023dc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	08da      	lsrs	r2, r3, #3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3208      	adds	r2, #8
 800239c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	220f      	movs	r2, #15
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4013      	ands	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	691a      	ldr	r2, [r3, #16]
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	08da      	lsrs	r2, r3, #3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3208      	adds	r2, #8
 80023d6:	6939      	ldr	r1, [r7, #16]
 80023d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	2203      	movs	r2, #3
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	4013      	ands	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 0203 	and.w	r2, r3, #3
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	4313      	orrs	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 80ac 	beq.w	8002576 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241e:	4b5f      	ldr	r3, [pc, #380]	; (800259c <HAL_GPIO_Init+0x330>)
 8002420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002422:	4a5e      	ldr	r2, [pc, #376]	; (800259c <HAL_GPIO_Init+0x330>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	6613      	str	r3, [r2, #96]	; 0x60
 800242a:	4b5c      	ldr	r3, [pc, #368]	; (800259c <HAL_GPIO_Init+0x330>)
 800242c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	60bb      	str	r3, [r7, #8]
 8002434:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002436:	4a5a      	ldr	r2, [pc, #360]	; (80025a0 <HAL_GPIO_Init+0x334>)
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	089b      	lsrs	r3, r3, #2
 800243c:	3302      	adds	r3, #2
 800243e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002442:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	220f      	movs	r2, #15
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	4013      	ands	r3, r2
 8002458:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002460:	d025      	beq.n	80024ae <HAL_GPIO_Init+0x242>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a4f      	ldr	r2, [pc, #316]	; (80025a4 <HAL_GPIO_Init+0x338>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d01f      	beq.n	80024aa <HAL_GPIO_Init+0x23e>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a4e      	ldr	r2, [pc, #312]	; (80025a8 <HAL_GPIO_Init+0x33c>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d019      	beq.n	80024a6 <HAL_GPIO_Init+0x23a>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a4d      	ldr	r2, [pc, #308]	; (80025ac <HAL_GPIO_Init+0x340>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d013      	beq.n	80024a2 <HAL_GPIO_Init+0x236>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a4c      	ldr	r2, [pc, #304]	; (80025b0 <HAL_GPIO_Init+0x344>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d00d      	beq.n	800249e <HAL_GPIO_Init+0x232>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a4b      	ldr	r2, [pc, #300]	; (80025b4 <HAL_GPIO_Init+0x348>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d007      	beq.n	800249a <HAL_GPIO_Init+0x22e>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a4a      	ldr	r2, [pc, #296]	; (80025b8 <HAL_GPIO_Init+0x34c>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d101      	bne.n	8002496 <HAL_GPIO_Init+0x22a>
 8002492:	2306      	movs	r3, #6
 8002494:	e00c      	b.n	80024b0 <HAL_GPIO_Init+0x244>
 8002496:	2307      	movs	r3, #7
 8002498:	e00a      	b.n	80024b0 <HAL_GPIO_Init+0x244>
 800249a:	2305      	movs	r3, #5
 800249c:	e008      	b.n	80024b0 <HAL_GPIO_Init+0x244>
 800249e:	2304      	movs	r3, #4
 80024a0:	e006      	b.n	80024b0 <HAL_GPIO_Init+0x244>
 80024a2:	2303      	movs	r3, #3
 80024a4:	e004      	b.n	80024b0 <HAL_GPIO_Init+0x244>
 80024a6:	2302      	movs	r3, #2
 80024a8:	e002      	b.n	80024b0 <HAL_GPIO_Init+0x244>
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <HAL_GPIO_Init+0x244>
 80024ae:	2300      	movs	r3, #0
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	f002 0203 	and.w	r2, r2, #3
 80024b6:	0092      	lsls	r2, r2, #2
 80024b8:	4093      	lsls	r3, r2
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024c0:	4937      	ldr	r1, [pc, #220]	; (80025a0 <HAL_GPIO_Init+0x334>)
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	089b      	lsrs	r3, r3, #2
 80024c6:	3302      	adds	r3, #2
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80024ce:	4b3b      	ldr	r3, [pc, #236]	; (80025bc <HAL_GPIO_Init+0x350>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	43db      	mvns	r3, r3
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	4013      	ands	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024f2:	4a32      	ldr	r2, [pc, #200]	; (80025bc <HAL_GPIO_Init+0x350>)
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80024f8:	4b30      	ldr	r3, [pc, #192]	; (80025bc <HAL_GPIO_Init+0x350>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	43db      	mvns	r3, r3
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	4013      	ands	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	4313      	orrs	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800251c:	4a27      	ldr	r2, [pc, #156]	; (80025bc <HAL_GPIO_Init+0x350>)
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002522:	4b26      	ldr	r3, [pc, #152]	; (80025bc <HAL_GPIO_Init+0x350>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	43db      	mvns	r3, r3
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4013      	ands	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	4313      	orrs	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002546:	4a1d      	ldr	r2, [pc, #116]	; (80025bc <HAL_GPIO_Init+0x350>)
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800254c:	4b1b      	ldr	r3, [pc, #108]	; (80025bc <HAL_GPIO_Init+0x350>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	43db      	mvns	r3, r3
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4013      	ands	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	4313      	orrs	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002570:	4a12      	ldr	r2, [pc, #72]	; (80025bc <HAL_GPIO_Init+0x350>)
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	3301      	adds	r3, #1
 800257a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	fa22 f303 	lsr.w	r3, r2, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	f47f ae78 	bne.w	800227c <HAL_GPIO_Init+0x10>
  }
}
 800258c:	bf00      	nop
 800258e:	bf00      	nop
 8002590:	371c      	adds	r7, #28
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40021000 	.word	0x40021000
 80025a0:	40010000 	.word	0x40010000
 80025a4:	48000400 	.word	0x48000400
 80025a8:	48000800 	.word	0x48000800
 80025ac:	48000c00 	.word	0x48000c00
 80025b0:	48001000 	.word	0x48001000
 80025b4:	48001400 	.word	0x48001400
 80025b8:	48001800 	.word	0x48001800
 80025bc:	40010400 	.word	0x40010400

080025c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	807b      	strh	r3, [r7, #2]
 80025cc:	4613      	mov	r3, r2
 80025ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025d0:	787b      	ldrb	r3, [r7, #1]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025d6:	887a      	ldrh	r2, [r7, #2]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025dc:	e002      	b.n	80025e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025de:	887a      	ldrh	r2, [r7, #2]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025fa:	4b08      	ldr	r3, [pc, #32]	; (800261c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025fc:	695a      	ldr	r2, [r3, #20]
 80025fe:	88fb      	ldrh	r3, [r7, #6]
 8002600:	4013      	ands	r3, r2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d006      	beq.n	8002614 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002606:	4a05      	ldr	r2, [pc, #20]	; (800261c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002608:	88fb      	ldrh	r3, [r7, #6]
 800260a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800260c:	88fb      	ldrh	r3, [r7, #6]
 800260e:	4618      	mov	r0, r3
 8002610:	f000 f806 	bl	8002620 <HAL_GPIO_EXTI_Callback>
  }
}
 8002614:	bf00      	nop
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40010400 	.word	0x40010400

08002620 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b082      	sub	sp, #8
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e081      	b.n	800274c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	d106      	bne.n	8002662 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f7fe fd93 	bl	8001188 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2224      	movs	r2, #36	; 0x24
 8002666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 0201 	bic.w	r2, r2, #1
 8002678:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002686:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002696:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d107      	bne.n	80026b0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026ac:	609a      	str	r2, [r3, #8]
 80026ae:	e006      	b.n	80026be <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80026bc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d104      	bne.n	80026d0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026ce:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6812      	ldr	r2, [r2, #0]
 80026da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026e2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026f2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	691a      	ldr	r2, [r3, #16]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	ea42 0103 	orr.w	r1, r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	021a      	lsls	r2, r3, #8
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69d9      	ldr	r1, [r3, #28]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a1a      	ldr	r2, [r3, #32]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f042 0201 	orr.w	r2, r2, #1
 800272c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2220      	movs	r2, #32
 8002738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b20      	cmp	r3, #32
 8002768:	d138      	bne.n	80027dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002770:	2b01      	cmp	r3, #1
 8002772:	d101      	bne.n	8002778 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002774:	2302      	movs	r3, #2
 8002776:	e032      	b.n	80027de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2224      	movs	r2, #36	; 0x24
 8002784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 0201 	bic.w	r2, r2, #1
 8002796:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6819      	ldr	r1, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0201 	orr.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2220      	movs	r2, #32
 80027cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027d8:	2300      	movs	r3, #0
 80027da:	e000      	b.n	80027de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027dc:	2302      	movs	r3, #2
  }
}
 80027de:	4618      	mov	r0, r3
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b085      	sub	sp, #20
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b20      	cmp	r3, #32
 80027fe:	d139      	bne.n	8002874 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002806:	2b01      	cmp	r3, #1
 8002808:	d101      	bne.n	800280e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800280a:	2302      	movs	r3, #2
 800280c:	e033      	b.n	8002876 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2224      	movs	r2, #36	; 0x24
 800281a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 0201 	bic.w	r2, r2, #1
 800282c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800283c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	021b      	lsls	r3, r3, #8
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	4313      	orrs	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f042 0201 	orr.w	r2, r2, #1
 800285e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2220      	movs	r2, #32
 8002864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002870:	2300      	movs	r3, #0
 8002872:	e000      	b.n	8002876 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002874:	2302      	movs	r3, #2
  }
}
 8002876:	4618      	mov	r0, r3
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002882:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002884:	b08f      	sub	sp, #60	; 0x3c
 8002886:	af0a      	add	r7, sp, #40	; 0x28
 8002888:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e116      	b.n	8002ac2 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d106      	bne.n	80028b4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7fe fe40 	bl	8001534 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2203      	movs	r2, #3
 80028b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d102      	bne.n	80028ce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f003 fab7 	bl	8005e46 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	603b      	str	r3, [r7, #0]
 80028de:	687e      	ldr	r6, [r7, #4]
 80028e0:	466d      	mov	r5, sp
 80028e2:	f106 0410 	add.w	r4, r6, #16
 80028e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80028f6:	1d33      	adds	r3, r6, #4
 80028f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028fa:	6838      	ldr	r0, [r7, #0]
 80028fc:	f003 fa77 	bl	8005dee <USB_CoreInit>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d005      	beq.n	8002912 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2202      	movs	r2, #2
 800290a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e0d7      	b.n	8002ac2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2100      	movs	r1, #0
 8002918:	4618      	mov	r0, r3
 800291a:	f003 faa5 	bl	8005e68 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800291e:	2300      	movs	r3, #0
 8002920:	73fb      	strb	r3, [r7, #15]
 8002922:	e04a      	b.n	80029ba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002924:	7bfa      	ldrb	r2, [r7, #15]
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	4613      	mov	r3, r2
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	1a9b      	subs	r3, r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	333d      	adds	r3, #61	; 0x3d
 8002934:	2201      	movs	r2, #1
 8002936:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002938:	7bfa      	ldrb	r2, [r7, #15]
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	4613      	mov	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	1a9b      	subs	r3, r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	440b      	add	r3, r1
 8002946:	333c      	adds	r3, #60	; 0x3c
 8002948:	7bfa      	ldrb	r2, [r7, #15]
 800294a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800294c:	7bfa      	ldrb	r2, [r7, #15]
 800294e:	7bfb      	ldrb	r3, [r7, #15]
 8002950:	b298      	uxth	r0, r3
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	1a9b      	subs	r3, r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	3342      	adds	r3, #66	; 0x42
 8002960:	4602      	mov	r2, r0
 8002962:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002964:	7bfa      	ldrb	r2, [r7, #15]
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	1a9b      	subs	r3, r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	333f      	adds	r3, #63	; 0x3f
 8002974:	2200      	movs	r2, #0
 8002976:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002978:	7bfa      	ldrb	r2, [r7, #15]
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	1a9b      	subs	r3, r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	3344      	adds	r3, #68	; 0x44
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800298c:	7bfa      	ldrb	r2, [r7, #15]
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	1a9b      	subs	r3, r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	3348      	adds	r3, #72	; 0x48
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029a0:	7bfa      	ldrb	r2, [r7, #15]
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	4613      	mov	r3, r2
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	1a9b      	subs	r3, r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	3350      	adds	r3, #80	; 0x50
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
 80029b6:	3301      	adds	r3, #1
 80029b8:	73fb      	strb	r3, [r7, #15]
 80029ba:	7bfa      	ldrb	r2, [r7, #15]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d3af      	bcc.n	8002924 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029c4:	2300      	movs	r3, #0
 80029c6:	73fb      	strb	r3, [r7, #15]
 80029c8:	e044      	b.n	8002a54 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029ca:	7bfa      	ldrb	r2, [r7, #15]
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	1a9b      	subs	r3, r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	440b      	add	r3, r1
 80029d8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80029dc:	2200      	movs	r2, #0
 80029de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029e0:	7bfa      	ldrb	r2, [r7, #15]
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	4613      	mov	r3, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	1a9b      	subs	r3, r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	440b      	add	r3, r1
 80029ee:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80029f2:	7bfa      	ldrb	r2, [r7, #15]
 80029f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029f6:	7bfa      	ldrb	r2, [r7, #15]
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	1a9b      	subs	r3, r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	440b      	add	r3, r1
 8002a04:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002a08:	2200      	movs	r2, #0
 8002a0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a0c:	7bfa      	ldrb	r2, [r7, #15]
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	4613      	mov	r3, r2
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	1a9b      	subs	r3, r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a22:	7bfa      	ldrb	r2, [r7, #15]
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	4613      	mov	r3, r2
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	1a9b      	subs	r3, r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	440b      	add	r3, r1
 8002a30:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a38:	7bfa      	ldrb	r2, [r7, #15]
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	1a9b      	subs	r3, r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a4e:	7bfb      	ldrb	r3, [r7, #15]
 8002a50:	3301      	adds	r3, #1
 8002a52:	73fb      	strb	r3, [r7, #15]
 8002a54:	7bfa      	ldrb	r2, [r7, #15]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d3b5      	bcc.n	80029ca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	603b      	str	r3, [r7, #0]
 8002a64:	687e      	ldr	r6, [r7, #4]
 8002a66:	466d      	mov	r5, sp
 8002a68:	f106 0410 	add.w	r4, r6, #16
 8002a6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a74:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a78:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a7c:	1d33      	adds	r3, r6, #4
 8002a7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a80:	6838      	ldr	r0, [r7, #0]
 8002a82:	f003 fa1b 	bl	8005ebc <USB_DevInit>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d005      	beq.n	8002a98 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e014      	b.n	8002ac2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d102      	bne.n	8002ab6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f80a 	bl	8002aca <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f003 fbab 	bl	8006216 <USB_DevDisconnect>

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002aca <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b085      	sub	sp, #20
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002afc:	f043 0303 	orr.w	r3, r3, #3
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3714      	adds	r7, #20
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
	...

08002b14 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b18:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a04      	ldr	r2, [pc, #16]	; (8002b30 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b22:	6013      	str	r3, [r2, #0]
}
 8002b24:	bf00      	nop
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	40007000 	.word	0x40007000

08002b34 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b38:	4b04      	ldr	r3, [pc, #16]	; (8002b4c <HAL_PWREx_GetVoltageRange+0x18>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	40007000 	.word	0x40007000

08002b50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b5e:	d130      	bne.n	8002bc2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b60:	4b23      	ldr	r3, [pc, #140]	; (8002bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b6c:	d038      	beq.n	8002be0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b6e:	4b20      	ldr	r3, [pc, #128]	; (8002bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b76:	4a1e      	ldr	r2, [pc, #120]	; (8002bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b7c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b7e:	4b1d      	ldr	r3, [pc, #116]	; (8002bf4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2232      	movs	r2, #50	; 0x32
 8002b84:	fb02 f303 	mul.w	r3, r2, r3
 8002b88:	4a1b      	ldr	r2, [pc, #108]	; (8002bf8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8e:	0c9b      	lsrs	r3, r3, #18
 8002b90:	3301      	adds	r3, #1
 8002b92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b94:	e002      	b.n	8002b9c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b9c:	4b14      	ldr	r3, [pc, #80]	; (8002bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba8:	d102      	bne.n	8002bb0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1f2      	bne.n	8002b96 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bb0:	4b0f      	ldr	r3, [pc, #60]	; (8002bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bbc:	d110      	bne.n	8002be0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e00f      	b.n	8002be2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bc2:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bce:	d007      	beq.n	8002be0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bd0:	4b07      	ldr	r3, [pc, #28]	; (8002bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bd8:	4a05      	ldr	r2, [pc, #20]	; (8002bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bde:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	40007000 	.word	0x40007000
 8002bf4:	20000040 	.word	0x20000040
 8002bf8:	431bde83 	.word	0x431bde83

08002bfc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002c00:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	4a04      	ldr	r2, [pc, #16]	; (8002c18 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002c06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c0a:	6053      	str	r3, [r2, #4]
}
 8002c0c:	bf00      	nop
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	40007000 	.word	0x40007000

08002c1c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af02      	add	r7, sp, #8
 8002c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002c24:	f7fe fe5e 	bl	80018e4 <HAL_GetTick>
 8002c28:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e063      	b.n	8002cfc <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10b      	bne.n	8002c58 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7fe fae1 	bl	8001210 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002c4e:	f241 3188 	movw	r1, #5000	; 0x1388
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f858 	bl	8002d08 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	021a      	lsls	r2, r3, #8
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2120      	movs	r1, #32
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f850 	bl	8002d24 <QSPI_WaitFlagStateUntilTimeout>
 8002c84:	4603      	mov	r3, r0
 8002c86:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002c88:	7afb      	ldrb	r3, [r7, #11]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d131      	bne.n	8002cf2 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002c98:	f023 0310 	bic.w	r3, r3, #16
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	6852      	ldr	r2, [r2, #4]
 8002ca0:	0611      	lsls	r1, r2, #24
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	68d2      	ldr	r2, [r2, #12]
 8002ca6:	4311      	orrs	r1, r2
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6812      	ldr	r2, [r2, #0]
 8002cac:	430b      	orrs	r3, r1
 8002cae:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	4b13      	ldr	r3, [pc, #76]	; (8002d04 <HAL_QSPI_Init+0xe8>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6912      	ldr	r2, [r2, #16]
 8002cbe:	0411      	lsls	r1, r2, #16
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6952      	ldr	r2, [r2, #20]
 8002cc4:	4311      	orrs	r1, r2
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6992      	ldr	r2, [r2, #24]
 8002cca:	4311      	orrs	r1, r2
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6812      	ldr	r2, [r2, #0]
 8002cd0:	430b      	orrs	r3, r1
 8002cd2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0201 	orr.w	r2, r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002cfa:	7afb      	ldrb	r3, [r7, #11]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	ffe0f8fe 	.word	0xffe0f8fe

08002d08 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	4613      	mov	r3, r2
 8002d32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002d34:	e01a      	b.n	8002d6c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3c:	d016      	beq.n	8002d6c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d3e:	f7fe fdd1 	bl	80018e4 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d302      	bcc.n	8002d54 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10b      	bne.n	8002d6c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2204      	movs	r2, #4
 8002d58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d60:	f043 0201 	orr.w	r2, r3, #1
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e00e      	b.n	8002d8a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689a      	ldr	r2, [r3, #8]
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	4013      	ands	r3, r2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	bf14      	ite	ne
 8002d7a:	2301      	movne	r3, #1
 8002d7c:	2300      	moveq	r3, #0
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	461a      	mov	r2, r3
 8002d82:	79fb      	ldrb	r3, [r7, #7]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d1d6      	bne.n	8002d36 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
	...

08002d94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e3d4      	b.n	8003550 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002da6:	4ba1      	ldr	r3, [pc, #644]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 030c 	and.w	r3, r3, #12
 8002dae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002db0:	4b9e      	ldr	r3, [pc, #632]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f003 0303 	and.w	r3, r3, #3
 8002db8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0310 	and.w	r3, r3, #16
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 80e4 	beq.w	8002f90 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d007      	beq.n	8002dde <HAL_RCC_OscConfig+0x4a>
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	2b0c      	cmp	r3, #12
 8002dd2:	f040 808b 	bne.w	8002eec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	f040 8087 	bne.w	8002eec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dde:	4b93      	ldr	r3, [pc, #588]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d005      	beq.n	8002df6 <HAL_RCC_OscConfig+0x62>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e3ac      	b.n	8003550 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a1a      	ldr	r2, [r3, #32]
 8002dfa:	4b8c      	ldr	r3, [pc, #560]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d004      	beq.n	8002e10 <HAL_RCC_OscConfig+0x7c>
 8002e06:	4b89      	ldr	r3, [pc, #548]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e0e:	e005      	b.n	8002e1c <HAL_RCC_OscConfig+0x88>
 8002e10:	4b86      	ldr	r3, [pc, #536]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8002e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e16:	091b      	lsrs	r3, r3, #4
 8002e18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d223      	bcs.n	8002e68 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 fd41 	bl	80038ac <RCC_SetFlashLatencyFromMSIRange>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e38d      	b.n	8003550 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e34:	4b7d      	ldr	r3, [pc, #500]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a7c      	ldr	r2, [pc, #496]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8002e3a:	f043 0308 	orr.w	r3, r3, #8
 8002e3e:	6013      	str	r3, [r2, #0]
 8002e40:	4b7a      	ldr	r3, [pc, #488]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	4977      	ldr	r1, [pc, #476]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e52:	4b76      	ldr	r3, [pc, #472]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	021b      	lsls	r3, r3, #8
 8002e60:	4972      	ldr	r1, [pc, #456]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	604b      	str	r3, [r1, #4]
 8002e66:	e025      	b.n	8002eb4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e68:	4b70      	ldr	r3, [pc, #448]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a6f      	ldr	r2, [pc, #444]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8002e6e:	f043 0308 	orr.w	r3, r3, #8
 8002e72:	6013      	str	r3, [r2, #0]
 8002e74:	4b6d      	ldr	r3, [pc, #436]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	496a      	ldr	r1, [pc, #424]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e86:	4b69      	ldr	r3, [pc, #420]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	021b      	lsls	r3, r3, #8
 8002e94:	4965      	ldr	r1, [pc, #404]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d109      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f000 fd01 	bl	80038ac <RCC_SetFlashLatencyFromMSIRange>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e34d      	b.n	8003550 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002eb4:	f000 fc36 	bl	8003724 <HAL_RCC_GetSysClockFreq>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	4b5c      	ldr	r3, [pc, #368]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	091b      	lsrs	r3, r3, #4
 8002ec0:	f003 030f 	and.w	r3, r3, #15
 8002ec4:	495a      	ldr	r1, [pc, #360]	; (8003030 <HAL_RCC_OscConfig+0x29c>)
 8002ec6:	5ccb      	ldrb	r3, [r1, r3]
 8002ec8:	f003 031f 	and.w	r3, r3, #31
 8002ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed0:	4a58      	ldr	r2, [pc, #352]	; (8003034 <HAL_RCC_OscConfig+0x2a0>)
 8002ed2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ed4:	4b58      	ldr	r3, [pc, #352]	; (8003038 <HAL_RCC_OscConfig+0x2a4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fe fcb3 	bl	8001844 <HAL_InitTick>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ee2:	7bfb      	ldrb	r3, [r7, #15]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d052      	beq.n	8002f8e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
 8002eea:	e331      	b.n	8003550 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d032      	beq.n	8002f5a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ef4:	4b4d      	ldr	r3, [pc, #308]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a4c      	ldr	r2, [pc, #304]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8002efa:	f043 0301 	orr.w	r3, r3, #1
 8002efe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f00:	f7fe fcf0 	bl	80018e4 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f08:	f7fe fcec 	bl	80018e4 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e31a      	b.n	8003550 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f1a:	4b44      	ldr	r3, [pc, #272]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f26:	4b41      	ldr	r3, [pc, #260]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a40      	ldr	r2, [pc, #256]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8002f2c:	f043 0308 	orr.w	r3, r3, #8
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	4b3e      	ldr	r3, [pc, #248]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	493b      	ldr	r1, [pc, #236]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f44:	4b39      	ldr	r3, [pc, #228]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	021b      	lsls	r3, r3, #8
 8002f52:	4936      	ldr	r1, [pc, #216]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	604b      	str	r3, [r1, #4]
 8002f58:	e01a      	b.n	8002f90 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f5a:	4b34      	ldr	r3, [pc, #208]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a33      	ldr	r2, [pc, #204]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8002f60:	f023 0301 	bic.w	r3, r3, #1
 8002f64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f66:	f7fe fcbd 	bl	80018e4 <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f6c:	e008      	b.n	8002f80 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f6e:	f7fe fcb9 	bl	80018e4 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e2e7      	b.n	8003550 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f80:	4b2a      	ldr	r3, [pc, #168]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1f0      	bne.n	8002f6e <HAL_RCC_OscConfig+0x1da>
 8002f8c:	e000      	b.n	8002f90 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f8e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d074      	beq.n	8003086 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	d005      	beq.n	8002fae <HAL_RCC_OscConfig+0x21a>
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	2b0c      	cmp	r3, #12
 8002fa6:	d10e      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	2b03      	cmp	r3, #3
 8002fac:	d10b      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fae:	4b1f      	ldr	r3, [pc, #124]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d064      	beq.n	8003084 <HAL_RCC_OscConfig+0x2f0>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d160      	bne.n	8003084 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e2c4      	b.n	8003550 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fce:	d106      	bne.n	8002fde <HAL_RCC_OscConfig+0x24a>
 8002fd0:	4b16      	ldr	r3, [pc, #88]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a15      	ldr	r2, [pc, #84]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8002fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fda:	6013      	str	r3, [r2, #0]
 8002fdc:	e01d      	b.n	800301a <HAL_RCC_OscConfig+0x286>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fe6:	d10c      	bne.n	8003002 <HAL_RCC_OscConfig+0x26e>
 8002fe8:	4b10      	ldr	r3, [pc, #64]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a0f      	ldr	r2, [pc, #60]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8002fee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ff2:	6013      	str	r3, [r2, #0]
 8002ff4:	4b0d      	ldr	r3, [pc, #52]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a0c      	ldr	r2, [pc, #48]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8002ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ffe:	6013      	str	r3, [r2, #0]
 8003000:	e00b      	b.n	800301a <HAL_RCC_OscConfig+0x286>
 8003002:	4b0a      	ldr	r3, [pc, #40]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a09      	ldr	r2, [pc, #36]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8003008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	4b07      	ldr	r3, [pc, #28]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a06      	ldr	r2, [pc, #24]	; (800302c <HAL_RCC_OscConfig+0x298>)
 8003014:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003018:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d01c      	beq.n	800305c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003022:	f7fe fc5f 	bl	80018e4 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003028:	e011      	b.n	800304e <HAL_RCC_OscConfig+0x2ba>
 800302a:	bf00      	nop
 800302c:	40021000 	.word	0x40021000
 8003030:	08006c8c 	.word	0x08006c8c
 8003034:	20000040 	.word	0x20000040
 8003038:	20000044 	.word	0x20000044
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800303c:	f7fe fc52 	bl	80018e4 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b64      	cmp	r3, #100	; 0x64
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e280      	b.n	8003550 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800304e:	4baf      	ldr	r3, [pc, #700]	; (800330c <HAL_RCC_OscConfig+0x578>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0f0      	beq.n	800303c <HAL_RCC_OscConfig+0x2a8>
 800305a:	e014      	b.n	8003086 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305c:	f7fe fc42 	bl	80018e4 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003064:	f7fe fc3e 	bl	80018e4 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b64      	cmp	r3, #100	; 0x64
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e26c      	b.n	8003550 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003076:	4ba5      	ldr	r3, [pc, #660]	; (800330c <HAL_RCC_OscConfig+0x578>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1f0      	bne.n	8003064 <HAL_RCC_OscConfig+0x2d0>
 8003082:	e000      	b.n	8003086 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d060      	beq.n	8003154 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	2b04      	cmp	r3, #4
 8003096:	d005      	beq.n	80030a4 <HAL_RCC_OscConfig+0x310>
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	2b0c      	cmp	r3, #12
 800309c:	d119      	bne.n	80030d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d116      	bne.n	80030d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030a4:	4b99      	ldr	r3, [pc, #612]	; (800330c <HAL_RCC_OscConfig+0x578>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <HAL_RCC_OscConfig+0x328>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e249      	b.n	8003550 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030bc:	4b93      	ldr	r3, [pc, #588]	; (800330c <HAL_RCC_OscConfig+0x578>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	061b      	lsls	r3, r3, #24
 80030ca:	4990      	ldr	r1, [pc, #576]	; (800330c <HAL_RCC_OscConfig+0x578>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030d0:	e040      	b.n	8003154 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d023      	beq.n	8003122 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030da:	4b8c      	ldr	r3, [pc, #560]	; (800330c <HAL_RCC_OscConfig+0x578>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a8b      	ldr	r2, [pc, #556]	; (800330c <HAL_RCC_OscConfig+0x578>)
 80030e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e6:	f7fe fbfd 	bl	80018e4 <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ee:	f7fe fbf9 	bl	80018e4 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e227      	b.n	8003550 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003100:	4b82      	ldr	r3, [pc, #520]	; (800330c <HAL_RCC_OscConfig+0x578>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0f0      	beq.n	80030ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800310c:	4b7f      	ldr	r3, [pc, #508]	; (800330c <HAL_RCC_OscConfig+0x578>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	061b      	lsls	r3, r3, #24
 800311a:	497c      	ldr	r1, [pc, #496]	; (800330c <HAL_RCC_OscConfig+0x578>)
 800311c:	4313      	orrs	r3, r2
 800311e:	604b      	str	r3, [r1, #4]
 8003120:	e018      	b.n	8003154 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003122:	4b7a      	ldr	r3, [pc, #488]	; (800330c <HAL_RCC_OscConfig+0x578>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a79      	ldr	r2, [pc, #484]	; (800330c <HAL_RCC_OscConfig+0x578>)
 8003128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800312c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312e:	f7fe fbd9 	bl	80018e4 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003136:	f7fe fbd5 	bl	80018e4 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e203      	b.n	8003550 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003148:	4b70      	ldr	r3, [pc, #448]	; (800330c <HAL_RCC_OscConfig+0x578>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1f0      	bne.n	8003136 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0308 	and.w	r3, r3, #8
 800315c:	2b00      	cmp	r3, #0
 800315e:	d03c      	beq.n	80031da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d01c      	beq.n	80031a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003168:	4b68      	ldr	r3, [pc, #416]	; (800330c <HAL_RCC_OscConfig+0x578>)
 800316a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800316e:	4a67      	ldr	r2, [pc, #412]	; (800330c <HAL_RCC_OscConfig+0x578>)
 8003170:	f043 0301 	orr.w	r3, r3, #1
 8003174:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003178:	f7fe fbb4 	bl	80018e4 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003180:	f7fe fbb0 	bl	80018e4 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e1de      	b.n	8003550 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003192:	4b5e      	ldr	r3, [pc, #376]	; (800330c <HAL_RCC_OscConfig+0x578>)
 8003194:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0ef      	beq.n	8003180 <HAL_RCC_OscConfig+0x3ec>
 80031a0:	e01b      	b.n	80031da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031a2:	4b5a      	ldr	r3, [pc, #360]	; (800330c <HAL_RCC_OscConfig+0x578>)
 80031a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a8:	4a58      	ldr	r2, [pc, #352]	; (800330c <HAL_RCC_OscConfig+0x578>)
 80031aa:	f023 0301 	bic.w	r3, r3, #1
 80031ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b2:	f7fe fb97 	bl	80018e4 <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031b8:	e008      	b.n	80031cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ba:	f7fe fb93 	bl	80018e4 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e1c1      	b.n	8003550 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031cc:	4b4f      	ldr	r3, [pc, #316]	; (800330c <HAL_RCC_OscConfig+0x578>)
 80031ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1ef      	bne.n	80031ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 80a6 	beq.w	8003334 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031e8:	2300      	movs	r3, #0
 80031ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031ec:	4b47      	ldr	r3, [pc, #284]	; (800330c <HAL_RCC_OscConfig+0x578>)
 80031ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10d      	bne.n	8003214 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031f8:	4b44      	ldr	r3, [pc, #272]	; (800330c <HAL_RCC_OscConfig+0x578>)
 80031fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fc:	4a43      	ldr	r2, [pc, #268]	; (800330c <HAL_RCC_OscConfig+0x578>)
 80031fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003202:	6593      	str	r3, [r2, #88]	; 0x58
 8003204:	4b41      	ldr	r3, [pc, #260]	; (800330c <HAL_RCC_OscConfig+0x578>)
 8003206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320c:	60bb      	str	r3, [r7, #8]
 800320e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003210:	2301      	movs	r3, #1
 8003212:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003214:	4b3e      	ldr	r3, [pc, #248]	; (8003310 <HAL_RCC_OscConfig+0x57c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321c:	2b00      	cmp	r3, #0
 800321e:	d118      	bne.n	8003252 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003220:	4b3b      	ldr	r3, [pc, #236]	; (8003310 <HAL_RCC_OscConfig+0x57c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a3a      	ldr	r2, [pc, #232]	; (8003310 <HAL_RCC_OscConfig+0x57c>)
 8003226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800322a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800322c:	f7fe fb5a 	bl	80018e4 <HAL_GetTick>
 8003230:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003232:	e008      	b.n	8003246 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003234:	f7fe fb56 	bl	80018e4 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e184      	b.n	8003550 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003246:	4b32      	ldr	r3, [pc, #200]	; (8003310 <HAL_RCC_OscConfig+0x57c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324e:	2b00      	cmp	r3, #0
 8003250:	d0f0      	beq.n	8003234 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d108      	bne.n	800326c <HAL_RCC_OscConfig+0x4d8>
 800325a:	4b2c      	ldr	r3, [pc, #176]	; (800330c <HAL_RCC_OscConfig+0x578>)
 800325c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003260:	4a2a      	ldr	r2, [pc, #168]	; (800330c <HAL_RCC_OscConfig+0x578>)
 8003262:	f043 0301 	orr.w	r3, r3, #1
 8003266:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800326a:	e024      	b.n	80032b6 <HAL_RCC_OscConfig+0x522>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	2b05      	cmp	r3, #5
 8003272:	d110      	bne.n	8003296 <HAL_RCC_OscConfig+0x502>
 8003274:	4b25      	ldr	r3, [pc, #148]	; (800330c <HAL_RCC_OscConfig+0x578>)
 8003276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327a:	4a24      	ldr	r2, [pc, #144]	; (800330c <HAL_RCC_OscConfig+0x578>)
 800327c:	f043 0304 	orr.w	r3, r3, #4
 8003280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003284:	4b21      	ldr	r3, [pc, #132]	; (800330c <HAL_RCC_OscConfig+0x578>)
 8003286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328a:	4a20      	ldr	r2, [pc, #128]	; (800330c <HAL_RCC_OscConfig+0x578>)
 800328c:	f043 0301 	orr.w	r3, r3, #1
 8003290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003294:	e00f      	b.n	80032b6 <HAL_RCC_OscConfig+0x522>
 8003296:	4b1d      	ldr	r3, [pc, #116]	; (800330c <HAL_RCC_OscConfig+0x578>)
 8003298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329c:	4a1b      	ldr	r2, [pc, #108]	; (800330c <HAL_RCC_OscConfig+0x578>)
 800329e:	f023 0301 	bic.w	r3, r3, #1
 80032a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032a6:	4b19      	ldr	r3, [pc, #100]	; (800330c <HAL_RCC_OscConfig+0x578>)
 80032a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ac:	4a17      	ldr	r2, [pc, #92]	; (800330c <HAL_RCC_OscConfig+0x578>)
 80032ae:	f023 0304 	bic.w	r3, r3, #4
 80032b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d016      	beq.n	80032ec <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032be:	f7fe fb11 	bl	80018e4 <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032c4:	e00a      	b.n	80032dc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032c6:	f7fe fb0d 	bl	80018e4 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e139      	b.n	8003550 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032dc:	4b0b      	ldr	r3, [pc, #44]	; (800330c <HAL_RCC_OscConfig+0x578>)
 80032de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0ed      	beq.n	80032c6 <HAL_RCC_OscConfig+0x532>
 80032ea:	e01a      	b.n	8003322 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ec:	f7fe fafa 	bl	80018e4 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032f2:	e00f      	b.n	8003314 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f4:	f7fe faf6 	bl	80018e4 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003302:	4293      	cmp	r3, r2
 8003304:	d906      	bls.n	8003314 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e122      	b.n	8003550 <HAL_RCC_OscConfig+0x7bc>
 800330a:	bf00      	nop
 800330c:	40021000 	.word	0x40021000
 8003310:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003314:	4b90      	ldr	r3, [pc, #576]	; (8003558 <HAL_RCC_OscConfig+0x7c4>)
 8003316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1e8      	bne.n	80032f4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003322:	7ffb      	ldrb	r3, [r7, #31]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d105      	bne.n	8003334 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003328:	4b8b      	ldr	r3, [pc, #556]	; (8003558 <HAL_RCC_OscConfig+0x7c4>)
 800332a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332c:	4a8a      	ldr	r2, [pc, #552]	; (8003558 <HAL_RCC_OscConfig+0x7c4>)
 800332e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003332:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 8108 	beq.w	800354e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003342:	2b02      	cmp	r3, #2
 8003344:	f040 80d0 	bne.w	80034e8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003348:	4b83      	ldr	r3, [pc, #524]	; (8003558 <HAL_RCC_OscConfig+0x7c4>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f003 0203 	and.w	r2, r3, #3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003358:	429a      	cmp	r2, r3
 800335a:	d130      	bne.n	80033be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	3b01      	subs	r3, #1
 8003368:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800336a:	429a      	cmp	r2, r3
 800336c:	d127      	bne.n	80033be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003378:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800337a:	429a      	cmp	r2, r3
 800337c:	d11f      	bne.n	80033be <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003388:	2a07      	cmp	r2, #7
 800338a:	bf14      	ite	ne
 800338c:	2201      	movne	r2, #1
 800338e:	2200      	moveq	r2, #0
 8003390:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003392:	4293      	cmp	r3, r2
 8003394:	d113      	bne.n	80033be <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a0:	085b      	lsrs	r3, r3, #1
 80033a2:	3b01      	subs	r3, #1
 80033a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d109      	bne.n	80033be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b4:	085b      	lsrs	r3, r3, #1
 80033b6:	3b01      	subs	r3, #1
 80033b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d06e      	beq.n	800349c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	2b0c      	cmp	r3, #12
 80033c2:	d069      	beq.n	8003498 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80033c4:	4b64      	ldr	r3, [pc, #400]	; (8003558 <HAL_RCC_OscConfig+0x7c4>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d105      	bne.n	80033dc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80033d0:	4b61      	ldr	r3, [pc, #388]	; (8003558 <HAL_RCC_OscConfig+0x7c4>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e0b7      	b.n	8003550 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033e0:	4b5d      	ldr	r3, [pc, #372]	; (8003558 <HAL_RCC_OscConfig+0x7c4>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a5c      	ldr	r2, [pc, #368]	; (8003558 <HAL_RCC_OscConfig+0x7c4>)
 80033e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033ea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033ec:	f7fe fa7a 	bl	80018e4 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f4:	f7fe fa76 	bl	80018e4 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e0a4      	b.n	8003550 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003406:	4b54      	ldr	r3, [pc, #336]	; (8003558 <HAL_RCC_OscConfig+0x7c4>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f0      	bne.n	80033f4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003412:	4b51      	ldr	r3, [pc, #324]	; (8003558 <HAL_RCC_OscConfig+0x7c4>)
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	4b51      	ldr	r3, [pc, #324]	; (800355c <HAL_RCC_OscConfig+0x7c8>)
 8003418:	4013      	ands	r3, r2
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003422:	3a01      	subs	r2, #1
 8003424:	0112      	lsls	r2, r2, #4
 8003426:	4311      	orrs	r1, r2
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800342c:	0212      	lsls	r2, r2, #8
 800342e:	4311      	orrs	r1, r2
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003434:	0852      	lsrs	r2, r2, #1
 8003436:	3a01      	subs	r2, #1
 8003438:	0552      	lsls	r2, r2, #21
 800343a:	4311      	orrs	r1, r2
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003440:	0852      	lsrs	r2, r2, #1
 8003442:	3a01      	subs	r2, #1
 8003444:	0652      	lsls	r2, r2, #25
 8003446:	4311      	orrs	r1, r2
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800344c:	0912      	lsrs	r2, r2, #4
 800344e:	0452      	lsls	r2, r2, #17
 8003450:	430a      	orrs	r2, r1
 8003452:	4941      	ldr	r1, [pc, #260]	; (8003558 <HAL_RCC_OscConfig+0x7c4>)
 8003454:	4313      	orrs	r3, r2
 8003456:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003458:	4b3f      	ldr	r3, [pc, #252]	; (8003558 <HAL_RCC_OscConfig+0x7c4>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a3e      	ldr	r2, [pc, #248]	; (8003558 <HAL_RCC_OscConfig+0x7c4>)
 800345e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003462:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003464:	4b3c      	ldr	r3, [pc, #240]	; (8003558 <HAL_RCC_OscConfig+0x7c4>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	4a3b      	ldr	r2, [pc, #236]	; (8003558 <HAL_RCC_OscConfig+0x7c4>)
 800346a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800346e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003470:	f7fe fa38 	bl	80018e4 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003478:	f7fe fa34 	bl	80018e4 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e062      	b.n	8003550 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800348a:	4b33      	ldr	r3, [pc, #204]	; (8003558 <HAL_RCC_OscConfig+0x7c4>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0f0      	beq.n	8003478 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003496:	e05a      	b.n	800354e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e059      	b.n	8003550 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800349c:	4b2e      	ldr	r3, [pc, #184]	; (8003558 <HAL_RCC_OscConfig+0x7c4>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d152      	bne.n	800354e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80034a8:	4b2b      	ldr	r3, [pc, #172]	; (8003558 <HAL_RCC_OscConfig+0x7c4>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a2a      	ldr	r2, [pc, #168]	; (8003558 <HAL_RCC_OscConfig+0x7c4>)
 80034ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034b4:	4b28      	ldr	r3, [pc, #160]	; (8003558 <HAL_RCC_OscConfig+0x7c4>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	4a27      	ldr	r2, [pc, #156]	; (8003558 <HAL_RCC_OscConfig+0x7c4>)
 80034ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034c0:	f7fe fa10 	bl	80018e4 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c8:	f7fe fa0c 	bl	80018e4 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e03a      	b.n	8003550 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034da:	4b1f      	ldr	r3, [pc, #124]	; (8003558 <HAL_RCC_OscConfig+0x7c4>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d0f0      	beq.n	80034c8 <HAL_RCC_OscConfig+0x734>
 80034e6:	e032      	b.n	800354e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	2b0c      	cmp	r3, #12
 80034ec:	d02d      	beq.n	800354a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ee:	4b1a      	ldr	r3, [pc, #104]	; (8003558 <HAL_RCC_OscConfig+0x7c4>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a19      	ldr	r2, [pc, #100]	; (8003558 <HAL_RCC_OscConfig+0x7c4>)
 80034f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034f8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80034fa:	4b17      	ldr	r3, [pc, #92]	; (8003558 <HAL_RCC_OscConfig+0x7c4>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d105      	bne.n	8003512 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003506:	4b14      	ldr	r3, [pc, #80]	; (8003558 <HAL_RCC_OscConfig+0x7c4>)
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	4a13      	ldr	r2, [pc, #76]	; (8003558 <HAL_RCC_OscConfig+0x7c4>)
 800350c:	f023 0303 	bic.w	r3, r3, #3
 8003510:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003512:	4b11      	ldr	r3, [pc, #68]	; (8003558 <HAL_RCC_OscConfig+0x7c4>)
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	4a10      	ldr	r2, [pc, #64]	; (8003558 <HAL_RCC_OscConfig+0x7c4>)
 8003518:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800351c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003520:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003522:	f7fe f9df 	bl	80018e4 <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003528:	e008      	b.n	800353c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800352a:	f7fe f9db 	bl	80018e4 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e009      	b.n	8003550 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800353c:	4b06      	ldr	r3, [pc, #24]	; (8003558 <HAL_RCC_OscConfig+0x7c4>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1f0      	bne.n	800352a <HAL_RCC_OscConfig+0x796>
 8003548:	e001      	b.n	800354e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e000      	b.n	8003550 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3720      	adds	r7, #32
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40021000 	.word	0x40021000
 800355c:	f99d808c 	.word	0xf99d808c

08003560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e0c8      	b.n	8003706 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003574:	4b66      	ldr	r3, [pc, #408]	; (8003710 <HAL_RCC_ClockConfig+0x1b0>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	429a      	cmp	r2, r3
 8003580:	d910      	bls.n	80035a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003582:	4b63      	ldr	r3, [pc, #396]	; (8003710 <HAL_RCC_ClockConfig+0x1b0>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f023 0207 	bic.w	r2, r3, #7
 800358a:	4961      	ldr	r1, [pc, #388]	; (8003710 <HAL_RCC_ClockConfig+0x1b0>)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	4313      	orrs	r3, r2
 8003590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003592:	4b5f      	ldr	r3, [pc, #380]	; (8003710 <HAL_RCC_ClockConfig+0x1b0>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0307 	and.w	r3, r3, #7
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	429a      	cmp	r2, r3
 800359e:	d001      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e0b0      	b.n	8003706 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d04c      	beq.n	800364a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	d107      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035b8:	4b56      	ldr	r3, [pc, #344]	; (8003714 <HAL_RCC_ClockConfig+0x1b4>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d121      	bne.n	8003608 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e09e      	b.n	8003706 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d107      	bne.n	80035e0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035d0:	4b50      	ldr	r3, [pc, #320]	; (8003714 <HAL_RCC_ClockConfig+0x1b4>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d115      	bne.n	8003608 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e092      	b.n	8003706 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d107      	bne.n	80035f8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035e8:	4b4a      	ldr	r3, [pc, #296]	; (8003714 <HAL_RCC_ClockConfig+0x1b4>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d109      	bne.n	8003608 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e086      	b.n	8003706 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035f8:	4b46      	ldr	r3, [pc, #280]	; (8003714 <HAL_RCC_ClockConfig+0x1b4>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e07e      	b.n	8003706 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003608:	4b42      	ldr	r3, [pc, #264]	; (8003714 <HAL_RCC_ClockConfig+0x1b4>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f023 0203 	bic.w	r2, r3, #3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	493f      	ldr	r1, [pc, #252]	; (8003714 <HAL_RCC_ClockConfig+0x1b4>)
 8003616:	4313      	orrs	r3, r2
 8003618:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800361a:	f7fe f963 	bl	80018e4 <HAL_GetTick>
 800361e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003620:	e00a      	b.n	8003638 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003622:	f7fe f95f 	bl	80018e4 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003630:	4293      	cmp	r3, r2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e066      	b.n	8003706 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003638:	4b36      	ldr	r3, [pc, #216]	; (8003714 <HAL_RCC_ClockConfig+0x1b4>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f003 020c 	and.w	r2, r3, #12
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	429a      	cmp	r2, r3
 8003648:	d1eb      	bne.n	8003622 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d008      	beq.n	8003668 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003656:	4b2f      	ldr	r3, [pc, #188]	; (8003714 <HAL_RCC_ClockConfig+0x1b4>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	492c      	ldr	r1, [pc, #176]	; (8003714 <HAL_RCC_ClockConfig+0x1b4>)
 8003664:	4313      	orrs	r3, r2
 8003666:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003668:	4b29      	ldr	r3, [pc, #164]	; (8003710 <HAL_RCC_ClockConfig+0x1b0>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	429a      	cmp	r2, r3
 8003674:	d210      	bcs.n	8003698 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003676:	4b26      	ldr	r3, [pc, #152]	; (8003710 <HAL_RCC_ClockConfig+0x1b0>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f023 0207 	bic.w	r2, r3, #7
 800367e:	4924      	ldr	r1, [pc, #144]	; (8003710 <HAL_RCC_ClockConfig+0x1b0>)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	4313      	orrs	r3, r2
 8003684:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003686:	4b22      	ldr	r3, [pc, #136]	; (8003710 <HAL_RCC_ClockConfig+0x1b0>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	429a      	cmp	r2, r3
 8003692:	d001      	beq.n	8003698 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e036      	b.n	8003706 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d008      	beq.n	80036b6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036a4:	4b1b      	ldr	r3, [pc, #108]	; (8003714 <HAL_RCC_ClockConfig+0x1b4>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	4918      	ldr	r1, [pc, #96]	; (8003714 <HAL_RCC_ClockConfig+0x1b4>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d009      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036c2:	4b14      	ldr	r3, [pc, #80]	; (8003714 <HAL_RCC_ClockConfig+0x1b4>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	4910      	ldr	r1, [pc, #64]	; (8003714 <HAL_RCC_ClockConfig+0x1b4>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036d6:	f000 f825 	bl	8003724 <HAL_RCC_GetSysClockFreq>
 80036da:	4602      	mov	r2, r0
 80036dc:	4b0d      	ldr	r3, [pc, #52]	; (8003714 <HAL_RCC_ClockConfig+0x1b4>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	091b      	lsrs	r3, r3, #4
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	490c      	ldr	r1, [pc, #48]	; (8003718 <HAL_RCC_ClockConfig+0x1b8>)
 80036e8:	5ccb      	ldrb	r3, [r1, r3]
 80036ea:	f003 031f 	and.w	r3, r3, #31
 80036ee:	fa22 f303 	lsr.w	r3, r2, r3
 80036f2:	4a0a      	ldr	r2, [pc, #40]	; (800371c <HAL_RCC_ClockConfig+0x1bc>)
 80036f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80036f6:	4b0a      	ldr	r3, [pc, #40]	; (8003720 <HAL_RCC_ClockConfig+0x1c0>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fe f8a2 	bl	8001844 <HAL_InitTick>
 8003700:	4603      	mov	r3, r0
 8003702:	72fb      	strb	r3, [r7, #11]

  return status;
 8003704:	7afb      	ldrb	r3, [r7, #11]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40022000 	.word	0x40022000
 8003714:	40021000 	.word	0x40021000
 8003718:	08006c8c 	.word	0x08006c8c
 800371c:	20000040 	.word	0x20000040
 8003720:	20000044 	.word	0x20000044

08003724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003724:	b480      	push	{r7}
 8003726:	b089      	sub	sp, #36	; 0x24
 8003728:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800372a:	2300      	movs	r3, #0
 800372c:	61fb      	str	r3, [r7, #28]
 800372e:	2300      	movs	r3, #0
 8003730:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003732:	4b3e      	ldr	r3, [pc, #248]	; (800382c <HAL_RCC_GetSysClockFreq+0x108>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 030c 	and.w	r3, r3, #12
 800373a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800373c:	4b3b      	ldr	r3, [pc, #236]	; (800382c <HAL_RCC_GetSysClockFreq+0x108>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f003 0303 	and.w	r3, r3, #3
 8003744:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d005      	beq.n	8003758 <HAL_RCC_GetSysClockFreq+0x34>
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	2b0c      	cmp	r3, #12
 8003750:	d121      	bne.n	8003796 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d11e      	bne.n	8003796 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003758:	4b34      	ldr	r3, [pc, #208]	; (800382c <HAL_RCC_GetSysClockFreq+0x108>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0308 	and.w	r3, r3, #8
 8003760:	2b00      	cmp	r3, #0
 8003762:	d107      	bne.n	8003774 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003764:	4b31      	ldr	r3, [pc, #196]	; (800382c <HAL_RCC_GetSysClockFreq+0x108>)
 8003766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800376a:	0a1b      	lsrs	r3, r3, #8
 800376c:	f003 030f 	and.w	r3, r3, #15
 8003770:	61fb      	str	r3, [r7, #28]
 8003772:	e005      	b.n	8003780 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003774:	4b2d      	ldr	r3, [pc, #180]	; (800382c <HAL_RCC_GetSysClockFreq+0x108>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	091b      	lsrs	r3, r3, #4
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003780:	4a2b      	ldr	r2, [pc, #172]	; (8003830 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003788:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10d      	bne.n	80037ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003794:	e00a      	b.n	80037ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	2b04      	cmp	r3, #4
 800379a:	d102      	bne.n	80037a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800379c:	4b25      	ldr	r3, [pc, #148]	; (8003834 <HAL_RCC_GetSysClockFreq+0x110>)
 800379e:	61bb      	str	r3, [r7, #24]
 80037a0:	e004      	b.n	80037ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d101      	bne.n	80037ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037a8:	4b23      	ldr	r3, [pc, #140]	; (8003838 <HAL_RCC_GetSysClockFreq+0x114>)
 80037aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	2b0c      	cmp	r3, #12
 80037b0:	d134      	bne.n	800381c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037b2:	4b1e      	ldr	r3, [pc, #120]	; (800382c <HAL_RCC_GetSysClockFreq+0x108>)
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d003      	beq.n	80037ca <HAL_RCC_GetSysClockFreq+0xa6>
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	2b03      	cmp	r3, #3
 80037c6:	d003      	beq.n	80037d0 <HAL_RCC_GetSysClockFreq+0xac>
 80037c8:	e005      	b.n	80037d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80037ca:	4b1a      	ldr	r3, [pc, #104]	; (8003834 <HAL_RCC_GetSysClockFreq+0x110>)
 80037cc:	617b      	str	r3, [r7, #20]
      break;
 80037ce:	e005      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80037d0:	4b19      	ldr	r3, [pc, #100]	; (8003838 <HAL_RCC_GetSysClockFreq+0x114>)
 80037d2:	617b      	str	r3, [r7, #20]
      break;
 80037d4:	e002      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	617b      	str	r3, [r7, #20]
      break;
 80037da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037dc:	4b13      	ldr	r3, [pc, #76]	; (800382c <HAL_RCC_GetSysClockFreq+0x108>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	091b      	lsrs	r3, r3, #4
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	3301      	adds	r3, #1
 80037e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80037ea:	4b10      	ldr	r3, [pc, #64]	; (800382c <HAL_RCC_GetSysClockFreq+0x108>)
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	0a1b      	lsrs	r3, r3, #8
 80037f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	fb02 f203 	mul.w	r2, r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003800:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003802:	4b0a      	ldr	r3, [pc, #40]	; (800382c <HAL_RCC_GetSysClockFreq+0x108>)
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	0e5b      	lsrs	r3, r3, #25
 8003808:	f003 0303 	and.w	r3, r3, #3
 800380c:	3301      	adds	r3, #1
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	fbb2 f3f3 	udiv	r3, r2, r3
 800381a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800381c:	69bb      	ldr	r3, [r7, #24]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3724      	adds	r7, #36	; 0x24
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	40021000 	.word	0x40021000
 8003830:	08006ca4 	.word	0x08006ca4
 8003834:	00f42400 	.word	0x00f42400
 8003838:	007a1200 	.word	0x007a1200

0800383c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003840:	4b03      	ldr	r3, [pc, #12]	; (8003850 <HAL_RCC_GetHCLKFreq+0x14>)
 8003842:	681b      	ldr	r3, [r3, #0]
}
 8003844:	4618      	mov	r0, r3
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	20000040 	.word	0x20000040

08003854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003858:	f7ff fff0 	bl	800383c <HAL_RCC_GetHCLKFreq>
 800385c:	4602      	mov	r2, r0
 800385e:	4b06      	ldr	r3, [pc, #24]	; (8003878 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	0a1b      	lsrs	r3, r3, #8
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	4904      	ldr	r1, [pc, #16]	; (800387c <HAL_RCC_GetPCLK1Freq+0x28>)
 800386a:	5ccb      	ldrb	r3, [r1, r3]
 800386c:	f003 031f 	and.w	r3, r3, #31
 8003870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003874:	4618      	mov	r0, r3
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40021000 	.word	0x40021000
 800387c:	08006c9c 	.word	0x08006c9c

08003880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003884:	f7ff ffda 	bl	800383c <HAL_RCC_GetHCLKFreq>
 8003888:	4602      	mov	r2, r0
 800388a:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	0adb      	lsrs	r3, r3, #11
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	4904      	ldr	r1, [pc, #16]	; (80038a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003896:	5ccb      	ldrb	r3, [r1, r3]
 8003898:	f003 031f 	and.w	r3, r3, #31
 800389c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	40021000 	.word	0x40021000
 80038a8:	08006c9c 	.word	0x08006c9c

080038ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038b4:	2300      	movs	r3, #0
 80038b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038b8:	4b2a      	ldr	r3, [pc, #168]	; (8003964 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038c4:	f7ff f936 	bl	8002b34 <HAL_PWREx_GetVoltageRange>
 80038c8:	6178      	str	r0, [r7, #20]
 80038ca:	e014      	b.n	80038f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038cc:	4b25      	ldr	r3, [pc, #148]	; (8003964 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d0:	4a24      	ldr	r2, [pc, #144]	; (8003964 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d6:	6593      	str	r3, [r2, #88]	; 0x58
 80038d8:	4b22      	ldr	r3, [pc, #136]	; (8003964 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038e4:	f7ff f926 	bl	8002b34 <HAL_PWREx_GetVoltageRange>
 80038e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038ea:	4b1e      	ldr	r3, [pc, #120]	; (8003964 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ee:	4a1d      	ldr	r2, [pc, #116]	; (8003964 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038fc:	d10b      	bne.n	8003916 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b80      	cmp	r3, #128	; 0x80
 8003902:	d919      	bls.n	8003938 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2ba0      	cmp	r3, #160	; 0xa0
 8003908:	d902      	bls.n	8003910 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800390a:	2302      	movs	r3, #2
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	e013      	b.n	8003938 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003910:	2301      	movs	r3, #1
 8003912:	613b      	str	r3, [r7, #16]
 8003914:	e010      	b.n	8003938 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b80      	cmp	r3, #128	; 0x80
 800391a:	d902      	bls.n	8003922 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800391c:	2303      	movs	r3, #3
 800391e:	613b      	str	r3, [r7, #16]
 8003920:	e00a      	b.n	8003938 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b80      	cmp	r3, #128	; 0x80
 8003926:	d102      	bne.n	800392e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003928:	2302      	movs	r3, #2
 800392a:	613b      	str	r3, [r7, #16]
 800392c:	e004      	b.n	8003938 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b70      	cmp	r3, #112	; 0x70
 8003932:	d101      	bne.n	8003938 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003934:	2301      	movs	r3, #1
 8003936:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003938:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f023 0207 	bic.w	r2, r3, #7
 8003940:	4909      	ldr	r1, [pc, #36]	; (8003968 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	4313      	orrs	r3, r2
 8003946:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003948:	4b07      	ldr	r3, [pc, #28]	; (8003968 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	429a      	cmp	r2, r3
 8003954:	d001      	beq.n	800395a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e000      	b.n	800395c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3718      	adds	r7, #24
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40021000 	.word	0x40021000
 8003968:	40022000 	.word	0x40022000

0800396c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003974:	2300      	movs	r3, #0
 8003976:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003978:	2300      	movs	r3, #0
 800397a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003984:	2b00      	cmp	r3, #0
 8003986:	d041      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800398c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003990:	d02a      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003992:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003996:	d824      	bhi.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003998:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800399c:	d008      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800399e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039a2:	d81e      	bhi.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00a      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x52>
 80039a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039ac:	d010      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039ae:	e018      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039b0:	4b86      	ldr	r3, [pc, #536]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	4a85      	ldr	r2, [pc, #532]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039bc:	e015      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	3304      	adds	r3, #4
 80039c2:	2100      	movs	r1, #0
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 facb 	bl	8003f60 <RCCEx_PLLSAI1_Config>
 80039ca:	4603      	mov	r3, r0
 80039cc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039ce:	e00c      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3320      	adds	r3, #32
 80039d4:	2100      	movs	r1, #0
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 fbb6 	bl	8004148 <RCCEx_PLLSAI2_Config>
 80039dc:	4603      	mov	r3, r0
 80039de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039e0:	e003      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	74fb      	strb	r3, [r7, #19]
      break;
 80039e6:	e000      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80039e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039ea:	7cfb      	ldrb	r3, [r7, #19]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10b      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039f0:	4b76      	ldr	r3, [pc, #472]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039fe:	4973      	ldr	r1, [pc, #460]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a06:	e001      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a08:	7cfb      	ldrb	r3, [r7, #19]
 8003a0a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d041      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a1c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a20:	d02a      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003a22:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a26:	d824      	bhi.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a2c:	d008      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a32:	d81e      	bhi.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00a      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003a38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a3c:	d010      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a3e:	e018      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a40:	4b62      	ldr	r3, [pc, #392]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	4a61      	ldr	r2, [pc, #388]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a4a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a4c:	e015      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	3304      	adds	r3, #4
 8003a52:	2100      	movs	r1, #0
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 fa83 	bl	8003f60 <RCCEx_PLLSAI1_Config>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a5e:	e00c      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3320      	adds	r3, #32
 8003a64:	2100      	movs	r1, #0
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 fb6e 	bl	8004148 <RCCEx_PLLSAI2_Config>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a70:	e003      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	74fb      	strb	r3, [r7, #19]
      break;
 8003a76:	e000      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003a78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a7a:	7cfb      	ldrb	r3, [r7, #19]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10b      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a80:	4b52      	ldr	r3, [pc, #328]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a86:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a8e:	494f      	ldr	r1, [pc, #316]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a96:	e001      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a98:	7cfb      	ldrb	r3, [r7, #19]
 8003a9a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 80a0 	beq.w	8003bea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003aae:	4b47      	ldr	r3, [pc, #284]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003aba:	2301      	movs	r3, #1
 8003abc:	e000      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003abe:	2300      	movs	r3, #0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00d      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ac4:	4b41      	ldr	r3, [pc, #260]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac8:	4a40      	ldr	r2, [pc, #256]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ace:	6593      	str	r3, [r2, #88]	; 0x58
 8003ad0:	4b3e      	ldr	r3, [pc, #248]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad8:	60bb      	str	r3, [r7, #8]
 8003ada:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003adc:	2301      	movs	r3, #1
 8003ade:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ae0:	4b3b      	ldr	r3, [pc, #236]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a3a      	ldr	r2, [pc, #232]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003aec:	f7fd fefa 	bl	80018e4 <HAL_GetTick>
 8003af0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003af2:	e009      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af4:	f7fd fef6 	bl	80018e4 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d902      	bls.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	74fb      	strb	r3, [r7, #19]
        break;
 8003b06:	e005      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b08:	4b31      	ldr	r3, [pc, #196]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0ef      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003b14:	7cfb      	ldrb	r3, [r7, #19]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d15c      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b1a:	4b2c      	ldr	r3, [pc, #176]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b24:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d01f      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d019      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b38:	4b24      	ldr	r3, [pc, #144]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b44:	4b21      	ldr	r3, [pc, #132]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4a:	4a20      	ldr	r2, [pc, #128]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b54:	4b1d      	ldr	r3, [pc, #116]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5a:	4a1c      	ldr	r2, [pc, #112]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b64:	4a19      	ldr	r2, [pc, #100]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d016      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b76:	f7fd feb5 	bl	80018e4 <HAL_GetTick>
 8003b7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b7c:	e00b      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b7e:	f7fd feb1 	bl	80018e4 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d902      	bls.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	74fb      	strb	r3, [r7, #19]
            break;
 8003b94:	e006      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b96:	4b0d      	ldr	r3, [pc, #52]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0ec      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003ba4:	7cfb      	ldrb	r3, [r7, #19]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10c      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003baa:	4b08      	ldr	r3, [pc, #32]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bba:	4904      	ldr	r1, [pc, #16]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003bc2:	e009      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bc4:	7cfb      	ldrb	r3, [r7, #19]
 8003bc6:	74bb      	strb	r3, [r7, #18]
 8003bc8:	e006      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003bca:	bf00      	nop
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd4:	7cfb      	ldrb	r3, [r7, #19]
 8003bd6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bd8:	7c7b      	ldrb	r3, [r7, #17]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d105      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bde:	4b9e      	ldr	r3, [pc, #632]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be2:	4a9d      	ldr	r2, [pc, #628]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003be8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bf6:	4b98      	ldr	r3, [pc, #608]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfc:	f023 0203 	bic.w	r2, r3, #3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c04:	4994      	ldr	r1, [pc, #592]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00a      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c18:	4b8f      	ldr	r3, [pc, #572]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1e:	f023 020c 	bic.w	r2, r3, #12
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c26:	498c      	ldr	r1, [pc, #560]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0304 	and.w	r3, r3, #4
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c3a:	4b87      	ldr	r3, [pc, #540]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c40:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	4983      	ldr	r1, [pc, #524]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0308 	and.w	r3, r3, #8
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00a      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c5c:	4b7e      	ldr	r3, [pc, #504]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c62:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6a:	497b      	ldr	r1, [pc, #492]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0310 	and.w	r3, r3, #16
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00a      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c7e:	4b76      	ldr	r3, [pc, #472]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c8c:	4972      	ldr	r1, [pc, #456]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0320 	and.w	r3, r3, #32
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00a      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ca0:	4b6d      	ldr	r3, [pc, #436]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cae:	496a      	ldr	r1, [pc, #424]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00a      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cc2:	4b65      	ldr	r3, [pc, #404]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd0:	4961      	ldr	r1, [pc, #388]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00a      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ce4:	4b5c      	ldr	r3, [pc, #368]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf2:	4959      	ldr	r1, [pc, #356]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00a      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d06:	4b54      	ldr	r3, [pc, #336]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d14:	4950      	ldr	r1, [pc, #320]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00a      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d28:	4b4b      	ldr	r3, [pc, #300]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d36:	4948      	ldr	r1, [pc, #288]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00a      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d4a:	4b43      	ldr	r3, [pc, #268]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d58:	493f      	ldr	r1, [pc, #252]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d028      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d6c:	4b3a      	ldr	r3, [pc, #232]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d7a:	4937      	ldr	r1, [pc, #220]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d8a:	d106      	bne.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d8c:	4b32      	ldr	r3, [pc, #200]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	4a31      	ldr	r2, [pc, #196]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d96:	60d3      	str	r3, [r2, #12]
 8003d98:	e011      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003da2:	d10c      	bne.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3304      	adds	r3, #4
 8003da8:	2101      	movs	r1, #1
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 f8d8 	bl	8003f60 <RCCEx_PLLSAI1_Config>
 8003db0:	4603      	mov	r3, r0
 8003db2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003db4:	7cfb      	ldrb	r3, [r7, #19]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003dba:	7cfb      	ldrb	r3, [r7, #19]
 8003dbc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d028      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003dca:	4b23      	ldr	r3, [pc, #140]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd8:	491f      	ldr	r1, [pc, #124]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003de8:	d106      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dea:	4b1b      	ldr	r3, [pc, #108]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	4a1a      	ldr	r2, [pc, #104]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003df4:	60d3      	str	r3, [r2, #12]
 8003df6:	e011      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e00:	d10c      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	3304      	adds	r3, #4
 8003e06:	2101      	movs	r1, #1
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f000 f8a9 	bl	8003f60 <RCCEx_PLLSAI1_Config>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e12:	7cfb      	ldrb	r3, [r7, #19]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003e18:	7cfb      	ldrb	r3, [r7, #19]
 8003e1a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d02b      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e28:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e36:	4908      	ldr	r1, [pc, #32]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e46:	d109      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e48:	4b03      	ldr	r3, [pc, #12]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	4a02      	ldr	r2, [pc, #8]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e52:	60d3      	str	r3, [r2, #12]
 8003e54:	e014      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003e56:	bf00      	nop
 8003e58:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e64:	d10c      	bne.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	3304      	adds	r3, #4
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 f877 	bl	8003f60 <RCCEx_PLLSAI1_Config>
 8003e72:	4603      	mov	r3, r0
 8003e74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e76:	7cfb      	ldrb	r3, [r7, #19]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003e7c:	7cfb      	ldrb	r3, [r7, #19]
 8003e7e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d02f      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e8c:	4b2b      	ldr	r3, [pc, #172]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e92:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e9a:	4928      	ldr	r1, [pc, #160]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ea6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eaa:	d10d      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3304      	adds	r3, #4
 8003eb0:	2102      	movs	r1, #2
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 f854 	bl	8003f60 <RCCEx_PLLSAI1_Config>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ebc:	7cfb      	ldrb	r3, [r7, #19]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d014      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ec2:	7cfb      	ldrb	r3, [r7, #19]
 8003ec4:	74bb      	strb	r3, [r7, #18]
 8003ec6:	e011      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ecc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ed0:	d10c      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	3320      	adds	r3, #32
 8003ed6:	2102      	movs	r1, #2
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f000 f935 	bl	8004148 <RCCEx_PLLSAI2_Config>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ee2:	7cfb      	ldrb	r3, [r7, #19]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ee8:	7cfb      	ldrb	r3, [r7, #19]
 8003eea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00a      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ef8:	4b10      	ldr	r3, [pc, #64]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f06:	490d      	ldr	r1, [pc, #52]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00b      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f1a:	4b08      	ldr	r3, [pc, #32]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f20:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f2a:	4904      	ldr	r1, [pc, #16]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f32:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3718      	adds	r7, #24
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40021000 	.word	0x40021000

08003f40 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003f44:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a04      	ldr	r2, [pc, #16]	; (8003f5c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003f4a:	f043 0304 	orr.w	r3, r3, #4
 8003f4e:	6013      	str	r3, [r2, #0]
}
 8003f50:	bf00      	nop
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	40021000 	.word	0x40021000

08003f60 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f6e:	4b75      	ldr	r3, [pc, #468]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f003 0303 	and.w	r3, r3, #3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d018      	beq.n	8003fac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f7a:	4b72      	ldr	r3, [pc, #456]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	f003 0203 	and.w	r2, r3, #3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d10d      	bne.n	8003fa6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
       ||
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d009      	beq.n	8003fa6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f92:	4b6c      	ldr	r3, [pc, #432]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	091b      	lsrs	r3, r3, #4
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
       ||
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d047      	beq.n	8004036 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	73fb      	strb	r3, [r7, #15]
 8003faa:	e044      	b.n	8004036 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2b03      	cmp	r3, #3
 8003fb2:	d018      	beq.n	8003fe6 <RCCEx_PLLSAI1_Config+0x86>
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d825      	bhi.n	8004004 <RCCEx_PLLSAI1_Config+0xa4>
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d002      	beq.n	8003fc2 <RCCEx_PLLSAI1_Config+0x62>
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d009      	beq.n	8003fd4 <RCCEx_PLLSAI1_Config+0x74>
 8003fc0:	e020      	b.n	8004004 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fc2:	4b60      	ldr	r3, [pc, #384]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d11d      	bne.n	800400a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fd2:	e01a      	b.n	800400a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fd4:	4b5b      	ldr	r3, [pc, #364]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d116      	bne.n	800400e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fe4:	e013      	b.n	800400e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fe6:	4b57      	ldr	r3, [pc, #348]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10f      	bne.n	8004012 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ff2:	4b54      	ldr	r3, [pc, #336]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d109      	bne.n	8004012 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004002:	e006      	b.n	8004012 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	73fb      	strb	r3, [r7, #15]
      break;
 8004008:	e004      	b.n	8004014 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800400a:	bf00      	nop
 800400c:	e002      	b.n	8004014 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800400e:	bf00      	nop
 8004010:	e000      	b.n	8004014 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004012:	bf00      	nop
    }

    if(status == HAL_OK)
 8004014:	7bfb      	ldrb	r3, [r7, #15]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10d      	bne.n	8004036 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800401a:	4b4a      	ldr	r3, [pc, #296]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6819      	ldr	r1, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	3b01      	subs	r3, #1
 800402c:	011b      	lsls	r3, r3, #4
 800402e:	430b      	orrs	r3, r1
 8004030:	4944      	ldr	r1, [pc, #272]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004032:	4313      	orrs	r3, r2
 8004034:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004036:	7bfb      	ldrb	r3, [r7, #15]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d17d      	bne.n	8004138 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800403c:	4b41      	ldr	r3, [pc, #260]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a40      	ldr	r2, [pc, #256]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004042:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004046:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004048:	f7fd fc4c 	bl	80018e4 <HAL_GetTick>
 800404c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800404e:	e009      	b.n	8004064 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004050:	f7fd fc48 	bl	80018e4 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d902      	bls.n	8004064 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	73fb      	strb	r3, [r7, #15]
        break;
 8004062:	e005      	b.n	8004070 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004064:	4b37      	ldr	r3, [pc, #220]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1ef      	bne.n	8004050 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004070:	7bfb      	ldrb	r3, [r7, #15]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d160      	bne.n	8004138 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d111      	bne.n	80040a0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800407c:	4b31      	ldr	r3, [pc, #196]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6892      	ldr	r2, [r2, #8]
 800408c:	0211      	lsls	r1, r2, #8
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	68d2      	ldr	r2, [r2, #12]
 8004092:	0912      	lsrs	r2, r2, #4
 8004094:	0452      	lsls	r2, r2, #17
 8004096:	430a      	orrs	r2, r1
 8004098:	492a      	ldr	r1, [pc, #168]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 800409a:	4313      	orrs	r3, r2
 800409c:	610b      	str	r3, [r1, #16]
 800409e:	e027      	b.n	80040f0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d112      	bne.n	80040cc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040a6:	4b27      	ldr	r3, [pc, #156]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80040ae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6892      	ldr	r2, [r2, #8]
 80040b6:	0211      	lsls	r1, r2, #8
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6912      	ldr	r2, [r2, #16]
 80040bc:	0852      	lsrs	r2, r2, #1
 80040be:	3a01      	subs	r2, #1
 80040c0:	0552      	lsls	r2, r2, #21
 80040c2:	430a      	orrs	r2, r1
 80040c4:	491f      	ldr	r1, [pc, #124]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	610b      	str	r3, [r1, #16]
 80040ca:	e011      	b.n	80040f0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040cc:	4b1d      	ldr	r3, [pc, #116]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80040d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	6892      	ldr	r2, [r2, #8]
 80040dc:	0211      	lsls	r1, r2, #8
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	6952      	ldr	r2, [r2, #20]
 80040e2:	0852      	lsrs	r2, r2, #1
 80040e4:	3a01      	subs	r2, #1
 80040e6:	0652      	lsls	r2, r2, #25
 80040e8:	430a      	orrs	r2, r1
 80040ea:	4916      	ldr	r1, [pc, #88]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80040f0:	4b14      	ldr	r3, [pc, #80]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a13      	ldr	r2, [pc, #76]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040fc:	f7fd fbf2 	bl	80018e4 <HAL_GetTick>
 8004100:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004102:	e009      	b.n	8004118 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004104:	f7fd fbee 	bl	80018e4 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d902      	bls.n	8004118 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	73fb      	strb	r3, [r7, #15]
          break;
 8004116:	e005      	b.n	8004124 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004118:	4b0a      	ldr	r3, [pc, #40]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0ef      	beq.n	8004104 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004124:	7bfb      	ldrb	r3, [r7, #15]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d106      	bne.n	8004138 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800412a:	4b06      	ldr	r3, [pc, #24]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 800412c:	691a      	ldr	r2, [r3, #16]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	4904      	ldr	r1, [pc, #16]	; (8004144 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004134:	4313      	orrs	r3, r2
 8004136:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004138:	7bfb      	ldrb	r3, [r7, #15]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	40021000 	.word	0x40021000

08004148 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004152:	2300      	movs	r3, #0
 8004154:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004156:	4b6a      	ldr	r3, [pc, #424]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f003 0303 	and.w	r3, r3, #3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d018      	beq.n	8004194 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004162:	4b67      	ldr	r3, [pc, #412]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	f003 0203 	and.w	r2, r3, #3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	429a      	cmp	r2, r3
 8004170:	d10d      	bne.n	800418e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
       ||
 8004176:	2b00      	cmp	r3, #0
 8004178:	d009      	beq.n	800418e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800417a:	4b61      	ldr	r3, [pc, #388]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	091b      	lsrs	r3, r3, #4
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
       ||
 800418a:	429a      	cmp	r2, r3
 800418c:	d047      	beq.n	800421e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	73fb      	strb	r3, [r7, #15]
 8004192:	e044      	b.n	800421e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b03      	cmp	r3, #3
 800419a:	d018      	beq.n	80041ce <RCCEx_PLLSAI2_Config+0x86>
 800419c:	2b03      	cmp	r3, #3
 800419e:	d825      	bhi.n	80041ec <RCCEx_PLLSAI2_Config+0xa4>
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d002      	beq.n	80041aa <RCCEx_PLLSAI2_Config+0x62>
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d009      	beq.n	80041bc <RCCEx_PLLSAI2_Config+0x74>
 80041a8:	e020      	b.n	80041ec <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041aa:	4b55      	ldr	r3, [pc, #340]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d11d      	bne.n	80041f2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041ba:	e01a      	b.n	80041f2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041bc:	4b50      	ldr	r3, [pc, #320]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d116      	bne.n	80041f6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041cc:	e013      	b.n	80041f6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041ce:	4b4c      	ldr	r3, [pc, #304]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10f      	bne.n	80041fa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041da:	4b49      	ldr	r3, [pc, #292]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d109      	bne.n	80041fa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041ea:	e006      	b.n	80041fa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	73fb      	strb	r3, [r7, #15]
      break;
 80041f0:	e004      	b.n	80041fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041f2:	bf00      	nop
 80041f4:	e002      	b.n	80041fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041f6:	bf00      	nop
 80041f8:	e000      	b.n	80041fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10d      	bne.n	800421e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004202:	4b3f      	ldr	r3, [pc, #252]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6819      	ldr	r1, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	3b01      	subs	r3, #1
 8004214:	011b      	lsls	r3, r3, #4
 8004216:	430b      	orrs	r3, r1
 8004218:	4939      	ldr	r1, [pc, #228]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 800421a:	4313      	orrs	r3, r2
 800421c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800421e:	7bfb      	ldrb	r3, [r7, #15]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d167      	bne.n	80042f4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004224:	4b36      	ldr	r3, [pc, #216]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a35      	ldr	r2, [pc, #212]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 800422a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800422e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004230:	f7fd fb58 	bl	80018e4 <HAL_GetTick>
 8004234:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004236:	e009      	b.n	800424c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004238:	f7fd fb54 	bl	80018e4 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d902      	bls.n	800424c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	73fb      	strb	r3, [r7, #15]
        break;
 800424a:	e005      	b.n	8004258 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800424c:	4b2c      	ldr	r3, [pc, #176]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1ef      	bne.n	8004238 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004258:	7bfb      	ldrb	r3, [r7, #15]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d14a      	bne.n	80042f4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d111      	bne.n	8004288 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004264:	4b26      	ldr	r3, [pc, #152]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800426c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6892      	ldr	r2, [r2, #8]
 8004274:	0211      	lsls	r1, r2, #8
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	68d2      	ldr	r2, [r2, #12]
 800427a:	0912      	lsrs	r2, r2, #4
 800427c:	0452      	lsls	r2, r2, #17
 800427e:	430a      	orrs	r2, r1
 8004280:	491f      	ldr	r1, [pc, #124]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004282:	4313      	orrs	r3, r2
 8004284:	614b      	str	r3, [r1, #20]
 8004286:	e011      	b.n	80042ac <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004288:	4b1d      	ldr	r3, [pc, #116]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004290:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6892      	ldr	r2, [r2, #8]
 8004298:	0211      	lsls	r1, r2, #8
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6912      	ldr	r2, [r2, #16]
 800429e:	0852      	lsrs	r2, r2, #1
 80042a0:	3a01      	subs	r2, #1
 80042a2:	0652      	lsls	r2, r2, #25
 80042a4:	430a      	orrs	r2, r1
 80042a6:	4916      	ldr	r1, [pc, #88]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80042ac:	4b14      	ldr	r3, [pc, #80]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a13      	ldr	r2, [pc, #76]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b8:	f7fd fb14 	bl	80018e4 <HAL_GetTick>
 80042bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042be:	e009      	b.n	80042d4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042c0:	f7fd fb10 	bl	80018e4 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d902      	bls.n	80042d4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	73fb      	strb	r3, [r7, #15]
          break;
 80042d2:	e005      	b.n	80042e0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042d4:	4b0a      	ldr	r3, [pc, #40]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d0ef      	beq.n	80042c0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80042e0:	7bfb      	ldrb	r3, [r7, #15]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d106      	bne.n	80042f4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80042e6:	4b06      	ldr	r3, [pc, #24]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042e8:	695a      	ldr	r2, [r3, #20]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	4904      	ldr	r1, [pc, #16]	; (8004300 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	40021000 	.word	0x40021000

08004304 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e095      	b.n	8004442 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	2b00      	cmp	r3, #0
 800431c:	d108      	bne.n	8004330 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004326:	d009      	beq.n	800433c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	61da      	str	r2, [r3, #28]
 800432e:	e005      	b.n	800433c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d106      	bne.n	800435c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7fc ff9e 	bl	8001298 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004372:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800437c:	d902      	bls.n	8004384 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800437e:	2300      	movs	r3, #0
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	e002      	b.n	800438a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004388:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004392:	d007      	beq.n	80043a4 <HAL_SPI_Init+0xa0>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800439c:	d002      	beq.n	80043a4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80043b4:	431a      	orrs	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	431a      	orrs	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043d2:	431a      	orrs	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	69db      	ldr	r3, [r3, #28]
 80043d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043dc:	431a      	orrs	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e6:	ea42 0103 	orr.w	r1, r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	430a      	orrs	r2, r1
 80043f8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	0c1b      	lsrs	r3, r3, #16
 8004400:	f003 0204 	and.w	r2, r3, #4
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	f003 0310 	and.w	r3, r3, #16
 800440c:	431a      	orrs	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004412:	f003 0308 	and.w	r3, r3, #8
 8004416:	431a      	orrs	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004420:	ea42 0103 	orr.w	r1, r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b082      	sub	sp, #8
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d101      	bne.n	800445c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e040      	b.n	80044de <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004460:	2b00      	cmp	r3, #0
 8004462:	d106      	bne.n	8004472 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f7fc ff57 	bl	8001320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2224      	movs	r2, #36	; 0x24
 8004476:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 0201 	bic.w	r2, r2, #1
 8004486:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 fd1f 	bl	8004ecc <UART_SetConfig>
 800448e:	4603      	mov	r3, r0
 8004490:	2b01      	cmp	r3, #1
 8004492:	d101      	bne.n	8004498 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e022      	b.n	80044de <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449c:	2b00      	cmp	r3, #0
 800449e:	d002      	beq.n	80044a6 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 ff9d 	bl	80053e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044c4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f042 0201 	orr.w	r2, r2, #1
 80044d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f001 f824 	bl	8005524 <UART_CheckIdleState>
 80044dc:	4603      	mov	r3, r0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b08a      	sub	sp, #40	; 0x28
 80044ea:	af02      	add	r7, sp, #8
 80044ec:	60f8      	str	r0, [r7, #12]
 80044ee:	60b9      	str	r1, [r7, #8]
 80044f0:	603b      	str	r3, [r7, #0]
 80044f2:	4613      	mov	r3, r2
 80044f4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044fa:	2b20      	cmp	r3, #32
 80044fc:	f040 8082 	bne.w	8004604 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d002      	beq.n	800450c <HAL_UART_Transmit+0x26>
 8004506:	88fb      	ldrh	r3, [r7, #6]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d101      	bne.n	8004510 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e07a      	b.n	8004606 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004516:	2b01      	cmp	r3, #1
 8004518:	d101      	bne.n	800451e <HAL_UART_Transmit+0x38>
 800451a:	2302      	movs	r3, #2
 800451c:	e073      	b.n	8004606 <HAL_UART_Transmit+0x120>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2221      	movs	r2, #33	; 0x21
 8004532:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004534:	f7fd f9d6 	bl	80018e4 <HAL_GetTick>
 8004538:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	88fa      	ldrh	r2, [r7, #6]
 800453e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	88fa      	ldrh	r2, [r7, #6]
 8004546:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004552:	d108      	bne.n	8004566 <HAL_UART_Transmit+0x80>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d104      	bne.n	8004566 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800455c:	2300      	movs	r3, #0
 800455e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	61bb      	str	r3, [r7, #24]
 8004564:	e003      	b.n	800456e <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800456a:	2300      	movs	r3, #0
 800456c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004576:	e02d      	b.n	80045d4 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	2200      	movs	r2, #0
 8004580:	2180      	movs	r1, #128	; 0x80
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	f001 f817 	bl	80055b6 <UART_WaitOnFlagUntilTimeout>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e039      	b.n	8004606 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10b      	bne.n	80045b0 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	881a      	ldrh	r2, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045a4:	b292      	uxth	r2, r2
 80045a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	3302      	adds	r3, #2
 80045ac:	61bb      	str	r3, [r7, #24]
 80045ae:	e008      	b.n	80045c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	781a      	ldrb	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	b292      	uxth	r2, r2
 80045ba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	3301      	adds	r3, #1
 80045c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	3b01      	subs	r3, #1
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045da:	b29b      	uxth	r3, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1cb      	bne.n	8004578 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	2200      	movs	r2, #0
 80045e8:	2140      	movs	r1, #64	; 0x40
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f000 ffe3 	bl	80055b6 <UART_WaitOnFlagUntilTimeout>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e005      	b.n	8004606 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2220      	movs	r2, #32
 80045fe:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004600:	2300      	movs	r3, #0
 8004602:	e000      	b.n	8004606 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004604:	2302      	movs	r3, #2
  }
}
 8004606:	4618      	mov	r0, r3
 8004608:	3720      	adds	r7, #32
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b08a      	sub	sp, #40	; 0x28
 8004612:	af02      	add	r7, sp, #8
 8004614:	60f8      	str	r0, [r7, #12]
 8004616:	60b9      	str	r1, [r7, #8]
 8004618:	603b      	str	r3, [r7, #0]
 800461a:	4613      	mov	r3, r2
 800461c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004622:	2b20      	cmp	r3, #32
 8004624:	f040 80bf 	bne.w	80047a6 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d002      	beq.n	8004634 <HAL_UART_Receive+0x26>
 800462e:	88fb      	ldrh	r3, [r7, #6]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d101      	bne.n	8004638 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e0b7      	b.n	80047a8 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800463e:	2b01      	cmp	r3, #1
 8004640:	d101      	bne.n	8004646 <HAL_UART_Receive+0x38>
 8004642:	2302      	movs	r3, #2
 8004644:	e0b0      	b.n	80047a8 <HAL_UART_Receive+0x19a>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2222      	movs	r2, #34	; 0x22
 800465a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004662:	f7fd f93f 	bl	80018e4 <HAL_GetTick>
 8004666:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	88fa      	ldrh	r2, [r7, #6]
 800466c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	88fa      	ldrh	r2, [r7, #6]
 8004674:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004680:	d10e      	bne.n	80046a0 <HAL_UART_Receive+0x92>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d105      	bne.n	8004696 <HAL_UART_Receive+0x88>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004690:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004694:	e02d      	b.n	80046f2 <HAL_UART_Receive+0xe4>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	22ff      	movs	r2, #255	; 0xff
 800469a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800469e:	e028      	b.n	80046f2 <HAL_UART_Receive+0xe4>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10d      	bne.n	80046c4 <HAL_UART_Receive+0xb6>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d104      	bne.n	80046ba <HAL_UART_Receive+0xac>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	22ff      	movs	r2, #255	; 0xff
 80046b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046b8:	e01b      	b.n	80046f2 <HAL_UART_Receive+0xe4>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	227f      	movs	r2, #127	; 0x7f
 80046be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046c2:	e016      	b.n	80046f2 <HAL_UART_Receive+0xe4>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046cc:	d10d      	bne.n	80046ea <HAL_UART_Receive+0xdc>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d104      	bne.n	80046e0 <HAL_UART_Receive+0xd2>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	227f      	movs	r2, #127	; 0x7f
 80046da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046de:	e008      	b.n	80046f2 <HAL_UART_Receive+0xe4>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	223f      	movs	r2, #63	; 0x3f
 80046e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046e8:	e003      	b.n	80046f2 <HAL_UART_Receive+0xe4>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80046f8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004702:	d108      	bne.n	8004716 <HAL_UART_Receive+0x108>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d104      	bne.n	8004716 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800470c:	2300      	movs	r3, #0
 800470e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	61bb      	str	r3, [r7, #24]
 8004714:	e003      	b.n	800471e <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800471a:	2300      	movs	r3, #0
 800471c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004726:	e033      	b.n	8004790 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	2200      	movs	r2, #0
 8004730:	2120      	movs	r1, #32
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f000 ff3f 	bl	80055b6 <UART_WaitOnFlagUntilTimeout>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e032      	b.n	80047a8 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10c      	bne.n	8004762 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800474e:	b29a      	uxth	r2, r3
 8004750:	8a7b      	ldrh	r3, [r7, #18]
 8004752:	4013      	ands	r3, r2
 8004754:	b29a      	uxth	r2, r3
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	3302      	adds	r3, #2
 800475e:	61bb      	str	r3, [r7, #24]
 8004760:	e00d      	b.n	800477e <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004768:	b29b      	uxth	r3, r3
 800476a:	b2da      	uxtb	r2, r3
 800476c:	8a7b      	ldrh	r3, [r7, #18]
 800476e:	b2db      	uxtb	r3, r3
 8004770:	4013      	ands	r3, r2
 8004772:	b2da      	uxtb	r2, r3
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	3301      	adds	r3, #1
 800477c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004784:	b29b      	uxth	r3, r3
 8004786:	3b01      	subs	r3, #1
 8004788:	b29a      	uxth	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004796:	b29b      	uxth	r3, r3
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1c5      	bne.n	8004728 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2220      	movs	r2, #32
 80047a0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80047a2:	2300      	movs	r3, #0
 80047a4:	e000      	b.n	80047a8 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80047a6:	2302      	movs	r3, #2
  }
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3720      	adds	r7, #32
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	4613      	mov	r3, r2
 80047bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047c2:	2b20      	cmp	r3, #32
 80047c4:	d145      	bne.n	8004852 <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <HAL_UART_Transmit_IT+0x22>
 80047cc:	88fb      	ldrh	r3, [r7, #6]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e03e      	b.n	8004854 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d101      	bne.n	80047e4 <HAL_UART_Transmit_IT+0x34>
 80047e0:	2302      	movs	r3, #2
 80047e2:	e037      	b.n	8004854 <HAL_UART_Transmit_IT+0xa4>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	88fa      	ldrh	r2, [r7, #6]
 80047f6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	88fa      	ldrh	r2, [r7, #6]
 80047fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2221      	movs	r2, #33	; 0x21
 8004814:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800481e:	d107      	bne.n	8004830 <HAL_UART_Transmit_IT+0x80>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d103      	bne.n	8004830 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4a0d      	ldr	r2, [pc, #52]	; (8004860 <HAL_UART_Transmit_IT+0xb0>)
 800482c:	669a      	str	r2, [r3, #104]	; 0x68
 800482e:	e002      	b.n	8004836 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4a0c      	ldr	r2, [pc, #48]	; (8004864 <HAL_UART_Transmit_IT+0xb4>)
 8004834:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800484c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800484e:	2300      	movs	r3, #0
 8004850:	e000      	b.n	8004854 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 8004852:	2302      	movs	r3, #2
  }
}
 8004854:	4618      	mov	r0, r3
 8004856:	3714      	adds	r7, #20
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	08005b7d 	.word	0x08005b7d
 8004864:	08005b09 	.word	0x08005b09

08004868 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	4613      	mov	r3, r2
 8004874:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800487a:	2b20      	cmp	r3, #32
 800487c:	d131      	bne.n	80048e2 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d002      	beq.n	800488a <HAL_UART_Receive_IT+0x22>
 8004884:	88fb      	ldrh	r3, [r7, #6]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e02a      	b.n	80048e4 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004894:	2b01      	cmp	r3, #1
 8004896:	d101      	bne.n	800489c <HAL_UART_Receive_IT+0x34>
 8004898:	2302      	movs	r3, #2
 800489a:	e023      	b.n	80048e4 <HAL_UART_Receive_IT+0x7c>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a0f      	ldr	r2, [pc, #60]	; (80048ec <HAL_UART_Receive_IT+0x84>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d00e      	beq.n	80048d2 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d007      	beq.n	80048d2 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80048d0:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80048d2:	88fb      	ldrh	r3, [r7, #6]
 80048d4:	461a      	mov	r2, r3
 80048d6:	68b9      	ldr	r1, [r7, #8]
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f000 fee9 	bl	80056b0 <UART_Start_Receive_IT>
 80048de:	4603      	mov	r3, r0
 80048e0:	e000      	b.n	80048e4 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 80048e2:	2302      	movs	r3, #2
  }
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	40008000 	.word	0x40008000

080048f0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	4613      	mov	r3, r2
 80048fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004902:	2b20      	cmp	r3, #32
 8004904:	d166      	bne.n	80049d4 <HAL_UART_Transmit_DMA+0xe4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <HAL_UART_Transmit_DMA+0x22>
 800490c:	88fb      	ldrh	r3, [r7, #6]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e05f      	b.n	80049d6 <HAL_UART_Transmit_DMA+0xe6>
    }

    __HAL_LOCK(huart);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800491c:	2b01      	cmp	r3, #1
 800491e:	d101      	bne.n	8004924 <HAL_UART_Transmit_DMA+0x34>
 8004920:	2302      	movs	r3, #2
 8004922:	e058      	b.n	80049d6 <HAL_UART_Transmit_DMA+0xe6>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	88fa      	ldrh	r2, [r7, #6]
 8004936:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	88fa      	ldrh	r2, [r7, #6]
 800493e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2221      	movs	r2, #33	; 0x21
 800494e:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004954:	2b00      	cmp	r3, #0
 8004956:	d02b      	beq.n	80049b0 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800495c:	4a20      	ldr	r2, [pc, #128]	; (80049e0 <HAL_UART_Transmit_DMA+0xf0>)
 800495e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004964:	4a1f      	ldr	r2, [pc, #124]	; (80049e4 <HAL_UART_Transmit_DMA+0xf4>)
 8004966:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800496c:	4a1e      	ldr	r2, [pc, #120]	; (80049e8 <HAL_UART_Transmit_DMA+0xf8>)
 800496e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004974:	2200      	movs	r2, #0
 8004976:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004980:	4619      	mov	r1, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	3328      	adds	r3, #40	; 0x28
 8004988:	461a      	mov	r2, r3
 800498a:	88fb      	ldrh	r3, [r7, #6]
 800498c:	f7fd fab0 	bl	8001ef0 <HAL_DMA_Start_IT>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00c      	beq.n	80049b0 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2210      	movs	r2, #16
 800499a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2220      	movs	r2, #32
 80049aa:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e012      	b.n	80049d6 <HAL_UART_Transmit_DMA+0xe6>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2240      	movs	r2, #64	; 0x40
 80049b6:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689a      	ldr	r2, [r3, #8]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80049ce:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80049d0:	2300      	movs	r3, #0
 80049d2:	e000      	b.n	80049d6 <HAL_UART_Transmit_DMA+0xe6>
  }
  else
  {
    return HAL_BUSY;
 80049d4:	2302      	movs	r3, #2
  }
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	08005921 	.word	0x08005921
 80049e4:	08005975 	.word	0x08005975
 80049e8:	08005a61 	.word	0x08005a61

080049ec <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	4613      	mov	r3, r2
 80049f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049fe:	2b20      	cmp	r3, #32
 8004a00:	d131      	bne.n	8004a66 <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d002      	beq.n	8004a0e <HAL_UART_Receive_DMA+0x22>
 8004a08:	88fb      	ldrh	r3, [r7, #6]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e02a      	b.n	8004a68 <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d101      	bne.n	8004a20 <HAL_UART_Receive_DMA+0x34>
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	e023      	b.n	8004a68 <HAL_UART_Receive_DMA+0x7c>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a0f      	ldr	r2, [pc, #60]	; (8004a70 <HAL_UART_Receive_DMA+0x84>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d00e      	beq.n	8004a56 <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d007      	beq.n	8004a56 <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004a54:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8004a56:	88fb      	ldrh	r3, [r7, #6]
 8004a58:	461a      	mov	r2, r3
 8004a5a:	68b9      	ldr	r1, [r7, #8]
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 feaf 	bl	80057c0 <UART_Start_Receive_DMA>
 8004a62:	4603      	mov	r3, r0
 8004a64:	e000      	b.n	8004a68 <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8004a66:	2302      	movs	r3, #2
  }
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	40008000 	.word	0x40008000

08004a74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b088      	sub	sp, #32
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004a94:	69fa      	ldr	r2, [r7, #28]
 8004a96:	f640 030f 	movw	r3, #2063	; 0x80f
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d113      	bne.n	8004acc <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	f003 0320 	and.w	r3, r3, #32
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00e      	beq.n	8004acc <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	f003 0320 	and.w	r3, r3, #32
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d009      	beq.n	8004acc <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 81ce 	beq.w	8004e5e <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	4798      	blx	r3
      }
      return;
 8004aca:	e1c8      	b.n	8004e5e <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f000 80e3 	beq.w	8004c9a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d105      	bne.n	8004aea <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004ade:	69ba      	ldr	r2, [r7, #24]
 8004ae0:	4ba6      	ldr	r3, [pc, #664]	; (8004d7c <HAL_UART_IRQHandler+0x308>)
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f000 80d8 	beq.w	8004c9a <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d010      	beq.n	8004b16 <HAL_UART_IRQHandler+0xa2>
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00b      	beq.n	8004b16 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2201      	movs	r2, #1
 8004b04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b0c:	f043 0201 	orr.w	r2, r3, #1
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	f003 0302 	and.w	r3, r3, #2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d010      	beq.n	8004b42 <HAL_UART_IRQHandler+0xce>
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00b      	beq.n	8004b42 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b38:	f043 0204 	orr.w	r2, r3, #4
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d010      	beq.n	8004b6e <HAL_UART_IRQHandler+0xfa>
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00b      	beq.n	8004b6e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2204      	movs	r2, #4
 8004b5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b64:	f043 0202 	orr.w	r2, r3, #2
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	f003 0308 	and.w	r3, r3, #8
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d015      	beq.n	8004ba4 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	f003 0320 	and.w	r3, r3, #32
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d104      	bne.n	8004b8c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00b      	beq.n	8004ba4 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2208      	movs	r2, #8
 8004b92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b9a:	f043 0208 	orr.w	r2, r3, #8
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d011      	beq.n	8004bd2 <HAL_UART_IRQHandler+0x15e>
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00c      	beq.n	8004bd2 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bc8:	f043 0220 	orr.w	r2, r3, #32
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 8142 	beq.w	8004e62 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	f003 0320 	and.w	r3, r3, #32
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00c      	beq.n	8004c02 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	f003 0320 	and.w	r3, r3, #32
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d007      	beq.n	8004c02 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c08:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c14:	2b40      	cmp	r3, #64	; 0x40
 8004c16:	d004      	beq.n	8004c22 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d031      	beq.n	8004c86 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 fe4d 	bl	80058c2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c32:	2b40      	cmp	r3, #64	; 0x40
 8004c34:	d123      	bne.n	8004c7e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	689a      	ldr	r2, [r3, #8]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c44:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d013      	beq.n	8004c76 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c52:	4a4b      	ldr	r2, [pc, #300]	; (8004d80 <HAL_UART_IRQHandler+0x30c>)
 8004c54:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7fd f9e6 	bl	800202c <HAL_DMA_Abort_IT>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d017      	beq.n	8004c96 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004c70:	4610      	mov	r0, r2
 8004c72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c74:	e00f      	b.n	8004c96 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f912 	bl	8004ea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c7c:	e00b      	b.n	8004c96 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f90e 	bl	8004ea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c84:	e007      	b.n	8004c96 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f90a 	bl	8004ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004c94:	e0e5      	b.n	8004e62 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c96:	bf00      	nop
    return;
 8004c98:	e0e3      	b.n	8004e62 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	f040 80a9 	bne.w	8004df6 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	f003 0310 	and.w	r3, r3, #16
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f000 80a3 	beq.w	8004df6 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	f003 0310 	and.w	r3, r3, #16
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f000 809d 	beq.w	8004df6 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2210      	movs	r2, #16
 8004cc2:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cce:	2b40      	cmp	r3, #64	; 0x40
 8004cd0:	d158      	bne.n	8004d84 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8004cdc:	893b      	ldrh	r3, [r7, #8]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f000 80c1 	beq.w	8004e66 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004cea:	893a      	ldrh	r2, [r7, #8]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	f080 80ba 	bcs.w	8004e66 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	893a      	ldrh	r2, [r7, #8]
 8004cf6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0320 	and.w	r3, r3, #32
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d12a      	bne.n	8004d60 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d18:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0201 	bic.w	r2, r2, #1
 8004d28:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689a      	ldr	r2, [r3, #8]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d38:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 0210 	bic.w	r2, r2, #16
 8004d54:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7fd f928 	bl	8001fb0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	4619      	mov	r1, r3
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 f89d 	bl	8004eb4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004d7a:	e074      	b.n	8004e66 <HAL_UART_IRQHandler+0x3f2>
 8004d7c:	04000120 	.word	0x04000120
 8004d80:	08005add 	.word	0x08005add
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d063      	beq.n	8004e6a <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8004da2:	897b      	ldrh	r3, [r7, #10]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d060      	beq.n	8004e6a <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004db6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689a      	ldr	r2, [r3, #8]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f022 0201 	bic.w	r2, r2, #1
 8004dc6:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 0210 	bic.w	r2, r2, #16
 8004de8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004dea:	897b      	ldrh	r3, [r7, #10]
 8004dec:	4619      	mov	r1, r3
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f860 	bl	8004eb4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004df4:	e039      	b.n	8004e6a <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00d      	beq.n	8004e1c <HAL_UART_IRQHandler+0x3a8>
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d008      	beq.n	8004e1c <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004e12:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 ffe0 	bl	8005dda <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e1a:	e029      	b.n	8004e70 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00d      	beq.n	8004e42 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d008      	beq.n	8004e42 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d01a      	beq.n	8004e6e <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	4798      	blx	r3
    }
    return;
 8004e40:	e015      	b.n	8004e6e <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d011      	beq.n	8004e70 <HAL_UART_IRQHandler+0x3fc>
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00c      	beq.n	8004e70 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 fece 	bl	8005bf8 <UART_EndTransmit_IT>
    return;
 8004e5c:	e008      	b.n	8004e70 <HAL_UART_IRQHandler+0x3fc>
      return;
 8004e5e:	bf00      	nop
 8004e60:	e006      	b.n	8004e70 <HAL_UART_IRQHandler+0x3fc>
    return;
 8004e62:	bf00      	nop
 8004e64:	e004      	b.n	8004e70 <HAL_UART_IRQHandler+0x3fc>
      return;
 8004e66:	bf00      	nop
 8004e68:	e002      	b.n	8004e70 <HAL_UART_IRQHandler+0x3fc>
      return;
 8004e6a:	bf00      	nop
 8004e6c:	e000      	b.n	8004e70 <HAL_UART_IRQHandler+0x3fc>
    return;
 8004e6e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004e70:	3720      	adds	r7, #32
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop

08004e78 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ecc:	b5b0      	push	{r4, r5, r7, lr}
 8004ece:	b088      	sub	sp, #32
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689a      	ldr	r2, [r3, #8]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	69db      	ldr	r3, [r3, #28]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	4bad      	ldr	r3, [pc, #692]	; (80051ac <UART_SetConfig+0x2e0>)
 8004ef8:	4013      	ands	r3, r2
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	6812      	ldr	r2, [r2, #0]
 8004efe:	69f9      	ldr	r1, [r7, #28]
 8004f00:	430b      	orrs	r3, r1
 8004f02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68da      	ldr	r2, [r3, #12]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4aa2      	ldr	r2, [pc, #648]	; (80051b0 <UART_SetConfig+0x2e4>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d004      	beq.n	8004f34 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	69fa      	ldr	r2, [r7, #28]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	69fa      	ldr	r2, [r7, #28]
 8004f44:	430a      	orrs	r2, r1
 8004f46:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a99      	ldr	r2, [pc, #612]	; (80051b4 <UART_SetConfig+0x2e8>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d121      	bne.n	8004f96 <UART_SetConfig+0xca>
 8004f52:	4b99      	ldr	r3, [pc, #612]	; (80051b8 <UART_SetConfig+0x2ec>)
 8004f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f58:	f003 0303 	and.w	r3, r3, #3
 8004f5c:	2b03      	cmp	r3, #3
 8004f5e:	d817      	bhi.n	8004f90 <UART_SetConfig+0xc4>
 8004f60:	a201      	add	r2, pc, #4	; (adr r2, 8004f68 <UART_SetConfig+0x9c>)
 8004f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f66:	bf00      	nop
 8004f68:	08004f79 	.word	0x08004f79
 8004f6c:	08004f85 	.word	0x08004f85
 8004f70:	08004f7f 	.word	0x08004f7f
 8004f74:	08004f8b 	.word	0x08004f8b
 8004f78:	2301      	movs	r3, #1
 8004f7a:	76fb      	strb	r3, [r7, #27]
 8004f7c:	e0e7      	b.n	800514e <UART_SetConfig+0x282>
 8004f7e:	2302      	movs	r3, #2
 8004f80:	76fb      	strb	r3, [r7, #27]
 8004f82:	e0e4      	b.n	800514e <UART_SetConfig+0x282>
 8004f84:	2304      	movs	r3, #4
 8004f86:	76fb      	strb	r3, [r7, #27]
 8004f88:	e0e1      	b.n	800514e <UART_SetConfig+0x282>
 8004f8a:	2308      	movs	r3, #8
 8004f8c:	76fb      	strb	r3, [r7, #27]
 8004f8e:	e0de      	b.n	800514e <UART_SetConfig+0x282>
 8004f90:	2310      	movs	r3, #16
 8004f92:	76fb      	strb	r3, [r7, #27]
 8004f94:	e0db      	b.n	800514e <UART_SetConfig+0x282>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a88      	ldr	r2, [pc, #544]	; (80051bc <UART_SetConfig+0x2f0>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d132      	bne.n	8005006 <UART_SetConfig+0x13a>
 8004fa0:	4b85      	ldr	r3, [pc, #532]	; (80051b8 <UART_SetConfig+0x2ec>)
 8004fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa6:	f003 030c 	and.w	r3, r3, #12
 8004faa:	2b0c      	cmp	r3, #12
 8004fac:	d828      	bhi.n	8005000 <UART_SetConfig+0x134>
 8004fae:	a201      	add	r2, pc, #4	; (adr r2, 8004fb4 <UART_SetConfig+0xe8>)
 8004fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb4:	08004fe9 	.word	0x08004fe9
 8004fb8:	08005001 	.word	0x08005001
 8004fbc:	08005001 	.word	0x08005001
 8004fc0:	08005001 	.word	0x08005001
 8004fc4:	08004ff5 	.word	0x08004ff5
 8004fc8:	08005001 	.word	0x08005001
 8004fcc:	08005001 	.word	0x08005001
 8004fd0:	08005001 	.word	0x08005001
 8004fd4:	08004fef 	.word	0x08004fef
 8004fd8:	08005001 	.word	0x08005001
 8004fdc:	08005001 	.word	0x08005001
 8004fe0:	08005001 	.word	0x08005001
 8004fe4:	08004ffb 	.word	0x08004ffb
 8004fe8:	2300      	movs	r3, #0
 8004fea:	76fb      	strb	r3, [r7, #27]
 8004fec:	e0af      	b.n	800514e <UART_SetConfig+0x282>
 8004fee:	2302      	movs	r3, #2
 8004ff0:	76fb      	strb	r3, [r7, #27]
 8004ff2:	e0ac      	b.n	800514e <UART_SetConfig+0x282>
 8004ff4:	2304      	movs	r3, #4
 8004ff6:	76fb      	strb	r3, [r7, #27]
 8004ff8:	e0a9      	b.n	800514e <UART_SetConfig+0x282>
 8004ffa:	2308      	movs	r3, #8
 8004ffc:	76fb      	strb	r3, [r7, #27]
 8004ffe:	e0a6      	b.n	800514e <UART_SetConfig+0x282>
 8005000:	2310      	movs	r3, #16
 8005002:	76fb      	strb	r3, [r7, #27]
 8005004:	e0a3      	b.n	800514e <UART_SetConfig+0x282>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a6d      	ldr	r2, [pc, #436]	; (80051c0 <UART_SetConfig+0x2f4>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d120      	bne.n	8005052 <UART_SetConfig+0x186>
 8005010:	4b69      	ldr	r3, [pc, #420]	; (80051b8 <UART_SetConfig+0x2ec>)
 8005012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005016:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800501a:	2b30      	cmp	r3, #48	; 0x30
 800501c:	d013      	beq.n	8005046 <UART_SetConfig+0x17a>
 800501e:	2b30      	cmp	r3, #48	; 0x30
 8005020:	d814      	bhi.n	800504c <UART_SetConfig+0x180>
 8005022:	2b20      	cmp	r3, #32
 8005024:	d009      	beq.n	800503a <UART_SetConfig+0x16e>
 8005026:	2b20      	cmp	r3, #32
 8005028:	d810      	bhi.n	800504c <UART_SetConfig+0x180>
 800502a:	2b00      	cmp	r3, #0
 800502c:	d002      	beq.n	8005034 <UART_SetConfig+0x168>
 800502e:	2b10      	cmp	r3, #16
 8005030:	d006      	beq.n	8005040 <UART_SetConfig+0x174>
 8005032:	e00b      	b.n	800504c <UART_SetConfig+0x180>
 8005034:	2300      	movs	r3, #0
 8005036:	76fb      	strb	r3, [r7, #27]
 8005038:	e089      	b.n	800514e <UART_SetConfig+0x282>
 800503a:	2302      	movs	r3, #2
 800503c:	76fb      	strb	r3, [r7, #27]
 800503e:	e086      	b.n	800514e <UART_SetConfig+0x282>
 8005040:	2304      	movs	r3, #4
 8005042:	76fb      	strb	r3, [r7, #27]
 8005044:	e083      	b.n	800514e <UART_SetConfig+0x282>
 8005046:	2308      	movs	r3, #8
 8005048:	76fb      	strb	r3, [r7, #27]
 800504a:	e080      	b.n	800514e <UART_SetConfig+0x282>
 800504c:	2310      	movs	r3, #16
 800504e:	76fb      	strb	r3, [r7, #27]
 8005050:	e07d      	b.n	800514e <UART_SetConfig+0x282>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a5b      	ldr	r2, [pc, #364]	; (80051c4 <UART_SetConfig+0x2f8>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d120      	bne.n	800509e <UART_SetConfig+0x1d2>
 800505c:	4b56      	ldr	r3, [pc, #344]	; (80051b8 <UART_SetConfig+0x2ec>)
 800505e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005062:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005066:	2bc0      	cmp	r3, #192	; 0xc0
 8005068:	d013      	beq.n	8005092 <UART_SetConfig+0x1c6>
 800506a:	2bc0      	cmp	r3, #192	; 0xc0
 800506c:	d814      	bhi.n	8005098 <UART_SetConfig+0x1cc>
 800506e:	2b80      	cmp	r3, #128	; 0x80
 8005070:	d009      	beq.n	8005086 <UART_SetConfig+0x1ba>
 8005072:	2b80      	cmp	r3, #128	; 0x80
 8005074:	d810      	bhi.n	8005098 <UART_SetConfig+0x1cc>
 8005076:	2b00      	cmp	r3, #0
 8005078:	d002      	beq.n	8005080 <UART_SetConfig+0x1b4>
 800507a:	2b40      	cmp	r3, #64	; 0x40
 800507c:	d006      	beq.n	800508c <UART_SetConfig+0x1c0>
 800507e:	e00b      	b.n	8005098 <UART_SetConfig+0x1cc>
 8005080:	2300      	movs	r3, #0
 8005082:	76fb      	strb	r3, [r7, #27]
 8005084:	e063      	b.n	800514e <UART_SetConfig+0x282>
 8005086:	2302      	movs	r3, #2
 8005088:	76fb      	strb	r3, [r7, #27]
 800508a:	e060      	b.n	800514e <UART_SetConfig+0x282>
 800508c:	2304      	movs	r3, #4
 800508e:	76fb      	strb	r3, [r7, #27]
 8005090:	e05d      	b.n	800514e <UART_SetConfig+0x282>
 8005092:	2308      	movs	r3, #8
 8005094:	76fb      	strb	r3, [r7, #27]
 8005096:	e05a      	b.n	800514e <UART_SetConfig+0x282>
 8005098:	2310      	movs	r3, #16
 800509a:	76fb      	strb	r3, [r7, #27]
 800509c:	e057      	b.n	800514e <UART_SetConfig+0x282>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a49      	ldr	r2, [pc, #292]	; (80051c8 <UART_SetConfig+0x2fc>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d125      	bne.n	80050f4 <UART_SetConfig+0x228>
 80050a8:	4b43      	ldr	r3, [pc, #268]	; (80051b8 <UART_SetConfig+0x2ec>)
 80050aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050b6:	d017      	beq.n	80050e8 <UART_SetConfig+0x21c>
 80050b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050bc:	d817      	bhi.n	80050ee <UART_SetConfig+0x222>
 80050be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050c2:	d00b      	beq.n	80050dc <UART_SetConfig+0x210>
 80050c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050c8:	d811      	bhi.n	80050ee <UART_SetConfig+0x222>
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d003      	beq.n	80050d6 <UART_SetConfig+0x20a>
 80050ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050d2:	d006      	beq.n	80050e2 <UART_SetConfig+0x216>
 80050d4:	e00b      	b.n	80050ee <UART_SetConfig+0x222>
 80050d6:	2300      	movs	r3, #0
 80050d8:	76fb      	strb	r3, [r7, #27]
 80050da:	e038      	b.n	800514e <UART_SetConfig+0x282>
 80050dc:	2302      	movs	r3, #2
 80050de:	76fb      	strb	r3, [r7, #27]
 80050e0:	e035      	b.n	800514e <UART_SetConfig+0x282>
 80050e2:	2304      	movs	r3, #4
 80050e4:	76fb      	strb	r3, [r7, #27]
 80050e6:	e032      	b.n	800514e <UART_SetConfig+0x282>
 80050e8:	2308      	movs	r3, #8
 80050ea:	76fb      	strb	r3, [r7, #27]
 80050ec:	e02f      	b.n	800514e <UART_SetConfig+0x282>
 80050ee:	2310      	movs	r3, #16
 80050f0:	76fb      	strb	r3, [r7, #27]
 80050f2:	e02c      	b.n	800514e <UART_SetConfig+0x282>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a2d      	ldr	r2, [pc, #180]	; (80051b0 <UART_SetConfig+0x2e4>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d125      	bne.n	800514a <UART_SetConfig+0x27e>
 80050fe:	4b2e      	ldr	r3, [pc, #184]	; (80051b8 <UART_SetConfig+0x2ec>)
 8005100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005104:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005108:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800510c:	d017      	beq.n	800513e <UART_SetConfig+0x272>
 800510e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005112:	d817      	bhi.n	8005144 <UART_SetConfig+0x278>
 8005114:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005118:	d00b      	beq.n	8005132 <UART_SetConfig+0x266>
 800511a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800511e:	d811      	bhi.n	8005144 <UART_SetConfig+0x278>
 8005120:	2b00      	cmp	r3, #0
 8005122:	d003      	beq.n	800512c <UART_SetConfig+0x260>
 8005124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005128:	d006      	beq.n	8005138 <UART_SetConfig+0x26c>
 800512a:	e00b      	b.n	8005144 <UART_SetConfig+0x278>
 800512c:	2300      	movs	r3, #0
 800512e:	76fb      	strb	r3, [r7, #27]
 8005130:	e00d      	b.n	800514e <UART_SetConfig+0x282>
 8005132:	2302      	movs	r3, #2
 8005134:	76fb      	strb	r3, [r7, #27]
 8005136:	e00a      	b.n	800514e <UART_SetConfig+0x282>
 8005138:	2304      	movs	r3, #4
 800513a:	76fb      	strb	r3, [r7, #27]
 800513c:	e007      	b.n	800514e <UART_SetConfig+0x282>
 800513e:	2308      	movs	r3, #8
 8005140:	76fb      	strb	r3, [r7, #27]
 8005142:	e004      	b.n	800514e <UART_SetConfig+0x282>
 8005144:	2310      	movs	r3, #16
 8005146:	76fb      	strb	r3, [r7, #27]
 8005148:	e001      	b.n	800514e <UART_SetConfig+0x282>
 800514a:	2310      	movs	r3, #16
 800514c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a17      	ldr	r2, [pc, #92]	; (80051b0 <UART_SetConfig+0x2e4>)
 8005154:	4293      	cmp	r3, r2
 8005156:	f040 8087 	bne.w	8005268 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800515a:	7efb      	ldrb	r3, [r7, #27]
 800515c:	2b08      	cmp	r3, #8
 800515e:	d837      	bhi.n	80051d0 <UART_SetConfig+0x304>
 8005160:	a201      	add	r2, pc, #4	; (adr r2, 8005168 <UART_SetConfig+0x29c>)
 8005162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005166:	bf00      	nop
 8005168:	0800518d 	.word	0x0800518d
 800516c:	080051d1 	.word	0x080051d1
 8005170:	08005195 	.word	0x08005195
 8005174:	080051d1 	.word	0x080051d1
 8005178:	0800519b 	.word	0x0800519b
 800517c:	080051d1 	.word	0x080051d1
 8005180:	080051d1 	.word	0x080051d1
 8005184:	080051d1 	.word	0x080051d1
 8005188:	080051a3 	.word	0x080051a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800518c:	f7fe fb62 	bl	8003854 <HAL_RCC_GetPCLK1Freq>
 8005190:	6178      	str	r0, [r7, #20]
        break;
 8005192:	e022      	b.n	80051da <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005194:	4b0d      	ldr	r3, [pc, #52]	; (80051cc <UART_SetConfig+0x300>)
 8005196:	617b      	str	r3, [r7, #20]
        break;
 8005198:	e01f      	b.n	80051da <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800519a:	f7fe fac3 	bl	8003724 <HAL_RCC_GetSysClockFreq>
 800519e:	6178      	str	r0, [r7, #20]
        break;
 80051a0:	e01b      	b.n	80051da <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051a6:	617b      	str	r3, [r7, #20]
        break;
 80051a8:	e017      	b.n	80051da <UART_SetConfig+0x30e>
 80051aa:	bf00      	nop
 80051ac:	efff69f3 	.word	0xefff69f3
 80051b0:	40008000 	.word	0x40008000
 80051b4:	40013800 	.word	0x40013800
 80051b8:	40021000 	.word	0x40021000
 80051bc:	40004400 	.word	0x40004400
 80051c0:	40004800 	.word	0x40004800
 80051c4:	40004c00 	.word	0x40004c00
 80051c8:	40005000 	.word	0x40005000
 80051cc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	76bb      	strb	r3, [r7, #26]
        break;
 80051d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f000 80f1 	beq.w	80053c4 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	4613      	mov	r3, r2
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	4413      	add	r3, r2
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d305      	bcc.n	80051fe <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d902      	bls.n	8005204 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	76bb      	strb	r3, [r7, #26]
 8005202:	e0df      	b.n	80053c4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	4618      	mov	r0, r3
 8005208:	f04f 0100 	mov.w	r1, #0
 800520c:	f04f 0200 	mov.w	r2, #0
 8005210:	f04f 0300 	mov.w	r3, #0
 8005214:	020b      	lsls	r3, r1, #8
 8005216:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800521a:	0202      	lsls	r2, r0, #8
 800521c:	6879      	ldr	r1, [r7, #4]
 800521e:	6849      	ldr	r1, [r1, #4]
 8005220:	0849      	lsrs	r1, r1, #1
 8005222:	4608      	mov	r0, r1
 8005224:	f04f 0100 	mov.w	r1, #0
 8005228:	1814      	adds	r4, r2, r0
 800522a:	eb43 0501 	adc.w	r5, r3, r1
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	461a      	mov	r2, r3
 8005234:	f04f 0300 	mov.w	r3, #0
 8005238:	4620      	mov	r0, r4
 800523a:	4629      	mov	r1, r5
 800523c:	f7fb f820 	bl	8000280 <__aeabi_uldivmod>
 8005240:	4602      	mov	r2, r0
 8005242:	460b      	mov	r3, r1
 8005244:	4613      	mov	r3, r2
 8005246:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800524e:	d308      	bcc.n	8005262 <UART_SetConfig+0x396>
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005256:	d204      	bcs.n	8005262 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	60da      	str	r2, [r3, #12]
 8005260:	e0b0      	b.n	80053c4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	76bb      	strb	r3, [r7, #26]
 8005266:	e0ad      	b.n	80053c4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	69db      	ldr	r3, [r3, #28]
 800526c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005270:	d15c      	bne.n	800532c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005272:	7efb      	ldrb	r3, [r7, #27]
 8005274:	2b08      	cmp	r3, #8
 8005276:	d828      	bhi.n	80052ca <UART_SetConfig+0x3fe>
 8005278:	a201      	add	r2, pc, #4	; (adr r2, 8005280 <UART_SetConfig+0x3b4>)
 800527a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527e:	bf00      	nop
 8005280:	080052a5 	.word	0x080052a5
 8005284:	080052ad 	.word	0x080052ad
 8005288:	080052b5 	.word	0x080052b5
 800528c:	080052cb 	.word	0x080052cb
 8005290:	080052bb 	.word	0x080052bb
 8005294:	080052cb 	.word	0x080052cb
 8005298:	080052cb 	.word	0x080052cb
 800529c:	080052cb 	.word	0x080052cb
 80052a0:	080052c3 	.word	0x080052c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052a4:	f7fe fad6 	bl	8003854 <HAL_RCC_GetPCLK1Freq>
 80052a8:	6178      	str	r0, [r7, #20]
        break;
 80052aa:	e013      	b.n	80052d4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052ac:	f7fe fae8 	bl	8003880 <HAL_RCC_GetPCLK2Freq>
 80052b0:	6178      	str	r0, [r7, #20]
        break;
 80052b2:	e00f      	b.n	80052d4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052b4:	4b49      	ldr	r3, [pc, #292]	; (80053dc <UART_SetConfig+0x510>)
 80052b6:	617b      	str	r3, [r7, #20]
        break;
 80052b8:	e00c      	b.n	80052d4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ba:	f7fe fa33 	bl	8003724 <HAL_RCC_GetSysClockFreq>
 80052be:	6178      	str	r0, [r7, #20]
        break;
 80052c0:	e008      	b.n	80052d4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052c6:	617b      	str	r3, [r7, #20]
        break;
 80052c8:	e004      	b.n	80052d4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	76bb      	strb	r3, [r7, #26]
        break;
 80052d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d074      	beq.n	80053c4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	005a      	lsls	r2, r3, #1
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	085b      	lsrs	r3, r3, #1
 80052e4:	441a      	add	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	2b0f      	cmp	r3, #15
 80052f6:	d916      	bls.n	8005326 <UART_SetConfig+0x45a>
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052fe:	d212      	bcs.n	8005326 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	b29b      	uxth	r3, r3
 8005304:	f023 030f 	bic.w	r3, r3, #15
 8005308:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	085b      	lsrs	r3, r3, #1
 800530e:	b29b      	uxth	r3, r3
 8005310:	f003 0307 	and.w	r3, r3, #7
 8005314:	b29a      	uxth	r2, r3
 8005316:	89fb      	ldrh	r3, [r7, #14]
 8005318:	4313      	orrs	r3, r2
 800531a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	89fa      	ldrh	r2, [r7, #14]
 8005322:	60da      	str	r2, [r3, #12]
 8005324:	e04e      	b.n	80053c4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	76bb      	strb	r3, [r7, #26]
 800532a:	e04b      	b.n	80053c4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800532c:	7efb      	ldrb	r3, [r7, #27]
 800532e:	2b08      	cmp	r3, #8
 8005330:	d827      	bhi.n	8005382 <UART_SetConfig+0x4b6>
 8005332:	a201      	add	r2, pc, #4	; (adr r2, 8005338 <UART_SetConfig+0x46c>)
 8005334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005338:	0800535d 	.word	0x0800535d
 800533c:	08005365 	.word	0x08005365
 8005340:	0800536d 	.word	0x0800536d
 8005344:	08005383 	.word	0x08005383
 8005348:	08005373 	.word	0x08005373
 800534c:	08005383 	.word	0x08005383
 8005350:	08005383 	.word	0x08005383
 8005354:	08005383 	.word	0x08005383
 8005358:	0800537b 	.word	0x0800537b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800535c:	f7fe fa7a 	bl	8003854 <HAL_RCC_GetPCLK1Freq>
 8005360:	6178      	str	r0, [r7, #20]
        break;
 8005362:	e013      	b.n	800538c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005364:	f7fe fa8c 	bl	8003880 <HAL_RCC_GetPCLK2Freq>
 8005368:	6178      	str	r0, [r7, #20]
        break;
 800536a:	e00f      	b.n	800538c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800536c:	4b1b      	ldr	r3, [pc, #108]	; (80053dc <UART_SetConfig+0x510>)
 800536e:	617b      	str	r3, [r7, #20]
        break;
 8005370:	e00c      	b.n	800538c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005372:	f7fe f9d7 	bl	8003724 <HAL_RCC_GetSysClockFreq>
 8005376:	6178      	str	r0, [r7, #20]
        break;
 8005378:	e008      	b.n	800538c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800537a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800537e:	617b      	str	r3, [r7, #20]
        break;
 8005380:	e004      	b.n	800538c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005382:	2300      	movs	r3, #0
 8005384:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	76bb      	strb	r3, [r7, #26]
        break;
 800538a:	bf00      	nop
    }

    if (pclk != 0U)
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d018      	beq.n	80053c4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	085a      	lsrs	r2, r3, #1
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	441a      	add	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	2b0f      	cmp	r3, #15
 80053ac:	d908      	bls.n	80053c0 <UART_SetConfig+0x4f4>
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053b4:	d204      	bcs.n	80053c0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	60da      	str	r2, [r3, #12]
 80053be:	e001      	b.n	80053c4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80053d0:	7ebb      	ldrb	r3, [r7, #26]
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3720      	adds	r7, #32
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bdb0      	pop	{r4, r5, r7, pc}
 80053da:	bf00      	nop
 80053dc:	00f42400 	.word	0x00f42400

080053e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	f003 0301 	and.w	r3, r3, #1
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00a      	beq.n	800540a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	430a      	orrs	r2, r1
 8005408:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00a      	beq.n	800542c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	430a      	orrs	r2, r1
 800542a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005430:	f003 0304 	and.w	r3, r3, #4
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00a      	beq.n	800544e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	430a      	orrs	r2, r1
 800544c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005452:	f003 0308 	and.w	r3, r3, #8
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00a      	beq.n	8005470 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	430a      	orrs	r2, r1
 800546e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005474:	f003 0310 	and.w	r3, r3, #16
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00a      	beq.n	8005492 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	f003 0320 	and.w	r3, r3, #32
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00a      	beq.n	80054b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	430a      	orrs	r2, r1
 80054b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d01a      	beq.n	80054f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054de:	d10a      	bne.n	80054f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	430a      	orrs	r2, r1
 80054f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00a      	beq.n	8005518 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	430a      	orrs	r2, r1
 8005516:	605a      	str	r2, [r3, #4]
  }
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af02      	add	r7, sp, #8
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005534:	f7fc f9d6 	bl	80018e4 <HAL_GetTick>
 8005538:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0308 	and.w	r3, r3, #8
 8005544:	2b08      	cmp	r3, #8
 8005546:	d10e      	bne.n	8005566 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005548:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800554c:	9300      	str	r3, [sp, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f82d 	bl	80055b6 <UART_WaitOnFlagUntilTimeout>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d001      	beq.n	8005566 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e023      	b.n	80055ae <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0304 	and.w	r3, r3, #4
 8005570:	2b04      	cmp	r3, #4
 8005572:	d10e      	bne.n	8005592 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005574:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f817 	bl	80055b6 <UART_WaitOnFlagUntilTimeout>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e00d      	b.n	80055ae <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2220      	movs	r2, #32
 8005596:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2220      	movs	r2, #32
 800559c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b084      	sub	sp, #16
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	60f8      	str	r0, [r7, #12]
 80055be:	60b9      	str	r1, [r7, #8]
 80055c0:	603b      	str	r3, [r7, #0]
 80055c2:	4613      	mov	r3, r2
 80055c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055c6:	e05e      	b.n	8005686 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ce:	d05a      	beq.n	8005686 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055d0:	f7fc f988 	bl	80018e4 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	69ba      	ldr	r2, [r7, #24]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d302      	bcc.n	80055e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d11b      	bne.n	800561e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80055f4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689a      	ldr	r2, [r3, #8]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 0201 	bic.w	r2, r2, #1
 8005604:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2220      	movs	r2, #32
 800560a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2220      	movs	r2, #32
 8005610:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e043      	b.n	80056a6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0304 	and.w	r3, r3, #4
 8005628:	2b00      	cmp	r3, #0
 800562a:	d02c      	beq.n	8005686 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	69db      	ldr	r3, [r3, #28]
 8005632:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005636:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800563a:	d124      	bne.n	8005686 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005644:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005654:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	689a      	ldr	r2, [r3, #8]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f022 0201 	bic.w	r2, r2, #1
 8005664:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2220      	movs	r2, #32
 800566a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2220      	movs	r2, #32
 8005670:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2220      	movs	r2, #32
 8005676:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e00f      	b.n	80056a6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	69da      	ldr	r2, [r3, #28]
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	4013      	ands	r3, r2
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	429a      	cmp	r2, r3
 8005694:	bf0c      	ite	eq
 8005696:	2301      	moveq	r3, #1
 8005698:	2300      	movne	r3, #0
 800569a:	b2db      	uxtb	r3, r3
 800569c:	461a      	mov	r2, r3
 800569e:	79fb      	ldrb	r3, [r7, #7]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d091      	beq.n	80055c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
	...

080056b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	4613      	mov	r3, r2
 80056bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	88fa      	ldrh	r2, [r7, #6]
 80056c8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	88fa      	ldrh	r2, [r7, #6]
 80056d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e2:	d10e      	bne.n	8005702 <UART_Start_Receive_IT+0x52>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d105      	bne.n	80056f8 <UART_Start_Receive_IT+0x48>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f240 12ff 	movw	r2, #511	; 0x1ff
 80056f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80056f6:	e02d      	b.n	8005754 <UART_Start_Receive_IT+0xa4>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	22ff      	movs	r2, #255	; 0xff
 80056fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005700:	e028      	b.n	8005754 <UART_Start_Receive_IT+0xa4>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10d      	bne.n	8005726 <UART_Start_Receive_IT+0x76>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d104      	bne.n	800571c <UART_Start_Receive_IT+0x6c>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	22ff      	movs	r2, #255	; 0xff
 8005716:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800571a:	e01b      	b.n	8005754 <UART_Start_Receive_IT+0xa4>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	227f      	movs	r2, #127	; 0x7f
 8005720:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005724:	e016      	b.n	8005754 <UART_Start_Receive_IT+0xa4>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800572e:	d10d      	bne.n	800574c <UART_Start_Receive_IT+0x9c>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d104      	bne.n	8005742 <UART_Start_Receive_IT+0x92>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	227f      	movs	r2, #127	; 0x7f
 800573c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005740:	e008      	b.n	8005754 <UART_Start_Receive_IT+0xa4>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	223f      	movs	r2, #63	; 0x3f
 8005746:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800574a:	e003      	b.n	8005754 <UART_Start_Receive_IT+0xa4>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2222      	movs	r2, #34	; 0x22
 8005760:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	689a      	ldr	r2, [r3, #8]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f042 0201 	orr.w	r2, r2, #1
 8005770:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800577a:	d107      	bne.n	800578c <UART_Start_Receive_IT+0xdc>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d103      	bne.n	800578c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	4a0c      	ldr	r2, [pc, #48]	; (80057b8 <UART_Start_Receive_IT+0x108>)
 8005788:	665a      	str	r2, [r3, #100]	; 0x64
 800578a:	e002      	b.n	8005792 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	4a0b      	ldr	r2, [pc, #44]	; (80057bc <UART_Start_Receive_IT+0x10c>)
 8005790:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80057a8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3714      	adds	r7, #20
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr
 80057b8:	08005d03 	.word	0x08005d03
 80057bc:	08005c2b 	.word	0x08005c2b

080057c0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	4613      	mov	r3, r2
 80057cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	68ba      	ldr	r2, [r7, #8]
 80057d2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	88fa      	ldrh	r2, [r7, #6]
 80057d8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2222      	movs	r2, #34	; 0x22
 80057e8:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d02b      	beq.n	800584a <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f6:	4a25      	ldr	r2, [pc, #148]	; (800588c <UART_Start_Receive_DMA+0xcc>)
 80057f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fe:	4a24      	ldr	r2, [pc, #144]	; (8005890 <UART_Start_Receive_DMA+0xd0>)
 8005800:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005806:	4a23      	ldr	r2, [pc, #140]	; (8005894 <UART_Start_Receive_DMA+0xd4>)
 8005808:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580e:	2200      	movs	r2, #0
 8005810:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	3324      	adds	r3, #36	; 0x24
 800581c:	4619      	mov	r1, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005822:	461a      	mov	r2, r3
 8005824:	88fb      	ldrh	r3, [r7, #6]
 8005826:	f7fc fb63 	bl	8001ef0 <HAL_DMA_Start_IT>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00c      	beq.n	800584a <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2210      	movs	r2, #16
 8005834:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2220      	movs	r2, #32
 8005844:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e01c      	b.n	8005884 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005860:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	689a      	ldr	r2, [r3, #8]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f042 0201 	orr.w	r2, r2, #1
 8005870:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	689a      	ldr	r2, [r3, #8]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005880:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3710      	adds	r7, #16
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	08005991 	.word	0x08005991
 8005890:	08005a29 	.word	0x08005a29
 8005894:	08005a61 	.word	0x08005a61

08005898 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80058ae:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2220      	movs	r2, #32
 80058b4:	679a      	str	r2, [r3, #120]	; 0x78
}
 80058b6:	bf00      	nop
 80058b8:	370c      	adds	r7, #12
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr

080058c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058c2:	b480      	push	{r7}
 80058c4:	b083      	sub	sp, #12
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80058d8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689a      	ldr	r2, [r3, #8]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f022 0201 	bic.w	r2, r2, #1
 80058e8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d107      	bne.n	8005902 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f022 0210 	bic.w	r2, r2, #16
 8005900:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2220      	movs	r2, #32
 8005906:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0320 	and.w	r3, r3, #32
 8005938:	2b00      	cmp	r3, #0
 800593a:	d114      	bne.n	8005966 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	689a      	ldr	r2, [r3, #8]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005952:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005962:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005964:	e002      	b.n	800596c <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f7fa fe68 	bl	800063c <HAL_UART_TxCpltCallback>
}
 800596c:	bf00      	nop
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005980:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f7ff fa78 	bl	8004e78 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005988:	bf00      	nop
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0320 	and.w	r3, r3, #32
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d12a      	bne.n	8005a02 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059c2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	689a      	ldr	r2, [r3, #8]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f022 0201 	bic.w	r2, r2, #1
 80059d2:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	689a      	ldr	r2, [r3, #8]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059e2:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2220      	movs	r2, #32
 80059e8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d107      	bne.n	8005a02 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f022 0210 	bic.w	r2, r2, #16
 8005a00:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d107      	bne.n	8005a1a <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a10:	4619      	mov	r1, r3
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f7ff fa4e 	bl	8004eb4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a18:	e002      	b.n	8005a20 <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f7fa fe22 	bl	8000664 <HAL_UART_RxCpltCallback>
}
 8005a20:	bf00      	nop
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a34:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d109      	bne.n	8005a52 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a44:	085b      	lsrs	r3, r3, #1
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	4619      	mov	r1, r3
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f7ff fa32 	bl	8004eb4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a50:	e002      	b.n	8005a58 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f7ff fa1a 	bl	8004e8c <HAL_UART_RxHalfCpltCallback>
}
 8005a58:	bf00      	nop
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a72:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a78:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a84:	2b80      	cmp	r3, #128	; 0x80
 8005a86:	d109      	bne.n	8005a9c <UART_DMAError+0x3c>
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	2b21      	cmp	r3, #33	; 0x21
 8005a8c:	d106      	bne.n	8005a9c <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005a96:	6978      	ldr	r0, [r7, #20]
 8005a98:	f7ff fefe 	bl	8005898 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa6:	2b40      	cmp	r3, #64	; 0x40
 8005aa8:	d109      	bne.n	8005abe <UART_DMAError+0x5e>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2b22      	cmp	r3, #34	; 0x22
 8005aae:	d106      	bne.n	8005abe <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005ab8:	6978      	ldr	r0, [r7, #20]
 8005aba:	f7ff ff02 	bl	80058c2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ac4:	f043 0210 	orr.w	r2, r3, #16
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ace:	6978      	ldr	r0, [r7, #20]
 8005ad0:	f7ff f9e6 	bl	8004ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ad4:	bf00      	nop
 8005ad6:	3718      	adds	r7, #24
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f7ff f9d0 	bl	8004ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b00:	bf00      	nop
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b14:	2b21      	cmp	r3, #33	; 0x21
 8005b16:	d12b      	bne.n	8005b70 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d110      	bne.n	8005b46 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b32:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b42:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005b44:	e014      	b.n	8005b70 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b4a:	781a      	ldrb	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	b292      	uxth	r2, r2
 8005b52:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b58:	1c5a      	adds	r2, r3, #1
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	3b01      	subs	r3, #1
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b88:	2b21      	cmp	r3, #33	; 0x21
 8005b8a:	d12f      	bne.n	8005bec <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d110      	bne.n	8005bba <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ba6:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bb6:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005bb8:	e018      	b.n	8005bec <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bbe:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	881a      	ldrh	r2, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bcc:	b292      	uxth	r2, r2
 8005bce:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bd4:	1c9a      	adds	r2, r3, #2
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	3b01      	subs	r3, #1
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005bec:	bf00      	nop
 8005bee:	3714      	adds	r7, #20
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c0e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2220      	movs	r2, #32
 8005c14:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f7fa fd0d 	bl	800063c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c22:	bf00      	nop
 8005c24:	3708      	adds	r7, #8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b084      	sub	sp, #16
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005c38:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c3e:	2b22      	cmp	r3, #34	; 0x22
 8005c40:	d151      	bne.n	8005ce6 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005c48:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005c4a:	89bb      	ldrh	r3, [r7, #12]
 8005c4c:	b2d9      	uxtb	r1, r3
 8005c4e:	89fb      	ldrh	r3, [r7, #14]
 8005c50:	b2da      	uxtb	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c56:	400a      	ands	r2, r1
 8005c58:	b2d2      	uxtb	r2, r2
 8005c5a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c60:	1c5a      	adds	r2, r3, #1
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d13a      	bne.n	8005cfa <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005c92:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	689a      	ldr	r2, [r3, #8]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f022 0201 	bic.w	r2, r2, #1
 8005ca2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2220      	movs	r2, #32
 8005ca8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d10f      	bne.n	8005cd8 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f022 0210 	bic.w	r2, r2, #16
 8005cc6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005cce:	4619      	mov	r1, r3
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f7ff f8ef 	bl	8004eb4 <HAL_UARTEx_RxEventCallback>
 8005cd6:	e002      	b.n	8005cde <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f7fa fcc3 	bl	8000664 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ce4:	e009      	b.n	8005cfa <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	8b1b      	ldrh	r3, [r3, #24]
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f042 0208 	orr.w	r2, r2, #8
 8005cf6:	b292      	uxth	r2, r2
 8005cf8:	831a      	strh	r2, [r3, #24]
}
 8005cfa:	bf00      	nop
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b084      	sub	sp, #16
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d10:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d16:	2b22      	cmp	r3, #34	; 0x22
 8005d18:	d151      	bne.n	8005dbe <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005d20:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d26:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005d28:	89ba      	ldrh	r2, [r7, #12]
 8005d2a:	89fb      	ldrh	r3, [r7, #14]
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d38:	1c9a      	adds	r2, r3, #2
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	3b01      	subs	r3, #1
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d13a      	bne.n	8005dd2 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005d6a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	689a      	ldr	r2, [r3, #8]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f022 0201 	bic.w	r2, r2, #1
 8005d7a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2220      	movs	r2, #32
 8005d80:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d10f      	bne.n	8005db0 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 0210 	bic.w	r2, r2, #16
 8005d9e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005da6:	4619      	mov	r1, r3
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f7ff f883 	bl	8004eb4 <HAL_UARTEx_RxEventCallback>
 8005dae:	e002      	b.n	8005db6 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f7fa fc57 	bl	8000664 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005dbc:	e009      	b.n	8005dd2 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	8b1b      	ldrh	r3, [r3, #24]
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f042 0208 	orr.w	r2, r2, #8
 8005dce:	b292      	uxth	r2, r2
 8005dd0:	831a      	strh	r2, [r3, #24]
}
 8005dd2:	bf00      	nop
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b083      	sub	sp, #12
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005de2:	bf00      	nop
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005dee:	b084      	sub	sp, #16
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	f107 001c 	add.w	r0, r7, #28
 8005dfc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 fa23 	bl	8006258 <USB_CoreReset>
 8005e12:	4603      	mov	r3, r0
 8005e14:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005e16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d106      	bne.n	8005e2a <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e20:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	639a      	str	r2, [r3, #56]	; 0x38
 8005e28:	e005      	b.n	8005e36 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e42:	b004      	add	sp, #16
 8005e44:	4770      	bx	lr

08005e46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e46:	b480      	push	{r7}
 8005e48:	b083      	sub	sp, #12
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f023 0201 	bic.w	r2, r3, #1
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	460b      	mov	r3, r1
 8005e72:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005e80:	78fb      	ldrb	r3, [r7, #3]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d106      	bne.n	8005e94 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	60da      	str	r2, [r3, #12]
 8005e92:	e00b      	b.n	8005eac <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e94:	78fb      	ldrb	r3, [r7, #3]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d106      	bne.n	8005ea8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	60da      	str	r2, [r3, #12]
 8005ea6:	e001      	b.n	8005eac <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e003      	b.n	8005eb4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005eac:	2032      	movs	r0, #50	; 0x32
 8005eae:	f7fb fd25 	bl	80018fc <HAL_Delay>

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3708      	adds	r7, #8
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ebc:	b084      	sub	sp, #16
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b086      	sub	sp, #24
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
 8005ec6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005eca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	613b      	str	r3, [r7, #16]
 8005eda:	e009      	b.n	8005ef0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	3340      	adds	r3, #64	; 0x40
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4413      	add	r3, r2
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	3301      	adds	r3, #1
 8005eee:	613b      	str	r3, [r7, #16]
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	2b0e      	cmp	r3, #14
 8005ef4:	d9f2      	bls.n	8005edc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d11c      	bne.n	8005f36 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f0a:	f043 0302 	orr.w	r3, r3, #2
 8005f0e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f14:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	e005      	b.n	8005f42 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f48:	461a      	mov	r2, r3
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f54:	4619      	mov	r1, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	680b      	ldr	r3, [r1, #0]
 8005f60:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005f62:	2103      	movs	r1, #3
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 f93d 	bl	80061e4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f6a:	2110      	movs	r1, #16
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 f8f1 	bl	8006154 <USB_FlushTxFifo>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d001      	beq.n	8005f7c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 f90f 	bl	80061a0 <USB_FlushRxFifo>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d001      	beq.n	8005f8c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f92:	461a      	mov	r2, r3
 8005f94:	2300      	movs	r3, #0
 8005f96:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005faa:	461a      	mov	r2, r3
 8005fac:	2300      	movs	r3, #0
 8005fae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	613b      	str	r3, [r7, #16]
 8005fb4:	e043      	b.n	800603e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	015a      	lsls	r2, r3, #5
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fcc:	d118      	bne.n	8006000 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10a      	bne.n	8005fea <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	015a      	lsls	r2, r3, #5
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005fe6:	6013      	str	r3, [r2, #0]
 8005fe8:	e013      	b.n	8006012 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	015a      	lsls	r2, r3, #5
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ffc:	6013      	str	r3, [r2, #0]
 8005ffe:	e008      	b.n	8006012 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	4413      	add	r3, r2
 8006008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800600c:	461a      	mov	r2, r3
 800600e:	2300      	movs	r3, #0
 8006010:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	015a      	lsls	r2, r3, #5
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	4413      	add	r3, r2
 800601a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800601e:	461a      	mov	r2, r3
 8006020:	2300      	movs	r3, #0
 8006022:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	015a      	lsls	r2, r3, #5
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	4413      	add	r3, r2
 800602c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006030:	461a      	mov	r2, r3
 8006032:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006036:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	3301      	adds	r3, #1
 800603c:	613b      	str	r3, [r7, #16]
 800603e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	429a      	cmp	r2, r3
 8006044:	d3b7      	bcc.n	8005fb6 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006046:	2300      	movs	r3, #0
 8006048:	613b      	str	r3, [r7, #16]
 800604a:	e043      	b.n	80060d4 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	015a      	lsls	r2, r3, #5
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	4413      	add	r3, r2
 8006054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800605e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006062:	d118      	bne.n	8006096 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10a      	bne.n	8006080 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	015a      	lsls	r2, r3, #5
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	4413      	add	r3, r2
 8006072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006076:	461a      	mov	r2, r3
 8006078:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800607c:	6013      	str	r3, [r2, #0]
 800607e:	e013      	b.n	80060a8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	4413      	add	r3, r2
 8006088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800608c:	461a      	mov	r2, r3
 800608e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006092:	6013      	str	r3, [r2, #0]
 8006094:	e008      	b.n	80060a8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	015a      	lsls	r2, r3, #5
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	4413      	add	r3, r2
 800609e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a2:	461a      	mov	r2, r3
 80060a4:	2300      	movs	r3, #0
 80060a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	015a      	lsls	r2, r3, #5
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	4413      	add	r3, r2
 80060b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b4:	461a      	mov	r2, r3
 80060b6:	2300      	movs	r3, #0
 80060b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	015a      	lsls	r2, r3, #5
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	4413      	add	r3, r2
 80060c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c6:	461a      	mov	r2, r3
 80060c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80060cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	3301      	adds	r3, #1
 80060d2:	613b      	str	r3, [r7, #16]
 80060d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d3b7      	bcc.n	800604c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80060fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	f043 0210 	orr.w	r2, r3, #16
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	699a      	ldr	r2, [r3, #24]
 800610e:	4b10      	ldr	r3, [pc, #64]	; (8006150 <USB_DevInit+0x294>)
 8006110:	4313      	orrs	r3, r2
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006118:	2b00      	cmp	r3, #0
 800611a:	d005      	beq.n	8006128 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	f043 0208 	orr.w	r2, r3, #8
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800612a:	2b01      	cmp	r3, #1
 800612c:	d107      	bne.n	800613e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006136:	f043 0304 	orr.w	r3, r3, #4
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800613e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006140:	4618      	mov	r0, r3
 8006142:	3718      	adds	r7, #24
 8006144:	46bd      	mov	sp, r7
 8006146:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800614a:	b004      	add	sp, #16
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	803c3800 	.word	0x803c3800

08006154 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800615e:	2300      	movs	r3, #0
 8006160:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	019b      	lsls	r3, r3, #6
 8006166:	f043 0220 	orr.w	r2, r3, #32
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	3301      	adds	r3, #1
 8006172:	60fb      	str	r3, [r7, #12]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	4a09      	ldr	r2, [pc, #36]	; (800619c <USB_FlushTxFifo+0x48>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d901      	bls.n	8006180 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e006      	b.n	800618e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	f003 0320 	and.w	r3, r3, #32
 8006188:	2b20      	cmp	r3, #32
 800618a:	d0f0      	beq.n	800616e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3714      	adds	r7, #20
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	00030d40 	.word	0x00030d40

080061a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80061a8:	2300      	movs	r3, #0
 80061aa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2210      	movs	r2, #16
 80061b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	3301      	adds	r3, #1
 80061b6:	60fb      	str	r3, [r7, #12]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	4a09      	ldr	r2, [pc, #36]	; (80061e0 <USB_FlushRxFifo+0x40>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d901      	bls.n	80061c4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e006      	b.n	80061d2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	f003 0310 	and.w	r3, r3, #16
 80061cc:	2b10      	cmp	r3, #16
 80061ce:	d0f0      	beq.n	80061b2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3714      	adds	r7, #20
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	00030d40 	.word	0x00030d40

080061e4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	460b      	mov	r3, r1
 80061ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	78fb      	ldrb	r3, [r7, #3]
 80061fe:	68f9      	ldr	r1, [r7, #12]
 8006200:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006204:	4313      	orrs	r3, r2
 8006206:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3714      	adds	r7, #20
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006216:	b480      	push	{r7}
 8006218:	b085      	sub	sp, #20
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006230:	f023 0303 	bic.w	r3, r3, #3
 8006234:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006244:	f043 0302 	orr.w	r3, r3, #2
 8006248:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006260:	2300      	movs	r3, #0
 8006262:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	3301      	adds	r3, #1
 8006268:	60fb      	str	r3, [r7, #12]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	4a13      	ldr	r2, [pc, #76]	; (80062bc <USB_CoreReset+0x64>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d901      	bls.n	8006276 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e01b      	b.n	80062ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	2b00      	cmp	r3, #0
 800627c:	daf2      	bge.n	8006264 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800627e:	2300      	movs	r3, #0
 8006280:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	f043 0201 	orr.w	r2, r3, #1
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	3301      	adds	r3, #1
 8006292:	60fb      	str	r3, [r7, #12]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	4a09      	ldr	r2, [pc, #36]	; (80062bc <USB_CoreReset+0x64>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d901      	bls.n	80062a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800629c:	2303      	movs	r3, #3
 800629e:	e006      	b.n	80062ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	f003 0301 	and.w	r3, r3, #1
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d0f0      	beq.n	800628e <USB_CoreReset+0x36>

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3714      	adds	r7, #20
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	00030d40 	.word	0x00030d40

080062c0 <__errno>:
 80062c0:	4b01      	ldr	r3, [pc, #4]	; (80062c8 <__errno+0x8>)
 80062c2:	6818      	ldr	r0, [r3, #0]
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	2000004c 	.word	0x2000004c

080062cc <__libc_init_array>:
 80062cc:	b570      	push	{r4, r5, r6, lr}
 80062ce:	4d0d      	ldr	r5, [pc, #52]	; (8006304 <__libc_init_array+0x38>)
 80062d0:	4c0d      	ldr	r4, [pc, #52]	; (8006308 <__libc_init_array+0x3c>)
 80062d2:	1b64      	subs	r4, r4, r5
 80062d4:	10a4      	asrs	r4, r4, #2
 80062d6:	2600      	movs	r6, #0
 80062d8:	42a6      	cmp	r6, r4
 80062da:	d109      	bne.n	80062f0 <__libc_init_array+0x24>
 80062dc:	4d0b      	ldr	r5, [pc, #44]	; (800630c <__libc_init_array+0x40>)
 80062de:	4c0c      	ldr	r4, [pc, #48]	; (8006310 <__libc_init_array+0x44>)
 80062e0:	f000 fc62 	bl	8006ba8 <_init>
 80062e4:	1b64      	subs	r4, r4, r5
 80062e6:	10a4      	asrs	r4, r4, #2
 80062e8:	2600      	movs	r6, #0
 80062ea:	42a6      	cmp	r6, r4
 80062ec:	d105      	bne.n	80062fa <__libc_init_array+0x2e>
 80062ee:	bd70      	pop	{r4, r5, r6, pc}
 80062f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80062f4:	4798      	blx	r3
 80062f6:	3601      	adds	r6, #1
 80062f8:	e7ee      	b.n	80062d8 <__libc_init_array+0xc>
 80062fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80062fe:	4798      	blx	r3
 8006300:	3601      	adds	r6, #1
 8006302:	e7f2      	b.n	80062ea <__libc_init_array+0x1e>
 8006304:	08006d10 	.word	0x08006d10
 8006308:	08006d10 	.word	0x08006d10
 800630c:	08006d10 	.word	0x08006d10
 8006310:	08006d14 	.word	0x08006d14

08006314 <memset>:
 8006314:	4402      	add	r2, r0
 8006316:	4603      	mov	r3, r0
 8006318:	4293      	cmp	r3, r2
 800631a:	d100      	bne.n	800631e <memset+0xa>
 800631c:	4770      	bx	lr
 800631e:	f803 1b01 	strb.w	r1, [r3], #1
 8006322:	e7f9      	b.n	8006318 <memset+0x4>

08006324 <sniprintf>:
 8006324:	b40c      	push	{r2, r3}
 8006326:	b530      	push	{r4, r5, lr}
 8006328:	4b17      	ldr	r3, [pc, #92]	; (8006388 <sniprintf+0x64>)
 800632a:	1e0c      	subs	r4, r1, #0
 800632c:	681d      	ldr	r5, [r3, #0]
 800632e:	b09d      	sub	sp, #116	; 0x74
 8006330:	da08      	bge.n	8006344 <sniprintf+0x20>
 8006332:	238b      	movs	r3, #139	; 0x8b
 8006334:	602b      	str	r3, [r5, #0]
 8006336:	f04f 30ff 	mov.w	r0, #4294967295
 800633a:	b01d      	add	sp, #116	; 0x74
 800633c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006340:	b002      	add	sp, #8
 8006342:	4770      	bx	lr
 8006344:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006348:	f8ad 3014 	strh.w	r3, [sp, #20]
 800634c:	bf14      	ite	ne
 800634e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006352:	4623      	moveq	r3, r4
 8006354:	9304      	str	r3, [sp, #16]
 8006356:	9307      	str	r3, [sp, #28]
 8006358:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800635c:	9002      	str	r0, [sp, #8]
 800635e:	9006      	str	r0, [sp, #24]
 8006360:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006364:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006366:	ab21      	add	r3, sp, #132	; 0x84
 8006368:	a902      	add	r1, sp, #8
 800636a:	4628      	mov	r0, r5
 800636c:	9301      	str	r3, [sp, #4]
 800636e:	f000 f869 	bl	8006444 <_svfiprintf_r>
 8006372:	1c43      	adds	r3, r0, #1
 8006374:	bfbc      	itt	lt
 8006376:	238b      	movlt	r3, #139	; 0x8b
 8006378:	602b      	strlt	r3, [r5, #0]
 800637a:	2c00      	cmp	r4, #0
 800637c:	d0dd      	beq.n	800633a <sniprintf+0x16>
 800637e:	9b02      	ldr	r3, [sp, #8]
 8006380:	2200      	movs	r2, #0
 8006382:	701a      	strb	r2, [r3, #0]
 8006384:	e7d9      	b.n	800633a <sniprintf+0x16>
 8006386:	bf00      	nop
 8006388:	2000004c 	.word	0x2000004c

0800638c <__ssputs_r>:
 800638c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006390:	688e      	ldr	r6, [r1, #8]
 8006392:	429e      	cmp	r6, r3
 8006394:	4682      	mov	sl, r0
 8006396:	460c      	mov	r4, r1
 8006398:	4690      	mov	r8, r2
 800639a:	461f      	mov	r7, r3
 800639c:	d838      	bhi.n	8006410 <__ssputs_r+0x84>
 800639e:	898a      	ldrh	r2, [r1, #12]
 80063a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063a4:	d032      	beq.n	800640c <__ssputs_r+0x80>
 80063a6:	6825      	ldr	r5, [r4, #0]
 80063a8:	6909      	ldr	r1, [r1, #16]
 80063aa:	eba5 0901 	sub.w	r9, r5, r1
 80063ae:	6965      	ldr	r5, [r4, #20]
 80063b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80063b8:	3301      	adds	r3, #1
 80063ba:	444b      	add	r3, r9
 80063bc:	106d      	asrs	r5, r5, #1
 80063be:	429d      	cmp	r5, r3
 80063c0:	bf38      	it	cc
 80063c2:	461d      	movcc	r5, r3
 80063c4:	0553      	lsls	r3, r2, #21
 80063c6:	d531      	bpl.n	800642c <__ssputs_r+0xa0>
 80063c8:	4629      	mov	r1, r5
 80063ca:	f000 fb47 	bl	8006a5c <_malloc_r>
 80063ce:	4606      	mov	r6, r0
 80063d0:	b950      	cbnz	r0, 80063e8 <__ssputs_r+0x5c>
 80063d2:	230c      	movs	r3, #12
 80063d4:	f8ca 3000 	str.w	r3, [sl]
 80063d8:	89a3      	ldrh	r3, [r4, #12]
 80063da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063de:	81a3      	strh	r3, [r4, #12]
 80063e0:	f04f 30ff 	mov.w	r0, #4294967295
 80063e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063e8:	6921      	ldr	r1, [r4, #16]
 80063ea:	464a      	mov	r2, r9
 80063ec:	f000 fabe 	bl	800696c <memcpy>
 80063f0:	89a3      	ldrh	r3, [r4, #12]
 80063f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80063f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063fa:	81a3      	strh	r3, [r4, #12]
 80063fc:	6126      	str	r6, [r4, #16]
 80063fe:	6165      	str	r5, [r4, #20]
 8006400:	444e      	add	r6, r9
 8006402:	eba5 0509 	sub.w	r5, r5, r9
 8006406:	6026      	str	r6, [r4, #0]
 8006408:	60a5      	str	r5, [r4, #8]
 800640a:	463e      	mov	r6, r7
 800640c:	42be      	cmp	r6, r7
 800640e:	d900      	bls.n	8006412 <__ssputs_r+0x86>
 8006410:	463e      	mov	r6, r7
 8006412:	4632      	mov	r2, r6
 8006414:	6820      	ldr	r0, [r4, #0]
 8006416:	4641      	mov	r1, r8
 8006418:	f000 fab6 	bl	8006988 <memmove>
 800641c:	68a3      	ldr	r3, [r4, #8]
 800641e:	6822      	ldr	r2, [r4, #0]
 8006420:	1b9b      	subs	r3, r3, r6
 8006422:	4432      	add	r2, r6
 8006424:	60a3      	str	r3, [r4, #8]
 8006426:	6022      	str	r2, [r4, #0]
 8006428:	2000      	movs	r0, #0
 800642a:	e7db      	b.n	80063e4 <__ssputs_r+0x58>
 800642c:	462a      	mov	r2, r5
 800642e:	f000 fb6f 	bl	8006b10 <_realloc_r>
 8006432:	4606      	mov	r6, r0
 8006434:	2800      	cmp	r0, #0
 8006436:	d1e1      	bne.n	80063fc <__ssputs_r+0x70>
 8006438:	6921      	ldr	r1, [r4, #16]
 800643a:	4650      	mov	r0, sl
 800643c:	f000 fabe 	bl	80069bc <_free_r>
 8006440:	e7c7      	b.n	80063d2 <__ssputs_r+0x46>
	...

08006444 <_svfiprintf_r>:
 8006444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006448:	4698      	mov	r8, r3
 800644a:	898b      	ldrh	r3, [r1, #12]
 800644c:	061b      	lsls	r3, r3, #24
 800644e:	b09d      	sub	sp, #116	; 0x74
 8006450:	4607      	mov	r7, r0
 8006452:	460d      	mov	r5, r1
 8006454:	4614      	mov	r4, r2
 8006456:	d50e      	bpl.n	8006476 <_svfiprintf_r+0x32>
 8006458:	690b      	ldr	r3, [r1, #16]
 800645a:	b963      	cbnz	r3, 8006476 <_svfiprintf_r+0x32>
 800645c:	2140      	movs	r1, #64	; 0x40
 800645e:	f000 fafd 	bl	8006a5c <_malloc_r>
 8006462:	6028      	str	r0, [r5, #0]
 8006464:	6128      	str	r0, [r5, #16]
 8006466:	b920      	cbnz	r0, 8006472 <_svfiprintf_r+0x2e>
 8006468:	230c      	movs	r3, #12
 800646a:	603b      	str	r3, [r7, #0]
 800646c:	f04f 30ff 	mov.w	r0, #4294967295
 8006470:	e0d1      	b.n	8006616 <_svfiprintf_r+0x1d2>
 8006472:	2340      	movs	r3, #64	; 0x40
 8006474:	616b      	str	r3, [r5, #20]
 8006476:	2300      	movs	r3, #0
 8006478:	9309      	str	r3, [sp, #36]	; 0x24
 800647a:	2320      	movs	r3, #32
 800647c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006480:	f8cd 800c 	str.w	r8, [sp, #12]
 8006484:	2330      	movs	r3, #48	; 0x30
 8006486:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006630 <_svfiprintf_r+0x1ec>
 800648a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800648e:	f04f 0901 	mov.w	r9, #1
 8006492:	4623      	mov	r3, r4
 8006494:	469a      	mov	sl, r3
 8006496:	f813 2b01 	ldrb.w	r2, [r3], #1
 800649a:	b10a      	cbz	r2, 80064a0 <_svfiprintf_r+0x5c>
 800649c:	2a25      	cmp	r2, #37	; 0x25
 800649e:	d1f9      	bne.n	8006494 <_svfiprintf_r+0x50>
 80064a0:	ebba 0b04 	subs.w	fp, sl, r4
 80064a4:	d00b      	beq.n	80064be <_svfiprintf_r+0x7a>
 80064a6:	465b      	mov	r3, fp
 80064a8:	4622      	mov	r2, r4
 80064aa:	4629      	mov	r1, r5
 80064ac:	4638      	mov	r0, r7
 80064ae:	f7ff ff6d 	bl	800638c <__ssputs_r>
 80064b2:	3001      	adds	r0, #1
 80064b4:	f000 80aa 	beq.w	800660c <_svfiprintf_r+0x1c8>
 80064b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064ba:	445a      	add	r2, fp
 80064bc:	9209      	str	r2, [sp, #36]	; 0x24
 80064be:	f89a 3000 	ldrb.w	r3, [sl]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f000 80a2 	beq.w	800660c <_svfiprintf_r+0x1c8>
 80064c8:	2300      	movs	r3, #0
 80064ca:	f04f 32ff 	mov.w	r2, #4294967295
 80064ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064d2:	f10a 0a01 	add.w	sl, sl, #1
 80064d6:	9304      	str	r3, [sp, #16]
 80064d8:	9307      	str	r3, [sp, #28]
 80064da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064de:	931a      	str	r3, [sp, #104]	; 0x68
 80064e0:	4654      	mov	r4, sl
 80064e2:	2205      	movs	r2, #5
 80064e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064e8:	4851      	ldr	r0, [pc, #324]	; (8006630 <_svfiprintf_r+0x1ec>)
 80064ea:	f7f9 fe79 	bl	80001e0 <memchr>
 80064ee:	9a04      	ldr	r2, [sp, #16]
 80064f0:	b9d8      	cbnz	r0, 800652a <_svfiprintf_r+0xe6>
 80064f2:	06d0      	lsls	r0, r2, #27
 80064f4:	bf44      	itt	mi
 80064f6:	2320      	movmi	r3, #32
 80064f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064fc:	0711      	lsls	r1, r2, #28
 80064fe:	bf44      	itt	mi
 8006500:	232b      	movmi	r3, #43	; 0x2b
 8006502:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006506:	f89a 3000 	ldrb.w	r3, [sl]
 800650a:	2b2a      	cmp	r3, #42	; 0x2a
 800650c:	d015      	beq.n	800653a <_svfiprintf_r+0xf6>
 800650e:	9a07      	ldr	r2, [sp, #28]
 8006510:	4654      	mov	r4, sl
 8006512:	2000      	movs	r0, #0
 8006514:	f04f 0c0a 	mov.w	ip, #10
 8006518:	4621      	mov	r1, r4
 800651a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800651e:	3b30      	subs	r3, #48	; 0x30
 8006520:	2b09      	cmp	r3, #9
 8006522:	d94e      	bls.n	80065c2 <_svfiprintf_r+0x17e>
 8006524:	b1b0      	cbz	r0, 8006554 <_svfiprintf_r+0x110>
 8006526:	9207      	str	r2, [sp, #28]
 8006528:	e014      	b.n	8006554 <_svfiprintf_r+0x110>
 800652a:	eba0 0308 	sub.w	r3, r0, r8
 800652e:	fa09 f303 	lsl.w	r3, r9, r3
 8006532:	4313      	orrs	r3, r2
 8006534:	9304      	str	r3, [sp, #16]
 8006536:	46a2      	mov	sl, r4
 8006538:	e7d2      	b.n	80064e0 <_svfiprintf_r+0x9c>
 800653a:	9b03      	ldr	r3, [sp, #12]
 800653c:	1d19      	adds	r1, r3, #4
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	9103      	str	r1, [sp, #12]
 8006542:	2b00      	cmp	r3, #0
 8006544:	bfbb      	ittet	lt
 8006546:	425b      	neglt	r3, r3
 8006548:	f042 0202 	orrlt.w	r2, r2, #2
 800654c:	9307      	strge	r3, [sp, #28]
 800654e:	9307      	strlt	r3, [sp, #28]
 8006550:	bfb8      	it	lt
 8006552:	9204      	strlt	r2, [sp, #16]
 8006554:	7823      	ldrb	r3, [r4, #0]
 8006556:	2b2e      	cmp	r3, #46	; 0x2e
 8006558:	d10c      	bne.n	8006574 <_svfiprintf_r+0x130>
 800655a:	7863      	ldrb	r3, [r4, #1]
 800655c:	2b2a      	cmp	r3, #42	; 0x2a
 800655e:	d135      	bne.n	80065cc <_svfiprintf_r+0x188>
 8006560:	9b03      	ldr	r3, [sp, #12]
 8006562:	1d1a      	adds	r2, r3, #4
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	9203      	str	r2, [sp, #12]
 8006568:	2b00      	cmp	r3, #0
 800656a:	bfb8      	it	lt
 800656c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006570:	3402      	adds	r4, #2
 8006572:	9305      	str	r3, [sp, #20]
 8006574:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006640 <_svfiprintf_r+0x1fc>
 8006578:	7821      	ldrb	r1, [r4, #0]
 800657a:	2203      	movs	r2, #3
 800657c:	4650      	mov	r0, sl
 800657e:	f7f9 fe2f 	bl	80001e0 <memchr>
 8006582:	b140      	cbz	r0, 8006596 <_svfiprintf_r+0x152>
 8006584:	2340      	movs	r3, #64	; 0x40
 8006586:	eba0 000a 	sub.w	r0, r0, sl
 800658a:	fa03 f000 	lsl.w	r0, r3, r0
 800658e:	9b04      	ldr	r3, [sp, #16]
 8006590:	4303      	orrs	r3, r0
 8006592:	3401      	adds	r4, #1
 8006594:	9304      	str	r3, [sp, #16]
 8006596:	f814 1b01 	ldrb.w	r1, [r4], #1
 800659a:	4826      	ldr	r0, [pc, #152]	; (8006634 <_svfiprintf_r+0x1f0>)
 800659c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065a0:	2206      	movs	r2, #6
 80065a2:	f7f9 fe1d 	bl	80001e0 <memchr>
 80065a6:	2800      	cmp	r0, #0
 80065a8:	d038      	beq.n	800661c <_svfiprintf_r+0x1d8>
 80065aa:	4b23      	ldr	r3, [pc, #140]	; (8006638 <_svfiprintf_r+0x1f4>)
 80065ac:	bb1b      	cbnz	r3, 80065f6 <_svfiprintf_r+0x1b2>
 80065ae:	9b03      	ldr	r3, [sp, #12]
 80065b0:	3307      	adds	r3, #7
 80065b2:	f023 0307 	bic.w	r3, r3, #7
 80065b6:	3308      	adds	r3, #8
 80065b8:	9303      	str	r3, [sp, #12]
 80065ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065bc:	4433      	add	r3, r6
 80065be:	9309      	str	r3, [sp, #36]	; 0x24
 80065c0:	e767      	b.n	8006492 <_svfiprintf_r+0x4e>
 80065c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80065c6:	460c      	mov	r4, r1
 80065c8:	2001      	movs	r0, #1
 80065ca:	e7a5      	b.n	8006518 <_svfiprintf_r+0xd4>
 80065cc:	2300      	movs	r3, #0
 80065ce:	3401      	adds	r4, #1
 80065d0:	9305      	str	r3, [sp, #20]
 80065d2:	4619      	mov	r1, r3
 80065d4:	f04f 0c0a 	mov.w	ip, #10
 80065d8:	4620      	mov	r0, r4
 80065da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065de:	3a30      	subs	r2, #48	; 0x30
 80065e0:	2a09      	cmp	r2, #9
 80065e2:	d903      	bls.n	80065ec <_svfiprintf_r+0x1a8>
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d0c5      	beq.n	8006574 <_svfiprintf_r+0x130>
 80065e8:	9105      	str	r1, [sp, #20]
 80065ea:	e7c3      	b.n	8006574 <_svfiprintf_r+0x130>
 80065ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80065f0:	4604      	mov	r4, r0
 80065f2:	2301      	movs	r3, #1
 80065f4:	e7f0      	b.n	80065d8 <_svfiprintf_r+0x194>
 80065f6:	ab03      	add	r3, sp, #12
 80065f8:	9300      	str	r3, [sp, #0]
 80065fa:	462a      	mov	r2, r5
 80065fc:	4b0f      	ldr	r3, [pc, #60]	; (800663c <_svfiprintf_r+0x1f8>)
 80065fe:	a904      	add	r1, sp, #16
 8006600:	4638      	mov	r0, r7
 8006602:	f3af 8000 	nop.w
 8006606:	1c42      	adds	r2, r0, #1
 8006608:	4606      	mov	r6, r0
 800660a:	d1d6      	bne.n	80065ba <_svfiprintf_r+0x176>
 800660c:	89ab      	ldrh	r3, [r5, #12]
 800660e:	065b      	lsls	r3, r3, #25
 8006610:	f53f af2c 	bmi.w	800646c <_svfiprintf_r+0x28>
 8006614:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006616:	b01d      	add	sp, #116	; 0x74
 8006618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800661c:	ab03      	add	r3, sp, #12
 800661e:	9300      	str	r3, [sp, #0]
 8006620:	462a      	mov	r2, r5
 8006622:	4b06      	ldr	r3, [pc, #24]	; (800663c <_svfiprintf_r+0x1f8>)
 8006624:	a904      	add	r1, sp, #16
 8006626:	4638      	mov	r0, r7
 8006628:	f000 f87a 	bl	8006720 <_printf_i>
 800662c:	e7eb      	b.n	8006606 <_svfiprintf_r+0x1c2>
 800662e:	bf00      	nop
 8006630:	08006cd4 	.word	0x08006cd4
 8006634:	08006cde 	.word	0x08006cde
 8006638:	00000000 	.word	0x00000000
 800663c:	0800638d 	.word	0x0800638d
 8006640:	08006cda 	.word	0x08006cda

08006644 <_printf_common>:
 8006644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006648:	4616      	mov	r6, r2
 800664a:	4699      	mov	r9, r3
 800664c:	688a      	ldr	r2, [r1, #8]
 800664e:	690b      	ldr	r3, [r1, #16]
 8006650:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006654:	4293      	cmp	r3, r2
 8006656:	bfb8      	it	lt
 8006658:	4613      	movlt	r3, r2
 800665a:	6033      	str	r3, [r6, #0]
 800665c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006660:	4607      	mov	r7, r0
 8006662:	460c      	mov	r4, r1
 8006664:	b10a      	cbz	r2, 800666a <_printf_common+0x26>
 8006666:	3301      	adds	r3, #1
 8006668:	6033      	str	r3, [r6, #0]
 800666a:	6823      	ldr	r3, [r4, #0]
 800666c:	0699      	lsls	r1, r3, #26
 800666e:	bf42      	ittt	mi
 8006670:	6833      	ldrmi	r3, [r6, #0]
 8006672:	3302      	addmi	r3, #2
 8006674:	6033      	strmi	r3, [r6, #0]
 8006676:	6825      	ldr	r5, [r4, #0]
 8006678:	f015 0506 	ands.w	r5, r5, #6
 800667c:	d106      	bne.n	800668c <_printf_common+0x48>
 800667e:	f104 0a19 	add.w	sl, r4, #25
 8006682:	68e3      	ldr	r3, [r4, #12]
 8006684:	6832      	ldr	r2, [r6, #0]
 8006686:	1a9b      	subs	r3, r3, r2
 8006688:	42ab      	cmp	r3, r5
 800668a:	dc26      	bgt.n	80066da <_printf_common+0x96>
 800668c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006690:	1e13      	subs	r3, r2, #0
 8006692:	6822      	ldr	r2, [r4, #0]
 8006694:	bf18      	it	ne
 8006696:	2301      	movne	r3, #1
 8006698:	0692      	lsls	r2, r2, #26
 800669a:	d42b      	bmi.n	80066f4 <_printf_common+0xb0>
 800669c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066a0:	4649      	mov	r1, r9
 80066a2:	4638      	mov	r0, r7
 80066a4:	47c0      	blx	r8
 80066a6:	3001      	adds	r0, #1
 80066a8:	d01e      	beq.n	80066e8 <_printf_common+0xa4>
 80066aa:	6823      	ldr	r3, [r4, #0]
 80066ac:	68e5      	ldr	r5, [r4, #12]
 80066ae:	6832      	ldr	r2, [r6, #0]
 80066b0:	f003 0306 	and.w	r3, r3, #6
 80066b4:	2b04      	cmp	r3, #4
 80066b6:	bf08      	it	eq
 80066b8:	1aad      	subeq	r5, r5, r2
 80066ba:	68a3      	ldr	r3, [r4, #8]
 80066bc:	6922      	ldr	r2, [r4, #16]
 80066be:	bf0c      	ite	eq
 80066c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066c4:	2500      	movne	r5, #0
 80066c6:	4293      	cmp	r3, r2
 80066c8:	bfc4      	itt	gt
 80066ca:	1a9b      	subgt	r3, r3, r2
 80066cc:	18ed      	addgt	r5, r5, r3
 80066ce:	2600      	movs	r6, #0
 80066d0:	341a      	adds	r4, #26
 80066d2:	42b5      	cmp	r5, r6
 80066d4:	d11a      	bne.n	800670c <_printf_common+0xc8>
 80066d6:	2000      	movs	r0, #0
 80066d8:	e008      	b.n	80066ec <_printf_common+0xa8>
 80066da:	2301      	movs	r3, #1
 80066dc:	4652      	mov	r2, sl
 80066de:	4649      	mov	r1, r9
 80066e0:	4638      	mov	r0, r7
 80066e2:	47c0      	blx	r8
 80066e4:	3001      	adds	r0, #1
 80066e6:	d103      	bne.n	80066f0 <_printf_common+0xac>
 80066e8:	f04f 30ff 	mov.w	r0, #4294967295
 80066ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066f0:	3501      	adds	r5, #1
 80066f2:	e7c6      	b.n	8006682 <_printf_common+0x3e>
 80066f4:	18e1      	adds	r1, r4, r3
 80066f6:	1c5a      	adds	r2, r3, #1
 80066f8:	2030      	movs	r0, #48	; 0x30
 80066fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80066fe:	4422      	add	r2, r4
 8006700:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006704:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006708:	3302      	adds	r3, #2
 800670a:	e7c7      	b.n	800669c <_printf_common+0x58>
 800670c:	2301      	movs	r3, #1
 800670e:	4622      	mov	r2, r4
 8006710:	4649      	mov	r1, r9
 8006712:	4638      	mov	r0, r7
 8006714:	47c0      	blx	r8
 8006716:	3001      	adds	r0, #1
 8006718:	d0e6      	beq.n	80066e8 <_printf_common+0xa4>
 800671a:	3601      	adds	r6, #1
 800671c:	e7d9      	b.n	80066d2 <_printf_common+0x8e>
	...

08006720 <_printf_i>:
 8006720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006724:	460c      	mov	r4, r1
 8006726:	4691      	mov	r9, r2
 8006728:	7e27      	ldrb	r7, [r4, #24]
 800672a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800672c:	2f78      	cmp	r7, #120	; 0x78
 800672e:	4680      	mov	r8, r0
 8006730:	469a      	mov	sl, r3
 8006732:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006736:	d807      	bhi.n	8006748 <_printf_i+0x28>
 8006738:	2f62      	cmp	r7, #98	; 0x62
 800673a:	d80a      	bhi.n	8006752 <_printf_i+0x32>
 800673c:	2f00      	cmp	r7, #0
 800673e:	f000 80d8 	beq.w	80068f2 <_printf_i+0x1d2>
 8006742:	2f58      	cmp	r7, #88	; 0x58
 8006744:	f000 80a3 	beq.w	800688e <_printf_i+0x16e>
 8006748:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800674c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006750:	e03a      	b.n	80067c8 <_printf_i+0xa8>
 8006752:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006756:	2b15      	cmp	r3, #21
 8006758:	d8f6      	bhi.n	8006748 <_printf_i+0x28>
 800675a:	a001      	add	r0, pc, #4	; (adr r0, 8006760 <_printf_i+0x40>)
 800675c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006760:	080067b9 	.word	0x080067b9
 8006764:	080067cd 	.word	0x080067cd
 8006768:	08006749 	.word	0x08006749
 800676c:	08006749 	.word	0x08006749
 8006770:	08006749 	.word	0x08006749
 8006774:	08006749 	.word	0x08006749
 8006778:	080067cd 	.word	0x080067cd
 800677c:	08006749 	.word	0x08006749
 8006780:	08006749 	.word	0x08006749
 8006784:	08006749 	.word	0x08006749
 8006788:	08006749 	.word	0x08006749
 800678c:	080068d9 	.word	0x080068d9
 8006790:	080067fd 	.word	0x080067fd
 8006794:	080068bb 	.word	0x080068bb
 8006798:	08006749 	.word	0x08006749
 800679c:	08006749 	.word	0x08006749
 80067a0:	080068fb 	.word	0x080068fb
 80067a4:	08006749 	.word	0x08006749
 80067a8:	080067fd 	.word	0x080067fd
 80067ac:	08006749 	.word	0x08006749
 80067b0:	08006749 	.word	0x08006749
 80067b4:	080068c3 	.word	0x080068c3
 80067b8:	680b      	ldr	r3, [r1, #0]
 80067ba:	1d1a      	adds	r2, r3, #4
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	600a      	str	r2, [r1, #0]
 80067c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80067c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067c8:	2301      	movs	r3, #1
 80067ca:	e0a3      	b.n	8006914 <_printf_i+0x1f4>
 80067cc:	6825      	ldr	r5, [r4, #0]
 80067ce:	6808      	ldr	r0, [r1, #0]
 80067d0:	062e      	lsls	r6, r5, #24
 80067d2:	f100 0304 	add.w	r3, r0, #4
 80067d6:	d50a      	bpl.n	80067ee <_printf_i+0xce>
 80067d8:	6805      	ldr	r5, [r0, #0]
 80067da:	600b      	str	r3, [r1, #0]
 80067dc:	2d00      	cmp	r5, #0
 80067de:	da03      	bge.n	80067e8 <_printf_i+0xc8>
 80067e0:	232d      	movs	r3, #45	; 0x2d
 80067e2:	426d      	negs	r5, r5
 80067e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067e8:	485e      	ldr	r0, [pc, #376]	; (8006964 <_printf_i+0x244>)
 80067ea:	230a      	movs	r3, #10
 80067ec:	e019      	b.n	8006822 <_printf_i+0x102>
 80067ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80067f2:	6805      	ldr	r5, [r0, #0]
 80067f4:	600b      	str	r3, [r1, #0]
 80067f6:	bf18      	it	ne
 80067f8:	b22d      	sxthne	r5, r5
 80067fa:	e7ef      	b.n	80067dc <_printf_i+0xbc>
 80067fc:	680b      	ldr	r3, [r1, #0]
 80067fe:	6825      	ldr	r5, [r4, #0]
 8006800:	1d18      	adds	r0, r3, #4
 8006802:	6008      	str	r0, [r1, #0]
 8006804:	0628      	lsls	r0, r5, #24
 8006806:	d501      	bpl.n	800680c <_printf_i+0xec>
 8006808:	681d      	ldr	r5, [r3, #0]
 800680a:	e002      	b.n	8006812 <_printf_i+0xf2>
 800680c:	0669      	lsls	r1, r5, #25
 800680e:	d5fb      	bpl.n	8006808 <_printf_i+0xe8>
 8006810:	881d      	ldrh	r5, [r3, #0]
 8006812:	4854      	ldr	r0, [pc, #336]	; (8006964 <_printf_i+0x244>)
 8006814:	2f6f      	cmp	r7, #111	; 0x6f
 8006816:	bf0c      	ite	eq
 8006818:	2308      	moveq	r3, #8
 800681a:	230a      	movne	r3, #10
 800681c:	2100      	movs	r1, #0
 800681e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006822:	6866      	ldr	r6, [r4, #4]
 8006824:	60a6      	str	r6, [r4, #8]
 8006826:	2e00      	cmp	r6, #0
 8006828:	bfa2      	ittt	ge
 800682a:	6821      	ldrge	r1, [r4, #0]
 800682c:	f021 0104 	bicge.w	r1, r1, #4
 8006830:	6021      	strge	r1, [r4, #0]
 8006832:	b90d      	cbnz	r5, 8006838 <_printf_i+0x118>
 8006834:	2e00      	cmp	r6, #0
 8006836:	d04d      	beq.n	80068d4 <_printf_i+0x1b4>
 8006838:	4616      	mov	r6, r2
 800683a:	fbb5 f1f3 	udiv	r1, r5, r3
 800683e:	fb03 5711 	mls	r7, r3, r1, r5
 8006842:	5dc7      	ldrb	r7, [r0, r7]
 8006844:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006848:	462f      	mov	r7, r5
 800684a:	42bb      	cmp	r3, r7
 800684c:	460d      	mov	r5, r1
 800684e:	d9f4      	bls.n	800683a <_printf_i+0x11a>
 8006850:	2b08      	cmp	r3, #8
 8006852:	d10b      	bne.n	800686c <_printf_i+0x14c>
 8006854:	6823      	ldr	r3, [r4, #0]
 8006856:	07df      	lsls	r7, r3, #31
 8006858:	d508      	bpl.n	800686c <_printf_i+0x14c>
 800685a:	6923      	ldr	r3, [r4, #16]
 800685c:	6861      	ldr	r1, [r4, #4]
 800685e:	4299      	cmp	r1, r3
 8006860:	bfde      	ittt	le
 8006862:	2330      	movle	r3, #48	; 0x30
 8006864:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006868:	f106 36ff 	addle.w	r6, r6, #4294967295
 800686c:	1b92      	subs	r2, r2, r6
 800686e:	6122      	str	r2, [r4, #16]
 8006870:	f8cd a000 	str.w	sl, [sp]
 8006874:	464b      	mov	r3, r9
 8006876:	aa03      	add	r2, sp, #12
 8006878:	4621      	mov	r1, r4
 800687a:	4640      	mov	r0, r8
 800687c:	f7ff fee2 	bl	8006644 <_printf_common>
 8006880:	3001      	adds	r0, #1
 8006882:	d14c      	bne.n	800691e <_printf_i+0x1fe>
 8006884:	f04f 30ff 	mov.w	r0, #4294967295
 8006888:	b004      	add	sp, #16
 800688a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800688e:	4835      	ldr	r0, [pc, #212]	; (8006964 <_printf_i+0x244>)
 8006890:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006894:	6823      	ldr	r3, [r4, #0]
 8006896:	680e      	ldr	r6, [r1, #0]
 8006898:	061f      	lsls	r7, r3, #24
 800689a:	f856 5b04 	ldr.w	r5, [r6], #4
 800689e:	600e      	str	r6, [r1, #0]
 80068a0:	d514      	bpl.n	80068cc <_printf_i+0x1ac>
 80068a2:	07d9      	lsls	r1, r3, #31
 80068a4:	bf44      	itt	mi
 80068a6:	f043 0320 	orrmi.w	r3, r3, #32
 80068aa:	6023      	strmi	r3, [r4, #0]
 80068ac:	b91d      	cbnz	r5, 80068b6 <_printf_i+0x196>
 80068ae:	6823      	ldr	r3, [r4, #0]
 80068b0:	f023 0320 	bic.w	r3, r3, #32
 80068b4:	6023      	str	r3, [r4, #0]
 80068b6:	2310      	movs	r3, #16
 80068b8:	e7b0      	b.n	800681c <_printf_i+0xfc>
 80068ba:	6823      	ldr	r3, [r4, #0]
 80068bc:	f043 0320 	orr.w	r3, r3, #32
 80068c0:	6023      	str	r3, [r4, #0]
 80068c2:	2378      	movs	r3, #120	; 0x78
 80068c4:	4828      	ldr	r0, [pc, #160]	; (8006968 <_printf_i+0x248>)
 80068c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80068ca:	e7e3      	b.n	8006894 <_printf_i+0x174>
 80068cc:	065e      	lsls	r6, r3, #25
 80068ce:	bf48      	it	mi
 80068d0:	b2ad      	uxthmi	r5, r5
 80068d2:	e7e6      	b.n	80068a2 <_printf_i+0x182>
 80068d4:	4616      	mov	r6, r2
 80068d6:	e7bb      	b.n	8006850 <_printf_i+0x130>
 80068d8:	680b      	ldr	r3, [r1, #0]
 80068da:	6826      	ldr	r6, [r4, #0]
 80068dc:	6960      	ldr	r0, [r4, #20]
 80068de:	1d1d      	adds	r5, r3, #4
 80068e0:	600d      	str	r5, [r1, #0]
 80068e2:	0635      	lsls	r5, r6, #24
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	d501      	bpl.n	80068ec <_printf_i+0x1cc>
 80068e8:	6018      	str	r0, [r3, #0]
 80068ea:	e002      	b.n	80068f2 <_printf_i+0x1d2>
 80068ec:	0671      	lsls	r1, r6, #25
 80068ee:	d5fb      	bpl.n	80068e8 <_printf_i+0x1c8>
 80068f0:	8018      	strh	r0, [r3, #0]
 80068f2:	2300      	movs	r3, #0
 80068f4:	6123      	str	r3, [r4, #16]
 80068f6:	4616      	mov	r6, r2
 80068f8:	e7ba      	b.n	8006870 <_printf_i+0x150>
 80068fa:	680b      	ldr	r3, [r1, #0]
 80068fc:	1d1a      	adds	r2, r3, #4
 80068fe:	600a      	str	r2, [r1, #0]
 8006900:	681e      	ldr	r6, [r3, #0]
 8006902:	6862      	ldr	r2, [r4, #4]
 8006904:	2100      	movs	r1, #0
 8006906:	4630      	mov	r0, r6
 8006908:	f7f9 fc6a 	bl	80001e0 <memchr>
 800690c:	b108      	cbz	r0, 8006912 <_printf_i+0x1f2>
 800690e:	1b80      	subs	r0, r0, r6
 8006910:	6060      	str	r0, [r4, #4]
 8006912:	6863      	ldr	r3, [r4, #4]
 8006914:	6123      	str	r3, [r4, #16]
 8006916:	2300      	movs	r3, #0
 8006918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800691c:	e7a8      	b.n	8006870 <_printf_i+0x150>
 800691e:	6923      	ldr	r3, [r4, #16]
 8006920:	4632      	mov	r2, r6
 8006922:	4649      	mov	r1, r9
 8006924:	4640      	mov	r0, r8
 8006926:	47d0      	blx	sl
 8006928:	3001      	adds	r0, #1
 800692a:	d0ab      	beq.n	8006884 <_printf_i+0x164>
 800692c:	6823      	ldr	r3, [r4, #0]
 800692e:	079b      	lsls	r3, r3, #30
 8006930:	d413      	bmi.n	800695a <_printf_i+0x23a>
 8006932:	68e0      	ldr	r0, [r4, #12]
 8006934:	9b03      	ldr	r3, [sp, #12]
 8006936:	4298      	cmp	r0, r3
 8006938:	bfb8      	it	lt
 800693a:	4618      	movlt	r0, r3
 800693c:	e7a4      	b.n	8006888 <_printf_i+0x168>
 800693e:	2301      	movs	r3, #1
 8006940:	4632      	mov	r2, r6
 8006942:	4649      	mov	r1, r9
 8006944:	4640      	mov	r0, r8
 8006946:	47d0      	blx	sl
 8006948:	3001      	adds	r0, #1
 800694a:	d09b      	beq.n	8006884 <_printf_i+0x164>
 800694c:	3501      	adds	r5, #1
 800694e:	68e3      	ldr	r3, [r4, #12]
 8006950:	9903      	ldr	r1, [sp, #12]
 8006952:	1a5b      	subs	r3, r3, r1
 8006954:	42ab      	cmp	r3, r5
 8006956:	dcf2      	bgt.n	800693e <_printf_i+0x21e>
 8006958:	e7eb      	b.n	8006932 <_printf_i+0x212>
 800695a:	2500      	movs	r5, #0
 800695c:	f104 0619 	add.w	r6, r4, #25
 8006960:	e7f5      	b.n	800694e <_printf_i+0x22e>
 8006962:	bf00      	nop
 8006964:	08006ce5 	.word	0x08006ce5
 8006968:	08006cf6 	.word	0x08006cf6

0800696c <memcpy>:
 800696c:	440a      	add	r2, r1
 800696e:	4291      	cmp	r1, r2
 8006970:	f100 33ff 	add.w	r3, r0, #4294967295
 8006974:	d100      	bne.n	8006978 <memcpy+0xc>
 8006976:	4770      	bx	lr
 8006978:	b510      	push	{r4, lr}
 800697a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800697e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006982:	4291      	cmp	r1, r2
 8006984:	d1f9      	bne.n	800697a <memcpy+0xe>
 8006986:	bd10      	pop	{r4, pc}

08006988 <memmove>:
 8006988:	4288      	cmp	r0, r1
 800698a:	b510      	push	{r4, lr}
 800698c:	eb01 0402 	add.w	r4, r1, r2
 8006990:	d902      	bls.n	8006998 <memmove+0x10>
 8006992:	4284      	cmp	r4, r0
 8006994:	4623      	mov	r3, r4
 8006996:	d807      	bhi.n	80069a8 <memmove+0x20>
 8006998:	1e43      	subs	r3, r0, #1
 800699a:	42a1      	cmp	r1, r4
 800699c:	d008      	beq.n	80069b0 <memmove+0x28>
 800699e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069a6:	e7f8      	b.n	800699a <memmove+0x12>
 80069a8:	4402      	add	r2, r0
 80069aa:	4601      	mov	r1, r0
 80069ac:	428a      	cmp	r2, r1
 80069ae:	d100      	bne.n	80069b2 <memmove+0x2a>
 80069b0:	bd10      	pop	{r4, pc}
 80069b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80069ba:	e7f7      	b.n	80069ac <memmove+0x24>

080069bc <_free_r>:
 80069bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069be:	2900      	cmp	r1, #0
 80069c0:	d048      	beq.n	8006a54 <_free_r+0x98>
 80069c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069c6:	9001      	str	r0, [sp, #4]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f1a1 0404 	sub.w	r4, r1, #4
 80069ce:	bfb8      	it	lt
 80069d0:	18e4      	addlt	r4, r4, r3
 80069d2:	f000 f8d3 	bl	8006b7c <__malloc_lock>
 80069d6:	4a20      	ldr	r2, [pc, #128]	; (8006a58 <_free_r+0x9c>)
 80069d8:	9801      	ldr	r0, [sp, #4]
 80069da:	6813      	ldr	r3, [r2, #0]
 80069dc:	4615      	mov	r5, r2
 80069de:	b933      	cbnz	r3, 80069ee <_free_r+0x32>
 80069e0:	6063      	str	r3, [r4, #4]
 80069e2:	6014      	str	r4, [r2, #0]
 80069e4:	b003      	add	sp, #12
 80069e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069ea:	f000 b8cd 	b.w	8006b88 <__malloc_unlock>
 80069ee:	42a3      	cmp	r3, r4
 80069f0:	d90b      	bls.n	8006a0a <_free_r+0x4e>
 80069f2:	6821      	ldr	r1, [r4, #0]
 80069f4:	1862      	adds	r2, r4, r1
 80069f6:	4293      	cmp	r3, r2
 80069f8:	bf04      	itt	eq
 80069fa:	681a      	ldreq	r2, [r3, #0]
 80069fc:	685b      	ldreq	r3, [r3, #4]
 80069fe:	6063      	str	r3, [r4, #4]
 8006a00:	bf04      	itt	eq
 8006a02:	1852      	addeq	r2, r2, r1
 8006a04:	6022      	streq	r2, [r4, #0]
 8006a06:	602c      	str	r4, [r5, #0]
 8006a08:	e7ec      	b.n	80069e4 <_free_r+0x28>
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	b10b      	cbz	r3, 8006a14 <_free_r+0x58>
 8006a10:	42a3      	cmp	r3, r4
 8006a12:	d9fa      	bls.n	8006a0a <_free_r+0x4e>
 8006a14:	6811      	ldr	r1, [r2, #0]
 8006a16:	1855      	adds	r5, r2, r1
 8006a18:	42a5      	cmp	r5, r4
 8006a1a:	d10b      	bne.n	8006a34 <_free_r+0x78>
 8006a1c:	6824      	ldr	r4, [r4, #0]
 8006a1e:	4421      	add	r1, r4
 8006a20:	1854      	adds	r4, r2, r1
 8006a22:	42a3      	cmp	r3, r4
 8006a24:	6011      	str	r1, [r2, #0]
 8006a26:	d1dd      	bne.n	80069e4 <_free_r+0x28>
 8006a28:	681c      	ldr	r4, [r3, #0]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	6053      	str	r3, [r2, #4]
 8006a2e:	4421      	add	r1, r4
 8006a30:	6011      	str	r1, [r2, #0]
 8006a32:	e7d7      	b.n	80069e4 <_free_r+0x28>
 8006a34:	d902      	bls.n	8006a3c <_free_r+0x80>
 8006a36:	230c      	movs	r3, #12
 8006a38:	6003      	str	r3, [r0, #0]
 8006a3a:	e7d3      	b.n	80069e4 <_free_r+0x28>
 8006a3c:	6825      	ldr	r5, [r4, #0]
 8006a3e:	1961      	adds	r1, r4, r5
 8006a40:	428b      	cmp	r3, r1
 8006a42:	bf04      	itt	eq
 8006a44:	6819      	ldreq	r1, [r3, #0]
 8006a46:	685b      	ldreq	r3, [r3, #4]
 8006a48:	6063      	str	r3, [r4, #4]
 8006a4a:	bf04      	itt	eq
 8006a4c:	1949      	addeq	r1, r1, r5
 8006a4e:	6021      	streq	r1, [r4, #0]
 8006a50:	6054      	str	r4, [r2, #4]
 8006a52:	e7c7      	b.n	80069e4 <_free_r+0x28>
 8006a54:	b003      	add	sp, #12
 8006a56:	bd30      	pop	{r4, r5, pc}
 8006a58:	200000fc 	.word	0x200000fc

08006a5c <_malloc_r>:
 8006a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a5e:	1ccd      	adds	r5, r1, #3
 8006a60:	f025 0503 	bic.w	r5, r5, #3
 8006a64:	3508      	adds	r5, #8
 8006a66:	2d0c      	cmp	r5, #12
 8006a68:	bf38      	it	cc
 8006a6a:	250c      	movcc	r5, #12
 8006a6c:	2d00      	cmp	r5, #0
 8006a6e:	4606      	mov	r6, r0
 8006a70:	db01      	blt.n	8006a76 <_malloc_r+0x1a>
 8006a72:	42a9      	cmp	r1, r5
 8006a74:	d903      	bls.n	8006a7e <_malloc_r+0x22>
 8006a76:	230c      	movs	r3, #12
 8006a78:	6033      	str	r3, [r6, #0]
 8006a7a:	2000      	movs	r0, #0
 8006a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a7e:	f000 f87d 	bl	8006b7c <__malloc_lock>
 8006a82:	4921      	ldr	r1, [pc, #132]	; (8006b08 <_malloc_r+0xac>)
 8006a84:	680a      	ldr	r2, [r1, #0]
 8006a86:	4614      	mov	r4, r2
 8006a88:	b99c      	cbnz	r4, 8006ab2 <_malloc_r+0x56>
 8006a8a:	4f20      	ldr	r7, [pc, #128]	; (8006b0c <_malloc_r+0xb0>)
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	b923      	cbnz	r3, 8006a9a <_malloc_r+0x3e>
 8006a90:	4621      	mov	r1, r4
 8006a92:	4630      	mov	r0, r6
 8006a94:	f000 f862 	bl	8006b5c <_sbrk_r>
 8006a98:	6038      	str	r0, [r7, #0]
 8006a9a:	4629      	mov	r1, r5
 8006a9c:	4630      	mov	r0, r6
 8006a9e:	f000 f85d 	bl	8006b5c <_sbrk_r>
 8006aa2:	1c43      	adds	r3, r0, #1
 8006aa4:	d123      	bne.n	8006aee <_malloc_r+0x92>
 8006aa6:	230c      	movs	r3, #12
 8006aa8:	6033      	str	r3, [r6, #0]
 8006aaa:	4630      	mov	r0, r6
 8006aac:	f000 f86c 	bl	8006b88 <__malloc_unlock>
 8006ab0:	e7e3      	b.n	8006a7a <_malloc_r+0x1e>
 8006ab2:	6823      	ldr	r3, [r4, #0]
 8006ab4:	1b5b      	subs	r3, r3, r5
 8006ab6:	d417      	bmi.n	8006ae8 <_malloc_r+0x8c>
 8006ab8:	2b0b      	cmp	r3, #11
 8006aba:	d903      	bls.n	8006ac4 <_malloc_r+0x68>
 8006abc:	6023      	str	r3, [r4, #0]
 8006abe:	441c      	add	r4, r3
 8006ac0:	6025      	str	r5, [r4, #0]
 8006ac2:	e004      	b.n	8006ace <_malloc_r+0x72>
 8006ac4:	6863      	ldr	r3, [r4, #4]
 8006ac6:	42a2      	cmp	r2, r4
 8006ac8:	bf0c      	ite	eq
 8006aca:	600b      	streq	r3, [r1, #0]
 8006acc:	6053      	strne	r3, [r2, #4]
 8006ace:	4630      	mov	r0, r6
 8006ad0:	f000 f85a 	bl	8006b88 <__malloc_unlock>
 8006ad4:	f104 000b 	add.w	r0, r4, #11
 8006ad8:	1d23      	adds	r3, r4, #4
 8006ada:	f020 0007 	bic.w	r0, r0, #7
 8006ade:	1ac2      	subs	r2, r0, r3
 8006ae0:	d0cc      	beq.n	8006a7c <_malloc_r+0x20>
 8006ae2:	1a1b      	subs	r3, r3, r0
 8006ae4:	50a3      	str	r3, [r4, r2]
 8006ae6:	e7c9      	b.n	8006a7c <_malloc_r+0x20>
 8006ae8:	4622      	mov	r2, r4
 8006aea:	6864      	ldr	r4, [r4, #4]
 8006aec:	e7cc      	b.n	8006a88 <_malloc_r+0x2c>
 8006aee:	1cc4      	adds	r4, r0, #3
 8006af0:	f024 0403 	bic.w	r4, r4, #3
 8006af4:	42a0      	cmp	r0, r4
 8006af6:	d0e3      	beq.n	8006ac0 <_malloc_r+0x64>
 8006af8:	1a21      	subs	r1, r4, r0
 8006afa:	4630      	mov	r0, r6
 8006afc:	f000 f82e 	bl	8006b5c <_sbrk_r>
 8006b00:	3001      	adds	r0, #1
 8006b02:	d1dd      	bne.n	8006ac0 <_malloc_r+0x64>
 8006b04:	e7cf      	b.n	8006aa6 <_malloc_r+0x4a>
 8006b06:	bf00      	nop
 8006b08:	200000fc 	.word	0x200000fc
 8006b0c:	20000100 	.word	0x20000100

08006b10 <_realloc_r>:
 8006b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b12:	4607      	mov	r7, r0
 8006b14:	4614      	mov	r4, r2
 8006b16:	460e      	mov	r6, r1
 8006b18:	b921      	cbnz	r1, 8006b24 <_realloc_r+0x14>
 8006b1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006b1e:	4611      	mov	r1, r2
 8006b20:	f7ff bf9c 	b.w	8006a5c <_malloc_r>
 8006b24:	b922      	cbnz	r2, 8006b30 <_realloc_r+0x20>
 8006b26:	f7ff ff49 	bl	80069bc <_free_r>
 8006b2a:	4625      	mov	r5, r4
 8006b2c:	4628      	mov	r0, r5
 8006b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b30:	f000 f830 	bl	8006b94 <_malloc_usable_size_r>
 8006b34:	42a0      	cmp	r0, r4
 8006b36:	d20f      	bcs.n	8006b58 <_realloc_r+0x48>
 8006b38:	4621      	mov	r1, r4
 8006b3a:	4638      	mov	r0, r7
 8006b3c:	f7ff ff8e 	bl	8006a5c <_malloc_r>
 8006b40:	4605      	mov	r5, r0
 8006b42:	2800      	cmp	r0, #0
 8006b44:	d0f2      	beq.n	8006b2c <_realloc_r+0x1c>
 8006b46:	4631      	mov	r1, r6
 8006b48:	4622      	mov	r2, r4
 8006b4a:	f7ff ff0f 	bl	800696c <memcpy>
 8006b4e:	4631      	mov	r1, r6
 8006b50:	4638      	mov	r0, r7
 8006b52:	f7ff ff33 	bl	80069bc <_free_r>
 8006b56:	e7e9      	b.n	8006b2c <_realloc_r+0x1c>
 8006b58:	4635      	mov	r5, r6
 8006b5a:	e7e7      	b.n	8006b2c <_realloc_r+0x1c>

08006b5c <_sbrk_r>:
 8006b5c:	b538      	push	{r3, r4, r5, lr}
 8006b5e:	4d06      	ldr	r5, [pc, #24]	; (8006b78 <_sbrk_r+0x1c>)
 8006b60:	2300      	movs	r3, #0
 8006b62:	4604      	mov	r4, r0
 8006b64:	4608      	mov	r0, r1
 8006b66:	602b      	str	r3, [r5, #0]
 8006b68:	f7fa fdc2 	bl	80016f0 <_sbrk>
 8006b6c:	1c43      	adds	r3, r0, #1
 8006b6e:	d102      	bne.n	8006b76 <_sbrk_r+0x1a>
 8006b70:	682b      	ldr	r3, [r5, #0]
 8006b72:	b103      	cbz	r3, 8006b76 <_sbrk_r+0x1a>
 8006b74:	6023      	str	r3, [r4, #0]
 8006b76:	bd38      	pop	{r3, r4, r5, pc}
 8006b78:	20000858 	.word	0x20000858

08006b7c <__malloc_lock>:
 8006b7c:	4801      	ldr	r0, [pc, #4]	; (8006b84 <__malloc_lock+0x8>)
 8006b7e:	f000 b811 	b.w	8006ba4 <__retarget_lock_acquire_recursive>
 8006b82:	bf00      	nop
 8006b84:	20000860 	.word	0x20000860

08006b88 <__malloc_unlock>:
 8006b88:	4801      	ldr	r0, [pc, #4]	; (8006b90 <__malloc_unlock+0x8>)
 8006b8a:	f000 b80c 	b.w	8006ba6 <__retarget_lock_release_recursive>
 8006b8e:	bf00      	nop
 8006b90:	20000860 	.word	0x20000860

08006b94 <_malloc_usable_size_r>:
 8006b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b98:	1f18      	subs	r0, r3, #4
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	bfbc      	itt	lt
 8006b9e:	580b      	ldrlt	r3, [r1, r0]
 8006ba0:	18c0      	addlt	r0, r0, r3
 8006ba2:	4770      	bx	lr

08006ba4 <__retarget_lock_acquire_recursive>:
 8006ba4:	4770      	bx	lr

08006ba6 <__retarget_lock_release_recursive>:
 8006ba6:	4770      	bx	lr

08006ba8 <_init>:
 8006ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006baa:	bf00      	nop
 8006bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bae:	bc08      	pop	{r3}
 8006bb0:	469e      	mov	lr, r3
 8006bb2:	4770      	bx	lr

08006bb4 <_fini>:
 8006bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bb6:	bf00      	nop
 8006bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bba:	bc08      	pop	{r3}
 8006bbc:	469e      	mov	lr, r3
 8006bbe:	4770      	bx	lr

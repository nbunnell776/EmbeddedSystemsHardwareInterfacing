
UCSD-Embedded-HW-Interfacing-SPI-Nathan-Bunnell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08006384  08006384  00016384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800650c  0800650c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800650c  0800650c  0001650c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006514  08006514  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006514  08006514  00016514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006518  08006518  00016518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800651c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000698  20000070  0800658c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000708  0800658c  00020708  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017238  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ea8  00000000  00000000  000372d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  0003a180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001280  00000000  00000000  0003b528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000283bf  00000000  00000000  0003c7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c8d  00000000  00000000  00064b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f41c2  00000000  00000000  000797f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016d9b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056e8  00000000  00000000  0016da0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800636c 	.word	0x0800636c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800636c 	.word	0x0800636c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <do_qspi_status>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void do_qspi_status(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b09a      	sub	sp, #104	; 0x68
 800057c:	af00      	add	r7, sp, #0
	uint8_t status = BSP_QSPI_GetStatus();
 800057e:	f000 ff99 	bl	80014b4 <BSP_QSPI_GetStatus>
 8000582:	4603      	mov	r3, r0
 8000584:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	char buffer[100];
	snprintf(buffer, sizeof(buffer), "QSPI status: %d\r\n", status);
 8000588:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800058c:	4638      	mov	r0, r7
 800058e:	4a0a      	ldr	r2, [pc, #40]	; (80005b8 <do_qspi_status+0x40>)
 8000590:	2164      	movs	r1, #100	; 0x64
 8000592:	f005 fab7 	bl	8005b04 <sniprintf>

	HAL_UART_Transmit(&huart1, (uint8_t *) buffer, strlen(buffer), 1000);
 8000596:	463b      	mov	r3, r7
 8000598:	4618      	mov	r0, r3
 800059a:	f7ff fe19 	bl	80001d0 <strlen>
 800059e:	4603      	mov	r3, r0
 80005a0:	b29a      	uxth	r2, r3
 80005a2:	4639      	mov	r1, r7
 80005a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a8:	4804      	ldr	r0, [pc, #16]	; (80005bc <do_qspi_status+0x44>)
 80005aa:	f004 faac 	bl	8004b06 <HAL_UART_Transmit>
}
 80005ae:	bf00      	nop
 80005b0:	3768      	adds	r7, #104	; 0x68
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	08006384 	.word	0x08006384
 80005bc:	200005e8 	.word	0x200005e8

080005c0 <do_qspi_info>:

void do_qspi_info(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b0a0      	sub	sp, #128	; 0x80
 80005c4:	af02      	add	r7, sp, #8
	QSPI_Info info = {0};
 80005c6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
 80005d4:	611a      	str	r2, [r3, #16]

	BSP_QSPI_GetInfo(&info);
 80005d6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 ffd4 	bl	8001588 <BSP_QSPI_GetInfo>

	char buffer[100];
	snprintf(buffer, sizeof(buffer), "Flash size: %lu\r\n"
 80005e0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80005e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80005e4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80005e6:	4638      	mov	r0, r7
 80005e8:	9201      	str	r2, [sp, #4]
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	460b      	mov	r3, r1
 80005ee:	4a0a      	ldr	r2, [pc, #40]	; (8000618 <do_qspi_info+0x58>)
 80005f0:	2164      	movs	r1, #100	; 0x64
 80005f2:	f005 fa87 	bl	8005b04 <sniprintf>
			"Prog Page Size: %lu\r\n",
			info.FlashSize,
			info.EraseSectorSize,
			info.ProgPageSize);

	HAL_UART_Transmit(&huart1, (uint8_t *) buffer, strlen(buffer), 1000);
 80005f6:	463b      	mov	r3, r7
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff fde9 	bl	80001d0 <strlen>
 80005fe:	4603      	mov	r3, r0
 8000600:	b29a      	uxth	r2, r3
 8000602:	4639      	mov	r1, r7
 8000604:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000608:	4804      	ldr	r0, [pc, #16]	; (800061c <do_qspi_info+0x5c>)
 800060a:	f004 fa7c 	bl	8004b06 <HAL_UART_Transmit>
}
 800060e:	bf00      	nop
 8000610:	3778      	adds	r7, #120	; 0x78
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	08006398 	.word	0x08006398
 800061c:	200005e8 	.word	0x200005e8

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000626:	f001 fa4b 	bl	8001ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062a:	f000 f879 	bl	8000720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062e:	f000 fa45 	bl	8000abc <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000632:	f000 f919 	bl	8000868 <MX_DFSDM1_Init>
  MX_QUADSPI_Init();
 8000636:	f000 f94f 	bl	80008d8 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800063a:	f000 f973 	bl	8000924 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800063e:	f000 f9af 	bl	80009a0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000642:	f000 f9dd 	bl	8000a00 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000646:	f000 fa0b 	bl	8000a60 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  BSP_QSPI_Init();
 800064a:	f000 fec7 	bl	80013dc <BSP_QSPI_Init>

  // Header info for CLI
  char* cliHeader = "\nsimpleCLI Interface v0.3\n------------------------------\n";
 800064e:	4b2e      	ldr	r3, [pc, #184]	; (8000708 <main+0xe8>)
 8000650:	60fb      	str	r3, [r7, #12]
  HAL_UART_Transmit(&huart1, (uint8_t*) cliHeader, strlen(cliHeader), 1000);
 8000652:	68f8      	ldr	r0, [r7, #12]
 8000654:	f7ff fdbc 	bl	80001d0 <strlen>
 8000658:	4603      	mov	r3, r0
 800065a:	b29a      	uxth	r2, r3
 800065c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000660:	68f9      	ldr	r1, [r7, #12]
 8000662:	482a      	ldr	r0, [pc, #168]	; (800070c <main+0xec>)
 8000664:	f004 fa4f 	bl	8004b06 <HAL_UART_Transmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Define strings to structure prompt around
	  char* cliPrompt = "Options:\n\t1: Get QSPI status\n\t2: Get QSPI info\n\t\r\n$> ";
 8000668:	4b29      	ldr	r3, [pc, #164]	; (8000710 <main+0xf0>)
 800066a:	60bb      	str	r3, [r7, #8]
	  char* cliResponse = "Invalid input!\r\n";
 800066c:	4b29      	ldr	r3, [pc, #164]	; (8000714 <main+0xf4>)
 800066e:	607b      	str	r3, [r7, #4]

	  // Issue prompt
	  HAL_UART_Transmit(&huart1, (uint8_t*) cliPrompt, strlen(cliPrompt), 1000);
 8000670:	68b8      	ldr	r0, [r7, #8]
 8000672:	f7ff fdad 	bl	80001d0 <strlen>
 8000676:	4603      	mov	r3, r0
 8000678:	b29a      	uxth	r2, r3
 800067a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800067e:	68b9      	ldr	r1, [r7, #8]
 8000680:	4822      	ldr	r0, [pc, #136]	; (800070c <main+0xec>)
 8000682:	f004 fa40 	bl	8004b06 <HAL_UART_Transmit>

	  // Get the user selection and echo it on the terminal
	  char cliInput;
	  HAL_UART_Receive(&huart1, (uint8_t*) &cliInput, 1, HAL_MAX_DELAY);
 8000686:	1cf9      	adds	r1, r7, #3
 8000688:	f04f 33ff 	mov.w	r3, #4294967295
 800068c:	2201      	movs	r2, #1
 800068e:	481f      	ldr	r0, [pc, #124]	; (800070c <main+0xec>)
 8000690:	f004 facd 	bl	8004c2e <HAL_UART_Receive>
	  HAL_UART_Transmit(&huart1, (uint8_t*) &cliInput, 1, 1000);
 8000694:	1cf9      	adds	r1, r7, #3
 8000696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800069a:	2201      	movs	r2, #1
 800069c:	481b      	ldr	r0, [pc, #108]	; (800070c <main+0xec>)
 800069e:	f004 fa32 	bl	8004b06 <HAL_UART_Transmit>

	  // Evaluate input
	  switch (cliInput)
 80006a2:	78fb      	ldrb	r3, [r7, #3]
 80006a4:	2b31      	cmp	r3, #49	; 0x31
 80006a6:	d002      	beq.n	80006ae <main+0x8e>
 80006a8:	2b32      	cmp	r3, #50	; 0x32
 80006aa:	d010      	beq.n	80006ce <main+0xae>
 80006ac:	e01f      	b.n	80006ee <main+0xce>
	  {
		case '1':
			cliResponse = "\r\nQSPI status request:\n";
 80006ae:	4b1a      	ldr	r3, [pc, #104]	; (8000718 <main+0xf8>)
 80006b0:	607b      	str	r3, [r7, #4]
			HAL_UART_Transmit(&huart1, (uint8_t*) cliResponse, strlen(cliResponse), 1000);
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f7ff fd8c 	bl	80001d0 <strlen>
 80006b8:	4603      	mov	r3, r0
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c0:	6879      	ldr	r1, [r7, #4]
 80006c2:	4812      	ldr	r0, [pc, #72]	; (800070c <main+0xec>)
 80006c4:	f004 fa1f 	bl	8004b06 <HAL_UART_Transmit>
			do_qspi_status();
 80006c8:	f7ff ff56 	bl	8000578 <do_qspi_status>
			break;
 80006cc:	e01b      	b.n	8000706 <main+0xe6>

		case '2':
			cliResponse = "\r\nQSPI info request:\n";
 80006ce:	4b13      	ldr	r3, [pc, #76]	; (800071c <main+0xfc>)
 80006d0:	607b      	str	r3, [r7, #4]
			HAL_UART_Transmit(&huart1, (uint8_t*) cliResponse, strlen(cliResponse), 1000);
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f7ff fd7c 	bl	80001d0 <strlen>
 80006d8:	4603      	mov	r3, r0
 80006da:	b29a      	uxth	r2, r3
 80006dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e0:	6879      	ldr	r1, [r7, #4]
 80006e2:	480a      	ldr	r0, [pc, #40]	; (800070c <main+0xec>)
 80006e4:	f004 fa0f 	bl	8004b06 <HAL_UART_Transmit>
			do_qspi_info();
 80006e8:	f7ff ff6a 	bl	80005c0 <do_qspi_info>
			break;
 80006ec:	e00b      	b.n	8000706 <main+0xe6>

		default:
			HAL_UART_Transmit(&huart1, (uint8_t*) cliResponse, strlen(cliResponse), 1000);
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f7ff fd6e 	bl	80001d0 <strlen>
 80006f4:	4603      	mov	r3, r0
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006fc:	6879      	ldr	r1, [r7, #4]
 80006fe:	4803      	ldr	r0, [pc, #12]	; (800070c <main+0xec>)
 8000700:	f004 fa01 	bl	8004b06 <HAL_UART_Transmit>
			break;
 8000704:	bf00      	nop
  {
 8000706:	e7af      	b.n	8000668 <main+0x48>
 8000708:	080063d8 	.word	0x080063d8
 800070c:	200005e8 	.word	0x200005e8
 8000710:	08006414 	.word	0x08006414
 8000714:	0800644c 	.word	0x0800644c
 8000718:	08006460 	.word	0x08006460
 800071c:	08006478 	.word	0x08006478

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b0b8      	sub	sp, #224	; 0xe0
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800072a:	2244      	movs	r2, #68	; 0x44
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f005 f9e0 	bl	8005af4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000744:	463b      	mov	r3, r7
 8000746:	2288      	movs	r2, #136	; 0x88
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f005 f9d2 	bl	8005af4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000750:	f002 f8cc 	bl	80028ec <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000754:	4b42      	ldr	r3, [pc, #264]	; (8000860 <SystemClock_Config+0x140>)
 8000756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800075a:	4a41      	ldr	r2, [pc, #260]	; (8000860 <SystemClock_Config+0x140>)
 800075c:	f023 0318 	bic.w	r3, r3, #24
 8000760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000764:	2314      	movs	r3, #20
 8000766:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800076a:	2301      	movs	r3, #1
 800076c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000770:	2301      	movs	r3, #1
 8000772:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800077c:	2360      	movs	r3, #96	; 0x60
 800077e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000782:	2302      	movs	r3, #2
 8000784:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000788:	2301      	movs	r3, #1
 800078a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800078e:	2301      	movs	r3, #1
 8000790:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000794:	2328      	movs	r3, #40	; 0x28
 8000796:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800079a:	2307      	movs	r3, #7
 800079c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007a6:	2302      	movs	r3, #2
 80007a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007b0:	4618      	mov	r0, r3
 80007b2:	f002 fdff 	bl	80033b4 <HAL_RCC_OscConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80007bc:	f000 fb2e 	bl	8000e1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c0:	230f      	movs	r3, #15
 80007c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c6:	2303      	movs	r3, #3
 80007c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007de:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80007e2:	2104      	movs	r1, #4
 80007e4:	4618      	mov	r0, r3
 80007e6:	f003 f9cb 	bl	8003b80 <HAL_RCC_ClockConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007f0:	f000 fb14 	bl	8000e1c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 80007f4:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <SystemClock_Config+0x144>)
 80007f6:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80007f8:	2300      	movs	r3, #0
 80007fa:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000800:	2300      	movs	r3, #0
 8000802:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000804:	2300      	movs	r3, #0
 8000806:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800080a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800080e:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000810:	2301      	movs	r3, #1
 8000812:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000814:	2301      	movs	r3, #1
 8000816:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000818:	2318      	movs	r3, #24
 800081a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800081c:	2307      	movs	r3, #7
 800081e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000820:	2302      	movs	r3, #2
 8000822:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000824:	2302      	movs	r3, #2
 8000826:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000828:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800082c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800082e:	463b      	mov	r3, r7
 8000830:	4618      	mov	r0, r3
 8000832:	f003 fbab 	bl	8003f8c <HAL_RCCEx_PeriphCLKConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <SystemClock_Config+0x120>
  {
    Error_Handler();
 800083c:	f000 faee 	bl	8000e1c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000840:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000844:	f002 f870 	bl	8002928 <HAL_PWREx_ControlVoltageScaling>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0x132>
  {
    Error_Handler();
 800084e:	f000 fae5 	bl	8000e1c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000852:	f003 fe85 	bl	8004560 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000856:	bf00      	nop
 8000858:	37e0      	adds	r7, #224	; 0xe0
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40021000 	.word	0x40021000
 8000864:	00012085 	.word	0x00012085

08000868 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800086c:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <MX_DFSDM1_Init+0x68>)
 800086e:	4a19      	ldr	r2, [pc, #100]	; (80008d4 <MX_DFSDM1_Init+0x6c>)
 8000870:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000872:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <MX_DFSDM1_Init+0x68>)
 8000874:	2201      	movs	r2, #1
 8000876:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000878:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <MX_DFSDM1_Init+0x68>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800087e:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_DFSDM1_Init+0x68>)
 8000880:	2202      	movs	r2, #2
 8000882:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <MX_DFSDM1_Init+0x68>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_DFSDM1_Init+0x68>)
 800088c:	2200      	movs	r2, #0
 800088e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_DFSDM1_Init+0x68>)
 8000892:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000896:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000898:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <MX_DFSDM1_Init+0x68>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800089e:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_DFSDM1_Init+0x68>)
 80008a0:	2204      	movs	r2, #4
 80008a2:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80008a4:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <MX_DFSDM1_Init+0x68>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_DFSDM1_Init+0x68>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80008b0:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <MX_DFSDM1_Init+0x68>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_DFSDM1_Init+0x68>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80008bc:	4804      	ldr	r0, [pc, #16]	; (80008d0 <MX_DFSDM1_Init+0x68>)
 80008be:	f001 faa9 	bl	8001e14 <HAL_DFSDM_ChannelInit>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80008c8:	f000 faa8 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	200000c0 	.word	0x200000c0
 80008d4:	40016020 	.word	0x40016020

080008d8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_QUADSPI_Init+0x44>)
 80008de:	4a10      	ldr	r2, [pc, #64]	; (8000920 <MX_QUADSPI_Init+0x48>)
 80008e0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_QUADSPI_Init+0x44>)
 80008e4:	2202      	movs	r2, #2
 80008e6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_QUADSPI_Init+0x44>)
 80008ea:	2204      	movs	r2, #4
 80008ec:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <MX_QUADSPI_Init+0x44>)
 80008f0:	2210      	movs	r2, #16
 80008f2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_QUADSPI_Init+0x44>)
 80008f6:	2217      	movs	r2, #23
 80008f8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <MX_QUADSPI_Init+0x44>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_QUADSPI_Init+0x44>)
 8000902:	2200      	movs	r2, #0
 8000904:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_QUADSPI_Init+0x44>)
 8000908:	f002 f874 	bl	80029f4 <HAL_QSPI_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000912:	f000 fa83 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	2000066c 	.word	0x2000066c
 8000920:	a0001000 	.word	0xa0001000

08000924 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000928:	4b1b      	ldr	r3, [pc, #108]	; (8000998 <MX_SPI3_Init+0x74>)
 800092a:	4a1c      	ldr	r2, [pc, #112]	; (800099c <MX_SPI3_Init+0x78>)
 800092c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800092e:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MX_SPI3_Init+0x74>)
 8000930:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000934:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000936:	4b18      	ldr	r3, [pc, #96]	; (8000998 <MX_SPI3_Init+0x74>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800093c:	4b16      	ldr	r3, [pc, #88]	; (8000998 <MX_SPI3_Init+0x74>)
 800093e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000942:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_SPI3_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800094a:	4b13      	ldr	r3, [pc, #76]	; (8000998 <MX_SPI3_Init+0x74>)
 800094c:	2200      	movs	r2, #0
 800094e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_SPI3_Init+0x74>)
 8000952:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000956:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_SPI3_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_SPI3_Init+0x74>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_SPI3_Init+0x74>)
 8000966:	2200      	movs	r2, #0
 8000968:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <MX_SPI3_Init+0x74>)
 800096c:	2200      	movs	r2, #0
 800096e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_SPI3_Init+0x74>)
 8000972:	2207      	movs	r2, #7
 8000974:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <MX_SPI3_Init+0x74>)
 8000978:	2200      	movs	r2, #0
 800097a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_SPI3_Init+0x74>)
 800097e:	2208      	movs	r2, #8
 8000980:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_SPI3_Init+0x74>)
 8000984:	f003 ffce 	bl	8004924 <HAL_SPI_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800098e:	f000 fa45 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000584 	.word	0x20000584
 800099c:	40003c00 	.word	0x40003c00

080009a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_USART1_UART_Init+0x58>)
 80009a6:	4a15      	ldr	r2, [pc, #84]	; (80009fc <MX_USART1_UART_Init+0x5c>)
 80009a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009aa:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <MX_USART1_UART_Init+0x58>)
 80009ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_USART1_UART_Init+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <MX_USART1_UART_Init+0x58>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_USART1_UART_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_USART1_UART_Init+0x58>)
 80009c6:	220c      	movs	r2, #12
 80009c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <MX_USART1_UART_Init+0x58>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_USART1_UART_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <MX_USART1_UART_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_USART1_UART_Init+0x58>)
 80009de:	2200      	movs	r2, #0
 80009e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_USART1_UART_Init+0x58>)
 80009e4:	f004 f841 	bl	8004a6a <HAL_UART_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009ee:	f000 fa15 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200005e8 	.word	0x200005e8
 80009fc:	40013800 	.word	0x40013800

08000a00 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a04:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <MX_USART3_UART_Init+0x58>)
 8000a06:	4a15      	ldr	r2, [pc, #84]	; (8000a5c <MX_USART3_UART_Init+0x5c>)
 8000a08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a0a:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <MX_USART3_UART_Init+0x58>)
 8000a0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_USART3_UART_Init+0x58>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <MX_USART3_UART_Init+0x58>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <MX_USART3_UART_Init+0x58>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <MX_USART3_UART_Init+0x58>)
 8000a26:	220c      	movs	r2, #12
 8000a28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <MX_USART3_UART_Init+0x58>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_USART3_UART_Init+0x58>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <MX_USART3_UART_Init+0x58>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_USART3_UART_Init+0x58>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_USART3_UART_Init+0x58>)
 8000a44:	f004 f811 	bl	8004a6a <HAL_UART_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a4e:	f000 f9e5 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200000f8 	.word	0x200000f8
 8000a5c:	40004800 	.word	0x40004800

08000a60 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a66:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a6a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a6e:	2206      	movs	r2, #6
 8000a70:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a74:	2202      	movs	r2, #2
 8000a76:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a7a:	2202      	movs	r2, #2
 8000a7c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa4:	f001 fdd9 	bl	800265a <HAL_PCD_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000aae:	f000 f9b5 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	2000017c 	.word	0x2000017c

08000abc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	; 0x28
 8000ac0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ad2:	4bba      	ldr	r3, [pc, #744]	; (8000dbc <MX_GPIO_Init+0x300>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	4ab9      	ldr	r2, [pc, #740]	; (8000dbc <MX_GPIO_Init+0x300>)
 8000ad8:	f043 0310 	orr.w	r3, r3, #16
 8000adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ade:	4bb7      	ldr	r3, [pc, #732]	; (8000dbc <MX_GPIO_Init+0x300>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae2:	f003 0310 	and.w	r3, r3, #16
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aea:	4bb4      	ldr	r3, [pc, #720]	; (8000dbc <MX_GPIO_Init+0x300>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aee:	4ab3      	ldr	r2, [pc, #716]	; (8000dbc <MX_GPIO_Init+0x300>)
 8000af0:	f043 0304 	orr.w	r3, r3, #4
 8000af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af6:	4bb1      	ldr	r3, [pc, #708]	; (8000dbc <MX_GPIO_Init+0x300>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	f003 0304 	and.w	r3, r3, #4
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	4bae      	ldr	r3, [pc, #696]	; (8000dbc <MX_GPIO_Init+0x300>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b06:	4aad      	ldr	r2, [pc, #692]	; (8000dbc <MX_GPIO_Init+0x300>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0e:	4bab      	ldr	r3, [pc, #684]	; (8000dbc <MX_GPIO_Init+0x300>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1a:	4ba8      	ldr	r3, [pc, #672]	; (8000dbc <MX_GPIO_Init+0x300>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1e:	4aa7      	ldr	r2, [pc, #668]	; (8000dbc <MX_GPIO_Init+0x300>)
 8000b20:	f043 0302 	orr.w	r3, r3, #2
 8000b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b26:	4ba5      	ldr	r3, [pc, #660]	; (8000dbc <MX_GPIO_Init+0x300>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b32:	4ba2      	ldr	r3, [pc, #648]	; (8000dbc <MX_GPIO_Init+0x300>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b36:	4aa1      	ldr	r2, [pc, #644]	; (8000dbc <MX_GPIO_Init+0x300>)
 8000b38:	f043 0308 	orr.w	r3, r3, #8
 8000b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3e:	4b9f      	ldr	r3, [pc, #636]	; (8000dbc <MX_GPIO_Init+0x300>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b42:	f003 0308 	and.w	r3, r3, #8
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000b50:	489b      	ldr	r0, [pc, #620]	; (8000dc0 <MX_GPIO_Init+0x304>)
 8000b52:	f001 fd47 	bl	80025e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	f248 1104 	movw	r1, #33028	; 0x8104
 8000b5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b60:	f001 fd40 	bl	80025e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000b64:	2200      	movs	r2, #0
 8000b66:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000b6a:	4896      	ldr	r0, [pc, #600]	; (8000dc4 <MX_GPIO_Init+0x308>)
 8000b6c:	f001 fd3a 	bl	80025e4 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	f241 0181 	movw	r1, #4225	; 0x1081
 8000b76:	4894      	ldr	r0, [pc, #592]	; (8000dc8 <MX_GPIO_Init+0x30c>)
 8000b78:	f001 fd34 	bl	80025e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b82:	4891      	ldr	r0, [pc, #580]	; (8000dc8 <MX_GPIO_Init+0x30c>)
 8000b84:	f001 fd2e 	bl	80025e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000b8e:	488f      	ldr	r0, [pc, #572]	; (8000dcc <MX_GPIO_Init+0x310>)
 8000b90:	f001 fd28 	bl	80025e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000b94:	2201      	movs	r2, #1
 8000b96:	2120      	movs	r1, #32
 8000b98:	488a      	ldr	r0, [pc, #552]	; (8000dc4 <MX_GPIO_Init+0x308>)
 8000b9a:	f001 fd23 	bl	80025e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	4887      	ldr	r0, [pc, #540]	; (8000dc0 <MX_GPIO_Init+0x304>)
 8000ba4:	f001 fd1e 	bl	80025e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000ba8:	f240 1315 	movw	r3, #277	; 0x115
 8000bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	487f      	ldr	r0, [pc, #508]	; (8000dc0 <MX_GPIO_Init+0x304>)
 8000bc2:	f001 fa71 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000bc6:	236a      	movs	r3, #106	; 0x6a
 8000bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bca:	4b81      	ldr	r3, [pc, #516]	; (8000dd0 <MX_GPIO_Init+0x314>)
 8000bcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4879      	ldr	r0, [pc, #484]	; (8000dc0 <MX_GPIO_Init+0x304>)
 8000bda:	f001 fa65 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000bde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000be4:	4b7b      	ldr	r3, [pc, #492]	; (8000dd4 <MX_GPIO_Init+0x318>)
 8000be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4876      	ldr	r0, [pc, #472]	; (8000dcc <MX_GPIO_Init+0x310>)
 8000bf4:	f001 fa58 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000bf8:	233f      	movs	r3, #63	; 0x3f
 8000bfa:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bfc:	230b      	movs	r3, #11
 8000bfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4870      	ldr	r0, [pc, #448]	; (8000dcc <MX_GPIO_Init+0x310>)
 8000c0c:	f001 fa4c 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000c10:	2303      	movs	r3, #3
 8000c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c20:	2308      	movs	r3, #8
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c2e:	f001 fa3b 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000c32:	f248 1304 	movw	r3, #33028	; 0x8104
 8000c36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c4e:	f001 fa2b 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000c52:	2308      	movs	r3, #8
 8000c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c62:	2301      	movs	r3, #1
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c70:	f001 fa1a 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000c74:	2310      	movs	r3, #16
 8000c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c78:	230b      	movs	r3, #11
 8000c7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	4619      	mov	r1, r3
 8000c86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8a:	f001 fa0d 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000c8e:	23e0      	movs	r3, #224	; 0xe0
 8000c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c92:	2302      	movs	r3, #2
 8000c94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c9e:	2305      	movs	r3, #5
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cac:	f001 f9fc 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cb4:	4b46      	ldr	r3, [pc, #280]	; (8000dd0 <MX_GPIO_Init+0x314>)
 8000cb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4840      	ldr	r0, [pc, #256]	; (8000dc4 <MX_GPIO_Init+0x308>)
 8000cc4:	f001 f9f0 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ccc:	230b      	movs	r3, #11
 8000cce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4619      	mov	r1, r3
 8000cda:	483a      	ldr	r0, [pc, #232]	; (8000dc4 <MX_GPIO_Init+0x308>)
 8000cdc:	f001 f9e4 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000ce0:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000ce4:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4832      	ldr	r0, [pc, #200]	; (8000dc4 <MX_GPIO_Init+0x308>)
 8000cfa:	f001 f9d5 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000cfe:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000d02:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d04:	4b32      	ldr	r3, [pc, #200]	; (8000dd0 <MX_GPIO_Init+0x314>)
 8000d06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	4619      	mov	r1, r3
 8000d12:	482d      	ldr	r0, [pc, #180]	; (8000dc8 <MX_GPIO_Init+0x30c>)
 8000d14:	f001 f9c8 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000d18:	f243 0381 	movw	r3, #12417	; 0x3081
 8000d1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4825      	ldr	r0, [pc, #148]	; (8000dc8 <MX_GPIO_Init+0x30c>)
 8000d32:	f001 f9b9 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000d36:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	481f      	ldr	r0, [pc, #124]	; (8000dcc <MX_GPIO_Init+0x310>)
 8000d50:	f001 f9aa 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000d54:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d5a:	4b1d      	ldr	r3, [pc, #116]	; (8000dd0 <MX_GPIO_Init+0x314>)
 8000d5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	4619      	mov	r1, r3
 8000d68:	4818      	ldr	r0, [pc, #96]	; (8000dcc <MX_GPIO_Init+0x310>)
 8000d6a:	f001 f99d 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d7e:	2305      	movs	r3, #5
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	4619      	mov	r1, r3
 8000d88:	480f      	ldr	r0, [pc, #60]	; (8000dc8 <MX_GPIO_Init+0x30c>)
 8000d8a:	f001 f98d 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000d8e:	2378      	movs	r3, #120	; 0x78
 8000d90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d9e:	2307      	movs	r3, #7
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	4807      	ldr	r0, [pc, #28]	; (8000dc8 <MX_GPIO_Init+0x30c>)
 8000daa:	f001 f97d 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000dae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000db2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000db4:	2312      	movs	r3, #18
 8000db6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	e00d      	b.n	8000dd8 <MX_GPIO_Init+0x31c>
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	48001000 	.word	0x48001000
 8000dc4:	48000400 	.word	0x48000400
 8000dc8:	48000c00 	.word	0x48000c00
 8000dcc:	48000800 	.word	0x48000800
 8000dd0:	10110000 	.word	0x10110000
 8000dd4:	10210000 	.word	0x10210000
 8000dd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dde:	2304      	movs	r3, #4
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	480b      	ldr	r0, [pc, #44]	; (8000e18 <MX_GPIO_Init+0x35c>)
 8000dea:	f001 f95d 	bl	80020a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2100      	movs	r1, #0
 8000df2:	2017      	movs	r0, #23
 8000df4:	f000 ffd7 	bl	8001da6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000df8:	2017      	movs	r0, #23
 8000dfa:	f000 fff0 	bl	8001dde <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2100      	movs	r1, #0
 8000e02:	2028      	movs	r0, #40	; 0x28
 8000e04:	f000 ffcf 	bl	8001da6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e08:	2028      	movs	r0, #40	; 0x28
 8000e0a:	f000 ffe8 	bl	8001dde <HAL_NVIC_EnableIRQ>

}
 8000e0e:	bf00      	nop
 8000e10:	3728      	adds	r7, #40	; 0x28
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	48000400 	.word	0x48000400

08000e1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e20:	b672      	cpsid	i
}
 8000e22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <Error_Handler+0x8>
	...

08000e28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <HAL_MspInit+0x44>)
 8000e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e32:	4a0e      	ldr	r2, [pc, #56]	; (8000e6c <HAL_MspInit+0x44>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6613      	str	r3, [r2, #96]	; 0x60
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <HAL_MspInit+0x44>)
 8000e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e46:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <HAL_MspInit+0x44>)
 8000e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e4a:	4a08      	ldr	r2, [pc, #32]	; (8000e6c <HAL_MspInit+0x44>)
 8000e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e50:	6593      	str	r3, [r2, #88]	; 0x58
 8000e52:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <HAL_MspInit+0x44>)
 8000e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5a:	603b      	str	r3, [r7, #0]
 8000e5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	40021000 	.word	0x40021000

08000e70 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	; 0x28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000e88:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <HAL_DFSDM_ChannelMspInit+0x84>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d12d      	bne.n	8000eec <HAL_DFSDM_ChannelMspInit+0x7c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000e90:	4b19      	ldr	r3, [pc, #100]	; (8000ef8 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000e92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e94:	4a18      	ldr	r2, [pc, #96]	; (8000ef8 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000e96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e9a:	6613      	str	r3, [r2, #96]	; 0x60
 8000e9c:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ea0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ea8:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eac:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000eae:	f043 0310 	orr.w	r3, r3, #16
 8000eb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb4:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb8:	f003 0310 	and.w	r3, r3, #16
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000ec0:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000ed2:	2306      	movs	r3, #6
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	4807      	ldr	r0, [pc, #28]	; (8000efc <HAL_DFSDM_ChannelMspInit+0x8c>)
 8000ede:	f001 f8e3 	bl	80020a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000ee2:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <HAL_DFSDM_ChannelMspInit+0x84>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	4a02      	ldr	r2, [pc, #8]	; (8000ef4 <HAL_DFSDM_ChannelMspInit+0x84>)
 8000eea:	6013      	str	r3, [r2, #0]
  }

}
 8000eec:	bf00      	nop
 8000eee:	3728      	adds	r7, #40	; 0x28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	2000008c 	.word	0x2000008c
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	48001000 	.word	0x48001000

08000f00 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	; 0x28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a17      	ldr	r2, [pc, #92]	; (8000f7c <HAL_QSPI_MspInit+0x7c>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d128      	bne.n	8000f74 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000f22:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <HAL_QSPI_MspInit+0x80>)
 8000f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f26:	4a16      	ldr	r2, [pc, #88]	; (8000f80 <HAL_QSPI_MspInit+0x80>)
 8000f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f2c:	6513      	str	r3, [r2, #80]	; 0x50
 8000f2e:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <HAL_QSPI_MspInit+0x80>)
 8000f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f3a:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <HAL_QSPI_MspInit+0x80>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3e:	4a10      	ldr	r2, [pc, #64]	; (8000f80 <HAL_QSPI_MspInit+0x80>)
 8000f40:	f043 0310 	orr.w	r3, r3, #16
 8000f44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <HAL_QSPI_MspInit+0x80>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4a:	f003 0310 	and.w	r3, r3, #16
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000f52:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000f56:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f60:	2303      	movs	r3, #3
 8000f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000f64:	230a      	movs	r3, #10
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4805      	ldr	r0, [pc, #20]	; (8000f84 <HAL_QSPI_MspInit+0x84>)
 8000f70:	f001 f89a 	bl	80020a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000f74:	bf00      	nop
 8000f76:	3728      	adds	r7, #40	; 0x28
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	a0001000 	.word	0xa0001000
 8000f80:	40021000 	.word	0x40021000
 8000f84:	48001000 	.word	0x48001000

08000f88 <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a08      	ldr	r2, [pc, #32]	; (8000fb8 <HAL_QSPI_MspDeInit+0x30>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d10a      	bne.n	8000fb0 <HAL_QSPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8000f9a:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <HAL_QSPI_MspDeInit+0x34>)
 8000f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f9e:	4a07      	ldr	r2, [pc, #28]	; (8000fbc <HAL_QSPI_MspDeInit+0x34>)
 8000fa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fa4:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000fa6:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <HAL_QSPI_MspDeInit+0x38>)
 8000fac:	f001 fa26 	bl	80023fc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	a0001000 	.word	0xa0001000
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	48001000 	.word	0x48001000

08000fc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	; 0x28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a17      	ldr	r2, [pc, #92]	; (8001040 <HAL_SPI_MspInit+0x7c>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d128      	bne.n	8001038 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fe6:	4b17      	ldr	r3, [pc, #92]	; (8001044 <HAL_SPI_MspInit+0x80>)
 8000fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fea:	4a16      	ldr	r2, [pc, #88]	; (8001044 <HAL_SPI_MspInit+0x80>)
 8000fec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ff0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ff2:	4b14      	ldr	r3, [pc, #80]	; (8001044 <HAL_SPI_MspInit+0x80>)
 8000ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffe:	4b11      	ldr	r3, [pc, #68]	; (8001044 <HAL_SPI_MspInit+0x80>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	4a10      	ldr	r2, [pc, #64]	; (8001044 <HAL_SPI_MspInit+0x80>)
 8001004:	f043 0304 	orr.w	r3, r3, #4
 8001008:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <HAL_SPI_MspInit+0x80>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	f003 0304 	and.w	r3, r3, #4
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001016:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800101a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001024:	2303      	movs	r3, #3
 8001026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001028:	2306      	movs	r3, #6
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4619      	mov	r1, r3
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <HAL_SPI_MspInit+0x84>)
 8001034:	f001 f838 	bl	80020a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001038:	bf00      	nop
 800103a:	3728      	adds	r7, #40	; 0x28
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40003c00 	.word	0x40003c00
 8001044:	40021000 	.word	0x40021000
 8001048:	48000800 	.word	0x48000800

0800104c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08c      	sub	sp, #48	; 0x30
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 031c 	add.w	r3, r7, #28
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a2e      	ldr	r2, [pc, #184]	; (8001124 <HAL_UART_MspInit+0xd8>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d128      	bne.n	80010c0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800106e:	4b2e      	ldr	r3, [pc, #184]	; (8001128 <HAL_UART_MspInit+0xdc>)
 8001070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001072:	4a2d      	ldr	r2, [pc, #180]	; (8001128 <HAL_UART_MspInit+0xdc>)
 8001074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001078:	6613      	str	r3, [r2, #96]	; 0x60
 800107a:	4b2b      	ldr	r3, [pc, #172]	; (8001128 <HAL_UART_MspInit+0xdc>)
 800107c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001082:	61bb      	str	r3, [r7, #24]
 8001084:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001086:	4b28      	ldr	r3, [pc, #160]	; (8001128 <HAL_UART_MspInit+0xdc>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	4a27      	ldr	r2, [pc, #156]	; (8001128 <HAL_UART_MspInit+0xdc>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001092:	4b25      	ldr	r3, [pc, #148]	; (8001128 <HAL_UART_MspInit+0xdc>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800109e:	23c0      	movs	r3, #192	; 0xc0
 80010a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010aa:	2303      	movs	r3, #3
 80010ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010ae:	2307      	movs	r3, #7
 80010b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b2:	f107 031c 	add.w	r3, r7, #28
 80010b6:	4619      	mov	r1, r3
 80010b8:	481c      	ldr	r0, [pc, #112]	; (800112c <HAL_UART_MspInit+0xe0>)
 80010ba:	f000 fff5 	bl	80020a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010be:	e02d      	b.n	800111c <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a1a      	ldr	r2, [pc, #104]	; (8001130 <HAL_UART_MspInit+0xe4>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d128      	bne.n	800111c <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80010ca:	4b17      	ldr	r3, [pc, #92]	; (8001128 <HAL_UART_MspInit+0xdc>)
 80010cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ce:	4a16      	ldr	r2, [pc, #88]	; (8001128 <HAL_UART_MspInit+0xdc>)
 80010d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010d4:	6593      	str	r3, [r2, #88]	; 0x58
 80010d6:	4b14      	ldr	r3, [pc, #80]	; (8001128 <HAL_UART_MspInit+0xdc>)
 80010d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <HAL_UART_MspInit+0xdc>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e6:	4a10      	ldr	r2, [pc, #64]	; (8001128 <HAL_UART_MspInit+0xdc>)
 80010e8:	f043 0308 	orr.w	r3, r3, #8
 80010ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <HAL_UART_MspInit+0xdc>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	f003 0308 	and.w	r3, r3, #8
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80010fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001100:	2302      	movs	r3, #2
 8001102:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001108:	2303      	movs	r3, #3
 800110a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800110c:	2307      	movs	r3, #7
 800110e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001110:	f107 031c 	add.w	r3, r7, #28
 8001114:	4619      	mov	r1, r3
 8001116:	4807      	ldr	r0, [pc, #28]	; (8001134 <HAL_UART_MspInit+0xe8>)
 8001118:	f000 ffc6 	bl	80020a8 <HAL_GPIO_Init>
}
 800111c:	bf00      	nop
 800111e:	3730      	adds	r7, #48	; 0x30
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40013800 	.word	0x40013800
 8001128:	40021000 	.word	0x40021000
 800112c:	48000400 	.word	0x48000400
 8001130:	40004800 	.word	0x40004800
 8001134:	48000c00 	.word	0x48000c00

08001138 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	; 0x28
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001158:	d154      	bne.n	8001204 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115a:	4b2c      	ldr	r3, [pc, #176]	; (800120c <HAL_PCD_MspInit+0xd4>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115e:	4a2b      	ldr	r2, [pc, #172]	; (800120c <HAL_PCD_MspInit+0xd4>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001166:	4b29      	ldr	r3, [pc, #164]	; (800120c <HAL_PCD_MspInit+0xd4>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001172:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001178:	2300      	movs	r3, #0
 800117a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	4619      	mov	r1, r3
 8001186:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800118a:	f000 ff8d 	bl	80020a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800118e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119c:	2303      	movs	r3, #3
 800119e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011a0:	230a      	movs	r3, #10
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	4619      	mov	r1, r3
 80011aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ae:	f000 ff7b 	bl	80020a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80011b2:	4b16      	ldr	r3, [pc, #88]	; (800120c <HAL_PCD_MspInit+0xd4>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b6:	4a15      	ldr	r2, [pc, #84]	; (800120c <HAL_PCD_MspInit+0xd4>)
 80011b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011be:	4b13      	ldr	r3, [pc, #76]	; (800120c <HAL_PCD_MspInit+0xd4>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <HAL_PCD_MspInit+0xd4>)
 80011cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d114      	bne.n	8001200 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011d6:	4b0d      	ldr	r3, [pc, #52]	; (800120c <HAL_PCD_MspInit+0xd4>)
 80011d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011da:	4a0c      	ldr	r2, [pc, #48]	; (800120c <HAL_PCD_MspInit+0xd4>)
 80011dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e0:	6593      	str	r3, [r2, #88]	; 0x58
 80011e2:	4b0a      	ldr	r3, [pc, #40]	; (800120c <HAL_PCD_MspInit+0xd4>)
 80011e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80011ee:	f001 fbf1 	bl	80029d4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_PCD_MspInit+0xd4>)
 80011f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f6:	4a05      	ldr	r2, [pc, #20]	; (800120c <HAL_PCD_MspInit+0xd4>)
 80011f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011fc:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80011fe:	e001      	b.n	8001204 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8001200:	f001 fbe8 	bl	80029d4 <HAL_PWREx_EnableVddUSB>
}
 8001204:	bf00      	nop
 8001206:	3728      	adds	r7, #40	; 0x28
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40021000 	.word	0x40021000

08001210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <NMI_Handler+0x4>

08001216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <HardFault_Handler+0x4>

0800121c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <MemManage_Handler+0x4>

08001222 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <BusFault_Handler+0x4>

08001228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <UsageFault_Handler+0x4>

0800122e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800125c:	f000 fc84 	bl	8001b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}

08001264 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001268:	2020      	movs	r0, #32
 800126a:	f001 f9d3 	bl	8002614 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800126e:	2040      	movs	r0, #64	; 0x40
 8001270:	f001 f9d0 	bl	8002614 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001274:	2080      	movs	r0, #128	; 0x80
 8001276:	f001 f9cd 	bl	8002614 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800127a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800127e:	f001 f9c9 	bl	8002614 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}

08001286 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800128a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800128e:	f001 f9c1 	bl	8002614 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001292:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001296:	f001 f9bd 	bl	8002614 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800129a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800129e:	f001 f9b9 	bl	8002614 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80012a2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80012a6:	f001 f9b5 	bl	8002614 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80012aa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012ae:	f001 f9b1 	bl	8002614 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012c0:	4a14      	ldr	r2, [pc, #80]	; (8001314 <_sbrk+0x5c>)
 80012c2:	4b15      	ldr	r3, [pc, #84]	; (8001318 <_sbrk+0x60>)
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012cc:	4b13      	ldr	r3, [pc, #76]	; (800131c <_sbrk+0x64>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d102      	bne.n	80012da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012d4:	4b11      	ldr	r3, [pc, #68]	; (800131c <_sbrk+0x64>)
 80012d6:	4a12      	ldr	r2, [pc, #72]	; (8001320 <_sbrk+0x68>)
 80012d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012da:	4b10      	ldr	r3, [pc, #64]	; (800131c <_sbrk+0x64>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4413      	add	r3, r2
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d207      	bcs.n	80012f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012e8:	f004 fbcc 	bl	8005a84 <__errno>
 80012ec:	4603      	mov	r3, r0
 80012ee:	220c      	movs	r2, #12
 80012f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012f2:	f04f 33ff 	mov.w	r3, #4294967295
 80012f6:	e009      	b.n	800130c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <_sbrk+0x64>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012fe:	4b07      	ldr	r3, [pc, #28]	; (800131c <_sbrk+0x64>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4413      	add	r3, r2
 8001306:	4a05      	ldr	r2, [pc, #20]	; (800131c <_sbrk+0x64>)
 8001308:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800130a:	68fb      	ldr	r3, [r7, #12]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3718      	adds	r7, #24
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20018000 	.word	0x20018000
 8001318:	00000400 	.word	0x00000400
 800131c:	20000090 	.word	0x20000090
 8001320:	20000708 	.word	0x20000708

08001324 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001328:	4b15      	ldr	r3, [pc, #84]	; (8001380 <SystemInit+0x5c>)
 800132a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800132e:	4a14      	ldr	r2, [pc, #80]	; (8001380 <SystemInit+0x5c>)
 8001330:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001334:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <SystemInit+0x60>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a11      	ldr	r2, [pc, #68]	; (8001384 <SystemInit+0x60>)
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001344:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <SystemInit+0x60>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <SystemInit+0x60>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a0d      	ldr	r2, [pc, #52]	; (8001384 <SystemInit+0x60>)
 8001350:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001354:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001358:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800135a:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <SystemInit+0x60>)
 800135c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001360:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001362:	4b08      	ldr	r3, [pc, #32]	; (8001384 <SystemInit+0x60>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a07      	ldr	r2, [pc, #28]	; (8001384 <SystemInit+0x60>)
 8001368:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800136c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800136e:	4b05      	ldr	r3, [pc, #20]	; (8001384 <SystemInit+0x60>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000ed00 	.word	0xe000ed00
 8001384:	40021000 	.word	0x40021000

08001388 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001388:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800138c:	f7ff ffca 	bl	8001324 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001390:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001392:	e003      	b.n	800139c <LoopCopyDataInit>

08001394 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001394:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001396:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001398:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800139a:	3104      	adds	r1, #4

0800139c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800139c:	480a      	ldr	r0, [pc, #40]	; (80013c8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <LoopForever+0xe>)
	adds	r2, r0, r1
 80013a0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80013a2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80013a4:	d3f6      	bcc.n	8001394 <CopyDataInit>
	ldr	r2, =_sbss
 80013a6:	4a0a      	ldr	r2, [pc, #40]	; (80013d0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80013a8:	e002      	b.n	80013b0 <LoopFillZerobss>

080013aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80013aa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80013ac:	f842 3b04 	str.w	r3, [r2], #4

080013b0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <LoopForever+0x16>)
	cmp	r2, r3
 80013b2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80013b4:	d3f9      	bcc.n	80013aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013b6:	f004 fb6b 	bl	8005a90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013ba:	f7ff f931 	bl	8000620 <main>

080013be <LoopForever>:

LoopForever:
    b LoopForever
 80013be:	e7fe      	b.n	80013be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013c0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80013c4:	0800651c 	.word	0x0800651c
	ldr	r0, =_sdata
 80013c8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80013cc:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80013d0:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80013d4:	20000708 	.word	0x20000708

080013d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013d8:	e7fe      	b.n	80013d8 <ADC1_2_IRQHandler>
	...

080013dc <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 80013e2:	4b32      	ldr	r3, [pc, #200]	; (80014ac <BSP_QSPI_Init+0xd0>)
 80013e4:	4a32      	ldr	r2, [pc, #200]	; (80014b0 <BSP_QSPI_Init+0xd4>)
 80013e6:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 80013e8:	4830      	ldr	r0, [pc, #192]	; (80014ac <BSP_QSPI_Init+0xd0>)
 80013ea:	f001 fb79 	bl	8002ae0 <HAL_QSPI_DeInit>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e054      	b.n	80014a2 <BSP_QSPI_Init+0xc6>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 80013f8:	f000 f8e6 	bl	80015c8 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 2; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 26.67MHz */
 80013fc:	4b2b      	ldr	r3, [pc, #172]	; (80014ac <BSP_QSPI_Init+0xd0>)
 80013fe:	2202      	movs	r2, #2
 8001400:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 8001402:	4b2a      	ldr	r3, [pc, #168]	; (80014ac <BSP_QSPI_Init+0xd0>)
 8001404:	2204      	movs	r2, #4
 8001406:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001408:	4b28      	ldr	r3, [pc, #160]	; (80014ac <BSP_QSPI_Init+0xd0>)
 800140a:	2210      	movs	r2, #16
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001412:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	fa93 f3a3 	rbit	r3, r3
 800141a:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <BSP_QSPI_Init+0x4e>
  {
    return 32U;
 8001426:	2320      	movs	r3, #32
 8001428:	e003      	b.n	8001432 <BSP_QSPI_Init+0x56>
  }
  return __builtin_clz(value);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	fab3 f383 	clz	r3, r3
 8001430:	b2db      	uxtb	r3, r3
  QSPIHandle.Init.FlashSize          = POSITION_VAL(MX25R6435F_FLASH_SIZE) - 1;
 8001432:	3b01      	subs	r3, #1
 8001434:	461a      	mov	r2, r3
 8001436:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <BSP_QSPI_Init+0xd0>)
 8001438:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800143a:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <BSP_QSPI_Init+0xd0>)
 800143c:	2200      	movs	r2, #0
 800143e:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8001440:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <BSP_QSPI_Init+0xd0>)
 8001442:	2200      	movs	r2, #0
 8001444:	619a      	str	r2, [r3, #24]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8001446:	4819      	ldr	r0, [pc, #100]	; (80014ac <BSP_QSPI_Init+0xd0>)
 8001448:	f001 fad4 	bl	80029f4 <HAL_QSPI_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <BSP_QSPI_Init+0x7a>
  {
    return QSPI_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e025      	b.n	80014a2 <BSP_QSPI_Init+0xc6>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 8001456:	4815      	ldr	r0, [pc, #84]	; (80014ac <BSP_QSPI_Init+0xd0>)
 8001458:	f000 f8f6 	bl	8001648 <QSPI_ResetMemory>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <BSP_QSPI_Init+0x8a>
  {
    return QSPI_NOT_SUPPORTED;
 8001462:	2304      	movs	r3, #4
 8001464:	e01d      	b.n	80014a2 <BSP_QSPI_Init+0xc6>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&QSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 8001466:	2101      	movs	r1, #1
 8001468:	4810      	ldr	r0, [pc, #64]	; (80014ac <BSP_QSPI_Init+0xd0>)
 800146a:	f000 f9b7 	bl	80017dc <QSPI_QuadMode>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <BSP_QSPI_Init+0x9c>
  {
    return QSPI_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e014      	b.n	80014a2 <BSP_QSPI_Init+0xc6>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&QSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 8001478:	2101      	movs	r1, #1
 800147a:	480c      	ldr	r0, [pc, #48]	; (80014ac <BSP_QSPI_Init+0xd0>)
 800147c:	f000 fa56 	bl	800192c <QSPI_HighPerfMode>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <BSP_QSPI_Init+0xae>
  {
    return QSPI_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e00b      	b.n	80014a2 <BSP_QSPI_Init+0xc6>
  }
  
  /* Re-configure the clock for the high performance mode */
  QSPIHandle.Init.ClockPrescaler = 1; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 40MHz */
 800148a:	4b08      	ldr	r3, [pc, #32]	; (80014ac <BSP_QSPI_Init+0xd0>)
 800148c:	2201      	movs	r2, #1
 800148e:	605a      	str	r2, [r3, #4]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8001490:	4806      	ldr	r0, [pc, #24]	; (80014ac <BSP_QSPI_Init+0xd0>)
 8001492:	f001 faaf 	bl	80029f4 <HAL_QSPI_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <BSP_QSPI_Init+0xc4>
  {
    return QSPI_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e000      	b.n	80014a2 <BSP_QSPI_Init+0xc6>
  }

  return QSPI_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200006b0 	.word	0x200006b0
 80014b0:	a0001000 	.word	0xa0001000

080014b4 <BSP_QSPI_GetStatus>:
/**
  * @brief  Reads current status of the QSPI memory.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_GetStatus(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b090      	sub	sp, #64	; 0x40
 80014b8:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Initialize the read security register command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80014ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014be:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = READ_SEC_REG_CMD;
 80014c0:	232b      	movs	r3, #43	; 0x2b
 80014c2:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80014c4:	2300      	movs	r3, #0
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 80014cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
  sCommand.NbData            = 1;
 80014d6:	2301      	movs	r3, #1
 80014d8:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80014da:	2300      	movs	r3, #0
 80014dc:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80014de:	2300      	movs	r3, #0
 80014e0:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80014e2:	2300      	movs	r3, #0
 80014e4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80014e6:	f107 0308 	add.w	r3, r7, #8
 80014ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ee:	4619      	mov	r1, r3
 80014f0:	4824      	ldr	r0, [pc, #144]	; (8001584 <BSP_QSPI_GetStatus+0xd0>)
 80014f2:	f001 fb19 	bl	8002b28 <HAL_QSPI_Command>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <BSP_QSPI_GetStatus+0x4c>
  {
    return QSPI_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e03c      	b.n	800157a <BSP_QSPI_GetStatus+0xc6>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001500:	1dfb      	adds	r3, r7, #7
 8001502:	f241 3288 	movw	r2, #5000	; 0x1388
 8001506:	4619      	mov	r1, r3
 8001508:	481e      	ldr	r0, [pc, #120]	; (8001584 <BSP_QSPI_GetStatus+0xd0>)
 800150a:	f001 fc02 	bl	8002d12 <HAL_QSPI_Receive>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <BSP_QSPI_GetStatus+0x64>
  {
    return QSPI_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e030      	b.n	800157a <BSP_QSPI_GetStatus+0xc6>
  }
  
  /* Check the value of the register */
  if ((reg & (MX25R6435F_SECR_P_FAIL | MX25R6435F_SECR_E_FAIL)) != 0)
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <BSP_QSPI_GetStatus+0x72>
  {
    return QSPI_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e029      	b.n	800157a <BSP_QSPI_GetStatus+0xc6>
  }
  else if ((reg & (MX25R6435F_SECR_PSB | MX25R6435F_SECR_ESB)) != 0)
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	f003 030c 	and.w	r3, r3, #12
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <BSP_QSPI_GetStatus+0x80>
  {
    return QSPI_SUSPENDED;
 8001530:	2308      	movs	r3, #8
 8001532:	e022      	b.n	800157a <BSP_QSPI_GetStatus+0xc6>
  }

  /* Initialize the read status register command */
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8001534:	2305      	movs	r3, #5
 8001536:	60bb      	str	r3, [r7, #8]

  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001538:	f107 0308 	add.w	r3, r7, #8
 800153c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001540:	4619      	mov	r1, r3
 8001542:	4810      	ldr	r0, [pc, #64]	; (8001584 <BSP_QSPI_GetStatus+0xd0>)
 8001544:	f001 faf0 	bl	8002b28 <HAL_QSPI_Command>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <BSP_QSPI_GetStatus+0x9e>
  {
    return QSPI_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e013      	b.n	800157a <BSP_QSPI_GetStatus+0xc6>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001552:	1dfb      	adds	r3, r7, #7
 8001554:	f241 3288 	movw	r2, #5000	; 0x1388
 8001558:	4619      	mov	r1, r3
 800155a:	480a      	ldr	r0, [pc, #40]	; (8001584 <BSP_QSPI_GetStatus+0xd0>)
 800155c:	f001 fbd9 	bl	8002d12 <HAL_QSPI_Receive>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <BSP_QSPI_GetStatus+0xb6>
  {
    return QSPI_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e007      	b.n	800157a <BSP_QSPI_GetStatus+0xc6>
  }

  /* Check the value of the register */
  if ((reg & MX25R6435F_SR_WIP) != 0)
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <BSP_QSPI_GetStatus+0xc4>
  {
    return QSPI_BUSY;
 8001574:	2302      	movs	r3, #2
 8001576:	e000      	b.n	800157a <BSP_QSPI_GetStatus+0xc6>
  }
  else
  {
    return QSPI_OK;
 8001578:	2300      	movs	r3, #0
  }
}
 800157a:	4618      	mov	r0, r3
 800157c:	3740      	adds	r7, #64	; 0x40
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	200006b0 	.word	0x200006b0

08001588 <BSP_QSPI_GetInfo>:
  * @brief  Return the configuration of the QSPI memory.
  * @param  pInfo : pointer on the configuration structure  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_GetInfo(QSPI_Info* pInfo)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize          = MX25R6435F_FLASH_SIZE;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001596:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize    = MX25R6435F_SECTOR_SIZE;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800159e:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber = (MX25R6435F_FLASH_SIZE/MX25R6435F_SECTOR_SIZE);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015a6:	609a      	str	r2, [r3, #8]
  pInfo->ProgPageSize       = MX25R6435F_PAGE_SIZE;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015ae:	60da      	str	r2, [r3, #12]
  pInfo->ProgPagesNumber    = (MX25R6435F_FLASH_SIZE/MX25R6435F_PAGE_SIZE);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015b6:	611a      	str	r2, [r3, #16]
  
  return QSPI_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
	...

080015c8 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b088      	sub	sp, #32
 80015cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_QSPI_CLK_ENABLE();
 80015ce:	4b1c      	ldr	r3, [pc, #112]	; (8001640 <BSP_QSPI_MspInit+0x78>)
 80015d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015d2:	4a1b      	ldr	r2, [pc, #108]	; (8001640 <BSP_QSPI_MspInit+0x78>)
 80015d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d8:	6513      	str	r3, [r2, #80]	; 0x50
 80015da:	4b19      	ldr	r3, [pc, #100]	; (8001640 <BSP_QSPI_MspInit+0x78>)
 80015dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_QSPI_FORCE_RESET();
 80015e6:	4b16      	ldr	r3, [pc, #88]	; (8001640 <BSP_QSPI_MspInit+0x78>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a15      	ldr	r2, [pc, #84]	; (8001640 <BSP_QSPI_MspInit+0x78>)
 80015ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_QSPI_RELEASE_RESET();
 80015f2:	4b13      	ldr	r3, [pc, #76]	; (8001640 <BSP_QSPI_MspInit+0x78>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a12      	ldr	r2, [pc, #72]	; (8001640 <BSP_QSPI_MspInit+0x78>)
 80015f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015fe:	4b10      	ldr	r3, [pc, #64]	; (8001640 <BSP_QSPI_MspInit+0x78>)
 8001600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001602:	4a0f      	ldr	r2, [pc, #60]	; (8001640 <BSP_QSPI_MspInit+0x78>)
 8001604:	f043 0310 	orr.w	r3, r3, #16
 8001608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800160a:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <BSP_QSPI_MspInit+0x78>)
 800160c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160e:	f003 0310 	and.w	r3, r3, #16
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 8001616:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800161a:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001624:	2303      	movs	r3, #3
 8001626:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001628:	230a      	movs	r3, #10
 800162a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800162c:	f107 030c 	add.w	r3, r7, #12
 8001630:	4619      	mov	r1, r3
 8001632:	4804      	ldr	r0, [pc, #16]	; (8001644 <BSP_QSPI_MspInit+0x7c>)
 8001634:	f000 fd38 	bl	80020a8 <HAL_GPIO_Init>
}
 8001638:	bf00      	nop
 800163a:	3720      	adds	r7, #32
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40021000 	.word	0x40021000
 8001644:	48001000 	.word	0x48001000

08001648 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b090      	sub	sp, #64	; 0x40
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001650:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001654:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = RESET_ENABLE_CMD;
 8001656:	2366      	movs	r3, #102	; 0x66
 8001658:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 800165a:	2300      	movs	r3, #0
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800165e:	2300      	movs	r3, #0
 8001660:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8001662:	2300      	movs	r3, #0
 8001664:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800166a:	2300      	movs	r3, #0
 800166c:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800166e:	2300      	movs	r3, #0
 8001670:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001672:	2300      	movs	r3, #0
 8001674:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001676:	f107 0308 	add.w	r3, r7, #8
 800167a:	f241 3288 	movw	r2, #5000	; 0x1388
 800167e:	4619      	mov	r1, r3
 8001680:	4812      	ldr	r0, [pc, #72]	; (80016cc <QSPI_ResetMemory+0x84>)
 8001682:	f001 fa51 	bl	8002b28 <HAL_QSPI_Command>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e019      	b.n	80016c4 <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 8001690:	2399      	movs	r3, #153	; 0x99
 8001692:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001694:	f107 0308 	add.w	r3, r7, #8
 8001698:	f241 3288 	movw	r2, #5000	; 0x1388
 800169c:	4619      	mov	r1, r3
 800169e:	480b      	ldr	r0, [pc, #44]	; (80016cc <QSPI_ResetMemory+0x84>)
 80016a0:	f001 fa42 	bl	8002b28 <HAL_QSPI_Command>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e00a      	b.n	80016c4 <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80016ae:	f241 3188 	movw	r1, #5000	; 0x1388
 80016b2:	4806      	ldr	r0, [pc, #24]	; (80016cc <QSPI_ResetMemory+0x84>)
 80016b4:	f000 f858 	bl	8001768 <QSPI_AutoPollingMemReady>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e000      	b.n	80016c4 <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3740      	adds	r7, #64	; 0x40
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	200006b0 	.word	0x200006b0

080016d0 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b096      	sub	sp, #88	; 0x58
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80016d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016dc:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 80016de:	2306      	movs	r3, #6
 80016e0:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80016e6:	2300      	movs	r3, #0
 80016e8:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80016f6:	2300      	movs	r3, #0
 80016f8:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80016fa:	2300      	movs	r3, #0
 80016fc:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80016fe:	f107 0320 	add.w	r3, r7, #32
 8001702:	f241 3288 	movw	r2, #5000	; 0x1388
 8001706:	4619      	mov	r1, r3
 8001708:	4816      	ldr	r0, [pc, #88]	; (8001764 <QSPI_WriteEnable+0x94>)
 800170a:	f001 fa0d 	bl	8002b28 <HAL_QSPI_Command>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e020      	b.n	800175a <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match           = MX25R6435F_SR_WEL;
 8001718:	2302      	movs	r3, #2
 800171a:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WEL;
 800171c:	2302      	movs	r3, #2
 800171e:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8001720:	2300      	movs	r3, #0
 8001722:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8001724:	2301      	movs	r3, #1
 8001726:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8001728:	2310      	movs	r3, #16
 800172a:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800172c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001730:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 8001732:	2305      	movs	r3, #5
 8001734:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 8001736:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800173a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800173c:	f107 0208 	add.w	r2, r7, #8
 8001740:	f107 0120 	add.w	r1, r7, #32
 8001744:	f241 3388 	movw	r3, #5000	; 0x1388
 8001748:	4806      	ldr	r0, [pc, #24]	; (8001764 <QSPI_WriteEnable+0x94>)
 800174a:	f001 fb84 	bl	8002e56 <HAL_QSPI_AutoPolling>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e000      	b.n	800175a <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3758      	adds	r7, #88	; 0x58
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	200006b0 	.word	0x200006b0

08001768 <QSPI_AutoPollingMemReady>:
  * @param  hqspi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b096      	sub	sp, #88	; 0x58
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001772:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001776:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8001778:	2305      	movs	r3, #5
 800177a:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 800177c:	2300      	movs	r3, #0
 800177e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001780:	2300      	movs	r3, #0
 8001782:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8001784:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001788:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800178e:	2300      	movs	r3, #0
 8001790:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001792:	2300      	movs	r3, #0
 8001794:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001796:	2300      	movs	r3, #0
 8001798:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WIP;
 800179e:	2301      	movs	r3, #1
 80017a0:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 80017a6:	2301      	movs	r3, #1
 80017a8:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 80017aa:	2310      	movs	r3, #16
 80017ac:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80017ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017b2:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, Timeout) != HAL_OK)
 80017b4:	f107 0208 	add.w	r2, r7, #8
 80017b8:	f107 0120 	add.w	r1, r7, #32
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	4806      	ldr	r0, [pc, #24]	; (80017d8 <QSPI_AutoPollingMemReady+0x70>)
 80017c0:	f001 fb49 	bl	8002e56 <HAL_QSPI_AutoPolling>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e000      	b.n	80017d0 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3758      	adds	r7, #88	; 0x58
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	200006b0 	.word	0x200006b0

080017dc <QSPI_QuadMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b092      	sub	sp, #72	; 0x48
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80017e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 80017ee:	2305      	movs	r3, #5
 80017f0:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80017f2:	2300      	movs	r3, #0
 80017f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 80017fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017fe:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 8001804:	2301      	movs	r3, #1
 8001806:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001808:	2300      	movs	r3, #0
 800180a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800180c:	2300      	movs	r3, #0
 800180e:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001810:	2300      	movs	r3, #0
 8001812:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001814:	f107 0310 	add.w	r3, r7, #16
 8001818:	f241 3288 	movw	r2, #5000	; 0x1388
 800181c:	4619      	mov	r1, r3
 800181e:	4842      	ldr	r0, [pc, #264]	; (8001928 <QSPI_QuadMode+0x14c>)
 8001820:	f001 f982 	bl	8002b28 <HAL_QSPI_Command>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <QSPI_QuadMode+0x52>
  {
    return QSPI_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e077      	b.n	800191e <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800182e:	f107 030f 	add.w	r3, r7, #15
 8001832:	f241 3288 	movw	r2, #5000	; 0x1388
 8001836:	4619      	mov	r1, r3
 8001838:	483b      	ldr	r0, [pc, #236]	; (8001928 <QSPI_QuadMode+0x14c>)
 800183a:	f001 fa6a 	bl	8002d12 <HAL_QSPI_Receive>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <QSPI_QuadMode+0x6c>
  {
    return QSPI_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e06a      	b.n	800191e <QSPI_QuadMode+0x142>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8001848:	4837      	ldr	r0, [pc, #220]	; (8001928 <QSPI_QuadMode+0x14c>)
 800184a:	f7ff ff41 	bl	80016d0 <QSPI_WriteEnable>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <QSPI_QuadMode+0x7c>
  {
    return QSPI_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e062      	b.n	800191e <QSPI_QuadMode+0x142>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 8001858:	78fb      	ldrb	r3, [r7, #3]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d105      	bne.n	800186a <QSPI_QuadMode+0x8e>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001864:	b2db      	uxtb	r3, r3
 8001866:	73fb      	strb	r3, [r7, #15]
 8001868:	e004      	b.n	8001874 <QSPI_QuadMode+0x98>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001870:	b2db      	uxtb	r3, r3
 8001872:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8001874:	2301      	movs	r3, #1
 8001876:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001878:	f107 0310 	add.w	r3, r7, #16
 800187c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001880:	4619      	mov	r1, r3
 8001882:	4829      	ldr	r0, [pc, #164]	; (8001928 <QSPI_QuadMode+0x14c>)
 8001884:	f001 f950 	bl	8002b28 <HAL_QSPI_Command>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <QSPI_QuadMode+0xb6>
  {
    return QSPI_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e045      	b.n	800191e <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001892:	f107 030f 	add.w	r3, r7, #15
 8001896:	f241 3288 	movw	r2, #5000	; 0x1388
 800189a:	4619      	mov	r1, r3
 800189c:	4822      	ldr	r0, [pc, #136]	; (8001928 <QSPI_QuadMode+0x14c>)
 800189e:	f001 f9a1 	bl	8002be4 <HAL_QSPI_Transmit>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <QSPI_QuadMode+0xd0>
  {
    return QSPI_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e038      	b.n	800191e <QSPI_QuadMode+0x142>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80018ac:	f241 3188 	movw	r1, #5000	; 0x1388
 80018b0:	481d      	ldr	r0, [pc, #116]	; (8001928 <QSPI_QuadMode+0x14c>)
 80018b2:	f7ff ff59 	bl	8001768 <QSPI_AutoPollingMemReady>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <QSPI_QuadMode+0xe4>
  {
    return QSPI_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e02e      	b.n	800191e <QSPI_QuadMode+0x142>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 80018c0:	2305      	movs	r3, #5
 80018c2:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80018c4:	f107 0310 	add.w	r3, r7, #16
 80018c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018cc:	4619      	mov	r1, r3
 80018ce:	4816      	ldr	r0, [pc, #88]	; (8001928 <QSPI_QuadMode+0x14c>)
 80018d0:	f001 f92a 	bl	8002b28 <HAL_QSPI_Command>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <QSPI_QuadMode+0x102>
  {
    return QSPI_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e01f      	b.n	800191e <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80018de:	f107 030f 	add.w	r3, r7, #15
 80018e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e6:	4619      	mov	r1, r3
 80018e8:	480f      	ldr	r0, [pc, #60]	; (8001928 <QSPI_QuadMode+0x14c>)
 80018ea:	f001 fa12 	bl	8002d12 <HAL_QSPI_Receive>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <QSPI_QuadMode+0x11c>
  {
    return QSPI_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e012      	b.n	800191e <QSPI_QuadMode+0x142>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d102      	bne.n	8001908 <QSPI_QuadMode+0x12c>
 8001902:	78fb      	ldrb	r3, [r7, #3]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d007      	beq.n	8001918 <QSPI_QuadMode+0x13c>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 800190e:	2b00      	cmp	r3, #0
 8001910:	d004      	beq.n	800191c <QSPI_QuadMode+0x140>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8001912:	78fb      	ldrb	r3, [r7, #3]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d101      	bne.n	800191c <QSPI_QuadMode+0x140>
  {
    return QSPI_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e000      	b.n	800191e <QSPI_QuadMode+0x142>
  }

  return QSPI_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3748      	adds	r7, #72	; 0x48
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	200006b0 	.word	0x200006b0

0800192c <QSPI_HighPerfMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b092      	sub	sp, #72	; 0x48
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	460b      	mov	r3, r1
 8001936:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001938:	f44f 7380 	mov.w	r3, #256	; 0x100
 800193c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 800193e:	2305      	movs	r3, #5
 8001940:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001942:	2300      	movs	r3, #0
 8001944:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001946:	2300      	movs	r3, #0
 8001948:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 800194a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800194e:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 8001954:	2301      	movs	r3, #1
 8001956:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001958:	2300      	movs	r3, #0
 800195a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800195c:	2300      	movs	r3, #0
 800195e:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001960:	2300      	movs	r3, #0
 8001962:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001964:	f107 0310 	add.w	r3, r7, #16
 8001968:	f241 3288 	movw	r2, #5000	; 0x1388
 800196c:	4619      	mov	r1, r3
 800196e:	4853      	ldr	r0, [pc, #332]	; (8001abc <QSPI_HighPerfMode+0x190>)
 8001970:	f001 f8da 	bl	8002b28 <HAL_QSPI_Command>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <QSPI_HighPerfMode+0x52>
  {
    return QSPI_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e09a      	b.n	8001ab4 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800197e:	f107 030c 	add.w	r3, r7, #12
 8001982:	f241 3288 	movw	r2, #5000	; 0x1388
 8001986:	4619      	mov	r1, r3
 8001988:	484c      	ldr	r0, [pc, #304]	; (8001abc <QSPI_HighPerfMode+0x190>)
 800198a:	f001 f9c2 	bl	8002d12 <HAL_QSPI_Receive>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <QSPI_HighPerfMode+0x6c>
  {
    return QSPI_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e08d      	b.n	8001ab4 <QSPI_HighPerfMode+0x188>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8001998:	2315      	movs	r3, #21
 800199a:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 800199c:	2302      	movs	r3, #2
 800199e:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80019a0:	f107 0310 	add.w	r3, r7, #16
 80019a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a8:	4619      	mov	r1, r3
 80019aa:	4844      	ldr	r0, [pc, #272]	; (8001abc <QSPI_HighPerfMode+0x190>)
 80019ac:	f001 f8bc 	bl	8002b28 <HAL_QSPI_Command>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <QSPI_HighPerfMode+0x8e>
  {
    return QSPI_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e07c      	b.n	8001ab4 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80019ba:	f107 030c 	add.w	r3, r7, #12
 80019be:	3301      	adds	r3, #1
 80019c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c4:	4619      	mov	r1, r3
 80019c6:	483d      	ldr	r0, [pc, #244]	; (8001abc <QSPI_HighPerfMode+0x190>)
 80019c8:	f001 f9a3 	bl	8002d12 <HAL_QSPI_Receive>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <QSPI_HighPerfMode+0xaa>
  {
    return QSPI_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e06e      	b.n	8001ab4 <QSPI_HighPerfMode+0x188>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 80019d6:	4839      	ldr	r0, [pc, #228]	; (8001abc <QSPI_HighPerfMode+0x190>)
 80019d8:	f7ff fe7a 	bl	80016d0 <QSPI_WriteEnable>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <QSPI_HighPerfMode+0xba>
  {
    return QSPI_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e066      	b.n	8001ab4 <QSPI_HighPerfMode+0x188>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 80019e6:	78fb      	ldrb	r3, [r7, #3]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d105      	bne.n	80019f8 <QSPI_HighPerfMode+0xcc>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 80019ec:	7bbb      	ldrb	r3, [r7, #14]
 80019ee:	f043 0302 	orr.w	r3, r3, #2
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	73bb      	strb	r3, [r7, #14]
 80019f6:	e004      	b.n	8001a02 <QSPI_HighPerfMode+0xd6>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 80019f8:	7bbb      	ldrb	r3, [r7, #14]
 80019fa:	f023 0302 	bic.w	r3, r3, #2
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8001a02:	2301      	movs	r3, #1
 8001a04:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 3;
 8001a06:	2303      	movs	r3, #3
 8001a08:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001a0a:	f107 0310 	add.w	r3, r7, #16
 8001a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a12:	4619      	mov	r1, r3
 8001a14:	4829      	ldr	r0, [pc, #164]	; (8001abc <QSPI_HighPerfMode+0x190>)
 8001a16:	f001 f887 	bl	8002b28 <HAL_QSPI_Command>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <QSPI_HighPerfMode+0xf8>
  {
    return QSPI_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e047      	b.n	8001ab4 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001a24:	f107 030c 	add.w	r3, r7, #12
 8001a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4823      	ldr	r0, [pc, #140]	; (8001abc <QSPI_HighPerfMode+0x190>)
 8001a30:	f001 f8d8 	bl	8002be4 <HAL_QSPI_Transmit>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <QSPI_HighPerfMode+0x112>
  {
    return QSPI_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e03a      	b.n	8001ab4 <QSPI_HighPerfMode+0x188>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8001a3e:	f241 3188 	movw	r1, #5000	; 0x1388
 8001a42:	481e      	ldr	r0, [pc, #120]	; (8001abc <QSPI_HighPerfMode+0x190>)
 8001a44:	f7ff fe90 	bl	8001768 <QSPI_AutoPollingMemReady>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <QSPI_HighPerfMode+0x126>
  {
    return QSPI_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e030      	b.n	8001ab4 <QSPI_HighPerfMode+0x188>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8001a52:	2315      	movs	r3, #21
 8001a54:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 8001a56:	2302      	movs	r3, #2
 8001a58:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001a5a:	f107 0310 	add.w	r3, r7, #16
 8001a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a62:	4619      	mov	r1, r3
 8001a64:	4815      	ldr	r0, [pc, #84]	; (8001abc <QSPI_HighPerfMode+0x190>)
 8001a66:	f001 f85f 	bl	8002b28 <HAL_QSPI_Command>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <QSPI_HighPerfMode+0x148>
  {
    return QSPI_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e01f      	b.n	8001ab4 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001a74:	f107 030c 	add.w	r3, r7, #12
 8001a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	480f      	ldr	r0, [pc, #60]	; (8001abc <QSPI_HighPerfMode+0x190>)
 8001a80:	f001 f947 	bl	8002d12 <HAL_QSPI_Receive>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <QSPI_HighPerfMode+0x162>
  {
    return QSPI_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e012      	b.n	8001ab4 <QSPI_HighPerfMode+0x188>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8001a8e:	7b7b      	ldrb	r3, [r7, #13]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d102      	bne.n	8001a9e <QSPI_HighPerfMode+0x172>
 8001a98:	78fb      	ldrb	r3, [r7, #3]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d007      	beq.n	8001aae <QSPI_HighPerfMode+0x182>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8001a9e:	7b7b      	ldrb	r3, [r7, #13]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d004      	beq.n	8001ab2 <QSPI_HighPerfMode+0x186>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8001aa8:	78fb      	ldrb	r3, [r7, #3]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <QSPI_HighPerfMode+0x186>
  {
    return QSPI_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <QSPI_HighPerfMode+0x188>
  }

  return QSPI_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3748      	adds	r7, #72	; 0x48
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	200006b0 	.word	0x200006b0

08001ac0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aca:	2003      	movs	r0, #3
 8001acc:	f000 f960 	bl	8001d90 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	f000 f80d 	bl	8001af0 <HAL_InitTick>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d002      	beq.n	8001ae2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	71fb      	strb	r3, [r7, #7]
 8001ae0:	e001      	b.n	8001ae6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ae2:	f7ff f9a1 	bl	8000e28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001af8:	2300      	movs	r3, #0
 8001afa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001afc:	4b17      	ldr	r3, [pc, #92]	; (8001b5c <HAL_InitTick+0x6c>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d023      	beq.n	8001b4c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b04:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <HAL_InitTick+0x70>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4b14      	ldr	r3, [pc, #80]	; (8001b5c <HAL_InitTick+0x6c>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f000 f96d 	bl	8001dfa <HAL_SYSTICK_Config>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10f      	bne.n	8001b46 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b0f      	cmp	r3, #15
 8001b2a:	d809      	bhi.n	8001b40 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	f04f 30ff 	mov.w	r0, #4294967295
 8001b34:	f000 f937 	bl	8001da6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b38:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <HAL_InitTick+0x74>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	e007      	b.n	8001b50 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	73fb      	strb	r3, [r7, #15]
 8001b44:	e004      	b.n	8001b50 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	73fb      	strb	r3, [r7, #15]
 8001b4a:	e001      	b.n	8001b50 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000008 	.word	0x20000008
 8001b60:	20000000 	.word	0x20000000
 8001b64:	20000004 	.word	0x20000004

08001b68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <HAL_IncTick+0x20>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_IncTick+0x24>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4413      	add	r3, r2
 8001b78:	4a04      	ldr	r2, [pc, #16]	; (8001b8c <HAL_IncTick+0x24>)
 8001b7a:	6013      	str	r3, [r2, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	20000008 	.word	0x20000008
 8001b8c:	200006f4 	.word	0x200006f4

08001b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return uwTick;
 8001b94:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <HAL_GetTick+0x14>)
 8001b96:	681b      	ldr	r3, [r3, #0]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	200006f4 	.word	0x200006f4

08001ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb0:	f7ff ffee 	bl	8001b90 <HAL_GetTick>
 8001bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc0:	d005      	beq.n	8001bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <HAL_Delay+0x44>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4413      	add	r3, r2
 8001bcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bce:	bf00      	nop
 8001bd0:	f7ff ffde 	bl	8001b90 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d8f7      	bhi.n	8001bd0 <HAL_Delay+0x28>
  {
  }
}
 8001be0:	bf00      	nop
 8001be2:	bf00      	nop
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000008 	.word	0x20000008

08001bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <__NVIC_SetPriorityGrouping+0x44>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c22:	4a04      	ldr	r2, [pc, #16]	; (8001c34 <__NVIC_SetPriorityGrouping+0x44>)
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	60d3      	str	r3, [r2, #12]
}
 8001c28:	bf00      	nop
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c3c:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <__NVIC_GetPriorityGrouping+0x18>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	0a1b      	lsrs	r3, r3, #8
 8001c42:	f003 0307 	and.w	r3, r3, #7
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	db0b      	blt.n	8001c7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	f003 021f 	and.w	r2, r3, #31
 8001c6c:	4907      	ldr	r1, [pc, #28]	; (8001c8c <__NVIC_EnableIRQ+0x38>)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	095b      	lsrs	r3, r3, #5
 8001c74:	2001      	movs	r0, #1
 8001c76:	fa00 f202 	lsl.w	r2, r0, r2
 8001c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	e000e100 	.word	0xe000e100

08001c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	6039      	str	r1, [r7, #0]
 8001c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	db0a      	blt.n	8001cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	490c      	ldr	r1, [pc, #48]	; (8001cdc <__NVIC_SetPriority+0x4c>)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	0112      	lsls	r2, r2, #4
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb8:	e00a      	b.n	8001cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4908      	ldr	r1, [pc, #32]	; (8001ce0 <__NVIC_SetPriority+0x50>)
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	3b04      	subs	r3, #4
 8001cc8:	0112      	lsls	r2, r2, #4
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	440b      	add	r3, r1
 8001cce:	761a      	strb	r2, [r3, #24]
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000e100 	.word	0xe000e100
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b089      	sub	sp, #36	; 0x24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f1c3 0307 	rsb	r3, r3, #7
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	bf28      	it	cs
 8001d02:	2304      	movcs	r3, #4
 8001d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3304      	adds	r3, #4
 8001d0a:	2b06      	cmp	r3, #6
 8001d0c:	d902      	bls.n	8001d14 <NVIC_EncodePriority+0x30>
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3b03      	subs	r3, #3
 8001d12:	e000      	b.n	8001d16 <NVIC_EncodePriority+0x32>
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d18:	f04f 32ff 	mov.w	r2, #4294967295
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43da      	mvns	r2, r3
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	401a      	ands	r2, r3
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	fa01 f303 	lsl.w	r3, r1, r3
 8001d36:	43d9      	mvns	r1, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d3c:	4313      	orrs	r3, r2
         );
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3724      	adds	r7, #36	; 0x24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
	...

08001d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d5c:	d301      	bcc.n	8001d62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e00f      	b.n	8001d82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d62:	4a0a      	ldr	r2, [pc, #40]	; (8001d8c <SysTick_Config+0x40>)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d6a:	210f      	movs	r1, #15
 8001d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d70:	f7ff ff8e 	bl	8001c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d74:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <SysTick_Config+0x40>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d7a:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <SysTick_Config+0x40>)
 8001d7c:	2207      	movs	r2, #7
 8001d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	e000e010 	.word	0xe000e010

08001d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff ff29 	bl	8001bf0 <__NVIC_SetPriorityGrouping>
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b086      	sub	sp, #24
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	4603      	mov	r3, r0
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001db8:	f7ff ff3e 	bl	8001c38 <__NVIC_GetPriorityGrouping>
 8001dbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	68b9      	ldr	r1, [r7, #8]
 8001dc2:	6978      	ldr	r0, [r7, #20]
 8001dc4:	f7ff ff8e 	bl	8001ce4 <NVIC_EncodePriority>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dce:	4611      	mov	r1, r2
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff ff5d 	bl	8001c90 <__NVIC_SetPriority>
}
 8001dd6:	bf00      	nop
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	4603      	mov	r3, r0
 8001de6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff ff31 	bl	8001c54 <__NVIC_EnableIRQ>
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff ffa2 	bl	8001d4c <SysTick_Config>
 8001e08:	4603      	mov	r3, r0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e0ac      	b.n	8001f80 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 f8b2 	bl	8001f94 <DFSDM_GetChannelFromInstance>
 8001e30:	4603      	mov	r3, r0
 8001e32:	4a55      	ldr	r2, [pc, #340]	; (8001f88 <HAL_DFSDM_ChannelInit+0x174>)
 8001e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e09f      	b.n	8001f80 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff f815 	bl	8000e70 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001e46:	4b51      	ldr	r3, [pc, #324]	; (8001f8c <HAL_DFSDM_ChannelInit+0x178>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	4a4f      	ldr	r2, [pc, #316]	; (8001f8c <HAL_DFSDM_ChannelInit+0x178>)
 8001e4e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001e50:	4b4e      	ldr	r3, [pc, #312]	; (8001f8c <HAL_DFSDM_ChannelInit+0x178>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d125      	bne.n	8001ea4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001e58:	4b4d      	ldr	r3, [pc, #308]	; (8001f90 <HAL_DFSDM_ChannelInit+0x17c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a4c      	ldr	r2, [pc, #304]	; (8001f90 <HAL_DFSDM_ChannelInit+0x17c>)
 8001e5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e62:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001e64:	4b4a      	ldr	r3, [pc, #296]	; (8001f90 <HAL_DFSDM_ChannelInit+0x17c>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	4948      	ldr	r1, [pc, #288]	; (8001f90 <HAL_DFSDM_ChannelInit+0x17c>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001e72:	4b47      	ldr	r3, [pc, #284]	; (8001f90 <HAL_DFSDM_ChannelInit+0x17c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a46      	ldr	r2, [pc, #280]	; (8001f90 <HAL_DFSDM_ChannelInit+0x17c>)
 8001e78:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001e7c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	791b      	ldrb	r3, [r3, #4]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d108      	bne.n	8001e98 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001e86:	4b42      	ldr	r3, [pc, #264]	; (8001f90 <HAL_DFSDM_ChannelInit+0x17c>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	041b      	lsls	r3, r3, #16
 8001e92:	493f      	ldr	r1, [pc, #252]	; (8001f90 <HAL_DFSDM_ChannelInit+0x17c>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001e98:	4b3d      	ldr	r3, [pc, #244]	; (8001f90 <HAL_DFSDM_ChannelInit+0x17c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a3c      	ldr	r2, [pc, #240]	; (8001f90 <HAL_DFSDM_ChannelInit+0x17c>)
 8001e9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001ea2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001eb2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6819      	ldr	r1, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001ec2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001ec8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 020f 	bic.w	r2, r2, #15
 8001ee0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6819      	ldr	r1, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001f08:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6899      	ldr	r1, [r3, #8]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f002 0207 	and.w	r2, r2, #7
 8001f34:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6859      	ldr	r1, [r3, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f40:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f60:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 f810 	bl	8001f94 <DFSDM_GetChannelFromInstance>
 8001f74:	4602      	mov	r2, r0
 8001f76:	4904      	ldr	r1, [pc, #16]	; (8001f88 <HAL_DFSDM_ChannelInit+0x174>)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20000098 	.word	0x20000098
 8001f8c:	20000094 	.word	0x20000094
 8001f90:	40016000 	.word	0x40016000

08001f94 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a1c      	ldr	r2, [pc, #112]	; (8002010 <DFSDM_GetChannelFromInstance+0x7c>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d102      	bne.n	8001faa <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	e02b      	b.n	8002002 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a19      	ldr	r2, [pc, #100]	; (8002014 <DFSDM_GetChannelFromInstance+0x80>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d102      	bne.n	8001fb8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	e024      	b.n	8002002 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a17      	ldr	r2, [pc, #92]	; (8002018 <DFSDM_GetChannelFromInstance+0x84>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d102      	bne.n	8001fc6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	e01d      	b.n	8002002 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a14      	ldr	r2, [pc, #80]	; (800201c <DFSDM_GetChannelFromInstance+0x88>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d102      	bne.n	8001fd4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001fce:	2304      	movs	r3, #4
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	e016      	b.n	8002002 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a12      	ldr	r2, [pc, #72]	; (8002020 <DFSDM_GetChannelFromInstance+0x8c>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d102      	bne.n	8001fe2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001fdc:	2305      	movs	r3, #5
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	e00f      	b.n	8002002 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a0f      	ldr	r2, [pc, #60]	; (8002024 <DFSDM_GetChannelFromInstance+0x90>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d102      	bne.n	8001ff0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001fea:	2306      	movs	r3, #6
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	e008      	b.n	8002002 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a0d      	ldr	r2, [pc, #52]	; (8002028 <DFSDM_GetChannelFromInstance+0x94>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d102      	bne.n	8001ffe <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001ff8:	2307      	movs	r3, #7
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	e001      	b.n	8002002 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001ffe:	2303      	movs	r3, #3
 8002000:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002002:	68fb      	ldr	r3, [r7, #12]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	40016000 	.word	0x40016000
 8002014:	40016020 	.word	0x40016020
 8002018:	40016040 	.word	0x40016040
 800201c:	40016080 	.word	0x40016080
 8002020:	400160a0 	.word	0x400160a0
 8002024:	400160c0 	.word	0x400160c0
 8002028:	400160e0 	.word	0x400160e0

0800202c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002034:	2300      	movs	r3, #0
 8002036:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d008      	beq.n	8002056 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2204      	movs	r2, #4
 8002048:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e022      	b.n	800209c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 020e 	bic.w	r2, r2, #14
 8002064:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 0201 	bic.w	r2, r2, #1
 8002074:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207a:	f003 021c 	and.w	r2, r3, #28
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	2101      	movs	r1, #1
 8002084:	fa01 f202 	lsl.w	r2, r1, r2
 8002088:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800209a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800209c:	4618      	mov	r0, r3
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b087      	sub	sp, #28
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020b6:	e17f      	b.n	80023b8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	2101      	movs	r1, #1
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	fa01 f303 	lsl.w	r3, r1, r3
 80020c4:	4013      	ands	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 8171 	beq.w	80023b2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d00b      	beq.n	80020f0 <HAL_GPIO_Init+0x48>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d007      	beq.n	80020f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020e4:	2b11      	cmp	r3, #17
 80020e6:	d003      	beq.n	80020f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b12      	cmp	r3, #18
 80020ee:	d130      	bne.n	8002152 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	2203      	movs	r2, #3
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4013      	ands	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	68da      	ldr	r2, [r3, #12]
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	4313      	orrs	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002126:	2201      	movs	r2, #1
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43db      	mvns	r3, r3
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	4013      	ands	r3, r2
 8002134:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	091b      	lsrs	r3, r3, #4
 800213c:	f003 0201 	and.w	r2, r3, #1
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	4313      	orrs	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	2b03      	cmp	r3, #3
 800215c:	d118      	bne.n	8002190 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002162:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002164:	2201      	movs	r2, #1
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4013      	ands	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	08db      	lsrs	r3, r3, #3
 800217a:	f003 0201 	and.w	r2, r3, #1
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	4313      	orrs	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	2203      	movs	r2, #3
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	4013      	ands	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d003      	beq.n	80021d0 <HAL_GPIO_Init+0x128>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b12      	cmp	r3, #18
 80021ce:	d123      	bne.n	8002218 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	08da      	lsrs	r2, r3, #3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3208      	adds	r2, #8
 80021d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	220f      	movs	r2, #15
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4013      	ands	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	691a      	ldr	r2, [r3, #16]
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	4313      	orrs	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	08da      	lsrs	r2, r3, #3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3208      	adds	r2, #8
 8002212:	6939      	ldr	r1, [r7, #16]
 8002214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	2203      	movs	r2, #3
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4013      	ands	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 0203 	and.w	r2, r3, #3
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	4313      	orrs	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 80ac 	beq.w	80023b2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800225a:	4b5f      	ldr	r3, [pc, #380]	; (80023d8 <HAL_GPIO_Init+0x330>)
 800225c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800225e:	4a5e      	ldr	r2, [pc, #376]	; (80023d8 <HAL_GPIO_Init+0x330>)
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	6613      	str	r3, [r2, #96]	; 0x60
 8002266:	4b5c      	ldr	r3, [pc, #368]	; (80023d8 <HAL_GPIO_Init+0x330>)
 8002268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	60bb      	str	r3, [r7, #8]
 8002270:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002272:	4a5a      	ldr	r2, [pc, #360]	; (80023dc <HAL_GPIO_Init+0x334>)
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	089b      	lsrs	r3, r3, #2
 8002278:	3302      	adds	r3, #2
 800227a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	220f      	movs	r2, #15
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4013      	ands	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800229c:	d025      	beq.n	80022ea <HAL_GPIO_Init+0x242>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a4f      	ldr	r2, [pc, #316]	; (80023e0 <HAL_GPIO_Init+0x338>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d01f      	beq.n	80022e6 <HAL_GPIO_Init+0x23e>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a4e      	ldr	r2, [pc, #312]	; (80023e4 <HAL_GPIO_Init+0x33c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d019      	beq.n	80022e2 <HAL_GPIO_Init+0x23a>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a4d      	ldr	r2, [pc, #308]	; (80023e8 <HAL_GPIO_Init+0x340>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d013      	beq.n	80022de <HAL_GPIO_Init+0x236>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a4c      	ldr	r2, [pc, #304]	; (80023ec <HAL_GPIO_Init+0x344>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d00d      	beq.n	80022da <HAL_GPIO_Init+0x232>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a4b      	ldr	r2, [pc, #300]	; (80023f0 <HAL_GPIO_Init+0x348>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d007      	beq.n	80022d6 <HAL_GPIO_Init+0x22e>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a4a      	ldr	r2, [pc, #296]	; (80023f4 <HAL_GPIO_Init+0x34c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d101      	bne.n	80022d2 <HAL_GPIO_Init+0x22a>
 80022ce:	2306      	movs	r3, #6
 80022d0:	e00c      	b.n	80022ec <HAL_GPIO_Init+0x244>
 80022d2:	2307      	movs	r3, #7
 80022d4:	e00a      	b.n	80022ec <HAL_GPIO_Init+0x244>
 80022d6:	2305      	movs	r3, #5
 80022d8:	e008      	b.n	80022ec <HAL_GPIO_Init+0x244>
 80022da:	2304      	movs	r3, #4
 80022dc:	e006      	b.n	80022ec <HAL_GPIO_Init+0x244>
 80022de:	2303      	movs	r3, #3
 80022e0:	e004      	b.n	80022ec <HAL_GPIO_Init+0x244>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e002      	b.n	80022ec <HAL_GPIO_Init+0x244>
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <HAL_GPIO_Init+0x244>
 80022ea:	2300      	movs	r3, #0
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	f002 0203 	and.w	r2, r2, #3
 80022f2:	0092      	lsls	r2, r2, #2
 80022f4:	4093      	lsls	r3, r2
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022fc:	4937      	ldr	r1, [pc, #220]	; (80023dc <HAL_GPIO_Init+0x334>)
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	089b      	lsrs	r3, r3, #2
 8002302:	3302      	adds	r3, #2
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800230a:	4b3b      	ldr	r3, [pc, #236]	; (80023f8 <HAL_GPIO_Init+0x350>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	43db      	mvns	r3, r3
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	4013      	ands	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4313      	orrs	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800232e:	4a32      	ldr	r2, [pc, #200]	; (80023f8 <HAL_GPIO_Init+0x350>)
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002334:	4b30      	ldr	r3, [pc, #192]	; (80023f8 <HAL_GPIO_Init+0x350>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	43db      	mvns	r3, r3
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4013      	ands	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	4313      	orrs	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002358:	4a27      	ldr	r2, [pc, #156]	; (80023f8 <HAL_GPIO_Init+0x350>)
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800235e:	4b26      	ldr	r3, [pc, #152]	; (80023f8 <HAL_GPIO_Init+0x350>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	43db      	mvns	r3, r3
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	4013      	ands	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4313      	orrs	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002382:	4a1d      	ldr	r2, [pc, #116]	; (80023f8 <HAL_GPIO_Init+0x350>)
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002388:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <HAL_GPIO_Init+0x350>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	43db      	mvns	r3, r3
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	4013      	ands	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023ac:	4a12      	ldr	r2, [pc, #72]	; (80023f8 <HAL_GPIO_Init+0x350>)
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	3301      	adds	r3, #1
 80023b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	fa22 f303 	lsr.w	r3, r2, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f47f ae78 	bne.w	80020b8 <HAL_GPIO_Init+0x10>
  }
}
 80023c8:	bf00      	nop
 80023ca:	bf00      	nop
 80023cc:	371c      	adds	r7, #28
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40010000 	.word	0x40010000
 80023e0:	48000400 	.word	0x48000400
 80023e4:	48000800 	.word	0x48000800
 80023e8:	48000c00 	.word	0x48000c00
 80023ec:	48001000 	.word	0x48001000
 80023f0:	48001400 	.word	0x48001400
 80023f4:	48001800 	.word	0x48001800
 80023f8:	40010400 	.word	0x40010400

080023fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b087      	sub	sp, #28
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800240a:	e0cd      	b.n	80025a8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800240c:	2201      	movs	r2, #1
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	4013      	ands	r3, r2
 8002418:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 80c0 	beq.w	80025a2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002422:	4a68      	ldr	r2, [pc, #416]	; (80025c4 <HAL_GPIO_DeInit+0x1c8>)
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	089b      	lsrs	r3, r3, #2
 8002428:	3302      	adds	r3, #2
 800242a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800242e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	220f      	movs	r2, #15
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	4013      	ands	r3, r2
 8002442:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800244a:	d025      	beq.n	8002498 <HAL_GPIO_DeInit+0x9c>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a5e      	ldr	r2, [pc, #376]	; (80025c8 <HAL_GPIO_DeInit+0x1cc>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d01f      	beq.n	8002494 <HAL_GPIO_DeInit+0x98>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a5d      	ldr	r2, [pc, #372]	; (80025cc <HAL_GPIO_DeInit+0x1d0>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d019      	beq.n	8002490 <HAL_GPIO_DeInit+0x94>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a5c      	ldr	r2, [pc, #368]	; (80025d0 <HAL_GPIO_DeInit+0x1d4>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d013      	beq.n	800248c <HAL_GPIO_DeInit+0x90>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a5b      	ldr	r2, [pc, #364]	; (80025d4 <HAL_GPIO_DeInit+0x1d8>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d00d      	beq.n	8002488 <HAL_GPIO_DeInit+0x8c>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a5a      	ldr	r2, [pc, #360]	; (80025d8 <HAL_GPIO_DeInit+0x1dc>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d007      	beq.n	8002484 <HAL_GPIO_DeInit+0x88>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a59      	ldr	r2, [pc, #356]	; (80025dc <HAL_GPIO_DeInit+0x1e0>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d101      	bne.n	8002480 <HAL_GPIO_DeInit+0x84>
 800247c:	2306      	movs	r3, #6
 800247e:	e00c      	b.n	800249a <HAL_GPIO_DeInit+0x9e>
 8002480:	2307      	movs	r3, #7
 8002482:	e00a      	b.n	800249a <HAL_GPIO_DeInit+0x9e>
 8002484:	2305      	movs	r3, #5
 8002486:	e008      	b.n	800249a <HAL_GPIO_DeInit+0x9e>
 8002488:	2304      	movs	r3, #4
 800248a:	e006      	b.n	800249a <HAL_GPIO_DeInit+0x9e>
 800248c:	2303      	movs	r3, #3
 800248e:	e004      	b.n	800249a <HAL_GPIO_DeInit+0x9e>
 8002490:	2302      	movs	r3, #2
 8002492:	e002      	b.n	800249a <HAL_GPIO_DeInit+0x9e>
 8002494:	2301      	movs	r3, #1
 8002496:	e000      	b.n	800249a <HAL_GPIO_DeInit+0x9e>
 8002498:	2300      	movs	r3, #0
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	f002 0203 	and.w	r2, r2, #3
 80024a0:	0092      	lsls	r2, r2, #2
 80024a2:	4093      	lsls	r3, r2
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d132      	bne.n	8002510 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80024aa:	4b4d      	ldr	r3, [pc, #308]	; (80025e0 <HAL_GPIO_DeInit+0x1e4>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	43db      	mvns	r3, r3
 80024b2:	494b      	ldr	r1, [pc, #300]	; (80025e0 <HAL_GPIO_DeInit+0x1e4>)
 80024b4:	4013      	ands	r3, r2
 80024b6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80024b8:	4b49      	ldr	r3, [pc, #292]	; (80025e0 <HAL_GPIO_DeInit+0x1e4>)
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	43db      	mvns	r3, r3
 80024c0:	4947      	ldr	r1, [pc, #284]	; (80025e0 <HAL_GPIO_DeInit+0x1e4>)
 80024c2:	4013      	ands	r3, r2
 80024c4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80024c6:	4b46      	ldr	r3, [pc, #280]	; (80025e0 <HAL_GPIO_DeInit+0x1e4>)
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	43db      	mvns	r3, r3
 80024ce:	4944      	ldr	r1, [pc, #272]	; (80025e0 <HAL_GPIO_DeInit+0x1e4>)
 80024d0:	4013      	ands	r3, r2
 80024d2:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80024d4:	4b42      	ldr	r3, [pc, #264]	; (80025e0 <HAL_GPIO_DeInit+0x1e4>)
 80024d6:	68da      	ldr	r2, [r3, #12]
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	43db      	mvns	r3, r3
 80024dc:	4940      	ldr	r1, [pc, #256]	; (80025e0 <HAL_GPIO_DeInit+0x1e4>)
 80024de:	4013      	ands	r3, r2
 80024e0:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	220f      	movs	r2, #15
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80024f2:	4a34      	ldr	r2, [pc, #208]	; (80025c4 <HAL_GPIO_DeInit+0x1c8>)
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	089b      	lsrs	r3, r3, #2
 80024f8:	3302      	adds	r3, #2
 80024fa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	43da      	mvns	r2, r3
 8002502:	4830      	ldr	r0, [pc, #192]	; (80025c4 <HAL_GPIO_DeInit+0x1c8>)
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	089b      	lsrs	r3, r3, #2
 8002508:	400a      	ands	r2, r1
 800250a:	3302      	adds	r3, #2
 800250c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	2103      	movs	r1, #3
 800251a:	fa01 f303 	lsl.w	r3, r1, r3
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	08da      	lsrs	r2, r3, #3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3208      	adds	r2, #8
 800252c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	220f      	movs	r2, #15
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43db      	mvns	r3, r3
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	08d2      	lsrs	r2, r2, #3
 8002544:	4019      	ands	r1, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3208      	adds	r2, #8
 800254a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689a      	ldr	r2, [r3, #8]
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	2103      	movs	r1, #3
 8002558:	fa01 f303 	lsl.w	r3, r1, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	401a      	ands	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	2101      	movs	r1, #1
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	fa01 f303 	lsl.w	r3, r1, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	401a      	ands	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68da      	ldr	r2, [r3, #12]
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	2103      	movs	r1, #3
 8002582:	fa01 f303 	lsl.w	r3, r1, r3
 8002586:	43db      	mvns	r3, r3
 8002588:	401a      	ands	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002592:	2101      	movs	r1, #1
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	fa01 f303 	lsl.w	r3, r1, r3
 800259a:	43db      	mvns	r3, r3
 800259c:	401a      	ands	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	3301      	adds	r3, #1
 80025a6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	fa22 f303 	lsr.w	r3, r2, r3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f47f af2b 	bne.w	800240c <HAL_GPIO_DeInit+0x10>
  }
}
 80025b6:	bf00      	nop
 80025b8:	bf00      	nop
 80025ba:	371c      	adds	r7, #28
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	40010000 	.word	0x40010000
 80025c8:	48000400 	.word	0x48000400
 80025cc:	48000800 	.word	0x48000800
 80025d0:	48000c00 	.word	0x48000c00
 80025d4:	48001000 	.word	0x48001000
 80025d8:	48001400 	.word	0x48001400
 80025dc:	48001800 	.word	0x48001800
 80025e0:	40010400 	.word	0x40010400

080025e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	460b      	mov	r3, r1
 80025ee:	807b      	strh	r3, [r7, #2]
 80025f0:	4613      	mov	r3, r2
 80025f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025f4:	787b      	ldrb	r3, [r7, #1]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025fa:	887a      	ldrh	r2, [r7, #2]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002600:	e002      	b.n	8002608 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002602:	887a      	ldrh	r2, [r7, #2]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800261e:	4b08      	ldr	r3, [pc, #32]	; (8002640 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002620:	695a      	ldr	r2, [r3, #20]
 8002622:	88fb      	ldrh	r3, [r7, #6]
 8002624:	4013      	ands	r3, r2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d006      	beq.n	8002638 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800262a:	4a05      	ldr	r2, [pc, #20]	; (8002640 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800262c:	88fb      	ldrh	r3, [r7, #6]
 800262e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002630:	88fb      	ldrh	r3, [r7, #6]
 8002632:	4618      	mov	r0, r3
 8002634:	f000 f806 	bl	8002644 <HAL_GPIO_EXTI_Callback>
  }
}
 8002638:	bf00      	nop
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40010400 	.word	0x40010400

08002644 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800265a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800265c:	b08f      	sub	sp, #60	; 0x3c
 800265e:	af0a      	add	r7, sp, #40	; 0x28
 8002660:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e116      	b.n	800289a <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d106      	bne.n	800268c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7fe fd56 	bl	8001138 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2203      	movs	r2, #3
 8002690:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269c:	2b00      	cmp	r3, #0
 800269e:	d102      	bne.n	80026a6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f002 ffad 	bl	800560a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	603b      	str	r3, [r7, #0]
 80026b6:	687e      	ldr	r6, [r7, #4]
 80026b8:	466d      	mov	r5, sp
 80026ba:	f106 0410 	add.w	r4, r6, #16
 80026be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80026ce:	1d33      	adds	r3, r6, #4
 80026d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026d2:	6838      	ldr	r0, [r7, #0]
 80026d4:	f002 ff6d 	bl	80055b2 <USB_CoreInit>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d005      	beq.n	80026ea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2202      	movs	r2, #2
 80026e2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e0d7      	b.n	800289a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2100      	movs	r1, #0
 80026f0:	4618      	mov	r0, r3
 80026f2:	f002 ff9b 	bl	800562c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026f6:	2300      	movs	r3, #0
 80026f8:	73fb      	strb	r3, [r7, #15]
 80026fa:	e04a      	b.n	8002792 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026fc:	7bfa      	ldrb	r2, [r7, #15]
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	4613      	mov	r3, r2
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	1a9b      	subs	r3, r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	333d      	adds	r3, #61	; 0x3d
 800270c:	2201      	movs	r2, #1
 800270e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002710:	7bfa      	ldrb	r2, [r7, #15]
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	1a9b      	subs	r3, r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	333c      	adds	r3, #60	; 0x3c
 8002720:	7bfa      	ldrb	r2, [r7, #15]
 8002722:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002724:	7bfa      	ldrb	r2, [r7, #15]
 8002726:	7bfb      	ldrb	r3, [r7, #15]
 8002728:	b298      	uxth	r0, r3
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	1a9b      	subs	r3, r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	3342      	adds	r3, #66	; 0x42
 8002738:	4602      	mov	r2, r0
 800273a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800273c:	7bfa      	ldrb	r2, [r7, #15]
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	1a9b      	subs	r3, r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	440b      	add	r3, r1
 800274a:	333f      	adds	r3, #63	; 0x3f
 800274c:	2200      	movs	r2, #0
 800274e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002750:	7bfa      	ldrb	r2, [r7, #15]
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	4613      	mov	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	1a9b      	subs	r3, r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	440b      	add	r3, r1
 800275e:	3344      	adds	r3, #68	; 0x44
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002764:	7bfa      	ldrb	r2, [r7, #15]
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	1a9b      	subs	r3, r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	3348      	adds	r3, #72	; 0x48
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002778:	7bfa      	ldrb	r2, [r7, #15]
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	1a9b      	subs	r3, r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	3350      	adds	r3, #80	; 0x50
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800278c:	7bfb      	ldrb	r3, [r7, #15]
 800278e:	3301      	adds	r3, #1
 8002790:	73fb      	strb	r3, [r7, #15]
 8002792:	7bfa      	ldrb	r2, [r7, #15]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	429a      	cmp	r2, r3
 800279a:	d3af      	bcc.n	80026fc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800279c:	2300      	movs	r3, #0
 800279e:	73fb      	strb	r3, [r7, #15]
 80027a0:	e044      	b.n	800282c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027a2:	7bfa      	ldrb	r2, [r7, #15]
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	1a9b      	subs	r3, r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	440b      	add	r3, r1
 80027b0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027b8:	7bfa      	ldrb	r2, [r7, #15]
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	1a9b      	subs	r3, r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80027ca:	7bfa      	ldrb	r2, [r7, #15]
 80027cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027ce:	7bfa      	ldrb	r2, [r7, #15]
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	4613      	mov	r3, r2
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	1a9b      	subs	r3, r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	440b      	add	r3, r1
 80027dc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80027e0:	2200      	movs	r2, #0
 80027e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027e4:	7bfa      	ldrb	r2, [r7, #15]
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	4613      	mov	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	1a9b      	subs	r3, r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	440b      	add	r3, r1
 80027f2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027fa:	7bfa      	ldrb	r2, [r7, #15]
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	4613      	mov	r3, r2
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	1a9b      	subs	r3, r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	440b      	add	r3, r1
 8002808:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002810:	7bfa      	ldrb	r2, [r7, #15]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	1a9b      	subs	r3, r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002826:	7bfb      	ldrb	r3, [r7, #15]
 8002828:	3301      	adds	r3, #1
 800282a:	73fb      	strb	r3, [r7, #15]
 800282c:	7bfa      	ldrb	r2, [r7, #15]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	429a      	cmp	r2, r3
 8002834:	d3b5      	bcc.n	80027a2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	687e      	ldr	r6, [r7, #4]
 800283e:	466d      	mov	r5, sp
 8002840:	f106 0410 	add.w	r4, r6, #16
 8002844:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002846:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002848:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800284a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800284c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002850:	e885 0003 	stmia.w	r5, {r0, r1}
 8002854:	1d33      	adds	r3, r6, #4
 8002856:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002858:	6838      	ldr	r0, [r7, #0]
 800285a:	f002 ff11 	bl	8005680 <USB_DevInit>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d005      	beq.n	8002870 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2202      	movs	r2, #2
 8002868:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e014      	b.n	800289a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	2b01      	cmp	r3, #1
 8002886:	d102      	bne.n	800288e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f80a 	bl	80028a2 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f003 f8a1 	bl	80059da <USB_DevDisconnect>

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3714      	adds	r7, #20
 800289e:	46bd      	mov	sp, r7
 80028a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028a2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b085      	sub	sp, #20
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d4:	f043 0303 	orr.w	r3, r3, #3
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
	...

080028ec <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028f0:	4b05      	ldr	r3, [pc, #20]	; (8002908 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a04      	ldr	r2, [pc, #16]	; (8002908 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028fa:	6013      	str	r3, [r2, #0]
}
 80028fc:	bf00      	nop
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	40007000 	.word	0x40007000

0800290c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002910:	4b04      	ldr	r3, [pc, #16]	; (8002924 <HAL_PWREx_GetVoltageRange+0x18>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002918:	4618      	mov	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40007000 	.word	0x40007000

08002928 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002936:	d130      	bne.n	800299a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002938:	4b23      	ldr	r3, [pc, #140]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002944:	d038      	beq.n	80029b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002946:	4b20      	ldr	r3, [pc, #128]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800294e:	4a1e      	ldr	r2, [pc, #120]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002950:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002954:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002956:	4b1d      	ldr	r3, [pc, #116]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2232      	movs	r2, #50	; 0x32
 800295c:	fb02 f303 	mul.w	r3, r2, r3
 8002960:	4a1b      	ldr	r2, [pc, #108]	; (80029d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002962:	fba2 2303 	umull	r2, r3, r2, r3
 8002966:	0c9b      	lsrs	r3, r3, #18
 8002968:	3301      	adds	r3, #1
 800296a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800296c:	e002      	b.n	8002974 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	3b01      	subs	r3, #1
 8002972:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002974:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800297c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002980:	d102      	bne.n	8002988 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1f2      	bne.n	800296e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002988:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002994:	d110      	bne.n	80029b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e00f      	b.n	80029ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800299a:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029a6:	d007      	beq.n	80029b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029a8:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029b0:	4a05      	ldr	r2, [pc, #20]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40007000 	.word	0x40007000
 80029cc:	20000000 	.word	0x20000000
 80029d0:	431bde83 	.word	0x431bde83

080029d4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80029d8:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	4a04      	ldr	r2, [pc, #16]	; (80029f0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80029de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029e2:	6053      	str	r3, [r2, #4]
}
 80029e4:	bf00      	nop
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40007000 	.word	0x40007000

080029f4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af02      	add	r7, sp, #8
 80029fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80029fc:	f7ff f8c8 	bl	8001b90 <HAL_GetTick>
 8002a00:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e063      	b.n	8002ad4 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10b      	bne.n	8002a30 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7fe fa6d 	bl	8000f00 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002a26:	f241 3188 	movw	r1, #5000	; 0x1388
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 faf7 	bl	800301e <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	021a      	lsls	r2, r3, #8
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	2120      	movs	r1, #32
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 faef 	bl	800303a <QSPI_WaitFlagStateUntilTimeout>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002a60:	7afb      	ldrb	r3, [r7, #11]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d131      	bne.n	8002aca <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002a70:	f023 0310 	bic.w	r3, r3, #16
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6852      	ldr	r2, [r2, #4]
 8002a78:	0611      	lsls	r1, r2, #24
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	68d2      	ldr	r2, [r2, #12]
 8002a7e:	4311      	orrs	r1, r2
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6812      	ldr	r2, [r2, #0]
 8002a84:	430b      	orrs	r3, r1
 8002a86:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	4b13      	ldr	r3, [pc, #76]	; (8002adc <HAL_QSPI_Init+0xe8>)
 8002a90:	4013      	ands	r3, r2
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	6912      	ldr	r2, [r2, #16]
 8002a96:	0411      	lsls	r1, r2, #16
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6952      	ldr	r2, [r2, #20]
 8002a9c:	4311      	orrs	r1, r2
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6992      	ldr	r2, [r2, #24]
 8002aa2:	4311      	orrs	r1, r2
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6812      	ldr	r2, [r2, #0]
 8002aa8:	430b      	orrs	r3, r1
 8002aaa:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0201 	orr.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002ad2:	7afb      	ldrb	r3, [r7, #11]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	ffe0f8fe 	.word	0xffe0f8fe

08002ae0 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e016      	b.n	8002b20 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 0201 	bic.w	r2, r2, #1
 8002b00:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7fe fa40 	bl	8000f88 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b088      	sub	sp, #32
 8002b2c:	af02      	add	r7, sp, #8
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002b34:	f7ff f82c 	bl	8001b90 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <HAL_QSPI_Command+0x22>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e048      	b.n	8002bdc <HAL_QSPI_Command+0xb4>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d137      	bne.n	8002bce <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2202      	movs	r2, #2
 8002b68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	2200      	movs	r2, #0
 8002b74:	2120      	movs	r1, #32
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f000 fa5f 	bl	800303a <QSPI_WaitFlagStateUntilTimeout>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8002b80:	7dfb      	ldrb	r3, [r7, #23]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d125      	bne.n	8002bd2 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8002b86:	2200      	movs	r2, #0
 8002b88:	68b9      	ldr	r1, [r7, #8]
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 fa8c 	bl	80030a8 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d115      	bne.n	8002bc4 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	2102      	movs	r1, #2
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 fa49 	bl	800303a <QSPI_WaitFlagStateUntilTimeout>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8002bac:	7dfb      	ldrb	r3, [r7, #23]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10f      	bne.n	8002bd2 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002bc2:	e006      	b.n	8002bd2 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002bcc:	e001      	b.n	8002bd2 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8002bce:	2302      	movs	r3, #2
 8002bd0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b08a      	sub	sp, #40	; 0x28
 8002be8:	af02      	add	r7, sp, #8
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8002bf4:	f7fe ffcc 	bl	8001b90 <HAL_GetTick>
 8002bf8:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	3320      	adds	r3, #32
 8002c00:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d101      	bne.n	8002c12 <HAL_QSPI_Transmit+0x2e>
 8002c0e:	2302      	movs	r3, #2
 8002c10:	e07b      	b.n	8002d0a <HAL_QSPI_Transmit+0x126>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d16a      	bne.n	8002cfc <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d05b      	beq.n	8002cea <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2212      	movs	r2, #18
 8002c36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	1c5a      	adds	r2, r3, #1
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	1c5a      	adds	r2, r3, #1
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	68ba      	ldr	r2, [r7, #8]
 8002c56:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695a      	ldr	r2, [r3, #20]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002c66:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8002c68:	e01b      	b.n	8002ca2 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	2201      	movs	r2, #1
 8002c72:	2104      	movs	r1, #4
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 f9e0 	bl	800303a <QSPI_WaitFlagStateUntilTimeout>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8002c7e:	7ffb      	ldrb	r3, [r7, #31]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d113      	bne.n	8002cac <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	781a      	ldrb	r2, [r3, #0]
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	1c5a      	adds	r2, r3, #1
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	1e5a      	subs	r2, r3, #1
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1df      	bne.n	8002c6a <HAL_QSPI_Transmit+0x86>
 8002caa:	e000      	b.n	8002cae <HAL_QSPI_Transmit+0xca>
          break;
 8002cac:	bf00      	nop
      }

      if (status == HAL_OK)
 8002cae:	7ffb      	ldrb	r3, [r7, #31]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d115      	bne.n	8002ce0 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	2102      	movs	r1, #2
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 f9bb 	bl	800303a <QSPI_WaitFlagStateUntilTimeout>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8002cc8:	7ffb      	ldrb	r3, [r7, #31]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d108      	bne.n	8002ce0 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 f934 	bl	8002f44 <HAL_QSPI_Abort>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002ce8:	e00a      	b.n	8002d00 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cee:	f043 0208 	orr.w	r2, r3, #8
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	77fb      	strb	r3, [r7, #31]
 8002cfa:	e001      	b.n	8002d00 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8002d08:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3720      	adds	r7, #32
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b08a      	sub	sp, #40	; 0x28
 8002d16:	af02      	add	r7, sp, #8
 8002d18:	60f8      	str	r0, [r7, #12]
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8002d22:	f7fe ff35 	bl	8001b90 <HAL_GetTick>
 8002d26:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	3320      	adds	r3, #32
 8002d36:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d101      	bne.n	8002d48 <HAL_QSPI_Receive+0x36>
 8002d44:	2302      	movs	r3, #2
 8002d46:	e082      	b.n	8002e4e <HAL_QSPI_Receive+0x13c>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d171      	bne.n	8002e40 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d062      	beq.n	8002e2e <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2222      	movs	r2, #34	; 0x22
 8002d6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	1c5a      	adds	r2, r3, #1
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002da0:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8002daa:	e01c      	b.n	8002de6 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	2201      	movs	r2, #1
 8002db4:	2106      	movs	r1, #6
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 f93f 	bl	800303a <QSPI_WaitFlagStateUntilTimeout>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8002dc0:	7ffb      	ldrb	r3, [r7, #31]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d114      	bne.n	8002df0 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	7812      	ldrb	r2, [r2, #0]
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd6:	1c5a      	adds	r2, r3, #1
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de0:	1e5a      	subs	r2, r3, #1
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1de      	bne.n	8002dac <HAL_QSPI_Receive+0x9a>
 8002dee:	e000      	b.n	8002df2 <HAL_QSPI_Receive+0xe0>
          break;
 8002df0:	bf00      	nop
      }

      if (status == HAL_OK)
 8002df2:	7ffb      	ldrb	r3, [r7, #31]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d115      	bne.n	8002e24 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	2102      	movs	r1, #2
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 f919 	bl	800303a <QSPI_WaitFlagStateUntilTimeout>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8002e0c:	7ffb      	ldrb	r3, [r7, #31]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d108      	bne.n	8002e24 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2202      	movs	r2, #2
 8002e18:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 f892 	bl	8002f44 <HAL_QSPI_Abort>
 8002e20:	4603      	mov	r3, r0
 8002e22:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002e2c:	e00a      	b.n	8002e44 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e32:	f043 0208 	orr.w	r2, r3, #8
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	77fb      	strb	r3, [r7, #31]
 8002e3e:	e001      	b.n	8002e44 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8002e40:	2302      	movs	r3, #2
 8002e42:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8002e4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3720      	adds	r7, #32
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b088      	sub	sp, #32
 8002e5a:	af02      	add	r7, sp, #8
 8002e5c:	60f8      	str	r0, [r7, #12]
 8002e5e:	60b9      	str	r1, [r7, #8]
 8002e60:	607a      	str	r2, [r7, #4]
 8002e62:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002e64:	f7fe fe94 	bl	8001b90 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d101      	bne.n	8002e7a <HAL_QSPI_AutoPolling+0x24>
 8002e76:	2302      	movs	r3, #2
 8002e78:	e060      	b.n	8002f3c <HAL_QSPI_AutoPolling+0xe6>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d14f      	bne.n	8002f2e <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2242      	movs	r2, #66	; 0x42
 8002e98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	2120      	movs	r1, #32
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 f8c7 	bl	800303a <QSPI_WaitFlagStateUntilTimeout>
 8002eac:	4603      	mov	r3, r0
 8002eae:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8002eb0:	7dfb      	ldrb	r3, [r7, #23]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d13d      	bne.n	8002f32 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6812      	ldr	r2, [r2, #0]
 8002ebe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6852      	ldr	r2, [r2, #4]
 8002ec8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6892      	ldr	r2, [r2, #8]
 8002ed2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002eec:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8002ef6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002efa:	68b9      	ldr	r1, [r7, #8]
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f000 f8d3 	bl	80030a8 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	2108      	movs	r1, #8
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f000 f894 	bl	800303a <QSPI_WaitFlagStateUntilTimeout>
 8002f12:	4603      	mov	r3, r0
 8002f14:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8002f16:	7dfb      	ldrb	r3, [r7, #23]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10a      	bne.n	8002f32 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2208      	movs	r2, #8
 8002f22:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002f2c:	e001      	b.n	8002f32 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af02      	add	r7, sp, #8
 8002f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8002f50:	f7fe fe1e 	bl	8001b90 <HAL_GetTick>
 8002f54:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d056      	beq.n	8003014 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d017      	beq.n	8002fac <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0204 	bic.w	r2, r2, #4
 8002f8a:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff f84b 	bl	800202c <HAL_DMA_Abort>
 8002f96:	4603      	mov	r3, r0
 8002f98:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8002f9a:	7bfb      	ldrb	r3, [r7, #15]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d005      	beq.n	8002fac <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa4:	f043 0204 	orr.w	r2, r3, #4
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0202 	orr.w	r2, r2, #2
 8002fba:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	2102      	movs	r1, #2
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f836 	bl	800303a <QSPI_WaitFlagStateUntilTimeout>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10e      	bne.n	8002ff6 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2202      	movs	r2, #2
 8002fde:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	2120      	movs	r1, #32
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f824 	bl	800303a <QSPI_WaitFlagStateUntilTimeout>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002ff6:	7bfb      	ldrb	r3, [r7, #15]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10b      	bne.n	8003014 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	695a      	ldr	r2, [r3, #20]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800300a:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 8003014:	7bfb      	ldrb	r3, [r7, #15]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
 8003026:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b084      	sub	sp, #16
 800303e:	af00      	add	r7, sp, #0
 8003040:	60f8      	str	r0, [r7, #12]
 8003042:	60b9      	str	r1, [r7, #8]
 8003044:	603b      	str	r3, [r7, #0]
 8003046:	4613      	mov	r3, r2
 8003048:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800304a:	e01a      	b.n	8003082 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003052:	d016      	beq.n	8003082 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003054:	f7fe fd9c 	bl	8001b90 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	429a      	cmp	r2, r3
 8003062:	d302      	bcc.n	800306a <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10b      	bne.n	8003082 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2204      	movs	r2, #4
 800306e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003076:	f043 0201 	orr.w	r2, r3, #1
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e00e      	b.n	80030a0 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	4013      	ands	r3, r2
 800308c:	2b00      	cmp	r3, #0
 800308e:	bf14      	ite	ne
 8003090:	2301      	movne	r3, #1
 8003092:	2300      	moveq	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	461a      	mov	r2, r3
 8003098:	79fb      	ldrb	r3, [r7, #7]
 800309a:	429a      	cmp	r2, r3
 800309c:	d1d6      	bne.n	800304c <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d009      	beq.n	80030d0 <QSPI_Config+0x28>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80030c2:	d005      	beq.n	80030d0 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	3a01      	subs	r2, #1
 80030ce:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 80b9 	beq.w	800324c <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d05f      	beq.n	80031a2 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	6892      	ldr	r2, [r2, #8]
 80030ea:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d031      	beq.n	8003158 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fc:	431a      	orrs	r2, r3
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003102:	431a      	orrs	r2, r3
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	431a      	orrs	r2, r3
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	049b      	lsls	r3, r3, #18
 8003110:	431a      	orrs	r2, r3
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	431a      	orrs	r2, r3
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	431a      	orrs	r2, r3
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	431a      	orrs	r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	69db      	ldr	r3, [r3, #28]
 8003128:	431a      	orrs	r2, r3
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	431a      	orrs	r2, r3
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	ea42 0103 	orr.w	r1, r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	430a      	orrs	r2, r1
 8003140:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003148:	f000 812e 	beq.w	80033a8 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	6852      	ldr	r2, [r2, #4]
 8003154:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8003156:	e127      	b.n	80033a8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003160:	431a      	orrs	r2, r3
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003166:	431a      	orrs	r2, r3
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	431a      	orrs	r2, r3
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	049b      	lsls	r3, r3, #18
 8003174:	431a      	orrs	r2, r3
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	431a      	orrs	r2, r3
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	431a      	orrs	r2, r3
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	431a      	orrs	r2, r3
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	431a      	orrs	r2, r3
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	ea42 0103 	orr.w	r1, r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	430a      	orrs	r2, r1
 800319e:	615a      	str	r2, [r3, #20]
}
 80031a0:	e102      	b.n	80033a8 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d02e      	beq.n	8003208 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b2:	431a      	orrs	r2, r3
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b8:	431a      	orrs	r2, r3
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	431a      	orrs	r2, r3
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	049b      	lsls	r3, r3, #18
 80031c6:	431a      	orrs	r2, r3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	431a      	orrs	r2, r3
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	431a      	orrs	r2, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	431a      	orrs	r2, r3
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	431a      	orrs	r2, r3
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	ea42 0103 	orr.w	r1, r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80031f8:	f000 80d6 	beq.w	80033a8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	6852      	ldr	r2, [r2, #4]
 8003204:	619a      	str	r2, [r3, #24]
}
 8003206:	e0cf      	b.n	80033a8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003210:	431a      	orrs	r2, r3
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003216:	431a      	orrs	r2, r3
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	431a      	orrs	r2, r3
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	049b      	lsls	r3, r3, #18
 8003224:	431a      	orrs	r2, r3
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	431a      	orrs	r2, r3
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	431a      	orrs	r2, r3
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	431a      	orrs	r2, r3
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	ea42 0103 	orr.w	r1, r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	430a      	orrs	r2, r1
 8003248:	615a      	str	r2, [r3, #20]
}
 800324a:	e0ad      	b.n	80033a8 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d058      	beq.n	8003306 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	6892      	ldr	r2, [r2, #8]
 800325c:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d02d      	beq.n	80032c2 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	431a      	orrs	r2, r3
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003274:	431a      	orrs	r2, r3
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	431a      	orrs	r2, r3
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	049b      	lsls	r3, r3, #18
 8003282:	431a      	orrs	r2, r3
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	431a      	orrs	r2, r3
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	431a      	orrs	r2, r3
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	431a      	orrs	r2, r3
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	431a      	orrs	r2, r3
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	ea42 0103 	orr.w	r1, r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80032b4:	d078      	beq.n	80033a8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	6852      	ldr	r2, [r2, #4]
 80032be:	619a      	str	r2, [r3, #24]
}
 80032c0:	e072      	b.n	80033a8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	431a      	orrs	r2, r3
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d0:	431a      	orrs	r2, r3
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	431a      	orrs	r2, r3
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	049b      	lsls	r3, r3, #18
 80032de:	431a      	orrs	r2, r3
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	431a      	orrs	r2, r3
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	431a      	orrs	r2, r3
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	69db      	ldr	r3, [r3, #28]
 80032f0:	431a      	orrs	r2, r3
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	ea42 0103 	orr.w	r1, r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	430a      	orrs	r2, r1
 8003302:	615a      	str	r2, [r3, #20]
}
 8003304:	e050      	b.n	80033a8 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d02a      	beq.n	8003364 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	431a      	orrs	r2, r3
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800331c:	431a      	orrs	r2, r3
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	431a      	orrs	r2, r3
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	049b      	lsls	r3, r3, #18
 800332a:	431a      	orrs	r2, r3
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	431a      	orrs	r2, r3
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	431a      	orrs	r2, r3
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	431a      	orrs	r2, r3
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	ea42 0103 	orr.w	r1, r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	430a      	orrs	r2, r1
 800334e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003356:	d027      	beq.n	80033a8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	6852      	ldr	r2, [r2, #4]
 8003360:	619a      	str	r2, [r3, #24]
}
 8003362:	e021      	b.n	80033a8 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	2b00      	cmp	r3, #0
 800336a:	d01d      	beq.n	80033a8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003374:	431a      	orrs	r2, r3
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800337a:	431a      	orrs	r2, r3
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	431a      	orrs	r2, r3
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	049b      	lsls	r3, r3, #18
 8003388:	431a      	orrs	r2, r3
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	431a      	orrs	r2, r3
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	431a      	orrs	r2, r3
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	ea42 0103 	orr.w	r1, r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	615a      	str	r2, [r3, #20]
}
 80033a8:	bf00      	nop
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b088      	sub	sp, #32
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e3d4      	b.n	8003b70 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033c6:	4ba1      	ldr	r3, [pc, #644]	; (800364c <HAL_RCC_OscConfig+0x298>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 030c 	and.w	r3, r3, #12
 80033ce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033d0:	4b9e      	ldr	r3, [pc, #632]	; (800364c <HAL_RCC_OscConfig+0x298>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f003 0303 	and.w	r3, r3, #3
 80033d8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0310 	and.w	r3, r3, #16
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 80e4 	beq.w	80035b0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d007      	beq.n	80033fe <HAL_RCC_OscConfig+0x4a>
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	2b0c      	cmp	r3, #12
 80033f2:	f040 808b 	bne.w	800350c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	f040 8087 	bne.w	800350c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033fe:	4b93      	ldr	r3, [pc, #588]	; (800364c <HAL_RCC_OscConfig+0x298>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d005      	beq.n	8003416 <HAL_RCC_OscConfig+0x62>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e3ac      	b.n	8003b70 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1a      	ldr	r2, [r3, #32]
 800341a:	4b8c      	ldr	r3, [pc, #560]	; (800364c <HAL_RCC_OscConfig+0x298>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0308 	and.w	r3, r3, #8
 8003422:	2b00      	cmp	r3, #0
 8003424:	d004      	beq.n	8003430 <HAL_RCC_OscConfig+0x7c>
 8003426:	4b89      	ldr	r3, [pc, #548]	; (800364c <HAL_RCC_OscConfig+0x298>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800342e:	e005      	b.n	800343c <HAL_RCC_OscConfig+0x88>
 8003430:	4b86      	ldr	r3, [pc, #536]	; (800364c <HAL_RCC_OscConfig+0x298>)
 8003432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003436:	091b      	lsrs	r3, r3, #4
 8003438:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800343c:	4293      	cmp	r3, r2
 800343e:	d223      	bcs.n	8003488 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	4618      	mov	r0, r3
 8003446:	f000 fd41 	bl	8003ecc <RCC_SetFlashLatencyFromMSIRange>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e38d      	b.n	8003b70 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003454:	4b7d      	ldr	r3, [pc, #500]	; (800364c <HAL_RCC_OscConfig+0x298>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a7c      	ldr	r2, [pc, #496]	; (800364c <HAL_RCC_OscConfig+0x298>)
 800345a:	f043 0308 	orr.w	r3, r3, #8
 800345e:	6013      	str	r3, [r2, #0]
 8003460:	4b7a      	ldr	r3, [pc, #488]	; (800364c <HAL_RCC_OscConfig+0x298>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	4977      	ldr	r1, [pc, #476]	; (800364c <HAL_RCC_OscConfig+0x298>)
 800346e:	4313      	orrs	r3, r2
 8003470:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003472:	4b76      	ldr	r3, [pc, #472]	; (800364c <HAL_RCC_OscConfig+0x298>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	021b      	lsls	r3, r3, #8
 8003480:	4972      	ldr	r1, [pc, #456]	; (800364c <HAL_RCC_OscConfig+0x298>)
 8003482:	4313      	orrs	r3, r2
 8003484:	604b      	str	r3, [r1, #4]
 8003486:	e025      	b.n	80034d4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003488:	4b70      	ldr	r3, [pc, #448]	; (800364c <HAL_RCC_OscConfig+0x298>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a6f      	ldr	r2, [pc, #444]	; (800364c <HAL_RCC_OscConfig+0x298>)
 800348e:	f043 0308 	orr.w	r3, r3, #8
 8003492:	6013      	str	r3, [r2, #0]
 8003494:	4b6d      	ldr	r3, [pc, #436]	; (800364c <HAL_RCC_OscConfig+0x298>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	496a      	ldr	r1, [pc, #424]	; (800364c <HAL_RCC_OscConfig+0x298>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034a6:	4b69      	ldr	r3, [pc, #420]	; (800364c <HAL_RCC_OscConfig+0x298>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	021b      	lsls	r3, r3, #8
 80034b4:	4965      	ldr	r1, [pc, #404]	; (800364c <HAL_RCC_OscConfig+0x298>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d109      	bne.n	80034d4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f000 fd01 	bl	8003ecc <RCC_SetFlashLatencyFromMSIRange>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e34d      	b.n	8003b70 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034d4:	f000 fc36 	bl	8003d44 <HAL_RCC_GetSysClockFreq>
 80034d8:	4602      	mov	r2, r0
 80034da:	4b5c      	ldr	r3, [pc, #368]	; (800364c <HAL_RCC_OscConfig+0x298>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	091b      	lsrs	r3, r3, #4
 80034e0:	f003 030f 	and.w	r3, r3, #15
 80034e4:	495a      	ldr	r1, [pc, #360]	; (8003650 <HAL_RCC_OscConfig+0x29c>)
 80034e6:	5ccb      	ldrb	r3, [r1, r3]
 80034e8:	f003 031f 	and.w	r3, r3, #31
 80034ec:	fa22 f303 	lsr.w	r3, r2, r3
 80034f0:	4a58      	ldr	r2, [pc, #352]	; (8003654 <HAL_RCC_OscConfig+0x2a0>)
 80034f2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80034f4:	4b58      	ldr	r3, [pc, #352]	; (8003658 <HAL_RCC_OscConfig+0x2a4>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fe faf9 	bl	8001af0 <HAL_InitTick>
 80034fe:	4603      	mov	r3, r0
 8003500:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003502:	7bfb      	ldrb	r3, [r7, #15]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d052      	beq.n	80035ae <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003508:	7bfb      	ldrb	r3, [r7, #15]
 800350a:	e331      	b.n	8003b70 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d032      	beq.n	800357a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003514:	4b4d      	ldr	r3, [pc, #308]	; (800364c <HAL_RCC_OscConfig+0x298>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a4c      	ldr	r2, [pc, #304]	; (800364c <HAL_RCC_OscConfig+0x298>)
 800351a:	f043 0301 	orr.w	r3, r3, #1
 800351e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003520:	f7fe fb36 	bl	8001b90 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003528:	f7fe fb32 	bl	8001b90 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e31a      	b.n	8003b70 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800353a:	4b44      	ldr	r3, [pc, #272]	; (800364c <HAL_RCC_OscConfig+0x298>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d0f0      	beq.n	8003528 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003546:	4b41      	ldr	r3, [pc, #260]	; (800364c <HAL_RCC_OscConfig+0x298>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a40      	ldr	r2, [pc, #256]	; (800364c <HAL_RCC_OscConfig+0x298>)
 800354c:	f043 0308 	orr.w	r3, r3, #8
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	4b3e      	ldr	r3, [pc, #248]	; (800364c <HAL_RCC_OscConfig+0x298>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	493b      	ldr	r1, [pc, #236]	; (800364c <HAL_RCC_OscConfig+0x298>)
 8003560:	4313      	orrs	r3, r2
 8003562:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003564:	4b39      	ldr	r3, [pc, #228]	; (800364c <HAL_RCC_OscConfig+0x298>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	021b      	lsls	r3, r3, #8
 8003572:	4936      	ldr	r1, [pc, #216]	; (800364c <HAL_RCC_OscConfig+0x298>)
 8003574:	4313      	orrs	r3, r2
 8003576:	604b      	str	r3, [r1, #4]
 8003578:	e01a      	b.n	80035b0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800357a:	4b34      	ldr	r3, [pc, #208]	; (800364c <HAL_RCC_OscConfig+0x298>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a33      	ldr	r2, [pc, #204]	; (800364c <HAL_RCC_OscConfig+0x298>)
 8003580:	f023 0301 	bic.w	r3, r3, #1
 8003584:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003586:	f7fe fb03 	bl	8001b90 <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800358c:	e008      	b.n	80035a0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800358e:	f7fe faff 	bl	8001b90 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e2e7      	b.n	8003b70 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035a0:	4b2a      	ldr	r3, [pc, #168]	; (800364c <HAL_RCC_OscConfig+0x298>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1f0      	bne.n	800358e <HAL_RCC_OscConfig+0x1da>
 80035ac:	e000      	b.n	80035b0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035ae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d074      	beq.n	80036a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	2b08      	cmp	r3, #8
 80035c0:	d005      	beq.n	80035ce <HAL_RCC_OscConfig+0x21a>
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	2b0c      	cmp	r3, #12
 80035c6:	d10e      	bne.n	80035e6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	2b03      	cmp	r3, #3
 80035cc:	d10b      	bne.n	80035e6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ce:	4b1f      	ldr	r3, [pc, #124]	; (800364c <HAL_RCC_OscConfig+0x298>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d064      	beq.n	80036a4 <HAL_RCC_OscConfig+0x2f0>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d160      	bne.n	80036a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e2c4      	b.n	8003b70 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ee:	d106      	bne.n	80035fe <HAL_RCC_OscConfig+0x24a>
 80035f0:	4b16      	ldr	r3, [pc, #88]	; (800364c <HAL_RCC_OscConfig+0x298>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a15      	ldr	r2, [pc, #84]	; (800364c <HAL_RCC_OscConfig+0x298>)
 80035f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035fa:	6013      	str	r3, [r2, #0]
 80035fc:	e01d      	b.n	800363a <HAL_RCC_OscConfig+0x286>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003606:	d10c      	bne.n	8003622 <HAL_RCC_OscConfig+0x26e>
 8003608:	4b10      	ldr	r3, [pc, #64]	; (800364c <HAL_RCC_OscConfig+0x298>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a0f      	ldr	r2, [pc, #60]	; (800364c <HAL_RCC_OscConfig+0x298>)
 800360e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003612:	6013      	str	r3, [r2, #0]
 8003614:	4b0d      	ldr	r3, [pc, #52]	; (800364c <HAL_RCC_OscConfig+0x298>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a0c      	ldr	r2, [pc, #48]	; (800364c <HAL_RCC_OscConfig+0x298>)
 800361a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800361e:	6013      	str	r3, [r2, #0]
 8003620:	e00b      	b.n	800363a <HAL_RCC_OscConfig+0x286>
 8003622:	4b0a      	ldr	r3, [pc, #40]	; (800364c <HAL_RCC_OscConfig+0x298>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a09      	ldr	r2, [pc, #36]	; (800364c <HAL_RCC_OscConfig+0x298>)
 8003628:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800362c:	6013      	str	r3, [r2, #0]
 800362e:	4b07      	ldr	r3, [pc, #28]	; (800364c <HAL_RCC_OscConfig+0x298>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a06      	ldr	r2, [pc, #24]	; (800364c <HAL_RCC_OscConfig+0x298>)
 8003634:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003638:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d01c      	beq.n	800367c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003642:	f7fe faa5 	bl	8001b90 <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003648:	e011      	b.n	800366e <HAL_RCC_OscConfig+0x2ba>
 800364a:	bf00      	nop
 800364c:	40021000 	.word	0x40021000
 8003650:	08006490 	.word	0x08006490
 8003654:	20000000 	.word	0x20000000
 8003658:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800365c:	f7fe fa98 	bl	8001b90 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b64      	cmp	r3, #100	; 0x64
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e280      	b.n	8003b70 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800366e:	4baf      	ldr	r3, [pc, #700]	; (800392c <HAL_RCC_OscConfig+0x578>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0f0      	beq.n	800365c <HAL_RCC_OscConfig+0x2a8>
 800367a:	e014      	b.n	80036a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367c:	f7fe fa88 	bl	8001b90 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003684:	f7fe fa84 	bl	8001b90 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b64      	cmp	r3, #100	; 0x64
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e26c      	b.n	8003b70 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003696:	4ba5      	ldr	r3, [pc, #660]	; (800392c <HAL_RCC_OscConfig+0x578>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1f0      	bne.n	8003684 <HAL_RCC_OscConfig+0x2d0>
 80036a2:	e000      	b.n	80036a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d060      	beq.n	8003774 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d005      	beq.n	80036c4 <HAL_RCC_OscConfig+0x310>
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	2b0c      	cmp	r3, #12
 80036bc:	d119      	bne.n	80036f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d116      	bne.n	80036f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036c4:	4b99      	ldr	r3, [pc, #612]	; (800392c <HAL_RCC_OscConfig+0x578>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d005      	beq.n	80036dc <HAL_RCC_OscConfig+0x328>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e249      	b.n	8003b70 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036dc:	4b93      	ldr	r3, [pc, #588]	; (800392c <HAL_RCC_OscConfig+0x578>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	061b      	lsls	r3, r3, #24
 80036ea:	4990      	ldr	r1, [pc, #576]	; (800392c <HAL_RCC_OscConfig+0x578>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036f0:	e040      	b.n	8003774 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d023      	beq.n	8003742 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036fa:	4b8c      	ldr	r3, [pc, #560]	; (800392c <HAL_RCC_OscConfig+0x578>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a8b      	ldr	r2, [pc, #556]	; (800392c <HAL_RCC_OscConfig+0x578>)
 8003700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003706:	f7fe fa43 	bl	8001b90 <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800370c:	e008      	b.n	8003720 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800370e:	f7fe fa3f 	bl	8001b90 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e227      	b.n	8003b70 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003720:	4b82      	ldr	r3, [pc, #520]	; (800392c <HAL_RCC_OscConfig+0x578>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0f0      	beq.n	800370e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800372c:	4b7f      	ldr	r3, [pc, #508]	; (800392c <HAL_RCC_OscConfig+0x578>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	061b      	lsls	r3, r3, #24
 800373a:	497c      	ldr	r1, [pc, #496]	; (800392c <HAL_RCC_OscConfig+0x578>)
 800373c:	4313      	orrs	r3, r2
 800373e:	604b      	str	r3, [r1, #4]
 8003740:	e018      	b.n	8003774 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003742:	4b7a      	ldr	r3, [pc, #488]	; (800392c <HAL_RCC_OscConfig+0x578>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a79      	ldr	r2, [pc, #484]	; (800392c <HAL_RCC_OscConfig+0x578>)
 8003748:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800374c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374e:	f7fe fa1f 	bl	8001b90 <HAL_GetTick>
 8003752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003754:	e008      	b.n	8003768 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003756:	f7fe fa1b 	bl	8001b90 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e203      	b.n	8003b70 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003768:	4b70      	ldr	r3, [pc, #448]	; (800392c <HAL_RCC_OscConfig+0x578>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1f0      	bne.n	8003756 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0308 	and.w	r3, r3, #8
 800377c:	2b00      	cmp	r3, #0
 800377e:	d03c      	beq.n	80037fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d01c      	beq.n	80037c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003788:	4b68      	ldr	r3, [pc, #416]	; (800392c <HAL_RCC_OscConfig+0x578>)
 800378a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800378e:	4a67      	ldr	r2, [pc, #412]	; (800392c <HAL_RCC_OscConfig+0x578>)
 8003790:	f043 0301 	orr.w	r3, r3, #1
 8003794:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003798:	f7fe f9fa 	bl	8001b90 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037a0:	f7fe f9f6 	bl	8001b90 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e1de      	b.n	8003b70 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037b2:	4b5e      	ldr	r3, [pc, #376]	; (800392c <HAL_RCC_OscConfig+0x578>)
 80037b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0ef      	beq.n	80037a0 <HAL_RCC_OscConfig+0x3ec>
 80037c0:	e01b      	b.n	80037fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037c2:	4b5a      	ldr	r3, [pc, #360]	; (800392c <HAL_RCC_OscConfig+0x578>)
 80037c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037c8:	4a58      	ldr	r2, [pc, #352]	; (800392c <HAL_RCC_OscConfig+0x578>)
 80037ca:	f023 0301 	bic.w	r3, r3, #1
 80037ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d2:	f7fe f9dd 	bl	8001b90 <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037d8:	e008      	b.n	80037ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037da:	f7fe f9d9 	bl	8001b90 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e1c1      	b.n	8003b70 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037ec:	4b4f      	ldr	r3, [pc, #316]	; (800392c <HAL_RCC_OscConfig+0x578>)
 80037ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1ef      	bne.n	80037da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0304 	and.w	r3, r3, #4
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 80a6 	beq.w	8003954 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003808:	2300      	movs	r3, #0
 800380a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800380c:	4b47      	ldr	r3, [pc, #284]	; (800392c <HAL_RCC_OscConfig+0x578>)
 800380e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10d      	bne.n	8003834 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003818:	4b44      	ldr	r3, [pc, #272]	; (800392c <HAL_RCC_OscConfig+0x578>)
 800381a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381c:	4a43      	ldr	r2, [pc, #268]	; (800392c <HAL_RCC_OscConfig+0x578>)
 800381e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003822:	6593      	str	r3, [r2, #88]	; 0x58
 8003824:	4b41      	ldr	r3, [pc, #260]	; (800392c <HAL_RCC_OscConfig+0x578>)
 8003826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800382c:	60bb      	str	r3, [r7, #8]
 800382e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003830:	2301      	movs	r3, #1
 8003832:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003834:	4b3e      	ldr	r3, [pc, #248]	; (8003930 <HAL_RCC_OscConfig+0x57c>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383c:	2b00      	cmp	r3, #0
 800383e:	d118      	bne.n	8003872 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003840:	4b3b      	ldr	r3, [pc, #236]	; (8003930 <HAL_RCC_OscConfig+0x57c>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a3a      	ldr	r2, [pc, #232]	; (8003930 <HAL_RCC_OscConfig+0x57c>)
 8003846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800384a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800384c:	f7fe f9a0 	bl	8001b90 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003854:	f7fe f99c 	bl	8001b90 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e184      	b.n	8003b70 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003866:	4b32      	ldr	r3, [pc, #200]	; (8003930 <HAL_RCC_OscConfig+0x57c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0f0      	beq.n	8003854 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d108      	bne.n	800388c <HAL_RCC_OscConfig+0x4d8>
 800387a:	4b2c      	ldr	r3, [pc, #176]	; (800392c <HAL_RCC_OscConfig+0x578>)
 800387c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003880:	4a2a      	ldr	r2, [pc, #168]	; (800392c <HAL_RCC_OscConfig+0x578>)
 8003882:	f043 0301 	orr.w	r3, r3, #1
 8003886:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800388a:	e024      	b.n	80038d6 <HAL_RCC_OscConfig+0x522>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	2b05      	cmp	r3, #5
 8003892:	d110      	bne.n	80038b6 <HAL_RCC_OscConfig+0x502>
 8003894:	4b25      	ldr	r3, [pc, #148]	; (800392c <HAL_RCC_OscConfig+0x578>)
 8003896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389a:	4a24      	ldr	r2, [pc, #144]	; (800392c <HAL_RCC_OscConfig+0x578>)
 800389c:	f043 0304 	orr.w	r3, r3, #4
 80038a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038a4:	4b21      	ldr	r3, [pc, #132]	; (800392c <HAL_RCC_OscConfig+0x578>)
 80038a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038aa:	4a20      	ldr	r2, [pc, #128]	; (800392c <HAL_RCC_OscConfig+0x578>)
 80038ac:	f043 0301 	orr.w	r3, r3, #1
 80038b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038b4:	e00f      	b.n	80038d6 <HAL_RCC_OscConfig+0x522>
 80038b6:	4b1d      	ldr	r3, [pc, #116]	; (800392c <HAL_RCC_OscConfig+0x578>)
 80038b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038bc:	4a1b      	ldr	r2, [pc, #108]	; (800392c <HAL_RCC_OscConfig+0x578>)
 80038be:	f023 0301 	bic.w	r3, r3, #1
 80038c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038c6:	4b19      	ldr	r3, [pc, #100]	; (800392c <HAL_RCC_OscConfig+0x578>)
 80038c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038cc:	4a17      	ldr	r2, [pc, #92]	; (800392c <HAL_RCC_OscConfig+0x578>)
 80038ce:	f023 0304 	bic.w	r3, r3, #4
 80038d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d016      	beq.n	800390c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038de:	f7fe f957 	bl	8001b90 <HAL_GetTick>
 80038e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038e4:	e00a      	b.n	80038fc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038e6:	f7fe f953 	bl	8001b90 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e139      	b.n	8003b70 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038fc:	4b0b      	ldr	r3, [pc, #44]	; (800392c <HAL_RCC_OscConfig+0x578>)
 80038fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d0ed      	beq.n	80038e6 <HAL_RCC_OscConfig+0x532>
 800390a:	e01a      	b.n	8003942 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800390c:	f7fe f940 	bl	8001b90 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003912:	e00f      	b.n	8003934 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003914:	f7fe f93c 	bl	8001b90 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003922:	4293      	cmp	r3, r2
 8003924:	d906      	bls.n	8003934 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e122      	b.n	8003b70 <HAL_RCC_OscConfig+0x7bc>
 800392a:	bf00      	nop
 800392c:	40021000 	.word	0x40021000
 8003930:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003934:	4b90      	ldr	r3, [pc, #576]	; (8003b78 <HAL_RCC_OscConfig+0x7c4>)
 8003936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1e8      	bne.n	8003914 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003942:	7ffb      	ldrb	r3, [r7, #31]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d105      	bne.n	8003954 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003948:	4b8b      	ldr	r3, [pc, #556]	; (8003b78 <HAL_RCC_OscConfig+0x7c4>)
 800394a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394c:	4a8a      	ldr	r2, [pc, #552]	; (8003b78 <HAL_RCC_OscConfig+0x7c4>)
 800394e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003952:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 8108 	beq.w	8003b6e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003962:	2b02      	cmp	r3, #2
 8003964:	f040 80d0 	bne.w	8003b08 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003968:	4b83      	ldr	r3, [pc, #524]	; (8003b78 <HAL_RCC_OscConfig+0x7c4>)
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f003 0203 	and.w	r2, r3, #3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003978:	429a      	cmp	r2, r3
 800397a:	d130      	bne.n	80039de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	3b01      	subs	r3, #1
 8003988:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800398a:	429a      	cmp	r2, r3
 800398c:	d127      	bne.n	80039de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003998:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800399a:	429a      	cmp	r2, r3
 800399c:	d11f      	bne.n	80039de <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039a8:	2a07      	cmp	r2, #7
 80039aa:	bf14      	ite	ne
 80039ac:	2201      	movne	r2, #1
 80039ae:	2200      	moveq	r2, #0
 80039b0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d113      	bne.n	80039de <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c0:	085b      	lsrs	r3, r3, #1
 80039c2:	3b01      	subs	r3, #1
 80039c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d109      	bne.n	80039de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	085b      	lsrs	r3, r3, #1
 80039d6:	3b01      	subs	r3, #1
 80039d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039da:	429a      	cmp	r2, r3
 80039dc:	d06e      	beq.n	8003abc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	2b0c      	cmp	r3, #12
 80039e2:	d069      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80039e4:	4b64      	ldr	r3, [pc, #400]	; (8003b78 <HAL_RCC_OscConfig+0x7c4>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d105      	bne.n	80039fc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80039f0:	4b61      	ldr	r3, [pc, #388]	; (8003b78 <HAL_RCC_OscConfig+0x7c4>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e0b7      	b.n	8003b70 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a00:	4b5d      	ldr	r3, [pc, #372]	; (8003b78 <HAL_RCC_OscConfig+0x7c4>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a5c      	ldr	r2, [pc, #368]	; (8003b78 <HAL_RCC_OscConfig+0x7c4>)
 8003a06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a0a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a0c:	f7fe f8c0 	bl	8001b90 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a14:	f7fe f8bc 	bl	8001b90 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e0a4      	b.n	8003b70 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a26:	4b54      	ldr	r3, [pc, #336]	; (8003b78 <HAL_RCC_OscConfig+0x7c4>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1f0      	bne.n	8003a14 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a32:	4b51      	ldr	r3, [pc, #324]	; (8003b78 <HAL_RCC_OscConfig+0x7c4>)
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	4b51      	ldr	r3, [pc, #324]	; (8003b7c <HAL_RCC_OscConfig+0x7c8>)
 8003a38:	4013      	ands	r3, r2
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a42:	3a01      	subs	r2, #1
 8003a44:	0112      	lsls	r2, r2, #4
 8003a46:	4311      	orrs	r1, r2
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a4c:	0212      	lsls	r2, r2, #8
 8003a4e:	4311      	orrs	r1, r2
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a54:	0852      	lsrs	r2, r2, #1
 8003a56:	3a01      	subs	r2, #1
 8003a58:	0552      	lsls	r2, r2, #21
 8003a5a:	4311      	orrs	r1, r2
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a60:	0852      	lsrs	r2, r2, #1
 8003a62:	3a01      	subs	r2, #1
 8003a64:	0652      	lsls	r2, r2, #25
 8003a66:	4311      	orrs	r1, r2
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a6c:	0912      	lsrs	r2, r2, #4
 8003a6e:	0452      	lsls	r2, r2, #17
 8003a70:	430a      	orrs	r2, r1
 8003a72:	4941      	ldr	r1, [pc, #260]	; (8003b78 <HAL_RCC_OscConfig+0x7c4>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a78:	4b3f      	ldr	r3, [pc, #252]	; (8003b78 <HAL_RCC_OscConfig+0x7c4>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a3e      	ldr	r2, [pc, #248]	; (8003b78 <HAL_RCC_OscConfig+0x7c4>)
 8003a7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a82:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a84:	4b3c      	ldr	r3, [pc, #240]	; (8003b78 <HAL_RCC_OscConfig+0x7c4>)
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	4a3b      	ldr	r2, [pc, #236]	; (8003b78 <HAL_RCC_OscConfig+0x7c4>)
 8003a8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a8e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a90:	f7fe f87e 	bl	8001b90 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a98:	f7fe f87a 	bl	8001b90 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e062      	b.n	8003b70 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aaa:	4b33      	ldr	r3, [pc, #204]	; (8003b78 <HAL_RCC_OscConfig+0x7c4>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0f0      	beq.n	8003a98 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ab6:	e05a      	b.n	8003b6e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e059      	b.n	8003b70 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003abc:	4b2e      	ldr	r3, [pc, #184]	; (8003b78 <HAL_RCC_OscConfig+0x7c4>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d152      	bne.n	8003b6e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ac8:	4b2b      	ldr	r3, [pc, #172]	; (8003b78 <HAL_RCC_OscConfig+0x7c4>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a2a      	ldr	r2, [pc, #168]	; (8003b78 <HAL_RCC_OscConfig+0x7c4>)
 8003ace:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ad2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ad4:	4b28      	ldr	r3, [pc, #160]	; (8003b78 <HAL_RCC_OscConfig+0x7c4>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	4a27      	ldr	r2, [pc, #156]	; (8003b78 <HAL_RCC_OscConfig+0x7c4>)
 8003ada:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ade:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ae0:	f7fe f856 	bl	8001b90 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ae8:	f7fe f852 	bl	8001b90 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e03a      	b.n	8003b70 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003afa:	4b1f      	ldr	r3, [pc, #124]	; (8003b78 <HAL_RCC_OscConfig+0x7c4>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d0f0      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x734>
 8003b06:	e032      	b.n	8003b6e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	2b0c      	cmp	r3, #12
 8003b0c:	d02d      	beq.n	8003b6a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b0e:	4b1a      	ldr	r3, [pc, #104]	; (8003b78 <HAL_RCC_OscConfig+0x7c4>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a19      	ldr	r2, [pc, #100]	; (8003b78 <HAL_RCC_OscConfig+0x7c4>)
 8003b14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b18:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003b1a:	4b17      	ldr	r3, [pc, #92]	; (8003b78 <HAL_RCC_OscConfig+0x7c4>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d105      	bne.n	8003b32 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003b26:	4b14      	ldr	r3, [pc, #80]	; (8003b78 <HAL_RCC_OscConfig+0x7c4>)
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	4a13      	ldr	r2, [pc, #76]	; (8003b78 <HAL_RCC_OscConfig+0x7c4>)
 8003b2c:	f023 0303 	bic.w	r3, r3, #3
 8003b30:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003b32:	4b11      	ldr	r3, [pc, #68]	; (8003b78 <HAL_RCC_OscConfig+0x7c4>)
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	4a10      	ldr	r2, [pc, #64]	; (8003b78 <HAL_RCC_OscConfig+0x7c4>)
 8003b38:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003b3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b40:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b42:	f7fe f825 	bl	8001b90 <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b48:	e008      	b.n	8003b5c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b4a:	f7fe f821 	bl	8001b90 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e009      	b.n	8003b70 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b5c:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <HAL_RCC_OscConfig+0x7c4>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1f0      	bne.n	8003b4a <HAL_RCC_OscConfig+0x796>
 8003b68:	e001      	b.n	8003b6e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e000      	b.n	8003b70 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3720      	adds	r7, #32
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	f99d808c 	.word	0xf99d808c

08003b80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e0c8      	b.n	8003d26 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b94:	4b66      	ldr	r3, [pc, #408]	; (8003d30 <HAL_RCC_ClockConfig+0x1b0>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0307 	and.w	r3, r3, #7
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d910      	bls.n	8003bc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba2:	4b63      	ldr	r3, [pc, #396]	; (8003d30 <HAL_RCC_ClockConfig+0x1b0>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f023 0207 	bic.w	r2, r3, #7
 8003baa:	4961      	ldr	r1, [pc, #388]	; (8003d30 <HAL_RCC_ClockConfig+0x1b0>)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb2:	4b5f      	ldr	r3, [pc, #380]	; (8003d30 <HAL_RCC_ClockConfig+0x1b0>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d001      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0b0      	b.n	8003d26 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d04c      	beq.n	8003c6a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	d107      	bne.n	8003be8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bd8:	4b56      	ldr	r3, [pc, #344]	; (8003d34 <HAL_RCC_ClockConfig+0x1b4>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d121      	bne.n	8003c28 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e09e      	b.n	8003d26 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d107      	bne.n	8003c00 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bf0:	4b50      	ldr	r3, [pc, #320]	; (8003d34 <HAL_RCC_ClockConfig+0x1b4>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d115      	bne.n	8003c28 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e092      	b.n	8003d26 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d107      	bne.n	8003c18 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c08:	4b4a      	ldr	r3, [pc, #296]	; (8003d34 <HAL_RCC_ClockConfig+0x1b4>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d109      	bne.n	8003c28 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e086      	b.n	8003d26 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c18:	4b46      	ldr	r3, [pc, #280]	; (8003d34 <HAL_RCC_ClockConfig+0x1b4>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e07e      	b.n	8003d26 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c28:	4b42      	ldr	r3, [pc, #264]	; (8003d34 <HAL_RCC_ClockConfig+0x1b4>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f023 0203 	bic.w	r2, r3, #3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	493f      	ldr	r1, [pc, #252]	; (8003d34 <HAL_RCC_ClockConfig+0x1b4>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c3a:	f7fd ffa9 	bl	8001b90 <HAL_GetTick>
 8003c3e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c40:	e00a      	b.n	8003c58 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c42:	f7fd ffa5 	bl	8001b90 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e066      	b.n	8003d26 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c58:	4b36      	ldr	r3, [pc, #216]	; (8003d34 <HAL_RCC_ClockConfig+0x1b4>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 020c 	and.w	r2, r3, #12
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d1eb      	bne.n	8003c42 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d008      	beq.n	8003c88 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c76:	4b2f      	ldr	r3, [pc, #188]	; (8003d34 <HAL_RCC_ClockConfig+0x1b4>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	492c      	ldr	r1, [pc, #176]	; (8003d34 <HAL_RCC_ClockConfig+0x1b4>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c88:	4b29      	ldr	r3, [pc, #164]	; (8003d30 <HAL_RCC_ClockConfig+0x1b0>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d210      	bcs.n	8003cb8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c96:	4b26      	ldr	r3, [pc, #152]	; (8003d30 <HAL_RCC_ClockConfig+0x1b0>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f023 0207 	bic.w	r2, r3, #7
 8003c9e:	4924      	ldr	r1, [pc, #144]	; (8003d30 <HAL_RCC_ClockConfig+0x1b0>)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca6:	4b22      	ldr	r3, [pc, #136]	; (8003d30 <HAL_RCC_ClockConfig+0x1b0>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d001      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e036      	b.n	8003d26 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d008      	beq.n	8003cd6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cc4:	4b1b      	ldr	r3, [pc, #108]	; (8003d34 <HAL_RCC_ClockConfig+0x1b4>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	4918      	ldr	r1, [pc, #96]	; (8003d34 <HAL_RCC_ClockConfig+0x1b4>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0308 	and.w	r3, r3, #8
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d009      	beq.n	8003cf6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ce2:	4b14      	ldr	r3, [pc, #80]	; (8003d34 <HAL_RCC_ClockConfig+0x1b4>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	4910      	ldr	r1, [pc, #64]	; (8003d34 <HAL_RCC_ClockConfig+0x1b4>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cf6:	f000 f825 	bl	8003d44 <HAL_RCC_GetSysClockFreq>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	4b0d      	ldr	r3, [pc, #52]	; (8003d34 <HAL_RCC_ClockConfig+0x1b4>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	091b      	lsrs	r3, r3, #4
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	490c      	ldr	r1, [pc, #48]	; (8003d38 <HAL_RCC_ClockConfig+0x1b8>)
 8003d08:	5ccb      	ldrb	r3, [r1, r3]
 8003d0a:	f003 031f 	and.w	r3, r3, #31
 8003d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d12:	4a0a      	ldr	r2, [pc, #40]	; (8003d3c <HAL_RCC_ClockConfig+0x1bc>)
 8003d14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d16:	4b0a      	ldr	r3, [pc, #40]	; (8003d40 <HAL_RCC_ClockConfig+0x1c0>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7fd fee8 	bl	8001af0 <HAL_InitTick>
 8003d20:	4603      	mov	r3, r0
 8003d22:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d24:	7afb      	ldrb	r3, [r7, #11]
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	40022000 	.word	0x40022000
 8003d34:	40021000 	.word	0x40021000
 8003d38:	08006490 	.word	0x08006490
 8003d3c:	20000000 	.word	0x20000000
 8003d40:	20000004 	.word	0x20000004

08003d44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b089      	sub	sp, #36	; 0x24
 8003d48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	61fb      	str	r3, [r7, #28]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d52:	4b3e      	ldr	r3, [pc, #248]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f003 030c 	and.w	r3, r3, #12
 8003d5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d5c:	4b3b      	ldr	r3, [pc, #236]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f003 0303 	and.w	r3, r3, #3
 8003d64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d005      	beq.n	8003d78 <HAL_RCC_GetSysClockFreq+0x34>
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	2b0c      	cmp	r3, #12
 8003d70:	d121      	bne.n	8003db6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d11e      	bne.n	8003db6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d78:	4b34      	ldr	r3, [pc, #208]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0308 	and.w	r3, r3, #8
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d107      	bne.n	8003d94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d84:	4b31      	ldr	r3, [pc, #196]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d8a:	0a1b      	lsrs	r3, r3, #8
 8003d8c:	f003 030f 	and.w	r3, r3, #15
 8003d90:	61fb      	str	r3, [r7, #28]
 8003d92:	e005      	b.n	8003da0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d94:	4b2d      	ldr	r3, [pc, #180]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	091b      	lsrs	r3, r3, #4
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003da0:	4a2b      	ldr	r2, [pc, #172]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003da8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10d      	bne.n	8003dcc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003db4:	e00a      	b.n	8003dcc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	2b04      	cmp	r3, #4
 8003dba:	d102      	bne.n	8003dc2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003dbc:	4b25      	ldr	r3, [pc, #148]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x110>)
 8003dbe:	61bb      	str	r3, [r7, #24]
 8003dc0:	e004      	b.n	8003dcc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	2b08      	cmp	r3, #8
 8003dc6:	d101      	bne.n	8003dcc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003dc8:	4b23      	ldr	r3, [pc, #140]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x114>)
 8003dca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	2b0c      	cmp	r3, #12
 8003dd0:	d134      	bne.n	8003e3c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003dd2:	4b1e      	ldr	r3, [pc, #120]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d003      	beq.n	8003dea <HAL_RCC_GetSysClockFreq+0xa6>
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	2b03      	cmp	r3, #3
 8003de6:	d003      	beq.n	8003df0 <HAL_RCC_GetSysClockFreq+0xac>
 8003de8:	e005      	b.n	8003df6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003dea:	4b1a      	ldr	r3, [pc, #104]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x110>)
 8003dec:	617b      	str	r3, [r7, #20]
      break;
 8003dee:	e005      	b.n	8003dfc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003df0:	4b19      	ldr	r3, [pc, #100]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x114>)
 8003df2:	617b      	str	r3, [r7, #20]
      break;
 8003df4:	e002      	b.n	8003dfc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	617b      	str	r3, [r7, #20]
      break;
 8003dfa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003dfc:	4b13      	ldr	r3, [pc, #76]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	091b      	lsrs	r3, r3, #4
 8003e02:	f003 0307 	and.w	r3, r3, #7
 8003e06:	3301      	adds	r3, #1
 8003e08:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e0a:	4b10      	ldr	r3, [pc, #64]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	0a1b      	lsrs	r3, r3, #8
 8003e10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	fb02 f203 	mul.w	r2, r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e20:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e22:	4b0a      	ldr	r3, [pc, #40]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	0e5b      	lsrs	r3, r3, #25
 8003e28:	f003 0303 	and.w	r3, r3, #3
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e3c:	69bb      	ldr	r3, [r7, #24]
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3724      	adds	r7, #36	; 0x24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	080064a8 	.word	0x080064a8
 8003e54:	00f42400 	.word	0x00f42400
 8003e58:	007a1200 	.word	0x007a1200

08003e5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e60:	4b03      	ldr	r3, [pc, #12]	; (8003e70 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e62:	681b      	ldr	r3, [r3, #0]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	20000000 	.word	0x20000000

08003e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e78:	f7ff fff0 	bl	8003e5c <HAL_RCC_GetHCLKFreq>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	0a1b      	lsrs	r3, r3, #8
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	4904      	ldr	r1, [pc, #16]	; (8003e9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e8a:	5ccb      	ldrb	r3, [r1, r3]
 8003e8c:	f003 031f 	and.w	r3, r3, #31
 8003e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	080064a0 	.word	0x080064a0

08003ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ea4:	f7ff ffda 	bl	8003e5c <HAL_RCC_GetHCLKFreq>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	4b06      	ldr	r3, [pc, #24]	; (8003ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	0adb      	lsrs	r3, r3, #11
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	4904      	ldr	r1, [pc, #16]	; (8003ec8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003eb6:	5ccb      	ldrb	r3, [r1, r3]
 8003eb8:	f003 031f 	and.w	r3, r3, #31
 8003ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	080064a0 	.word	0x080064a0

08003ecc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ed8:	4b2a      	ldr	r3, [pc, #168]	; (8003f84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ee4:	f7fe fd12 	bl	800290c <HAL_PWREx_GetVoltageRange>
 8003ee8:	6178      	str	r0, [r7, #20]
 8003eea:	e014      	b.n	8003f16 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003eec:	4b25      	ldr	r3, [pc, #148]	; (8003f84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef0:	4a24      	ldr	r2, [pc, #144]	; (8003f84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ef6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ef8:	4b22      	ldr	r3, [pc, #136]	; (8003f84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f04:	f7fe fd02 	bl	800290c <HAL_PWREx_GetVoltageRange>
 8003f08:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f0a:	4b1e      	ldr	r3, [pc, #120]	; (8003f84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0e:	4a1d      	ldr	r2, [pc, #116]	; (8003f84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f14:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f1c:	d10b      	bne.n	8003f36 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2b80      	cmp	r3, #128	; 0x80
 8003f22:	d919      	bls.n	8003f58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2ba0      	cmp	r3, #160	; 0xa0
 8003f28:	d902      	bls.n	8003f30 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	613b      	str	r3, [r7, #16]
 8003f2e:	e013      	b.n	8003f58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f30:	2301      	movs	r3, #1
 8003f32:	613b      	str	r3, [r7, #16]
 8003f34:	e010      	b.n	8003f58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2b80      	cmp	r3, #128	; 0x80
 8003f3a:	d902      	bls.n	8003f42 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	613b      	str	r3, [r7, #16]
 8003f40:	e00a      	b.n	8003f58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b80      	cmp	r3, #128	; 0x80
 8003f46:	d102      	bne.n	8003f4e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f48:	2302      	movs	r3, #2
 8003f4a:	613b      	str	r3, [r7, #16]
 8003f4c:	e004      	b.n	8003f58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b70      	cmp	r3, #112	; 0x70
 8003f52:	d101      	bne.n	8003f58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f54:	2301      	movs	r3, #1
 8003f56:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f58:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f023 0207 	bic.w	r2, r3, #7
 8003f60:	4909      	ldr	r1, [pc, #36]	; (8003f88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f68:	4b07      	ldr	r3, [pc, #28]	; (8003f88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d001      	beq.n	8003f7a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e000      	b.n	8003f7c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3718      	adds	r7, #24
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40021000 	.word	0x40021000
 8003f88:	40022000 	.word	0x40022000

08003f8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f94:	2300      	movs	r3, #0
 8003f96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f98:	2300      	movs	r3, #0
 8003f9a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d041      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003fb0:	d02a      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003fb2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003fb6:	d824      	bhi.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003fb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fbc:	d008      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003fbe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fc2:	d81e      	bhi.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00a      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003fc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fcc:	d010      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003fce:	e018      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fd0:	4b86      	ldr	r3, [pc, #536]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	4a85      	ldr	r2, [pc, #532]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fda:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fdc:	e015      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f000 facb 	bl	8004580 <RCCEx_PLLSAI1_Config>
 8003fea:	4603      	mov	r3, r0
 8003fec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fee:	e00c      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3320      	adds	r3, #32
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 fbb6 	bl	8004768 <RCCEx_PLLSAI2_Config>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004000:	e003      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	74fb      	strb	r3, [r7, #19]
      break;
 8004006:	e000      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004008:	bf00      	nop
    }

    if(ret == HAL_OK)
 800400a:	7cfb      	ldrb	r3, [r7, #19]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10b      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004010:	4b76      	ldr	r3, [pc, #472]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004016:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800401e:	4973      	ldr	r1, [pc, #460]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004020:	4313      	orrs	r3, r2
 8004022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004026:	e001      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004028:	7cfb      	ldrb	r3, [r7, #19]
 800402a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d041      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800403c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004040:	d02a      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004042:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004046:	d824      	bhi.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004048:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800404c:	d008      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800404e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004052:	d81e      	bhi.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00a      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004058:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800405c:	d010      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800405e:	e018      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004060:	4b62      	ldr	r3, [pc, #392]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	4a61      	ldr	r2, [pc, #388]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800406a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800406c:	e015      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	3304      	adds	r3, #4
 8004072:	2100      	movs	r1, #0
 8004074:	4618      	mov	r0, r3
 8004076:	f000 fa83 	bl	8004580 <RCCEx_PLLSAI1_Config>
 800407a:	4603      	mov	r3, r0
 800407c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800407e:	e00c      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3320      	adds	r3, #32
 8004084:	2100      	movs	r1, #0
 8004086:	4618      	mov	r0, r3
 8004088:	f000 fb6e 	bl	8004768 <RCCEx_PLLSAI2_Config>
 800408c:	4603      	mov	r3, r0
 800408e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004090:	e003      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	74fb      	strb	r3, [r7, #19]
      break;
 8004096:	e000      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004098:	bf00      	nop
    }

    if(ret == HAL_OK)
 800409a:	7cfb      	ldrb	r3, [r7, #19]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10b      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80040a0:	4b52      	ldr	r3, [pc, #328]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040ae:	494f      	ldr	r1, [pc, #316]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80040b6:	e001      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b8:	7cfb      	ldrb	r3, [r7, #19]
 80040ba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 80a0 	beq.w	800420a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ca:	2300      	movs	r3, #0
 80040cc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040ce:	4b47      	ldr	r3, [pc, #284]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x152>
 80040da:	2301      	movs	r3, #1
 80040dc:	e000      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80040de:	2300      	movs	r3, #0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00d      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040e4:	4b41      	ldr	r3, [pc, #260]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e8:	4a40      	ldr	r2, [pc, #256]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ee:	6593      	str	r3, [r2, #88]	; 0x58
 80040f0:	4b3e      	ldr	r3, [pc, #248]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f8:	60bb      	str	r3, [r7, #8]
 80040fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040fc:	2301      	movs	r3, #1
 80040fe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004100:	4b3b      	ldr	r3, [pc, #236]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a3a      	ldr	r2, [pc, #232]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800410a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800410c:	f7fd fd40 	bl	8001b90 <HAL_GetTick>
 8004110:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004112:	e009      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004114:	f7fd fd3c 	bl	8001b90 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d902      	bls.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	74fb      	strb	r3, [r7, #19]
        break;
 8004126:	e005      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004128:	4b31      	ldr	r3, [pc, #196]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004130:	2b00      	cmp	r3, #0
 8004132:	d0ef      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004134:	7cfb      	ldrb	r3, [r7, #19]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d15c      	bne.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800413a:	4b2c      	ldr	r3, [pc, #176]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800413c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004140:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004144:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d01f      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	429a      	cmp	r2, r3
 8004156:	d019      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004158:	4b24      	ldr	r3, [pc, #144]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800415a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004162:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004164:	4b21      	ldr	r3, [pc, #132]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416a:	4a20      	ldr	r2, [pc, #128]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800416c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004170:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004174:	4b1d      	ldr	r3, [pc, #116]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417a:	4a1c      	ldr	r2, [pc, #112]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800417c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004180:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004184:	4a19      	ldr	r2, [pc, #100]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d016      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004196:	f7fd fcfb 	bl	8001b90 <HAL_GetTick>
 800419a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800419c:	e00b      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800419e:	f7fd fcf7 	bl	8001b90 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d902      	bls.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	74fb      	strb	r3, [r7, #19]
            break;
 80041b4:	e006      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041b6:	4b0d      	ldr	r3, [pc, #52]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d0ec      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80041c4:	7cfb      	ldrb	r3, [r7, #19]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10c      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041ca:	4b08      	ldr	r3, [pc, #32]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041da:	4904      	ldr	r1, [pc, #16]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80041e2:	e009      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041e4:	7cfb      	ldrb	r3, [r7, #19]
 80041e6:	74bb      	strb	r3, [r7, #18]
 80041e8:	e006      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80041ea:	bf00      	nop
 80041ec:	40021000 	.word	0x40021000
 80041f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f4:	7cfb      	ldrb	r3, [r7, #19]
 80041f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041f8:	7c7b      	ldrb	r3, [r7, #17]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d105      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041fe:	4b9e      	ldr	r3, [pc, #632]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004202:	4a9d      	ldr	r2, [pc, #628]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004204:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004208:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004216:	4b98      	ldr	r3, [pc, #608]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421c:	f023 0203 	bic.w	r2, r3, #3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004224:	4994      	ldr	r1, [pc, #592]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00a      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004238:	4b8f      	ldr	r3, [pc, #572]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800423a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423e:	f023 020c 	bic.w	r2, r3, #12
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004246:	498c      	ldr	r1, [pc, #560]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0304 	and.w	r3, r3, #4
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800425a:	4b87      	ldr	r3, [pc, #540]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800425c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004260:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004268:	4983      	ldr	r1, [pc, #524]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800426a:	4313      	orrs	r3, r2
 800426c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0308 	and.w	r3, r3, #8
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00a      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800427c:	4b7e      	ldr	r3, [pc, #504]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800427e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004282:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428a:	497b      	ldr	r1, [pc, #492]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800428c:	4313      	orrs	r3, r2
 800428e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0310 	and.w	r3, r3, #16
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00a      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800429e:	4b76      	ldr	r3, [pc, #472]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ac:	4972      	ldr	r1, [pc, #456]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0320 	and.w	r3, r3, #32
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00a      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042c0:	4b6d      	ldr	r3, [pc, #436]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ce:	496a      	ldr	r1, [pc, #424]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00a      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042e2:	4b65      	ldr	r3, [pc, #404]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f0:	4961      	ldr	r1, [pc, #388]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00a      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004304:	4b5c      	ldr	r3, [pc, #368]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004312:	4959      	ldr	r1, [pc, #356]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004314:	4313      	orrs	r3, r2
 8004316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00a      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004326:	4b54      	ldr	r3, [pc, #336]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004334:	4950      	ldr	r1, [pc, #320]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004336:	4313      	orrs	r3, r2
 8004338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00a      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004348:	4b4b      	ldr	r3, [pc, #300]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800434a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004356:	4948      	ldr	r1, [pc, #288]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004358:	4313      	orrs	r3, r2
 800435a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00a      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800436a:	4b43      	ldr	r3, [pc, #268]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800436c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004370:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004378:	493f      	ldr	r1, [pc, #252]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800437a:	4313      	orrs	r3, r2
 800437c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d028      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800438c:	4b3a      	ldr	r3, [pc, #232]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800438e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004392:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800439a:	4937      	ldr	r1, [pc, #220]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800439c:	4313      	orrs	r3, r2
 800439e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043aa:	d106      	bne.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043ac:	4b32      	ldr	r3, [pc, #200]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	4a31      	ldr	r2, [pc, #196]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043b6:	60d3      	str	r3, [r2, #12]
 80043b8:	e011      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043c2:	d10c      	bne.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	3304      	adds	r3, #4
 80043c8:	2101      	movs	r1, #1
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 f8d8 	bl	8004580 <RCCEx_PLLSAI1_Config>
 80043d0:	4603      	mov	r3, r0
 80043d2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80043d4:	7cfb      	ldrb	r3, [r7, #19]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80043da:	7cfb      	ldrb	r3, [r7, #19]
 80043dc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d028      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80043ea:	4b23      	ldr	r3, [pc, #140]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f8:	491f      	ldr	r1, [pc, #124]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004404:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004408:	d106      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800440a:	4b1b      	ldr	r3, [pc, #108]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	4a1a      	ldr	r2, [pc, #104]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004410:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004414:	60d3      	str	r3, [r2, #12]
 8004416:	e011      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004420:	d10c      	bne.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	3304      	adds	r3, #4
 8004426:	2101      	movs	r1, #1
 8004428:	4618      	mov	r0, r3
 800442a:	f000 f8a9 	bl	8004580 <RCCEx_PLLSAI1_Config>
 800442e:	4603      	mov	r3, r0
 8004430:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004432:	7cfb      	ldrb	r3, [r7, #19]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004438:	7cfb      	ldrb	r3, [r7, #19]
 800443a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d02b      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004448:	4b0b      	ldr	r3, [pc, #44]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800444a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004456:	4908      	ldr	r1, [pc, #32]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004458:	4313      	orrs	r3, r2
 800445a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004462:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004466:	d109      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004468:	4b03      	ldr	r3, [pc, #12]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	4a02      	ldr	r2, [pc, #8]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800446e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004472:	60d3      	str	r3, [r2, #12]
 8004474:	e014      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004476:	bf00      	nop
 8004478:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004480:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004484:	d10c      	bne.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	3304      	adds	r3, #4
 800448a:	2101      	movs	r1, #1
 800448c:	4618      	mov	r0, r3
 800448e:	f000 f877 	bl	8004580 <RCCEx_PLLSAI1_Config>
 8004492:	4603      	mov	r3, r0
 8004494:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004496:	7cfb      	ldrb	r3, [r7, #19]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800449c:	7cfb      	ldrb	r3, [r7, #19]
 800449e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d02f      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044ac:	4b2b      	ldr	r3, [pc, #172]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044ba:	4928      	ldr	r1, [pc, #160]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044ca:	d10d      	bne.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3304      	adds	r3, #4
 80044d0:	2102      	movs	r1, #2
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 f854 	bl	8004580 <RCCEx_PLLSAI1_Config>
 80044d8:	4603      	mov	r3, r0
 80044da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044dc:	7cfb      	ldrb	r3, [r7, #19]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d014      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80044e2:	7cfb      	ldrb	r3, [r7, #19]
 80044e4:	74bb      	strb	r3, [r7, #18]
 80044e6:	e011      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044f0:	d10c      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	3320      	adds	r3, #32
 80044f6:	2102      	movs	r1, #2
 80044f8:	4618      	mov	r0, r3
 80044fa:	f000 f935 	bl	8004768 <RCCEx_PLLSAI2_Config>
 80044fe:	4603      	mov	r3, r0
 8004500:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004502:	7cfb      	ldrb	r3, [r7, #19]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d001      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004508:	7cfb      	ldrb	r3, [r7, #19]
 800450a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00a      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004518:	4b10      	ldr	r3, [pc, #64]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800451a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004526:	490d      	ldr	r1, [pc, #52]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004528:	4313      	orrs	r3, r2
 800452a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00b      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800453a:	4b08      	ldr	r3, [pc, #32]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800453c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004540:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800454a:	4904      	ldr	r1, [pc, #16]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800454c:	4313      	orrs	r3, r2
 800454e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004552:	7cbb      	ldrb	r3, [r7, #18]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3718      	adds	r7, #24
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40021000 	.word	0x40021000

08004560 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004564:	4b05      	ldr	r3, [pc, #20]	; (800457c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a04      	ldr	r2, [pc, #16]	; (800457c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800456a:	f043 0304 	orr.w	r3, r3, #4
 800456e:	6013      	str	r3, [r2, #0]
}
 8004570:	bf00      	nop
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	40021000 	.word	0x40021000

08004580 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800458e:	4b75      	ldr	r3, [pc, #468]	; (8004764 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	f003 0303 	and.w	r3, r3, #3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d018      	beq.n	80045cc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800459a:	4b72      	ldr	r3, [pc, #456]	; (8004764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	f003 0203 	and.w	r2, r3, #3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d10d      	bne.n	80045c6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
       ||
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d009      	beq.n	80045c6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80045b2:	4b6c      	ldr	r3, [pc, #432]	; (8004764 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	091b      	lsrs	r3, r3, #4
 80045b8:	f003 0307 	and.w	r3, r3, #7
 80045bc:	1c5a      	adds	r2, r3, #1
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
       ||
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d047      	beq.n	8004656 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	73fb      	strb	r3, [r7, #15]
 80045ca:	e044      	b.n	8004656 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b03      	cmp	r3, #3
 80045d2:	d018      	beq.n	8004606 <RCCEx_PLLSAI1_Config+0x86>
 80045d4:	2b03      	cmp	r3, #3
 80045d6:	d825      	bhi.n	8004624 <RCCEx_PLLSAI1_Config+0xa4>
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d002      	beq.n	80045e2 <RCCEx_PLLSAI1_Config+0x62>
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d009      	beq.n	80045f4 <RCCEx_PLLSAI1_Config+0x74>
 80045e0:	e020      	b.n	8004624 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045e2:	4b60      	ldr	r3, [pc, #384]	; (8004764 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d11d      	bne.n	800462a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045f2:	e01a      	b.n	800462a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045f4:	4b5b      	ldr	r3, [pc, #364]	; (8004764 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d116      	bne.n	800462e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004604:	e013      	b.n	800462e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004606:	4b57      	ldr	r3, [pc, #348]	; (8004764 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10f      	bne.n	8004632 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004612:	4b54      	ldr	r3, [pc, #336]	; (8004764 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d109      	bne.n	8004632 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004622:	e006      	b.n	8004632 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	73fb      	strb	r3, [r7, #15]
      break;
 8004628:	e004      	b.n	8004634 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800462a:	bf00      	nop
 800462c:	e002      	b.n	8004634 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800462e:	bf00      	nop
 8004630:	e000      	b.n	8004634 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004632:	bf00      	nop
    }

    if(status == HAL_OK)
 8004634:	7bfb      	ldrb	r3, [r7, #15]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10d      	bne.n	8004656 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800463a:	4b4a      	ldr	r3, [pc, #296]	; (8004764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6819      	ldr	r1, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	3b01      	subs	r3, #1
 800464c:	011b      	lsls	r3, r3, #4
 800464e:	430b      	orrs	r3, r1
 8004650:	4944      	ldr	r1, [pc, #272]	; (8004764 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004652:	4313      	orrs	r3, r2
 8004654:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004656:	7bfb      	ldrb	r3, [r7, #15]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d17d      	bne.n	8004758 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800465c:	4b41      	ldr	r3, [pc, #260]	; (8004764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a40      	ldr	r2, [pc, #256]	; (8004764 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004662:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004666:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004668:	f7fd fa92 	bl	8001b90 <HAL_GetTick>
 800466c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800466e:	e009      	b.n	8004684 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004670:	f7fd fa8e 	bl	8001b90 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d902      	bls.n	8004684 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	73fb      	strb	r3, [r7, #15]
        break;
 8004682:	e005      	b.n	8004690 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004684:	4b37      	ldr	r3, [pc, #220]	; (8004764 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1ef      	bne.n	8004670 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004690:	7bfb      	ldrb	r3, [r7, #15]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d160      	bne.n	8004758 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d111      	bne.n	80046c0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800469c:	4b31      	ldr	r3, [pc, #196]	; (8004764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80046a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	6892      	ldr	r2, [r2, #8]
 80046ac:	0211      	lsls	r1, r2, #8
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	68d2      	ldr	r2, [r2, #12]
 80046b2:	0912      	lsrs	r2, r2, #4
 80046b4:	0452      	lsls	r2, r2, #17
 80046b6:	430a      	orrs	r2, r1
 80046b8:	492a      	ldr	r1, [pc, #168]	; (8004764 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	610b      	str	r3, [r1, #16]
 80046be:	e027      	b.n	8004710 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d112      	bne.n	80046ec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046c6:	4b27      	ldr	r3, [pc, #156]	; (8004764 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80046ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	6892      	ldr	r2, [r2, #8]
 80046d6:	0211      	lsls	r1, r2, #8
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	6912      	ldr	r2, [r2, #16]
 80046dc:	0852      	lsrs	r2, r2, #1
 80046de:	3a01      	subs	r2, #1
 80046e0:	0552      	lsls	r2, r2, #21
 80046e2:	430a      	orrs	r2, r1
 80046e4:	491f      	ldr	r1, [pc, #124]	; (8004764 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	610b      	str	r3, [r1, #16]
 80046ea:	e011      	b.n	8004710 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046ec:	4b1d      	ldr	r3, [pc, #116]	; (8004764 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80046f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6892      	ldr	r2, [r2, #8]
 80046fc:	0211      	lsls	r1, r2, #8
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6952      	ldr	r2, [r2, #20]
 8004702:	0852      	lsrs	r2, r2, #1
 8004704:	3a01      	subs	r2, #1
 8004706:	0652      	lsls	r2, r2, #25
 8004708:	430a      	orrs	r2, r1
 800470a:	4916      	ldr	r1, [pc, #88]	; (8004764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800470c:	4313      	orrs	r3, r2
 800470e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004710:	4b14      	ldr	r3, [pc, #80]	; (8004764 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a13      	ldr	r2, [pc, #76]	; (8004764 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004716:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800471a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800471c:	f7fd fa38 	bl	8001b90 <HAL_GetTick>
 8004720:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004722:	e009      	b.n	8004738 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004724:	f7fd fa34 	bl	8001b90 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d902      	bls.n	8004738 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	73fb      	strb	r3, [r7, #15]
          break;
 8004736:	e005      	b.n	8004744 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004738:	4b0a      	ldr	r3, [pc, #40]	; (8004764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d0ef      	beq.n	8004724 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004744:	7bfb      	ldrb	r3, [r7, #15]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d106      	bne.n	8004758 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800474a:	4b06      	ldr	r3, [pc, #24]	; (8004764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800474c:	691a      	ldr	r2, [r3, #16]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	4904      	ldr	r1, [pc, #16]	; (8004764 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004754:	4313      	orrs	r3, r2
 8004756:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004758:	7bfb      	ldrb	r3, [r7, #15]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	40021000 	.word	0x40021000

08004768 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004772:	2300      	movs	r3, #0
 8004774:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004776:	4b6a      	ldr	r3, [pc, #424]	; (8004920 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	f003 0303 	and.w	r3, r3, #3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d018      	beq.n	80047b4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004782:	4b67      	ldr	r3, [pc, #412]	; (8004920 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	f003 0203 	and.w	r2, r3, #3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	429a      	cmp	r2, r3
 8004790:	d10d      	bne.n	80047ae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
       ||
 8004796:	2b00      	cmp	r3, #0
 8004798:	d009      	beq.n	80047ae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800479a:	4b61      	ldr	r3, [pc, #388]	; (8004920 <RCCEx_PLLSAI2_Config+0x1b8>)
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	091b      	lsrs	r3, r3, #4
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
       ||
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d047      	beq.n	800483e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	73fb      	strb	r3, [r7, #15]
 80047b2:	e044      	b.n	800483e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b03      	cmp	r3, #3
 80047ba:	d018      	beq.n	80047ee <RCCEx_PLLSAI2_Config+0x86>
 80047bc:	2b03      	cmp	r3, #3
 80047be:	d825      	bhi.n	800480c <RCCEx_PLLSAI2_Config+0xa4>
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d002      	beq.n	80047ca <RCCEx_PLLSAI2_Config+0x62>
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d009      	beq.n	80047dc <RCCEx_PLLSAI2_Config+0x74>
 80047c8:	e020      	b.n	800480c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047ca:	4b55      	ldr	r3, [pc, #340]	; (8004920 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d11d      	bne.n	8004812 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047da:	e01a      	b.n	8004812 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047dc:	4b50      	ldr	r3, [pc, #320]	; (8004920 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d116      	bne.n	8004816 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047ec:	e013      	b.n	8004816 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047ee:	4b4c      	ldr	r3, [pc, #304]	; (8004920 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10f      	bne.n	800481a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047fa:	4b49      	ldr	r3, [pc, #292]	; (8004920 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d109      	bne.n	800481a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800480a:	e006      	b.n	800481a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	73fb      	strb	r3, [r7, #15]
      break;
 8004810:	e004      	b.n	800481c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004812:	bf00      	nop
 8004814:	e002      	b.n	800481c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004816:	bf00      	nop
 8004818:	e000      	b.n	800481c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800481a:	bf00      	nop
    }

    if(status == HAL_OK)
 800481c:	7bfb      	ldrb	r3, [r7, #15]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10d      	bne.n	800483e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004822:	4b3f      	ldr	r3, [pc, #252]	; (8004920 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6819      	ldr	r1, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	3b01      	subs	r3, #1
 8004834:	011b      	lsls	r3, r3, #4
 8004836:	430b      	orrs	r3, r1
 8004838:	4939      	ldr	r1, [pc, #228]	; (8004920 <RCCEx_PLLSAI2_Config+0x1b8>)
 800483a:	4313      	orrs	r3, r2
 800483c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800483e:	7bfb      	ldrb	r3, [r7, #15]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d167      	bne.n	8004914 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004844:	4b36      	ldr	r3, [pc, #216]	; (8004920 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a35      	ldr	r2, [pc, #212]	; (8004920 <RCCEx_PLLSAI2_Config+0x1b8>)
 800484a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800484e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004850:	f7fd f99e 	bl	8001b90 <HAL_GetTick>
 8004854:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004856:	e009      	b.n	800486c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004858:	f7fd f99a 	bl	8001b90 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d902      	bls.n	800486c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	73fb      	strb	r3, [r7, #15]
        break;
 800486a:	e005      	b.n	8004878 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800486c:	4b2c      	ldr	r3, [pc, #176]	; (8004920 <RCCEx_PLLSAI2_Config+0x1b8>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1ef      	bne.n	8004858 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004878:	7bfb      	ldrb	r3, [r7, #15]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d14a      	bne.n	8004914 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d111      	bne.n	80048a8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004884:	4b26      	ldr	r3, [pc, #152]	; (8004920 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800488c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	6892      	ldr	r2, [r2, #8]
 8004894:	0211      	lsls	r1, r2, #8
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	68d2      	ldr	r2, [r2, #12]
 800489a:	0912      	lsrs	r2, r2, #4
 800489c:	0452      	lsls	r2, r2, #17
 800489e:	430a      	orrs	r2, r1
 80048a0:	491f      	ldr	r1, [pc, #124]	; (8004920 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	614b      	str	r3, [r1, #20]
 80048a6:	e011      	b.n	80048cc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048a8:	4b1d      	ldr	r3, [pc, #116]	; (8004920 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80048b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6892      	ldr	r2, [r2, #8]
 80048b8:	0211      	lsls	r1, r2, #8
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	6912      	ldr	r2, [r2, #16]
 80048be:	0852      	lsrs	r2, r2, #1
 80048c0:	3a01      	subs	r2, #1
 80048c2:	0652      	lsls	r2, r2, #25
 80048c4:	430a      	orrs	r2, r1
 80048c6:	4916      	ldr	r1, [pc, #88]	; (8004920 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80048cc:	4b14      	ldr	r3, [pc, #80]	; (8004920 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a13      	ldr	r2, [pc, #76]	; (8004920 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d8:	f7fd f95a 	bl	8001b90 <HAL_GetTick>
 80048dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80048de:	e009      	b.n	80048f4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048e0:	f7fd f956 	bl	8001b90 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d902      	bls.n	80048f4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	73fb      	strb	r3, [r7, #15]
          break;
 80048f2:	e005      	b.n	8004900 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80048f4:	4b0a      	ldr	r3, [pc, #40]	; (8004920 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d0ef      	beq.n	80048e0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004900:	7bfb      	ldrb	r3, [r7, #15]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d106      	bne.n	8004914 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004906:	4b06      	ldr	r3, [pc, #24]	; (8004920 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004908:	695a      	ldr	r2, [r3, #20]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	4904      	ldr	r1, [pc, #16]	; (8004920 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004910:	4313      	orrs	r3, r2
 8004912:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004914:	7bfb      	ldrb	r3, [r7, #15]
}
 8004916:	4618      	mov	r0, r3
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	40021000 	.word	0x40021000

08004924 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e095      	b.n	8004a62 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	2b00      	cmp	r3, #0
 800493c:	d108      	bne.n	8004950 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004946:	d009      	beq.n	800495c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	61da      	str	r2, [r3, #28]
 800494e:	e005      	b.n	800495c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d106      	bne.n	800497c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7fc fb24 	bl	8000fc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2202      	movs	r2, #2
 8004980:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004992:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800499c:	d902      	bls.n	80049a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800499e:	2300      	movs	r3, #0
 80049a0:	60fb      	str	r3, [r7, #12]
 80049a2:	e002      	b.n	80049aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80049a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80049b2:	d007      	beq.n	80049c4 <HAL_SPI_Init+0xa0>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049bc:	d002      	beq.n	80049c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049d4:	431a      	orrs	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	431a      	orrs	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	69db      	ldr	r3, [r3, #28]
 80049f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049fc:	431a      	orrs	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a06:	ea42 0103 	orr.w	r1, r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	0c1b      	lsrs	r3, r3, #16
 8004a20:	f003 0204 	and.w	r2, r3, #4
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	f003 0310 	and.w	r3, r3, #16
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a32:	f003 0308 	and.w	r3, r3, #8
 8004a36:	431a      	orrs	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004a40:	ea42 0103 	orr.w	r1, r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b082      	sub	sp, #8
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e040      	b.n	8004afe <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d106      	bne.n	8004a92 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f7fc fadd 	bl	800104c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2224      	movs	r2, #36	; 0x24
 8004a96:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 0201 	bic.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f991 	bl	8004dd0 <UART_SetConfig>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d101      	bne.n	8004ab8 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e022      	b.n	8004afe <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d002      	beq.n	8004ac6 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 fc0f 	bl	80052e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ad4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ae4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f042 0201 	orr.w	r2, r2, #1
 8004af4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 fc96 	bl	8005428 <UART_CheckIdleState>
 8004afc:	4603      	mov	r3, r0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3708      	adds	r7, #8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b08a      	sub	sp, #40	; 0x28
 8004b0a:	af02      	add	r7, sp, #8
 8004b0c:	60f8      	str	r0, [r7, #12]
 8004b0e:	60b9      	str	r1, [r7, #8]
 8004b10:	603b      	str	r3, [r7, #0]
 8004b12:	4613      	mov	r3, r2
 8004b14:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b1a:	2b20      	cmp	r3, #32
 8004b1c:	f040 8082 	bne.w	8004c24 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d002      	beq.n	8004b2c <HAL_UART_Transmit+0x26>
 8004b26:	88fb      	ldrh	r3, [r7, #6]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e07a      	b.n	8004c26 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d101      	bne.n	8004b3e <HAL_UART_Transmit+0x38>
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	e073      	b.n	8004c26 <HAL_UART_Transmit+0x120>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2221      	movs	r2, #33	; 0x21
 8004b52:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b54:	f7fd f81c 	bl	8001b90 <HAL_GetTick>
 8004b58:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	88fa      	ldrh	r2, [r7, #6]
 8004b5e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	88fa      	ldrh	r2, [r7, #6]
 8004b66:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b72:	d108      	bne.n	8004b86 <HAL_UART_Transmit+0x80>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d104      	bne.n	8004b86 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	61bb      	str	r3, [r7, #24]
 8004b84:	e003      	b.n	8004b8e <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004b96:	e02d      	b.n	8004bf4 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	2180      	movs	r1, #128	; 0x80
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f000 fc89 	bl	80054ba <UART_WaitOnFlagUntilTimeout>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e039      	b.n	8004c26 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10b      	bne.n	8004bd0 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	881a      	ldrh	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bc4:	b292      	uxth	r2, r2
 8004bc6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	3302      	adds	r3, #2
 8004bcc:	61bb      	str	r3, [r7, #24]
 8004bce:	e008      	b.n	8004be2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	781a      	ldrb	r2, [r3, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	b292      	uxth	r2, r2
 8004bda:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	3301      	adds	r3, #1
 8004be0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	3b01      	subs	r3, #1
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1cb      	bne.n	8004b98 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	2200      	movs	r2, #0
 8004c08:	2140      	movs	r1, #64	; 0x40
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f000 fc55 	bl	80054ba <UART_WaitOnFlagUntilTimeout>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e005      	b.n	8004c26 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004c20:	2300      	movs	r3, #0
 8004c22:	e000      	b.n	8004c26 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004c24:	2302      	movs	r3, #2
  }
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3720      	adds	r7, #32
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b08a      	sub	sp, #40	; 0x28
 8004c32:	af02      	add	r7, sp, #8
 8004c34:	60f8      	str	r0, [r7, #12]
 8004c36:	60b9      	str	r1, [r7, #8]
 8004c38:	603b      	str	r3, [r7, #0]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c42:	2b20      	cmp	r3, #32
 8004c44:	f040 80bf 	bne.w	8004dc6 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d002      	beq.n	8004c54 <HAL_UART_Receive+0x26>
 8004c4e:	88fb      	ldrh	r3, [r7, #6]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e0b7      	b.n	8004dc8 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d101      	bne.n	8004c66 <HAL_UART_Receive+0x38>
 8004c62:	2302      	movs	r3, #2
 8004c64:	e0b0      	b.n	8004dc8 <HAL_UART_Receive+0x19a>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2222      	movs	r2, #34	; 0x22
 8004c7a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c82:	f7fc ff85 	bl	8001b90 <HAL_GetTick>
 8004c86:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	88fa      	ldrh	r2, [r7, #6]
 8004c8c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	88fa      	ldrh	r2, [r7, #6]
 8004c94:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ca0:	d10e      	bne.n	8004cc0 <HAL_UART_Receive+0x92>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d105      	bne.n	8004cb6 <HAL_UART_Receive+0x88>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004cb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004cb4:	e02d      	b.n	8004d12 <HAL_UART_Receive+0xe4>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	22ff      	movs	r2, #255	; 0xff
 8004cba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004cbe:	e028      	b.n	8004d12 <HAL_UART_Receive+0xe4>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10d      	bne.n	8004ce4 <HAL_UART_Receive+0xb6>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d104      	bne.n	8004cda <HAL_UART_Receive+0xac>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	22ff      	movs	r2, #255	; 0xff
 8004cd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004cd8:	e01b      	b.n	8004d12 <HAL_UART_Receive+0xe4>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	227f      	movs	r2, #127	; 0x7f
 8004cde:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ce2:	e016      	b.n	8004d12 <HAL_UART_Receive+0xe4>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cec:	d10d      	bne.n	8004d0a <HAL_UART_Receive+0xdc>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d104      	bne.n	8004d00 <HAL_UART_Receive+0xd2>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	227f      	movs	r2, #127	; 0x7f
 8004cfa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004cfe:	e008      	b.n	8004d12 <HAL_UART_Receive+0xe4>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	223f      	movs	r2, #63	; 0x3f
 8004d04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d08:	e003      	b.n	8004d12 <HAL_UART_Receive+0xe4>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004d18:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d22:	d108      	bne.n	8004d36 <HAL_UART_Receive+0x108>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d104      	bne.n	8004d36 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	61bb      	str	r3, [r7, #24]
 8004d34:	e003      	b.n	8004d3e <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004d46:	e033      	b.n	8004db0 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	2120      	movs	r1, #32
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 fbb1 	bl	80054ba <UART_WaitOnFlagUntilTimeout>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e032      	b.n	8004dc8 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10c      	bne.n	8004d82 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	8a7b      	ldrh	r3, [r7, #18]
 8004d72:	4013      	ands	r3, r2
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	3302      	adds	r3, #2
 8004d7e:	61bb      	str	r3, [r7, #24]
 8004d80:	e00d      	b.n	8004d9e <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	b2da      	uxtb	r2, r3
 8004d8c:	8a7b      	ldrh	r3, [r7, #18]
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	4013      	ands	r3, r2
 8004d92:	b2da      	uxtb	r2, r3
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	3b01      	subs	r3, #1
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1c5      	bne.n	8004d48 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	e000      	b.n	8004dc8 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004dc6:	2302      	movs	r3, #2
  }
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3720      	adds	r7, #32
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dd0:	b5b0      	push	{r4, r5, r7, lr}
 8004dd2:	b088      	sub	sp, #32
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	431a      	orrs	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	431a      	orrs	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	69db      	ldr	r3, [r3, #28]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	4bad      	ldr	r3, [pc, #692]	; (80050b0 <UART_SetConfig+0x2e0>)
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	6812      	ldr	r2, [r2, #0]
 8004e02:	69f9      	ldr	r1, [r7, #28]
 8004e04:	430b      	orrs	r3, r1
 8004e06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68da      	ldr	r2, [r3, #12]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4aa2      	ldr	r2, [pc, #648]	; (80050b4 <UART_SetConfig+0x2e4>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d004      	beq.n	8004e38 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	69fa      	ldr	r2, [r7, #28]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	69fa      	ldr	r2, [r7, #28]
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a99      	ldr	r2, [pc, #612]	; (80050b8 <UART_SetConfig+0x2e8>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d121      	bne.n	8004e9a <UART_SetConfig+0xca>
 8004e56:	4b99      	ldr	r3, [pc, #612]	; (80050bc <UART_SetConfig+0x2ec>)
 8004e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e5c:	f003 0303 	and.w	r3, r3, #3
 8004e60:	2b03      	cmp	r3, #3
 8004e62:	d817      	bhi.n	8004e94 <UART_SetConfig+0xc4>
 8004e64:	a201      	add	r2, pc, #4	; (adr r2, 8004e6c <UART_SetConfig+0x9c>)
 8004e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6a:	bf00      	nop
 8004e6c:	08004e7d 	.word	0x08004e7d
 8004e70:	08004e89 	.word	0x08004e89
 8004e74:	08004e83 	.word	0x08004e83
 8004e78:	08004e8f 	.word	0x08004e8f
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	76fb      	strb	r3, [r7, #27]
 8004e80:	e0e7      	b.n	8005052 <UART_SetConfig+0x282>
 8004e82:	2302      	movs	r3, #2
 8004e84:	76fb      	strb	r3, [r7, #27]
 8004e86:	e0e4      	b.n	8005052 <UART_SetConfig+0x282>
 8004e88:	2304      	movs	r3, #4
 8004e8a:	76fb      	strb	r3, [r7, #27]
 8004e8c:	e0e1      	b.n	8005052 <UART_SetConfig+0x282>
 8004e8e:	2308      	movs	r3, #8
 8004e90:	76fb      	strb	r3, [r7, #27]
 8004e92:	e0de      	b.n	8005052 <UART_SetConfig+0x282>
 8004e94:	2310      	movs	r3, #16
 8004e96:	76fb      	strb	r3, [r7, #27]
 8004e98:	e0db      	b.n	8005052 <UART_SetConfig+0x282>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a88      	ldr	r2, [pc, #544]	; (80050c0 <UART_SetConfig+0x2f0>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d132      	bne.n	8004f0a <UART_SetConfig+0x13a>
 8004ea4:	4b85      	ldr	r3, [pc, #532]	; (80050bc <UART_SetConfig+0x2ec>)
 8004ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eaa:	f003 030c 	and.w	r3, r3, #12
 8004eae:	2b0c      	cmp	r3, #12
 8004eb0:	d828      	bhi.n	8004f04 <UART_SetConfig+0x134>
 8004eb2:	a201      	add	r2, pc, #4	; (adr r2, 8004eb8 <UART_SetConfig+0xe8>)
 8004eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb8:	08004eed 	.word	0x08004eed
 8004ebc:	08004f05 	.word	0x08004f05
 8004ec0:	08004f05 	.word	0x08004f05
 8004ec4:	08004f05 	.word	0x08004f05
 8004ec8:	08004ef9 	.word	0x08004ef9
 8004ecc:	08004f05 	.word	0x08004f05
 8004ed0:	08004f05 	.word	0x08004f05
 8004ed4:	08004f05 	.word	0x08004f05
 8004ed8:	08004ef3 	.word	0x08004ef3
 8004edc:	08004f05 	.word	0x08004f05
 8004ee0:	08004f05 	.word	0x08004f05
 8004ee4:	08004f05 	.word	0x08004f05
 8004ee8:	08004eff 	.word	0x08004eff
 8004eec:	2300      	movs	r3, #0
 8004eee:	76fb      	strb	r3, [r7, #27]
 8004ef0:	e0af      	b.n	8005052 <UART_SetConfig+0x282>
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	76fb      	strb	r3, [r7, #27]
 8004ef6:	e0ac      	b.n	8005052 <UART_SetConfig+0x282>
 8004ef8:	2304      	movs	r3, #4
 8004efa:	76fb      	strb	r3, [r7, #27]
 8004efc:	e0a9      	b.n	8005052 <UART_SetConfig+0x282>
 8004efe:	2308      	movs	r3, #8
 8004f00:	76fb      	strb	r3, [r7, #27]
 8004f02:	e0a6      	b.n	8005052 <UART_SetConfig+0x282>
 8004f04:	2310      	movs	r3, #16
 8004f06:	76fb      	strb	r3, [r7, #27]
 8004f08:	e0a3      	b.n	8005052 <UART_SetConfig+0x282>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a6d      	ldr	r2, [pc, #436]	; (80050c4 <UART_SetConfig+0x2f4>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d120      	bne.n	8004f56 <UART_SetConfig+0x186>
 8004f14:	4b69      	ldr	r3, [pc, #420]	; (80050bc <UART_SetConfig+0x2ec>)
 8004f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f1e:	2b30      	cmp	r3, #48	; 0x30
 8004f20:	d013      	beq.n	8004f4a <UART_SetConfig+0x17a>
 8004f22:	2b30      	cmp	r3, #48	; 0x30
 8004f24:	d814      	bhi.n	8004f50 <UART_SetConfig+0x180>
 8004f26:	2b20      	cmp	r3, #32
 8004f28:	d009      	beq.n	8004f3e <UART_SetConfig+0x16e>
 8004f2a:	2b20      	cmp	r3, #32
 8004f2c:	d810      	bhi.n	8004f50 <UART_SetConfig+0x180>
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d002      	beq.n	8004f38 <UART_SetConfig+0x168>
 8004f32:	2b10      	cmp	r3, #16
 8004f34:	d006      	beq.n	8004f44 <UART_SetConfig+0x174>
 8004f36:	e00b      	b.n	8004f50 <UART_SetConfig+0x180>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	76fb      	strb	r3, [r7, #27]
 8004f3c:	e089      	b.n	8005052 <UART_SetConfig+0x282>
 8004f3e:	2302      	movs	r3, #2
 8004f40:	76fb      	strb	r3, [r7, #27]
 8004f42:	e086      	b.n	8005052 <UART_SetConfig+0x282>
 8004f44:	2304      	movs	r3, #4
 8004f46:	76fb      	strb	r3, [r7, #27]
 8004f48:	e083      	b.n	8005052 <UART_SetConfig+0x282>
 8004f4a:	2308      	movs	r3, #8
 8004f4c:	76fb      	strb	r3, [r7, #27]
 8004f4e:	e080      	b.n	8005052 <UART_SetConfig+0x282>
 8004f50:	2310      	movs	r3, #16
 8004f52:	76fb      	strb	r3, [r7, #27]
 8004f54:	e07d      	b.n	8005052 <UART_SetConfig+0x282>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a5b      	ldr	r2, [pc, #364]	; (80050c8 <UART_SetConfig+0x2f8>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d120      	bne.n	8004fa2 <UART_SetConfig+0x1d2>
 8004f60:	4b56      	ldr	r3, [pc, #344]	; (80050bc <UART_SetConfig+0x2ec>)
 8004f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f6a:	2bc0      	cmp	r3, #192	; 0xc0
 8004f6c:	d013      	beq.n	8004f96 <UART_SetConfig+0x1c6>
 8004f6e:	2bc0      	cmp	r3, #192	; 0xc0
 8004f70:	d814      	bhi.n	8004f9c <UART_SetConfig+0x1cc>
 8004f72:	2b80      	cmp	r3, #128	; 0x80
 8004f74:	d009      	beq.n	8004f8a <UART_SetConfig+0x1ba>
 8004f76:	2b80      	cmp	r3, #128	; 0x80
 8004f78:	d810      	bhi.n	8004f9c <UART_SetConfig+0x1cc>
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d002      	beq.n	8004f84 <UART_SetConfig+0x1b4>
 8004f7e:	2b40      	cmp	r3, #64	; 0x40
 8004f80:	d006      	beq.n	8004f90 <UART_SetConfig+0x1c0>
 8004f82:	e00b      	b.n	8004f9c <UART_SetConfig+0x1cc>
 8004f84:	2300      	movs	r3, #0
 8004f86:	76fb      	strb	r3, [r7, #27]
 8004f88:	e063      	b.n	8005052 <UART_SetConfig+0x282>
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	76fb      	strb	r3, [r7, #27]
 8004f8e:	e060      	b.n	8005052 <UART_SetConfig+0x282>
 8004f90:	2304      	movs	r3, #4
 8004f92:	76fb      	strb	r3, [r7, #27]
 8004f94:	e05d      	b.n	8005052 <UART_SetConfig+0x282>
 8004f96:	2308      	movs	r3, #8
 8004f98:	76fb      	strb	r3, [r7, #27]
 8004f9a:	e05a      	b.n	8005052 <UART_SetConfig+0x282>
 8004f9c:	2310      	movs	r3, #16
 8004f9e:	76fb      	strb	r3, [r7, #27]
 8004fa0:	e057      	b.n	8005052 <UART_SetConfig+0x282>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a49      	ldr	r2, [pc, #292]	; (80050cc <UART_SetConfig+0x2fc>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d125      	bne.n	8004ff8 <UART_SetConfig+0x228>
 8004fac:	4b43      	ldr	r3, [pc, #268]	; (80050bc <UART_SetConfig+0x2ec>)
 8004fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fba:	d017      	beq.n	8004fec <UART_SetConfig+0x21c>
 8004fbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fc0:	d817      	bhi.n	8004ff2 <UART_SetConfig+0x222>
 8004fc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fc6:	d00b      	beq.n	8004fe0 <UART_SetConfig+0x210>
 8004fc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fcc:	d811      	bhi.n	8004ff2 <UART_SetConfig+0x222>
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <UART_SetConfig+0x20a>
 8004fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fd6:	d006      	beq.n	8004fe6 <UART_SetConfig+0x216>
 8004fd8:	e00b      	b.n	8004ff2 <UART_SetConfig+0x222>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	76fb      	strb	r3, [r7, #27]
 8004fde:	e038      	b.n	8005052 <UART_SetConfig+0x282>
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	76fb      	strb	r3, [r7, #27]
 8004fe4:	e035      	b.n	8005052 <UART_SetConfig+0x282>
 8004fe6:	2304      	movs	r3, #4
 8004fe8:	76fb      	strb	r3, [r7, #27]
 8004fea:	e032      	b.n	8005052 <UART_SetConfig+0x282>
 8004fec:	2308      	movs	r3, #8
 8004fee:	76fb      	strb	r3, [r7, #27]
 8004ff0:	e02f      	b.n	8005052 <UART_SetConfig+0x282>
 8004ff2:	2310      	movs	r3, #16
 8004ff4:	76fb      	strb	r3, [r7, #27]
 8004ff6:	e02c      	b.n	8005052 <UART_SetConfig+0x282>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a2d      	ldr	r2, [pc, #180]	; (80050b4 <UART_SetConfig+0x2e4>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d125      	bne.n	800504e <UART_SetConfig+0x27e>
 8005002:	4b2e      	ldr	r3, [pc, #184]	; (80050bc <UART_SetConfig+0x2ec>)
 8005004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005008:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800500c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005010:	d017      	beq.n	8005042 <UART_SetConfig+0x272>
 8005012:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005016:	d817      	bhi.n	8005048 <UART_SetConfig+0x278>
 8005018:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800501c:	d00b      	beq.n	8005036 <UART_SetConfig+0x266>
 800501e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005022:	d811      	bhi.n	8005048 <UART_SetConfig+0x278>
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <UART_SetConfig+0x260>
 8005028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800502c:	d006      	beq.n	800503c <UART_SetConfig+0x26c>
 800502e:	e00b      	b.n	8005048 <UART_SetConfig+0x278>
 8005030:	2300      	movs	r3, #0
 8005032:	76fb      	strb	r3, [r7, #27]
 8005034:	e00d      	b.n	8005052 <UART_SetConfig+0x282>
 8005036:	2302      	movs	r3, #2
 8005038:	76fb      	strb	r3, [r7, #27]
 800503a:	e00a      	b.n	8005052 <UART_SetConfig+0x282>
 800503c:	2304      	movs	r3, #4
 800503e:	76fb      	strb	r3, [r7, #27]
 8005040:	e007      	b.n	8005052 <UART_SetConfig+0x282>
 8005042:	2308      	movs	r3, #8
 8005044:	76fb      	strb	r3, [r7, #27]
 8005046:	e004      	b.n	8005052 <UART_SetConfig+0x282>
 8005048:	2310      	movs	r3, #16
 800504a:	76fb      	strb	r3, [r7, #27]
 800504c:	e001      	b.n	8005052 <UART_SetConfig+0x282>
 800504e:	2310      	movs	r3, #16
 8005050:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a17      	ldr	r2, [pc, #92]	; (80050b4 <UART_SetConfig+0x2e4>)
 8005058:	4293      	cmp	r3, r2
 800505a:	f040 8087 	bne.w	800516c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800505e:	7efb      	ldrb	r3, [r7, #27]
 8005060:	2b08      	cmp	r3, #8
 8005062:	d837      	bhi.n	80050d4 <UART_SetConfig+0x304>
 8005064:	a201      	add	r2, pc, #4	; (adr r2, 800506c <UART_SetConfig+0x29c>)
 8005066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506a:	bf00      	nop
 800506c:	08005091 	.word	0x08005091
 8005070:	080050d5 	.word	0x080050d5
 8005074:	08005099 	.word	0x08005099
 8005078:	080050d5 	.word	0x080050d5
 800507c:	0800509f 	.word	0x0800509f
 8005080:	080050d5 	.word	0x080050d5
 8005084:	080050d5 	.word	0x080050d5
 8005088:	080050d5 	.word	0x080050d5
 800508c:	080050a7 	.word	0x080050a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005090:	f7fe fef0 	bl	8003e74 <HAL_RCC_GetPCLK1Freq>
 8005094:	6178      	str	r0, [r7, #20]
        break;
 8005096:	e022      	b.n	80050de <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005098:	4b0d      	ldr	r3, [pc, #52]	; (80050d0 <UART_SetConfig+0x300>)
 800509a:	617b      	str	r3, [r7, #20]
        break;
 800509c:	e01f      	b.n	80050de <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800509e:	f7fe fe51 	bl	8003d44 <HAL_RCC_GetSysClockFreq>
 80050a2:	6178      	str	r0, [r7, #20]
        break;
 80050a4:	e01b      	b.n	80050de <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050aa:	617b      	str	r3, [r7, #20]
        break;
 80050ac:	e017      	b.n	80050de <UART_SetConfig+0x30e>
 80050ae:	bf00      	nop
 80050b0:	efff69f3 	.word	0xefff69f3
 80050b4:	40008000 	.word	0x40008000
 80050b8:	40013800 	.word	0x40013800
 80050bc:	40021000 	.word	0x40021000
 80050c0:	40004400 	.word	0x40004400
 80050c4:	40004800 	.word	0x40004800
 80050c8:	40004c00 	.word	0x40004c00
 80050cc:	40005000 	.word	0x40005000
 80050d0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80050d4:	2300      	movs	r3, #0
 80050d6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	76bb      	strb	r3, [r7, #26]
        break;
 80050dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f000 80f1 	beq.w	80052c8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	4613      	mov	r3, r2
 80050ec:	005b      	lsls	r3, r3, #1
 80050ee:	4413      	add	r3, r2
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d305      	bcc.n	8005102 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d902      	bls.n	8005108 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	76bb      	strb	r3, [r7, #26]
 8005106:	e0df      	b.n	80052c8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	4618      	mov	r0, r3
 800510c:	f04f 0100 	mov.w	r1, #0
 8005110:	f04f 0200 	mov.w	r2, #0
 8005114:	f04f 0300 	mov.w	r3, #0
 8005118:	020b      	lsls	r3, r1, #8
 800511a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800511e:	0202      	lsls	r2, r0, #8
 8005120:	6879      	ldr	r1, [r7, #4]
 8005122:	6849      	ldr	r1, [r1, #4]
 8005124:	0849      	lsrs	r1, r1, #1
 8005126:	4608      	mov	r0, r1
 8005128:	f04f 0100 	mov.w	r1, #0
 800512c:	1814      	adds	r4, r2, r0
 800512e:	eb43 0501 	adc.w	r5, r3, r1
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	461a      	mov	r2, r3
 8005138:	f04f 0300 	mov.w	r3, #0
 800513c:	4620      	mov	r0, r4
 800513e:	4629      	mov	r1, r5
 8005140:	f7fb f89e 	bl	8000280 <__aeabi_uldivmod>
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	4613      	mov	r3, r2
 800514a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005152:	d308      	bcc.n	8005166 <UART_SetConfig+0x396>
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800515a:	d204      	bcs.n	8005166 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	60da      	str	r2, [r3, #12]
 8005164:	e0b0      	b.n	80052c8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	76bb      	strb	r3, [r7, #26]
 800516a:	e0ad      	b.n	80052c8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	69db      	ldr	r3, [r3, #28]
 8005170:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005174:	d15c      	bne.n	8005230 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005176:	7efb      	ldrb	r3, [r7, #27]
 8005178:	2b08      	cmp	r3, #8
 800517a:	d828      	bhi.n	80051ce <UART_SetConfig+0x3fe>
 800517c:	a201      	add	r2, pc, #4	; (adr r2, 8005184 <UART_SetConfig+0x3b4>)
 800517e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005182:	bf00      	nop
 8005184:	080051a9 	.word	0x080051a9
 8005188:	080051b1 	.word	0x080051b1
 800518c:	080051b9 	.word	0x080051b9
 8005190:	080051cf 	.word	0x080051cf
 8005194:	080051bf 	.word	0x080051bf
 8005198:	080051cf 	.word	0x080051cf
 800519c:	080051cf 	.word	0x080051cf
 80051a0:	080051cf 	.word	0x080051cf
 80051a4:	080051c7 	.word	0x080051c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051a8:	f7fe fe64 	bl	8003e74 <HAL_RCC_GetPCLK1Freq>
 80051ac:	6178      	str	r0, [r7, #20]
        break;
 80051ae:	e013      	b.n	80051d8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051b0:	f7fe fe76 	bl	8003ea0 <HAL_RCC_GetPCLK2Freq>
 80051b4:	6178      	str	r0, [r7, #20]
        break;
 80051b6:	e00f      	b.n	80051d8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051b8:	4b49      	ldr	r3, [pc, #292]	; (80052e0 <UART_SetConfig+0x510>)
 80051ba:	617b      	str	r3, [r7, #20]
        break;
 80051bc:	e00c      	b.n	80051d8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051be:	f7fe fdc1 	bl	8003d44 <HAL_RCC_GetSysClockFreq>
 80051c2:	6178      	str	r0, [r7, #20]
        break;
 80051c4:	e008      	b.n	80051d8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ca:	617b      	str	r3, [r7, #20]
        break;
 80051cc:	e004      	b.n	80051d8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80051ce:	2300      	movs	r3, #0
 80051d0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	76bb      	strb	r3, [r7, #26]
        break;
 80051d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d074      	beq.n	80052c8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	005a      	lsls	r2, r3, #1
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	085b      	lsrs	r3, r3, #1
 80051e8:	441a      	add	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	2b0f      	cmp	r3, #15
 80051fa:	d916      	bls.n	800522a <UART_SetConfig+0x45a>
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005202:	d212      	bcs.n	800522a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	b29b      	uxth	r3, r3
 8005208:	f023 030f 	bic.w	r3, r3, #15
 800520c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	085b      	lsrs	r3, r3, #1
 8005212:	b29b      	uxth	r3, r3
 8005214:	f003 0307 	and.w	r3, r3, #7
 8005218:	b29a      	uxth	r2, r3
 800521a:	89fb      	ldrh	r3, [r7, #14]
 800521c:	4313      	orrs	r3, r2
 800521e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	89fa      	ldrh	r2, [r7, #14]
 8005226:	60da      	str	r2, [r3, #12]
 8005228:	e04e      	b.n	80052c8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	76bb      	strb	r3, [r7, #26]
 800522e:	e04b      	b.n	80052c8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005230:	7efb      	ldrb	r3, [r7, #27]
 8005232:	2b08      	cmp	r3, #8
 8005234:	d827      	bhi.n	8005286 <UART_SetConfig+0x4b6>
 8005236:	a201      	add	r2, pc, #4	; (adr r2, 800523c <UART_SetConfig+0x46c>)
 8005238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523c:	08005261 	.word	0x08005261
 8005240:	08005269 	.word	0x08005269
 8005244:	08005271 	.word	0x08005271
 8005248:	08005287 	.word	0x08005287
 800524c:	08005277 	.word	0x08005277
 8005250:	08005287 	.word	0x08005287
 8005254:	08005287 	.word	0x08005287
 8005258:	08005287 	.word	0x08005287
 800525c:	0800527f 	.word	0x0800527f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005260:	f7fe fe08 	bl	8003e74 <HAL_RCC_GetPCLK1Freq>
 8005264:	6178      	str	r0, [r7, #20]
        break;
 8005266:	e013      	b.n	8005290 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005268:	f7fe fe1a 	bl	8003ea0 <HAL_RCC_GetPCLK2Freq>
 800526c:	6178      	str	r0, [r7, #20]
        break;
 800526e:	e00f      	b.n	8005290 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005270:	4b1b      	ldr	r3, [pc, #108]	; (80052e0 <UART_SetConfig+0x510>)
 8005272:	617b      	str	r3, [r7, #20]
        break;
 8005274:	e00c      	b.n	8005290 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005276:	f7fe fd65 	bl	8003d44 <HAL_RCC_GetSysClockFreq>
 800527a:	6178      	str	r0, [r7, #20]
        break;
 800527c:	e008      	b.n	8005290 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800527e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005282:	617b      	str	r3, [r7, #20]
        break;
 8005284:	e004      	b.n	8005290 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005286:	2300      	movs	r3, #0
 8005288:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	76bb      	strb	r3, [r7, #26]
        break;
 800528e:	bf00      	nop
    }

    if (pclk != 0U)
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d018      	beq.n	80052c8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	085a      	lsrs	r2, r3, #1
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	441a      	add	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	2b0f      	cmp	r3, #15
 80052b0:	d908      	bls.n	80052c4 <UART_SetConfig+0x4f4>
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052b8:	d204      	bcs.n	80052c4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	60da      	str	r2, [r3, #12]
 80052c2:	e001      	b.n	80052c8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80052d4:	7ebb      	ldrb	r3, [r7, #26]
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3720      	adds	r7, #32
 80052da:	46bd      	mov	sp, r7
 80052dc:	bdb0      	pop	{r4, r5, r7, pc}
 80052de:	bf00      	nop
 80052e0:	00f42400 	.word	0x00f42400

080052e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00a      	beq.n	800530e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	430a      	orrs	r2, r1
 800530c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00a      	beq.n	8005330 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	430a      	orrs	r2, r1
 800532e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005334:	f003 0304 	and.w	r3, r3, #4
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00a      	beq.n	8005352 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	430a      	orrs	r2, r1
 8005350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005356:	f003 0308 	and.w	r3, r3, #8
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00a      	beq.n	8005374 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	430a      	orrs	r2, r1
 8005372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005378:	f003 0310 	and.w	r3, r3, #16
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00a      	beq.n	8005396 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	430a      	orrs	r2, r1
 8005394:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539a:	f003 0320 	and.w	r3, r3, #32
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00a      	beq.n	80053b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	430a      	orrs	r2, r1
 80053b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d01a      	beq.n	80053fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053e2:	d10a      	bne.n	80053fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	430a      	orrs	r2, r1
 80053f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00a      	beq.n	800541c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	430a      	orrs	r2, r1
 800541a:	605a      	str	r2, [r3, #4]
  }
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af02      	add	r7, sp, #8
 800542e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005438:	f7fc fbaa 	bl	8001b90 <HAL_GetTick>
 800543c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0308 	and.w	r3, r3, #8
 8005448:	2b08      	cmp	r3, #8
 800544a:	d10e      	bne.n	800546a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800544c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f82d 	bl	80054ba <UART_WaitOnFlagUntilTimeout>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d001      	beq.n	800546a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e023      	b.n	80054b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0304 	and.w	r3, r3, #4
 8005474:	2b04      	cmp	r3, #4
 8005476:	d10e      	bne.n	8005496 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005478:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800547c:	9300      	str	r3, [sp, #0]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 f817 	bl	80054ba <UART_WaitOnFlagUntilTimeout>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e00d      	b.n	80054b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2220      	movs	r2, #32
 800549a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2220      	movs	r2, #32
 80054a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b084      	sub	sp, #16
 80054be:	af00      	add	r7, sp, #0
 80054c0:	60f8      	str	r0, [r7, #12]
 80054c2:	60b9      	str	r1, [r7, #8]
 80054c4:	603b      	str	r3, [r7, #0]
 80054c6:	4613      	mov	r3, r2
 80054c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ca:	e05e      	b.n	800558a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d2:	d05a      	beq.n	800558a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054d4:	f7fc fb5c 	bl	8001b90 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	69ba      	ldr	r2, [r7, #24]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d302      	bcc.n	80054ea <UART_WaitOnFlagUntilTimeout+0x30>
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d11b      	bne.n	8005522 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80054f8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f022 0201 	bic.w	r2, r2, #1
 8005508:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2220      	movs	r2, #32
 800550e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2220      	movs	r2, #32
 8005514:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e043      	b.n	80055aa <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0304 	and.w	r3, r3, #4
 800552c:	2b00      	cmp	r3, #0
 800552e:	d02c      	beq.n	800558a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800553a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800553e:	d124      	bne.n	800558a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005548:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005558:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 0201 	bic.w	r2, r2, #1
 8005568:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2220      	movs	r2, #32
 800556e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2220      	movs	r2, #32
 8005574:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2220      	movs	r2, #32
 800557a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e00f      	b.n	80055aa <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	69da      	ldr	r2, [r3, #28]
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	4013      	ands	r3, r2
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	429a      	cmp	r2, r3
 8005598:	bf0c      	ite	eq
 800559a:	2301      	moveq	r3, #1
 800559c:	2300      	movne	r3, #0
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	461a      	mov	r2, r3
 80055a2:	79fb      	ldrb	r3, [r7, #7]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d091      	beq.n	80054cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055b2:	b084      	sub	sp, #16
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	f107 001c 	add.w	r0, r7, #28
 80055c0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 fa23 	bl	8005a1c <USB_CoreReset>
 80055d6:	4603      	mov	r3, r0
 80055d8:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80055da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d106      	bne.n	80055ee <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	639a      	str	r2, [r3, #56]	; 0x38
 80055ec:	e005      	b.n	80055fa <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80055fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005606:	b004      	add	sp, #16
 8005608:	4770      	bx	lr

0800560a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800560a:	b480      	push	{r7}
 800560c:	b083      	sub	sp, #12
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f023 0201 	bic.w	r2, r3, #1
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	460b      	mov	r3, r1
 8005636:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005644:	78fb      	ldrb	r3, [r7, #3]
 8005646:	2b01      	cmp	r3, #1
 8005648:	d106      	bne.n	8005658 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	60da      	str	r2, [r3, #12]
 8005656:	e00b      	b.n	8005670 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005658:	78fb      	ldrb	r3, [r7, #3]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d106      	bne.n	800566c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	60da      	str	r2, [r3, #12]
 800566a:	e001      	b.n	8005670 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e003      	b.n	8005678 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005670:	2032      	movs	r0, #50	; 0x32
 8005672:	f7fc fa99 	bl	8001ba8 <HAL_Delay>

  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3708      	adds	r7, #8
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005680:	b084      	sub	sp, #16
 8005682:	b580      	push	{r7, lr}
 8005684:	b086      	sub	sp, #24
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
 800568a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800568e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005692:	2300      	movs	r3, #0
 8005694:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800569a:	2300      	movs	r3, #0
 800569c:	613b      	str	r3, [r7, #16]
 800569e:	e009      	b.n	80056b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	3340      	adds	r3, #64	; 0x40
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4413      	add	r3, r2
 80056aa:	2200      	movs	r2, #0
 80056ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	3301      	adds	r3, #1
 80056b2:	613b      	str	r3, [r7, #16]
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	2b0e      	cmp	r3, #14
 80056b8:	d9f2      	bls.n	80056a0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80056ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d11c      	bne.n	80056fa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056ce:	f043 0302 	orr.w	r3, r3, #2
 80056d2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	601a      	str	r2, [r3, #0]
 80056f8:	e005      	b.n	8005706 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800570c:	461a      	mov	r2, r3
 800570e:	2300      	movs	r3, #0
 8005710:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005718:	4619      	mov	r1, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005720:	461a      	mov	r2, r3
 8005722:	680b      	ldr	r3, [r1, #0]
 8005724:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005726:	2103      	movs	r1, #3
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f93d 	bl	80059a8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800572e:	2110      	movs	r1, #16
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 f8f1 	bl	8005918 <USB_FlushTxFifo>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d001      	beq.n	8005740 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 f90f 	bl	8005964 <USB_FlushRxFifo>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d001      	beq.n	8005750 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005756:	461a      	mov	r2, r3
 8005758:	2300      	movs	r3, #0
 800575a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005762:	461a      	mov	r2, r3
 8005764:	2300      	movs	r3, #0
 8005766:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800576e:	461a      	mov	r2, r3
 8005770:	2300      	movs	r3, #0
 8005772:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005774:	2300      	movs	r3, #0
 8005776:	613b      	str	r3, [r7, #16]
 8005778:	e043      	b.n	8005802 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	015a      	lsls	r2, r3, #5
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	4413      	add	r3, r2
 8005782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800578c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005790:	d118      	bne.n	80057c4 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10a      	bne.n	80057ae <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a4:	461a      	mov	r2, r3
 80057a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057aa:	6013      	str	r3, [r2, #0]
 80057ac:	e013      	b.n	80057d6 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	015a      	lsls	r2, r3, #5
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	4413      	add	r3, r2
 80057b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ba:	461a      	mov	r2, r3
 80057bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80057c0:	6013      	str	r3, [r2, #0]
 80057c2:	e008      	b.n	80057d6 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	015a      	lsls	r2, r3, #5
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d0:	461a      	mov	r2, r3
 80057d2:	2300      	movs	r3, #0
 80057d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	015a      	lsls	r2, r3, #5
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	4413      	add	r3, r2
 80057de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e2:	461a      	mov	r2, r3
 80057e4:	2300      	movs	r3, #0
 80057e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f4:	461a      	mov	r2, r3
 80057f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	3301      	adds	r3, #1
 8005800:	613b      	str	r3, [r7, #16]
 8005802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	429a      	cmp	r2, r3
 8005808:	d3b7      	bcc.n	800577a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800580a:	2300      	movs	r3, #0
 800580c:	613b      	str	r3, [r7, #16]
 800580e:	e043      	b.n	8005898 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	015a      	lsls	r2, r3, #5
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	4413      	add	r3, r2
 8005818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005822:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005826:	d118      	bne.n	800585a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10a      	bne.n	8005844 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	015a      	lsls	r2, r3, #5
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	4413      	add	r3, r2
 8005836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800583a:	461a      	mov	r2, r3
 800583c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005840:	6013      	str	r3, [r2, #0]
 8005842:	e013      	b.n	800586c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4413      	add	r3, r2
 800584c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005850:	461a      	mov	r2, r3
 8005852:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005856:	6013      	str	r3, [r2, #0]
 8005858:	e008      	b.n	800586c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	015a      	lsls	r2, r3, #5
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	4413      	add	r3, r2
 8005862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005866:	461a      	mov	r2, r3
 8005868:	2300      	movs	r3, #0
 800586a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4413      	add	r3, r2
 8005874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005878:	461a      	mov	r2, r3
 800587a:	2300      	movs	r3, #0
 800587c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	015a      	lsls	r2, r3, #5
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	4413      	add	r3, r2
 8005886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800588a:	461a      	mov	r2, r3
 800588c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005890:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	3301      	adds	r3, #1
 8005896:	613b      	str	r3, [r7, #16]
 8005898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	429a      	cmp	r2, r3
 800589e:	d3b7      	bcc.n	8005810 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058b2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80058c0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	f043 0210 	orr.w	r2, r3, #16
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	699a      	ldr	r2, [r3, #24]
 80058d2:	4b10      	ldr	r3, [pc, #64]	; (8005914 <USB_DevInit+0x294>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80058da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d005      	beq.n	80058ec <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	f043 0208 	orr.w	r2, r3, #8
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80058ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d107      	bne.n	8005902 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058fa:	f043 0304 	orr.w	r3, r3, #4
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005902:	7dfb      	ldrb	r3, [r7, #23]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3718      	adds	r7, #24
 8005908:	46bd      	mov	sp, r7
 800590a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800590e:	b004      	add	sp, #16
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	803c3800 	.word	0x803c3800

08005918 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005922:	2300      	movs	r3, #0
 8005924:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	019b      	lsls	r3, r3, #6
 800592a:	f043 0220 	orr.w	r2, r3, #32
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	3301      	adds	r3, #1
 8005936:	60fb      	str	r3, [r7, #12]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	4a09      	ldr	r2, [pc, #36]	; (8005960 <USB_FlushTxFifo+0x48>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d901      	bls.n	8005944 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e006      	b.n	8005952 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	f003 0320 	and.w	r3, r3, #32
 800594c:	2b20      	cmp	r3, #32
 800594e:	d0f0      	beq.n	8005932 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3714      	adds	r7, #20
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	00030d40 	.word	0x00030d40

08005964 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800596c:	2300      	movs	r3, #0
 800596e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2210      	movs	r2, #16
 8005974:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	3301      	adds	r3, #1
 800597a:	60fb      	str	r3, [r7, #12]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	4a09      	ldr	r2, [pc, #36]	; (80059a4 <USB_FlushRxFifo+0x40>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d901      	bls.n	8005988 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e006      	b.n	8005996 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	f003 0310 	and.w	r3, r3, #16
 8005990:	2b10      	cmp	r3, #16
 8005992:	d0f0      	beq.n	8005976 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3714      	adds	r7, #20
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	00030d40 	.word	0x00030d40

080059a8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	460b      	mov	r3, r1
 80059b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	78fb      	ldrb	r3, [r7, #3]
 80059c2:	68f9      	ldr	r1, [r7, #12]
 80059c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059c8:	4313      	orrs	r3, r2
 80059ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80059da:	b480      	push	{r7}
 80059dc:	b085      	sub	sp, #20
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80059f4:	f023 0303 	bic.w	r3, r3, #3
 80059f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a08:	f043 0302 	orr.w	r3, r3, #2
 8005a0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3714      	adds	r7, #20
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005a24:	2300      	movs	r3, #0
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	60fb      	str	r3, [r7, #12]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	4a13      	ldr	r2, [pc, #76]	; (8005a80 <USB_CoreReset+0x64>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d901      	bls.n	8005a3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e01b      	b.n	8005a72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	daf2      	bge.n	8005a28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a42:	2300      	movs	r3, #0
 8005a44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	f043 0201 	orr.w	r2, r3, #1
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	3301      	adds	r3, #1
 8005a56:	60fb      	str	r3, [r7, #12]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4a09      	ldr	r2, [pc, #36]	; (8005a80 <USB_CoreReset+0x64>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d901      	bls.n	8005a64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e006      	b.n	8005a72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d0f0      	beq.n	8005a52 <USB_CoreReset+0x36>

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	00030d40 	.word	0x00030d40

08005a84 <__errno>:
 8005a84:	4b01      	ldr	r3, [pc, #4]	; (8005a8c <__errno+0x8>)
 8005a86:	6818      	ldr	r0, [r3, #0]
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	2000000c 	.word	0x2000000c

08005a90 <__libc_init_array>:
 8005a90:	b570      	push	{r4, r5, r6, lr}
 8005a92:	4d0d      	ldr	r5, [pc, #52]	; (8005ac8 <__libc_init_array+0x38>)
 8005a94:	4c0d      	ldr	r4, [pc, #52]	; (8005acc <__libc_init_array+0x3c>)
 8005a96:	1b64      	subs	r4, r4, r5
 8005a98:	10a4      	asrs	r4, r4, #2
 8005a9a:	2600      	movs	r6, #0
 8005a9c:	42a6      	cmp	r6, r4
 8005a9e:	d109      	bne.n	8005ab4 <__libc_init_array+0x24>
 8005aa0:	4d0b      	ldr	r5, [pc, #44]	; (8005ad0 <__libc_init_array+0x40>)
 8005aa2:	4c0c      	ldr	r4, [pc, #48]	; (8005ad4 <__libc_init_array+0x44>)
 8005aa4:	f000 fc62 	bl	800636c <_init>
 8005aa8:	1b64      	subs	r4, r4, r5
 8005aaa:	10a4      	asrs	r4, r4, #2
 8005aac:	2600      	movs	r6, #0
 8005aae:	42a6      	cmp	r6, r4
 8005ab0:	d105      	bne.n	8005abe <__libc_init_array+0x2e>
 8005ab2:	bd70      	pop	{r4, r5, r6, pc}
 8005ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ab8:	4798      	blx	r3
 8005aba:	3601      	adds	r6, #1
 8005abc:	e7ee      	b.n	8005a9c <__libc_init_array+0xc>
 8005abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ac2:	4798      	blx	r3
 8005ac4:	3601      	adds	r6, #1
 8005ac6:	e7f2      	b.n	8005aae <__libc_init_array+0x1e>
 8005ac8:	08006514 	.word	0x08006514
 8005acc:	08006514 	.word	0x08006514
 8005ad0:	08006514 	.word	0x08006514
 8005ad4:	08006518 	.word	0x08006518

08005ad8 <memcpy>:
 8005ad8:	440a      	add	r2, r1
 8005ada:	4291      	cmp	r1, r2
 8005adc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ae0:	d100      	bne.n	8005ae4 <memcpy+0xc>
 8005ae2:	4770      	bx	lr
 8005ae4:	b510      	push	{r4, lr}
 8005ae6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005aea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005aee:	4291      	cmp	r1, r2
 8005af0:	d1f9      	bne.n	8005ae6 <memcpy+0xe>
 8005af2:	bd10      	pop	{r4, pc}

08005af4 <memset>:
 8005af4:	4402      	add	r2, r0
 8005af6:	4603      	mov	r3, r0
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d100      	bne.n	8005afe <memset+0xa>
 8005afc:	4770      	bx	lr
 8005afe:	f803 1b01 	strb.w	r1, [r3], #1
 8005b02:	e7f9      	b.n	8005af8 <memset+0x4>

08005b04 <sniprintf>:
 8005b04:	b40c      	push	{r2, r3}
 8005b06:	b530      	push	{r4, r5, lr}
 8005b08:	4b17      	ldr	r3, [pc, #92]	; (8005b68 <sniprintf+0x64>)
 8005b0a:	1e0c      	subs	r4, r1, #0
 8005b0c:	681d      	ldr	r5, [r3, #0]
 8005b0e:	b09d      	sub	sp, #116	; 0x74
 8005b10:	da08      	bge.n	8005b24 <sniprintf+0x20>
 8005b12:	238b      	movs	r3, #139	; 0x8b
 8005b14:	602b      	str	r3, [r5, #0]
 8005b16:	f04f 30ff 	mov.w	r0, #4294967295
 8005b1a:	b01d      	add	sp, #116	; 0x74
 8005b1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b20:	b002      	add	sp, #8
 8005b22:	4770      	bx	lr
 8005b24:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005b28:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005b2c:	bf14      	ite	ne
 8005b2e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005b32:	4623      	moveq	r3, r4
 8005b34:	9304      	str	r3, [sp, #16]
 8005b36:	9307      	str	r3, [sp, #28]
 8005b38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b3c:	9002      	str	r0, [sp, #8]
 8005b3e:	9006      	str	r0, [sp, #24]
 8005b40:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005b44:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005b46:	ab21      	add	r3, sp, #132	; 0x84
 8005b48:	a902      	add	r1, sp, #8
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	9301      	str	r3, [sp, #4]
 8005b4e:	f000 f869 	bl	8005c24 <_svfiprintf_r>
 8005b52:	1c43      	adds	r3, r0, #1
 8005b54:	bfbc      	itt	lt
 8005b56:	238b      	movlt	r3, #139	; 0x8b
 8005b58:	602b      	strlt	r3, [r5, #0]
 8005b5a:	2c00      	cmp	r4, #0
 8005b5c:	d0dd      	beq.n	8005b1a <sniprintf+0x16>
 8005b5e:	9b02      	ldr	r3, [sp, #8]
 8005b60:	2200      	movs	r2, #0
 8005b62:	701a      	strb	r2, [r3, #0]
 8005b64:	e7d9      	b.n	8005b1a <sniprintf+0x16>
 8005b66:	bf00      	nop
 8005b68:	2000000c 	.word	0x2000000c

08005b6c <__ssputs_r>:
 8005b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b70:	688e      	ldr	r6, [r1, #8]
 8005b72:	429e      	cmp	r6, r3
 8005b74:	4682      	mov	sl, r0
 8005b76:	460c      	mov	r4, r1
 8005b78:	4690      	mov	r8, r2
 8005b7a:	461f      	mov	r7, r3
 8005b7c:	d838      	bhi.n	8005bf0 <__ssputs_r+0x84>
 8005b7e:	898a      	ldrh	r2, [r1, #12]
 8005b80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005b84:	d032      	beq.n	8005bec <__ssputs_r+0x80>
 8005b86:	6825      	ldr	r5, [r4, #0]
 8005b88:	6909      	ldr	r1, [r1, #16]
 8005b8a:	eba5 0901 	sub.w	r9, r5, r1
 8005b8e:	6965      	ldr	r5, [r4, #20]
 8005b90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b98:	3301      	adds	r3, #1
 8005b9a:	444b      	add	r3, r9
 8005b9c:	106d      	asrs	r5, r5, #1
 8005b9e:	429d      	cmp	r5, r3
 8005ba0:	bf38      	it	cc
 8005ba2:	461d      	movcc	r5, r3
 8005ba4:	0553      	lsls	r3, r2, #21
 8005ba6:	d531      	bpl.n	8005c0c <__ssputs_r+0xa0>
 8005ba8:	4629      	mov	r1, r5
 8005baa:	f000 fb39 	bl	8006220 <_malloc_r>
 8005bae:	4606      	mov	r6, r0
 8005bb0:	b950      	cbnz	r0, 8005bc8 <__ssputs_r+0x5c>
 8005bb2:	230c      	movs	r3, #12
 8005bb4:	f8ca 3000 	str.w	r3, [sl]
 8005bb8:	89a3      	ldrh	r3, [r4, #12]
 8005bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bbe:	81a3      	strh	r3, [r4, #12]
 8005bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bc8:	6921      	ldr	r1, [r4, #16]
 8005bca:	464a      	mov	r2, r9
 8005bcc:	f7ff ff84 	bl	8005ad8 <memcpy>
 8005bd0:	89a3      	ldrh	r3, [r4, #12]
 8005bd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bda:	81a3      	strh	r3, [r4, #12]
 8005bdc:	6126      	str	r6, [r4, #16]
 8005bde:	6165      	str	r5, [r4, #20]
 8005be0:	444e      	add	r6, r9
 8005be2:	eba5 0509 	sub.w	r5, r5, r9
 8005be6:	6026      	str	r6, [r4, #0]
 8005be8:	60a5      	str	r5, [r4, #8]
 8005bea:	463e      	mov	r6, r7
 8005bec:	42be      	cmp	r6, r7
 8005bee:	d900      	bls.n	8005bf2 <__ssputs_r+0x86>
 8005bf0:	463e      	mov	r6, r7
 8005bf2:	4632      	mov	r2, r6
 8005bf4:	6820      	ldr	r0, [r4, #0]
 8005bf6:	4641      	mov	r1, r8
 8005bf8:	f000 faa8 	bl	800614c <memmove>
 8005bfc:	68a3      	ldr	r3, [r4, #8]
 8005bfe:	6822      	ldr	r2, [r4, #0]
 8005c00:	1b9b      	subs	r3, r3, r6
 8005c02:	4432      	add	r2, r6
 8005c04:	60a3      	str	r3, [r4, #8]
 8005c06:	6022      	str	r2, [r4, #0]
 8005c08:	2000      	movs	r0, #0
 8005c0a:	e7db      	b.n	8005bc4 <__ssputs_r+0x58>
 8005c0c:	462a      	mov	r2, r5
 8005c0e:	f000 fb61 	bl	80062d4 <_realloc_r>
 8005c12:	4606      	mov	r6, r0
 8005c14:	2800      	cmp	r0, #0
 8005c16:	d1e1      	bne.n	8005bdc <__ssputs_r+0x70>
 8005c18:	6921      	ldr	r1, [r4, #16]
 8005c1a:	4650      	mov	r0, sl
 8005c1c:	f000 fab0 	bl	8006180 <_free_r>
 8005c20:	e7c7      	b.n	8005bb2 <__ssputs_r+0x46>
	...

08005c24 <_svfiprintf_r>:
 8005c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c28:	4698      	mov	r8, r3
 8005c2a:	898b      	ldrh	r3, [r1, #12]
 8005c2c:	061b      	lsls	r3, r3, #24
 8005c2e:	b09d      	sub	sp, #116	; 0x74
 8005c30:	4607      	mov	r7, r0
 8005c32:	460d      	mov	r5, r1
 8005c34:	4614      	mov	r4, r2
 8005c36:	d50e      	bpl.n	8005c56 <_svfiprintf_r+0x32>
 8005c38:	690b      	ldr	r3, [r1, #16]
 8005c3a:	b963      	cbnz	r3, 8005c56 <_svfiprintf_r+0x32>
 8005c3c:	2140      	movs	r1, #64	; 0x40
 8005c3e:	f000 faef 	bl	8006220 <_malloc_r>
 8005c42:	6028      	str	r0, [r5, #0]
 8005c44:	6128      	str	r0, [r5, #16]
 8005c46:	b920      	cbnz	r0, 8005c52 <_svfiprintf_r+0x2e>
 8005c48:	230c      	movs	r3, #12
 8005c4a:	603b      	str	r3, [r7, #0]
 8005c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c50:	e0d1      	b.n	8005df6 <_svfiprintf_r+0x1d2>
 8005c52:	2340      	movs	r3, #64	; 0x40
 8005c54:	616b      	str	r3, [r5, #20]
 8005c56:	2300      	movs	r3, #0
 8005c58:	9309      	str	r3, [sp, #36]	; 0x24
 8005c5a:	2320      	movs	r3, #32
 8005c5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c60:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c64:	2330      	movs	r3, #48	; 0x30
 8005c66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005e10 <_svfiprintf_r+0x1ec>
 8005c6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c6e:	f04f 0901 	mov.w	r9, #1
 8005c72:	4623      	mov	r3, r4
 8005c74:	469a      	mov	sl, r3
 8005c76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c7a:	b10a      	cbz	r2, 8005c80 <_svfiprintf_r+0x5c>
 8005c7c:	2a25      	cmp	r2, #37	; 0x25
 8005c7e:	d1f9      	bne.n	8005c74 <_svfiprintf_r+0x50>
 8005c80:	ebba 0b04 	subs.w	fp, sl, r4
 8005c84:	d00b      	beq.n	8005c9e <_svfiprintf_r+0x7a>
 8005c86:	465b      	mov	r3, fp
 8005c88:	4622      	mov	r2, r4
 8005c8a:	4629      	mov	r1, r5
 8005c8c:	4638      	mov	r0, r7
 8005c8e:	f7ff ff6d 	bl	8005b6c <__ssputs_r>
 8005c92:	3001      	adds	r0, #1
 8005c94:	f000 80aa 	beq.w	8005dec <_svfiprintf_r+0x1c8>
 8005c98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c9a:	445a      	add	r2, fp
 8005c9c:	9209      	str	r2, [sp, #36]	; 0x24
 8005c9e:	f89a 3000 	ldrb.w	r3, [sl]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f000 80a2 	beq.w	8005dec <_svfiprintf_r+0x1c8>
 8005ca8:	2300      	movs	r3, #0
 8005caa:	f04f 32ff 	mov.w	r2, #4294967295
 8005cae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cb2:	f10a 0a01 	add.w	sl, sl, #1
 8005cb6:	9304      	str	r3, [sp, #16]
 8005cb8:	9307      	str	r3, [sp, #28]
 8005cba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005cbe:	931a      	str	r3, [sp, #104]	; 0x68
 8005cc0:	4654      	mov	r4, sl
 8005cc2:	2205      	movs	r2, #5
 8005cc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cc8:	4851      	ldr	r0, [pc, #324]	; (8005e10 <_svfiprintf_r+0x1ec>)
 8005cca:	f7fa fa89 	bl	80001e0 <memchr>
 8005cce:	9a04      	ldr	r2, [sp, #16]
 8005cd0:	b9d8      	cbnz	r0, 8005d0a <_svfiprintf_r+0xe6>
 8005cd2:	06d0      	lsls	r0, r2, #27
 8005cd4:	bf44      	itt	mi
 8005cd6:	2320      	movmi	r3, #32
 8005cd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cdc:	0711      	lsls	r1, r2, #28
 8005cde:	bf44      	itt	mi
 8005ce0:	232b      	movmi	r3, #43	; 0x2b
 8005ce2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ce6:	f89a 3000 	ldrb.w	r3, [sl]
 8005cea:	2b2a      	cmp	r3, #42	; 0x2a
 8005cec:	d015      	beq.n	8005d1a <_svfiprintf_r+0xf6>
 8005cee:	9a07      	ldr	r2, [sp, #28]
 8005cf0:	4654      	mov	r4, sl
 8005cf2:	2000      	movs	r0, #0
 8005cf4:	f04f 0c0a 	mov.w	ip, #10
 8005cf8:	4621      	mov	r1, r4
 8005cfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cfe:	3b30      	subs	r3, #48	; 0x30
 8005d00:	2b09      	cmp	r3, #9
 8005d02:	d94e      	bls.n	8005da2 <_svfiprintf_r+0x17e>
 8005d04:	b1b0      	cbz	r0, 8005d34 <_svfiprintf_r+0x110>
 8005d06:	9207      	str	r2, [sp, #28]
 8005d08:	e014      	b.n	8005d34 <_svfiprintf_r+0x110>
 8005d0a:	eba0 0308 	sub.w	r3, r0, r8
 8005d0e:	fa09 f303 	lsl.w	r3, r9, r3
 8005d12:	4313      	orrs	r3, r2
 8005d14:	9304      	str	r3, [sp, #16]
 8005d16:	46a2      	mov	sl, r4
 8005d18:	e7d2      	b.n	8005cc0 <_svfiprintf_r+0x9c>
 8005d1a:	9b03      	ldr	r3, [sp, #12]
 8005d1c:	1d19      	adds	r1, r3, #4
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	9103      	str	r1, [sp, #12]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	bfbb      	ittet	lt
 8005d26:	425b      	neglt	r3, r3
 8005d28:	f042 0202 	orrlt.w	r2, r2, #2
 8005d2c:	9307      	strge	r3, [sp, #28]
 8005d2e:	9307      	strlt	r3, [sp, #28]
 8005d30:	bfb8      	it	lt
 8005d32:	9204      	strlt	r2, [sp, #16]
 8005d34:	7823      	ldrb	r3, [r4, #0]
 8005d36:	2b2e      	cmp	r3, #46	; 0x2e
 8005d38:	d10c      	bne.n	8005d54 <_svfiprintf_r+0x130>
 8005d3a:	7863      	ldrb	r3, [r4, #1]
 8005d3c:	2b2a      	cmp	r3, #42	; 0x2a
 8005d3e:	d135      	bne.n	8005dac <_svfiprintf_r+0x188>
 8005d40:	9b03      	ldr	r3, [sp, #12]
 8005d42:	1d1a      	adds	r2, r3, #4
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	9203      	str	r2, [sp, #12]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	bfb8      	it	lt
 8005d4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d50:	3402      	adds	r4, #2
 8005d52:	9305      	str	r3, [sp, #20]
 8005d54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005e20 <_svfiprintf_r+0x1fc>
 8005d58:	7821      	ldrb	r1, [r4, #0]
 8005d5a:	2203      	movs	r2, #3
 8005d5c:	4650      	mov	r0, sl
 8005d5e:	f7fa fa3f 	bl	80001e0 <memchr>
 8005d62:	b140      	cbz	r0, 8005d76 <_svfiprintf_r+0x152>
 8005d64:	2340      	movs	r3, #64	; 0x40
 8005d66:	eba0 000a 	sub.w	r0, r0, sl
 8005d6a:	fa03 f000 	lsl.w	r0, r3, r0
 8005d6e:	9b04      	ldr	r3, [sp, #16]
 8005d70:	4303      	orrs	r3, r0
 8005d72:	3401      	adds	r4, #1
 8005d74:	9304      	str	r3, [sp, #16]
 8005d76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d7a:	4826      	ldr	r0, [pc, #152]	; (8005e14 <_svfiprintf_r+0x1f0>)
 8005d7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d80:	2206      	movs	r2, #6
 8005d82:	f7fa fa2d 	bl	80001e0 <memchr>
 8005d86:	2800      	cmp	r0, #0
 8005d88:	d038      	beq.n	8005dfc <_svfiprintf_r+0x1d8>
 8005d8a:	4b23      	ldr	r3, [pc, #140]	; (8005e18 <_svfiprintf_r+0x1f4>)
 8005d8c:	bb1b      	cbnz	r3, 8005dd6 <_svfiprintf_r+0x1b2>
 8005d8e:	9b03      	ldr	r3, [sp, #12]
 8005d90:	3307      	adds	r3, #7
 8005d92:	f023 0307 	bic.w	r3, r3, #7
 8005d96:	3308      	adds	r3, #8
 8005d98:	9303      	str	r3, [sp, #12]
 8005d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d9c:	4433      	add	r3, r6
 8005d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8005da0:	e767      	b.n	8005c72 <_svfiprintf_r+0x4e>
 8005da2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005da6:	460c      	mov	r4, r1
 8005da8:	2001      	movs	r0, #1
 8005daa:	e7a5      	b.n	8005cf8 <_svfiprintf_r+0xd4>
 8005dac:	2300      	movs	r3, #0
 8005dae:	3401      	adds	r4, #1
 8005db0:	9305      	str	r3, [sp, #20]
 8005db2:	4619      	mov	r1, r3
 8005db4:	f04f 0c0a 	mov.w	ip, #10
 8005db8:	4620      	mov	r0, r4
 8005dba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005dbe:	3a30      	subs	r2, #48	; 0x30
 8005dc0:	2a09      	cmp	r2, #9
 8005dc2:	d903      	bls.n	8005dcc <_svfiprintf_r+0x1a8>
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d0c5      	beq.n	8005d54 <_svfiprintf_r+0x130>
 8005dc8:	9105      	str	r1, [sp, #20]
 8005dca:	e7c3      	b.n	8005d54 <_svfiprintf_r+0x130>
 8005dcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005dd0:	4604      	mov	r4, r0
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e7f0      	b.n	8005db8 <_svfiprintf_r+0x194>
 8005dd6:	ab03      	add	r3, sp, #12
 8005dd8:	9300      	str	r3, [sp, #0]
 8005dda:	462a      	mov	r2, r5
 8005ddc:	4b0f      	ldr	r3, [pc, #60]	; (8005e1c <_svfiprintf_r+0x1f8>)
 8005dde:	a904      	add	r1, sp, #16
 8005de0:	4638      	mov	r0, r7
 8005de2:	f3af 8000 	nop.w
 8005de6:	1c42      	adds	r2, r0, #1
 8005de8:	4606      	mov	r6, r0
 8005dea:	d1d6      	bne.n	8005d9a <_svfiprintf_r+0x176>
 8005dec:	89ab      	ldrh	r3, [r5, #12]
 8005dee:	065b      	lsls	r3, r3, #25
 8005df0:	f53f af2c 	bmi.w	8005c4c <_svfiprintf_r+0x28>
 8005df4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005df6:	b01d      	add	sp, #116	; 0x74
 8005df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dfc:	ab03      	add	r3, sp, #12
 8005dfe:	9300      	str	r3, [sp, #0]
 8005e00:	462a      	mov	r2, r5
 8005e02:	4b06      	ldr	r3, [pc, #24]	; (8005e1c <_svfiprintf_r+0x1f8>)
 8005e04:	a904      	add	r1, sp, #16
 8005e06:	4638      	mov	r0, r7
 8005e08:	f000 f87a 	bl	8005f00 <_printf_i>
 8005e0c:	e7eb      	b.n	8005de6 <_svfiprintf_r+0x1c2>
 8005e0e:	bf00      	nop
 8005e10:	080064d8 	.word	0x080064d8
 8005e14:	080064e2 	.word	0x080064e2
 8005e18:	00000000 	.word	0x00000000
 8005e1c:	08005b6d 	.word	0x08005b6d
 8005e20:	080064de 	.word	0x080064de

08005e24 <_printf_common>:
 8005e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e28:	4616      	mov	r6, r2
 8005e2a:	4699      	mov	r9, r3
 8005e2c:	688a      	ldr	r2, [r1, #8]
 8005e2e:	690b      	ldr	r3, [r1, #16]
 8005e30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e34:	4293      	cmp	r3, r2
 8005e36:	bfb8      	it	lt
 8005e38:	4613      	movlt	r3, r2
 8005e3a:	6033      	str	r3, [r6, #0]
 8005e3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e40:	4607      	mov	r7, r0
 8005e42:	460c      	mov	r4, r1
 8005e44:	b10a      	cbz	r2, 8005e4a <_printf_common+0x26>
 8005e46:	3301      	adds	r3, #1
 8005e48:	6033      	str	r3, [r6, #0]
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	0699      	lsls	r1, r3, #26
 8005e4e:	bf42      	ittt	mi
 8005e50:	6833      	ldrmi	r3, [r6, #0]
 8005e52:	3302      	addmi	r3, #2
 8005e54:	6033      	strmi	r3, [r6, #0]
 8005e56:	6825      	ldr	r5, [r4, #0]
 8005e58:	f015 0506 	ands.w	r5, r5, #6
 8005e5c:	d106      	bne.n	8005e6c <_printf_common+0x48>
 8005e5e:	f104 0a19 	add.w	sl, r4, #25
 8005e62:	68e3      	ldr	r3, [r4, #12]
 8005e64:	6832      	ldr	r2, [r6, #0]
 8005e66:	1a9b      	subs	r3, r3, r2
 8005e68:	42ab      	cmp	r3, r5
 8005e6a:	dc26      	bgt.n	8005eba <_printf_common+0x96>
 8005e6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e70:	1e13      	subs	r3, r2, #0
 8005e72:	6822      	ldr	r2, [r4, #0]
 8005e74:	bf18      	it	ne
 8005e76:	2301      	movne	r3, #1
 8005e78:	0692      	lsls	r2, r2, #26
 8005e7a:	d42b      	bmi.n	8005ed4 <_printf_common+0xb0>
 8005e7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e80:	4649      	mov	r1, r9
 8005e82:	4638      	mov	r0, r7
 8005e84:	47c0      	blx	r8
 8005e86:	3001      	adds	r0, #1
 8005e88:	d01e      	beq.n	8005ec8 <_printf_common+0xa4>
 8005e8a:	6823      	ldr	r3, [r4, #0]
 8005e8c:	68e5      	ldr	r5, [r4, #12]
 8005e8e:	6832      	ldr	r2, [r6, #0]
 8005e90:	f003 0306 	and.w	r3, r3, #6
 8005e94:	2b04      	cmp	r3, #4
 8005e96:	bf08      	it	eq
 8005e98:	1aad      	subeq	r5, r5, r2
 8005e9a:	68a3      	ldr	r3, [r4, #8]
 8005e9c:	6922      	ldr	r2, [r4, #16]
 8005e9e:	bf0c      	ite	eq
 8005ea0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ea4:	2500      	movne	r5, #0
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	bfc4      	itt	gt
 8005eaa:	1a9b      	subgt	r3, r3, r2
 8005eac:	18ed      	addgt	r5, r5, r3
 8005eae:	2600      	movs	r6, #0
 8005eb0:	341a      	adds	r4, #26
 8005eb2:	42b5      	cmp	r5, r6
 8005eb4:	d11a      	bne.n	8005eec <_printf_common+0xc8>
 8005eb6:	2000      	movs	r0, #0
 8005eb8:	e008      	b.n	8005ecc <_printf_common+0xa8>
 8005eba:	2301      	movs	r3, #1
 8005ebc:	4652      	mov	r2, sl
 8005ebe:	4649      	mov	r1, r9
 8005ec0:	4638      	mov	r0, r7
 8005ec2:	47c0      	blx	r8
 8005ec4:	3001      	adds	r0, #1
 8005ec6:	d103      	bne.n	8005ed0 <_printf_common+0xac>
 8005ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ed0:	3501      	adds	r5, #1
 8005ed2:	e7c6      	b.n	8005e62 <_printf_common+0x3e>
 8005ed4:	18e1      	adds	r1, r4, r3
 8005ed6:	1c5a      	adds	r2, r3, #1
 8005ed8:	2030      	movs	r0, #48	; 0x30
 8005eda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ede:	4422      	add	r2, r4
 8005ee0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ee4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ee8:	3302      	adds	r3, #2
 8005eea:	e7c7      	b.n	8005e7c <_printf_common+0x58>
 8005eec:	2301      	movs	r3, #1
 8005eee:	4622      	mov	r2, r4
 8005ef0:	4649      	mov	r1, r9
 8005ef2:	4638      	mov	r0, r7
 8005ef4:	47c0      	blx	r8
 8005ef6:	3001      	adds	r0, #1
 8005ef8:	d0e6      	beq.n	8005ec8 <_printf_common+0xa4>
 8005efa:	3601      	adds	r6, #1
 8005efc:	e7d9      	b.n	8005eb2 <_printf_common+0x8e>
	...

08005f00 <_printf_i>:
 8005f00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f04:	460c      	mov	r4, r1
 8005f06:	4691      	mov	r9, r2
 8005f08:	7e27      	ldrb	r7, [r4, #24]
 8005f0a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005f0c:	2f78      	cmp	r7, #120	; 0x78
 8005f0e:	4680      	mov	r8, r0
 8005f10:	469a      	mov	sl, r3
 8005f12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f16:	d807      	bhi.n	8005f28 <_printf_i+0x28>
 8005f18:	2f62      	cmp	r7, #98	; 0x62
 8005f1a:	d80a      	bhi.n	8005f32 <_printf_i+0x32>
 8005f1c:	2f00      	cmp	r7, #0
 8005f1e:	f000 80d8 	beq.w	80060d2 <_printf_i+0x1d2>
 8005f22:	2f58      	cmp	r7, #88	; 0x58
 8005f24:	f000 80a3 	beq.w	800606e <_printf_i+0x16e>
 8005f28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f30:	e03a      	b.n	8005fa8 <_printf_i+0xa8>
 8005f32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f36:	2b15      	cmp	r3, #21
 8005f38:	d8f6      	bhi.n	8005f28 <_printf_i+0x28>
 8005f3a:	a001      	add	r0, pc, #4	; (adr r0, 8005f40 <_printf_i+0x40>)
 8005f3c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005f40:	08005f99 	.word	0x08005f99
 8005f44:	08005fad 	.word	0x08005fad
 8005f48:	08005f29 	.word	0x08005f29
 8005f4c:	08005f29 	.word	0x08005f29
 8005f50:	08005f29 	.word	0x08005f29
 8005f54:	08005f29 	.word	0x08005f29
 8005f58:	08005fad 	.word	0x08005fad
 8005f5c:	08005f29 	.word	0x08005f29
 8005f60:	08005f29 	.word	0x08005f29
 8005f64:	08005f29 	.word	0x08005f29
 8005f68:	08005f29 	.word	0x08005f29
 8005f6c:	080060b9 	.word	0x080060b9
 8005f70:	08005fdd 	.word	0x08005fdd
 8005f74:	0800609b 	.word	0x0800609b
 8005f78:	08005f29 	.word	0x08005f29
 8005f7c:	08005f29 	.word	0x08005f29
 8005f80:	080060db 	.word	0x080060db
 8005f84:	08005f29 	.word	0x08005f29
 8005f88:	08005fdd 	.word	0x08005fdd
 8005f8c:	08005f29 	.word	0x08005f29
 8005f90:	08005f29 	.word	0x08005f29
 8005f94:	080060a3 	.word	0x080060a3
 8005f98:	680b      	ldr	r3, [r1, #0]
 8005f9a:	1d1a      	adds	r2, r3, #4
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	600a      	str	r2, [r1, #0]
 8005fa0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005fa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e0a3      	b.n	80060f4 <_printf_i+0x1f4>
 8005fac:	6825      	ldr	r5, [r4, #0]
 8005fae:	6808      	ldr	r0, [r1, #0]
 8005fb0:	062e      	lsls	r6, r5, #24
 8005fb2:	f100 0304 	add.w	r3, r0, #4
 8005fb6:	d50a      	bpl.n	8005fce <_printf_i+0xce>
 8005fb8:	6805      	ldr	r5, [r0, #0]
 8005fba:	600b      	str	r3, [r1, #0]
 8005fbc:	2d00      	cmp	r5, #0
 8005fbe:	da03      	bge.n	8005fc8 <_printf_i+0xc8>
 8005fc0:	232d      	movs	r3, #45	; 0x2d
 8005fc2:	426d      	negs	r5, r5
 8005fc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fc8:	485e      	ldr	r0, [pc, #376]	; (8006144 <_printf_i+0x244>)
 8005fca:	230a      	movs	r3, #10
 8005fcc:	e019      	b.n	8006002 <_printf_i+0x102>
 8005fce:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005fd2:	6805      	ldr	r5, [r0, #0]
 8005fd4:	600b      	str	r3, [r1, #0]
 8005fd6:	bf18      	it	ne
 8005fd8:	b22d      	sxthne	r5, r5
 8005fda:	e7ef      	b.n	8005fbc <_printf_i+0xbc>
 8005fdc:	680b      	ldr	r3, [r1, #0]
 8005fde:	6825      	ldr	r5, [r4, #0]
 8005fe0:	1d18      	adds	r0, r3, #4
 8005fe2:	6008      	str	r0, [r1, #0]
 8005fe4:	0628      	lsls	r0, r5, #24
 8005fe6:	d501      	bpl.n	8005fec <_printf_i+0xec>
 8005fe8:	681d      	ldr	r5, [r3, #0]
 8005fea:	e002      	b.n	8005ff2 <_printf_i+0xf2>
 8005fec:	0669      	lsls	r1, r5, #25
 8005fee:	d5fb      	bpl.n	8005fe8 <_printf_i+0xe8>
 8005ff0:	881d      	ldrh	r5, [r3, #0]
 8005ff2:	4854      	ldr	r0, [pc, #336]	; (8006144 <_printf_i+0x244>)
 8005ff4:	2f6f      	cmp	r7, #111	; 0x6f
 8005ff6:	bf0c      	ite	eq
 8005ff8:	2308      	moveq	r3, #8
 8005ffa:	230a      	movne	r3, #10
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006002:	6866      	ldr	r6, [r4, #4]
 8006004:	60a6      	str	r6, [r4, #8]
 8006006:	2e00      	cmp	r6, #0
 8006008:	bfa2      	ittt	ge
 800600a:	6821      	ldrge	r1, [r4, #0]
 800600c:	f021 0104 	bicge.w	r1, r1, #4
 8006010:	6021      	strge	r1, [r4, #0]
 8006012:	b90d      	cbnz	r5, 8006018 <_printf_i+0x118>
 8006014:	2e00      	cmp	r6, #0
 8006016:	d04d      	beq.n	80060b4 <_printf_i+0x1b4>
 8006018:	4616      	mov	r6, r2
 800601a:	fbb5 f1f3 	udiv	r1, r5, r3
 800601e:	fb03 5711 	mls	r7, r3, r1, r5
 8006022:	5dc7      	ldrb	r7, [r0, r7]
 8006024:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006028:	462f      	mov	r7, r5
 800602a:	42bb      	cmp	r3, r7
 800602c:	460d      	mov	r5, r1
 800602e:	d9f4      	bls.n	800601a <_printf_i+0x11a>
 8006030:	2b08      	cmp	r3, #8
 8006032:	d10b      	bne.n	800604c <_printf_i+0x14c>
 8006034:	6823      	ldr	r3, [r4, #0]
 8006036:	07df      	lsls	r7, r3, #31
 8006038:	d508      	bpl.n	800604c <_printf_i+0x14c>
 800603a:	6923      	ldr	r3, [r4, #16]
 800603c:	6861      	ldr	r1, [r4, #4]
 800603e:	4299      	cmp	r1, r3
 8006040:	bfde      	ittt	le
 8006042:	2330      	movle	r3, #48	; 0x30
 8006044:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006048:	f106 36ff 	addle.w	r6, r6, #4294967295
 800604c:	1b92      	subs	r2, r2, r6
 800604e:	6122      	str	r2, [r4, #16]
 8006050:	f8cd a000 	str.w	sl, [sp]
 8006054:	464b      	mov	r3, r9
 8006056:	aa03      	add	r2, sp, #12
 8006058:	4621      	mov	r1, r4
 800605a:	4640      	mov	r0, r8
 800605c:	f7ff fee2 	bl	8005e24 <_printf_common>
 8006060:	3001      	adds	r0, #1
 8006062:	d14c      	bne.n	80060fe <_printf_i+0x1fe>
 8006064:	f04f 30ff 	mov.w	r0, #4294967295
 8006068:	b004      	add	sp, #16
 800606a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800606e:	4835      	ldr	r0, [pc, #212]	; (8006144 <_printf_i+0x244>)
 8006070:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006074:	6823      	ldr	r3, [r4, #0]
 8006076:	680e      	ldr	r6, [r1, #0]
 8006078:	061f      	lsls	r7, r3, #24
 800607a:	f856 5b04 	ldr.w	r5, [r6], #4
 800607e:	600e      	str	r6, [r1, #0]
 8006080:	d514      	bpl.n	80060ac <_printf_i+0x1ac>
 8006082:	07d9      	lsls	r1, r3, #31
 8006084:	bf44      	itt	mi
 8006086:	f043 0320 	orrmi.w	r3, r3, #32
 800608a:	6023      	strmi	r3, [r4, #0]
 800608c:	b91d      	cbnz	r5, 8006096 <_printf_i+0x196>
 800608e:	6823      	ldr	r3, [r4, #0]
 8006090:	f023 0320 	bic.w	r3, r3, #32
 8006094:	6023      	str	r3, [r4, #0]
 8006096:	2310      	movs	r3, #16
 8006098:	e7b0      	b.n	8005ffc <_printf_i+0xfc>
 800609a:	6823      	ldr	r3, [r4, #0]
 800609c:	f043 0320 	orr.w	r3, r3, #32
 80060a0:	6023      	str	r3, [r4, #0]
 80060a2:	2378      	movs	r3, #120	; 0x78
 80060a4:	4828      	ldr	r0, [pc, #160]	; (8006148 <_printf_i+0x248>)
 80060a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060aa:	e7e3      	b.n	8006074 <_printf_i+0x174>
 80060ac:	065e      	lsls	r6, r3, #25
 80060ae:	bf48      	it	mi
 80060b0:	b2ad      	uxthmi	r5, r5
 80060b2:	e7e6      	b.n	8006082 <_printf_i+0x182>
 80060b4:	4616      	mov	r6, r2
 80060b6:	e7bb      	b.n	8006030 <_printf_i+0x130>
 80060b8:	680b      	ldr	r3, [r1, #0]
 80060ba:	6826      	ldr	r6, [r4, #0]
 80060bc:	6960      	ldr	r0, [r4, #20]
 80060be:	1d1d      	adds	r5, r3, #4
 80060c0:	600d      	str	r5, [r1, #0]
 80060c2:	0635      	lsls	r5, r6, #24
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	d501      	bpl.n	80060cc <_printf_i+0x1cc>
 80060c8:	6018      	str	r0, [r3, #0]
 80060ca:	e002      	b.n	80060d2 <_printf_i+0x1d2>
 80060cc:	0671      	lsls	r1, r6, #25
 80060ce:	d5fb      	bpl.n	80060c8 <_printf_i+0x1c8>
 80060d0:	8018      	strh	r0, [r3, #0]
 80060d2:	2300      	movs	r3, #0
 80060d4:	6123      	str	r3, [r4, #16]
 80060d6:	4616      	mov	r6, r2
 80060d8:	e7ba      	b.n	8006050 <_printf_i+0x150>
 80060da:	680b      	ldr	r3, [r1, #0]
 80060dc:	1d1a      	adds	r2, r3, #4
 80060de:	600a      	str	r2, [r1, #0]
 80060e0:	681e      	ldr	r6, [r3, #0]
 80060e2:	6862      	ldr	r2, [r4, #4]
 80060e4:	2100      	movs	r1, #0
 80060e6:	4630      	mov	r0, r6
 80060e8:	f7fa f87a 	bl	80001e0 <memchr>
 80060ec:	b108      	cbz	r0, 80060f2 <_printf_i+0x1f2>
 80060ee:	1b80      	subs	r0, r0, r6
 80060f0:	6060      	str	r0, [r4, #4]
 80060f2:	6863      	ldr	r3, [r4, #4]
 80060f4:	6123      	str	r3, [r4, #16]
 80060f6:	2300      	movs	r3, #0
 80060f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060fc:	e7a8      	b.n	8006050 <_printf_i+0x150>
 80060fe:	6923      	ldr	r3, [r4, #16]
 8006100:	4632      	mov	r2, r6
 8006102:	4649      	mov	r1, r9
 8006104:	4640      	mov	r0, r8
 8006106:	47d0      	blx	sl
 8006108:	3001      	adds	r0, #1
 800610a:	d0ab      	beq.n	8006064 <_printf_i+0x164>
 800610c:	6823      	ldr	r3, [r4, #0]
 800610e:	079b      	lsls	r3, r3, #30
 8006110:	d413      	bmi.n	800613a <_printf_i+0x23a>
 8006112:	68e0      	ldr	r0, [r4, #12]
 8006114:	9b03      	ldr	r3, [sp, #12]
 8006116:	4298      	cmp	r0, r3
 8006118:	bfb8      	it	lt
 800611a:	4618      	movlt	r0, r3
 800611c:	e7a4      	b.n	8006068 <_printf_i+0x168>
 800611e:	2301      	movs	r3, #1
 8006120:	4632      	mov	r2, r6
 8006122:	4649      	mov	r1, r9
 8006124:	4640      	mov	r0, r8
 8006126:	47d0      	blx	sl
 8006128:	3001      	adds	r0, #1
 800612a:	d09b      	beq.n	8006064 <_printf_i+0x164>
 800612c:	3501      	adds	r5, #1
 800612e:	68e3      	ldr	r3, [r4, #12]
 8006130:	9903      	ldr	r1, [sp, #12]
 8006132:	1a5b      	subs	r3, r3, r1
 8006134:	42ab      	cmp	r3, r5
 8006136:	dcf2      	bgt.n	800611e <_printf_i+0x21e>
 8006138:	e7eb      	b.n	8006112 <_printf_i+0x212>
 800613a:	2500      	movs	r5, #0
 800613c:	f104 0619 	add.w	r6, r4, #25
 8006140:	e7f5      	b.n	800612e <_printf_i+0x22e>
 8006142:	bf00      	nop
 8006144:	080064e9 	.word	0x080064e9
 8006148:	080064fa 	.word	0x080064fa

0800614c <memmove>:
 800614c:	4288      	cmp	r0, r1
 800614e:	b510      	push	{r4, lr}
 8006150:	eb01 0402 	add.w	r4, r1, r2
 8006154:	d902      	bls.n	800615c <memmove+0x10>
 8006156:	4284      	cmp	r4, r0
 8006158:	4623      	mov	r3, r4
 800615a:	d807      	bhi.n	800616c <memmove+0x20>
 800615c:	1e43      	subs	r3, r0, #1
 800615e:	42a1      	cmp	r1, r4
 8006160:	d008      	beq.n	8006174 <memmove+0x28>
 8006162:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006166:	f803 2f01 	strb.w	r2, [r3, #1]!
 800616a:	e7f8      	b.n	800615e <memmove+0x12>
 800616c:	4402      	add	r2, r0
 800616e:	4601      	mov	r1, r0
 8006170:	428a      	cmp	r2, r1
 8006172:	d100      	bne.n	8006176 <memmove+0x2a>
 8006174:	bd10      	pop	{r4, pc}
 8006176:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800617a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800617e:	e7f7      	b.n	8006170 <memmove+0x24>

08006180 <_free_r>:
 8006180:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006182:	2900      	cmp	r1, #0
 8006184:	d048      	beq.n	8006218 <_free_r+0x98>
 8006186:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800618a:	9001      	str	r0, [sp, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	f1a1 0404 	sub.w	r4, r1, #4
 8006192:	bfb8      	it	lt
 8006194:	18e4      	addlt	r4, r4, r3
 8006196:	f000 f8d3 	bl	8006340 <__malloc_lock>
 800619a:	4a20      	ldr	r2, [pc, #128]	; (800621c <_free_r+0x9c>)
 800619c:	9801      	ldr	r0, [sp, #4]
 800619e:	6813      	ldr	r3, [r2, #0]
 80061a0:	4615      	mov	r5, r2
 80061a2:	b933      	cbnz	r3, 80061b2 <_free_r+0x32>
 80061a4:	6063      	str	r3, [r4, #4]
 80061a6:	6014      	str	r4, [r2, #0]
 80061a8:	b003      	add	sp, #12
 80061aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061ae:	f000 b8cd 	b.w	800634c <__malloc_unlock>
 80061b2:	42a3      	cmp	r3, r4
 80061b4:	d90b      	bls.n	80061ce <_free_r+0x4e>
 80061b6:	6821      	ldr	r1, [r4, #0]
 80061b8:	1862      	adds	r2, r4, r1
 80061ba:	4293      	cmp	r3, r2
 80061bc:	bf04      	itt	eq
 80061be:	681a      	ldreq	r2, [r3, #0]
 80061c0:	685b      	ldreq	r3, [r3, #4]
 80061c2:	6063      	str	r3, [r4, #4]
 80061c4:	bf04      	itt	eq
 80061c6:	1852      	addeq	r2, r2, r1
 80061c8:	6022      	streq	r2, [r4, #0]
 80061ca:	602c      	str	r4, [r5, #0]
 80061cc:	e7ec      	b.n	80061a8 <_free_r+0x28>
 80061ce:	461a      	mov	r2, r3
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	b10b      	cbz	r3, 80061d8 <_free_r+0x58>
 80061d4:	42a3      	cmp	r3, r4
 80061d6:	d9fa      	bls.n	80061ce <_free_r+0x4e>
 80061d8:	6811      	ldr	r1, [r2, #0]
 80061da:	1855      	adds	r5, r2, r1
 80061dc:	42a5      	cmp	r5, r4
 80061de:	d10b      	bne.n	80061f8 <_free_r+0x78>
 80061e0:	6824      	ldr	r4, [r4, #0]
 80061e2:	4421      	add	r1, r4
 80061e4:	1854      	adds	r4, r2, r1
 80061e6:	42a3      	cmp	r3, r4
 80061e8:	6011      	str	r1, [r2, #0]
 80061ea:	d1dd      	bne.n	80061a8 <_free_r+0x28>
 80061ec:	681c      	ldr	r4, [r3, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	6053      	str	r3, [r2, #4]
 80061f2:	4421      	add	r1, r4
 80061f4:	6011      	str	r1, [r2, #0]
 80061f6:	e7d7      	b.n	80061a8 <_free_r+0x28>
 80061f8:	d902      	bls.n	8006200 <_free_r+0x80>
 80061fa:	230c      	movs	r3, #12
 80061fc:	6003      	str	r3, [r0, #0]
 80061fe:	e7d3      	b.n	80061a8 <_free_r+0x28>
 8006200:	6825      	ldr	r5, [r4, #0]
 8006202:	1961      	adds	r1, r4, r5
 8006204:	428b      	cmp	r3, r1
 8006206:	bf04      	itt	eq
 8006208:	6819      	ldreq	r1, [r3, #0]
 800620a:	685b      	ldreq	r3, [r3, #4]
 800620c:	6063      	str	r3, [r4, #4]
 800620e:	bf04      	itt	eq
 8006210:	1949      	addeq	r1, r1, r5
 8006212:	6021      	streq	r1, [r4, #0]
 8006214:	6054      	str	r4, [r2, #4]
 8006216:	e7c7      	b.n	80061a8 <_free_r+0x28>
 8006218:	b003      	add	sp, #12
 800621a:	bd30      	pop	{r4, r5, pc}
 800621c:	200000b8 	.word	0x200000b8

08006220 <_malloc_r>:
 8006220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006222:	1ccd      	adds	r5, r1, #3
 8006224:	f025 0503 	bic.w	r5, r5, #3
 8006228:	3508      	adds	r5, #8
 800622a:	2d0c      	cmp	r5, #12
 800622c:	bf38      	it	cc
 800622e:	250c      	movcc	r5, #12
 8006230:	2d00      	cmp	r5, #0
 8006232:	4606      	mov	r6, r0
 8006234:	db01      	blt.n	800623a <_malloc_r+0x1a>
 8006236:	42a9      	cmp	r1, r5
 8006238:	d903      	bls.n	8006242 <_malloc_r+0x22>
 800623a:	230c      	movs	r3, #12
 800623c:	6033      	str	r3, [r6, #0]
 800623e:	2000      	movs	r0, #0
 8006240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006242:	f000 f87d 	bl	8006340 <__malloc_lock>
 8006246:	4921      	ldr	r1, [pc, #132]	; (80062cc <_malloc_r+0xac>)
 8006248:	680a      	ldr	r2, [r1, #0]
 800624a:	4614      	mov	r4, r2
 800624c:	b99c      	cbnz	r4, 8006276 <_malloc_r+0x56>
 800624e:	4f20      	ldr	r7, [pc, #128]	; (80062d0 <_malloc_r+0xb0>)
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	b923      	cbnz	r3, 800625e <_malloc_r+0x3e>
 8006254:	4621      	mov	r1, r4
 8006256:	4630      	mov	r0, r6
 8006258:	f000 f862 	bl	8006320 <_sbrk_r>
 800625c:	6038      	str	r0, [r7, #0]
 800625e:	4629      	mov	r1, r5
 8006260:	4630      	mov	r0, r6
 8006262:	f000 f85d 	bl	8006320 <_sbrk_r>
 8006266:	1c43      	adds	r3, r0, #1
 8006268:	d123      	bne.n	80062b2 <_malloc_r+0x92>
 800626a:	230c      	movs	r3, #12
 800626c:	6033      	str	r3, [r6, #0]
 800626e:	4630      	mov	r0, r6
 8006270:	f000 f86c 	bl	800634c <__malloc_unlock>
 8006274:	e7e3      	b.n	800623e <_malloc_r+0x1e>
 8006276:	6823      	ldr	r3, [r4, #0]
 8006278:	1b5b      	subs	r3, r3, r5
 800627a:	d417      	bmi.n	80062ac <_malloc_r+0x8c>
 800627c:	2b0b      	cmp	r3, #11
 800627e:	d903      	bls.n	8006288 <_malloc_r+0x68>
 8006280:	6023      	str	r3, [r4, #0]
 8006282:	441c      	add	r4, r3
 8006284:	6025      	str	r5, [r4, #0]
 8006286:	e004      	b.n	8006292 <_malloc_r+0x72>
 8006288:	6863      	ldr	r3, [r4, #4]
 800628a:	42a2      	cmp	r2, r4
 800628c:	bf0c      	ite	eq
 800628e:	600b      	streq	r3, [r1, #0]
 8006290:	6053      	strne	r3, [r2, #4]
 8006292:	4630      	mov	r0, r6
 8006294:	f000 f85a 	bl	800634c <__malloc_unlock>
 8006298:	f104 000b 	add.w	r0, r4, #11
 800629c:	1d23      	adds	r3, r4, #4
 800629e:	f020 0007 	bic.w	r0, r0, #7
 80062a2:	1ac2      	subs	r2, r0, r3
 80062a4:	d0cc      	beq.n	8006240 <_malloc_r+0x20>
 80062a6:	1a1b      	subs	r3, r3, r0
 80062a8:	50a3      	str	r3, [r4, r2]
 80062aa:	e7c9      	b.n	8006240 <_malloc_r+0x20>
 80062ac:	4622      	mov	r2, r4
 80062ae:	6864      	ldr	r4, [r4, #4]
 80062b0:	e7cc      	b.n	800624c <_malloc_r+0x2c>
 80062b2:	1cc4      	adds	r4, r0, #3
 80062b4:	f024 0403 	bic.w	r4, r4, #3
 80062b8:	42a0      	cmp	r0, r4
 80062ba:	d0e3      	beq.n	8006284 <_malloc_r+0x64>
 80062bc:	1a21      	subs	r1, r4, r0
 80062be:	4630      	mov	r0, r6
 80062c0:	f000 f82e 	bl	8006320 <_sbrk_r>
 80062c4:	3001      	adds	r0, #1
 80062c6:	d1dd      	bne.n	8006284 <_malloc_r+0x64>
 80062c8:	e7cf      	b.n	800626a <_malloc_r+0x4a>
 80062ca:	bf00      	nop
 80062cc:	200000b8 	.word	0x200000b8
 80062d0:	200000bc 	.word	0x200000bc

080062d4 <_realloc_r>:
 80062d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062d6:	4607      	mov	r7, r0
 80062d8:	4614      	mov	r4, r2
 80062da:	460e      	mov	r6, r1
 80062dc:	b921      	cbnz	r1, 80062e8 <_realloc_r+0x14>
 80062de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80062e2:	4611      	mov	r1, r2
 80062e4:	f7ff bf9c 	b.w	8006220 <_malloc_r>
 80062e8:	b922      	cbnz	r2, 80062f4 <_realloc_r+0x20>
 80062ea:	f7ff ff49 	bl	8006180 <_free_r>
 80062ee:	4625      	mov	r5, r4
 80062f0:	4628      	mov	r0, r5
 80062f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062f4:	f000 f830 	bl	8006358 <_malloc_usable_size_r>
 80062f8:	42a0      	cmp	r0, r4
 80062fa:	d20f      	bcs.n	800631c <_realloc_r+0x48>
 80062fc:	4621      	mov	r1, r4
 80062fe:	4638      	mov	r0, r7
 8006300:	f7ff ff8e 	bl	8006220 <_malloc_r>
 8006304:	4605      	mov	r5, r0
 8006306:	2800      	cmp	r0, #0
 8006308:	d0f2      	beq.n	80062f0 <_realloc_r+0x1c>
 800630a:	4631      	mov	r1, r6
 800630c:	4622      	mov	r2, r4
 800630e:	f7ff fbe3 	bl	8005ad8 <memcpy>
 8006312:	4631      	mov	r1, r6
 8006314:	4638      	mov	r0, r7
 8006316:	f7ff ff33 	bl	8006180 <_free_r>
 800631a:	e7e9      	b.n	80062f0 <_realloc_r+0x1c>
 800631c:	4635      	mov	r5, r6
 800631e:	e7e7      	b.n	80062f0 <_realloc_r+0x1c>

08006320 <_sbrk_r>:
 8006320:	b538      	push	{r3, r4, r5, lr}
 8006322:	4d06      	ldr	r5, [pc, #24]	; (800633c <_sbrk_r+0x1c>)
 8006324:	2300      	movs	r3, #0
 8006326:	4604      	mov	r4, r0
 8006328:	4608      	mov	r0, r1
 800632a:	602b      	str	r3, [r5, #0]
 800632c:	f7fa ffc4 	bl	80012b8 <_sbrk>
 8006330:	1c43      	adds	r3, r0, #1
 8006332:	d102      	bne.n	800633a <_sbrk_r+0x1a>
 8006334:	682b      	ldr	r3, [r5, #0]
 8006336:	b103      	cbz	r3, 800633a <_sbrk_r+0x1a>
 8006338:	6023      	str	r3, [r4, #0]
 800633a:	bd38      	pop	{r3, r4, r5, pc}
 800633c:	200006f8 	.word	0x200006f8

08006340 <__malloc_lock>:
 8006340:	4801      	ldr	r0, [pc, #4]	; (8006348 <__malloc_lock+0x8>)
 8006342:	f000 b811 	b.w	8006368 <__retarget_lock_acquire_recursive>
 8006346:	bf00      	nop
 8006348:	20000700 	.word	0x20000700

0800634c <__malloc_unlock>:
 800634c:	4801      	ldr	r0, [pc, #4]	; (8006354 <__malloc_unlock+0x8>)
 800634e:	f000 b80c 	b.w	800636a <__retarget_lock_release_recursive>
 8006352:	bf00      	nop
 8006354:	20000700 	.word	0x20000700

08006358 <_malloc_usable_size_r>:
 8006358:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800635c:	1f18      	subs	r0, r3, #4
 800635e:	2b00      	cmp	r3, #0
 8006360:	bfbc      	itt	lt
 8006362:	580b      	ldrlt	r3, [r1, r0]
 8006364:	18c0      	addlt	r0, r0, r3
 8006366:	4770      	bx	lr

08006368 <__retarget_lock_acquire_recursive>:
 8006368:	4770      	bx	lr

0800636a <__retarget_lock_release_recursive>:
 800636a:	4770      	bx	lr

0800636c <_init>:
 800636c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800636e:	bf00      	nop
 8006370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006372:	bc08      	pop	{r3}
 8006374:	469e      	mov	lr, r3
 8006376:	4770      	bx	lr

08006378 <_fini>:
 8006378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800637a:	bf00      	nop
 800637c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800637e:	bc08      	pop	{r3}
 8006380:	469e      	mov	lr, r3
 8006382:	4770      	bx	lr

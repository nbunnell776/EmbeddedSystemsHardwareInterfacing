
UCSD-Embedded-HW-Interfacing-I2C-Nathan-Bunnell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e8  08008474  08008474  00018474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b5c  08008b5c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008b5c  08008b5c  00018b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b64  08008b64  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b64  08008b64  00018b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b68  08008b68  00018b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008b6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000734  20000074  08008be0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a8  08008be0  000207a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a02b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030f5  00000000  00000000  0003a0cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001628  00000000  00000000  0003d1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f0  00000000  00000000  0003e7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000282cc  00000000  00000000  0003fce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d61  00000000  00000000  00067fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3b5f  00000000  00000000  0007fd0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017386c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006290  00000000  00000000  001738c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800845c 	.word	0x0800845c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800845c 	.word	0x0800845c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <HST221_pwr_en>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void HST221_pwr_en(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b09e      	sub	sp, #120	; 0x78
 800057c:	af02      	add	r7, sp, #8
    // Large-ish char buffer for strings sent over the console
    char buffer[100] = {0};
 800057e:	2300      	movs	r3, #0
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	f107 030c 	add.w	r3, r7, #12
 8000586:	2260      	movs	r2, #96	; 0x60
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f007 fb1c 	bl	8007bc8 <memset>

	// Configure control register 1 (CTRL_REG1, 0x20) bit 7 to enable one-shot
    uint8_t ctrlReg1 = 0x20;
 8000590:	2320      	movs	r3, #32
 8000592:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    uint8_t ctrlData[] = {ctrlReg1, (1 << 7)};
 8000596:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800059a:	713b      	strb	r3, [r7, #4]
 800059c:	2380      	movs	r3, #128	; 0x80
 800059e:	717b      	strb	r3, [r7, #5]

    // Send the target register to the device and get status back
    HAL_StatusTypeDef status;
    status = HAL_I2C_Master_Transmit(&hi2c2, HST221_WRITE_ADDRESS, ctrlData, sizeof(ctrlData), 1000);
 80005a0:	1d3a      	adds	r2, r7, #4
 80005a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a6:	9300      	str	r3, [sp, #0]
 80005a8:	2302      	movs	r3, #2
 80005aa:	21be      	movs	r1, #190	; 0xbe
 80005ac:	481c      	ldr	r0, [pc, #112]	; (8000620 <HST221_pwr_en+0xa8>)
 80005ae:	f002 fb95 	bl	8002cdc <HAL_I2C_Master_Transmit>
 80005b2:	4603      	mov	r3, r0
 80005b4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

    // Print status results over UART1 to console session
    snprintf(buffer, sizeof(buffer), "\n(HST221 Power-Down Control) HAL_I2C_Master_Transmit: status %u\n", status);
 80005b8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80005bc:	f107 0008 	add.w	r0, r7, #8
 80005c0:	4a18      	ldr	r2, [pc, #96]	; (8000624 <HST221_pwr_en+0xac>)
 80005c2:	2164      	movs	r1, #100	; 0x64
 80005c4:	f007 fb08 	bl	8007bd8 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 1000);
 80005c8:	f107 0108 	add.w	r1, r7, #8
 80005cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d0:	2264      	movs	r2, #100	; 0x64
 80005d2:	4815      	ldr	r0, [pc, #84]	; (8000628 <HST221_pwr_en+0xb0>)
 80005d4:	f006 fb0f 	bl	8006bf6 <HAL_UART_Transmit>

    // Read response back to get value of WHO_AM_I register
	uint8_t mode = 0xff;    // Default value should be 0 according to datasheet, target is 1 for enabled
 80005d8:	23ff      	movs	r3, #255	; 0xff
 80005da:	70fb      	strb	r3, [r7, #3]
	status = HAL_I2C_Master_Receive(&hi2c2, HST221_READ_ADDRESS, &mode, sizeof(mode), 1000);
 80005dc:	1cfa      	adds	r2, r7, #3
 80005de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e2:	9300      	str	r3, [sp, #0]
 80005e4:	2301      	movs	r3, #1
 80005e6:	21bf      	movs	r1, #191	; 0xbf
 80005e8:	480d      	ldr	r0, [pc, #52]	; (8000620 <HST221_pwr_en+0xa8>)
 80005ea:	f002 fc6b 	bl	8002ec4 <HAL_I2C_Master_Receive>
 80005ee:	4603      	mov	r3, r0
 80005f0:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

	// Print status results and response value over UART1 to console session
	snprintf(buffer, sizeof(buffer), "(HST221 Power-Down Control) HAL_I2C_Master_Receive status: %u; mode: 0x%x\n", status, mode);
 80005f4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80005f8:	78fa      	ldrb	r2, [r7, #3]
 80005fa:	f107 0008 	add.w	r0, r7, #8
 80005fe:	9200      	str	r2, [sp, #0]
 8000600:	4a0a      	ldr	r2, [pc, #40]	; (800062c <HST221_pwr_en+0xb4>)
 8000602:	2164      	movs	r1, #100	; 0x64
 8000604:	f007 fae8 	bl	8007bd8 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 1000);
 8000608:	f107 0108 	add.w	r1, r7, #8
 800060c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000610:	2264      	movs	r2, #100	; 0x64
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <HST221_pwr_en+0xb0>)
 8000614:	f006 faef 	bl	8006bf6 <HAL_UART_Transmit>
}
 8000618:	bf00      	nop
 800061a:	3770      	adds	r7, #112	; 0x70
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	2000058c 	.word	0x2000058c
 8000624:	08008474 	.word	0x08008474
 8000628:	200006cc 	.word	0x200006cc
 800062c:	080084b8 	.word	0x080084b8

08000630 <do_who_am_i>:

static void do_who_am_i(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b09e      	sub	sp, #120	; 0x78
 8000634:	af02      	add	r7, sp, #8
    // Declare address of the device's WHO_AM_I register
    uint8_t whoAmIReg = 0xf;
 8000636:	230f      	movs	r3, #15
 8000638:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

    // Send the target register to the device and get status back
    HAL_StatusTypeDef status;
    status = HAL_I2C_Master_Transmit(&hi2c2, HST221_WRITE_ADDRESS, &whoAmIReg, sizeof(whoAmIReg), 1000);
 800063c:	f107 026e 	add.w	r2, r7, #110	; 0x6e
 8000640:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2301      	movs	r3, #1
 8000648:	21be      	movs	r1, #190	; 0xbe
 800064a:	4821      	ldr	r0, [pc, #132]	; (80006d0 <do_who_am_i+0xa0>)
 800064c:	f002 fb46 	bl	8002cdc <HAL_I2C_Master_Transmit>
 8000650:	4603      	mov	r3, r0
 8000652:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

    // Print status results over UART1 to console session
    char buffer[100] = {0};
 8000656:	2300      	movs	r3, #0
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	2260      	movs	r2, #96	; 0x60
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f007 fab0 	bl	8007bc8 <memset>
    snprintf(buffer, sizeof(buffer), "\tHAL_I2C_Master_Transmit status: %u\n", status);
 8000668:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800066c:	f107 0008 	add.w	r0, r7, #8
 8000670:	4a18      	ldr	r2, [pc, #96]	; (80006d4 <do_who_am_i+0xa4>)
 8000672:	2164      	movs	r1, #100	; 0x64
 8000674:	f007 fab0 	bl	8007bd8 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 1000);
 8000678:	f107 0108 	add.w	r1, r7, #8
 800067c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000680:	2264      	movs	r2, #100	; 0x64
 8000682:	4815      	ldr	r0, [pc, #84]	; (80006d8 <do_who_am_i+0xa8>)
 8000684:	f006 fab7 	bl	8006bf6 <HAL_UART_Transmit>

    // Read response back to get value of WHO_AM_I register
    uint8_t data = 0xff;    // Default value should be 0xbc according to datasheet
 8000688:	23ff      	movs	r3, #255	; 0xff
 800068a:	71fb      	strb	r3, [r7, #7]
    status = HAL_I2C_Master_Receive(&hi2c2, HST221_READ_ADDRESS, &data, sizeof(data), 1000);
 800068c:	1dfa      	adds	r2, r7, #7
 800068e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	2301      	movs	r3, #1
 8000696:	21bf      	movs	r1, #191	; 0xbf
 8000698:	480d      	ldr	r0, [pc, #52]	; (80006d0 <do_who_am_i+0xa0>)
 800069a:	f002 fc13 	bl	8002ec4 <HAL_I2C_Master_Receive>
 800069e:	4603      	mov	r3, r0
 80006a0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

    // Print status results and response value over UART1 to console session
    snprintf(buffer, sizeof(buffer), "\tHAL_I2C_Master_Receive status: %u; data: 0x%x\n\n", status, data);
 80006a4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80006a8:	79fa      	ldrb	r2, [r7, #7]
 80006aa:	f107 0008 	add.w	r0, r7, #8
 80006ae:	9200      	str	r2, [sp, #0]
 80006b0:	4a0a      	ldr	r2, [pc, #40]	; (80006dc <do_who_am_i+0xac>)
 80006b2:	2164      	movs	r1, #100	; 0x64
 80006b4:	f007 fa90 	bl	8007bd8 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 1000);
 80006b8:	f107 0108 	add.w	r1, r7, #8
 80006bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c0:	2264      	movs	r2, #100	; 0x64
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <do_who_am_i+0xa8>)
 80006c4:	f006 fa97 	bl	8006bf6 <HAL_UART_Transmit>
}
 80006c8:	bf00      	nop
 80006ca:	3770      	adds	r7, #112	; 0x70
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	2000058c 	.word	0x2000058c
 80006d4:	08008504 	.word	0x08008504
 80006d8:	200006cc 	.word	0x200006cc
 80006dc:	0800852c 	.word	0x0800852c

080006e0 <do_temp_polling>:


static void do_temp_polling(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b0a0      	sub	sp, #128	; 0x80
 80006e4:	af02      	add	r7, sp, #8
    // Large-ish char buffer for strings sent over the console
    char buffer[100] = {0};
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	2260      	movs	r2, #96	; 0x60
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f007 fa68 	bl	8007bc8 <memset>

	// Configure control register 2 (CTRL_REG2, 0x21) bit 0 to enable one-shot
    uint8_t ctrlReg2 = 0x21;
 80006f8:	2321      	movs	r3, #33	; 0x21
 80006fa:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
    uint8_t ctrlData[] = {ctrlReg2, (1 << 0)};
 80006fe:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000702:	733b      	strb	r3, [r7, #12]
 8000704:	2301      	movs	r3, #1
 8000706:	737b      	strb	r3, [r7, #13]

    // Send the target register to the device and get status back
    HAL_StatusTypeDef status;
    status = HAL_I2C_Master_Transmit(&hi2c2, HST221_WRITE_ADDRESS, ctrlData, sizeof(ctrlData), 1000);
 8000708:	f107 020c 	add.w	r2, r7, #12
 800070c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	2302      	movs	r3, #2
 8000714:	21be      	movs	r1, #190	; 0xbe
 8000716:	48c7      	ldr	r0, [pc, #796]	; (8000a34 <do_temp_polling+0x354>)
 8000718:	f002 fae0 	bl	8002cdc <HAL_I2C_Master_Transmit>
 800071c:	4603      	mov	r3, r0
 800071e:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75

    // Print status results over UART1 to console session
    snprintf(buffer, sizeof(buffer), "\t(One-shot enabled): HAL_I2C_Master_Transmit: status %u\n", status);
 8000722:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000726:	f107 0010 	add.w	r0, r7, #16
 800072a:	4ac3      	ldr	r2, [pc, #780]	; (8000a38 <do_temp_polling+0x358>)
 800072c:	2164      	movs	r1, #100	; 0x64
 800072e:	f007 fa53 	bl	8007bd8 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 1000);
 8000732:	f107 0110 	add.w	r1, r7, #16
 8000736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073a:	2264      	movs	r2, #100	; 0x64
 800073c:	48bf      	ldr	r0, [pc, #764]	; (8000a3c <do_temp_polling+0x35c>)
 800073e:	f006 fa5a 	bl	8006bf6 <HAL_UART_Transmit>
    memset(buffer, '\0', sizeof(buffer));
 8000742:	f107 0310 	add.w	r3, r7, #16
 8000746:	2264      	movs	r2, #100	; 0x64
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f007 fa3c 	bl	8007bc8 <memset>

    // Define status register (STATUS_REG2, 0x27) bit 0 to monitor for new sample available
    uint8_t statusReg = 0x27;
 8000750:	2327      	movs	r3, #39	; 0x27
 8000752:	72fb      	strb	r3, [r7, #11]
    uint8_t sampleReady = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	72bb      	strb	r3, [r7, #10]

    // Loiter for a bit to allow time for conversion to complete and be made available
    uint8_t count = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    while (count < 10)  // 10 is an arbitrary "long enough" value, this wouldn't always be great real-world practice
 800075e:	e06e      	b.n	800083e <do_temp_polling+0x15e>
    {
        // Send the address of the status register and report it over the console
        status = HAL_I2C_Master_Transmit(&hi2c2, HST221_WRITE_ADDRESS, &statusReg, sizeof(statusReg), 1000);
 8000760:	f107 020b 	add.w	r2, r7, #11
 8000764:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	2301      	movs	r3, #1
 800076c:	21be      	movs	r1, #190	; 0xbe
 800076e:	48b1      	ldr	r0, [pc, #708]	; (8000a34 <do_temp_polling+0x354>)
 8000770:	f002 fab4 	bl	8002cdc <HAL_I2C_Master_Transmit>
 8000774:	4603      	mov	r3, r0
 8000776:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
        snprintf(buffer, sizeof(buffer), "\t[%d] (status register): HAL_I2C_Master_Transmit: status %u\n", count, status);
 800077a:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800077e:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000782:	f107 0010 	add.w	r0, r7, #16
 8000786:	9300      	str	r3, [sp, #0]
 8000788:	4613      	mov	r3, r2
 800078a:	4aad      	ldr	r2, [pc, #692]	; (8000a40 <do_temp_polling+0x360>)
 800078c:	2164      	movs	r1, #100	; 0x64
 800078e:	f007 fa23 	bl	8007bd8 <sniprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 1000);
 8000792:	f107 0110 	add.w	r1, r7, #16
 8000796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800079a:	2264      	movs	r2, #100	; 0x64
 800079c:	48a7      	ldr	r0, [pc, #668]	; (8000a3c <do_temp_polling+0x35c>)
 800079e:	f006 fa2a 	bl	8006bf6 <HAL_UART_Transmit>
        memset(buffer, '\0', sizeof(buffer));
 80007a2:	f107 0310 	add.w	r3, r7, #16
 80007a6:	2264      	movs	r2, #100	; 0x64
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f007 fa0c 	bl	8007bc8 <memset>

        // Read back the value of the status register and report it over the console
        status = HAL_I2C_Master_Receive(&hi2c2, HST221_READ_ADDRESS, (uint8_t *)&sampleReady, sizeof(sampleReady), 1000);
 80007b0:	f107 020a 	add.w	r2, r7, #10
 80007b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b8:	9300      	str	r3, [sp, #0]
 80007ba:	2301      	movs	r3, #1
 80007bc:	21bf      	movs	r1, #191	; 0xbf
 80007be:	489d      	ldr	r0, [pc, #628]	; (8000a34 <do_temp_polling+0x354>)
 80007c0:	f002 fb80 	bl	8002ec4 <HAL_I2C_Master_Receive>
 80007c4:	4603      	mov	r3, r0
 80007c6:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
        snprintf(buffer, sizeof(buffer), "\tStatus register: 0x%02x\n", sampleReady);
 80007ca:	7abb      	ldrb	r3, [r7, #10]
 80007cc:	f107 0010 	add.w	r0, r7, #16
 80007d0:	4a9c      	ldr	r2, [pc, #624]	; (8000a44 <do_temp_polling+0x364>)
 80007d2:	2164      	movs	r1, #100	; 0x64
 80007d4:	f007 fa00 	bl	8007bd8 <sniprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 1000);
 80007d8:	f107 0110 	add.w	r1, r7, #16
 80007dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e0:	2264      	movs	r2, #100	; 0x64
 80007e2:	4896      	ldr	r0, [pc, #600]	; (8000a3c <do_temp_polling+0x35c>)
 80007e4:	f006 fa07 	bl	8006bf6 <HAL_UART_Transmit>
        memset(buffer, '\0', sizeof(buffer));
 80007e8:	f107 0310 	add.w	r3, r7, #16
 80007ec:	2264      	movs	r2, #100	; 0x64
 80007ee:	2100      	movs	r1, #0
 80007f0:	4618      	mov	r0, r3
 80007f2:	f007 f9e9 	bl	8007bc8 <memset>

        // If the new sample is ready, report it to the console and break out of while-loop...
        if (sampleReady & 0x01)
 80007f6:	7abb      	ldrb	r3, [r7, #10]
 80007f8:	f003 0301 	and.w	r3, r3, #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d016      	beq.n	800082e <do_temp_polling+0x14e>
        {
            snprintf(buffer, sizeof(buffer), "\tNew Temperature Sample Available!\n");
 8000800:	f107 0310 	add.w	r3, r7, #16
 8000804:	4a90      	ldr	r2, [pc, #576]	; (8000a48 <do_temp_polling+0x368>)
 8000806:	2164      	movs	r1, #100	; 0x64
 8000808:	4618      	mov	r0, r3
 800080a:	f007 f9e5 	bl	8007bd8 <sniprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 1000);
 800080e:	f107 0110 	add.w	r1, r7, #16
 8000812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000816:	2264      	movs	r2, #100	; 0x64
 8000818:	4888      	ldr	r0, [pc, #544]	; (8000a3c <do_temp_polling+0x35c>)
 800081a:	f006 f9ec 	bl	8006bf6 <HAL_UART_Transmit>
            memset(buffer, '\0', sizeof(buffer));
 800081e:	f107 0310 	add.w	r3, r7, #16
 8000822:	2264      	movs	r2, #100	; 0x64
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f007 f9ce 	bl	8007bc8 <memset>
            break;
 800082c:	e00b      	b.n	8000846 <do_temp_polling+0x166>
        }

        // Else wait for a bit, increment the counter, and keep looping
        HAL_Delay(100);
 800082e:	2064      	movs	r0, #100	; 0x64
 8000830:	f001 fb3e 	bl	8001eb0 <HAL_Delay>
        count++;
 8000834:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000838:	3301      	adds	r3, #1
 800083a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    while (count < 10)  // 10 is an arbitrary "long enough" value, this wouldn't always be great real-world practice
 800083e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000842:	2b09      	cmp	r3, #9
 8000844:	d98c      	bls.n	8000760 <do_temp_polling+0x80>

    // With new sample ready, practice solutions implemented with reading sequentially from
    //  the LSB and MSB registers (0x2a and 0x2b) as well as via auto-increment
    static uint8_t toggle = 1;

    if (toggle)
 8000846:	4b81      	ldr	r3, [pc, #516]	; (8000a4c <do_temp_polling+0x36c>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b00      	cmp	r3, #0
 800084c:	f000 809e 	beq.w	800098c <do_temp_polling+0x2ac>
    {
        toggle = 0;
 8000850:	4b7e      	ldr	r3, [pc, #504]	; (8000a4c <do_temp_polling+0x36c>)
 8000852:	2200      	movs	r2, #0
 8000854:	701a      	strb	r2, [r3, #0]

        // Reading the lower half of the temperature register
        // Send target address
        uint8_t tempRegLSB = 0x2a;
 8000856:	232a      	movs	r3, #42	; 0x2a
 8000858:	727b      	strb	r3, [r7, #9]
        status = HAL_I2C_Master_Transmit(&hi2c2, HST221_WRITE_ADDRESS, &tempRegLSB, sizeof(tempRegLSB), 1000);
 800085a:	f107 0209 	add.w	r2, r7, #9
 800085e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	2301      	movs	r3, #1
 8000866:	21be      	movs	r1, #190	; 0xbe
 8000868:	4872      	ldr	r0, [pc, #456]	; (8000a34 <do_temp_polling+0x354>)
 800086a:	f002 fa37 	bl	8002cdc <HAL_I2C_Master_Transmit>
 800086e:	4603      	mov	r3, r0
 8000870:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
        snprintf(buffer, sizeof(buffer), "\t(LSB): HAL_I2C_Master_Transmit: status: %u\n", status);
 8000874:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000878:	f107 0010 	add.w	r0, r7, #16
 800087c:	4a74      	ldr	r2, [pc, #464]	; (8000a50 <do_temp_polling+0x370>)
 800087e:	2164      	movs	r1, #100	; 0x64
 8000880:	f007 f9aa 	bl	8007bd8 <sniprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 1000);
 8000884:	f107 0110 	add.w	r1, r7, #16
 8000888:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800088c:	2264      	movs	r2, #100	; 0x64
 800088e:	486b      	ldr	r0, [pc, #428]	; (8000a3c <do_temp_polling+0x35c>)
 8000890:	f006 f9b1 	bl	8006bf6 <HAL_UART_Transmit>
        memset(buffer, '\0', sizeof(buffer));
 8000894:	f107 0310 	add.w	r3, r7, #16
 8000898:	2264      	movs	r2, #100	; 0x64
 800089a:	2100      	movs	r1, #0
 800089c:	4618      	mov	r0, r3
 800089e:	f007 f993 	bl	8007bc8 <memset>

        // Read response back and print over console
        uint8_t tempDataLSB = 0xff; // Junk default value
 80008a2:	23ff      	movs	r3, #255	; 0xff
 80008a4:	723b      	strb	r3, [r7, #8]
        status = HAL_I2C_Master_Receive(&hi2c2, HST221_READ_ADDRESS, (uint8_t *)&tempDataLSB, sizeof(tempDataLSB), 1000);
 80008a6:	f107 0208 	add.w	r2, r7, #8
 80008aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ae:	9300      	str	r3, [sp, #0]
 80008b0:	2301      	movs	r3, #1
 80008b2:	21bf      	movs	r1, #191	; 0xbf
 80008b4:	485f      	ldr	r0, [pc, #380]	; (8000a34 <do_temp_polling+0x354>)
 80008b6:	f002 fb05 	bl	8002ec4 <HAL_I2C_Master_Receive>
 80008ba:	4603      	mov	r3, r0
 80008bc:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
        snprintf(buffer, sizeof(buffer), "\t(LSB): HAL_I2C_Master_Receive: status: %u; LSB data: 0x%02x\n", status, tempDataLSB);
 80008c0:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 80008c4:	7a3a      	ldrb	r2, [r7, #8]
 80008c6:	f107 0010 	add.w	r0, r7, #16
 80008ca:	9200      	str	r2, [sp, #0]
 80008cc:	4a61      	ldr	r2, [pc, #388]	; (8000a54 <do_temp_polling+0x374>)
 80008ce:	2164      	movs	r1, #100	; 0x64
 80008d0:	f007 f982 	bl	8007bd8 <sniprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 1000);
 80008d4:	f107 0110 	add.w	r1, r7, #16
 80008d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008dc:	2264      	movs	r2, #100	; 0x64
 80008de:	4857      	ldr	r0, [pc, #348]	; (8000a3c <do_temp_polling+0x35c>)
 80008e0:	f006 f989 	bl	8006bf6 <HAL_UART_Transmit>
        memset(buffer, '\0', sizeof(buffer));
 80008e4:	f107 0310 	add.w	r3, r7, #16
 80008e8:	2264      	movs	r2, #100	; 0x64
 80008ea:	2100      	movs	r1, #0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f007 f96b 	bl	8007bc8 <memset>

        // Reading the upper half of the temperature register
        // Send target address
        uint8_t tempRegMSB = 0x2b;
 80008f2:	232b      	movs	r3, #43	; 0x2b
 80008f4:	71fb      	strb	r3, [r7, #7]
        status = HAL_I2C_Master_Transmit(&hi2c2, HST221_WRITE_ADDRESS, &tempRegMSB, sizeof(tempRegMSB), 1000);
 80008f6:	1dfa      	adds	r2, r7, #7
 80008f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	2301      	movs	r3, #1
 8000900:	21be      	movs	r1, #190	; 0xbe
 8000902:	484c      	ldr	r0, [pc, #304]	; (8000a34 <do_temp_polling+0x354>)
 8000904:	f002 f9ea 	bl	8002cdc <HAL_I2C_Master_Transmit>
 8000908:	4603      	mov	r3, r0
 800090a:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
        snprintf(buffer, sizeof(buffer), "\t(MSB): HAL_I2C_Master_Transmit: status: %u\n", status);
 800090e:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000912:	f107 0010 	add.w	r0, r7, #16
 8000916:	4a50      	ldr	r2, [pc, #320]	; (8000a58 <do_temp_polling+0x378>)
 8000918:	2164      	movs	r1, #100	; 0x64
 800091a:	f007 f95d 	bl	8007bd8 <sniprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 1000);
 800091e:	f107 0110 	add.w	r1, r7, #16
 8000922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000926:	2264      	movs	r2, #100	; 0x64
 8000928:	4844      	ldr	r0, [pc, #272]	; (8000a3c <do_temp_polling+0x35c>)
 800092a:	f006 f964 	bl	8006bf6 <HAL_UART_Transmit>
        memset(buffer, '\0', sizeof(buffer));
 800092e:	f107 0310 	add.w	r3, r7, #16
 8000932:	2264      	movs	r2, #100	; 0x64
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f007 f946 	bl	8007bc8 <memset>

        // Read response back and print over console
        uint8_t tempDataMSB = 0xff; // Junk default value
 800093c:	23ff      	movs	r3, #255	; 0xff
 800093e:	71bb      	strb	r3, [r7, #6]
        status = HAL_I2C_Master_Receive(&hi2c2, HST221_READ_ADDRESS, (uint8_t *)&tempDataMSB, sizeof(tempDataMSB), 1000);
 8000940:	1dba      	adds	r2, r7, #6
 8000942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000946:	9300      	str	r3, [sp, #0]
 8000948:	2301      	movs	r3, #1
 800094a:	21bf      	movs	r1, #191	; 0xbf
 800094c:	4839      	ldr	r0, [pc, #228]	; (8000a34 <do_temp_polling+0x354>)
 800094e:	f002 fab9 	bl	8002ec4 <HAL_I2C_Master_Receive>
 8000952:	4603      	mov	r3, r0
 8000954:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
        snprintf(buffer, sizeof(buffer), "\t(MSB): HAL_I2C_Master_Receive: status: %u; MSB data: 0x%02x\n\n", status, tempDataMSB);
 8000958:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800095c:	79ba      	ldrb	r2, [r7, #6]
 800095e:	f107 0010 	add.w	r0, r7, #16
 8000962:	9200      	str	r2, [sp, #0]
 8000964:	4a3d      	ldr	r2, [pc, #244]	; (8000a5c <do_temp_polling+0x37c>)
 8000966:	2164      	movs	r1, #100	; 0x64
 8000968:	f007 f936 	bl	8007bd8 <sniprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 1000);
 800096c:	f107 0110 	add.w	r1, r7, #16
 8000970:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000974:	2264      	movs	r2, #100	; 0x64
 8000976:	4831      	ldr	r0, [pc, #196]	; (8000a3c <do_temp_polling+0x35c>)
 8000978:	f006 f93d 	bl	8006bf6 <HAL_UART_Transmit>
        memset(buffer, '\0', sizeof(buffer));
 800097c:	f107 0310 	add.w	r3, r7, #16
 8000980:	2264      	movs	r2, #100	; 0x64
 8000982:	2100      	movs	r1, #0
 8000984:	4618      	mov	r0, r3
 8000986:	f007 f91f 	bl	8007bc8 <memset>
        snprintf(buffer, sizeof(buffer), "\t(Auto-increment): HAL_I2C_Master_Receive: status: %u; temperature data: 0x%04x\n\n", status, tempData);
        HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 1000);
        memset(buffer, '\0', sizeof(buffer));
    }

}
 800098a:	e04f      	b.n	8000a2c <do_temp_polling+0x34c>
        toggle = 1;
 800098c:	4b2f      	ldr	r3, [pc, #188]	; (8000a4c <do_temp_polling+0x36c>)
 800098e:	2201      	movs	r2, #1
 8000990:	701a      	strb	r2, [r3, #0]
        uint8_t tempRegLSB = 0x2a | 0x80;
 8000992:	23aa      	movs	r3, #170	; 0xaa
 8000994:	717b      	strb	r3, [r7, #5]
        status = HAL_I2C_Master_Transmit(&hi2c2, HST221_WRITE_ADDRESS, &tempRegLSB, sizeof(tempRegLSB), 1000);
 8000996:	1d7a      	adds	r2, r7, #5
 8000998:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800099c:	9300      	str	r3, [sp, #0]
 800099e:	2301      	movs	r3, #1
 80009a0:	21be      	movs	r1, #190	; 0xbe
 80009a2:	4824      	ldr	r0, [pc, #144]	; (8000a34 <do_temp_polling+0x354>)
 80009a4:	f002 f99a 	bl	8002cdc <HAL_I2C_Master_Transmit>
 80009a8:	4603      	mov	r3, r0
 80009aa:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
        snprintf(buffer, sizeof(buffer), "\t(Auto-increment): HAL_I2C_Master_Transmit: status: %u\n", status);
 80009ae:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 80009b2:	f107 0010 	add.w	r0, r7, #16
 80009b6:	4a2a      	ldr	r2, [pc, #168]	; (8000a60 <do_temp_polling+0x380>)
 80009b8:	2164      	movs	r1, #100	; 0x64
 80009ba:	f007 f90d 	bl	8007bd8 <sniprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 1000);
 80009be:	f107 0110 	add.w	r1, r7, #16
 80009c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c6:	2264      	movs	r2, #100	; 0x64
 80009c8:	481c      	ldr	r0, [pc, #112]	; (8000a3c <do_temp_polling+0x35c>)
 80009ca:	f006 f914 	bl	8006bf6 <HAL_UART_Transmit>
        memset(buffer, '\0', sizeof(buffer));
 80009ce:	f107 0310 	add.w	r3, r7, #16
 80009d2:	2264      	movs	r2, #100	; 0x64
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f007 f8f6 	bl	8007bc8 <memset>
        uint16_t tempData = 0xbeef; // Junk default value (ALSO REALLY HOT!)
 80009dc:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 80009e0:	807b      	strh	r3, [r7, #2]
        status = HAL_I2C_Master_Receive(&hi2c2, HST221_READ_ADDRESS, (uint8_t *)&tempData, sizeof(tempData), 1000);
 80009e2:	1cba      	adds	r2, r7, #2
 80009e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e8:	9300      	str	r3, [sp, #0]
 80009ea:	2302      	movs	r3, #2
 80009ec:	21bf      	movs	r1, #191	; 0xbf
 80009ee:	4811      	ldr	r0, [pc, #68]	; (8000a34 <do_temp_polling+0x354>)
 80009f0:	f002 fa68 	bl	8002ec4 <HAL_I2C_Master_Receive>
 80009f4:	4603      	mov	r3, r0
 80009f6:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
        snprintf(buffer, sizeof(buffer), "\t(Auto-increment): HAL_I2C_Master_Receive: status: %u; temperature data: 0x%04x\n\n", status, tempData);
 80009fa:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 80009fe:	887a      	ldrh	r2, [r7, #2]
 8000a00:	f107 0010 	add.w	r0, r7, #16
 8000a04:	9200      	str	r2, [sp, #0]
 8000a06:	4a17      	ldr	r2, [pc, #92]	; (8000a64 <do_temp_polling+0x384>)
 8000a08:	2164      	movs	r1, #100	; 0x64
 8000a0a:	f007 f8e5 	bl	8007bd8 <sniprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 1000);
 8000a0e:	f107 0110 	add.w	r1, r7, #16
 8000a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a16:	2264      	movs	r2, #100	; 0x64
 8000a18:	4808      	ldr	r0, [pc, #32]	; (8000a3c <do_temp_polling+0x35c>)
 8000a1a:	f006 f8ec 	bl	8006bf6 <HAL_UART_Transmit>
        memset(buffer, '\0', sizeof(buffer));
 8000a1e:	f107 0310 	add.w	r3, r7, #16
 8000a22:	2264      	movs	r2, #100	; 0x64
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f007 f8ce 	bl	8007bc8 <memset>
}
 8000a2c:	bf00      	nop
 8000a2e:	3778      	adds	r7, #120	; 0x78
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	2000058c 	.word	0x2000058c
 8000a38:	08008560 	.word	0x08008560
 8000a3c:	200006cc 	.word	0x200006cc
 8000a40:	0800859c 	.word	0x0800859c
 8000a44:	080085dc 	.word	0x080085dc
 8000a48:	080085f8 	.word	0x080085f8
 8000a4c:	20000002 	.word	0x20000002
 8000a50:	0800861c 	.word	0x0800861c
 8000a54:	0800864c 	.word	0x0800864c
 8000a58:	0800868c 	.word	0x0800868c
 8000a5c:	080086bc 	.word	0x080086bc
 8000a60:	080086fc 	.word	0x080086fc
 8000a64:	08008734 	.word	0x08008734

08000a68 <HAL_I2C_MasterTxCpltCallback>:

// Used for IT/DMA access
uint16_t tempData = 0xffff; // Junk default value (ALSO REALLY HOT!)

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
    // Indicate something on the board
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000a70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a74:	4804      	ldr	r0, [pc, #16]	; (8000a88 <HAL_I2C_MasterTxCpltCallback+0x20>)
 8000a76:	f002 f865 	bl	8002b44 <HAL_GPIO_TogglePin>

    // Set status flag
    irqCompleteTX = 1;
 8000a7a:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <HAL_I2C_MasterTxCpltCallback+0x24>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	701a      	strb	r2, [r3, #0]
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	48000400 	.word	0x48000400
 8000a8c:	20000090 	.word	0x20000090

08000a90 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
    // Indicate something on the board
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000a98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a9c:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <HAL_I2C_MasterRxCpltCallback+0x20>)
 8000a9e:	f002 f851 	bl	8002b44 <HAL_GPIO_TogglePin>

    // Set status flag
    irqCompleteRX = 1;
 8000aa2:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <HAL_I2C_MasterRxCpltCallback+0x24>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	701a      	strb	r2, [r3, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	48000400 	.word	0x48000400
 8000ab4:	20000091 	.word	0x20000091

08000ab8 <do_temp_interrupt>:

static void do_temp_interrupt(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b09e      	sub	sp, #120	; 0x78
 8000abc:	af02      	add	r7, sp, #8
	// Clear flags
	irqCompleteTX = 0;
 8000abe:	4b4a      	ldr	r3, [pc, #296]	; (8000be8 <do_temp_interrupt+0x130>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	701a      	strb	r2, [r3, #0]
	irqCompleteRX = 0;
 8000ac4:	4b49      	ldr	r3, [pc, #292]	; (8000bec <do_temp_interrupt+0x134>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]

    // Large-ish char buffer for strings sent over the console
    char buffer[100] = {0};
 8000aca:	2300      	movs	r3, #0
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	f107 030c 	add.w	r3, r7, #12
 8000ad2:	2260      	movs	r2, #96	; 0x60
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f007 f876 	bl	8007bc8 <memset>

	// Configure control register 2 (CTRL_REG2, 0x21) bit 0 to enable one-shot
    uint8_t ctrlReg2 = 0x21;
 8000adc:	2321      	movs	r3, #33	; 0x21
 8000ade:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    uint8_t ctrlData[] = {ctrlReg2, 0x01};
 8000ae2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ae6:	713b      	strb	r3, [r7, #4]
 8000ae8:	2301      	movs	r3, #1
 8000aea:	717b      	strb	r3, [r7, #5]

    // Send the target register to the device and get status back using the *_IT function
    HAL_StatusTypeDef status;
    status = HAL_I2C_Master_Transmit_IT(&hi2c2, HST221_WRITE_ADDRESS, ctrlData, sizeof(ctrlData));
 8000aec:	1d3a      	adds	r2, r7, #4
 8000aee:	2302      	movs	r3, #2
 8000af0:	21be      	movs	r1, #190	; 0xbe
 8000af2:	483f      	ldr	r0, [pc, #252]	; (8000bf0 <do_temp_interrupt+0x138>)
 8000af4:	f002 fadc 	bl	80030b0 <HAL_I2C_Master_Transmit_IT>
 8000af8:	4603      	mov	r3, r0
 8000afa:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

    // Print status results over UART1 to console session
    snprintf(buffer, sizeof(buffer), "\t(One-shot enabled): HAL_I2C_Master_Transmit_IT: status %u\n", status);
 8000afe:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000b02:	f107 0008 	add.w	r0, r7, #8
 8000b06:	4a3b      	ldr	r2, [pc, #236]	; (8000bf4 <do_temp_interrupt+0x13c>)
 8000b08:	2164      	movs	r1, #100	; 0x64
 8000b0a:	f007 f865 	bl	8007bd8 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 1000);
 8000b0e:	f107 0108 	add.w	r1, r7, #8
 8000b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b16:	2264      	movs	r2, #100	; 0x64
 8000b18:	4837      	ldr	r0, [pc, #220]	; (8000bf8 <do_temp_interrupt+0x140>)
 8000b1a:	f006 f86c 	bl	8006bf6 <HAL_UART_Transmit>
    memset(buffer, '\0', sizeof(buffer));
 8000b1e:	f107 0308 	add.w	r3, r7, #8
 8000b22:	2264      	movs	r2, #100	; 0x64
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f007 f84e 	bl	8007bc8 <memset>

    // Wait for interrupt to complete
	while (irqCompleteTX == 0)
 8000b2c:	e003      	b.n	8000b36 <do_temp_interrupt+0x7e>
	{
		HAL_Delay(1000);
 8000b2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b32:	f001 f9bd 	bl	8001eb0 <HAL_Delay>
	while (irqCompleteTX == 0)
 8000b36:	4b2c      	ldr	r3, [pc, #176]	; (8000be8 <do_temp_interrupt+0x130>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d0f7      	beq.n	8000b2e <do_temp_interrupt+0x76>
	}

	// Clear flag
	irqCompleteTX = 0;
 8000b3e:	4b2a      	ldr	r3, [pc, #168]	; (8000be8 <do_temp_interrupt+0x130>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]

    // Reading the lower half of the temperature register with auto-increment enabled
	// Send target address (OR'ing with 0x80 enables auto-inc)
	uint8_t tempRegLSB = 0x2a | 0x80;
 8000b44:	23aa      	movs	r3, #170	; 0xaa
 8000b46:	70fb      	strb	r3, [r7, #3]
	status = HAL_I2C_Master_Transmit_IT(&hi2c2, HST221_WRITE_ADDRESS, &tempRegLSB, sizeof(tempRegLSB));
 8000b48:	1cfa      	adds	r2, r7, #3
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	21be      	movs	r1, #190	; 0xbe
 8000b4e:	4828      	ldr	r0, [pc, #160]	; (8000bf0 <do_temp_interrupt+0x138>)
 8000b50:	f002 faae 	bl	80030b0 <HAL_I2C_Master_Transmit_IT>
 8000b54:	4603      	mov	r3, r0
 8000b56:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	snprintf(buffer, sizeof(buffer), "\t(Auto-increment): HAL_I2C_Master_Transmit_IT: status: %u\n", status);
 8000b5a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000b5e:	f107 0008 	add.w	r0, r7, #8
 8000b62:	4a26      	ldr	r2, [pc, #152]	; (8000bfc <do_temp_interrupt+0x144>)
 8000b64:	2164      	movs	r1, #100	; 0x64
 8000b66:	f007 f837 	bl	8007bd8 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 1000);
 8000b6a:	f107 0108 	add.w	r1, r7, #8
 8000b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b72:	2264      	movs	r2, #100	; 0x64
 8000b74:	4820      	ldr	r0, [pc, #128]	; (8000bf8 <do_temp_interrupt+0x140>)
 8000b76:	f006 f83e 	bl	8006bf6 <HAL_UART_Transmit>
	memset(buffer, '\0', sizeof(buffer));
 8000b7a:	f107 0308 	add.w	r3, r7, #8
 8000b7e:	2264      	movs	r2, #100	; 0x64
 8000b80:	2100      	movs	r1, #0
 8000b82:	4618      	mov	r0, r3
 8000b84:	f007 f820 	bl	8007bc8 <memset>

    // Wait for interrupt to complete
	while (irqCompleteTX == 0)
 8000b88:	e003      	b.n	8000b92 <do_temp_interrupt+0xda>
	{
		HAL_Delay(1000);
 8000b8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b8e:	f001 f98f 	bl	8001eb0 <HAL_Delay>
	while (irqCompleteTX == 0)
 8000b92:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <do_temp_interrupt+0x130>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d0f7      	beq.n	8000b8a <do_temp_interrupt+0xd2>
	}

	// Read response back for both registers and print over console
	status = HAL_I2C_Master_Receive_IT(&hi2c2, HST221_READ_ADDRESS, (uint8_t *)&tempData, sizeof(tempData));
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	4a18      	ldr	r2, [pc, #96]	; (8000c00 <do_temp_interrupt+0x148>)
 8000b9e:	21bf      	movs	r1, #191	; 0xbf
 8000ba0:	4813      	ldr	r0, [pc, #76]	; (8000bf0 <do_temp_interrupt+0x138>)
 8000ba2:	f002 faf5 	bl	8003190 <HAL_I2C_Master_Receive_IT>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	snprintf(buffer, sizeof(buffer), "\t(Auto-increment): HAL_I2C_Master_Receive_IT: status: %u; temperature data: 0x%04x\n\n", status, tempData);
 8000bac:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000bb0:	4a13      	ldr	r2, [pc, #76]	; (8000c00 <do_temp_interrupt+0x148>)
 8000bb2:	8812      	ldrh	r2, [r2, #0]
 8000bb4:	f107 0008 	add.w	r0, r7, #8
 8000bb8:	9200      	str	r2, [sp, #0]
 8000bba:	4a12      	ldr	r2, [pc, #72]	; (8000c04 <do_temp_interrupt+0x14c>)
 8000bbc:	2164      	movs	r1, #100	; 0x64
 8000bbe:	f007 f80b 	bl	8007bd8 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 1000);
 8000bc2:	f107 0108 	add.w	r1, r7, #8
 8000bc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bca:	2264      	movs	r2, #100	; 0x64
 8000bcc:	480a      	ldr	r0, [pc, #40]	; (8000bf8 <do_temp_interrupt+0x140>)
 8000bce:	f006 f812 	bl	8006bf6 <HAL_UART_Transmit>
	memset(buffer, '\0', sizeof(buffer));
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	2264      	movs	r2, #100	; 0x64
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f006 fff4 	bl	8007bc8 <memset>

}
 8000be0:	bf00      	nop
 8000be2:	3770      	adds	r7, #112	; 0x70
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000090 	.word	0x20000090
 8000bec:	20000091 	.word	0x20000091
 8000bf0:	2000058c 	.word	0x2000058c
 8000bf4:	08008788 	.word	0x08008788
 8000bf8:	200006cc 	.word	0x200006cc
 8000bfc:	080087c4 	.word	0x080087c4
 8000c00:	20000000 	.word	0x20000000
 8000c04:	08008800 	.word	0x08008800

08000c08 <do_temp_dma>:

static void do_temp_dma(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b09e      	sub	sp, #120	; 0x78
 8000c0c:	af02      	add	r7, sp, #8
	// Clear flags
    irqCompleteTX = 0;
 8000c0e:	4b49      	ldr	r3, [pc, #292]	; (8000d34 <do_temp_dma+0x12c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	701a      	strb	r2, [r3, #0]
    irqCompleteRX = 0;
 8000c14:	4b48      	ldr	r3, [pc, #288]	; (8000d38 <do_temp_dma+0x130>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	701a      	strb	r2, [r3, #0]

    // Large-ish char buffer for strings sent over the console
    char buffer[100] = {0};
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	f107 030c 	add.w	r3, r7, #12
 8000c22:	2260      	movs	r2, #96	; 0x60
 8000c24:	2100      	movs	r1, #0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f006 ffce 	bl	8007bc8 <memset>

	// Configure control register 2 (CTRL_REG2, 0x21) bit 0 to enable one-shot
    uint8_t ctrlReg2 = 0x21;
 8000c2c:	2321      	movs	r3, #33	; 0x21
 8000c2e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    uint8_t ctrlData[] = {ctrlReg2, 0x01};
 8000c32:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c36:	713b      	strb	r3, [r7, #4]
 8000c38:	2301      	movs	r3, #1
 8000c3a:	717b      	strb	r3, [r7, #5]

    // Send the target register to the device and get status back using the *_DMA function
    HAL_StatusTypeDef status;
    status = HAL_I2C_Master_Transmit_DMA(&hi2c2, HST221_WRITE_ADDRESS, ctrlData, sizeof(ctrlData));
 8000c3c:	1d3a      	adds	r2, r7, #4
 8000c3e:	2302      	movs	r3, #2
 8000c40:	21be      	movs	r1, #190	; 0xbe
 8000c42:	483e      	ldr	r0, [pc, #248]	; (8000d3c <do_temp_dma+0x134>)
 8000c44:	f002 fb14 	bl	8003270 <HAL_I2C_Master_Transmit_DMA>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

    // Print status results over UART1 to console session
    snprintf(buffer, sizeof(buffer), "\t(One-shot enabled): HAL_I2C_Master_Transmit_DMA: status %u\n", status);
 8000c4e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000c52:	f107 0008 	add.w	r0, r7, #8
 8000c56:	4a3a      	ldr	r2, [pc, #232]	; (8000d40 <do_temp_dma+0x138>)
 8000c58:	2164      	movs	r1, #100	; 0x64
 8000c5a:	f006 ffbd 	bl	8007bd8 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 1000);
 8000c5e:	f107 0108 	add.w	r1, r7, #8
 8000c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c66:	2264      	movs	r2, #100	; 0x64
 8000c68:	4836      	ldr	r0, [pc, #216]	; (8000d44 <do_temp_dma+0x13c>)
 8000c6a:	f005 ffc4 	bl	8006bf6 <HAL_UART_Transmit>
    memset(buffer, '\0', sizeof(buffer));
 8000c6e:	f107 0308 	add.w	r3, r7, #8
 8000c72:	2264      	movs	r2, #100	; 0x64
 8000c74:	2100      	movs	r1, #0
 8000c76:	4618      	mov	r0, r3
 8000c78:	f006 ffa6 	bl	8007bc8 <memset>

    // Wait for interrupt to complete
	while (irqCompleteTX == 0)
 8000c7c:	e002      	b.n	8000c84 <do_temp_dma+0x7c>
	{
		HAL_Delay(100);
 8000c7e:	2064      	movs	r0, #100	; 0x64
 8000c80:	f001 f916 	bl	8001eb0 <HAL_Delay>
	while (irqCompleteTX == 0)
 8000c84:	4b2b      	ldr	r3, [pc, #172]	; (8000d34 <do_temp_dma+0x12c>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d0f8      	beq.n	8000c7e <do_temp_dma+0x76>
	}

	// Clear flag
	irqCompleteTX = 0;
 8000c8c:	4b29      	ldr	r3, [pc, #164]	; (8000d34 <do_temp_dma+0x12c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	701a      	strb	r2, [r3, #0]

    // Reading the lower half of the temperature register with auto-increment enabled
	// Send target address (OR'ing with 0x80 enables auto-inc)
	uint8_t tempRegLSB = 0x2a | 0x80;
 8000c92:	23aa      	movs	r3, #170	; 0xaa
 8000c94:	70fb      	strb	r3, [r7, #3]
	status = HAL_I2C_Master_Transmit_DMA(&hi2c2, HST221_WRITE_ADDRESS, &tempRegLSB, sizeof(tempRegLSB));
 8000c96:	1cfa      	adds	r2, r7, #3
 8000c98:	2301      	movs	r3, #1
 8000c9a:	21be      	movs	r1, #190	; 0xbe
 8000c9c:	4827      	ldr	r0, [pc, #156]	; (8000d3c <do_temp_dma+0x134>)
 8000c9e:	f002 fae7 	bl	8003270 <HAL_I2C_Master_Transmit_DMA>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	snprintf(buffer, sizeof(buffer), "\t(Auto-increment): HAL_I2C_Master_Transmit_DMA: status: %u\n", status);
 8000ca8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000cac:	f107 0008 	add.w	r0, r7, #8
 8000cb0:	4a25      	ldr	r2, [pc, #148]	; (8000d48 <do_temp_dma+0x140>)
 8000cb2:	2164      	movs	r1, #100	; 0x64
 8000cb4:	f006 ff90 	bl	8007bd8 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 1000);
 8000cb8:	f107 0108 	add.w	r1, r7, #8
 8000cbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cc0:	2264      	movs	r2, #100	; 0x64
 8000cc2:	4820      	ldr	r0, [pc, #128]	; (8000d44 <do_temp_dma+0x13c>)
 8000cc4:	f005 ff97 	bl	8006bf6 <HAL_UART_Transmit>
	memset(buffer, '\0', sizeof(buffer));
 8000cc8:	f107 0308 	add.w	r3, r7, #8
 8000ccc:	2264      	movs	r2, #100	; 0x64
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f006 ff79 	bl	8007bc8 <memset>

    // Wait for interrupt to complete
    while (irqCompleteTX == 0)
 8000cd6:	e002      	b.n	8000cde <do_temp_dma+0xd6>
    {
        HAL_Delay(100);
 8000cd8:	2064      	movs	r0, #100	; 0x64
 8000cda:	f001 f8e9 	bl	8001eb0 <HAL_Delay>
    while (irqCompleteTX == 0)
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <do_temp_dma+0x12c>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d0f8      	beq.n	8000cd8 <do_temp_dma+0xd0>
    }

    // Read response back for both registers and print over console
	status = HAL_I2C_Master_Receive_DMA(&hi2c2, HST221_READ_ADDRESS, (uint8_t *)&tempData, sizeof(tempData));
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	4a18      	ldr	r2, [pc, #96]	; (8000d4c <do_temp_dma+0x144>)
 8000cea:	21bf      	movs	r1, #191	; 0xbf
 8000cec:	4813      	ldr	r0, [pc, #76]	; (8000d3c <do_temp_dma+0x134>)
 8000cee:	f002 fbaf 	bl	8003450 <HAL_I2C_Master_Receive_DMA>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	snprintf(buffer, sizeof(buffer), "\t(Auto-increment): HAL_I2C_Master_Receive_DMA: status: %u; temperature data: 0x%04x\n\n", status, tempData);
 8000cf8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000cfc:	4a13      	ldr	r2, [pc, #76]	; (8000d4c <do_temp_dma+0x144>)
 8000cfe:	8812      	ldrh	r2, [r2, #0]
 8000d00:	f107 0008 	add.w	r0, r7, #8
 8000d04:	9200      	str	r2, [sp, #0]
 8000d06:	4a12      	ldr	r2, [pc, #72]	; (8000d50 <do_temp_dma+0x148>)
 8000d08:	2164      	movs	r1, #100	; 0x64
 8000d0a:	f006 ff65 	bl	8007bd8 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 1000);
 8000d0e:	f107 0108 	add.w	r1, r7, #8
 8000d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d16:	2264      	movs	r2, #100	; 0x64
 8000d18:	480a      	ldr	r0, [pc, #40]	; (8000d44 <do_temp_dma+0x13c>)
 8000d1a:	f005 ff6c 	bl	8006bf6 <HAL_UART_Transmit>
	memset(buffer, '\0', sizeof(buffer));
 8000d1e:	f107 0308 	add.w	r3, r7, #8
 8000d22:	2264      	movs	r2, #100	; 0x64
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f006 ff4e 	bl	8007bc8 <memset>
}
 8000d2c:	bf00      	nop
 8000d2e:	3770      	adds	r7, #112	; 0x70
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000090 	.word	0x20000090
 8000d38:	20000091 	.word	0x20000091
 8000d3c:	2000058c 	.word	0x2000058c
 8000d40:	08008858 	.word	0x08008858
 8000d44:	200006cc 	.word	0x200006cc
 8000d48:	08008898 	.word	0x08008898
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	080088d4 	.word	0x080088d4

08000d54 <do_temp_interrupt_EXTI>:

static void do_temp_interrupt_EXTI(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
    ; // TO DO
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
	...

08000d64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d6a:	f001 f82c 	bl	8001dc6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d6e:	f000 f8bf 	bl	8000ef0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d72:	f000 faf1 	bl	8001358 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d76:	f000 fac9 	bl	800130c <MX_DMA_Init>
  MX_DFSDM1_Init();
 8000d7a:	f000 f95d 	bl	8001038 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000d7e:	f000 f993 	bl	80010a8 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000d82:	f000 f9d1 	bl	8001128 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000d86:	f000 f9f5 	bl	8001174 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000d8a:	f000 fa31 	bl	80011f0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000d8e:	f000 fa5f 	bl	8001250 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000d92:	f000 fa8d 	bl	80012b0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  	// Enable the HST221 PD bit in CR1 to allow collection of samples
    HST221_pwr_en();
 8000d96:	f7ff fbef 	bl	8000578 <HST221_pwr_en>

    // Header info for CLI
    char* cliHeader = "\nsimpleCLI Interface v0.2\n------------------------------\n";
 8000d9a:	4b4c      	ldr	r3, [pc, #304]	; (8000ecc <main+0x168>)
 8000d9c:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart1, (uint8_t*) cliHeader, strlen(cliHeader), 1000);
 8000d9e:	68f8      	ldr	r0, [r7, #12]
 8000da0:	f7ff fa16 	bl	80001d0 <strlen>
 8000da4:	4603      	mov	r3, r0
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dac:	68f9      	ldr	r1, [r7, #12]
 8000dae:	4848      	ldr	r0, [pc, #288]	; (8000ed0 <main+0x16c>)
 8000db0:	f005 ff21 	bl	8006bf6 <HAL_UART_Transmit>
        *   sensor over the I2C bus
  	    *
  	    ***********************************/

  	  // Define strings to structure prompt around
  	  char* cliPrompt = "Options:\n\t1: \"WHO AM I\" read\n\t2: Temperature read (polling mode)\n\t3: Temperature read (interrupt mode)\n\t4: Temperature read (DMA mode)\n\t5: *TODO* Temperature read (EXTI mode) *TODO*\r\n$> ";
 8000db4:	4b47      	ldr	r3, [pc, #284]	; (8000ed4 <main+0x170>)
 8000db6:	60bb      	str	r3, [r7, #8]
  	  char* cliResponse = "Invalid input!\r\n";
 8000db8:	4b47      	ldr	r3, [pc, #284]	; (8000ed8 <main+0x174>)
 8000dba:	607b      	str	r3, [r7, #4]

  	  // Issue prompt
  	  HAL_UART_Transmit(&huart1, (uint8_t*) cliPrompt, strlen(cliPrompt), 1000);
 8000dbc:	68b8      	ldr	r0, [r7, #8]
 8000dbe:	f7ff fa07 	bl	80001d0 <strlen>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	b29a      	uxth	r2, r3
 8000dc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dca:	68b9      	ldr	r1, [r7, #8]
 8000dcc:	4840      	ldr	r0, [pc, #256]	; (8000ed0 <main+0x16c>)
 8000dce:	f005 ff12 	bl	8006bf6 <HAL_UART_Transmit>

  	  // Get the user selection and echo it on the terminal
  	  char cliInput;
  	  HAL_UART_Receive(&huart1, (uint8_t*) &cliInput, 1, HAL_MAX_DELAY);
 8000dd2:	1cf9      	adds	r1, r7, #3
 8000dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd8:	2201      	movs	r2, #1
 8000dda:	483d      	ldr	r0, [pc, #244]	; (8000ed0 <main+0x16c>)
 8000ddc:	f005 ff9f 	bl	8006d1e <HAL_UART_Receive>
  	  HAL_UART_Transmit(&huart1, (uint8_t*) &cliInput, 1, 1000);
 8000de0:	1cf9      	adds	r1, r7, #3
 8000de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de6:	2201      	movs	r2, #1
 8000de8:	4839      	ldr	r0, [pc, #228]	; (8000ed0 <main+0x16c>)
 8000dea:	f005 ff04 	bl	8006bf6 <HAL_UART_Transmit>

  	  // Evaluate input
  	  switch (cliInput)
 8000dee:	78fb      	ldrb	r3, [r7, #3]
 8000df0:	3b31      	subs	r3, #49	; 0x31
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	d85c      	bhi.n	8000eb0 <main+0x14c>
 8000df6:	a201      	add	r2, pc, #4	; (adr r2, 8000dfc <main+0x98>)
 8000df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dfc:	08000e11 	.word	0x08000e11
 8000e00:	08000e31 	.word	0x08000e31
 8000e04:	08000e51 	.word	0x08000e51
 8000e08:	08000e71 	.word	0x08000e71
 8000e0c:	08000e91 	.word	0x08000e91
  	  {
          case '1':
              cliResponse = "\r\n\"WHO AM I\" request:\n";
 8000e10:	4b32      	ldr	r3, [pc, #200]	; (8000edc <main+0x178>)
 8000e12:	607b      	str	r3, [r7, #4]
              HAL_UART_Transmit(&huart1, (uint8_t*) cliResponse, strlen(cliResponse), 1000);
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f7ff f9db 	bl	80001d0 <strlen>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	482a      	ldr	r0, [pc, #168]	; (8000ed0 <main+0x16c>)
 8000e26:	f005 fee6 	bl	8006bf6 <HAL_UART_Transmit>
              do_who_am_i();
 8000e2a:	f7ff fc01 	bl	8000630 <do_who_am_i>
              break;
 8000e2e:	e04b      	b.n	8000ec8 <main+0x164>

          case '2':
              cliResponse = "\r\nTemperature read (poll) request:\n";
 8000e30:	4b2b      	ldr	r3, [pc, #172]	; (8000ee0 <main+0x17c>)
 8000e32:	607b      	str	r3, [r7, #4]
              HAL_UART_Transmit(&huart1, (uint8_t*) cliResponse, strlen(cliResponse), 1000);
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f7ff f9cb 	bl	80001d0 <strlen>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e42:	6879      	ldr	r1, [r7, #4]
 8000e44:	4822      	ldr	r0, [pc, #136]	; (8000ed0 <main+0x16c>)
 8000e46:	f005 fed6 	bl	8006bf6 <HAL_UART_Transmit>
              do_temp_polling();
 8000e4a:	f7ff fc49 	bl	80006e0 <do_temp_polling>
              break;
 8000e4e:	e03b      	b.n	8000ec8 <main+0x164>

          case '3':
              cliResponse = "\r\nTemperature read (IT) request:\n";
 8000e50:	4b24      	ldr	r3, [pc, #144]	; (8000ee4 <main+0x180>)
 8000e52:	607b      	str	r3, [r7, #4]
              HAL_UART_Transmit(&huart1, (uint8_t*) cliResponse, strlen(cliResponse), 1000);
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f7ff f9bb 	bl	80001d0 <strlen>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	b29a      	uxth	r2, r3
 8000e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	481a      	ldr	r0, [pc, #104]	; (8000ed0 <main+0x16c>)
 8000e66:	f005 fec6 	bl	8006bf6 <HAL_UART_Transmit>
              do_temp_interrupt();
 8000e6a:	f7ff fe25 	bl	8000ab8 <do_temp_interrupt>
              break;
 8000e6e:	e02b      	b.n	8000ec8 <main+0x164>

          case '4':
              cliResponse = "\r\nTemperature read (DMA) request:\n";
 8000e70:	4b1d      	ldr	r3, [pc, #116]	; (8000ee8 <main+0x184>)
 8000e72:	607b      	str	r3, [r7, #4]
              HAL_UART_Transmit(&huart1, (uint8_t*) cliResponse, strlen(cliResponse), 1000);
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f7ff f9ab 	bl	80001d0 <strlen>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	4812      	ldr	r0, [pc, #72]	; (8000ed0 <main+0x16c>)
 8000e86:	f005 feb6 	bl	8006bf6 <HAL_UART_Transmit>
              do_temp_dma();
 8000e8a:	f7ff febd 	bl	8000c08 <do_temp_dma>
              break;
 8000e8e:	e01b      	b.n	8000ec8 <main+0x164>

          case '5':
              cliResponse = "\r\nTemperature read (EXTI) request:\n";
 8000e90:	4b16      	ldr	r3, [pc, #88]	; (8000eec <main+0x188>)
 8000e92:	607b      	str	r3, [r7, #4]
              HAL_UART_Transmit(&huart1, (uint8_t*) cliResponse, strlen(cliResponse), 1000);
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f7ff f99b 	bl	80001d0 <strlen>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	b29a      	uxth	r2, r3
 8000e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	480a      	ldr	r0, [pc, #40]	; (8000ed0 <main+0x16c>)
 8000ea6:	f005 fea6 	bl	8006bf6 <HAL_UART_Transmit>
              do_temp_interrupt_EXTI();
 8000eaa:	f7ff ff53 	bl	8000d54 <do_temp_interrupt_EXTI>
              break;
 8000eae:	e00b      	b.n	8000ec8 <main+0x164>

          default:
              HAL_UART_Transmit(&huart1, (uint8_t*) cliResponse, strlen(cliResponse), 1000);
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff f98d 	bl	80001d0 <strlen>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	4803      	ldr	r0, [pc, #12]	; (8000ed0 <main+0x16c>)
 8000ec2:	f005 fe98 	bl	8006bf6 <HAL_UART_Transmit>
              break;
 8000ec6:	bf00      	nop
    {
 8000ec8:	e774      	b.n	8000db4 <main+0x50>
 8000eca:	bf00      	nop
 8000ecc:	0800892c 	.word	0x0800892c
 8000ed0:	200006cc 	.word	0x200006cc
 8000ed4:	08008968 	.word	0x08008968
 8000ed8:	08008a24 	.word	0x08008a24
 8000edc:	08008a38 	.word	0x08008a38
 8000ee0:	08008a50 	.word	0x08008a50
 8000ee4:	08008a74 	.word	0x08008a74
 8000ee8:	08008a98 	.word	0x08008a98
 8000eec:	08008abc 	.word	0x08008abc

08000ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b0b8      	sub	sp, #224	; 0xe0
 8000ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000efa:	2244      	movs	r2, #68	; 0x44
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f006 fe62 	bl	8007bc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f04:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f14:	463b      	mov	r3, r7
 8000f16:	2288      	movs	r2, #136	; 0x88
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f006 fe54 	bl	8007bc8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f20:	f004 f980 	bl	8005224 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000f24:	4b42      	ldr	r3, [pc, #264]	; (8001030 <SystemClock_Config+0x140>)
 8000f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f2a:	4a41      	ldr	r2, [pc, #260]	; (8001030 <SystemClock_Config+0x140>)
 8000f2c:	f023 0318 	bic.w	r3, r3, #24
 8000f30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000f34:	2314      	movs	r3, #20
 8000f36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f40:	2301      	movs	r3, #1
 8000f42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f4c:	2360      	movs	r3, #96	; 0x60
 8000f4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f52:	2302      	movs	r3, #2
 8000f54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000f64:	2328      	movs	r3, #40	; 0x28
 8000f66:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f6a:	2307      	movs	r3, #7
 8000f6c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f70:	2302      	movs	r3, #2
 8000f72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f76:	2302      	movs	r3, #2
 8000f78:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f7c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f80:	4618      	mov	r0, r3
 8000f82:	f004 fa8f 	bl	80054a4 <HAL_RCC_OscConfig>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000f8c:	f000 fb94 	bl	80016b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f90:	230f      	movs	r3, #15
 8000f92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f96:	2303      	movs	r3, #3
 8000f98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fae:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000fb2:	2104      	movs	r1, #4
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f004 fe5b 	bl	8005c70 <HAL_RCC_ClockConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000fc0:	f000 fb7a 	bl	80016b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <SystemClock_Config+0x144>)
 8000fc6:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000fda:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000fde:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000fe8:	2318      	movs	r3, #24
 8000fea:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000fec:	2307      	movs	r3, #7
 8000fee:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000ff8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ffc:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ffe:	463b      	mov	r3, r7
 8001000:	4618      	mov	r0, r3
 8001002:	f005 f83b 	bl	800607c <HAL_RCCEx_PeriphCLKConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <SystemClock_Config+0x120>
  {
    Error_Handler();
 800100c:	f000 fb54 	bl	80016b8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001010:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001014:	f004 f924 	bl	8005260 <HAL_PWREx_ControlVoltageScaling>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <SystemClock_Config+0x132>
  {
    Error_Handler();
 800101e:	f000 fb4b 	bl	80016b8 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001022:	f005 fb15 	bl	8006650 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001026:	bf00      	nop
 8001028:	37e0      	adds	r7, #224	; 0xe0
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40021000 	.word	0x40021000
 8001034:	00012085 	.word	0x00012085

08001038 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800103c:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <MX_DFSDM1_Init+0x68>)
 800103e:	4a19      	ldr	r2, [pc, #100]	; (80010a4 <MX_DFSDM1_Init+0x6c>)
 8001040:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8001042:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <MX_DFSDM1_Init+0x68>)
 8001044:	2201      	movs	r2, #1
 8001046:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001048:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <MX_DFSDM1_Init+0x68>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800104e:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <MX_DFSDM1_Init+0x68>)
 8001050:	2202      	movs	r2, #2
 8001052:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <MX_DFSDM1_Init+0x68>)
 8001056:	2200      	movs	r2, #0
 8001058:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800105a:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <MX_DFSDM1_Init+0x68>)
 800105c:	2200      	movs	r2, #0
 800105e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001060:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <MX_DFSDM1_Init+0x68>)
 8001062:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001066:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001068:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <MX_DFSDM1_Init+0x68>)
 800106a:	2200      	movs	r2, #0
 800106c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800106e:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <MX_DFSDM1_Init+0x68>)
 8001070:	2204      	movs	r2, #4
 8001072:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001074:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <MX_DFSDM1_Init+0x68>)
 8001076:	2200      	movs	r2, #0
 8001078:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <MX_DFSDM1_Init+0x68>)
 800107c:	2201      	movs	r2, #1
 800107e:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001080:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <MX_DFSDM1_Init+0x68>)
 8001082:	2200      	movs	r2, #0
 8001084:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <MX_DFSDM1_Init+0x68>)
 8001088:	2200      	movs	r2, #0
 800108a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800108c:	4804      	ldr	r0, [pc, #16]	; (80010a0 <MX_DFSDM1_Init+0x68>)
 800108e:	f001 f845 	bl	800211c <HAL_DFSDM_ChannelInit>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001098:	f000 fb0e 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	200000c8 	.word	0x200000c8
 80010a4:	40016020 	.word	0x40016020

080010a8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010ac:	4b1b      	ldr	r3, [pc, #108]	; (800111c <MX_I2C2_Init+0x74>)
 80010ae:	4a1c      	ldr	r2, [pc, #112]	; (8001120 <MX_I2C2_Init+0x78>)
 80010b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80010b2:	4b1a      	ldr	r3, [pc, #104]	; (800111c <MX_I2C2_Init+0x74>)
 80010b4:	4a1b      	ldr	r2, [pc, #108]	; (8001124 <MX_I2C2_Init+0x7c>)
 80010b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80010b8:	4b18      	ldr	r3, [pc, #96]	; (800111c <MX_I2C2_Init+0x74>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010be:	4b17      	ldr	r3, [pc, #92]	; (800111c <MX_I2C2_Init+0x74>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010c4:	4b15      	ldr	r3, [pc, #84]	; (800111c <MX_I2C2_Init+0x74>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80010ca:	4b14      	ldr	r3, [pc, #80]	; (800111c <MX_I2C2_Init+0x74>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <MX_I2C2_Init+0x74>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010d6:	4b11      	ldr	r3, [pc, #68]	; (800111c <MX_I2C2_Init+0x74>)
 80010d8:	2200      	movs	r2, #0
 80010da:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010dc:	4b0f      	ldr	r3, [pc, #60]	; (800111c <MX_I2C2_Init+0x74>)
 80010de:	2200      	movs	r2, #0
 80010e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80010e2:	480e      	ldr	r0, [pc, #56]	; (800111c <MX_I2C2_Init+0x74>)
 80010e4:	f001 fd6b 	bl	8002bbe <HAL_I2C_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80010ee:	f000 fae3 	bl	80016b8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010f2:	2100      	movs	r1, #0
 80010f4:	4809      	ldr	r0, [pc, #36]	; (800111c <MX_I2C2_Init+0x74>)
 80010f6:	f003 feb5 	bl	8004e64 <HAL_I2CEx_ConfigAnalogFilter>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001100:	f000 fada 	bl	80016b8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001104:	2100      	movs	r1, #0
 8001106:	4805      	ldr	r0, [pc, #20]	; (800111c <MX_I2C2_Init+0x74>)
 8001108:	f003 fef7 	bl	8004efa <HAL_I2CEx_ConfigDigitalFilter>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001112:	f000 fad1 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	2000058c 	.word	0x2000058c
 8001120:	40005800 	.word	0x40005800
 8001124:	10909cec 	.word	0x10909cec

08001128 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800112c:	4b0f      	ldr	r3, [pc, #60]	; (800116c <MX_QUADSPI_Init+0x44>)
 800112e:	4a10      	ldr	r2, [pc, #64]	; (8001170 <MX_QUADSPI_Init+0x48>)
 8001130:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <MX_QUADSPI_Init+0x44>)
 8001134:	2202      	movs	r2, #2
 8001136:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <MX_QUADSPI_Init+0x44>)
 800113a:	2204      	movs	r2, #4
 800113c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800113e:	4b0b      	ldr	r3, [pc, #44]	; (800116c <MX_QUADSPI_Init+0x44>)
 8001140:	2210      	movs	r2, #16
 8001142:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001144:	4b09      	ldr	r3, [pc, #36]	; (800116c <MX_QUADSPI_Init+0x44>)
 8001146:	2217      	movs	r2, #23
 8001148:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <MX_QUADSPI_Init+0x44>)
 800114c:	2200      	movs	r2, #0
 800114e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <MX_QUADSPI_Init+0x44>)
 8001152:	2200      	movs	r2, #0
 8001154:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001156:	4805      	ldr	r0, [pc, #20]	; (800116c <MX_QUADSPI_Init+0x44>)
 8001158:	f004 f8e8 	bl	800532c <HAL_QSPI_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001162:	f000 faa9 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000750 	.word	0x20000750
 8001170:	a0001000 	.word	0xa0001000

08001174 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001178:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <MX_SPI3_Init+0x74>)
 800117a:	4a1c      	ldr	r2, [pc, #112]	; (80011ec <MX_SPI3_Init+0x78>)
 800117c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800117e:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <MX_SPI3_Init+0x74>)
 8001180:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001184:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001186:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <MX_SPI3_Init+0x74>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800118c:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <MX_SPI3_Init+0x74>)
 800118e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001192:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <MX_SPI3_Init+0x74>)
 8001196:	2200      	movs	r2, #0
 8001198:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800119a:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <MX_SPI3_Init+0x74>)
 800119c:	2200      	movs	r2, #0
 800119e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <MX_SPI3_Init+0x74>)
 80011a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011a6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <MX_SPI3_Init+0x74>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <MX_SPI3_Init+0x74>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <MX_SPI3_Init+0x74>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <MX_SPI3_Init+0x74>)
 80011bc:	2200      	movs	r2, #0
 80011be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80011c0:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <MX_SPI3_Init+0x74>)
 80011c2:	2207      	movs	r2, #7
 80011c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011c6:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <MX_SPI3_Init+0x74>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <MX_SPI3_Init+0x74>)
 80011ce:	2208      	movs	r2, #8
 80011d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80011d2:	4805      	ldr	r0, [pc, #20]	; (80011e8 <MX_SPI3_Init+0x74>)
 80011d4:	f005 fc1e 	bl	8006a14 <HAL_SPI_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80011de:	f000 fa6b 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	200005d8 	.word	0x200005d8
 80011ec:	40003c00 	.word	0x40003c00

080011f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011f4:	4b14      	ldr	r3, [pc, #80]	; (8001248 <MX_USART1_UART_Init+0x58>)
 80011f6:	4a15      	ldr	r2, [pc, #84]	; (800124c <MX_USART1_UART_Init+0x5c>)
 80011f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011fa:	4b13      	ldr	r3, [pc, #76]	; (8001248 <MX_USART1_UART_Init+0x58>)
 80011fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001200:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <MX_USART1_UART_Init+0x58>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <MX_USART1_UART_Init+0x58>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <MX_USART1_UART_Init+0x58>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <MX_USART1_UART_Init+0x58>)
 8001216:	220c      	movs	r2, #12
 8001218:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <MX_USART1_UART_Init+0x58>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001220:	4b09      	ldr	r3, [pc, #36]	; (8001248 <MX_USART1_UART_Init+0x58>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <MX_USART1_UART_Init+0x58>)
 8001228:	2200      	movs	r2, #0
 800122a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <MX_USART1_UART_Init+0x58>)
 800122e:	2200      	movs	r2, #0
 8001230:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <MX_USART1_UART_Init+0x58>)
 8001234:	f005 fc91 	bl	8006b5a <HAL_UART_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800123e:	f000 fa3b 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200006cc 	.word	0x200006cc
 800124c:	40013800 	.word	0x40013800

08001250 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001254:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <MX_USART3_UART_Init+0x58>)
 8001256:	4a15      	ldr	r2, [pc, #84]	; (80012ac <MX_USART3_UART_Init+0x5c>)
 8001258:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800125a:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <MX_USART3_UART_Init+0x58>)
 800125c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001260:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <MX_USART3_UART_Init+0x58>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001268:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <MX_USART3_UART_Init+0x58>)
 800126a:	2200      	movs	r2, #0
 800126c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <MX_USART3_UART_Init+0x58>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <MX_USART3_UART_Init+0x58>)
 8001276:	220c      	movs	r2, #12
 8001278:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800127a:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <MX_USART3_UART_Init+0x58>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001280:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <MX_USART3_UART_Init+0x58>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001286:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <MX_USART3_UART_Init+0x58>)
 8001288:	2200      	movs	r2, #0
 800128a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800128c:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <MX_USART3_UART_Init+0x58>)
 800128e:	2200      	movs	r2, #0
 8001290:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001292:	4805      	ldr	r0, [pc, #20]	; (80012a8 <MX_USART3_UART_Init+0x58>)
 8001294:	f005 fc61 	bl	8006b5a <HAL_UART_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800129e:	f000 fa0b 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000100 	.word	0x20000100
 80012ac:	40004800 	.word	0x40004800

080012b0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80012b4:	4b14      	ldr	r3, [pc, #80]	; (8001308 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80012ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012be:	2206      	movs	r2, #6
 80012c0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80012c2:	4b11      	ldr	r3, [pc, #68]	; (8001308 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012c4:	2202      	movs	r2, #2
 80012c6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80012c8:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012ca:	2202      	movs	r2, #2
 80012cc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012dc:	2200      	movs	r2, #0
 80012de:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80012e6:	4b08      	ldr	r3, [pc, #32]	; (8001308 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80012f2:	4805      	ldr	r0, [pc, #20]	; (8001308 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012f4:	f003 fe4d 	bl	8004f92 <HAL_PCD_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80012fe:	f000 f9db 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000184 	.word	0x20000184

0800130c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <MX_DMA_Init+0x48>)
 8001314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001316:	4a0f      	ldr	r2, [pc, #60]	; (8001354 <MX_DMA_Init+0x48>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6493      	str	r3, [r2, #72]	; 0x48
 800131e:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <MX_DMA_Init+0x48>)
 8001320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2100      	movs	r1, #0
 800132e:	200e      	movs	r0, #14
 8001330:	f000 febd 	bl	80020ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001334:	200e      	movs	r0, #14
 8001336:	f000 fed6 	bl	80020e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	2100      	movs	r1, #0
 800133e:	200f      	movs	r0, #15
 8001340:	f000 feb5 	bl	80020ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001344:	200f      	movs	r0, #15
 8001346:	f000 fece 	bl	80020e6 <HAL_NVIC_EnableIRQ>

}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40021000 	.word	0x40021000

08001358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08a      	sub	sp, #40	; 0x28
 800135c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800136e:	4bba      	ldr	r3, [pc, #744]	; (8001658 <MX_GPIO_Init+0x300>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	4ab9      	ldr	r2, [pc, #740]	; (8001658 <MX_GPIO_Init+0x300>)
 8001374:	f043 0310 	orr.w	r3, r3, #16
 8001378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137a:	4bb7      	ldr	r3, [pc, #732]	; (8001658 <MX_GPIO_Init+0x300>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	f003 0310 	and.w	r3, r3, #16
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001386:	4bb4      	ldr	r3, [pc, #720]	; (8001658 <MX_GPIO_Init+0x300>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	4ab3      	ldr	r2, [pc, #716]	; (8001658 <MX_GPIO_Init+0x300>)
 800138c:	f043 0304 	orr.w	r3, r3, #4
 8001390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001392:	4bb1      	ldr	r3, [pc, #708]	; (8001658 <MX_GPIO_Init+0x300>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	f003 0304 	and.w	r3, r3, #4
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	4bae      	ldr	r3, [pc, #696]	; (8001658 <MX_GPIO_Init+0x300>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a2:	4aad      	ldr	r2, [pc, #692]	; (8001658 <MX_GPIO_Init+0x300>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013aa:	4bab      	ldr	r3, [pc, #684]	; (8001658 <MX_GPIO_Init+0x300>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	4ba8      	ldr	r3, [pc, #672]	; (8001658 <MX_GPIO_Init+0x300>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ba:	4aa7      	ldr	r2, [pc, #668]	; (8001658 <MX_GPIO_Init+0x300>)
 80013bc:	f043 0302 	orr.w	r3, r3, #2
 80013c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c2:	4ba5      	ldr	r3, [pc, #660]	; (8001658 <MX_GPIO_Init+0x300>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ce:	4ba2      	ldr	r3, [pc, #648]	; (8001658 <MX_GPIO_Init+0x300>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	4aa1      	ldr	r2, [pc, #644]	; (8001658 <MX_GPIO_Init+0x300>)
 80013d4:	f043 0308 	orr.w	r3, r3, #8
 80013d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013da:	4b9f      	ldr	r3, [pc, #636]	; (8001658 <MX_GPIO_Init+0x300>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	f44f 718a 	mov.w	r1, #276	; 0x114
 80013ec:	489b      	ldr	r0, [pc, #620]	; (800165c <MX_GPIO_Init+0x304>)
 80013ee:	f001 fb91 	bl	8002b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80013f2:	2200      	movs	r2, #0
 80013f4:	f248 1104 	movw	r1, #33028	; 0x8104
 80013f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013fc:	f001 fb8a 	bl	8002b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001400:	2200      	movs	r2, #0
 8001402:	f24f 0114 	movw	r1, #61460	; 0xf014
 8001406:	4896      	ldr	r0, [pc, #600]	; (8001660 <MX_GPIO_Init+0x308>)
 8001408:	f001 fb84 	bl	8002b14 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	f241 0181 	movw	r1, #4225	; 0x1081
 8001412:	4894      	ldr	r0, [pc, #592]	; (8001664 <MX_GPIO_Init+0x30c>)
 8001414:	f001 fb7e 	bl	8002b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001418:	2201      	movs	r2, #1
 800141a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800141e:	4891      	ldr	r0, [pc, #580]	; (8001664 <MX_GPIO_Init+0x30c>)
 8001420:	f001 fb78 	bl	8002b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001424:	2200      	movs	r2, #0
 8001426:	f44f 7110 	mov.w	r1, #576	; 0x240
 800142a:	488f      	ldr	r0, [pc, #572]	; (8001668 <MX_GPIO_Init+0x310>)
 800142c:	f001 fb72 	bl	8002b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001430:	2201      	movs	r2, #1
 8001432:	2120      	movs	r1, #32
 8001434:	488a      	ldr	r0, [pc, #552]	; (8001660 <MX_GPIO_Init+0x308>)
 8001436:	f001 fb6d 	bl	8002b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800143a:	2201      	movs	r2, #1
 800143c:	2101      	movs	r1, #1
 800143e:	4887      	ldr	r0, [pc, #540]	; (800165c <MX_GPIO_Init+0x304>)
 8001440:	f001 fb68 	bl	8002b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001444:	f240 1315 	movw	r3, #277	; 0x115
 8001448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144a:	2301      	movs	r3, #1
 800144c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	2300      	movs	r3, #0
 8001454:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	4619      	mov	r1, r3
 800145c:	487f      	ldr	r0, [pc, #508]	; (800165c <MX_GPIO_Init+0x304>)
 800145e:	f001 f9af 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001462:	236a      	movs	r3, #106	; 0x6a
 8001464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001466:	4b81      	ldr	r3, [pc, #516]	; (800166c <MX_GPIO_Init+0x314>)
 8001468:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4619      	mov	r1, r3
 8001474:	4879      	ldr	r0, [pc, #484]	; (800165c <MX_GPIO_Init+0x304>)
 8001476:	f001 f9a3 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 800147a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800147e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001480:	4b7b      	ldr	r3, [pc, #492]	; (8001670 <MX_GPIO_Init+0x318>)
 8001482:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	4619      	mov	r1, r3
 800148e:	4876      	ldr	r0, [pc, #472]	; (8001668 <MX_GPIO_Init+0x310>)
 8001490:	f001 f996 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001494:	233f      	movs	r3, #63	; 0x3f
 8001496:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001498:	230b      	movs	r3, #11
 800149a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	4619      	mov	r1, r3
 80014a6:	4870      	ldr	r0, [pc, #448]	; (8001668 <MX_GPIO_Init+0x310>)
 80014a8:	f001 f98a 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80014ac:	2303      	movs	r3, #3
 80014ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b8:	2303      	movs	r3, #3
 80014ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80014bc:	2308      	movs	r3, #8
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4619      	mov	r1, r3
 80014c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ca:	f001 f979 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80014ce:	f248 1304 	movw	r3, #33028	; 0x8104
 80014d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d4:	2301      	movs	r3, #1
 80014d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	2300      	movs	r3, #0
 80014de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	4619      	mov	r1, r3
 80014e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ea:	f001 f969 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80014ee:	2308      	movs	r3, #8
 80014f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f2:	2302      	movs	r3, #2
 80014f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fa:	2300      	movs	r3, #0
 80014fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014fe:	2301      	movs	r3, #1
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	4619      	mov	r1, r3
 8001508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800150c:	f001 f958 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001510:	2310      	movs	r3, #16
 8001512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001514:	230b      	movs	r3, #11
 8001516:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	4619      	mov	r1, r3
 8001522:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001526:	f001 f94b 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800152a:	23e0      	movs	r3, #224	; 0xe0
 800152c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152e:	2302      	movs	r3, #2
 8001530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001536:	2303      	movs	r3, #3
 8001538:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800153a:	2305      	movs	r3, #5
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4619      	mov	r1, r3
 8001544:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001548:	f001 f93a 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 800154c:	2301      	movs	r3, #1
 800154e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001550:	4b46      	ldr	r3, [pc, #280]	; (800166c <MX_GPIO_Init+0x314>)
 8001552:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	4619      	mov	r1, r3
 800155e:	4840      	ldr	r0, [pc, #256]	; (8001660 <MX_GPIO_Init+0x308>)
 8001560:	f001 f92e 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001564:	2302      	movs	r3, #2
 8001566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001568:	230b      	movs	r3, #11
 800156a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4619      	mov	r1, r3
 8001576:	483a      	ldr	r0, [pc, #232]	; (8001660 <MX_GPIO_Init+0x308>)
 8001578:	f001 f922 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800157c:	f24f 0334 	movw	r3, #61492	; 0xf034
 8001580:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001582:	2301      	movs	r3, #1
 8001584:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158a:	2300      	movs	r3, #0
 800158c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	4619      	mov	r1, r3
 8001594:	4832      	ldr	r0, [pc, #200]	; (8001660 <MX_GPIO_Init+0x308>)
 8001596:	f001 f913 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 800159a:	f64c 4304 	movw	r3, #52228	; 0xcc04
 800159e:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015a0:	4b32      	ldr	r3, [pc, #200]	; (800166c <MX_GPIO_Init+0x314>)
 80015a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	4619      	mov	r1, r3
 80015ae:	482d      	ldr	r0, [pc, #180]	; (8001664 <MX_GPIO_Init+0x30c>)
 80015b0:	f001 f906 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80015b4:	f243 0381 	movw	r3, #12417	; 0x3081
 80015b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ba:	2301      	movs	r3, #1
 80015bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c2:	2300      	movs	r3, #0
 80015c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	4619      	mov	r1, r3
 80015cc:	4825      	ldr	r0, [pc, #148]	; (8001664 <MX_GPIO_Init+0x30c>)
 80015ce:	f001 f8f7 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80015d2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80015d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d8:	2301      	movs	r3, #1
 80015da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2300      	movs	r3, #0
 80015e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	4619      	mov	r1, r3
 80015ea:	481f      	ldr	r0, [pc, #124]	; (8001668 <MX_GPIO_Init+0x310>)
 80015ec:	f001 f8e8 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80015f0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80015f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015f6:	4b1d      	ldr	r3, [pc, #116]	; (800166c <MX_GPIO_Init+0x314>)
 80015f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015fe:	f107 0314 	add.w	r3, r7, #20
 8001602:	4619      	mov	r1, r3
 8001604:	4818      	ldr	r0, [pc, #96]	; (8001668 <MX_GPIO_Init+0x310>)
 8001606:	f001 f8db 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800160a:	2302      	movs	r3, #2
 800160c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001616:	2303      	movs	r3, #3
 8001618:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800161a:	2305      	movs	r3, #5
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	4619      	mov	r1, r3
 8001624:	480f      	ldr	r0, [pc, #60]	; (8001664 <MX_GPIO_Init+0x30c>)
 8001626:	f001 f8cb 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800162a:	2378      	movs	r3, #120	; 0x78
 800162c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162e:	2302      	movs	r3, #2
 8001630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001636:	2303      	movs	r3, #3
 8001638:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800163a:	2307      	movs	r3, #7
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	4619      	mov	r1, r3
 8001644:	4807      	ldr	r0, [pc, #28]	; (8001664 <MX_GPIO_Init+0x30c>)
 8001646:	f001 f8bb 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800164a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800164e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001650:	2312      	movs	r3, #18
 8001652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001654:	2301      	movs	r3, #1
 8001656:	e00d      	b.n	8001674 <MX_GPIO_Init+0x31c>
 8001658:	40021000 	.word	0x40021000
 800165c:	48001000 	.word	0x48001000
 8001660:	48000400 	.word	0x48000400
 8001664:	48000c00 	.word	0x48000c00
 8001668:	48000800 	.word	0x48000800
 800166c:	10110000 	.word	0x10110000
 8001670:	10210000 	.word	0x10210000
 8001674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001676:	2303      	movs	r3, #3
 8001678:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800167a:	2304      	movs	r3, #4
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	4619      	mov	r1, r3
 8001684:	480b      	ldr	r0, [pc, #44]	; (80016b4 <MX_GPIO_Init+0x35c>)
 8001686:	f001 f89b 	bl	80027c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	2100      	movs	r1, #0
 800168e:	2017      	movs	r0, #23
 8001690:	f000 fd0d 	bl	80020ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001694:	2017      	movs	r0, #23
 8001696:	f000 fd26 	bl	80020e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2100      	movs	r1, #0
 800169e:	2028      	movs	r0, #40	; 0x28
 80016a0:	f000 fd05 	bl	80020ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016a4:	2028      	movs	r0, #40	; 0x28
 80016a6:	f000 fd1e 	bl	80020e6 <HAL_NVIC_EnableIRQ>

}
 80016aa:	bf00      	nop
 80016ac:	3728      	adds	r7, #40	; 0x28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	48000400 	.word	0x48000400

080016b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016bc:	b672      	cpsid	i
}
 80016be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <Error_Handler+0x8>
	...

080016c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ca:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <HAL_MspInit+0x44>)
 80016cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ce:	4a0e      	ldr	r2, [pc, #56]	; (8001708 <HAL_MspInit+0x44>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6613      	str	r3, [r2, #96]	; 0x60
 80016d6:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <HAL_MspInit+0x44>)
 80016d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e2:	4b09      	ldr	r3, [pc, #36]	; (8001708 <HAL_MspInit+0x44>)
 80016e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e6:	4a08      	ldr	r2, [pc, #32]	; (8001708 <HAL_MspInit+0x44>)
 80016e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ec:	6593      	str	r3, [r2, #88]	; 0x58
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <HAL_MspInit+0x44>)
 80016f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	40021000 	.word	0x40021000

0800170c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	; 0x28
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8001724:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <HAL_DFSDM_ChannelMspInit+0x84>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d12d      	bne.n	8001788 <HAL_DFSDM_ChannelMspInit+0x7c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800172c:	4b19      	ldr	r3, [pc, #100]	; (8001794 <HAL_DFSDM_ChannelMspInit+0x88>)
 800172e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001730:	4a18      	ldr	r2, [pc, #96]	; (8001794 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001732:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001736:	6613      	str	r3, [r2, #96]	; 0x60
 8001738:	4b16      	ldr	r3, [pc, #88]	; (8001794 <HAL_DFSDM_ChannelMspInit+0x88>)
 800173a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800173c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001748:	4a12      	ldr	r2, [pc, #72]	; (8001794 <HAL_DFSDM_ChannelMspInit+0x88>)
 800174a:	f043 0310 	orr.w	r3, r3, #16
 800174e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001750:	4b10      	ldr	r3, [pc, #64]	; (8001794 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001754:	f003 0310 	and.w	r3, r3, #16
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800175c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	2302      	movs	r3, #2
 8001764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176a:	2300      	movs	r3, #0
 800176c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800176e:	2306      	movs	r3, #6
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001772:	f107 0314 	add.w	r3, r7, #20
 8001776:	4619      	mov	r1, r3
 8001778:	4807      	ldr	r0, [pc, #28]	; (8001798 <HAL_DFSDM_ChannelMspInit+0x8c>)
 800177a:	f001 f821 	bl	80027c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800177e:	4b04      	ldr	r3, [pc, #16]	; (8001790 <HAL_DFSDM_ChannelMspInit+0x84>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	3301      	adds	r3, #1
 8001784:	4a02      	ldr	r2, [pc, #8]	; (8001790 <HAL_DFSDM_ChannelMspInit+0x84>)
 8001786:	6013      	str	r3, [r2, #0]
  }

}
 8001788:	bf00      	nop
 800178a:	3728      	adds	r7, #40	; 0x28
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20000094 	.word	0x20000094
 8001794:	40021000 	.word	0x40021000
 8001798:	48001000 	.word	0x48001000

0800179c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	; 0x28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a45      	ldr	r2, [pc, #276]	; (80018d0 <HAL_I2C_MspInit+0x134>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	f040 8083 	bne.w	80018c6 <HAL_I2C_MspInit+0x12a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c0:	4b44      	ldr	r3, [pc, #272]	; (80018d4 <HAL_I2C_MspInit+0x138>)
 80017c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c4:	4a43      	ldr	r2, [pc, #268]	; (80018d4 <HAL_I2C_MspInit+0x138>)
 80017c6:	f043 0302 	orr.w	r3, r3, #2
 80017ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017cc:	4b41      	ldr	r3, [pc, #260]	; (80018d4 <HAL_I2C_MspInit+0x138>)
 80017ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	613b      	str	r3, [r7, #16]
 80017d6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80017d8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017de:	2312      	movs	r3, #18
 80017e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017e2:	2301      	movs	r3, #1
 80017e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e6:	2303      	movs	r3, #3
 80017e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80017ea:	2304      	movs	r3, #4
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	4619      	mov	r1, r3
 80017f4:	4838      	ldr	r0, [pc, #224]	; (80018d8 <HAL_I2C_MspInit+0x13c>)
 80017f6:	f000 ffe3 	bl	80027c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017fa:	4b36      	ldr	r3, [pc, #216]	; (80018d4 <HAL_I2C_MspInit+0x138>)
 80017fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fe:	4a35      	ldr	r2, [pc, #212]	; (80018d4 <HAL_I2C_MspInit+0x138>)
 8001800:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001804:	6593      	str	r3, [r2, #88]	; 0x58
 8001806:	4b33      	ldr	r3, [pc, #204]	; (80018d4 <HAL_I2C_MspInit+0x138>)
 8001808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 8001812:	4b32      	ldr	r3, [pc, #200]	; (80018dc <HAL_I2C_MspInit+0x140>)
 8001814:	4a32      	ldr	r2, [pc, #200]	; (80018e0 <HAL_I2C_MspInit+0x144>)
 8001816:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_3;
 8001818:	4b30      	ldr	r3, [pc, #192]	; (80018dc <HAL_I2C_MspInit+0x140>)
 800181a:	2203      	movs	r2, #3
 800181c:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800181e:	4b2f      	ldr	r3, [pc, #188]	; (80018dc <HAL_I2C_MspInit+0x140>)
 8001820:	2210      	movs	r2, #16
 8001822:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001824:	4b2d      	ldr	r3, [pc, #180]	; (80018dc <HAL_I2C_MspInit+0x140>)
 8001826:	2200      	movs	r2, #0
 8001828:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800182a:	4b2c      	ldr	r3, [pc, #176]	; (80018dc <HAL_I2C_MspInit+0x140>)
 800182c:	2280      	movs	r2, #128	; 0x80
 800182e:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001830:	4b2a      	ldr	r3, [pc, #168]	; (80018dc <HAL_I2C_MspInit+0x140>)
 8001832:	2200      	movs	r2, #0
 8001834:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001836:	4b29      	ldr	r3, [pc, #164]	; (80018dc <HAL_I2C_MspInit+0x140>)
 8001838:	2200      	movs	r2, #0
 800183a:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800183c:	4b27      	ldr	r3, [pc, #156]	; (80018dc <HAL_I2C_MspInit+0x140>)
 800183e:	2200      	movs	r2, #0
 8001840:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001842:	4b26      	ldr	r3, [pc, #152]	; (80018dc <HAL_I2C_MspInit+0x140>)
 8001844:	2200      	movs	r2, #0
 8001846:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001848:	4824      	ldr	r0, [pc, #144]	; (80018dc <HAL_I2C_MspInit+0x140>)
 800184a:	f000 fd73 	bl	8002334 <HAL_DMA_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8001854:	f7ff ff30 	bl	80016b8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a20      	ldr	r2, [pc, #128]	; (80018dc <HAL_I2C_MspInit+0x140>)
 800185c:	639a      	str	r2, [r3, #56]	; 0x38
 800185e:	4a1f      	ldr	r2, [pc, #124]	; (80018dc <HAL_I2C_MspInit+0x140>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel5;
 8001864:	4b1f      	ldr	r3, [pc, #124]	; (80018e4 <HAL_I2C_MspInit+0x148>)
 8001866:	4a20      	ldr	r2, [pc, #128]	; (80018e8 <HAL_I2C_MspInit+0x14c>)
 8001868:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_3;
 800186a:	4b1e      	ldr	r3, [pc, #120]	; (80018e4 <HAL_I2C_MspInit+0x148>)
 800186c:	2203      	movs	r2, #3
 800186e:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001870:	4b1c      	ldr	r3, [pc, #112]	; (80018e4 <HAL_I2C_MspInit+0x148>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001876:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <HAL_I2C_MspInit+0x148>)
 8001878:	2200      	movs	r2, #0
 800187a:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800187c:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <HAL_I2C_MspInit+0x148>)
 800187e:	2280      	movs	r2, #128	; 0x80
 8001880:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001882:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <HAL_I2C_MspInit+0x148>)
 8001884:	2200      	movs	r2, #0
 8001886:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001888:	4b16      	ldr	r3, [pc, #88]	; (80018e4 <HAL_I2C_MspInit+0x148>)
 800188a:	2200      	movs	r2, #0
 800188c:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 800188e:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <HAL_I2C_MspInit+0x148>)
 8001890:	2200      	movs	r2, #0
 8001892:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001894:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <HAL_I2C_MspInit+0x148>)
 8001896:	2200      	movs	r2, #0
 8001898:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 800189a:	4812      	ldr	r0, [pc, #72]	; (80018e4 <HAL_I2C_MspInit+0x148>)
 800189c:	f000 fd4a 	bl	8002334 <HAL_DMA_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 80018a6:	f7ff ff07 	bl	80016b8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a0d      	ldr	r2, [pc, #52]	; (80018e4 <HAL_I2C_MspInit+0x148>)
 80018ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80018b0:	4a0c      	ldr	r2, [pc, #48]	; (80018e4 <HAL_I2C_MspInit+0x148>)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2100      	movs	r1, #0
 80018ba:	2021      	movs	r0, #33	; 0x21
 80018bc:	f000 fbf7 	bl	80020ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80018c0:	2021      	movs	r0, #33	; 0x21
 80018c2:	f000 fc10 	bl	80020e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80018c6:	bf00      	nop
 80018c8:	3728      	adds	r7, #40	; 0x28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40005800 	.word	0x40005800
 80018d4:	40021000 	.word	0x40021000
 80018d8:	48000400 	.word	0x48000400
 80018dc:	20000684 	.word	0x20000684
 80018e0:	40020044 	.word	0x40020044
 80018e4:	2000063c 	.word	0x2000063c
 80018e8:	40020058 	.word	0x40020058

080018ec <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	; 0x28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a17      	ldr	r2, [pc, #92]	; (8001968 <HAL_QSPI_MspInit+0x7c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d128      	bne.n	8001960 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800190e:	4b17      	ldr	r3, [pc, #92]	; (800196c <HAL_QSPI_MspInit+0x80>)
 8001910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001912:	4a16      	ldr	r2, [pc, #88]	; (800196c <HAL_QSPI_MspInit+0x80>)
 8001914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001918:	6513      	str	r3, [r2, #80]	; 0x50
 800191a:	4b14      	ldr	r3, [pc, #80]	; (800196c <HAL_QSPI_MspInit+0x80>)
 800191c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800191e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001926:	4b11      	ldr	r3, [pc, #68]	; (800196c <HAL_QSPI_MspInit+0x80>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192a:	4a10      	ldr	r2, [pc, #64]	; (800196c <HAL_QSPI_MspInit+0x80>)
 800192c:	f043 0310 	orr.w	r3, r3, #16
 8001930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001932:	4b0e      	ldr	r3, [pc, #56]	; (800196c <HAL_QSPI_MspInit+0x80>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001936:	f003 0310 	and.w	r3, r3, #16
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800193e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001942:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001944:	2302      	movs	r3, #2
 8001946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194c:	2303      	movs	r3, #3
 800194e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001950:	230a      	movs	r3, #10
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001954:	f107 0314 	add.w	r3, r7, #20
 8001958:	4619      	mov	r1, r3
 800195a:	4805      	ldr	r0, [pc, #20]	; (8001970 <HAL_QSPI_MspInit+0x84>)
 800195c:	f000 ff30 	bl	80027c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001960:	bf00      	nop
 8001962:	3728      	adds	r7, #40	; 0x28
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	a0001000 	.word	0xa0001000
 800196c:	40021000 	.word	0x40021000
 8001970:	48001000 	.word	0x48001000

08001974 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	; 0x28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a17      	ldr	r2, [pc, #92]	; (80019f0 <HAL_SPI_MspInit+0x7c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d128      	bne.n	80019e8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001996:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <HAL_SPI_MspInit+0x80>)
 8001998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199a:	4a16      	ldr	r2, [pc, #88]	; (80019f4 <HAL_SPI_MspInit+0x80>)
 800199c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019a0:	6593      	str	r3, [r2, #88]	; 0x58
 80019a2:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <HAL_SPI_MspInit+0x80>)
 80019a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ae:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <HAL_SPI_MspInit+0x80>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b2:	4a10      	ldr	r2, [pc, #64]	; (80019f4 <HAL_SPI_MspInit+0x80>)
 80019b4:	f043 0304 	orr.w	r3, r3, #4
 80019b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <HAL_SPI_MspInit+0x80>)
 80019bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019be:	f003 0304 	and.w	r3, r3, #4
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80019c6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80019ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019cc:	2302      	movs	r3, #2
 80019ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d4:	2303      	movs	r3, #3
 80019d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019d8:	2306      	movs	r3, #6
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	4619      	mov	r1, r3
 80019e2:	4805      	ldr	r0, [pc, #20]	; (80019f8 <HAL_SPI_MspInit+0x84>)
 80019e4:	f000 feec 	bl	80027c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80019e8:	bf00      	nop
 80019ea:	3728      	adds	r7, #40	; 0x28
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40003c00 	.word	0x40003c00
 80019f4:	40021000 	.word	0x40021000
 80019f8:	48000800 	.word	0x48000800

080019fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08c      	sub	sp, #48	; 0x30
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a04:	f107 031c 	add.w	r3, r7, #28
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a2e      	ldr	r2, [pc, #184]	; (8001ad4 <HAL_UART_MspInit+0xd8>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d128      	bne.n	8001a70 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a1e:	4b2e      	ldr	r3, [pc, #184]	; (8001ad8 <HAL_UART_MspInit+0xdc>)
 8001a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a22:	4a2d      	ldr	r2, [pc, #180]	; (8001ad8 <HAL_UART_MspInit+0xdc>)
 8001a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a28:	6613      	str	r3, [r2, #96]	; 0x60
 8001a2a:	4b2b      	ldr	r3, [pc, #172]	; (8001ad8 <HAL_UART_MspInit+0xdc>)
 8001a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a32:	61bb      	str	r3, [r7, #24]
 8001a34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a36:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <HAL_UART_MspInit+0xdc>)
 8001a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3a:	4a27      	ldr	r2, [pc, #156]	; (8001ad8 <HAL_UART_MspInit+0xdc>)
 8001a3c:	f043 0302 	orr.w	r3, r3, #2
 8001a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a42:	4b25      	ldr	r3, [pc, #148]	; (8001ad8 <HAL_UART_MspInit+0xdc>)
 8001a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001a4e:	23c0      	movs	r3, #192	; 0xc0
 8001a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a52:	2302      	movs	r3, #2
 8001a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a5e:	2307      	movs	r3, #7
 8001a60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a62:	f107 031c 	add.w	r3, r7, #28
 8001a66:	4619      	mov	r1, r3
 8001a68:	481c      	ldr	r0, [pc, #112]	; (8001adc <HAL_UART_MspInit+0xe0>)
 8001a6a:	f000 fea9 	bl	80027c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a6e:	e02d      	b.n	8001acc <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a1a      	ldr	r2, [pc, #104]	; (8001ae0 <HAL_UART_MspInit+0xe4>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d128      	bne.n	8001acc <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a7a:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <HAL_UART_MspInit+0xdc>)
 8001a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7e:	4a16      	ldr	r2, [pc, #88]	; (8001ad8 <HAL_UART_MspInit+0xdc>)
 8001a80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a84:	6593      	str	r3, [r2, #88]	; 0x58
 8001a86:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <HAL_UART_MspInit+0xdc>)
 8001a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a92:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <HAL_UART_MspInit+0xdc>)
 8001a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a96:	4a10      	ldr	r2, [pc, #64]	; (8001ad8 <HAL_UART_MspInit+0xdc>)
 8001a98:	f043 0308 	orr.w	r3, r3, #8
 8001a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <HAL_UART_MspInit+0xdc>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001aaa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001abc:	2307      	movs	r3, #7
 8001abe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ac0:	f107 031c 	add.w	r3, r7, #28
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4807      	ldr	r0, [pc, #28]	; (8001ae4 <HAL_UART_MspInit+0xe8>)
 8001ac8:	f000 fe7a 	bl	80027c0 <HAL_GPIO_Init>
}
 8001acc:	bf00      	nop
 8001ace:	3730      	adds	r7, #48	; 0x30
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40013800 	.word	0x40013800
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	48000400 	.word	0x48000400
 8001ae0:	40004800 	.word	0x40004800
 8001ae4:	48000c00 	.word	0x48000c00

08001ae8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08a      	sub	sp, #40	; 0x28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b08:	d154      	bne.n	8001bb4 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0a:	4b2c      	ldr	r3, [pc, #176]	; (8001bbc <HAL_PCD_MspInit+0xd4>)
 8001b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0e:	4a2b      	ldr	r2, [pc, #172]	; (8001bbc <HAL_PCD_MspInit+0xd4>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b16:	4b29      	ldr	r3, [pc, #164]	; (8001bbc <HAL_PCD_MspInit+0xd4>)
 8001b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001b22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b30:	f107 0314 	add.w	r3, r7, #20
 8001b34:	4619      	mov	r1, r3
 8001b36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b3a:	f000 fe41 	bl	80027c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001b3e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b44:	2302      	movs	r3, #2
 8001b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b50:	230a      	movs	r3, #10
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b5e:	f000 fe2f 	bl	80027c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b62:	4b16      	ldr	r3, [pc, #88]	; (8001bbc <HAL_PCD_MspInit+0xd4>)
 8001b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b66:	4a15      	ldr	r2, [pc, #84]	; (8001bbc <HAL_PCD_MspInit+0xd4>)
 8001b68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b6e:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <HAL_PCD_MspInit+0xd4>)
 8001b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <HAL_PCD_MspInit+0xd4>)
 8001b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d114      	bne.n	8001bb0 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b86:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <HAL_PCD_MspInit+0xd4>)
 8001b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8a:	4a0c      	ldr	r2, [pc, #48]	; (8001bbc <HAL_PCD_MspInit+0xd4>)
 8001b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b90:	6593      	str	r3, [r2, #88]	; 0x58
 8001b92:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <HAL_PCD_MspInit+0xd4>)
 8001b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9a:	60bb      	str	r3, [r7, #8]
 8001b9c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001b9e:	f003 fbb5 	bl	800530c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_PCD_MspInit+0xd4>)
 8001ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba6:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <HAL_PCD_MspInit+0xd4>)
 8001ba8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bac:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001bae:	e001      	b.n	8001bb4 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8001bb0:	f003 fbac 	bl	800530c <HAL_PWREx_EnableVddUSB>
}
 8001bb4:	bf00      	nop
 8001bb6:	3728      	adds	r7, #40	; 0x28
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40021000 	.word	0x40021000

08001bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bc4:	e7fe      	b.n	8001bc4 <NMI_Handler+0x4>

08001bc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bca:	e7fe      	b.n	8001bca <HardFault_Handler+0x4>

08001bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd0:	e7fe      	b.n	8001bd0 <MemManage_Handler+0x4>

08001bd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bd6:	e7fe      	b.n	8001bd6 <BusFault_Handler+0x4>

08001bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bdc:	e7fe      	b.n	8001bdc <UsageFault_Handler+0x4>

08001bde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c0c:	f000 f930 	bl	8001e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001c18:	4802      	ldr	r0, [pc, #8]	; (8001c24 <DMA1_Channel4_IRQHandler+0x10>)
 8001c1a:	f000 fce4 	bl	80025e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000684 	.word	0x20000684

08001c28 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001c2c:	4802      	ldr	r0, [pc, #8]	; (8001c38 <DMA1_Channel5_IRQHandler+0x10>)
 8001c2e:	f000 fcda 	bl	80025e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	2000063c 	.word	0x2000063c

08001c3c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001c40:	2020      	movs	r0, #32
 8001c42:	f000 ff99 	bl	8002b78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001c46:	2040      	movs	r0, #64	; 0x40
 8001c48:	f000 ff96 	bl	8002b78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001c4c:	2080      	movs	r0, #128	; 0x80
 8001c4e:	f000 ff93 	bl	8002b78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001c52:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001c56:	f000 ff8f 	bl	8002b78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001c64:	4802      	ldr	r0, [pc, #8]	; (8001c70 <I2C2_EV_IRQHandler+0x10>)
 8001c66:	f001 fce3 	bl	8003630 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	2000058c 	.word	0x2000058c

08001c74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001c78:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001c7c:	f000 ff7c 	bl	8002b78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001c80:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001c84:	f000 ff78 	bl	8002b78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001c88:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c8c:	f000 ff74 	bl	8002b78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001c90:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001c94:	f000 ff70 	bl	8002b78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001c98:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001c9c:	f000 ff6c 	bl	8002b78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ca0:	bf00      	nop
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cac:	4a14      	ldr	r2, [pc, #80]	; (8001d00 <_sbrk+0x5c>)
 8001cae:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <_sbrk+0x60>)
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cb8:	4b13      	ldr	r3, [pc, #76]	; (8001d08 <_sbrk+0x64>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d102      	bne.n	8001cc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cc0:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <_sbrk+0x64>)
 8001cc2:	4a12      	ldr	r2, [pc, #72]	; (8001d0c <_sbrk+0x68>)
 8001cc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cc6:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <_sbrk+0x64>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4413      	add	r3, r2
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d207      	bcs.n	8001ce4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cd4:	f005 ff4e 	bl	8007b74 <__errno>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	220c      	movs	r2, #12
 8001cdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cde:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce2:	e009      	b.n	8001cf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ce4:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <_sbrk+0x64>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cea:	4b07      	ldr	r3, [pc, #28]	; (8001d08 <_sbrk+0x64>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	4a05      	ldr	r2, [pc, #20]	; (8001d08 <_sbrk+0x64>)
 8001cf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20018000 	.word	0x20018000
 8001d04:	00000400 	.word	0x00000400
 8001d08:	20000098 	.word	0x20000098
 8001d0c:	200007a8 	.word	0x200007a8

08001d10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d14:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <SystemInit+0x5c>)
 8001d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d1a:	4a14      	ldr	r2, [pc, #80]	; (8001d6c <SystemInit+0x5c>)
 8001d1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001d24:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <SystemInit+0x60>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a11      	ldr	r2, [pc, #68]	; (8001d70 <SystemInit+0x60>)
 8001d2a:	f043 0301 	orr.w	r3, r3, #1
 8001d2e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001d30:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <SystemInit+0x60>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001d36:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <SystemInit+0x60>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a0d      	ldr	r2, [pc, #52]	; (8001d70 <SystemInit+0x60>)
 8001d3c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001d40:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001d44:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001d46:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <SystemInit+0x60>)
 8001d48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d4c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d4e:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <SystemInit+0x60>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a07      	ldr	r2, [pc, #28]	; (8001d70 <SystemInit+0x60>)
 8001d54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d58:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <SystemInit+0x60>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	619a      	str	r2, [r3, #24]
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000ed00 	.word	0xe000ed00
 8001d70:	40021000 	.word	0x40021000

08001d74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d78:	f7ff ffca 	bl	8001d10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001d7c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001d7e:	e003      	b.n	8001d88 <LoopCopyDataInit>

08001d80 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001d80:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001d82:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001d84:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001d86:	3104      	adds	r1, #4

08001d88 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001d88:	480a      	ldr	r0, [pc, #40]	; (8001db4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001d8c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001d8e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001d90:	d3f6      	bcc.n	8001d80 <CopyDataInit>
	ldr	r2, =_sbss
 8001d92:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <LoopForever+0x12>)
	b	LoopFillZerobss
 8001d94:	e002      	b.n	8001d9c <LoopFillZerobss>

08001d96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001d96:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d98:	f842 3b04 	str.w	r3, [r2], #4

08001d9c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d9c:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <LoopForever+0x16>)
	cmp	r2, r3
 8001d9e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001da0:	d3f9      	bcc.n	8001d96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001da2:	f005 feed 	bl	8007b80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001da6:	f7fe ffdd 	bl	8000d64 <main>

08001daa <LoopForever>:

LoopForever:
    b LoopForever
 8001daa:	e7fe      	b.n	8001daa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001dac:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001db0:	08008b6c 	.word	0x08008b6c
	ldr	r0, =_sdata
 8001db4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001db8:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001dbc:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8001dc0:	200007a8 	.word	0x200007a8

08001dc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001dc4:	e7fe      	b.n	8001dc4 <ADC1_2_IRQHandler>

08001dc6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dd0:	2003      	movs	r0, #3
 8001dd2:	f000 f961 	bl	8002098 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	f000 f80e 	bl	8001df8 <HAL_InitTick>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d002      	beq.n	8001de8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	71fb      	strb	r3, [r7, #7]
 8001de6:	e001      	b.n	8001dec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001de8:	f7ff fc6c 	bl	80016c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dec:	79fb      	ldrb	r3, [r7, #7]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e00:	2300      	movs	r3, #0
 8001e02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e04:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <HAL_InitTick+0x6c>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d023      	beq.n	8001e54 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e0c:	4b16      	ldr	r3, [pc, #88]	; (8001e68 <HAL_InitTick+0x70>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <HAL_InitTick+0x6c>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	4619      	mov	r1, r3
 8001e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 f96d 	bl	8002102 <HAL_SYSTICK_Config>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10f      	bne.n	8001e4e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b0f      	cmp	r3, #15
 8001e32:	d809      	bhi.n	8001e48 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e34:	2200      	movs	r2, #0
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	f04f 30ff 	mov.w	r0, #4294967295
 8001e3c:	f000 f937 	bl	80020ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e40:	4a0a      	ldr	r2, [pc, #40]	; (8001e6c <HAL_InitTick+0x74>)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	e007      	b.n	8001e58 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	73fb      	strb	r3, [r7, #15]
 8001e4c:	e004      	b.n	8001e58 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	73fb      	strb	r3, [r7, #15]
 8001e52:	e001      	b.n	8001e58 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	2000000c 	.word	0x2000000c
 8001e68:	20000004 	.word	0x20000004
 8001e6c:	20000008 	.word	0x20000008

08001e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_IncTick+0x20>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_IncTick+0x24>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4413      	add	r3, r2
 8001e80:	4a04      	ldr	r2, [pc, #16]	; (8001e94 <HAL_IncTick+0x24>)
 8001e82:	6013      	str	r3, [r2, #0]
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	2000000c 	.word	0x2000000c
 8001e94:	20000794 	.word	0x20000794

08001e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e9c:	4b03      	ldr	r3, [pc, #12]	; (8001eac <HAL_GetTick+0x14>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	20000794 	.word	0x20000794

08001eb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eb8:	f7ff ffee 	bl	8001e98 <HAL_GetTick>
 8001ebc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec8:	d005      	beq.n	8001ed6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001eca:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <HAL_Delay+0x44>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ed6:	bf00      	nop
 8001ed8:	f7ff ffde 	bl	8001e98 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d8f7      	bhi.n	8001ed8 <HAL_Delay+0x28>
  {
  }
}
 8001ee8:	bf00      	nop
 8001eea:	bf00      	nop
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	2000000c 	.word	0x2000000c

08001ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f08:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <__NVIC_SetPriorityGrouping+0x44>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f14:	4013      	ands	r3, r2
 8001f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f2a:	4a04      	ldr	r2, [pc, #16]	; (8001f3c <__NVIC_SetPriorityGrouping+0x44>)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	60d3      	str	r3, [r2, #12]
}
 8001f30:	bf00      	nop
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__NVIC_GetPriorityGrouping+0x18>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	f003 0307 	and.w	r3, r3, #7
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	db0b      	blt.n	8001f86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	f003 021f 	and.w	r2, r3, #31
 8001f74:	4907      	ldr	r1, [pc, #28]	; (8001f94 <__NVIC_EnableIRQ+0x38>)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	095b      	lsrs	r3, r3, #5
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	e000e100 	.word	0xe000e100

08001f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	6039      	str	r1, [r7, #0]
 8001fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	db0a      	blt.n	8001fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	490c      	ldr	r1, [pc, #48]	; (8001fe4 <__NVIC_SetPriority+0x4c>)
 8001fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb6:	0112      	lsls	r2, r2, #4
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	440b      	add	r3, r1
 8001fbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fc0:	e00a      	b.n	8001fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	4908      	ldr	r1, [pc, #32]	; (8001fe8 <__NVIC_SetPriority+0x50>)
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	3b04      	subs	r3, #4
 8001fd0:	0112      	lsls	r2, r2, #4
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	761a      	strb	r2, [r3, #24]
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000e100 	.word	0xe000e100
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b089      	sub	sp, #36	; 0x24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	f1c3 0307 	rsb	r3, r3, #7
 8002006:	2b04      	cmp	r3, #4
 8002008:	bf28      	it	cs
 800200a:	2304      	movcs	r3, #4
 800200c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	3304      	adds	r3, #4
 8002012:	2b06      	cmp	r3, #6
 8002014:	d902      	bls.n	800201c <NVIC_EncodePriority+0x30>
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	3b03      	subs	r3, #3
 800201a:	e000      	b.n	800201e <NVIC_EncodePriority+0x32>
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002020:	f04f 32ff 	mov.w	r2, #4294967295
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43da      	mvns	r2, r3
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	401a      	ands	r2, r3
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002034:	f04f 31ff 	mov.w	r1, #4294967295
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	fa01 f303 	lsl.w	r3, r1, r3
 800203e:	43d9      	mvns	r1, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002044:	4313      	orrs	r3, r2
         );
}
 8002046:	4618      	mov	r0, r3
 8002048:	3724      	adds	r7, #36	; 0x24
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3b01      	subs	r3, #1
 8002060:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002064:	d301      	bcc.n	800206a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002066:	2301      	movs	r3, #1
 8002068:	e00f      	b.n	800208a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800206a:	4a0a      	ldr	r2, [pc, #40]	; (8002094 <SysTick_Config+0x40>)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3b01      	subs	r3, #1
 8002070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002072:	210f      	movs	r1, #15
 8002074:	f04f 30ff 	mov.w	r0, #4294967295
 8002078:	f7ff ff8e 	bl	8001f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <SysTick_Config+0x40>)
 800207e:	2200      	movs	r2, #0
 8002080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002082:	4b04      	ldr	r3, [pc, #16]	; (8002094 <SysTick_Config+0x40>)
 8002084:	2207      	movs	r2, #7
 8002086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	e000e010 	.word	0xe000e010

08002098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f7ff ff29 	bl	8001ef8 <__NVIC_SetPriorityGrouping>
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b086      	sub	sp, #24
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	4603      	mov	r3, r0
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	607a      	str	r2, [r7, #4]
 80020ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020c0:	f7ff ff3e 	bl	8001f40 <__NVIC_GetPriorityGrouping>
 80020c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	68b9      	ldr	r1, [r7, #8]
 80020ca:	6978      	ldr	r0, [r7, #20]
 80020cc:	f7ff ff8e 	bl	8001fec <NVIC_EncodePriority>
 80020d0:	4602      	mov	r2, r0
 80020d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020d6:	4611      	mov	r1, r2
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff ff5d 	bl	8001f98 <__NVIC_SetPriority>
}
 80020de:	bf00      	nop
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b082      	sub	sp, #8
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	4603      	mov	r3, r0
 80020ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ff31 	bl	8001f5c <__NVIC_EnableIRQ>
}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff ffa2 	bl	8002054 <SysTick_Config>
 8002110:	4603      	mov	r3, r0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e0ac      	b.n	8002288 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f000 f8b2 	bl	800229c <DFSDM_GetChannelFromInstance>
 8002138:	4603      	mov	r3, r0
 800213a:	4a55      	ldr	r2, [pc, #340]	; (8002290 <HAL_DFSDM_ChannelInit+0x174>)
 800213c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e09f      	b.n	8002288 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7ff fadf 	bl	800170c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800214e:	4b51      	ldr	r3, [pc, #324]	; (8002294 <HAL_DFSDM_ChannelInit+0x178>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	3301      	adds	r3, #1
 8002154:	4a4f      	ldr	r2, [pc, #316]	; (8002294 <HAL_DFSDM_ChannelInit+0x178>)
 8002156:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002158:	4b4e      	ldr	r3, [pc, #312]	; (8002294 <HAL_DFSDM_ChannelInit+0x178>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d125      	bne.n	80021ac <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002160:	4b4d      	ldr	r3, [pc, #308]	; (8002298 <HAL_DFSDM_ChannelInit+0x17c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a4c      	ldr	r2, [pc, #304]	; (8002298 <HAL_DFSDM_ChannelInit+0x17c>)
 8002166:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800216a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800216c:	4b4a      	ldr	r3, [pc, #296]	; (8002298 <HAL_DFSDM_ChannelInit+0x17c>)
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	4948      	ldr	r1, [pc, #288]	; (8002298 <HAL_DFSDM_ChannelInit+0x17c>)
 8002176:	4313      	orrs	r3, r2
 8002178:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800217a:	4b47      	ldr	r3, [pc, #284]	; (8002298 <HAL_DFSDM_ChannelInit+0x17c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a46      	ldr	r2, [pc, #280]	; (8002298 <HAL_DFSDM_ChannelInit+0x17c>)
 8002180:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002184:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	791b      	ldrb	r3, [r3, #4]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d108      	bne.n	80021a0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800218e:	4b42      	ldr	r3, [pc, #264]	; (8002298 <HAL_DFSDM_ChannelInit+0x17c>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	3b01      	subs	r3, #1
 8002198:	041b      	lsls	r3, r3, #16
 800219a:	493f      	ldr	r1, [pc, #252]	; (8002298 <HAL_DFSDM_ChannelInit+0x17c>)
 800219c:	4313      	orrs	r3, r2
 800219e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80021a0:	4b3d      	ldr	r3, [pc, #244]	; (8002298 <HAL_DFSDM_ChannelInit+0x17c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a3c      	ldr	r2, [pc, #240]	; (8002298 <HAL_DFSDM_ChannelInit+0x17c>)
 80021a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021aa:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80021ba:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6819      	ldr	r1, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80021ca:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80021d0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 020f 	bic.w	r2, r2, #15
 80021e8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6819      	ldr	r1, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80021f8:	431a      	orrs	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002210:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6899      	ldr	r1, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002220:	3b01      	subs	r3, #1
 8002222:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002224:	431a      	orrs	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f002 0207 	and.w	r2, r2, #7
 800223c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6859      	ldr	r1, [r3, #4]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002248:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002250:	431a      	orrs	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002268:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f000 f810 	bl	800229c <DFSDM_GetChannelFromInstance>
 800227c:	4602      	mov	r2, r0
 800227e:	4904      	ldr	r1, [pc, #16]	; (8002290 <HAL_DFSDM_ChannelInit+0x174>)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	200000a0 	.word	0x200000a0
 8002294:	2000009c 	.word	0x2000009c
 8002298:	40016000 	.word	0x40016000

0800229c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a1c      	ldr	r2, [pc, #112]	; (8002318 <DFSDM_GetChannelFromInstance+0x7c>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d102      	bne.n	80022b2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	e02b      	b.n	800230a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a19      	ldr	r2, [pc, #100]	; (800231c <DFSDM_GetChannelFromInstance+0x80>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d102      	bne.n	80022c0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80022ba:	2301      	movs	r3, #1
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	e024      	b.n	800230a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a17      	ldr	r2, [pc, #92]	; (8002320 <DFSDM_GetChannelFromInstance+0x84>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d102      	bne.n	80022ce <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80022c8:	2302      	movs	r3, #2
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	e01d      	b.n	800230a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a14      	ldr	r2, [pc, #80]	; (8002324 <DFSDM_GetChannelFromInstance+0x88>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d102      	bne.n	80022dc <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80022d6:	2304      	movs	r3, #4
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	e016      	b.n	800230a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a12      	ldr	r2, [pc, #72]	; (8002328 <DFSDM_GetChannelFromInstance+0x8c>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d102      	bne.n	80022ea <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80022e4:	2305      	movs	r3, #5
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	e00f      	b.n	800230a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a0f      	ldr	r2, [pc, #60]	; (800232c <DFSDM_GetChannelFromInstance+0x90>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d102      	bne.n	80022f8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80022f2:	2306      	movs	r3, #6
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	e008      	b.n	800230a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a0d      	ldr	r2, [pc, #52]	; (8002330 <DFSDM_GetChannelFromInstance+0x94>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d102      	bne.n	8002306 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002300:	2307      	movs	r3, #7
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	e001      	b.n	800230a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002306:	2303      	movs	r3, #3
 8002308:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800230a:	68fb      	ldr	r3, [r7, #12]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	40016000 	.word	0x40016000
 800231c:	40016020 	.word	0x40016020
 8002320:	40016040 	.word	0x40016040
 8002324:	40016080 	.word	0x40016080
 8002328:	400160a0 	.word	0x400160a0
 800232c:	400160c0 	.word	0x400160c0
 8002330:	400160e0 	.word	0x400160e0

08002334 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e098      	b.n	8002478 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	461a      	mov	r2, r3
 800234c:	4b4d      	ldr	r3, [pc, #308]	; (8002484 <HAL_DMA_Init+0x150>)
 800234e:	429a      	cmp	r2, r3
 8002350:	d80f      	bhi.n	8002372 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	461a      	mov	r2, r3
 8002358:	4b4b      	ldr	r3, [pc, #300]	; (8002488 <HAL_DMA_Init+0x154>)
 800235a:	4413      	add	r3, r2
 800235c:	4a4b      	ldr	r2, [pc, #300]	; (800248c <HAL_DMA_Init+0x158>)
 800235e:	fba2 2303 	umull	r2, r3, r2, r3
 8002362:	091b      	lsrs	r3, r3, #4
 8002364:	009a      	lsls	r2, r3, #2
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a48      	ldr	r2, [pc, #288]	; (8002490 <HAL_DMA_Init+0x15c>)
 800236e:	641a      	str	r2, [r3, #64]	; 0x40
 8002370:	e00e      	b.n	8002390 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	461a      	mov	r2, r3
 8002378:	4b46      	ldr	r3, [pc, #280]	; (8002494 <HAL_DMA_Init+0x160>)
 800237a:	4413      	add	r3, r2
 800237c:	4a43      	ldr	r2, [pc, #268]	; (800248c <HAL_DMA_Init+0x158>)
 800237e:	fba2 2303 	umull	r2, r3, r2, r3
 8002382:	091b      	lsrs	r3, r3, #4
 8002384:	009a      	lsls	r2, r3, #2
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a42      	ldr	r2, [pc, #264]	; (8002498 <HAL_DMA_Init+0x164>)
 800238e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2202      	movs	r2, #2
 8002394:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80023a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80023b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023ea:	d039      	beq.n	8002460 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	4a27      	ldr	r2, [pc, #156]	; (8002490 <HAL_DMA_Init+0x15c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d11a      	bne.n	800242c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80023f6:	4b29      	ldr	r3, [pc, #164]	; (800249c <HAL_DMA_Init+0x168>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fe:	f003 031c 	and.w	r3, r3, #28
 8002402:	210f      	movs	r1, #15
 8002404:	fa01 f303 	lsl.w	r3, r1, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	4924      	ldr	r1, [pc, #144]	; (800249c <HAL_DMA_Init+0x168>)
 800240c:	4013      	ands	r3, r2
 800240e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002410:	4b22      	ldr	r3, [pc, #136]	; (800249c <HAL_DMA_Init+0x168>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6859      	ldr	r1, [r3, #4]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241c:	f003 031c 	and.w	r3, r3, #28
 8002420:	fa01 f303 	lsl.w	r3, r1, r3
 8002424:	491d      	ldr	r1, [pc, #116]	; (800249c <HAL_DMA_Init+0x168>)
 8002426:	4313      	orrs	r3, r2
 8002428:	600b      	str	r3, [r1, #0]
 800242a:	e019      	b.n	8002460 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800242c:	4b1c      	ldr	r3, [pc, #112]	; (80024a0 <HAL_DMA_Init+0x16c>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002434:	f003 031c 	and.w	r3, r3, #28
 8002438:	210f      	movs	r1, #15
 800243a:	fa01 f303 	lsl.w	r3, r1, r3
 800243e:	43db      	mvns	r3, r3
 8002440:	4917      	ldr	r1, [pc, #92]	; (80024a0 <HAL_DMA_Init+0x16c>)
 8002442:	4013      	ands	r3, r2
 8002444:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002446:	4b16      	ldr	r3, [pc, #88]	; (80024a0 <HAL_DMA_Init+0x16c>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6859      	ldr	r1, [r3, #4]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002452:	f003 031c 	and.w	r3, r3, #28
 8002456:	fa01 f303 	lsl.w	r3, r1, r3
 800245a:	4911      	ldr	r1, [pc, #68]	; (80024a0 <HAL_DMA_Init+0x16c>)
 800245c:	4313      	orrs	r3, r2
 800245e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	40020407 	.word	0x40020407
 8002488:	bffdfff8 	.word	0xbffdfff8
 800248c:	cccccccd 	.word	0xcccccccd
 8002490:	40020000 	.word	0x40020000
 8002494:	bffdfbf8 	.word	0xbffdfbf8
 8002498:	40020400 	.word	0x40020400
 800249c:	400200a8 	.word	0x400200a8
 80024a0:	400204a8 	.word	0x400204a8

080024a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
 80024b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d101      	bne.n	80024c4 <HAL_DMA_Start_IT+0x20>
 80024c0:	2302      	movs	r3, #2
 80024c2:	e04b      	b.n	800255c <HAL_DMA_Start_IT+0xb8>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d13a      	bne.n	800254e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2202      	movs	r2, #2
 80024dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 0201 	bic.w	r2, r2, #1
 80024f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	68b9      	ldr	r1, [r7, #8]
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f000 f92f 	bl	8002760 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	2b00      	cmp	r3, #0
 8002508:	d008      	beq.n	800251c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f042 020e 	orr.w	r2, r2, #14
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	e00f      	b.n	800253c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 0204 	bic.w	r2, r2, #4
 800252a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f042 020a 	orr.w	r2, r2, #10
 800253a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 0201 	orr.w	r2, r2, #1
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	e005      	b.n	800255a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002556:	2302      	movs	r3, #2
 8002558:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800255a:	7dfb      	ldrb	r3, [r7, #23]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800256c:	2300      	movs	r3, #0
 800256e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d005      	beq.n	8002588 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2204      	movs	r2, #4
 8002580:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	73fb      	strb	r3, [r7, #15]
 8002586:	e029      	b.n	80025dc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 020e 	bic.w	r2, r2, #14
 8002596:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 0201 	bic.w	r2, r2, #1
 80025a6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ac:	f003 021c 	and.w	r2, r3, #28
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	2101      	movs	r1, #1
 80025b6:	fa01 f202 	lsl.w	r2, r1, r2
 80025ba:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	4798      	blx	r3
    }
  }
  return status;
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b084      	sub	sp, #16
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002602:	f003 031c 	and.w	r3, r3, #28
 8002606:	2204      	movs	r2, #4
 8002608:	409a      	lsls	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4013      	ands	r3, r2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d026      	beq.n	8002660 <HAL_DMA_IRQHandler+0x7a>
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	d021      	beq.n	8002660 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0320 	and.w	r3, r3, #32
 8002626:	2b00      	cmp	r3, #0
 8002628:	d107      	bne.n	800263a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0204 	bic.w	r2, r2, #4
 8002638:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263e:	f003 021c 	and.w	r2, r3, #28
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	2104      	movs	r1, #4
 8002648:	fa01 f202 	lsl.w	r2, r1, r2
 800264c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	2b00      	cmp	r3, #0
 8002654:	d071      	beq.n	800273a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800265e:	e06c      	b.n	800273a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002664:	f003 031c 	and.w	r3, r3, #28
 8002668:	2202      	movs	r2, #2
 800266a:	409a      	lsls	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4013      	ands	r3, r2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d02e      	beq.n	80026d2 <HAL_DMA_IRQHandler+0xec>
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d029      	beq.n	80026d2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0320 	and.w	r3, r3, #32
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10b      	bne.n	80026a4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f022 020a 	bic.w	r2, r2, #10
 800269a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a8:	f003 021c 	and.w	r2, r3, #28
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b0:	2102      	movs	r1, #2
 80026b2:	fa01 f202 	lsl.w	r2, r1, r2
 80026b6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d038      	beq.n	800273a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80026d0:	e033      	b.n	800273a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	f003 031c 	and.w	r3, r3, #28
 80026da:	2208      	movs	r2, #8
 80026dc:	409a      	lsls	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	4013      	ands	r3, r2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d02a      	beq.n	800273c <HAL_DMA_IRQHandler+0x156>
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	f003 0308 	and.w	r3, r3, #8
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d025      	beq.n	800273c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 020e 	bic.w	r2, r2, #14
 80026fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002704:	f003 021c 	and.w	r2, r3, #28
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	2101      	movs	r1, #1
 800270e:	fa01 f202 	lsl.w	r2, r1, r2
 8002712:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800272e:	2b00      	cmp	r3, #0
 8002730:	d004      	beq.n	800273c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800273a:	bf00      	nop
 800273c:	bf00      	nop
}
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002752:	b2db      	uxtb	r3, r3
}
 8002754:	4618      	mov	r0, r3
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
 800276c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002772:	f003 021c 	and.w	r2, r3, #28
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	2101      	movs	r1, #1
 800277c:	fa01 f202 	lsl.w	r2, r1, r2
 8002780:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	2b10      	cmp	r3, #16
 8002790:	d108      	bne.n	80027a4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80027a2:	e007      	b.n	80027b4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	60da      	str	r2, [r3, #12]
}
 80027b4:	bf00      	nop
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b087      	sub	sp, #28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027ca:	2300      	movs	r3, #0
 80027cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027ce:	e17f      	b.n	8002ad0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	2101      	movs	r1, #1
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	fa01 f303 	lsl.w	r3, r1, r3
 80027dc:	4013      	ands	r3, r2
 80027de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 8171 	beq.w	8002aca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d00b      	beq.n	8002808 <HAL_GPIO_Init+0x48>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d007      	beq.n	8002808 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027fc:	2b11      	cmp	r3, #17
 80027fe:	d003      	beq.n	8002808 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	2b12      	cmp	r3, #18
 8002806:	d130      	bne.n	800286a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	2203      	movs	r2, #3
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	43db      	mvns	r3, r3
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	4013      	ands	r3, r2
 800281e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	68da      	ldr	r2, [r3, #12]
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	4313      	orrs	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800283e:	2201      	movs	r2, #1
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43db      	mvns	r3, r3
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4013      	ands	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	091b      	lsrs	r3, r3, #4
 8002854:	f003 0201 	and.w	r2, r3, #1
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	4313      	orrs	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	2b03      	cmp	r3, #3
 8002874:	d118      	bne.n	80028a8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800287c:	2201      	movs	r2, #1
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	4013      	ands	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	08db      	lsrs	r3, r3, #3
 8002892:	f003 0201 	and.w	r2, r3, #1
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	4313      	orrs	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	2203      	movs	r2, #3
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	4013      	ands	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d003      	beq.n	80028e8 <HAL_GPIO_Init+0x128>
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2b12      	cmp	r3, #18
 80028e6:	d123      	bne.n	8002930 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	08da      	lsrs	r2, r3, #3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3208      	adds	r2, #8
 80028f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	220f      	movs	r2, #15
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	4013      	ands	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	691a      	ldr	r2, [r3, #16]
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	4313      	orrs	r3, r2
 8002920:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	08da      	lsrs	r2, r3, #3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3208      	adds	r2, #8
 800292a:	6939      	ldr	r1, [r7, #16]
 800292c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	2203      	movs	r2, #3
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	4013      	ands	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 0203 	and.w	r2, r3, #3
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	4313      	orrs	r3, r2
 800295c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 80ac 	beq.w	8002aca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002972:	4b5f      	ldr	r3, [pc, #380]	; (8002af0 <HAL_GPIO_Init+0x330>)
 8002974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002976:	4a5e      	ldr	r2, [pc, #376]	; (8002af0 <HAL_GPIO_Init+0x330>)
 8002978:	f043 0301 	orr.w	r3, r3, #1
 800297c:	6613      	str	r3, [r2, #96]	; 0x60
 800297e:	4b5c      	ldr	r3, [pc, #368]	; (8002af0 <HAL_GPIO_Init+0x330>)
 8002980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	60bb      	str	r3, [r7, #8]
 8002988:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800298a:	4a5a      	ldr	r2, [pc, #360]	; (8002af4 <HAL_GPIO_Init+0x334>)
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	089b      	lsrs	r3, r3, #2
 8002990:	3302      	adds	r3, #2
 8002992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002996:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	220f      	movs	r2, #15
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43db      	mvns	r3, r3
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	4013      	ands	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029b4:	d025      	beq.n	8002a02 <HAL_GPIO_Init+0x242>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a4f      	ldr	r2, [pc, #316]	; (8002af8 <HAL_GPIO_Init+0x338>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d01f      	beq.n	80029fe <HAL_GPIO_Init+0x23e>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a4e      	ldr	r2, [pc, #312]	; (8002afc <HAL_GPIO_Init+0x33c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d019      	beq.n	80029fa <HAL_GPIO_Init+0x23a>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a4d      	ldr	r2, [pc, #308]	; (8002b00 <HAL_GPIO_Init+0x340>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d013      	beq.n	80029f6 <HAL_GPIO_Init+0x236>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a4c      	ldr	r2, [pc, #304]	; (8002b04 <HAL_GPIO_Init+0x344>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d00d      	beq.n	80029f2 <HAL_GPIO_Init+0x232>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a4b      	ldr	r2, [pc, #300]	; (8002b08 <HAL_GPIO_Init+0x348>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d007      	beq.n	80029ee <HAL_GPIO_Init+0x22e>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a4a      	ldr	r2, [pc, #296]	; (8002b0c <HAL_GPIO_Init+0x34c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d101      	bne.n	80029ea <HAL_GPIO_Init+0x22a>
 80029e6:	2306      	movs	r3, #6
 80029e8:	e00c      	b.n	8002a04 <HAL_GPIO_Init+0x244>
 80029ea:	2307      	movs	r3, #7
 80029ec:	e00a      	b.n	8002a04 <HAL_GPIO_Init+0x244>
 80029ee:	2305      	movs	r3, #5
 80029f0:	e008      	b.n	8002a04 <HAL_GPIO_Init+0x244>
 80029f2:	2304      	movs	r3, #4
 80029f4:	e006      	b.n	8002a04 <HAL_GPIO_Init+0x244>
 80029f6:	2303      	movs	r3, #3
 80029f8:	e004      	b.n	8002a04 <HAL_GPIO_Init+0x244>
 80029fa:	2302      	movs	r3, #2
 80029fc:	e002      	b.n	8002a04 <HAL_GPIO_Init+0x244>
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <HAL_GPIO_Init+0x244>
 8002a02:	2300      	movs	r3, #0
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	f002 0203 	and.w	r2, r2, #3
 8002a0a:	0092      	lsls	r2, r2, #2
 8002a0c:	4093      	lsls	r3, r2
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a14:	4937      	ldr	r1, [pc, #220]	; (8002af4 <HAL_GPIO_Init+0x334>)
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	089b      	lsrs	r3, r3, #2
 8002a1a:	3302      	adds	r3, #2
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a22:	4b3b      	ldr	r3, [pc, #236]	; (8002b10 <HAL_GPIO_Init+0x350>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a46:	4a32      	ldr	r2, [pc, #200]	; (8002b10 <HAL_GPIO_Init+0x350>)
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002a4c:	4b30      	ldr	r3, [pc, #192]	; (8002b10 <HAL_GPIO_Init+0x350>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	43db      	mvns	r3, r3
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a70:	4a27      	ldr	r2, [pc, #156]	; (8002b10 <HAL_GPIO_Init+0x350>)
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a76:	4b26      	ldr	r3, [pc, #152]	; (8002b10 <HAL_GPIO_Init+0x350>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	4013      	ands	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a9a:	4a1d      	ldr	r2, [pc, #116]	; (8002b10 <HAL_GPIO_Init+0x350>)
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002aa0:	4b1b      	ldr	r3, [pc, #108]	; (8002b10 <HAL_GPIO_Init+0x350>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	4013      	ands	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ac4:	4a12      	ldr	r2, [pc, #72]	; (8002b10 <HAL_GPIO_Init+0x350>)
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	3301      	adds	r3, #1
 8002ace:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f47f ae78 	bne.w	80027d0 <HAL_GPIO_Init+0x10>
  }
}
 8002ae0:	bf00      	nop
 8002ae2:	bf00      	nop
 8002ae4:	371c      	adds	r7, #28
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40010000 	.word	0x40010000
 8002af8:	48000400 	.word	0x48000400
 8002afc:	48000800 	.word	0x48000800
 8002b00:	48000c00 	.word	0x48000c00
 8002b04:	48001000 	.word	0x48001000
 8002b08:	48001400 	.word	0x48001400
 8002b0c:	48001800 	.word	0x48001800
 8002b10:	40010400 	.word	0x40010400

08002b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	807b      	strh	r3, [r7, #2]
 8002b20:	4613      	mov	r3, r2
 8002b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b24:	787b      	ldrb	r3, [r7, #1]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b2a:	887a      	ldrh	r2, [r7, #2]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b30:	e002      	b.n	8002b38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b32:	887a      	ldrh	r2, [r7, #2]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b56:	887a      	ldrh	r2, [r7, #2]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	041a      	lsls	r2, r3, #16
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	43d9      	mvns	r1, r3
 8002b62:	887b      	ldrh	r3, [r7, #2]
 8002b64:	400b      	ands	r3, r1
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	619a      	str	r2, [r3, #24]
}
 8002b6c:	bf00      	nop
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b82:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b84:	695a      	ldr	r2, [r3, #20]
 8002b86:	88fb      	ldrh	r3, [r7, #6]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d006      	beq.n	8002b9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b8e:	4a05      	ldr	r2, [pc, #20]	; (8002ba4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b90:	88fb      	ldrh	r3, [r7, #6]
 8002b92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b94:	88fb      	ldrh	r3, [r7, #6]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 f806 	bl	8002ba8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b9c:	bf00      	nop
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40010400 	.word	0x40010400

08002ba8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b082      	sub	sp, #8
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e081      	b.n	8002cd4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d106      	bne.n	8002bea <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7fe fdd9 	bl	800179c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2224      	movs	r2, #36	; 0x24
 8002bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 0201 	bic.w	r2, r2, #1
 8002c00:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c0e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689a      	ldr	r2, [r3, #8]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c1e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d107      	bne.n	8002c38 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c34:	609a      	str	r2, [r3, #8]
 8002c36:	e006      	b.n	8002c46 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c44:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d104      	bne.n	8002c58 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c56:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6812      	ldr	r2, [r2, #0]
 8002c62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c6a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c7a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	ea42 0103 	orr.w	r1, r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	021a      	lsls	r2, r3, #8
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69d9      	ldr	r1, [r3, #28]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1a      	ldr	r2, [r3, #32]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f042 0201 	orr.w	r2, r2, #1
 8002cb4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b088      	sub	sp, #32
 8002ce0:	af02      	add	r7, sp, #8
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	607a      	str	r2, [r7, #4]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	460b      	mov	r3, r1
 8002cea:	817b      	strh	r3, [r7, #10]
 8002cec:	4613      	mov	r3, r2
 8002cee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b20      	cmp	r3, #32
 8002cfa:	f040 80da 	bne.w	8002eb2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_I2C_Master_Transmit+0x30>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e0d3      	b.n	8002eb4 <HAL_I2C_Master_Transmit+0x1d8>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d14:	f7ff f8c0 	bl	8001e98 <HAL_GetTick>
 8002d18:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	2319      	movs	r3, #25
 8002d20:	2201      	movs	r2, #1
 8002d22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f001 fe1e 	bl	8004968 <I2C_WaitOnFlagUntilTimeout>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e0be      	b.n	8002eb4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2221      	movs	r2, #33	; 0x21
 8002d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2210      	movs	r2, #16
 8002d42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	893a      	ldrh	r2, [r7, #8]
 8002d56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	2bff      	cmp	r3, #255	; 0xff
 8002d66:	d90e      	bls.n	8002d86 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	22ff      	movs	r2, #255	; 0xff
 8002d6c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	8979      	ldrh	r1, [r7, #10]
 8002d76:	4b51      	ldr	r3, [pc, #324]	; (8002ebc <HAL_I2C_Master_Transmit+0x1e0>)
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f001 ff80 	bl	8004c84 <I2C_TransferConfig>
 8002d84:	e06c      	b.n	8002e60 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	8979      	ldrh	r1, [r7, #10]
 8002d98:	4b48      	ldr	r3, [pc, #288]	; (8002ebc <HAL_I2C_Master_Transmit+0x1e0>)
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f001 ff6f 	bl	8004c84 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002da6:	e05b      	b.n	8002e60 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	6a39      	ldr	r1, [r7, #32]
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f001 fe1b 	bl	80049e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e07b      	b.n	8002eb4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	781a      	ldrb	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	1c5a      	adds	r2, r3, #1
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de4:	3b01      	subs	r3, #1
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d034      	beq.n	8002e60 <HAL_I2C_Master_Transmit+0x184>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d130      	bne.n	8002e60 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	2200      	movs	r2, #0
 8002e06:	2180      	movs	r1, #128	; 0x80
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f001 fdad 	bl	8004968 <I2C_WaitOnFlagUntilTimeout>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e04d      	b.n	8002eb4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	2bff      	cmp	r3, #255	; 0xff
 8002e20:	d90e      	bls.n	8002e40 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	22ff      	movs	r2, #255	; 0xff
 8002e26:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	8979      	ldrh	r1, [r7, #10]
 8002e30:	2300      	movs	r3, #0
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f001 ff23 	bl	8004c84 <I2C_TransferConfig>
 8002e3e:	e00f      	b.n	8002e60 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	8979      	ldrh	r1, [r7, #10]
 8002e52:	2300      	movs	r3, #0
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f001 ff12 	bl	8004c84 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d19e      	bne.n	8002da8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	6a39      	ldr	r1, [r7, #32]
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f001 fdfa 	bl	8004a68 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e01a      	b.n	8002eb4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2220      	movs	r2, #32
 8002e84:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6859      	ldr	r1, [r3, #4]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <HAL_I2C_Master_Transmit+0x1e4>)
 8002e92:	400b      	ands	r3, r1
 8002e94:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	e000      	b.n	8002eb4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002eb2:	2302      	movs	r3, #2
  }
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	80002000 	.word	0x80002000
 8002ec0:	fe00e800 	.word	0xfe00e800

08002ec4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b088      	sub	sp, #32
 8002ec8:	af02      	add	r7, sp, #8
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	607a      	str	r2, [r7, #4]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	817b      	strh	r3, [r7, #10]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b20      	cmp	r3, #32
 8002ee2:	f040 80db 	bne.w	800309c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d101      	bne.n	8002ef4 <HAL_I2C_Master_Receive+0x30>
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	e0d4      	b.n	800309e <HAL_I2C_Master_Receive+0x1da>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002efc:	f7fe ffcc 	bl	8001e98 <HAL_GetTick>
 8002f00:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	2319      	movs	r3, #25
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f001 fd2a 	bl	8004968 <I2C_WaitOnFlagUntilTimeout>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e0bf      	b.n	800309e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2222      	movs	r2, #34	; 0x22
 8002f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2210      	movs	r2, #16
 8002f2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	893a      	ldrh	r2, [r7, #8]
 8002f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	2bff      	cmp	r3, #255	; 0xff
 8002f4e:	d90e      	bls.n	8002f6e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	22ff      	movs	r2, #255	; 0xff
 8002f54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	8979      	ldrh	r1, [r7, #10]
 8002f5e:	4b52      	ldr	r3, [pc, #328]	; (80030a8 <HAL_I2C_Master_Receive+0x1e4>)
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f001 fe8c 	bl	8004c84 <I2C_TransferConfig>
 8002f6c:	e06d      	b.n	800304a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	8979      	ldrh	r1, [r7, #10]
 8002f80:	4b49      	ldr	r3, [pc, #292]	; (80030a8 <HAL_I2C_Master_Receive+0x1e4>)
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f001 fe7b 	bl	8004c84 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002f8e:	e05c      	b.n	800304a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	6a39      	ldr	r1, [r7, #32]
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f001 fda3 	bl	8004ae0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e07c      	b.n	800309e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d034      	beq.n	800304a <HAL_I2C_Master_Receive+0x186>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d130      	bne.n	800304a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	9300      	str	r3, [sp, #0]
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	2180      	movs	r1, #128	; 0x80
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f001 fcb8 	bl	8004968 <I2C_WaitOnFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e04d      	b.n	800309e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003006:	b29b      	uxth	r3, r3
 8003008:	2bff      	cmp	r3, #255	; 0xff
 800300a:	d90e      	bls.n	800302a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	22ff      	movs	r2, #255	; 0xff
 8003010:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003016:	b2da      	uxtb	r2, r3
 8003018:	8979      	ldrh	r1, [r7, #10]
 800301a:	2300      	movs	r3, #0
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f001 fe2e 	bl	8004c84 <I2C_TransferConfig>
 8003028:	e00f      	b.n	800304a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302e:	b29a      	uxth	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003038:	b2da      	uxtb	r2, r3
 800303a:	8979      	ldrh	r1, [r7, #10]
 800303c:	2300      	movs	r3, #0
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f001 fe1d 	bl	8004c84 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304e:	b29b      	uxth	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	d19d      	bne.n	8002f90 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	6a39      	ldr	r1, [r7, #32]
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f001 fd05 	bl	8004a68 <I2C_WaitOnSTOPFlagUntilTimeout>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e01a      	b.n	800309e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2220      	movs	r2, #32
 800306e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6859      	ldr	r1, [r3, #4]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	4b0c      	ldr	r3, [pc, #48]	; (80030ac <HAL_I2C_Master_Receive+0x1e8>)
 800307c:	400b      	ands	r3, r1
 800307e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2220      	movs	r2, #32
 8003084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003098:	2300      	movs	r3, #0
 800309a:	e000      	b.n	800309e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800309c:	2302      	movs	r3, #2
  }
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	80002400 	.word	0x80002400
 80030ac:	fe00e800 	.word	0xfe00e800

080030b0 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af02      	add	r7, sp, #8
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	607a      	str	r2, [r7, #4]
 80030ba:	461a      	mov	r2, r3
 80030bc:	460b      	mov	r3, r1
 80030be:	817b      	strh	r3, [r7, #10]
 80030c0:	4613      	mov	r3, r2
 80030c2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b20      	cmp	r3, #32
 80030ce:	d153      	bne.n	8003178 <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030de:	d101      	bne.n	80030e4 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 80030e0:	2302      	movs	r3, #2
 80030e2:	e04a      	b.n	800317a <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d101      	bne.n	80030f2 <HAL_I2C_Master_Transmit_IT+0x42>
 80030ee:	2302      	movs	r3, #2
 80030f0:	e043      	b.n	800317a <HAL_I2C_Master_Transmit_IT+0xca>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2221      	movs	r2, #33	; 0x21
 80030fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2210      	movs	r2, #16
 8003106:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	893a      	ldrh	r2, [r7, #8]
 800311a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4a19      	ldr	r2, [pc, #100]	; (8003184 <HAL_I2C_Master_Transmit_IT+0xd4>)
 8003120:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	4a18      	ldr	r2, [pc, #96]	; (8003188 <HAL_I2C_Master_Transmit_IT+0xd8>)
 8003126:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312c:	b29b      	uxth	r3, r3
 800312e:	2bff      	cmp	r3, #255	; 0xff
 8003130:	d906      	bls.n	8003140 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	22ff      	movs	r2, #255	; 0xff
 8003136:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003138:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800313c:	617b      	str	r3, [r7, #20]
 800313e:	e007      	b.n	8003150 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800314a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800314e:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003154:	b2da      	uxtb	r2, r3
 8003156:	8979      	ldrh	r1, [r7, #10]
 8003158:	4b0c      	ldr	r3, [pc, #48]	; (800318c <HAL_I2C_Master_Transmit_IT+0xdc>)
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f001 fd90 	bl	8004c84 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800316c:	2101      	movs	r1, #1
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f001 fdb6 	bl	8004ce0 <I2C_Enable_IRQ>

    return HAL_OK;
 8003174:	2300      	movs	r3, #0
 8003176:	e000      	b.n	800317a <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003178:	2302      	movs	r3, #2
  }
}
 800317a:	4618      	mov	r0, r3
 800317c:	3718      	adds	r7, #24
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	ffff0000 	.word	0xffff0000
 8003188:	0800370d 	.word	0x0800370d
 800318c:	80002000 	.word	0x80002000

08003190 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b088      	sub	sp, #32
 8003194:	af02      	add	r7, sp, #8
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	607a      	str	r2, [r7, #4]
 800319a:	461a      	mov	r2, r3
 800319c:	460b      	mov	r3, r1
 800319e:	817b      	strh	r3, [r7, #10]
 80031a0:	4613      	mov	r3, r2
 80031a2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b20      	cmp	r3, #32
 80031ae:	d153      	bne.n	8003258 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031be:	d101      	bne.n	80031c4 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 80031c0:	2302      	movs	r3, #2
 80031c2:	e04a      	b.n	800325a <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d101      	bne.n	80031d2 <HAL_I2C_Master_Receive_IT+0x42>
 80031ce:	2302      	movs	r3, #2
 80031d0:	e043      	b.n	800325a <HAL_I2C_Master_Receive_IT+0xca>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2222      	movs	r2, #34	; 0x22
 80031de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2210      	movs	r2, #16
 80031e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	893a      	ldrh	r2, [r7, #8]
 80031fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	4a19      	ldr	r2, [pc, #100]	; (8003264 <HAL_I2C_Master_Receive_IT+0xd4>)
 8003200:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4a18      	ldr	r2, [pc, #96]	; (8003268 <HAL_I2C_Master_Receive_IT+0xd8>)
 8003206:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320c:	b29b      	uxth	r3, r3
 800320e:	2bff      	cmp	r3, #255	; 0xff
 8003210:	d906      	bls.n	8003220 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	22ff      	movs	r2, #255	; 0xff
 8003216:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003218:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800321c:	617b      	str	r3, [r7, #20]
 800321e:	e007      	b.n	8003230 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003224:	b29a      	uxth	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800322a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800322e:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003234:	b2da      	uxtb	r2, r3
 8003236:	8979      	ldrh	r1, [r7, #10]
 8003238:	4b0c      	ldr	r3, [pc, #48]	; (800326c <HAL_I2C_Master_Receive_IT+0xdc>)
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f001 fd20 	bl	8004c84 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800324c:	2102      	movs	r1, #2
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f001 fd46 	bl	8004ce0 <I2C_Enable_IRQ>

    return HAL_OK;
 8003254:	2300      	movs	r3, #0
 8003256:	e000      	b.n	800325a <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003258:	2302      	movs	r3, #2
  }
}
 800325a:	4618      	mov	r0, r3
 800325c:	3718      	adds	r7, #24
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	ffff0000 	.word	0xffff0000
 8003268:	0800370d 	.word	0x0800370d
 800326c:	80002400 	.word	0x80002400

08003270 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b088      	sub	sp, #32
 8003274:	af02      	add	r7, sp, #8
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	607a      	str	r2, [r7, #4]
 800327a:	461a      	mov	r2, r3
 800327c:	460b      	mov	r3, r1
 800327e:	817b      	strh	r3, [r7, #10]
 8003280:	4613      	mov	r3, r2
 8003282:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b20      	cmp	r3, #32
 800328e:	f040 80cd 	bne.w	800342c <HAL_I2C_Master_Transmit_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800329c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032a0:	d101      	bne.n	80032a6 <HAL_I2C_Master_Transmit_DMA+0x36>
    {
      return HAL_BUSY;
 80032a2:	2302      	movs	r3, #2
 80032a4:	e0c3      	b.n	800342e <HAL_I2C_Master_Transmit_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d101      	bne.n	80032b4 <HAL_I2C_Master_Transmit_DMA+0x44>
 80032b0:	2302      	movs	r3, #2
 80032b2:	e0bc      	b.n	800342e <HAL_I2C_Master_Transmit_DMA+0x1be>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2221      	movs	r2, #33	; 0x21
 80032c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2210      	movs	r2, #16
 80032c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	893a      	ldrh	r2, [r7, #8]
 80032dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	4a55      	ldr	r2, [pc, #340]	; (8003438 <HAL_I2C_Master_Transmit_DMA+0x1c8>)
 80032e2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4a55      	ldr	r2, [pc, #340]	; (800343c <HAL_I2C_Master_Transmit_DMA+0x1cc>)
 80032e8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	2bff      	cmp	r3, #255	; 0xff
 80032f2:	d906      	bls.n	8003302 <HAL_I2C_Master_Transmit_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	22ff      	movs	r2, #255	; 0xff
 80032f8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80032fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032fe:	617b      	str	r3, [r7, #20]
 8003300:	e007      	b.n	8003312 <HAL_I2C_Master_Transmit_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003306:	b29a      	uxth	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800330c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003310:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003316:	2b00      	cmp	r3, #0
 8003318:	d070      	beq.n	80033fc <HAL_I2C_Master_Transmit_DMA+0x18c>
    {
      if (hi2c->hdmatx != NULL)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331e:	2b00      	cmp	r3, #0
 8003320:	d020      	beq.n	8003364 <HAL_I2C_Master_Transmit_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003326:	4a46      	ldr	r2, [pc, #280]	; (8003440 <HAL_I2C_Master_Transmit_DMA+0x1d0>)
 8003328:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332e:	4a45      	ldr	r2, [pc, #276]	; (8003444 <HAL_I2C_Master_Transmit_DMA+0x1d4>)
 8003330:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003336:	2200      	movs	r2, #0
 8003338:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333e:	2200      	movs	r2, #0
 8003340:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	3328      	adds	r3, #40	; 0x28
 800334e:	461a      	mov	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003354:	f7ff f8a6 	bl	80024a4 <HAL_DMA_Start_IT>
 8003358:	4603      	mov	r3, r0
 800335a:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800335c:	7cfb      	ldrb	r3, [r7, #19]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d138      	bne.n	80033d4 <HAL_I2C_Master_Transmit_DMA+0x164>
 8003362:	e013      	b.n	800338c <HAL_I2C_Master_Transmit_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2220      	movs	r2, #32
 8003368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003378:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e050      	b.n	800342e <HAL_I2C_Master_Transmit_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003390:	b2da      	uxtb	r2, r3
 8003392:	8979      	ldrh	r1, [r7, #10]
 8003394:	4b2c      	ldr	r3, [pc, #176]	; (8003448 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f001 fc72 	bl	8004c84 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80033ba:	2110      	movs	r1, #16
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f001 fc8f 	bl	8004ce0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	e029      	b.n	8003428 <HAL_I2C_Master_Transmit_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2220      	movs	r2, #32
 80033d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e8:	f043 0210 	orr.w	r2, r3, #16
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e018      	b.n	800342e <HAL_I2C_Master_Transmit_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4a13      	ldr	r2, [pc, #76]	; (800344c <HAL_I2C_Master_Transmit_DMA+0x1dc>)
 8003400:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003406:	b2da      	uxtb	r2, r3
 8003408:	8979      	ldrh	r1, [r7, #10]
 800340a:	4b0f      	ldr	r3, [pc, #60]	; (8003448 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f001 fc36 	bl	8004c84 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003420:	2101      	movs	r1, #1
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f001 fc5c 	bl	8004ce0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8003428:	2300      	movs	r3, #0
 800342a:	e000      	b.n	800342e <HAL_I2C_Master_Transmit_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 800342c:	2302      	movs	r3, #2
  }
}
 800342e:	4618      	mov	r0, r3
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	ffff0000 	.word	0xffff0000
 800343c:	08003b63 	.word	0x08003b63
 8003440:	080047d3 	.word	0x080047d3
 8003444:	080048ff 	.word	0x080048ff
 8003448:	80002000 	.word	0x80002000
 800344c:	0800370d 	.word	0x0800370d

08003450 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b088      	sub	sp, #32
 8003454:	af02      	add	r7, sp, #8
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	607a      	str	r2, [r7, #4]
 800345a:	461a      	mov	r2, r3
 800345c:	460b      	mov	r3, r1
 800345e:	817b      	strh	r3, [r7, #10]
 8003460:	4613      	mov	r3, r2
 8003462:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b20      	cmp	r3, #32
 800346e:	f040 80cd 	bne.w	800360c <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800347c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003480:	d101      	bne.n	8003486 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8003482:	2302      	movs	r3, #2
 8003484:	e0c3      	b.n	800360e <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800348c:	2b01      	cmp	r3, #1
 800348e:	d101      	bne.n	8003494 <HAL_I2C_Master_Receive_DMA+0x44>
 8003490:	2302      	movs	r3, #2
 8003492:	e0bc      	b.n	800360e <HAL_I2C_Master_Receive_DMA+0x1be>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2222      	movs	r2, #34	; 0x22
 80034a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2210      	movs	r2, #16
 80034a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	893a      	ldrh	r2, [r7, #8]
 80034bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	4a55      	ldr	r2, [pc, #340]	; (8003618 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 80034c2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4a55      	ldr	r2, [pc, #340]	; (800361c <HAL_I2C_Master_Receive_DMA+0x1cc>)
 80034c8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	2bff      	cmp	r3, #255	; 0xff
 80034d2:	d906      	bls.n	80034e2 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	22ff      	movs	r2, #255	; 0xff
 80034d8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80034da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	e007      	b.n	80034f2 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80034ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034f0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d070      	beq.n	80035dc <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d020      	beq.n	8003544 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003506:	4a46      	ldr	r2, [pc, #280]	; (8003620 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8003508:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350e:	4a45      	ldr	r2, [pc, #276]	; (8003624 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8003510:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003516:	2200      	movs	r2, #0
 8003518:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351e:	2200      	movs	r2, #0
 8003520:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	3324      	adds	r3, #36	; 0x24
 800352c:	4619      	mov	r1, r3
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003534:	f7fe ffb6 	bl	80024a4 <HAL_DMA_Start_IT>
 8003538:	4603      	mov	r3, r0
 800353a:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800353c:	7cfb      	ldrb	r3, [r7, #19]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d138      	bne.n	80035b4 <HAL_I2C_Master_Receive_DMA+0x164>
 8003542:	e013      	b.n	800356c <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003558:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e050      	b.n	800360e <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003570:	b2da      	uxtb	r2, r3
 8003572:	8979      	ldrh	r1, [r7, #10]
 8003574:	4b2c      	ldr	r3, [pc, #176]	; (8003628 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f001 fb82 	bl	8004c84 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003584:	b29a      	uxth	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	b29a      	uxth	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800359a:	2110      	movs	r1, #16
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f001 fb9f 	bl	8004ce0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	e029      	b.n	8003608 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c8:	f043 0210 	orr.w	r2, r3, #16
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e018      	b.n	800360e <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4a13      	ldr	r2, [pc, #76]	; (800362c <HAL_I2C_Master_Receive_DMA+0x1dc>)
 80035e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e6:	b2da      	uxtb	r2, r3
 80035e8:	8979      	ldrh	r1, [r7, #10]
 80035ea:	4b0f      	ldr	r3, [pc, #60]	; (8003628 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f001 fb46 	bl	8004c84 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003600:	2101      	movs	r1, #1
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f001 fb6c 	bl	8004ce0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8003608:	2300      	movs	r3, #0
 800360a:	e000      	b.n	800360e <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 800360c:	2302      	movs	r3, #2
  }
}
 800360e:	4618      	mov	r0, r3
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	ffff0000 	.word	0xffff0000
 800361c:	08003b63 	.word	0x08003b63
 8003620:	08004869 	.word	0x08004869
 8003624:	080048ff 	.word	0x080048ff
 8003628:	80002400 	.word	0x80002400
 800362c:	0800370d 	.word	0x0800370d

08003630 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364c:	2b00      	cmp	r3, #0
 800364e:	d005      	beq.n	800365c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	68f9      	ldr	r1, [r7, #12]
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	4798      	blx	r3
  }
}
 800365c:	bf00      	nop
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	460b      	mov	r3, r1
 8003696:	70fb      	strb	r3, [r7, #3]
 8003698:	4613      	mov	r3, r2
 800369a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b088      	sub	sp, #32
 8003710:	af02      	add	r7, sp, #8
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003722:	2b01      	cmp	r3, #1
 8003724:	d101      	bne.n	800372a <I2C_Master_ISR_IT+0x1e>
 8003726:	2302      	movs	r3, #2
 8003728:	e114      	b.n	8003954 <I2C_Master_ISR_IT+0x248>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	091b      	lsrs	r3, r3, #4
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d013      	beq.n	8003766 <I2C_Master_ISR_IT+0x5a>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	091b      	lsrs	r3, r3, #4
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00d      	beq.n	8003766 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2210      	movs	r2, #16
 8003750:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003756:	f043 0204 	orr.w	r2, r3, #4
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f001 f813 	bl	800478a <I2C_Flush_TXDR>
 8003764:	e0e1      	b.n	800392a <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	089b      	lsrs	r3, r3, #2
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d023      	beq.n	80037ba <I2C_Master_ISR_IT+0xae>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	089b      	lsrs	r3, r3, #2
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d01d      	beq.n	80037ba <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f023 0304 	bic.w	r3, r3, #4
 8003784:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	b2d2      	uxtb	r2, r2
 8003792:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	1c5a      	adds	r2, r3, #1
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a2:	3b01      	subs	r3, #1
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	3b01      	subs	r3, #1
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037b8:	e0b7      	b.n	800392a <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	085b      	lsrs	r3, r3, #1
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d01e      	beq.n	8003804 <I2C_Master_ISR_IT+0xf8>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	085b      	lsrs	r3, r3, #1
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d018      	beq.n	8003804 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d6:	781a      	ldrb	r2, [r3, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	1c5a      	adds	r2, r3, #1
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	3b01      	subs	r3, #1
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003802:	e092      	b.n	800392a <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	09db      	lsrs	r3, r3, #7
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b00      	cmp	r3, #0
 800380e:	d05d      	beq.n	80038cc <I2C_Master_ISR_IT+0x1c0>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	099b      	lsrs	r3, r3, #6
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d057      	beq.n	80038cc <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003820:	b29b      	uxth	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d040      	beq.n	80038a8 <I2C_Master_ISR_IT+0x19c>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800382a:	2b00      	cmp	r3, #0
 800382c:	d13c      	bne.n	80038a8 <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	b29b      	uxth	r3, r3
 8003836:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800383a:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003840:	b29b      	uxth	r3, r3
 8003842:	2bff      	cmp	r3, #255	; 0xff
 8003844:	d90e      	bls.n	8003864 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	22ff      	movs	r2, #255	; 0xff
 800384a:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003850:	b2da      	uxtb	r2, r3
 8003852:	8a79      	ldrh	r1, [r7, #18]
 8003854:	2300      	movs	r3, #0
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f001 fa11 	bl	8004c84 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003862:	e032      	b.n	80038ca <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003868:	b29a      	uxth	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003872:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003876:	d00b      	beq.n	8003890 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387c:	b2da      	uxtb	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003882:	8a79      	ldrh	r1, [r7, #18]
 8003884:	2000      	movs	r0, #0
 8003886:	9000      	str	r0, [sp, #0]
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f001 f9fb 	bl	8004c84 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800388e:	e01c      	b.n	80038ca <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003894:	b2da      	uxtb	r2, r3
 8003896:	8a79      	ldrh	r1, [r7, #18]
 8003898:	2300      	movs	r3, #0
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f001 f9ef 	bl	8004c84 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038a6:	e010      	b.n	80038ca <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038b6:	d003      	beq.n	80038c0 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f000 fba9 	bl	8004010 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038be:	e034      	b.n	800392a <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80038c0:	2140      	movs	r1, #64	; 0x40
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f000 fe6a 	bl	800459c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038c8:	e02f      	b.n	800392a <I2C_Master_ISR_IT+0x21e>
 80038ca:	e02e      	b.n	800392a <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	099b      	lsrs	r3, r3, #6
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d028      	beq.n	800392a <I2C_Master_ISR_IT+0x21e>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	099b      	lsrs	r3, r3, #6
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d022      	beq.n	800392a <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d119      	bne.n	8003922 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038fc:	d015      	beq.n	800392a <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003902:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003906:	d108      	bne.n	800391a <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003916:	605a      	str	r2, [r3, #4]
 8003918:	e007      	b.n	800392a <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f000 fb78 	bl	8004010 <I2C_ITMasterSeqCplt>
 8003920:	e003      	b.n	800392a <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003922:	2140      	movs	r1, #64	; 0x40
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f000 fe39 	bl	800459c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	095b      	lsrs	r3, r3, #5
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d009      	beq.n	800394a <I2C_Master_ISR_IT+0x23e>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	095b      	lsrs	r3, r3, #5
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8003942:	6979      	ldr	r1, [r7, #20]
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 fbff 	bl	8004148 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3718      	adds	r7, #24
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003978:	2b01      	cmp	r3, #1
 800397a:	d101      	bne.n	8003980 <I2C_Slave_ISR_IT+0x24>
 800397c:	2302      	movs	r3, #2
 800397e:	e0ec      	b.n	8003b5a <I2C_Slave_ISR_IT+0x1fe>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	095b      	lsrs	r3, r3, #5
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b00      	cmp	r3, #0
 8003992:	d009      	beq.n	80039a8 <I2C_Slave_ISR_IT+0x4c>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	095b      	lsrs	r3, r3, #5
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80039a0:	6939      	ldr	r1, [r7, #16]
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 fc9a 	bl	80042dc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	091b      	lsrs	r3, r3, #4
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d04d      	beq.n	8003a50 <I2C_Slave_ISR_IT+0xf4>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	091b      	lsrs	r3, r3, #4
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d047      	beq.n	8003a50 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d128      	bne.n	8003a1c <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b28      	cmp	r3, #40	; 0x28
 80039d4:	d108      	bne.n	80039e8 <I2C_Slave_ISR_IT+0x8c>
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039dc:	d104      	bne.n	80039e8 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80039de:	6939      	ldr	r1, [r7, #16]
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 fd85 	bl	80044f0 <I2C_ITListenCplt>
 80039e6:	e032      	b.n	8003a4e <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b29      	cmp	r3, #41	; 0x29
 80039f2:	d10e      	bne.n	8003a12 <I2C_Slave_ISR_IT+0xb6>
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039fa:	d00a      	beq.n	8003a12 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2210      	movs	r2, #16
 8003a02:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 fec0 	bl	800478a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 fb3d 	bl	800408a <I2C_ITSlaveSeqCplt>
 8003a10:	e01d      	b.n	8003a4e <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2210      	movs	r2, #16
 8003a18:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003a1a:	e096      	b.n	8003b4a <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2210      	movs	r2, #16
 8003a22:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a28:	f043 0204 	orr.w	r2, r3, #4
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d004      	beq.n	8003a40 <I2C_Slave_ISR_IT+0xe4>
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a3c:	f040 8085 	bne.w	8003b4a <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a44:	4619      	mov	r1, r3
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 fda8 	bl	800459c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003a4c:	e07d      	b.n	8003b4a <I2C_Slave_ISR_IT+0x1ee>
 8003a4e:	e07c      	b.n	8003b4a <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	089b      	lsrs	r3, r3, #2
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d030      	beq.n	8003abe <I2C_Slave_ISR_IT+0x162>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	089b      	lsrs	r3, r3, #2
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d02a      	beq.n	8003abe <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d018      	beq.n	8003aa4 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	b2d2      	uxtb	r2, r2
 8003a7e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d14f      	bne.n	8003b4e <I2C_Slave_ISR_IT+0x1f2>
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ab4:	d04b      	beq.n	8003b4e <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 fae7 	bl	800408a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003abc:	e047      	b.n	8003b4e <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	08db      	lsrs	r3, r3, #3
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00a      	beq.n	8003ae0 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	08db      	lsrs	r3, r3, #3
 8003ace:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d004      	beq.n	8003ae0 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003ad6:	6939      	ldr	r1, [r7, #16]
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 fa15 	bl	8003f08 <I2C_ITAddrCplt>
 8003ade:	e037      	b.n	8003b50 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	085b      	lsrs	r3, r3, #1
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d031      	beq.n	8003b50 <I2C_Slave_ISR_IT+0x1f4>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	085b      	lsrs	r3, r3, #1
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d02b      	beq.n	8003b50 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d018      	beq.n	8003b34 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	781a      	ldrb	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	1c5a      	adds	r2, r3, #1
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	851a      	strh	r2, [r3, #40]	; 0x28
 8003b32:	e00d      	b.n	8003b50 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b3a:	d002      	beq.n	8003b42 <I2C_Slave_ISR_IT+0x1e6>
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d106      	bne.n	8003b50 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 faa1 	bl	800408a <I2C_ITSlaveSeqCplt>
 8003b48:	e002      	b.n	8003b50 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003b4a:	bf00      	nop
 8003b4c:	e000      	b.n	8003b50 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003b4e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3718      	adds	r7, #24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b088      	sub	sp, #32
 8003b66:	af02      	add	r7, sp, #8
 8003b68:	60f8      	str	r0, [r7, #12]
 8003b6a:	60b9      	str	r1, [r7, #8]
 8003b6c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d101      	bne.n	8003b7c <I2C_Master_ISR_DMA+0x1a>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e0e1      	b.n	8003d40 <I2C_Master_ISR_DMA+0x1de>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	091b      	lsrs	r3, r3, #4
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d017      	beq.n	8003bc0 <I2C_Master_ISR_DMA+0x5e>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	091b      	lsrs	r3, r3, #4
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d011      	beq.n	8003bc0 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2210      	movs	r2, #16
 8003ba2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba8:	f043 0204 	orr.w	r2, r3, #4
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003bb0:	2120      	movs	r1, #32
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f001 f894 	bl	8004ce0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 fde6 	bl	800478a <I2C_Flush_TXDR>
 8003bbe:	e0ba      	b.n	8003d36 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	09db      	lsrs	r3, r3, #7
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d072      	beq.n	8003cb2 <I2C_Master_ISR_DMA+0x150>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	099b      	lsrs	r3, r3, #6
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d06c      	beq.n	8003cb2 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003be6:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d04e      	beq.n	8003c90 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bfe:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	2bff      	cmp	r3, #255	; 0xff
 8003c08:	d906      	bls.n	8003c18 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	22ff      	movs	r2, #255	; 0xff
 8003c0e:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003c10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c14:	617b      	str	r3, [r7, #20]
 8003c16:	e010      	b.n	8003c3a <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c26:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c2a:	d003      	beq.n	8003c34 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	617b      	str	r3, [r7, #20]
 8003c32:	e002      	b.n	8003c3a <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003c34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c38:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	8a79      	ldrh	r1, [r7, #18]
 8003c42:	2300      	movs	r3, #0
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f001 f81b 	bl	8004c84 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b22      	cmp	r3, #34	; 0x22
 8003c6a:	d108      	bne.n	8003c7e <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c7a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003c7c:	e05b      	b.n	8003d36 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c8c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003c8e:	e052      	b.n	8003d36 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c9e:	d003      	beq.n	8003ca8 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 f9b5 	bl	8004010 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003ca6:	e046      	b.n	8003d36 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003ca8:	2140      	movs	r1, #64	; 0x40
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 fc76 	bl	800459c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003cb0:	e041      	b.n	8003d36 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	099b      	lsrs	r3, r3, #6
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d029      	beq.n	8003d12 <I2C_Master_ISR_DMA+0x1b0>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	099b      	lsrs	r3, r3, #6
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d023      	beq.n	8003d12 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d119      	bne.n	8003d08 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ce2:	d027      	beq.n	8003d34 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cec:	d108      	bne.n	8003d00 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cfc:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003cfe:	e019      	b.n	8003d34 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 f985 	bl	8004010 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003d06:	e015      	b.n	8003d34 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003d08:	2140      	movs	r1, #64	; 0x40
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f000 fc46 	bl	800459c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003d10:	e010      	b.n	8003d34 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	095b      	lsrs	r3, r3, #5
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00b      	beq.n	8003d36 <I2C_Master_ISR_DMA+0x1d4>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	095b      	lsrs	r3, r3, #5
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d005      	beq.n	8003d36 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003d2a:	68b9      	ldr	r1, [r7, #8]
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 fa0b 	bl	8004148 <I2C_ITMasterCplt>
 8003d32:	e000      	b.n	8003d36 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8003d34:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b088      	sub	sp, #32
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d58:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <I2C_Slave_ISR_DMA+0x24>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e0c9      	b.n	8003f00 <I2C_Slave_ISR_DMA+0x1b8>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	095b      	lsrs	r3, r3, #5
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d009      	beq.n	8003d94 <I2C_Slave_ISR_DMA+0x4c>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	095b      	lsrs	r3, r3, #5
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003d8c:	68b9      	ldr	r1, [r7, #8]
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 faa4 	bl	80042dc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	091b      	lsrs	r3, r3, #4
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 809a 	beq.w	8003ed6 <I2C_Slave_ISR_DMA+0x18e>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	091b      	lsrs	r3, r3, #4
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 8093 	beq.w	8003ed6 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	0b9b      	lsrs	r3, r3, #14
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d105      	bne.n	8003dc8 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	0bdb      	lsrs	r3, r3, #15
 8003dc0:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d07f      	beq.n	8003ec8 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00d      	beq.n	8003dec <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	0bdb      	lsrs	r3, r3, #15
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d007      	beq.n	8003dec <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8003de8:	2301      	movs	r3, #1
 8003dea:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00d      	beq.n	8003e10 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	0b9b      	lsrs	r3, r3, #14
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d007      	beq.n	8003e10 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d128      	bne.n	8003e68 <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b28      	cmp	r3, #40	; 0x28
 8003e20:	d108      	bne.n	8003e34 <I2C_Slave_ISR_DMA+0xec>
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e28:	d104      	bne.n	8003e34 <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003e2a:	68b9      	ldr	r1, [r7, #8]
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f000 fb5f 	bl	80044f0 <I2C_ITListenCplt>
 8003e32:	e048      	b.n	8003ec6 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b29      	cmp	r3, #41	; 0x29
 8003e3e:	d10e      	bne.n	8003e5e <I2C_Slave_ISR_DMA+0x116>
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e46:	d00a      	beq.n	8003e5e <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2210      	movs	r2, #16
 8003e4e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	f000 fc9a 	bl	800478a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 f917 	bl	800408a <I2C_ITSlaveSeqCplt>
 8003e5c:	e033      	b.n	8003ec6 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2210      	movs	r2, #16
 8003e64:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003e66:	e034      	b.n	8003ed2 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2210      	movs	r2, #16
 8003e6e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e74:	f043 0204 	orr.w	r2, r3, #4
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e82:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <I2C_Slave_ISR_DMA+0x14a>
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e90:	d11f      	bne.n	8003ed2 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e92:	7dfb      	ldrb	r3, [r7, #23]
 8003e94:	2b21      	cmp	r3, #33	; 0x21
 8003e96:	d002      	beq.n	8003e9e <I2C_Slave_ISR_DMA+0x156>
 8003e98:	7dfb      	ldrb	r3, [r7, #23]
 8003e9a:	2b29      	cmp	r3, #41	; 0x29
 8003e9c:	d103      	bne.n	8003ea6 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2221      	movs	r2, #33	; 0x21
 8003ea2:	631a      	str	r2, [r3, #48]	; 0x30
 8003ea4:	e008      	b.n	8003eb8 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003ea6:	7dfb      	ldrb	r3, [r7, #23]
 8003ea8:	2b22      	cmp	r3, #34	; 0x22
 8003eaa:	d002      	beq.n	8003eb2 <I2C_Slave_ISR_DMA+0x16a>
 8003eac:	7dfb      	ldrb	r3, [r7, #23]
 8003eae:	2b2a      	cmp	r3, #42	; 0x2a
 8003eb0:	d102      	bne.n	8003eb8 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2222      	movs	r2, #34	; 0x22
 8003eb6:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 fb6c 	bl	800459c <I2C_ITError>
      if (treatdmanack == 1U)
 8003ec4:	e005      	b.n	8003ed2 <I2C_Slave_ISR_DMA+0x18a>
 8003ec6:	e004      	b.n	8003ed2 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2210      	movs	r2, #16
 8003ece:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003ed0:	e011      	b.n	8003ef6 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8003ed2:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003ed4:	e00f      	b.n	8003ef6 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	08db      	lsrs	r3, r3, #3
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d009      	beq.n	8003ef6 <I2C_Slave_ISR_DMA+0x1ae>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	08db      	lsrs	r3, r3, #3
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003eee:	68b9      	ldr	r1, [r7, #8]
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f000 f809 	bl	8003f08 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3720      	adds	r7, #32
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f1e:	2b28      	cmp	r3, #40	; 0x28
 8003f20:	d16a      	bne.n	8003ff8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	0c1b      	lsrs	r3, r3, #16
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	0c1b      	lsrs	r3, r3, #16
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003f40:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f4e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003f5c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d138      	bne.n	8003fd8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8003f66:	897b      	ldrh	r3, [r7, #10]
 8003f68:	09db      	lsrs	r3, r3, #7
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	89bb      	ldrh	r3, [r7, #12]
 8003f6e:	4053      	eors	r3, r2
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	f003 0306 	and.w	r3, r3, #6
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d11c      	bne.n	8003fb4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003f7a:	897b      	ldrh	r3, [r7, #10]
 8003f7c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f82:	1c5a      	adds	r2, r3, #1
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d13b      	bne.n	8004008 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2208      	movs	r2, #8
 8003f9c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003fa6:	89ba      	ldrh	r2, [r7, #12]
 8003fa8:	7bfb      	ldrb	r3, [r7, #15]
 8003faa:	4619      	mov	r1, r3
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f7ff fb6d 	bl	800368c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003fb2:	e029      	b.n	8004008 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003fb4:	893b      	ldrh	r3, [r7, #8]
 8003fb6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003fb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 fef3 	bl	8004da8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003fca:	89ba      	ldrh	r2, [r7, #12]
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
 8003fce:	4619      	mov	r1, r3
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7ff fb5b 	bl	800368c <HAL_I2C_AddrCallback>
}
 8003fd6:	e017      	b.n	8004008 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003fd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 fee3 	bl	8004da8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003fea:	89ba      	ldrh	r2, [r7, #12]
 8003fec:	7bfb      	ldrb	r3, [r7, #15]
 8003fee:	4619      	mov	r1, r3
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7ff fb4b 	bl	800368c <HAL_I2C_AddrCallback>
}
 8003ff6:	e007      	b.n	8004008 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2208      	movs	r2, #8
 8003ffe:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004008:	bf00      	nop
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b21      	cmp	r3, #33	; 0x21
 800402a:	d115      	bne.n	8004058 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2220      	movs	r2, #32
 8004030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2211      	movs	r2, #17
 8004038:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004040:	2101      	movs	r1, #1
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 feb0 	bl	8004da8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7fc fd09 	bl	8000a68 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004056:	e014      	b.n	8004082 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2220      	movs	r2, #32
 800405c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2212      	movs	r2, #18
 8004064:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800406c:	2102      	movs	r1, #2
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 fe9a 	bl	8004da8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f7fc fd07 	bl	8000a90 <HAL_I2C_MasterRxCpltCallback>
}
 8004082:	bf00      	nop
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b084      	sub	sp, #16
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	0b9b      	lsrs	r3, r3, #14
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d008      	beq.n	80040c0 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80040bc:	601a      	str	r2, [r3, #0]
 80040be:	e00d      	b.n	80040dc <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	0bdb      	lsrs	r3, r3, #15
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d007      	beq.n	80040dc <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040da:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b29      	cmp	r3, #41	; 0x29
 80040e6:	d112      	bne.n	800410e <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2228      	movs	r2, #40	; 0x28
 80040ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2221      	movs	r2, #33	; 0x21
 80040f4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80040f6:	2101      	movs	r1, #1
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 fe55 	bl	8004da8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7ff faac 	bl	8003664 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800410c:	e017      	b.n	800413e <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b2a      	cmp	r3, #42	; 0x2a
 8004118:	d111      	bne.n	800413e <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2228      	movs	r2, #40	; 0x28
 800411e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2222      	movs	r2, #34	; 0x22
 8004126:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004128:	2102      	movs	r1, #2
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 fe3c 	bl	8004da8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f7ff fa9d 	bl	8003678 <HAL_I2C_SlaveRxCpltCallback>
}
 800413e:	bf00      	nop
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
	...

08004148 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2220      	movs	r2, #32
 800415c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b21      	cmp	r3, #33	; 0x21
 8004168:	d107      	bne.n	800417a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800416a:	2101      	movs	r1, #1
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 fe1b 	bl	8004da8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2211      	movs	r2, #17
 8004176:	631a      	str	r2, [r3, #48]	; 0x30
 8004178:	e00c      	b.n	8004194 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b22      	cmp	r3, #34	; 0x22
 8004184:	d106      	bne.n	8004194 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004186:	2102      	movs	r1, #2
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 fe0d 	bl	8004da8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2212      	movs	r2, #18
 8004192:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6859      	ldr	r1, [r3, #4]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	4b4d      	ldr	r3, [pc, #308]	; (80042d4 <I2C_ITMasterCplt+0x18c>)
 80041a0:	400b      	ands	r3, r1
 80041a2:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a4a      	ldr	r2, [pc, #296]	; (80042d8 <I2C_ITMasterCplt+0x190>)
 80041ae:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	091b      	lsrs	r3, r3, #4
 80041b4:	f003 0301 	and.w	r3, r3, #1
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d009      	beq.n	80041d0 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2210      	movs	r2, #16
 80041c2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c8:	f043 0204 	orr.w	r2, r3, #4
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b60      	cmp	r3, #96	; 0x60
 80041da:	d10b      	bne.n	80041f4 <I2C_ITMasterCplt+0xac>
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	089b      	lsrs	r3, r3, #2
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d005      	beq.n	80041f4 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80041f2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 fac8 	bl	800478a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fe:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b60      	cmp	r3, #96	; 0x60
 800420a:	d002      	beq.n	8004212 <I2C_ITMasterCplt+0xca>
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d006      	beq.n	8004220 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004216:	4619      	mov	r1, r3
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f9bf 	bl	800459c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800421e:	e054      	b.n	80042ca <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b21      	cmp	r3, #33	; 0x21
 800422a:	d124      	bne.n	8004276 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2220      	movs	r2, #32
 8004230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b40      	cmp	r3, #64	; 0x40
 8004244:	d10b      	bne.n	800425e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7ff fa30 	bl	80036bc <HAL_I2C_MemTxCpltCallback>
}
 800425c:	e035      	b.n	80042ca <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7fc fbfa 	bl	8000a68 <HAL_I2C_MasterTxCpltCallback>
}
 8004274:	e029      	b.n	80042ca <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b22      	cmp	r3, #34	; 0x22
 8004280:	d123      	bne.n	80042ca <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2220      	movs	r2, #32
 8004286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b40      	cmp	r3, #64	; 0x40
 800429a:	d10b      	bne.n	80042b4 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7ff fa0f 	bl	80036d0 <HAL_I2C_MemRxCpltCallback>
}
 80042b2:	e00a      	b.n	80042ca <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f7fc fbe3 	bl	8000a90 <HAL_I2C_MasterRxCpltCallback>
}
 80042ca:	bf00      	nop
 80042cc:	3718      	adds	r7, #24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	fe00e800 	.word	0xfe00e800
 80042d8:	ffff0000 	.word	0xffff0000

080042dc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042f8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2220      	movs	r2, #32
 8004300:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004302:	7bfb      	ldrb	r3, [r7, #15]
 8004304:	2b21      	cmp	r3, #33	; 0x21
 8004306:	d002      	beq.n	800430e <I2C_ITSlaveCplt+0x32>
 8004308:	7bfb      	ldrb	r3, [r7, #15]
 800430a:	2b29      	cmp	r3, #41	; 0x29
 800430c:	d108      	bne.n	8004320 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800430e:	f248 0101 	movw	r1, #32769	; 0x8001
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 fd48 	bl	8004da8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2221      	movs	r2, #33	; 0x21
 800431c:	631a      	str	r2, [r3, #48]	; 0x30
 800431e:	e00d      	b.n	800433c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004320:	7bfb      	ldrb	r3, [r7, #15]
 8004322:	2b22      	cmp	r3, #34	; 0x22
 8004324:	d002      	beq.n	800432c <I2C_ITSlaveCplt+0x50>
 8004326:	7bfb      	ldrb	r3, [r7, #15]
 8004328:	2b2a      	cmp	r3, #42	; 0x2a
 800432a:	d107      	bne.n	800433c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800432c:	f248 0102 	movw	r1, #32770	; 0x8002
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 fd39 	bl	8004da8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2222      	movs	r2, #34	; 0x22
 800433a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800434a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6859      	ldr	r1, [r3, #4]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	4b64      	ldr	r3, [pc, #400]	; (80044e8 <I2C_ITSlaveCplt+0x20c>)
 8004358:	400b      	ands	r3, r1
 800435a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 fa14 	bl	800478a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	0b9b      	lsrs	r3, r3, #14
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d013      	beq.n	8004396 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800437c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004382:	2b00      	cmp	r3, #0
 8004384:	d020      	beq.n	80043c8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	b29a      	uxth	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004394:	e018      	b.n	80043c8 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	0bdb      	lsrs	r3, r3, #15
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d012      	beq.n	80043c8 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043b0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d006      	beq.n	80043c8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	089b      	lsrs	r3, r3, #2
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d020      	beq.n	8004416 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	f023 0304 	bic.w	r3, r3, #4
 80043da:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	1c5a      	adds	r2, r3, #1
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00c      	beq.n	8004416 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004400:	3b01      	subs	r3, #1
 8004402:	b29a      	uxth	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440c:	b29b      	uxth	r3, r3
 800440e:	3b01      	subs	r3, #1
 8004410:	b29a      	uxth	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800441a:	b29b      	uxth	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d005      	beq.n	800442c <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004424:	f043 0204 	orr.w	r2, r3, #4
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443e:	2b00      	cmp	r3, #0
 8004440:	d010      	beq.n	8004464 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004446:	4619      	mov	r1, r3
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f8a7 	bl	800459c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b28      	cmp	r3, #40	; 0x28
 8004458:	d141      	bne.n	80044de <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800445a:	6979      	ldr	r1, [r7, #20]
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f847 	bl	80044f0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004462:	e03c      	b.n	80044de <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004468:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800446c:	d014      	beq.n	8004498 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7ff fe0b 	bl	800408a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a1d      	ldr	r2, [pc, #116]	; (80044ec <I2C_ITSlaveCplt+0x210>)
 8004478:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2220      	movs	r2, #32
 800447e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f7ff f909 	bl	80036a8 <HAL_I2C_ListenCpltCallback>
}
 8004496:	e022      	b.n	80044de <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b22      	cmp	r3, #34	; 0x22
 80044a2:	d10e      	bne.n	80044c2 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7ff f8dc 	bl	8003678 <HAL_I2C_SlaveRxCpltCallback>
}
 80044c0:	e00d      	b.n	80044de <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2220      	movs	r2, #32
 80044c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f7ff f8c3 	bl	8003664 <HAL_I2C_SlaveTxCpltCallback>
}
 80044de:	bf00      	nop
 80044e0:	3718      	adds	r7, #24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	fe00e800 	.word	0xfe00e800
 80044ec:	ffff0000 	.word	0xffff0000

080044f0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a26      	ldr	r2, [pc, #152]	; (8004598 <I2C_ITListenCplt+0xa8>)
 80044fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2220      	movs	r2, #32
 800450a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	089b      	lsrs	r3, r3, #2
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b00      	cmp	r3, #0
 8004526:	d022      	beq.n	800456e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004544:	2b00      	cmp	r3, #0
 8004546:	d012      	beq.n	800456e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800454c:	3b01      	subs	r3, #1
 800454e:	b29a      	uxth	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004558:	b29b      	uxth	r3, r3
 800455a:	3b01      	subs	r3, #1
 800455c:	b29a      	uxth	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004566:	f043 0204 	orr.w	r2, r3, #4
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800456e:	f248 0103 	movw	r1, #32771	; 0x8003
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 fc18 	bl	8004da8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2210      	movs	r2, #16
 800457e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f7ff f88d 	bl	80036a8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800458e:	bf00      	nop
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	ffff0000 	.word	0xffff0000

0800459c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a5d      	ldr	r2, [pc, #372]	; (8004730 <I2C_ITError+0x194>)
 80045ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	431a      	orrs	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80045ce:	7bfb      	ldrb	r3, [r7, #15]
 80045d0:	2b28      	cmp	r3, #40	; 0x28
 80045d2:	d005      	beq.n	80045e0 <I2C_ITError+0x44>
 80045d4:	7bfb      	ldrb	r3, [r7, #15]
 80045d6:	2b29      	cmp	r3, #41	; 0x29
 80045d8:	d002      	beq.n	80045e0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80045da:	7bfb      	ldrb	r3, [r7, #15]
 80045dc:	2b2a      	cmp	r3, #42	; 0x2a
 80045de:	d10b      	bne.n	80045f8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80045e0:	2103      	movs	r1, #3
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 fbe0 	bl	8004da8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2228      	movs	r2, #40	; 0x28
 80045ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a50      	ldr	r2, [pc, #320]	; (8004734 <I2C_ITError+0x198>)
 80045f4:	635a      	str	r2, [r3, #52]	; 0x34
 80045f6:	e011      	b.n	800461c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80045f8:	f248 0103 	movw	r1, #32771	; 0x8003
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 fbd3 	bl	8004da8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b60      	cmp	r3, #96	; 0x60
 800460c:	d003      	beq.n	8004616 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2220      	movs	r2, #32
 8004612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004620:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004626:	2b00      	cmp	r3, #0
 8004628:	d039      	beq.n	800469e <I2C_ITError+0x102>
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	2b11      	cmp	r3, #17
 800462e:	d002      	beq.n	8004636 <I2C_ITError+0x9a>
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	2b21      	cmp	r3, #33	; 0x21
 8004634:	d133      	bne.n	800469e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004640:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004644:	d107      	bne.n	8004656 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004654:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465a:	4618      	mov	r0, r3
 800465c:	f7fe f872 	bl	8002744 <HAL_DMA_GetState>
 8004660:	4603      	mov	r3, r0
 8004662:	2b01      	cmp	r3, #1
 8004664:	d017      	beq.n	8004696 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466a:	4a33      	ldr	r2, [pc, #204]	; (8004738 <I2C_ITError+0x19c>)
 800466c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467a:	4618      	mov	r0, r3
 800467c:	f7fd ff72 	bl	8002564 <HAL_DMA_Abort_IT>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d04d      	beq.n	8004722 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004690:	4610      	mov	r0, r2
 8004692:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004694:	e045      	b.n	8004722 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f850 	bl	800473c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800469c:	e041      	b.n	8004722 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d039      	beq.n	800471a <I2C_ITError+0x17e>
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	2b12      	cmp	r3, #18
 80046aa:	d002      	beq.n	80046b2 <I2C_ITError+0x116>
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2b22      	cmp	r3, #34	; 0x22
 80046b0:	d133      	bne.n	800471a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046c0:	d107      	bne.n	80046d2 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046d0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fe f834 	bl	8002744 <HAL_DMA_GetState>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d017      	beq.n	8004712 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e6:	4a14      	ldr	r2, [pc, #80]	; (8004738 <I2C_ITError+0x19c>)
 80046e8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7fd ff34 	bl	8002564 <HAL_DMA_Abort_IT>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d011      	beq.n	8004726 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800470c:	4610      	mov	r0, r2
 800470e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004710:	e009      	b.n	8004726 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f812 	bl	800473c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004718:	e005      	b.n	8004726 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f80e 	bl	800473c <I2C_TreatErrorCallback>
  }
}
 8004720:	e002      	b.n	8004728 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004722:	bf00      	nop
 8004724:	e000      	b.n	8004728 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004726:	bf00      	nop
}
 8004728:	bf00      	nop
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	ffff0000 	.word	0xffff0000
 8004734:	0800395d 	.word	0x0800395d
 8004738:	0800492d 	.word	0x0800492d

0800473c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b60      	cmp	r3, #96	; 0x60
 800474e:	d10e      	bne.n	800476e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2220      	movs	r2, #32
 8004754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7fe ffc6 	bl	80036f8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800476c:	e009      	b.n	8004782 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f7fe ffb1 	bl	80036e4 <HAL_I2C_ErrorCallback>
}
 8004782:	bf00      	nop
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800478a:	b480      	push	{r7}
 800478c:	b083      	sub	sp, #12
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b02      	cmp	r3, #2
 800479e:	d103      	bne.n	80047a8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2200      	movs	r2, #0
 80047a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d007      	beq.n	80047c6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	699a      	ldr	r2, [r3, #24]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f042 0201 	orr.w	r2, r2, #1
 80047c4:	619a      	str	r2, [r3, #24]
  }
}
 80047c6:	bf00      	nop
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b084      	sub	sp, #16
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047de:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80047ee:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d104      	bne.n	8004804 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80047fa:	2120      	movs	r1, #32
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f000 fa6f 	bl	8004ce0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8004802:	e02d      	b.n	8004860 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800480c:	441a      	add	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004816:	b29b      	uxth	r3, r3
 8004818:	2bff      	cmp	r3, #255	; 0xff
 800481a:	d903      	bls.n	8004824 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	22ff      	movs	r2, #255	; 0xff
 8004820:	851a      	strh	r2, [r3, #40]	; 0x28
 8004822:	e004      	b.n	800482e <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004828:	b29a      	uxth	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004836:	4619      	mov	r1, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	3328      	adds	r3, #40	; 0x28
 800483e:	461a      	mov	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004844:	f7fd fe2e 	bl	80024a4 <HAL_DMA_Start_IT>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d004      	beq.n	8004858 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800484e:	2110      	movs	r1, #16
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f7ff fea3 	bl	800459c <I2C_ITError>
}
 8004856:	e003      	b.n	8004860 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004858:	2140      	movs	r1, #64	; 0x40
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 fa40 	bl	8004ce0 <I2C_Enable_IRQ>
}
 8004860:	bf00      	nop
 8004862:	3710      	adds	r7, #16
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004874:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004884:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800488a:	b29b      	uxth	r3, r3
 800488c:	2b00      	cmp	r3, #0
 800488e:	d104      	bne.n	800489a <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004890:	2120      	movs	r1, #32
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f000 fa24 	bl	8004ce0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8004898:	e02d      	b.n	80048f6 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80048a2:	441a      	add	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	2bff      	cmp	r3, #255	; 0xff
 80048b0:	d903      	bls.n	80048ba <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	22ff      	movs	r2, #255	; 0xff
 80048b6:	851a      	strh	r2, [r3, #40]	; 0x28
 80048b8:	e004      	b.n	80048c4 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048be:	b29a      	uxth	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	3324      	adds	r3, #36	; 0x24
 80048ce:	4619      	mov	r1, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d4:	461a      	mov	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048da:	f7fd fde3 	bl	80024a4 <HAL_DMA_Start_IT>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d004      	beq.n	80048ee <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80048e4:	2110      	movs	r1, #16
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f7ff fe58 	bl	800459c <I2C_ITError>
}
 80048ec:	e003      	b.n	80048f6 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80048ee:	2140      	movs	r1, #64	; 0x40
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f000 f9f5 	bl	8004ce0 <I2C_Enable_IRQ>
}
 80048f6:	bf00      	nop
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b084      	sub	sp, #16
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490a:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800491a:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800491c:	2110      	movs	r1, #16
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f7ff fe3c 	bl	800459c <I2C_ITError>
}
 8004924:	bf00      	nop
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004938:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004946:	2200      	movs	r2, #0
 8004948:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004956:	2200      	movs	r2, #0
 8004958:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f7ff feee 	bl	800473c <I2C_TreatErrorCallback>
}
 8004960:	bf00      	nop
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	603b      	str	r3, [r7, #0]
 8004974:	4613      	mov	r3, r2
 8004976:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004978:	e022      	b.n	80049c0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004980:	d01e      	beq.n	80049c0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004982:	f7fd fa89 	bl	8001e98 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	429a      	cmp	r2, r3
 8004990:	d302      	bcc.n	8004998 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d113      	bne.n	80049c0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499c:	f043 0220 	orr.w	r2, r3, #32
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2220      	movs	r2, #32
 80049a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e00f      	b.n	80049e0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	699a      	ldr	r2, [r3, #24]
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	4013      	ands	r3, r2
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	bf0c      	ite	eq
 80049d0:	2301      	moveq	r3, #1
 80049d2:	2300      	movne	r3, #0
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	461a      	mov	r2, r3
 80049d8:	79fb      	ldrb	r3, [r7, #7]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d0cd      	beq.n	800497a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80049f4:	e02c      	b.n	8004a50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	68b9      	ldr	r1, [r7, #8]
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f000 f8dc 	bl	8004bb8 <I2C_IsAcknowledgeFailed>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e02a      	b.n	8004a60 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a10:	d01e      	beq.n	8004a50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a12:	f7fd fa41 	bl	8001e98 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d302      	bcc.n	8004a28 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d113      	bne.n	8004a50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a2c:	f043 0220 	orr.w	r2, r3, #32
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2220      	movs	r2, #32
 8004a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e007      	b.n	8004a60 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d1cb      	bne.n	80049f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a74:	e028      	b.n	8004ac8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	68b9      	ldr	r1, [r7, #8]
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 f89c 	bl	8004bb8 <I2C_IsAcknowledgeFailed>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e026      	b.n	8004ad8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a8a:	f7fd fa05 	bl	8001e98 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d302      	bcc.n	8004aa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d113      	bne.n	8004ac8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa4:	f043 0220 	orr.w	r2, r3, #32
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e007      	b.n	8004ad8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	f003 0320 	and.w	r3, r3, #32
 8004ad2:	2b20      	cmp	r3, #32
 8004ad4:	d1cf      	bne.n	8004a76 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004aec:	e055      	b.n	8004b9a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	68b9      	ldr	r1, [r7, #8]
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 f860 	bl	8004bb8 <I2C_IsAcknowledgeFailed>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e053      	b.n	8004baa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	f003 0320 	and.w	r3, r3, #32
 8004b0c:	2b20      	cmp	r3, #32
 8004b0e:	d129      	bne.n	8004b64 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	f003 0304 	and.w	r3, r3, #4
 8004b1a:	2b04      	cmp	r3, #4
 8004b1c:	d105      	bne.n	8004b2a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004b26:	2300      	movs	r3, #0
 8004b28:	e03f      	b.n	8004baa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6859      	ldr	r1, [r3, #4]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	4b1d      	ldr	r3, [pc, #116]	; (8004bb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8004b3e:	400b      	ands	r3, r1
 8004b40:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e022      	b.n	8004baa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b64:	f7fd f998 	bl	8001e98 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d302      	bcc.n	8004b7a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10f      	bne.n	8004b9a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7e:	f043 0220 	orr.w	r2, r3, #32
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e007      	b.n	8004baa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b04      	cmp	r3, #4
 8004ba6:	d1a2      	bne.n	8004aee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	fe00e800 	.word	0xfe00e800

08004bb8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	f003 0310 	and.w	r3, r3, #16
 8004bce:	2b10      	cmp	r3, #16
 8004bd0:	d151      	bne.n	8004c76 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bd2:	e022      	b.n	8004c1a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bda:	d01e      	beq.n	8004c1a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bdc:	f7fd f95c 	bl	8001e98 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d302      	bcc.n	8004bf2 <I2C_IsAcknowledgeFailed+0x3a>
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d113      	bne.n	8004c1a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf6:	f043 0220 	orr.w	r2, r3, #32
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2220      	movs	r2, #32
 8004c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e02e      	b.n	8004c78 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	f003 0320 	and.w	r3, r3, #32
 8004c24:	2b20      	cmp	r3, #32
 8004c26:	d1d5      	bne.n	8004bd4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2210      	movs	r2, #16
 8004c2e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2220      	movs	r2, #32
 8004c36:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f7ff fda6 	bl	800478a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	6859      	ldr	r1, [r3, #4]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	4b0d      	ldr	r3, [pc, #52]	; (8004c80 <I2C_IsAcknowledgeFailed+0xc8>)
 8004c4a:	400b      	ands	r3, r1
 8004c4c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c52:	f043 0204 	orr.w	r2, r3, #4
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e000      	b.n	8004c78 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	fe00e800 	.word	0xfe00e800

08004c84 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	607b      	str	r3, [r7, #4]
 8004c8e:	460b      	mov	r3, r1
 8004c90:	817b      	strh	r3, [r7, #10]
 8004c92:	4613      	mov	r3, r2
 8004c94:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	0d5b      	lsrs	r3, r3, #21
 8004ca0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004ca4:	4b0d      	ldr	r3, [pc, #52]	; (8004cdc <I2C_TransferConfig+0x58>)
 8004ca6:	430b      	orrs	r3, r1
 8004ca8:	43db      	mvns	r3, r3
 8004caa:	ea02 0103 	and.w	r1, r2, r3
 8004cae:	897b      	ldrh	r3, [r7, #10]
 8004cb0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004cb4:	7a7b      	ldrb	r3, [r7, #9]
 8004cb6:	041b      	lsls	r3, r3, #16
 8004cb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004cce:	bf00      	nop
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	03ff63ff 	.word	0x03ff63ff

08004ce0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	460b      	mov	r3, r1
 8004cea:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf4:	4a2a      	ldr	r2, [pc, #168]	; (8004da0 <I2C_Enable_IRQ+0xc0>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d004      	beq.n	8004d04 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004cfe:	4a29      	ldr	r2, [pc, #164]	; (8004da4 <I2C_Enable_IRQ+0xc4>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d11d      	bne.n	8004d40 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004d04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	da03      	bge.n	8004d14 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004d12:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004d14:	887b      	ldrh	r3, [r7, #2]
 8004d16:	2b10      	cmp	r3, #16
 8004d18:	d103      	bne.n	8004d22 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004d20:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004d22:	887b      	ldrh	r3, [r7, #2]
 8004d24:	2b20      	cmp	r3, #32
 8004d26:	d103      	bne.n	8004d30 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004d2e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004d30:	887b      	ldrh	r3, [r7, #2]
 8004d32:	2b40      	cmp	r3, #64	; 0x40
 8004d34:	d125      	bne.n	8004d82 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d3c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004d3e:	e020      	b.n	8004d82 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004d40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	da03      	bge.n	8004d50 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004d4e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004d50:	887b      	ldrh	r3, [r7, #2]
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8004d60:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004d62:	887b      	ldrh	r3, [r7, #2]
 8004d64:	f003 0302 	and.w	r3, r3, #2
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d003      	beq.n	8004d74 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8004d72:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004d74:	887b      	ldrh	r3, [r7, #2]
 8004d76:	2b20      	cmp	r3, #32
 8004d78:	d103      	bne.n	8004d82 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f043 0320 	orr.w	r3, r3, #32
 8004d80:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6819      	ldr	r1, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	601a      	str	r2, [r3, #0]
}
 8004d92:	bf00      	nop
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	08003b63 	.word	0x08003b63
 8004da4:	08003d49 	.word	0x08003d49

08004da8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	460b      	mov	r3, r1
 8004db2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004db4:	2300      	movs	r3, #0
 8004db6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004db8:	887b      	ldrh	r3, [r7, #2]
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00f      	beq.n	8004de2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004dc8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004dd6:	2b28      	cmp	r3, #40	; 0x28
 8004dd8:	d003      	beq.n	8004de2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004de0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004de2:	887b      	ldrh	r3, [r7, #2]
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00f      	beq.n	8004e0c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004df2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004e00:	2b28      	cmp	r3, #40	; 0x28
 8004e02:	d003      	beq.n	8004e0c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004e0a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004e0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	da03      	bge.n	8004e1c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004e1a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004e1c:	887b      	ldrh	r3, [r7, #2]
 8004e1e:	2b10      	cmp	r3, #16
 8004e20:	d103      	bne.n	8004e2a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004e28:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004e2a:	887b      	ldrh	r3, [r7, #2]
 8004e2c:	2b20      	cmp	r3, #32
 8004e2e:	d103      	bne.n	8004e38 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f043 0320 	orr.w	r3, r3, #32
 8004e36:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004e38:	887b      	ldrh	r3, [r7, #2]
 8004e3a:	2b40      	cmp	r3, #64	; 0x40
 8004e3c:	d103      	bne.n	8004e46 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e44:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6819      	ldr	r1, [r3, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	43da      	mvns	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	400a      	ands	r2, r1
 8004e56:	601a      	str	r2, [r3, #0]
}
 8004e58:	bf00      	nop
 8004e5a:	3714      	adds	r7, #20
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b20      	cmp	r3, #32
 8004e78:	d138      	bne.n	8004eec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d101      	bne.n	8004e88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004e84:	2302      	movs	r3, #2
 8004e86:	e032      	b.n	8004eee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2224      	movs	r2, #36	; 0x24
 8004e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0201 	bic.w	r2, r2, #1
 8004ea6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004eb6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6819      	ldr	r1, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f042 0201 	orr.w	r2, r2, #1
 8004ed6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2220      	movs	r2, #32
 8004edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	e000      	b.n	8004eee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004eec:	2302      	movs	r3, #2
  }
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b085      	sub	sp, #20
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
 8004f02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b20      	cmp	r3, #32
 8004f0e:	d139      	bne.n	8004f84 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d101      	bne.n	8004f1e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	e033      	b.n	8004f86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2224      	movs	r2, #36	; 0x24
 8004f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 0201 	bic.w	r2, r2, #1
 8004f3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004f4c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	021b      	lsls	r3, r3, #8
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 0201 	orr.w	r2, r2, #1
 8004f6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2220      	movs	r2, #32
 8004f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f80:	2300      	movs	r3, #0
 8004f82:	e000      	b.n	8004f86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004f84:	2302      	movs	r3, #2
  }
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3714      	adds	r7, #20
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr

08004f92 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004f92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f94:	b08f      	sub	sp, #60	; 0x3c
 8004f96:	af0a      	add	r7, sp, #40	; 0x28
 8004f98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d101      	bne.n	8004fa4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e116      	b.n	80051d2 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d106      	bne.n	8004fc4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7fc fd92 	bl	8001ae8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2203      	movs	r2, #3
 8004fc8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d102      	bne.n	8004fde <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f002 fb89 	bl	80076fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	603b      	str	r3, [r7, #0]
 8004fee:	687e      	ldr	r6, [r7, #4]
 8004ff0:	466d      	mov	r5, sp
 8004ff2:	f106 0410 	add.w	r4, r6, #16
 8004ff6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ff8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ffa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ffc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ffe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005002:	e885 0003 	stmia.w	r5, {r0, r1}
 8005006:	1d33      	adds	r3, r6, #4
 8005008:	cb0e      	ldmia	r3, {r1, r2, r3}
 800500a:	6838      	ldr	r0, [r7, #0]
 800500c:	f002 fb49 	bl	80076a2 <USB_CoreInit>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d005      	beq.n	8005022 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2202      	movs	r2, #2
 800501a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e0d7      	b.n	80051d2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2100      	movs	r1, #0
 8005028:	4618      	mov	r0, r3
 800502a:	f002 fb77 	bl	800771c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800502e:	2300      	movs	r3, #0
 8005030:	73fb      	strb	r3, [r7, #15]
 8005032:	e04a      	b.n	80050ca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005034:	7bfa      	ldrb	r2, [r7, #15]
 8005036:	6879      	ldr	r1, [r7, #4]
 8005038:	4613      	mov	r3, r2
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	1a9b      	subs	r3, r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	440b      	add	r3, r1
 8005042:	333d      	adds	r3, #61	; 0x3d
 8005044:	2201      	movs	r2, #1
 8005046:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005048:	7bfa      	ldrb	r2, [r7, #15]
 800504a:	6879      	ldr	r1, [r7, #4]
 800504c:	4613      	mov	r3, r2
 800504e:	00db      	lsls	r3, r3, #3
 8005050:	1a9b      	subs	r3, r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	440b      	add	r3, r1
 8005056:	333c      	adds	r3, #60	; 0x3c
 8005058:	7bfa      	ldrb	r2, [r7, #15]
 800505a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800505c:	7bfa      	ldrb	r2, [r7, #15]
 800505e:	7bfb      	ldrb	r3, [r7, #15]
 8005060:	b298      	uxth	r0, r3
 8005062:	6879      	ldr	r1, [r7, #4]
 8005064:	4613      	mov	r3, r2
 8005066:	00db      	lsls	r3, r3, #3
 8005068:	1a9b      	subs	r3, r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	440b      	add	r3, r1
 800506e:	3342      	adds	r3, #66	; 0x42
 8005070:	4602      	mov	r2, r0
 8005072:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005074:	7bfa      	ldrb	r2, [r7, #15]
 8005076:	6879      	ldr	r1, [r7, #4]
 8005078:	4613      	mov	r3, r2
 800507a:	00db      	lsls	r3, r3, #3
 800507c:	1a9b      	subs	r3, r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	440b      	add	r3, r1
 8005082:	333f      	adds	r3, #63	; 0x3f
 8005084:	2200      	movs	r2, #0
 8005086:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005088:	7bfa      	ldrb	r2, [r7, #15]
 800508a:	6879      	ldr	r1, [r7, #4]
 800508c:	4613      	mov	r3, r2
 800508e:	00db      	lsls	r3, r3, #3
 8005090:	1a9b      	subs	r3, r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	440b      	add	r3, r1
 8005096:	3344      	adds	r3, #68	; 0x44
 8005098:	2200      	movs	r2, #0
 800509a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800509c:	7bfa      	ldrb	r2, [r7, #15]
 800509e:	6879      	ldr	r1, [r7, #4]
 80050a0:	4613      	mov	r3, r2
 80050a2:	00db      	lsls	r3, r3, #3
 80050a4:	1a9b      	subs	r3, r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	440b      	add	r3, r1
 80050aa:	3348      	adds	r3, #72	; 0x48
 80050ac:	2200      	movs	r2, #0
 80050ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80050b0:	7bfa      	ldrb	r2, [r7, #15]
 80050b2:	6879      	ldr	r1, [r7, #4]
 80050b4:	4613      	mov	r3, r2
 80050b6:	00db      	lsls	r3, r3, #3
 80050b8:	1a9b      	subs	r3, r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	440b      	add	r3, r1
 80050be:	3350      	adds	r3, #80	; 0x50
 80050c0:	2200      	movs	r2, #0
 80050c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
 80050c6:	3301      	adds	r3, #1
 80050c8:	73fb      	strb	r3, [r7, #15]
 80050ca:	7bfa      	ldrb	r2, [r7, #15]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d3af      	bcc.n	8005034 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050d4:	2300      	movs	r3, #0
 80050d6:	73fb      	strb	r3, [r7, #15]
 80050d8:	e044      	b.n	8005164 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80050da:	7bfa      	ldrb	r2, [r7, #15]
 80050dc:	6879      	ldr	r1, [r7, #4]
 80050de:	4613      	mov	r3, r2
 80050e0:	00db      	lsls	r3, r3, #3
 80050e2:	1a9b      	subs	r3, r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	440b      	add	r3, r1
 80050e8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80050ec:	2200      	movs	r2, #0
 80050ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80050f0:	7bfa      	ldrb	r2, [r7, #15]
 80050f2:	6879      	ldr	r1, [r7, #4]
 80050f4:	4613      	mov	r3, r2
 80050f6:	00db      	lsls	r3, r3, #3
 80050f8:	1a9b      	subs	r3, r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	440b      	add	r3, r1
 80050fe:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005102:	7bfa      	ldrb	r2, [r7, #15]
 8005104:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005106:	7bfa      	ldrb	r2, [r7, #15]
 8005108:	6879      	ldr	r1, [r7, #4]
 800510a:	4613      	mov	r3, r2
 800510c:	00db      	lsls	r3, r3, #3
 800510e:	1a9b      	subs	r3, r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	440b      	add	r3, r1
 8005114:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005118:	2200      	movs	r2, #0
 800511a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800511c:	7bfa      	ldrb	r2, [r7, #15]
 800511e:	6879      	ldr	r1, [r7, #4]
 8005120:	4613      	mov	r3, r2
 8005122:	00db      	lsls	r3, r3, #3
 8005124:	1a9b      	subs	r3, r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	440b      	add	r3, r1
 800512a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800512e:	2200      	movs	r2, #0
 8005130:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005132:	7bfa      	ldrb	r2, [r7, #15]
 8005134:	6879      	ldr	r1, [r7, #4]
 8005136:	4613      	mov	r3, r2
 8005138:	00db      	lsls	r3, r3, #3
 800513a:	1a9b      	subs	r3, r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	440b      	add	r3, r1
 8005140:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005144:	2200      	movs	r2, #0
 8005146:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005148:	7bfa      	ldrb	r2, [r7, #15]
 800514a:	6879      	ldr	r1, [r7, #4]
 800514c:	4613      	mov	r3, r2
 800514e:	00db      	lsls	r3, r3, #3
 8005150:	1a9b      	subs	r3, r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	440b      	add	r3, r1
 8005156:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800515a:	2200      	movs	r2, #0
 800515c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800515e:	7bfb      	ldrb	r3, [r7, #15]
 8005160:	3301      	adds	r3, #1
 8005162:	73fb      	strb	r3, [r7, #15]
 8005164:	7bfa      	ldrb	r2, [r7, #15]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	429a      	cmp	r2, r3
 800516c:	d3b5      	bcc.n	80050da <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	603b      	str	r3, [r7, #0]
 8005174:	687e      	ldr	r6, [r7, #4]
 8005176:	466d      	mov	r5, sp
 8005178:	f106 0410 	add.w	r4, r6, #16
 800517c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800517e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005180:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005182:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005184:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005188:	e885 0003 	stmia.w	r5, {r0, r1}
 800518c:	1d33      	adds	r3, r6, #4
 800518e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005190:	6838      	ldr	r0, [r7, #0]
 8005192:	f002 faed 	bl	8007770 <USB_DevInit>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d005      	beq.n	80051a8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2202      	movs	r2, #2
 80051a0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e014      	b.n	80051d2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d102      	bne.n	80051c6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 f80a 	bl	80051da <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f002 fc7d 	bl	8007aca <USB_DevDisconnect>

  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3714      	adds	r7, #20
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080051da <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80051da:	b480      	push	{r7}
 80051dc:	b085      	sub	sp, #20
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800520c:	f043 0303 	orr.w	r3, r3, #3
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
	...

08005224 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005224:	b480      	push	{r7}
 8005226:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005228:	4b05      	ldr	r3, [pc, #20]	; (8005240 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a04      	ldr	r2, [pc, #16]	; (8005240 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800522e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005232:	6013      	str	r3, [r2, #0]
}
 8005234:	bf00      	nop
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	40007000 	.word	0x40007000

08005244 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005244:	b480      	push	{r7}
 8005246:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005248:	4b04      	ldr	r3, [pc, #16]	; (800525c <HAL_PWREx_GetVoltageRange+0x18>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005250:	4618      	mov	r0, r3
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	40007000 	.word	0x40007000

08005260 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800526e:	d130      	bne.n	80052d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005270:	4b23      	ldr	r3, [pc, #140]	; (8005300 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800527c:	d038      	beq.n	80052f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800527e:	4b20      	ldr	r3, [pc, #128]	; (8005300 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005286:	4a1e      	ldr	r2, [pc, #120]	; (8005300 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005288:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800528c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800528e:	4b1d      	ldr	r3, [pc, #116]	; (8005304 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2232      	movs	r2, #50	; 0x32
 8005294:	fb02 f303 	mul.w	r3, r2, r3
 8005298:	4a1b      	ldr	r2, [pc, #108]	; (8005308 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800529a:	fba2 2303 	umull	r2, r3, r2, r3
 800529e:	0c9b      	lsrs	r3, r3, #18
 80052a0:	3301      	adds	r3, #1
 80052a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052a4:	e002      	b.n	80052ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	3b01      	subs	r3, #1
 80052aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052ac:	4b14      	ldr	r3, [pc, #80]	; (8005300 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052b8:	d102      	bne.n	80052c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1f2      	bne.n	80052a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052c0:	4b0f      	ldr	r3, [pc, #60]	; (8005300 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052cc:	d110      	bne.n	80052f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e00f      	b.n	80052f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80052d2:	4b0b      	ldr	r3, [pc, #44]	; (8005300 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80052da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052de:	d007      	beq.n	80052f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80052e0:	4b07      	ldr	r3, [pc, #28]	; (8005300 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80052e8:	4a05      	ldr	r2, [pc, #20]	; (8005300 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	40007000 	.word	0x40007000
 8005304:	20000004 	.word	0x20000004
 8005308:	431bde83 	.word	0x431bde83

0800530c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800530c:	b480      	push	{r7}
 800530e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005310:	4b05      	ldr	r3, [pc, #20]	; (8005328 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	4a04      	ldr	r2, [pc, #16]	; (8005328 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005316:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800531a:	6053      	str	r3, [r2, #4]
}
 800531c:	bf00      	nop
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	40007000 	.word	0x40007000

0800532c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af02      	add	r7, sp, #8
 8005332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005334:	f7fc fdb0 	bl	8001e98 <HAL_GetTick>
 8005338:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d101      	bne.n	8005344 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e063      	b.n	800540c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800534a:	b2db      	uxtb	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10b      	bne.n	8005368 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f7fc fac7 	bl	80018ec <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800535e:	f241 3188 	movw	r1, #5000	; 0x1388
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f858 	bl	8005418 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	3b01      	subs	r3, #1
 8005378:	021a      	lsls	r2, r3, #8
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005386:	9300      	str	r3, [sp, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	2120      	movs	r1, #32
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f850 	bl	8005434 <QSPI_WaitFlagStateUntilTimeout>
 8005394:	4603      	mov	r3, r0
 8005396:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005398:	7afb      	ldrb	r3, [r7, #11]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d131      	bne.n	8005402 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80053a8:	f023 0310 	bic.w	r3, r3, #16
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	6852      	ldr	r2, [r2, #4]
 80053b0:	0611      	lsls	r1, r2, #24
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	68d2      	ldr	r2, [r2, #12]
 80053b6:	4311      	orrs	r1, r2
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	6812      	ldr	r2, [r2, #0]
 80053bc:	430b      	orrs	r3, r1
 80053be:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	4b13      	ldr	r3, [pc, #76]	; (8005414 <HAL_QSPI_Init+0xe8>)
 80053c8:	4013      	ands	r3, r2
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	6912      	ldr	r2, [r2, #16]
 80053ce:	0411      	lsls	r1, r2, #16
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	6952      	ldr	r2, [r2, #20]
 80053d4:	4311      	orrs	r1, r2
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	6992      	ldr	r2, [r2, #24]
 80053da:	4311      	orrs	r1, r2
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	6812      	ldr	r2, [r2, #0]
 80053e0:	430b      	orrs	r3, r1
 80053e2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f042 0201 	orr.w	r2, r2, #1
 80053f2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800540a:	7afb      	ldrb	r3, [r7, #11]
}
 800540c:	4618      	mov	r0, r3
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	ffe0f8fe 	.word	0xffe0f8fe

08005418 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	683a      	ldr	r2, [r7, #0]
 8005426:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	603b      	str	r3, [r7, #0]
 8005440:	4613      	mov	r3, r2
 8005442:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005444:	e01a      	b.n	800547c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544c:	d016      	beq.n	800547c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800544e:	f7fc fd23 	bl	8001e98 <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	429a      	cmp	r2, r3
 800545c:	d302      	bcc.n	8005464 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10b      	bne.n	800547c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2204      	movs	r2, #4
 8005468:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005470:	f043 0201 	orr.w	r2, r3, #1
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e00e      	b.n	800549a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689a      	ldr	r2, [r3, #8]
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	4013      	ands	r3, r2
 8005486:	2b00      	cmp	r3, #0
 8005488:	bf14      	ite	ne
 800548a:	2301      	movne	r3, #1
 800548c:	2300      	moveq	r3, #0
 800548e:	b2db      	uxtb	r3, r3
 8005490:	461a      	mov	r2, r3
 8005492:	79fb      	ldrb	r3, [r7, #7]
 8005494:	429a      	cmp	r2, r3
 8005496:	d1d6      	bne.n	8005446 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
	...

080054a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b088      	sub	sp, #32
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e3d4      	b.n	8005c60 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054b6:	4ba1      	ldr	r3, [pc, #644]	; (800573c <HAL_RCC_OscConfig+0x298>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f003 030c 	and.w	r3, r3, #12
 80054be:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054c0:	4b9e      	ldr	r3, [pc, #632]	; (800573c <HAL_RCC_OscConfig+0x298>)
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f003 0303 	and.w	r3, r3, #3
 80054c8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0310 	and.w	r3, r3, #16
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f000 80e4 	beq.w	80056a0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d007      	beq.n	80054ee <HAL_RCC_OscConfig+0x4a>
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	2b0c      	cmp	r3, #12
 80054e2:	f040 808b 	bne.w	80055fc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	f040 8087 	bne.w	80055fc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80054ee:	4b93      	ldr	r3, [pc, #588]	; (800573c <HAL_RCC_OscConfig+0x298>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d005      	beq.n	8005506 <HAL_RCC_OscConfig+0x62>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e3ac      	b.n	8005c60 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a1a      	ldr	r2, [r3, #32]
 800550a:	4b8c      	ldr	r3, [pc, #560]	; (800573c <HAL_RCC_OscConfig+0x298>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0308 	and.w	r3, r3, #8
 8005512:	2b00      	cmp	r3, #0
 8005514:	d004      	beq.n	8005520 <HAL_RCC_OscConfig+0x7c>
 8005516:	4b89      	ldr	r3, [pc, #548]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800551e:	e005      	b.n	800552c <HAL_RCC_OscConfig+0x88>
 8005520:	4b86      	ldr	r3, [pc, #536]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005526:	091b      	lsrs	r3, r3, #4
 8005528:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800552c:	4293      	cmp	r3, r2
 800552e:	d223      	bcs.n	8005578 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a1b      	ldr	r3, [r3, #32]
 8005534:	4618      	mov	r0, r3
 8005536:	f000 fd41 	bl	8005fbc <RCC_SetFlashLatencyFromMSIRange>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e38d      	b.n	8005c60 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005544:	4b7d      	ldr	r3, [pc, #500]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a7c      	ldr	r2, [pc, #496]	; (800573c <HAL_RCC_OscConfig+0x298>)
 800554a:	f043 0308 	orr.w	r3, r3, #8
 800554e:	6013      	str	r3, [r2, #0]
 8005550:	4b7a      	ldr	r3, [pc, #488]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a1b      	ldr	r3, [r3, #32]
 800555c:	4977      	ldr	r1, [pc, #476]	; (800573c <HAL_RCC_OscConfig+0x298>)
 800555e:	4313      	orrs	r3, r2
 8005560:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005562:	4b76      	ldr	r3, [pc, #472]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	021b      	lsls	r3, r3, #8
 8005570:	4972      	ldr	r1, [pc, #456]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005572:	4313      	orrs	r3, r2
 8005574:	604b      	str	r3, [r1, #4]
 8005576:	e025      	b.n	80055c4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005578:	4b70      	ldr	r3, [pc, #448]	; (800573c <HAL_RCC_OscConfig+0x298>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a6f      	ldr	r2, [pc, #444]	; (800573c <HAL_RCC_OscConfig+0x298>)
 800557e:	f043 0308 	orr.w	r3, r3, #8
 8005582:	6013      	str	r3, [r2, #0]
 8005584:	4b6d      	ldr	r3, [pc, #436]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a1b      	ldr	r3, [r3, #32]
 8005590:	496a      	ldr	r1, [pc, #424]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005592:	4313      	orrs	r3, r2
 8005594:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005596:	4b69      	ldr	r3, [pc, #420]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	021b      	lsls	r3, r3, #8
 80055a4:	4965      	ldr	r1, [pc, #404]	; (800573c <HAL_RCC_OscConfig+0x298>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d109      	bne.n	80055c4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a1b      	ldr	r3, [r3, #32]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f000 fd01 	bl	8005fbc <RCC_SetFlashLatencyFromMSIRange>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d001      	beq.n	80055c4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e34d      	b.n	8005c60 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80055c4:	f000 fc36 	bl	8005e34 <HAL_RCC_GetSysClockFreq>
 80055c8:	4602      	mov	r2, r0
 80055ca:	4b5c      	ldr	r3, [pc, #368]	; (800573c <HAL_RCC_OscConfig+0x298>)
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	091b      	lsrs	r3, r3, #4
 80055d0:	f003 030f 	and.w	r3, r3, #15
 80055d4:	495a      	ldr	r1, [pc, #360]	; (8005740 <HAL_RCC_OscConfig+0x29c>)
 80055d6:	5ccb      	ldrb	r3, [r1, r3]
 80055d8:	f003 031f 	and.w	r3, r3, #31
 80055dc:	fa22 f303 	lsr.w	r3, r2, r3
 80055e0:	4a58      	ldr	r2, [pc, #352]	; (8005744 <HAL_RCC_OscConfig+0x2a0>)
 80055e2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80055e4:	4b58      	ldr	r3, [pc, #352]	; (8005748 <HAL_RCC_OscConfig+0x2a4>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7fc fc05 	bl	8001df8 <HAL_InitTick>
 80055ee:	4603      	mov	r3, r0
 80055f0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80055f2:	7bfb      	ldrb	r3, [r7, #15]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d052      	beq.n	800569e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80055f8:	7bfb      	ldrb	r3, [r7, #15]
 80055fa:	e331      	b.n	8005c60 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d032      	beq.n	800566a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005604:	4b4d      	ldr	r3, [pc, #308]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a4c      	ldr	r2, [pc, #304]	; (800573c <HAL_RCC_OscConfig+0x298>)
 800560a:	f043 0301 	orr.w	r3, r3, #1
 800560e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005610:	f7fc fc42 	bl	8001e98 <HAL_GetTick>
 8005614:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005616:	e008      	b.n	800562a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005618:	f7fc fc3e 	bl	8001e98 <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	2b02      	cmp	r3, #2
 8005624:	d901      	bls.n	800562a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e31a      	b.n	8005c60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800562a:	4b44      	ldr	r3, [pc, #272]	; (800573c <HAL_RCC_OscConfig+0x298>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0302 	and.w	r3, r3, #2
 8005632:	2b00      	cmp	r3, #0
 8005634:	d0f0      	beq.n	8005618 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005636:	4b41      	ldr	r3, [pc, #260]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a40      	ldr	r2, [pc, #256]	; (800573c <HAL_RCC_OscConfig+0x298>)
 800563c:	f043 0308 	orr.w	r3, r3, #8
 8005640:	6013      	str	r3, [r2, #0]
 8005642:	4b3e      	ldr	r3, [pc, #248]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	493b      	ldr	r1, [pc, #236]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005650:	4313      	orrs	r3, r2
 8005652:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005654:	4b39      	ldr	r3, [pc, #228]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	69db      	ldr	r3, [r3, #28]
 8005660:	021b      	lsls	r3, r3, #8
 8005662:	4936      	ldr	r1, [pc, #216]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005664:	4313      	orrs	r3, r2
 8005666:	604b      	str	r3, [r1, #4]
 8005668:	e01a      	b.n	80056a0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800566a:	4b34      	ldr	r3, [pc, #208]	; (800573c <HAL_RCC_OscConfig+0x298>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a33      	ldr	r2, [pc, #204]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005670:	f023 0301 	bic.w	r3, r3, #1
 8005674:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005676:	f7fc fc0f 	bl	8001e98 <HAL_GetTick>
 800567a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800567c:	e008      	b.n	8005690 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800567e:	f7fc fc0b 	bl	8001e98 <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	2b02      	cmp	r3, #2
 800568a:	d901      	bls.n	8005690 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e2e7      	b.n	8005c60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005690:	4b2a      	ldr	r3, [pc, #168]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0302 	and.w	r3, r3, #2
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1f0      	bne.n	800567e <HAL_RCC_OscConfig+0x1da>
 800569c:	e000      	b.n	80056a0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800569e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0301 	and.w	r3, r3, #1
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d074      	beq.n	8005796 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	2b08      	cmp	r3, #8
 80056b0:	d005      	beq.n	80056be <HAL_RCC_OscConfig+0x21a>
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	2b0c      	cmp	r3, #12
 80056b6:	d10e      	bne.n	80056d6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	2b03      	cmp	r3, #3
 80056bc:	d10b      	bne.n	80056d6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056be:	4b1f      	ldr	r3, [pc, #124]	; (800573c <HAL_RCC_OscConfig+0x298>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d064      	beq.n	8005794 <HAL_RCC_OscConfig+0x2f0>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d160      	bne.n	8005794 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e2c4      	b.n	8005c60 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056de:	d106      	bne.n	80056ee <HAL_RCC_OscConfig+0x24a>
 80056e0:	4b16      	ldr	r3, [pc, #88]	; (800573c <HAL_RCC_OscConfig+0x298>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a15      	ldr	r2, [pc, #84]	; (800573c <HAL_RCC_OscConfig+0x298>)
 80056e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056ea:	6013      	str	r3, [r2, #0]
 80056ec:	e01d      	b.n	800572a <HAL_RCC_OscConfig+0x286>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056f6:	d10c      	bne.n	8005712 <HAL_RCC_OscConfig+0x26e>
 80056f8:	4b10      	ldr	r3, [pc, #64]	; (800573c <HAL_RCC_OscConfig+0x298>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a0f      	ldr	r2, [pc, #60]	; (800573c <HAL_RCC_OscConfig+0x298>)
 80056fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005702:	6013      	str	r3, [r2, #0]
 8005704:	4b0d      	ldr	r3, [pc, #52]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a0c      	ldr	r2, [pc, #48]	; (800573c <HAL_RCC_OscConfig+0x298>)
 800570a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800570e:	6013      	str	r3, [r2, #0]
 8005710:	e00b      	b.n	800572a <HAL_RCC_OscConfig+0x286>
 8005712:	4b0a      	ldr	r3, [pc, #40]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a09      	ldr	r2, [pc, #36]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005718:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800571c:	6013      	str	r3, [r2, #0]
 800571e:	4b07      	ldr	r3, [pc, #28]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a06      	ldr	r2, [pc, #24]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005724:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005728:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d01c      	beq.n	800576c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005732:	f7fc fbb1 	bl	8001e98 <HAL_GetTick>
 8005736:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005738:	e011      	b.n	800575e <HAL_RCC_OscConfig+0x2ba>
 800573a:	bf00      	nop
 800573c:	40021000 	.word	0x40021000
 8005740:	08008ae0 	.word	0x08008ae0
 8005744:	20000004 	.word	0x20000004
 8005748:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800574c:	f7fc fba4 	bl	8001e98 <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	2b64      	cmp	r3, #100	; 0x64
 8005758:	d901      	bls.n	800575e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e280      	b.n	8005c60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800575e:	4baf      	ldr	r3, [pc, #700]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d0f0      	beq.n	800574c <HAL_RCC_OscConfig+0x2a8>
 800576a:	e014      	b.n	8005796 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800576c:	f7fc fb94 	bl	8001e98 <HAL_GetTick>
 8005770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005772:	e008      	b.n	8005786 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005774:	f7fc fb90 	bl	8001e98 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b64      	cmp	r3, #100	; 0x64
 8005780:	d901      	bls.n	8005786 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e26c      	b.n	8005c60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005786:	4ba5      	ldr	r3, [pc, #660]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1f0      	bne.n	8005774 <HAL_RCC_OscConfig+0x2d0>
 8005792:	e000      	b.n	8005796 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d060      	beq.n	8005864 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	2b04      	cmp	r3, #4
 80057a6:	d005      	beq.n	80057b4 <HAL_RCC_OscConfig+0x310>
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	2b0c      	cmp	r3, #12
 80057ac:	d119      	bne.n	80057e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d116      	bne.n	80057e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057b4:	4b99      	ldr	r3, [pc, #612]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d005      	beq.n	80057cc <HAL_RCC_OscConfig+0x328>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d101      	bne.n	80057cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e249      	b.n	8005c60 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057cc:	4b93      	ldr	r3, [pc, #588]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	061b      	lsls	r3, r3, #24
 80057da:	4990      	ldr	r1, [pc, #576]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057e0:	e040      	b.n	8005864 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d023      	beq.n	8005832 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057ea:	4b8c      	ldr	r3, [pc, #560]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a8b      	ldr	r2, [pc, #556]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 80057f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057f6:	f7fc fb4f 	bl	8001e98 <HAL_GetTick>
 80057fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057fc:	e008      	b.n	8005810 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057fe:	f7fc fb4b 	bl	8001e98 <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	2b02      	cmp	r3, #2
 800580a:	d901      	bls.n	8005810 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e227      	b.n	8005c60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005810:	4b82      	ldr	r3, [pc, #520]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005818:	2b00      	cmp	r3, #0
 800581a:	d0f0      	beq.n	80057fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800581c:	4b7f      	ldr	r3, [pc, #508]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	061b      	lsls	r3, r3, #24
 800582a:	497c      	ldr	r1, [pc, #496]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 800582c:	4313      	orrs	r3, r2
 800582e:	604b      	str	r3, [r1, #4]
 8005830:	e018      	b.n	8005864 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005832:	4b7a      	ldr	r3, [pc, #488]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a79      	ldr	r2, [pc, #484]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 8005838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800583c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800583e:	f7fc fb2b 	bl	8001e98 <HAL_GetTick>
 8005842:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005844:	e008      	b.n	8005858 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005846:	f7fc fb27 	bl	8001e98 <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	2b02      	cmp	r3, #2
 8005852:	d901      	bls.n	8005858 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e203      	b.n	8005c60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005858:	4b70      	ldr	r3, [pc, #448]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1f0      	bne.n	8005846 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0308 	and.w	r3, r3, #8
 800586c:	2b00      	cmp	r3, #0
 800586e:	d03c      	beq.n	80058ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	695b      	ldr	r3, [r3, #20]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d01c      	beq.n	80058b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005878:	4b68      	ldr	r3, [pc, #416]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 800587a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800587e:	4a67      	ldr	r2, [pc, #412]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 8005880:	f043 0301 	orr.w	r3, r3, #1
 8005884:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005888:	f7fc fb06 	bl	8001e98 <HAL_GetTick>
 800588c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800588e:	e008      	b.n	80058a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005890:	f7fc fb02 	bl	8001e98 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b02      	cmp	r3, #2
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e1de      	b.n	8005c60 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058a2:	4b5e      	ldr	r3, [pc, #376]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 80058a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058a8:	f003 0302 	and.w	r3, r3, #2
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d0ef      	beq.n	8005890 <HAL_RCC_OscConfig+0x3ec>
 80058b0:	e01b      	b.n	80058ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058b2:	4b5a      	ldr	r3, [pc, #360]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 80058b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058b8:	4a58      	ldr	r2, [pc, #352]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 80058ba:	f023 0301 	bic.w	r3, r3, #1
 80058be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c2:	f7fc fae9 	bl	8001e98 <HAL_GetTick>
 80058c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80058c8:	e008      	b.n	80058dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058ca:	f7fc fae5 	bl	8001e98 <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d901      	bls.n	80058dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e1c1      	b.n	8005c60 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80058dc:	4b4f      	ldr	r3, [pc, #316]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 80058de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058e2:	f003 0302 	and.w	r3, r3, #2
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1ef      	bne.n	80058ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0304 	and.w	r3, r3, #4
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f000 80a6 	beq.w	8005a44 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058f8:	2300      	movs	r3, #0
 80058fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80058fc:	4b47      	ldr	r3, [pc, #284]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 80058fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d10d      	bne.n	8005924 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005908:	4b44      	ldr	r3, [pc, #272]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 800590a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800590c:	4a43      	ldr	r2, [pc, #268]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 800590e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005912:	6593      	str	r3, [r2, #88]	; 0x58
 8005914:	4b41      	ldr	r3, [pc, #260]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 8005916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800591c:	60bb      	str	r3, [r7, #8]
 800591e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005920:	2301      	movs	r3, #1
 8005922:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005924:	4b3e      	ldr	r3, [pc, #248]	; (8005a20 <HAL_RCC_OscConfig+0x57c>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592c:	2b00      	cmp	r3, #0
 800592e:	d118      	bne.n	8005962 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005930:	4b3b      	ldr	r3, [pc, #236]	; (8005a20 <HAL_RCC_OscConfig+0x57c>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a3a      	ldr	r2, [pc, #232]	; (8005a20 <HAL_RCC_OscConfig+0x57c>)
 8005936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800593a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800593c:	f7fc faac 	bl	8001e98 <HAL_GetTick>
 8005940:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005942:	e008      	b.n	8005956 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005944:	f7fc faa8 	bl	8001e98 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	2b02      	cmp	r3, #2
 8005950:	d901      	bls.n	8005956 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e184      	b.n	8005c60 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005956:	4b32      	ldr	r3, [pc, #200]	; (8005a20 <HAL_RCC_OscConfig+0x57c>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800595e:	2b00      	cmp	r3, #0
 8005960:	d0f0      	beq.n	8005944 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d108      	bne.n	800597c <HAL_RCC_OscConfig+0x4d8>
 800596a:	4b2c      	ldr	r3, [pc, #176]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 800596c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005970:	4a2a      	ldr	r2, [pc, #168]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 8005972:	f043 0301 	orr.w	r3, r3, #1
 8005976:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800597a:	e024      	b.n	80059c6 <HAL_RCC_OscConfig+0x522>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	2b05      	cmp	r3, #5
 8005982:	d110      	bne.n	80059a6 <HAL_RCC_OscConfig+0x502>
 8005984:	4b25      	ldr	r3, [pc, #148]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 8005986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800598a:	4a24      	ldr	r2, [pc, #144]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 800598c:	f043 0304 	orr.w	r3, r3, #4
 8005990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005994:	4b21      	ldr	r3, [pc, #132]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 8005996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800599a:	4a20      	ldr	r2, [pc, #128]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 800599c:	f043 0301 	orr.w	r3, r3, #1
 80059a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059a4:	e00f      	b.n	80059c6 <HAL_RCC_OscConfig+0x522>
 80059a6:	4b1d      	ldr	r3, [pc, #116]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 80059a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ac:	4a1b      	ldr	r2, [pc, #108]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 80059ae:	f023 0301 	bic.w	r3, r3, #1
 80059b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059b6:	4b19      	ldr	r3, [pc, #100]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 80059b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059bc:	4a17      	ldr	r2, [pc, #92]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 80059be:	f023 0304 	bic.w	r3, r3, #4
 80059c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d016      	beq.n	80059fc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ce:	f7fc fa63 	bl	8001e98 <HAL_GetTick>
 80059d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059d4:	e00a      	b.n	80059ec <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059d6:	f7fc fa5f 	bl	8001e98 <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d901      	bls.n	80059ec <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e139      	b.n	8005c60 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059ec:	4b0b      	ldr	r3, [pc, #44]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 80059ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d0ed      	beq.n	80059d6 <HAL_RCC_OscConfig+0x532>
 80059fa:	e01a      	b.n	8005a32 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059fc:	f7fc fa4c 	bl	8001e98 <HAL_GetTick>
 8005a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a02:	e00f      	b.n	8005a24 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a04:	f7fc fa48 	bl	8001e98 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d906      	bls.n	8005a24 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e122      	b.n	8005c60 <HAL_RCC_OscConfig+0x7bc>
 8005a1a:	bf00      	nop
 8005a1c:	40021000 	.word	0x40021000
 8005a20:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a24:	4b90      	ldr	r3, [pc, #576]	; (8005c68 <HAL_RCC_OscConfig+0x7c4>)
 8005a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1e8      	bne.n	8005a04 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a32:	7ffb      	ldrb	r3, [r7, #31]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d105      	bne.n	8005a44 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a38:	4b8b      	ldr	r3, [pc, #556]	; (8005c68 <HAL_RCC_OscConfig+0x7c4>)
 8005a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a3c:	4a8a      	ldr	r2, [pc, #552]	; (8005c68 <HAL_RCC_OscConfig+0x7c4>)
 8005a3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a42:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f000 8108 	beq.w	8005c5e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	f040 80d0 	bne.w	8005bf8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005a58:	4b83      	ldr	r3, [pc, #524]	; (8005c68 <HAL_RCC_OscConfig+0x7c4>)
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	f003 0203 	and.w	r2, r3, #3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d130      	bne.n	8005ace <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a76:	3b01      	subs	r3, #1
 8005a78:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d127      	bne.n	8005ace <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a88:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d11f      	bne.n	8005ace <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a98:	2a07      	cmp	r2, #7
 8005a9a:	bf14      	ite	ne
 8005a9c:	2201      	movne	r2, #1
 8005a9e:	2200      	moveq	r2, #0
 8005aa0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d113      	bne.n	8005ace <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab0:	085b      	lsrs	r3, r3, #1
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d109      	bne.n	8005ace <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac4:	085b      	lsrs	r3, r3, #1
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d06e      	beq.n	8005bac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	2b0c      	cmp	r3, #12
 8005ad2:	d069      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005ad4:	4b64      	ldr	r3, [pc, #400]	; (8005c68 <HAL_RCC_OscConfig+0x7c4>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d105      	bne.n	8005aec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005ae0:	4b61      	ldr	r3, [pc, #388]	; (8005c68 <HAL_RCC_OscConfig+0x7c4>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d001      	beq.n	8005af0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e0b7      	b.n	8005c60 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005af0:	4b5d      	ldr	r3, [pc, #372]	; (8005c68 <HAL_RCC_OscConfig+0x7c4>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a5c      	ldr	r2, [pc, #368]	; (8005c68 <HAL_RCC_OscConfig+0x7c4>)
 8005af6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005afa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005afc:	f7fc f9cc 	bl	8001e98 <HAL_GetTick>
 8005b00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b02:	e008      	b.n	8005b16 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b04:	f7fc f9c8 	bl	8001e98 <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d901      	bls.n	8005b16 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e0a4      	b.n	8005c60 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b16:	4b54      	ldr	r3, [pc, #336]	; (8005c68 <HAL_RCC_OscConfig+0x7c4>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1f0      	bne.n	8005b04 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b22:	4b51      	ldr	r3, [pc, #324]	; (8005c68 <HAL_RCC_OscConfig+0x7c4>)
 8005b24:	68da      	ldr	r2, [r3, #12]
 8005b26:	4b51      	ldr	r3, [pc, #324]	; (8005c6c <HAL_RCC_OscConfig+0x7c8>)
 8005b28:	4013      	ands	r3, r2
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005b32:	3a01      	subs	r2, #1
 8005b34:	0112      	lsls	r2, r2, #4
 8005b36:	4311      	orrs	r1, r2
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b3c:	0212      	lsls	r2, r2, #8
 8005b3e:	4311      	orrs	r1, r2
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005b44:	0852      	lsrs	r2, r2, #1
 8005b46:	3a01      	subs	r2, #1
 8005b48:	0552      	lsls	r2, r2, #21
 8005b4a:	4311      	orrs	r1, r2
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005b50:	0852      	lsrs	r2, r2, #1
 8005b52:	3a01      	subs	r2, #1
 8005b54:	0652      	lsls	r2, r2, #25
 8005b56:	4311      	orrs	r1, r2
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b5c:	0912      	lsrs	r2, r2, #4
 8005b5e:	0452      	lsls	r2, r2, #17
 8005b60:	430a      	orrs	r2, r1
 8005b62:	4941      	ldr	r1, [pc, #260]	; (8005c68 <HAL_RCC_OscConfig+0x7c4>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005b68:	4b3f      	ldr	r3, [pc, #252]	; (8005c68 <HAL_RCC_OscConfig+0x7c4>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a3e      	ldr	r2, [pc, #248]	; (8005c68 <HAL_RCC_OscConfig+0x7c4>)
 8005b6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b72:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b74:	4b3c      	ldr	r3, [pc, #240]	; (8005c68 <HAL_RCC_OscConfig+0x7c4>)
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	4a3b      	ldr	r2, [pc, #236]	; (8005c68 <HAL_RCC_OscConfig+0x7c4>)
 8005b7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b7e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b80:	f7fc f98a 	bl	8001e98 <HAL_GetTick>
 8005b84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b86:	e008      	b.n	8005b9a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b88:	f7fc f986 	bl	8001e98 <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d901      	bls.n	8005b9a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e062      	b.n	8005c60 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b9a:	4b33      	ldr	r3, [pc, #204]	; (8005c68 <HAL_RCC_OscConfig+0x7c4>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d0f0      	beq.n	8005b88 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ba6:	e05a      	b.n	8005c5e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e059      	b.n	8005c60 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bac:	4b2e      	ldr	r3, [pc, #184]	; (8005c68 <HAL_RCC_OscConfig+0x7c4>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d152      	bne.n	8005c5e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005bb8:	4b2b      	ldr	r3, [pc, #172]	; (8005c68 <HAL_RCC_OscConfig+0x7c4>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a2a      	ldr	r2, [pc, #168]	; (8005c68 <HAL_RCC_OscConfig+0x7c4>)
 8005bbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bc2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005bc4:	4b28      	ldr	r3, [pc, #160]	; (8005c68 <HAL_RCC_OscConfig+0x7c4>)
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	4a27      	ldr	r2, [pc, #156]	; (8005c68 <HAL_RCC_OscConfig+0x7c4>)
 8005bca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005bd0:	f7fc f962 	bl	8001e98 <HAL_GetTick>
 8005bd4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bd6:	e008      	b.n	8005bea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bd8:	f7fc f95e 	bl	8001e98 <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d901      	bls.n	8005bea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e03a      	b.n	8005c60 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bea:	4b1f      	ldr	r3, [pc, #124]	; (8005c68 <HAL_RCC_OscConfig+0x7c4>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d0f0      	beq.n	8005bd8 <HAL_RCC_OscConfig+0x734>
 8005bf6:	e032      	b.n	8005c5e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	2b0c      	cmp	r3, #12
 8005bfc:	d02d      	beq.n	8005c5a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bfe:	4b1a      	ldr	r3, [pc, #104]	; (8005c68 <HAL_RCC_OscConfig+0x7c4>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a19      	ldr	r2, [pc, #100]	; (8005c68 <HAL_RCC_OscConfig+0x7c4>)
 8005c04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c08:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005c0a:	4b17      	ldr	r3, [pc, #92]	; (8005c68 <HAL_RCC_OscConfig+0x7c4>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d105      	bne.n	8005c22 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005c16:	4b14      	ldr	r3, [pc, #80]	; (8005c68 <HAL_RCC_OscConfig+0x7c4>)
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	4a13      	ldr	r2, [pc, #76]	; (8005c68 <HAL_RCC_OscConfig+0x7c4>)
 8005c1c:	f023 0303 	bic.w	r3, r3, #3
 8005c20:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005c22:	4b11      	ldr	r3, [pc, #68]	; (8005c68 <HAL_RCC_OscConfig+0x7c4>)
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	4a10      	ldr	r2, [pc, #64]	; (8005c68 <HAL_RCC_OscConfig+0x7c4>)
 8005c28:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005c2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c30:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c32:	f7fc f931 	bl	8001e98 <HAL_GetTick>
 8005c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c38:	e008      	b.n	8005c4c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c3a:	f7fc f92d 	bl	8001e98 <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d901      	bls.n	8005c4c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e009      	b.n	8005c60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c4c:	4b06      	ldr	r3, [pc, #24]	; (8005c68 <HAL_RCC_OscConfig+0x7c4>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1f0      	bne.n	8005c3a <HAL_RCC_OscConfig+0x796>
 8005c58:	e001      	b.n	8005c5e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e000      	b.n	8005c60 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3720      	adds	r7, #32
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	40021000 	.word	0x40021000
 8005c6c:	f99d808c 	.word	0xf99d808c

08005c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e0c8      	b.n	8005e16 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c84:	4b66      	ldr	r3, [pc, #408]	; (8005e20 <HAL_RCC_ClockConfig+0x1b0>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0307 	and.w	r3, r3, #7
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d910      	bls.n	8005cb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c92:	4b63      	ldr	r3, [pc, #396]	; (8005e20 <HAL_RCC_ClockConfig+0x1b0>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f023 0207 	bic.w	r2, r3, #7
 8005c9a:	4961      	ldr	r1, [pc, #388]	; (8005e20 <HAL_RCC_ClockConfig+0x1b0>)
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ca2:	4b5f      	ldr	r3, [pc, #380]	; (8005e20 <HAL_RCC_ClockConfig+0x1b0>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0307 	and.w	r3, r3, #7
 8005caa:	683a      	ldr	r2, [r7, #0]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d001      	beq.n	8005cb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e0b0      	b.n	8005e16 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d04c      	beq.n	8005d5a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	2b03      	cmp	r3, #3
 8005cc6:	d107      	bne.n	8005cd8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cc8:	4b56      	ldr	r3, [pc, #344]	; (8005e24 <HAL_RCC_ClockConfig+0x1b4>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d121      	bne.n	8005d18 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e09e      	b.n	8005e16 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d107      	bne.n	8005cf0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ce0:	4b50      	ldr	r3, [pc, #320]	; (8005e24 <HAL_RCC_ClockConfig+0x1b4>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d115      	bne.n	8005d18 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e092      	b.n	8005e16 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d107      	bne.n	8005d08 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005cf8:	4b4a      	ldr	r3, [pc, #296]	; (8005e24 <HAL_RCC_ClockConfig+0x1b4>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0302 	and.w	r3, r3, #2
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d109      	bne.n	8005d18 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e086      	b.n	8005e16 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d08:	4b46      	ldr	r3, [pc, #280]	; (8005e24 <HAL_RCC_ClockConfig+0x1b4>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d101      	bne.n	8005d18 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e07e      	b.n	8005e16 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d18:	4b42      	ldr	r3, [pc, #264]	; (8005e24 <HAL_RCC_ClockConfig+0x1b4>)
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f023 0203 	bic.w	r2, r3, #3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	493f      	ldr	r1, [pc, #252]	; (8005e24 <HAL_RCC_ClockConfig+0x1b4>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d2a:	f7fc f8b5 	bl	8001e98 <HAL_GetTick>
 8005d2e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d30:	e00a      	b.n	8005d48 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d32:	f7fc f8b1 	bl	8001e98 <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d901      	bls.n	8005d48 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e066      	b.n	8005e16 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d48:	4b36      	ldr	r3, [pc, #216]	; (8005e24 <HAL_RCC_ClockConfig+0x1b4>)
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	f003 020c 	and.w	r2, r3, #12
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d1eb      	bne.n	8005d32 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d008      	beq.n	8005d78 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d66:	4b2f      	ldr	r3, [pc, #188]	; (8005e24 <HAL_RCC_ClockConfig+0x1b4>)
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	492c      	ldr	r1, [pc, #176]	; (8005e24 <HAL_RCC_ClockConfig+0x1b4>)
 8005d74:	4313      	orrs	r3, r2
 8005d76:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d78:	4b29      	ldr	r3, [pc, #164]	; (8005e20 <HAL_RCC_ClockConfig+0x1b0>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0307 	and.w	r3, r3, #7
 8005d80:	683a      	ldr	r2, [r7, #0]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d210      	bcs.n	8005da8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d86:	4b26      	ldr	r3, [pc, #152]	; (8005e20 <HAL_RCC_ClockConfig+0x1b0>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f023 0207 	bic.w	r2, r3, #7
 8005d8e:	4924      	ldr	r1, [pc, #144]	; (8005e20 <HAL_RCC_ClockConfig+0x1b0>)
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d96:	4b22      	ldr	r3, [pc, #136]	; (8005e20 <HAL_RCC_ClockConfig+0x1b0>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0307 	and.w	r3, r3, #7
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d001      	beq.n	8005da8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e036      	b.n	8005e16 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0304 	and.w	r3, r3, #4
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d008      	beq.n	8005dc6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005db4:	4b1b      	ldr	r3, [pc, #108]	; (8005e24 <HAL_RCC_ClockConfig+0x1b4>)
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	4918      	ldr	r1, [pc, #96]	; (8005e24 <HAL_RCC_ClockConfig+0x1b4>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0308 	and.w	r3, r3, #8
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d009      	beq.n	8005de6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005dd2:	4b14      	ldr	r3, [pc, #80]	; (8005e24 <HAL_RCC_ClockConfig+0x1b4>)
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	00db      	lsls	r3, r3, #3
 8005de0:	4910      	ldr	r1, [pc, #64]	; (8005e24 <HAL_RCC_ClockConfig+0x1b4>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005de6:	f000 f825 	bl	8005e34 <HAL_RCC_GetSysClockFreq>
 8005dea:	4602      	mov	r2, r0
 8005dec:	4b0d      	ldr	r3, [pc, #52]	; (8005e24 <HAL_RCC_ClockConfig+0x1b4>)
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	091b      	lsrs	r3, r3, #4
 8005df2:	f003 030f 	and.w	r3, r3, #15
 8005df6:	490c      	ldr	r1, [pc, #48]	; (8005e28 <HAL_RCC_ClockConfig+0x1b8>)
 8005df8:	5ccb      	ldrb	r3, [r1, r3]
 8005dfa:	f003 031f 	and.w	r3, r3, #31
 8005dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8005e02:	4a0a      	ldr	r2, [pc, #40]	; (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005e04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005e06:	4b0a      	ldr	r3, [pc, #40]	; (8005e30 <HAL_RCC_ClockConfig+0x1c0>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7fb fff4 	bl	8001df8 <HAL_InitTick>
 8005e10:	4603      	mov	r3, r0
 8005e12:	72fb      	strb	r3, [r7, #11]

  return status;
 8005e14:	7afb      	ldrb	r3, [r7, #11]
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	40022000 	.word	0x40022000
 8005e24:	40021000 	.word	0x40021000
 8005e28:	08008ae0 	.word	0x08008ae0
 8005e2c:	20000004 	.word	0x20000004
 8005e30:	20000008 	.word	0x20000008

08005e34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b089      	sub	sp, #36	; 0x24
 8005e38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	61fb      	str	r3, [r7, #28]
 8005e3e:	2300      	movs	r3, #0
 8005e40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e42:	4b3e      	ldr	r3, [pc, #248]	; (8005f3c <HAL_RCC_GetSysClockFreq+0x108>)
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f003 030c 	and.w	r3, r3, #12
 8005e4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e4c:	4b3b      	ldr	r3, [pc, #236]	; (8005f3c <HAL_RCC_GetSysClockFreq+0x108>)
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	f003 0303 	and.w	r3, r3, #3
 8005e54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d005      	beq.n	8005e68 <HAL_RCC_GetSysClockFreq+0x34>
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	2b0c      	cmp	r3, #12
 8005e60:	d121      	bne.n	8005ea6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d11e      	bne.n	8005ea6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005e68:	4b34      	ldr	r3, [pc, #208]	; (8005f3c <HAL_RCC_GetSysClockFreq+0x108>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0308 	and.w	r3, r3, #8
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d107      	bne.n	8005e84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005e74:	4b31      	ldr	r3, [pc, #196]	; (8005f3c <HAL_RCC_GetSysClockFreq+0x108>)
 8005e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e7a:	0a1b      	lsrs	r3, r3, #8
 8005e7c:	f003 030f 	and.w	r3, r3, #15
 8005e80:	61fb      	str	r3, [r7, #28]
 8005e82:	e005      	b.n	8005e90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005e84:	4b2d      	ldr	r3, [pc, #180]	; (8005f3c <HAL_RCC_GetSysClockFreq+0x108>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	091b      	lsrs	r3, r3, #4
 8005e8a:	f003 030f 	and.w	r3, r3, #15
 8005e8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005e90:	4a2b      	ldr	r2, [pc, #172]	; (8005f40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10d      	bne.n	8005ebc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ea4:	e00a      	b.n	8005ebc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	2b04      	cmp	r3, #4
 8005eaa:	d102      	bne.n	8005eb2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005eac:	4b25      	ldr	r3, [pc, #148]	; (8005f44 <HAL_RCC_GetSysClockFreq+0x110>)
 8005eae:	61bb      	str	r3, [r7, #24]
 8005eb0:	e004      	b.n	8005ebc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	2b08      	cmp	r3, #8
 8005eb6:	d101      	bne.n	8005ebc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005eb8:	4b23      	ldr	r3, [pc, #140]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x114>)
 8005eba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	2b0c      	cmp	r3, #12
 8005ec0:	d134      	bne.n	8005f2c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ec2:	4b1e      	ldr	r3, [pc, #120]	; (8005f3c <HAL_RCC_GetSysClockFreq+0x108>)
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	f003 0303 	and.w	r3, r3, #3
 8005eca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d003      	beq.n	8005eda <HAL_RCC_GetSysClockFreq+0xa6>
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	2b03      	cmp	r3, #3
 8005ed6:	d003      	beq.n	8005ee0 <HAL_RCC_GetSysClockFreq+0xac>
 8005ed8:	e005      	b.n	8005ee6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005eda:	4b1a      	ldr	r3, [pc, #104]	; (8005f44 <HAL_RCC_GetSysClockFreq+0x110>)
 8005edc:	617b      	str	r3, [r7, #20]
      break;
 8005ede:	e005      	b.n	8005eec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005ee0:	4b19      	ldr	r3, [pc, #100]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x114>)
 8005ee2:	617b      	str	r3, [r7, #20]
      break;
 8005ee4:	e002      	b.n	8005eec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	617b      	str	r3, [r7, #20]
      break;
 8005eea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005eec:	4b13      	ldr	r3, [pc, #76]	; (8005f3c <HAL_RCC_GetSysClockFreq+0x108>)
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	091b      	lsrs	r3, r3, #4
 8005ef2:	f003 0307 	and.w	r3, r3, #7
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005efa:	4b10      	ldr	r3, [pc, #64]	; (8005f3c <HAL_RCC_GetSysClockFreq+0x108>)
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	0a1b      	lsrs	r3, r3, #8
 8005f00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	fb02 f203 	mul.w	r2, r2, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f10:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f12:	4b0a      	ldr	r3, [pc, #40]	; (8005f3c <HAL_RCC_GetSysClockFreq+0x108>)
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	0e5b      	lsrs	r3, r3, #25
 8005f18:	f003 0303 	and.w	r3, r3, #3
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	005b      	lsls	r3, r3, #1
 8005f20:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f2a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005f2c:	69bb      	ldr	r3, [r7, #24]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3724      	adds	r7, #36	; 0x24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	40021000 	.word	0x40021000
 8005f40:	08008af8 	.word	0x08008af8
 8005f44:	00f42400 	.word	0x00f42400
 8005f48:	007a1200 	.word	0x007a1200

08005f4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f50:	4b03      	ldr	r3, [pc, #12]	; (8005f60 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f52:	681b      	ldr	r3, [r3, #0]
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	20000004 	.word	0x20000004

08005f64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005f68:	f7ff fff0 	bl	8005f4c <HAL_RCC_GetHCLKFreq>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	4b06      	ldr	r3, [pc, #24]	; (8005f88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	0a1b      	lsrs	r3, r3, #8
 8005f74:	f003 0307 	and.w	r3, r3, #7
 8005f78:	4904      	ldr	r1, [pc, #16]	; (8005f8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f7a:	5ccb      	ldrb	r3, [r1, r3]
 8005f7c:	f003 031f 	and.w	r3, r3, #31
 8005f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	40021000 	.word	0x40021000
 8005f8c:	08008af0 	.word	0x08008af0

08005f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005f94:	f7ff ffda 	bl	8005f4c <HAL_RCC_GetHCLKFreq>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	4b06      	ldr	r3, [pc, #24]	; (8005fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	0adb      	lsrs	r3, r3, #11
 8005fa0:	f003 0307 	and.w	r3, r3, #7
 8005fa4:	4904      	ldr	r1, [pc, #16]	; (8005fb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005fa6:	5ccb      	ldrb	r3, [r1, r3]
 8005fa8:	f003 031f 	and.w	r3, r3, #31
 8005fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	40021000 	.word	0x40021000
 8005fb8:	08008af0 	.word	0x08008af0

08005fbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005fc8:	4b2a      	ldr	r3, [pc, #168]	; (8006074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d003      	beq.n	8005fdc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005fd4:	f7ff f936 	bl	8005244 <HAL_PWREx_GetVoltageRange>
 8005fd8:	6178      	str	r0, [r7, #20]
 8005fda:	e014      	b.n	8006006 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005fdc:	4b25      	ldr	r3, [pc, #148]	; (8006074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fe0:	4a24      	ldr	r2, [pc, #144]	; (8006074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fe6:	6593      	str	r3, [r2, #88]	; 0x58
 8005fe8:	4b22      	ldr	r3, [pc, #136]	; (8006074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ff0:	60fb      	str	r3, [r7, #12]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005ff4:	f7ff f926 	bl	8005244 <HAL_PWREx_GetVoltageRange>
 8005ff8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005ffa:	4b1e      	ldr	r3, [pc, #120]	; (8006074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ffe:	4a1d      	ldr	r2, [pc, #116]	; (8006074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006000:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006004:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800600c:	d10b      	bne.n	8006026 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2b80      	cmp	r3, #128	; 0x80
 8006012:	d919      	bls.n	8006048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2ba0      	cmp	r3, #160	; 0xa0
 8006018:	d902      	bls.n	8006020 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800601a:	2302      	movs	r3, #2
 800601c:	613b      	str	r3, [r7, #16]
 800601e:	e013      	b.n	8006048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006020:	2301      	movs	r3, #1
 8006022:	613b      	str	r3, [r7, #16]
 8006024:	e010      	b.n	8006048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2b80      	cmp	r3, #128	; 0x80
 800602a:	d902      	bls.n	8006032 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800602c:	2303      	movs	r3, #3
 800602e:	613b      	str	r3, [r7, #16]
 8006030:	e00a      	b.n	8006048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2b80      	cmp	r3, #128	; 0x80
 8006036:	d102      	bne.n	800603e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006038:	2302      	movs	r3, #2
 800603a:	613b      	str	r3, [r7, #16]
 800603c:	e004      	b.n	8006048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b70      	cmp	r3, #112	; 0x70
 8006042:	d101      	bne.n	8006048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006044:	2301      	movs	r3, #1
 8006046:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006048:	4b0b      	ldr	r3, [pc, #44]	; (8006078 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f023 0207 	bic.w	r2, r3, #7
 8006050:	4909      	ldr	r1, [pc, #36]	; (8006078 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	4313      	orrs	r3, r2
 8006056:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006058:	4b07      	ldr	r3, [pc, #28]	; (8006078 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0307 	and.w	r3, r3, #7
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	429a      	cmp	r2, r3
 8006064:	d001      	beq.n	800606a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e000      	b.n	800606c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3718      	adds	r7, #24
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	40021000 	.word	0x40021000
 8006078:	40022000 	.word	0x40022000

0800607c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b086      	sub	sp, #24
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006084:	2300      	movs	r3, #0
 8006086:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006088:	2300      	movs	r3, #0
 800608a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006094:	2b00      	cmp	r3, #0
 8006096:	d041      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800609c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80060a0:	d02a      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80060a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80060a6:	d824      	bhi.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80060a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060ac:	d008      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80060ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060b2:	d81e      	bhi.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00a      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 80060b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060bc:	d010      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80060be:	e018      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80060c0:	4b86      	ldr	r3, [pc, #536]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	4a85      	ldr	r2, [pc, #532]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060ca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80060cc:	e015      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	3304      	adds	r3, #4
 80060d2:	2100      	movs	r1, #0
 80060d4:	4618      	mov	r0, r3
 80060d6:	f000 facb 	bl	8006670 <RCCEx_PLLSAI1_Config>
 80060da:	4603      	mov	r3, r0
 80060dc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80060de:	e00c      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	3320      	adds	r3, #32
 80060e4:	2100      	movs	r1, #0
 80060e6:	4618      	mov	r0, r3
 80060e8:	f000 fbb6 	bl	8006858 <RCCEx_PLLSAI2_Config>
 80060ec:	4603      	mov	r3, r0
 80060ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80060f0:	e003      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	74fb      	strb	r3, [r7, #19]
      break;
 80060f6:	e000      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80060f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060fa:	7cfb      	ldrb	r3, [r7, #19]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10b      	bne.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006100:	4b76      	ldr	r3, [pc, #472]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006106:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800610e:	4973      	ldr	r1, [pc, #460]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006110:	4313      	orrs	r3, r2
 8006112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006116:	e001      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006118:	7cfb      	ldrb	r3, [r7, #19]
 800611a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d041      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800612c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006130:	d02a      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006132:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006136:	d824      	bhi.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006138:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800613c:	d008      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800613e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006142:	d81e      	bhi.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00a      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006148:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800614c:	d010      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800614e:	e018      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006150:	4b62      	ldr	r3, [pc, #392]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	4a61      	ldr	r2, [pc, #388]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800615a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800615c:	e015      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	3304      	adds	r3, #4
 8006162:	2100      	movs	r1, #0
 8006164:	4618      	mov	r0, r3
 8006166:	f000 fa83 	bl	8006670 <RCCEx_PLLSAI1_Config>
 800616a:	4603      	mov	r3, r0
 800616c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800616e:	e00c      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	3320      	adds	r3, #32
 8006174:	2100      	movs	r1, #0
 8006176:	4618      	mov	r0, r3
 8006178:	f000 fb6e 	bl	8006858 <RCCEx_PLLSAI2_Config>
 800617c:	4603      	mov	r3, r0
 800617e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006180:	e003      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	74fb      	strb	r3, [r7, #19]
      break;
 8006186:	e000      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006188:	bf00      	nop
    }

    if(ret == HAL_OK)
 800618a:	7cfb      	ldrb	r3, [r7, #19]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10b      	bne.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006190:	4b52      	ldr	r3, [pc, #328]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006196:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800619e:	494f      	ldr	r1, [pc, #316]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80061a6:	e001      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061a8:	7cfb      	ldrb	r3, [r7, #19]
 80061aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f000 80a0 	beq.w	80062fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061ba:	2300      	movs	r3, #0
 80061bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80061be:	4b47      	ldr	r3, [pc, #284]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d101      	bne.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x152>
 80061ca:	2301      	movs	r3, #1
 80061cc:	e000      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80061ce:	2300      	movs	r3, #0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00d      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061d4:	4b41      	ldr	r3, [pc, #260]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061d8:	4a40      	ldr	r2, [pc, #256]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061de:	6593      	str	r3, [r2, #88]	; 0x58
 80061e0:	4b3e      	ldr	r3, [pc, #248]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061e8:	60bb      	str	r3, [r7, #8]
 80061ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061ec:	2301      	movs	r3, #1
 80061ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061f0:	4b3b      	ldr	r3, [pc, #236]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a3a      	ldr	r2, [pc, #232]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80061f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061fc:	f7fb fe4c 	bl	8001e98 <HAL_GetTick>
 8006200:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006202:	e009      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006204:	f7fb fe48 	bl	8001e98 <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	2b02      	cmp	r3, #2
 8006210:	d902      	bls.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	74fb      	strb	r3, [r7, #19]
        break;
 8006216:	e005      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006218:	4b31      	ldr	r3, [pc, #196]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006220:	2b00      	cmp	r3, #0
 8006222:	d0ef      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006224:	7cfb      	ldrb	r3, [r7, #19]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d15c      	bne.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800622a:	4b2c      	ldr	r3, [pc, #176]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800622c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006230:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006234:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d01f      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006242:	697a      	ldr	r2, [r7, #20]
 8006244:	429a      	cmp	r2, r3
 8006246:	d019      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006248:	4b24      	ldr	r3, [pc, #144]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800624a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800624e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006252:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006254:	4b21      	ldr	r3, [pc, #132]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800625a:	4a20      	ldr	r2, [pc, #128]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800625c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006264:	4b1d      	ldr	r3, [pc, #116]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800626a:	4a1c      	ldr	r2, [pc, #112]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800626c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006270:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006274:	4a19      	ldr	r2, [pc, #100]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	2b00      	cmp	r3, #0
 8006284:	d016      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006286:	f7fb fe07 	bl	8001e98 <HAL_GetTick>
 800628a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800628c:	e00b      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800628e:	f7fb fe03 	bl	8001e98 <HAL_GetTick>
 8006292:	4602      	mov	r2, r0
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	f241 3288 	movw	r2, #5000	; 0x1388
 800629c:	4293      	cmp	r3, r2
 800629e:	d902      	bls.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	74fb      	strb	r3, [r7, #19]
            break;
 80062a4:	e006      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062a6:	4b0d      	ldr	r3, [pc, #52]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ac:	f003 0302 	and.w	r3, r3, #2
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d0ec      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80062b4:	7cfb      	ldrb	r3, [r7, #19]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10c      	bne.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062ba:	4b08      	ldr	r3, [pc, #32]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062ca:	4904      	ldr	r1, [pc, #16]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062cc:	4313      	orrs	r3, r2
 80062ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80062d2:	e009      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062d4:	7cfb      	ldrb	r3, [r7, #19]
 80062d6:	74bb      	strb	r3, [r7, #18]
 80062d8:	e006      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80062da:	bf00      	nop
 80062dc:	40021000 	.word	0x40021000
 80062e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062e4:	7cfb      	ldrb	r3, [r7, #19]
 80062e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062e8:	7c7b      	ldrb	r3, [r7, #17]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d105      	bne.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062ee:	4b9e      	ldr	r3, [pc, #632]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062f2:	4a9d      	ldr	r2, [pc, #628]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00a      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006306:	4b98      	ldr	r3, [pc, #608]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800630c:	f023 0203 	bic.w	r2, r3, #3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006314:	4994      	ldr	r1, [pc, #592]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006316:	4313      	orrs	r3, r2
 8006318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0302 	and.w	r3, r3, #2
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00a      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006328:	4b8f      	ldr	r3, [pc, #572]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800632a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800632e:	f023 020c 	bic.w	r2, r3, #12
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006336:	498c      	ldr	r1, [pc, #560]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006338:	4313      	orrs	r3, r2
 800633a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0304 	and.w	r3, r3, #4
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00a      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800634a:	4b87      	ldr	r3, [pc, #540]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800634c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006350:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006358:	4983      	ldr	r1, [pc, #524]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800635a:	4313      	orrs	r3, r2
 800635c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0308 	and.w	r3, r3, #8
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00a      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800636c:	4b7e      	ldr	r3, [pc, #504]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800636e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006372:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800637a:	497b      	ldr	r1, [pc, #492]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800637c:	4313      	orrs	r3, r2
 800637e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0310 	and.w	r3, r3, #16
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00a      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800638e:	4b76      	ldr	r3, [pc, #472]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006394:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800639c:	4972      	ldr	r1, [pc, #456]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0320 	and.w	r3, r3, #32
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00a      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063b0:	4b6d      	ldr	r3, [pc, #436]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063be:	496a      	ldr	r1, [pc, #424]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063c0:	4313      	orrs	r3, r2
 80063c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00a      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063d2:	4b65      	ldr	r3, [pc, #404]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063e0:	4961      	ldr	r1, [pc, #388]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00a      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80063f4:	4b5c      	ldr	r3, [pc, #368]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006402:	4959      	ldr	r1, [pc, #356]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006404:	4313      	orrs	r3, r2
 8006406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00a      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006416:	4b54      	ldr	r3, [pc, #336]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800641c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006424:	4950      	ldr	r1, [pc, #320]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006426:	4313      	orrs	r3, r2
 8006428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00a      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006438:	4b4b      	ldr	r3, [pc, #300]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800643a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800643e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006446:	4948      	ldr	r1, [pc, #288]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006448:	4313      	orrs	r3, r2
 800644a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00a      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800645a:	4b43      	ldr	r3, [pc, #268]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800645c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006460:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006468:	493f      	ldr	r1, [pc, #252]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800646a:	4313      	orrs	r3, r2
 800646c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d028      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800647c:	4b3a      	ldr	r3, [pc, #232]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800647e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006482:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800648a:	4937      	ldr	r1, [pc, #220]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800648c:	4313      	orrs	r3, r2
 800648e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006496:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800649a:	d106      	bne.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800649c:	4b32      	ldr	r3, [pc, #200]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	4a31      	ldr	r2, [pc, #196]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064a6:	60d3      	str	r3, [r2, #12]
 80064a8:	e011      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064b2:	d10c      	bne.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	3304      	adds	r3, #4
 80064b8:	2101      	movs	r1, #1
 80064ba:	4618      	mov	r0, r3
 80064bc:	f000 f8d8 	bl	8006670 <RCCEx_PLLSAI1_Config>
 80064c0:	4603      	mov	r3, r0
 80064c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80064c4:	7cfb      	ldrb	r3, [r7, #19]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d001      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80064ca:	7cfb      	ldrb	r3, [r7, #19]
 80064cc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d028      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80064da:	4b23      	ldr	r3, [pc, #140]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e8:	491f      	ldr	r1, [pc, #124]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ea:	4313      	orrs	r3, r2
 80064ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064f8:	d106      	bne.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064fa:	4b1b      	ldr	r3, [pc, #108]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	4a1a      	ldr	r2, [pc, #104]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006504:	60d3      	str	r3, [r2, #12]
 8006506:	e011      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800650c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006510:	d10c      	bne.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	3304      	adds	r3, #4
 8006516:	2101      	movs	r1, #1
 8006518:	4618      	mov	r0, r3
 800651a:	f000 f8a9 	bl	8006670 <RCCEx_PLLSAI1_Config>
 800651e:	4603      	mov	r3, r0
 8006520:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006522:	7cfb      	ldrb	r3, [r7, #19]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d001      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006528:	7cfb      	ldrb	r3, [r7, #19]
 800652a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006534:	2b00      	cmp	r3, #0
 8006536:	d02b      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006538:	4b0b      	ldr	r3, [pc, #44]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800653a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800653e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006546:	4908      	ldr	r1, [pc, #32]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006548:	4313      	orrs	r3, r2
 800654a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006552:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006556:	d109      	bne.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006558:	4b03      	ldr	r3, [pc, #12]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	4a02      	ldr	r2, [pc, #8]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800655e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006562:	60d3      	str	r3, [r2, #12]
 8006564:	e014      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006566:	bf00      	nop
 8006568:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006570:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006574:	d10c      	bne.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	3304      	adds	r3, #4
 800657a:	2101      	movs	r1, #1
 800657c:	4618      	mov	r0, r3
 800657e:	f000 f877 	bl	8006670 <RCCEx_PLLSAI1_Config>
 8006582:	4603      	mov	r3, r0
 8006584:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006586:	7cfb      	ldrb	r3, [r7, #19]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d001      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800658c:	7cfb      	ldrb	r3, [r7, #19]
 800658e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d02f      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800659c:	4b2b      	ldr	r3, [pc, #172]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800659e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065aa:	4928      	ldr	r1, [pc, #160]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80065ac:	4313      	orrs	r3, r2
 80065ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065ba:	d10d      	bne.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	3304      	adds	r3, #4
 80065c0:	2102      	movs	r1, #2
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 f854 	bl	8006670 <RCCEx_PLLSAI1_Config>
 80065c8:	4603      	mov	r3, r0
 80065ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80065cc:	7cfb      	ldrb	r3, [r7, #19]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d014      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80065d2:	7cfb      	ldrb	r3, [r7, #19]
 80065d4:	74bb      	strb	r3, [r7, #18]
 80065d6:	e011      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065e0:	d10c      	bne.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	3320      	adds	r3, #32
 80065e6:	2102      	movs	r1, #2
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 f935 	bl	8006858 <RCCEx_PLLSAI2_Config>
 80065ee:	4603      	mov	r3, r0
 80065f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80065f2:	7cfb      	ldrb	r3, [r7, #19]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d001      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80065f8:	7cfb      	ldrb	r3, [r7, #19]
 80065fa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00a      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006608:	4b10      	ldr	r3, [pc, #64]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800660a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800660e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006616:	490d      	ldr	r1, [pc, #52]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006618:	4313      	orrs	r3, r2
 800661a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00b      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800662a:	4b08      	ldr	r3, [pc, #32]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800662c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006630:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800663a:	4904      	ldr	r1, [pc, #16]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800663c:	4313      	orrs	r3, r2
 800663e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006642:	7cbb      	ldrb	r3, [r7, #18]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3718      	adds	r7, #24
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	40021000 	.word	0x40021000

08006650 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006650:	b480      	push	{r7}
 8006652:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006654:	4b05      	ldr	r3, [pc, #20]	; (800666c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a04      	ldr	r2, [pc, #16]	; (800666c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800665a:	f043 0304 	orr.w	r3, r3, #4
 800665e:	6013      	str	r3, [r2, #0]
}
 8006660:	bf00      	nop
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	40021000 	.word	0x40021000

08006670 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800667a:	2300      	movs	r3, #0
 800667c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800667e:	4b75      	ldr	r3, [pc, #468]	; (8006854 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	f003 0303 	and.w	r3, r3, #3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d018      	beq.n	80066bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800668a:	4b72      	ldr	r3, [pc, #456]	; (8006854 <RCCEx_PLLSAI1_Config+0x1e4>)
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	f003 0203 	and.w	r2, r3, #3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	429a      	cmp	r2, r3
 8006698:	d10d      	bne.n	80066b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
       ||
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d009      	beq.n	80066b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80066a2:	4b6c      	ldr	r3, [pc, #432]	; (8006854 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	091b      	lsrs	r3, r3, #4
 80066a8:	f003 0307 	and.w	r3, r3, #7
 80066ac:	1c5a      	adds	r2, r3, #1
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	685b      	ldr	r3, [r3, #4]
       ||
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d047      	beq.n	8006746 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	73fb      	strb	r3, [r7, #15]
 80066ba:	e044      	b.n	8006746 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2b03      	cmp	r3, #3
 80066c2:	d018      	beq.n	80066f6 <RCCEx_PLLSAI1_Config+0x86>
 80066c4:	2b03      	cmp	r3, #3
 80066c6:	d825      	bhi.n	8006714 <RCCEx_PLLSAI1_Config+0xa4>
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d002      	beq.n	80066d2 <RCCEx_PLLSAI1_Config+0x62>
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d009      	beq.n	80066e4 <RCCEx_PLLSAI1_Config+0x74>
 80066d0:	e020      	b.n	8006714 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80066d2:	4b60      	ldr	r3, [pc, #384]	; (8006854 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0302 	and.w	r3, r3, #2
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d11d      	bne.n	800671a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066e2:	e01a      	b.n	800671a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80066e4:	4b5b      	ldr	r3, [pc, #364]	; (8006854 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d116      	bne.n	800671e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066f4:	e013      	b.n	800671e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80066f6:	4b57      	ldr	r3, [pc, #348]	; (8006854 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d10f      	bne.n	8006722 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006702:	4b54      	ldr	r3, [pc, #336]	; (8006854 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800670a:	2b00      	cmp	r3, #0
 800670c:	d109      	bne.n	8006722 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006712:	e006      	b.n	8006722 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	73fb      	strb	r3, [r7, #15]
      break;
 8006718:	e004      	b.n	8006724 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800671a:	bf00      	nop
 800671c:	e002      	b.n	8006724 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800671e:	bf00      	nop
 8006720:	e000      	b.n	8006724 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006722:	bf00      	nop
    }

    if(status == HAL_OK)
 8006724:	7bfb      	ldrb	r3, [r7, #15]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d10d      	bne.n	8006746 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800672a:	4b4a      	ldr	r3, [pc, #296]	; (8006854 <RCCEx_PLLSAI1_Config+0x1e4>)
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6819      	ldr	r1, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	3b01      	subs	r3, #1
 800673c:	011b      	lsls	r3, r3, #4
 800673e:	430b      	orrs	r3, r1
 8006740:	4944      	ldr	r1, [pc, #272]	; (8006854 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006742:	4313      	orrs	r3, r2
 8006744:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006746:	7bfb      	ldrb	r3, [r7, #15]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d17d      	bne.n	8006848 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800674c:	4b41      	ldr	r3, [pc, #260]	; (8006854 <RCCEx_PLLSAI1_Config+0x1e4>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a40      	ldr	r2, [pc, #256]	; (8006854 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006752:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006756:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006758:	f7fb fb9e 	bl	8001e98 <HAL_GetTick>
 800675c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800675e:	e009      	b.n	8006774 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006760:	f7fb fb9a 	bl	8001e98 <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	2b02      	cmp	r3, #2
 800676c:	d902      	bls.n	8006774 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	73fb      	strb	r3, [r7, #15]
        break;
 8006772:	e005      	b.n	8006780 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006774:	4b37      	ldr	r3, [pc, #220]	; (8006854 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1ef      	bne.n	8006760 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006780:	7bfb      	ldrb	r3, [r7, #15]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d160      	bne.n	8006848 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d111      	bne.n	80067b0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800678c:	4b31      	ldr	r3, [pc, #196]	; (8006854 <RCCEx_PLLSAI1_Config+0x1e4>)
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	6892      	ldr	r2, [r2, #8]
 800679c:	0211      	lsls	r1, r2, #8
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	68d2      	ldr	r2, [r2, #12]
 80067a2:	0912      	lsrs	r2, r2, #4
 80067a4:	0452      	lsls	r2, r2, #17
 80067a6:	430a      	orrs	r2, r1
 80067a8:	492a      	ldr	r1, [pc, #168]	; (8006854 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067aa:	4313      	orrs	r3, r2
 80067ac:	610b      	str	r3, [r1, #16]
 80067ae:	e027      	b.n	8006800 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d112      	bne.n	80067dc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80067b6:	4b27      	ldr	r3, [pc, #156]	; (8006854 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80067be:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	6892      	ldr	r2, [r2, #8]
 80067c6:	0211      	lsls	r1, r2, #8
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	6912      	ldr	r2, [r2, #16]
 80067cc:	0852      	lsrs	r2, r2, #1
 80067ce:	3a01      	subs	r2, #1
 80067d0:	0552      	lsls	r2, r2, #21
 80067d2:	430a      	orrs	r2, r1
 80067d4:	491f      	ldr	r1, [pc, #124]	; (8006854 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067d6:	4313      	orrs	r3, r2
 80067d8:	610b      	str	r3, [r1, #16]
 80067da:	e011      	b.n	8006800 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80067dc:	4b1d      	ldr	r3, [pc, #116]	; (8006854 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80067e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	6892      	ldr	r2, [r2, #8]
 80067ec:	0211      	lsls	r1, r2, #8
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	6952      	ldr	r2, [r2, #20]
 80067f2:	0852      	lsrs	r2, r2, #1
 80067f4:	3a01      	subs	r2, #1
 80067f6:	0652      	lsls	r2, r2, #25
 80067f8:	430a      	orrs	r2, r1
 80067fa:	4916      	ldr	r1, [pc, #88]	; (8006854 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067fc:	4313      	orrs	r3, r2
 80067fe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006800:	4b14      	ldr	r3, [pc, #80]	; (8006854 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a13      	ldr	r2, [pc, #76]	; (8006854 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006806:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800680a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800680c:	f7fb fb44 	bl	8001e98 <HAL_GetTick>
 8006810:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006812:	e009      	b.n	8006828 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006814:	f7fb fb40 	bl	8001e98 <HAL_GetTick>
 8006818:	4602      	mov	r2, r0
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	2b02      	cmp	r3, #2
 8006820:	d902      	bls.n	8006828 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	73fb      	strb	r3, [r7, #15]
          break;
 8006826:	e005      	b.n	8006834 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006828:	4b0a      	ldr	r3, [pc, #40]	; (8006854 <RCCEx_PLLSAI1_Config+0x1e4>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d0ef      	beq.n	8006814 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006834:	7bfb      	ldrb	r3, [r7, #15]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d106      	bne.n	8006848 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800683a:	4b06      	ldr	r3, [pc, #24]	; (8006854 <RCCEx_PLLSAI1_Config+0x1e4>)
 800683c:	691a      	ldr	r2, [r3, #16]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	4904      	ldr	r1, [pc, #16]	; (8006854 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006844:	4313      	orrs	r3, r2
 8006846:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006848:	7bfb      	ldrb	r3, [r7, #15]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	40021000 	.word	0x40021000

08006858 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006862:	2300      	movs	r3, #0
 8006864:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006866:	4b6a      	ldr	r3, [pc, #424]	; (8006a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	f003 0303 	and.w	r3, r3, #3
 800686e:	2b00      	cmp	r3, #0
 8006870:	d018      	beq.n	80068a4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006872:	4b67      	ldr	r3, [pc, #412]	; (8006a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	f003 0203 	and.w	r2, r3, #3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	429a      	cmp	r2, r3
 8006880:	d10d      	bne.n	800689e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
       ||
 8006886:	2b00      	cmp	r3, #0
 8006888:	d009      	beq.n	800689e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800688a:	4b61      	ldr	r3, [pc, #388]	; (8006a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	091b      	lsrs	r3, r3, #4
 8006890:	f003 0307 	and.w	r3, r3, #7
 8006894:	1c5a      	adds	r2, r3, #1
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	685b      	ldr	r3, [r3, #4]
       ||
 800689a:	429a      	cmp	r2, r3
 800689c:	d047      	beq.n	800692e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	73fb      	strb	r3, [r7, #15]
 80068a2:	e044      	b.n	800692e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2b03      	cmp	r3, #3
 80068aa:	d018      	beq.n	80068de <RCCEx_PLLSAI2_Config+0x86>
 80068ac:	2b03      	cmp	r3, #3
 80068ae:	d825      	bhi.n	80068fc <RCCEx_PLLSAI2_Config+0xa4>
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d002      	beq.n	80068ba <RCCEx_PLLSAI2_Config+0x62>
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d009      	beq.n	80068cc <RCCEx_PLLSAI2_Config+0x74>
 80068b8:	e020      	b.n	80068fc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80068ba:	4b55      	ldr	r3, [pc, #340]	; (8006a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0302 	and.w	r3, r3, #2
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d11d      	bne.n	8006902 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068ca:	e01a      	b.n	8006902 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80068cc:	4b50      	ldr	r3, [pc, #320]	; (8006a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d116      	bne.n	8006906 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068dc:	e013      	b.n	8006906 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80068de:	4b4c      	ldr	r3, [pc, #304]	; (8006a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d10f      	bne.n	800690a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80068ea:	4b49      	ldr	r3, [pc, #292]	; (8006a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d109      	bne.n	800690a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80068fa:	e006      	b.n	800690a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006900:	e004      	b.n	800690c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006902:	bf00      	nop
 8006904:	e002      	b.n	800690c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006906:	bf00      	nop
 8006908:	e000      	b.n	800690c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800690a:	bf00      	nop
    }

    if(status == HAL_OK)
 800690c:	7bfb      	ldrb	r3, [r7, #15]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10d      	bne.n	800692e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006912:	4b3f      	ldr	r3, [pc, #252]	; (8006a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6819      	ldr	r1, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	3b01      	subs	r3, #1
 8006924:	011b      	lsls	r3, r3, #4
 8006926:	430b      	orrs	r3, r1
 8006928:	4939      	ldr	r1, [pc, #228]	; (8006a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 800692a:	4313      	orrs	r3, r2
 800692c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800692e:	7bfb      	ldrb	r3, [r7, #15]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d167      	bne.n	8006a04 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006934:	4b36      	ldr	r3, [pc, #216]	; (8006a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a35      	ldr	r2, [pc, #212]	; (8006a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 800693a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800693e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006940:	f7fb faaa 	bl	8001e98 <HAL_GetTick>
 8006944:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006946:	e009      	b.n	800695c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006948:	f7fb faa6 	bl	8001e98 <HAL_GetTick>
 800694c:	4602      	mov	r2, r0
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	2b02      	cmp	r3, #2
 8006954:	d902      	bls.n	800695c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	73fb      	strb	r3, [r7, #15]
        break;
 800695a:	e005      	b.n	8006968 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800695c:	4b2c      	ldr	r3, [pc, #176]	; (8006a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1ef      	bne.n	8006948 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006968:	7bfb      	ldrb	r3, [r7, #15]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d14a      	bne.n	8006a04 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d111      	bne.n	8006998 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006974:	4b26      	ldr	r3, [pc, #152]	; (8006a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006976:	695b      	ldr	r3, [r3, #20]
 8006978:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800697c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	6892      	ldr	r2, [r2, #8]
 8006984:	0211      	lsls	r1, r2, #8
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	68d2      	ldr	r2, [r2, #12]
 800698a:	0912      	lsrs	r2, r2, #4
 800698c:	0452      	lsls	r2, r2, #17
 800698e:	430a      	orrs	r2, r1
 8006990:	491f      	ldr	r1, [pc, #124]	; (8006a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006992:	4313      	orrs	r3, r2
 8006994:	614b      	str	r3, [r1, #20]
 8006996:	e011      	b.n	80069bc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006998:	4b1d      	ldr	r3, [pc, #116]	; (8006a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 800699a:	695b      	ldr	r3, [r3, #20]
 800699c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80069a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	6892      	ldr	r2, [r2, #8]
 80069a8:	0211      	lsls	r1, r2, #8
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	6912      	ldr	r2, [r2, #16]
 80069ae:	0852      	lsrs	r2, r2, #1
 80069b0:	3a01      	subs	r2, #1
 80069b2:	0652      	lsls	r2, r2, #25
 80069b4:	430a      	orrs	r2, r1
 80069b6:	4916      	ldr	r1, [pc, #88]	; (8006a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80069bc:	4b14      	ldr	r3, [pc, #80]	; (8006a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a13      	ldr	r2, [pc, #76]	; (8006a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069c8:	f7fb fa66 	bl	8001e98 <HAL_GetTick>
 80069cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80069ce:	e009      	b.n	80069e4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80069d0:	f7fb fa62 	bl	8001e98 <HAL_GetTick>
 80069d4:	4602      	mov	r2, r0
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d902      	bls.n	80069e4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	73fb      	strb	r3, [r7, #15]
          break;
 80069e2:	e005      	b.n	80069f0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80069e4:	4b0a      	ldr	r3, [pc, #40]	; (8006a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d0ef      	beq.n	80069d0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80069f0:	7bfb      	ldrb	r3, [r7, #15]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d106      	bne.n	8006a04 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80069f6:	4b06      	ldr	r3, [pc, #24]	; (8006a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069f8:	695a      	ldr	r2, [r3, #20]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	4904      	ldr	r1, [pc, #16]	; (8006a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a00:	4313      	orrs	r3, r2
 8006a02:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	40021000 	.word	0x40021000

08006a14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d101      	bne.n	8006a26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e095      	b.n	8006b52 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d108      	bne.n	8006a40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a36:	d009      	beq.n	8006a4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	61da      	str	r2, [r3, #28]
 8006a3e:	e005      	b.n	8006a4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d106      	bne.n	8006a6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7fa ff84 	bl	8001974 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2202      	movs	r2, #2
 8006a70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a82:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a8c:	d902      	bls.n	8006a94 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	60fb      	str	r3, [r7, #12]
 8006a92:	e002      	b.n	8006a9a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a98:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006aa2:	d007      	beq.n	8006ab4 <HAL_SPI_Init+0xa0>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006aac:	d002      	beq.n	8006ab4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006ac4:	431a      	orrs	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	f003 0302 	and.w	r3, r3, #2
 8006ace:	431a      	orrs	r2, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	695b      	ldr	r3, [r3, #20]
 8006ad4:	f003 0301 	and.w	r3, r3, #1
 8006ad8:	431a      	orrs	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ae2:	431a      	orrs	r2, r3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	69db      	ldr	r3, [r3, #28]
 8006ae8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006aec:	431a      	orrs	r2, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006af6:	ea42 0103 	orr.w	r1, r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006afe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	430a      	orrs	r2, r1
 8006b08:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	0c1b      	lsrs	r3, r3, #16
 8006b10:	f003 0204 	and.w	r2, r3, #4
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b18:	f003 0310 	and.w	r3, r3, #16
 8006b1c:	431a      	orrs	r2, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b22:	f003 0308 	and.w	r3, r3, #8
 8006b26:	431a      	orrs	r2, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006b30:	ea42 0103 	orr.w	r1, r2, r3
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b082      	sub	sp, #8
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d101      	bne.n	8006b6c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e040      	b.n	8006bee <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d106      	bne.n	8006b82 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f7fa ff3d 	bl	80019fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2224      	movs	r2, #36	; 0x24
 8006b86:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f022 0201 	bic.w	r2, r2, #1
 8006b96:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 f991 	bl	8006ec0 <UART_SetConfig>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d101      	bne.n	8006ba8 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e022      	b.n	8006bee <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d002      	beq.n	8006bb6 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 fc0f 	bl	80073d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bc4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	689a      	ldr	r2, [r3, #8]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bd4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f042 0201 	orr.w	r2, r2, #1
 8006be4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 fc96 	bl	8007518 <UART_CheckIdleState>
 8006bec:	4603      	mov	r3, r0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3708      	adds	r7, #8
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b08a      	sub	sp, #40	; 0x28
 8006bfa:	af02      	add	r7, sp, #8
 8006bfc:	60f8      	str	r0, [r7, #12]
 8006bfe:	60b9      	str	r1, [r7, #8]
 8006c00:	603b      	str	r3, [r7, #0]
 8006c02:	4613      	mov	r3, r2
 8006c04:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c0a:	2b20      	cmp	r3, #32
 8006c0c:	f040 8082 	bne.w	8006d14 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d002      	beq.n	8006c1c <HAL_UART_Transmit+0x26>
 8006c16:	88fb      	ldrh	r3, [r7, #6]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d101      	bne.n	8006c20 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e07a      	b.n	8006d16 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d101      	bne.n	8006c2e <HAL_UART_Transmit+0x38>
 8006c2a:	2302      	movs	r3, #2
 8006c2c:	e073      	b.n	8006d16 <HAL_UART_Transmit+0x120>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2221      	movs	r2, #33	; 0x21
 8006c42:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c44:	f7fb f928 	bl	8001e98 <HAL_GetTick>
 8006c48:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	88fa      	ldrh	r2, [r7, #6]
 8006c4e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	88fa      	ldrh	r2, [r7, #6]
 8006c56:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c62:	d108      	bne.n	8006c76 <HAL_UART_Transmit+0x80>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d104      	bne.n	8006c76 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	61bb      	str	r3, [r7, #24]
 8006c74:	e003      	b.n	8006c7e <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006c86:	e02d      	b.n	8006ce4 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	2180      	movs	r1, #128	; 0x80
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f000 fc89 	bl	80075aa <UART_WaitOnFlagUntilTimeout>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d001      	beq.n	8006ca2 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	e039      	b.n	8006d16 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10b      	bne.n	8006cc0 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	881a      	ldrh	r2, [r3, #0]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cb4:	b292      	uxth	r2, r2
 8006cb6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	3302      	adds	r3, #2
 8006cbc:	61bb      	str	r3, [r7, #24]
 8006cbe:	e008      	b.n	8006cd2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	781a      	ldrb	r2, [r3, #0]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	b292      	uxth	r2, r2
 8006cca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1cb      	bne.n	8006c88 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	9300      	str	r3, [sp, #0]
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	2140      	movs	r1, #64	; 0x40
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f000 fc55 	bl	80075aa <UART_WaitOnFlagUntilTimeout>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d001      	beq.n	8006d0a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e005      	b.n	8006d16 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2220      	movs	r2, #32
 8006d0e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006d10:	2300      	movs	r3, #0
 8006d12:	e000      	b.n	8006d16 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006d14:	2302      	movs	r3, #2
  }
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3720      	adds	r7, #32
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b08a      	sub	sp, #40	; 0x28
 8006d22:	af02      	add	r7, sp, #8
 8006d24:	60f8      	str	r0, [r7, #12]
 8006d26:	60b9      	str	r1, [r7, #8]
 8006d28:	603b      	str	r3, [r7, #0]
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d32:	2b20      	cmp	r3, #32
 8006d34:	f040 80bf 	bne.w	8006eb6 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d002      	beq.n	8006d44 <HAL_UART_Receive+0x26>
 8006d3e:	88fb      	ldrh	r3, [r7, #6]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d101      	bne.n	8006d48 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e0b7      	b.n	8006eb8 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d101      	bne.n	8006d56 <HAL_UART_Receive+0x38>
 8006d52:	2302      	movs	r3, #2
 8006d54:	e0b0      	b.n	8006eb8 <HAL_UART_Receive+0x19a>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2222      	movs	r2, #34	; 0x22
 8006d6a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d72:	f7fb f891 	bl	8001e98 <HAL_GetTick>
 8006d76:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	88fa      	ldrh	r2, [r7, #6]
 8006d7c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	88fa      	ldrh	r2, [r7, #6]
 8006d84:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d90:	d10e      	bne.n	8006db0 <HAL_UART_Receive+0x92>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d105      	bne.n	8006da6 <HAL_UART_Receive+0x88>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006da0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006da4:	e02d      	b.n	8006e02 <HAL_UART_Receive+0xe4>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	22ff      	movs	r2, #255	; 0xff
 8006daa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006dae:	e028      	b.n	8006e02 <HAL_UART_Receive+0xe4>
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d10d      	bne.n	8006dd4 <HAL_UART_Receive+0xb6>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d104      	bne.n	8006dca <HAL_UART_Receive+0xac>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	22ff      	movs	r2, #255	; 0xff
 8006dc4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006dc8:	e01b      	b.n	8006e02 <HAL_UART_Receive+0xe4>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	227f      	movs	r2, #127	; 0x7f
 8006dce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006dd2:	e016      	b.n	8006e02 <HAL_UART_Receive+0xe4>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ddc:	d10d      	bne.n	8006dfa <HAL_UART_Receive+0xdc>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d104      	bne.n	8006df0 <HAL_UART_Receive+0xd2>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	227f      	movs	r2, #127	; 0x7f
 8006dea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006dee:	e008      	b.n	8006e02 <HAL_UART_Receive+0xe4>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	223f      	movs	r2, #63	; 0x3f
 8006df4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006df8:	e003      	b.n	8006e02 <HAL_UART_Receive+0xe4>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e08:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e12:	d108      	bne.n	8006e26 <HAL_UART_Receive+0x108>
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	691b      	ldr	r3, [r3, #16]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d104      	bne.n	8006e26 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	61bb      	str	r3, [r7, #24]
 8006e24:	e003      	b.n	8006e2e <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006e36:	e033      	b.n	8006ea0 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	9300      	str	r3, [sp, #0]
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	2120      	movs	r1, #32
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f000 fbb1 	bl	80075aa <UART_WaitOnFlagUntilTimeout>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d001      	beq.n	8006e52 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e032      	b.n	8006eb8 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d10c      	bne.n	8006e72 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	8a7b      	ldrh	r3, [r7, #18]
 8006e62:	4013      	ands	r3, r2
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	3302      	adds	r3, #2
 8006e6e:	61bb      	str	r3, [r7, #24]
 8006e70:	e00d      	b.n	8006e8e <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	b2da      	uxtb	r2, r3
 8006e7c:	8a7b      	ldrh	r3, [r7, #18]
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	4013      	ands	r3, r2
 8006e82:	b2da      	uxtb	r2, r3
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	3b01      	subs	r3, #1
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1c5      	bne.n	8006e38 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2220      	movs	r2, #32
 8006eb0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	e000      	b.n	8006eb8 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8006eb6:	2302      	movs	r3, #2
  }
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3720      	adds	r7, #32
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ec0:	b5b0      	push	{r4, r5, r7, lr}
 8006ec2:	b088      	sub	sp, #32
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	689a      	ldr	r2, [r3, #8]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	431a      	orrs	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	695b      	ldr	r3, [r3, #20]
 8006eda:	431a      	orrs	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	69db      	ldr	r3, [r3, #28]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	4bad      	ldr	r3, [pc, #692]	; (80071a0 <UART_SetConfig+0x2e0>)
 8006eec:	4013      	ands	r3, r2
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	6812      	ldr	r2, [r2, #0]
 8006ef2:	69f9      	ldr	r1, [r7, #28]
 8006ef4:	430b      	orrs	r3, r1
 8006ef6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	68da      	ldr	r2, [r3, #12]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	430a      	orrs	r2, r1
 8006f0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4aa2      	ldr	r2, [pc, #648]	; (80071a4 <UART_SetConfig+0x2e4>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d004      	beq.n	8006f28 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a1b      	ldr	r3, [r3, #32]
 8006f22:	69fa      	ldr	r2, [r7, #28]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	69fa      	ldr	r2, [r7, #28]
 8006f38:	430a      	orrs	r2, r1
 8006f3a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a99      	ldr	r2, [pc, #612]	; (80071a8 <UART_SetConfig+0x2e8>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d121      	bne.n	8006f8a <UART_SetConfig+0xca>
 8006f46:	4b99      	ldr	r3, [pc, #612]	; (80071ac <UART_SetConfig+0x2ec>)
 8006f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f4c:	f003 0303 	and.w	r3, r3, #3
 8006f50:	2b03      	cmp	r3, #3
 8006f52:	d817      	bhi.n	8006f84 <UART_SetConfig+0xc4>
 8006f54:	a201      	add	r2, pc, #4	; (adr r2, 8006f5c <UART_SetConfig+0x9c>)
 8006f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f5a:	bf00      	nop
 8006f5c:	08006f6d 	.word	0x08006f6d
 8006f60:	08006f79 	.word	0x08006f79
 8006f64:	08006f73 	.word	0x08006f73
 8006f68:	08006f7f 	.word	0x08006f7f
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	76fb      	strb	r3, [r7, #27]
 8006f70:	e0e7      	b.n	8007142 <UART_SetConfig+0x282>
 8006f72:	2302      	movs	r3, #2
 8006f74:	76fb      	strb	r3, [r7, #27]
 8006f76:	e0e4      	b.n	8007142 <UART_SetConfig+0x282>
 8006f78:	2304      	movs	r3, #4
 8006f7a:	76fb      	strb	r3, [r7, #27]
 8006f7c:	e0e1      	b.n	8007142 <UART_SetConfig+0x282>
 8006f7e:	2308      	movs	r3, #8
 8006f80:	76fb      	strb	r3, [r7, #27]
 8006f82:	e0de      	b.n	8007142 <UART_SetConfig+0x282>
 8006f84:	2310      	movs	r3, #16
 8006f86:	76fb      	strb	r3, [r7, #27]
 8006f88:	e0db      	b.n	8007142 <UART_SetConfig+0x282>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a88      	ldr	r2, [pc, #544]	; (80071b0 <UART_SetConfig+0x2f0>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d132      	bne.n	8006ffa <UART_SetConfig+0x13a>
 8006f94:	4b85      	ldr	r3, [pc, #532]	; (80071ac <UART_SetConfig+0x2ec>)
 8006f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f9a:	f003 030c 	and.w	r3, r3, #12
 8006f9e:	2b0c      	cmp	r3, #12
 8006fa0:	d828      	bhi.n	8006ff4 <UART_SetConfig+0x134>
 8006fa2:	a201      	add	r2, pc, #4	; (adr r2, 8006fa8 <UART_SetConfig+0xe8>)
 8006fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa8:	08006fdd 	.word	0x08006fdd
 8006fac:	08006ff5 	.word	0x08006ff5
 8006fb0:	08006ff5 	.word	0x08006ff5
 8006fb4:	08006ff5 	.word	0x08006ff5
 8006fb8:	08006fe9 	.word	0x08006fe9
 8006fbc:	08006ff5 	.word	0x08006ff5
 8006fc0:	08006ff5 	.word	0x08006ff5
 8006fc4:	08006ff5 	.word	0x08006ff5
 8006fc8:	08006fe3 	.word	0x08006fe3
 8006fcc:	08006ff5 	.word	0x08006ff5
 8006fd0:	08006ff5 	.word	0x08006ff5
 8006fd4:	08006ff5 	.word	0x08006ff5
 8006fd8:	08006fef 	.word	0x08006fef
 8006fdc:	2300      	movs	r3, #0
 8006fde:	76fb      	strb	r3, [r7, #27]
 8006fe0:	e0af      	b.n	8007142 <UART_SetConfig+0x282>
 8006fe2:	2302      	movs	r3, #2
 8006fe4:	76fb      	strb	r3, [r7, #27]
 8006fe6:	e0ac      	b.n	8007142 <UART_SetConfig+0x282>
 8006fe8:	2304      	movs	r3, #4
 8006fea:	76fb      	strb	r3, [r7, #27]
 8006fec:	e0a9      	b.n	8007142 <UART_SetConfig+0x282>
 8006fee:	2308      	movs	r3, #8
 8006ff0:	76fb      	strb	r3, [r7, #27]
 8006ff2:	e0a6      	b.n	8007142 <UART_SetConfig+0x282>
 8006ff4:	2310      	movs	r3, #16
 8006ff6:	76fb      	strb	r3, [r7, #27]
 8006ff8:	e0a3      	b.n	8007142 <UART_SetConfig+0x282>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a6d      	ldr	r2, [pc, #436]	; (80071b4 <UART_SetConfig+0x2f4>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d120      	bne.n	8007046 <UART_SetConfig+0x186>
 8007004:	4b69      	ldr	r3, [pc, #420]	; (80071ac <UART_SetConfig+0x2ec>)
 8007006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800700a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800700e:	2b30      	cmp	r3, #48	; 0x30
 8007010:	d013      	beq.n	800703a <UART_SetConfig+0x17a>
 8007012:	2b30      	cmp	r3, #48	; 0x30
 8007014:	d814      	bhi.n	8007040 <UART_SetConfig+0x180>
 8007016:	2b20      	cmp	r3, #32
 8007018:	d009      	beq.n	800702e <UART_SetConfig+0x16e>
 800701a:	2b20      	cmp	r3, #32
 800701c:	d810      	bhi.n	8007040 <UART_SetConfig+0x180>
 800701e:	2b00      	cmp	r3, #0
 8007020:	d002      	beq.n	8007028 <UART_SetConfig+0x168>
 8007022:	2b10      	cmp	r3, #16
 8007024:	d006      	beq.n	8007034 <UART_SetConfig+0x174>
 8007026:	e00b      	b.n	8007040 <UART_SetConfig+0x180>
 8007028:	2300      	movs	r3, #0
 800702a:	76fb      	strb	r3, [r7, #27]
 800702c:	e089      	b.n	8007142 <UART_SetConfig+0x282>
 800702e:	2302      	movs	r3, #2
 8007030:	76fb      	strb	r3, [r7, #27]
 8007032:	e086      	b.n	8007142 <UART_SetConfig+0x282>
 8007034:	2304      	movs	r3, #4
 8007036:	76fb      	strb	r3, [r7, #27]
 8007038:	e083      	b.n	8007142 <UART_SetConfig+0x282>
 800703a:	2308      	movs	r3, #8
 800703c:	76fb      	strb	r3, [r7, #27]
 800703e:	e080      	b.n	8007142 <UART_SetConfig+0x282>
 8007040:	2310      	movs	r3, #16
 8007042:	76fb      	strb	r3, [r7, #27]
 8007044:	e07d      	b.n	8007142 <UART_SetConfig+0x282>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a5b      	ldr	r2, [pc, #364]	; (80071b8 <UART_SetConfig+0x2f8>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d120      	bne.n	8007092 <UART_SetConfig+0x1d2>
 8007050:	4b56      	ldr	r3, [pc, #344]	; (80071ac <UART_SetConfig+0x2ec>)
 8007052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007056:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800705a:	2bc0      	cmp	r3, #192	; 0xc0
 800705c:	d013      	beq.n	8007086 <UART_SetConfig+0x1c6>
 800705e:	2bc0      	cmp	r3, #192	; 0xc0
 8007060:	d814      	bhi.n	800708c <UART_SetConfig+0x1cc>
 8007062:	2b80      	cmp	r3, #128	; 0x80
 8007064:	d009      	beq.n	800707a <UART_SetConfig+0x1ba>
 8007066:	2b80      	cmp	r3, #128	; 0x80
 8007068:	d810      	bhi.n	800708c <UART_SetConfig+0x1cc>
 800706a:	2b00      	cmp	r3, #0
 800706c:	d002      	beq.n	8007074 <UART_SetConfig+0x1b4>
 800706e:	2b40      	cmp	r3, #64	; 0x40
 8007070:	d006      	beq.n	8007080 <UART_SetConfig+0x1c0>
 8007072:	e00b      	b.n	800708c <UART_SetConfig+0x1cc>
 8007074:	2300      	movs	r3, #0
 8007076:	76fb      	strb	r3, [r7, #27]
 8007078:	e063      	b.n	8007142 <UART_SetConfig+0x282>
 800707a:	2302      	movs	r3, #2
 800707c:	76fb      	strb	r3, [r7, #27]
 800707e:	e060      	b.n	8007142 <UART_SetConfig+0x282>
 8007080:	2304      	movs	r3, #4
 8007082:	76fb      	strb	r3, [r7, #27]
 8007084:	e05d      	b.n	8007142 <UART_SetConfig+0x282>
 8007086:	2308      	movs	r3, #8
 8007088:	76fb      	strb	r3, [r7, #27]
 800708a:	e05a      	b.n	8007142 <UART_SetConfig+0x282>
 800708c:	2310      	movs	r3, #16
 800708e:	76fb      	strb	r3, [r7, #27]
 8007090:	e057      	b.n	8007142 <UART_SetConfig+0x282>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a49      	ldr	r2, [pc, #292]	; (80071bc <UART_SetConfig+0x2fc>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d125      	bne.n	80070e8 <UART_SetConfig+0x228>
 800709c:	4b43      	ldr	r3, [pc, #268]	; (80071ac <UART_SetConfig+0x2ec>)
 800709e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070aa:	d017      	beq.n	80070dc <UART_SetConfig+0x21c>
 80070ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070b0:	d817      	bhi.n	80070e2 <UART_SetConfig+0x222>
 80070b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070b6:	d00b      	beq.n	80070d0 <UART_SetConfig+0x210>
 80070b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070bc:	d811      	bhi.n	80070e2 <UART_SetConfig+0x222>
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d003      	beq.n	80070ca <UART_SetConfig+0x20a>
 80070c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070c6:	d006      	beq.n	80070d6 <UART_SetConfig+0x216>
 80070c8:	e00b      	b.n	80070e2 <UART_SetConfig+0x222>
 80070ca:	2300      	movs	r3, #0
 80070cc:	76fb      	strb	r3, [r7, #27]
 80070ce:	e038      	b.n	8007142 <UART_SetConfig+0x282>
 80070d0:	2302      	movs	r3, #2
 80070d2:	76fb      	strb	r3, [r7, #27]
 80070d4:	e035      	b.n	8007142 <UART_SetConfig+0x282>
 80070d6:	2304      	movs	r3, #4
 80070d8:	76fb      	strb	r3, [r7, #27]
 80070da:	e032      	b.n	8007142 <UART_SetConfig+0x282>
 80070dc:	2308      	movs	r3, #8
 80070de:	76fb      	strb	r3, [r7, #27]
 80070e0:	e02f      	b.n	8007142 <UART_SetConfig+0x282>
 80070e2:	2310      	movs	r3, #16
 80070e4:	76fb      	strb	r3, [r7, #27]
 80070e6:	e02c      	b.n	8007142 <UART_SetConfig+0x282>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a2d      	ldr	r2, [pc, #180]	; (80071a4 <UART_SetConfig+0x2e4>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d125      	bne.n	800713e <UART_SetConfig+0x27e>
 80070f2:	4b2e      	ldr	r3, [pc, #184]	; (80071ac <UART_SetConfig+0x2ec>)
 80070f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80070fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007100:	d017      	beq.n	8007132 <UART_SetConfig+0x272>
 8007102:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007106:	d817      	bhi.n	8007138 <UART_SetConfig+0x278>
 8007108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800710c:	d00b      	beq.n	8007126 <UART_SetConfig+0x266>
 800710e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007112:	d811      	bhi.n	8007138 <UART_SetConfig+0x278>
 8007114:	2b00      	cmp	r3, #0
 8007116:	d003      	beq.n	8007120 <UART_SetConfig+0x260>
 8007118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800711c:	d006      	beq.n	800712c <UART_SetConfig+0x26c>
 800711e:	e00b      	b.n	8007138 <UART_SetConfig+0x278>
 8007120:	2300      	movs	r3, #0
 8007122:	76fb      	strb	r3, [r7, #27]
 8007124:	e00d      	b.n	8007142 <UART_SetConfig+0x282>
 8007126:	2302      	movs	r3, #2
 8007128:	76fb      	strb	r3, [r7, #27]
 800712a:	e00a      	b.n	8007142 <UART_SetConfig+0x282>
 800712c:	2304      	movs	r3, #4
 800712e:	76fb      	strb	r3, [r7, #27]
 8007130:	e007      	b.n	8007142 <UART_SetConfig+0x282>
 8007132:	2308      	movs	r3, #8
 8007134:	76fb      	strb	r3, [r7, #27]
 8007136:	e004      	b.n	8007142 <UART_SetConfig+0x282>
 8007138:	2310      	movs	r3, #16
 800713a:	76fb      	strb	r3, [r7, #27]
 800713c:	e001      	b.n	8007142 <UART_SetConfig+0x282>
 800713e:	2310      	movs	r3, #16
 8007140:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a17      	ldr	r2, [pc, #92]	; (80071a4 <UART_SetConfig+0x2e4>)
 8007148:	4293      	cmp	r3, r2
 800714a:	f040 8087 	bne.w	800725c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800714e:	7efb      	ldrb	r3, [r7, #27]
 8007150:	2b08      	cmp	r3, #8
 8007152:	d837      	bhi.n	80071c4 <UART_SetConfig+0x304>
 8007154:	a201      	add	r2, pc, #4	; (adr r2, 800715c <UART_SetConfig+0x29c>)
 8007156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800715a:	bf00      	nop
 800715c:	08007181 	.word	0x08007181
 8007160:	080071c5 	.word	0x080071c5
 8007164:	08007189 	.word	0x08007189
 8007168:	080071c5 	.word	0x080071c5
 800716c:	0800718f 	.word	0x0800718f
 8007170:	080071c5 	.word	0x080071c5
 8007174:	080071c5 	.word	0x080071c5
 8007178:	080071c5 	.word	0x080071c5
 800717c:	08007197 	.word	0x08007197
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007180:	f7fe fef0 	bl	8005f64 <HAL_RCC_GetPCLK1Freq>
 8007184:	6178      	str	r0, [r7, #20]
        break;
 8007186:	e022      	b.n	80071ce <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007188:	4b0d      	ldr	r3, [pc, #52]	; (80071c0 <UART_SetConfig+0x300>)
 800718a:	617b      	str	r3, [r7, #20]
        break;
 800718c:	e01f      	b.n	80071ce <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800718e:	f7fe fe51 	bl	8005e34 <HAL_RCC_GetSysClockFreq>
 8007192:	6178      	str	r0, [r7, #20]
        break;
 8007194:	e01b      	b.n	80071ce <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800719a:	617b      	str	r3, [r7, #20]
        break;
 800719c:	e017      	b.n	80071ce <UART_SetConfig+0x30e>
 800719e:	bf00      	nop
 80071a0:	efff69f3 	.word	0xefff69f3
 80071a4:	40008000 	.word	0x40008000
 80071a8:	40013800 	.word	0x40013800
 80071ac:	40021000 	.word	0x40021000
 80071b0:	40004400 	.word	0x40004400
 80071b4:	40004800 	.word	0x40004800
 80071b8:	40004c00 	.word	0x40004c00
 80071bc:	40005000 	.word	0x40005000
 80071c0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80071c4:	2300      	movs	r3, #0
 80071c6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	76bb      	strb	r3, [r7, #26]
        break;
 80071cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 80f1 	beq.w	80073b8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	685a      	ldr	r2, [r3, #4]
 80071da:	4613      	mov	r3, r2
 80071dc:	005b      	lsls	r3, r3, #1
 80071de:	4413      	add	r3, r2
 80071e0:	697a      	ldr	r2, [r7, #20]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d305      	bcc.n	80071f2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80071ec:	697a      	ldr	r2, [r7, #20]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d902      	bls.n	80071f8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	76bb      	strb	r3, [r7, #26]
 80071f6:	e0df      	b.n	80073b8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	4618      	mov	r0, r3
 80071fc:	f04f 0100 	mov.w	r1, #0
 8007200:	f04f 0200 	mov.w	r2, #0
 8007204:	f04f 0300 	mov.w	r3, #0
 8007208:	020b      	lsls	r3, r1, #8
 800720a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800720e:	0202      	lsls	r2, r0, #8
 8007210:	6879      	ldr	r1, [r7, #4]
 8007212:	6849      	ldr	r1, [r1, #4]
 8007214:	0849      	lsrs	r1, r1, #1
 8007216:	4608      	mov	r0, r1
 8007218:	f04f 0100 	mov.w	r1, #0
 800721c:	1814      	adds	r4, r2, r0
 800721e:	eb43 0501 	adc.w	r5, r3, r1
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	461a      	mov	r2, r3
 8007228:	f04f 0300 	mov.w	r3, #0
 800722c:	4620      	mov	r0, r4
 800722e:	4629      	mov	r1, r5
 8007230:	f7f9 f826 	bl	8000280 <__aeabi_uldivmod>
 8007234:	4602      	mov	r2, r0
 8007236:	460b      	mov	r3, r1
 8007238:	4613      	mov	r3, r2
 800723a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007242:	d308      	bcc.n	8007256 <UART_SetConfig+0x396>
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800724a:	d204      	bcs.n	8007256 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	60da      	str	r2, [r3, #12]
 8007254:	e0b0      	b.n	80073b8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	76bb      	strb	r3, [r7, #26]
 800725a:	e0ad      	b.n	80073b8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	69db      	ldr	r3, [r3, #28]
 8007260:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007264:	d15c      	bne.n	8007320 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8007266:	7efb      	ldrb	r3, [r7, #27]
 8007268:	2b08      	cmp	r3, #8
 800726a:	d828      	bhi.n	80072be <UART_SetConfig+0x3fe>
 800726c:	a201      	add	r2, pc, #4	; (adr r2, 8007274 <UART_SetConfig+0x3b4>)
 800726e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007272:	bf00      	nop
 8007274:	08007299 	.word	0x08007299
 8007278:	080072a1 	.word	0x080072a1
 800727c:	080072a9 	.word	0x080072a9
 8007280:	080072bf 	.word	0x080072bf
 8007284:	080072af 	.word	0x080072af
 8007288:	080072bf 	.word	0x080072bf
 800728c:	080072bf 	.word	0x080072bf
 8007290:	080072bf 	.word	0x080072bf
 8007294:	080072b7 	.word	0x080072b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007298:	f7fe fe64 	bl	8005f64 <HAL_RCC_GetPCLK1Freq>
 800729c:	6178      	str	r0, [r7, #20]
        break;
 800729e:	e013      	b.n	80072c8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072a0:	f7fe fe76 	bl	8005f90 <HAL_RCC_GetPCLK2Freq>
 80072a4:	6178      	str	r0, [r7, #20]
        break;
 80072a6:	e00f      	b.n	80072c8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072a8:	4b49      	ldr	r3, [pc, #292]	; (80073d0 <UART_SetConfig+0x510>)
 80072aa:	617b      	str	r3, [r7, #20]
        break;
 80072ac:	e00c      	b.n	80072c8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072ae:	f7fe fdc1 	bl	8005e34 <HAL_RCC_GetSysClockFreq>
 80072b2:	6178      	str	r0, [r7, #20]
        break;
 80072b4:	e008      	b.n	80072c8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072ba:	617b      	str	r3, [r7, #20]
        break;
 80072bc:	e004      	b.n	80072c8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80072be:	2300      	movs	r3, #0
 80072c0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	76bb      	strb	r3, [r7, #26]
        break;
 80072c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d074      	beq.n	80073b8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	005a      	lsls	r2, r3, #1
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	085b      	lsrs	r3, r3, #1
 80072d8:	441a      	add	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	fbb2 f3f3 	udiv	r3, r2, r3
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	2b0f      	cmp	r3, #15
 80072ea:	d916      	bls.n	800731a <UART_SetConfig+0x45a>
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072f2:	d212      	bcs.n	800731a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	f023 030f 	bic.w	r3, r3, #15
 80072fc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	085b      	lsrs	r3, r3, #1
 8007302:	b29b      	uxth	r3, r3
 8007304:	f003 0307 	and.w	r3, r3, #7
 8007308:	b29a      	uxth	r2, r3
 800730a:	89fb      	ldrh	r3, [r7, #14]
 800730c:	4313      	orrs	r3, r2
 800730e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	89fa      	ldrh	r2, [r7, #14]
 8007316:	60da      	str	r2, [r3, #12]
 8007318:	e04e      	b.n	80073b8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	76bb      	strb	r3, [r7, #26]
 800731e:	e04b      	b.n	80073b8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007320:	7efb      	ldrb	r3, [r7, #27]
 8007322:	2b08      	cmp	r3, #8
 8007324:	d827      	bhi.n	8007376 <UART_SetConfig+0x4b6>
 8007326:	a201      	add	r2, pc, #4	; (adr r2, 800732c <UART_SetConfig+0x46c>)
 8007328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732c:	08007351 	.word	0x08007351
 8007330:	08007359 	.word	0x08007359
 8007334:	08007361 	.word	0x08007361
 8007338:	08007377 	.word	0x08007377
 800733c:	08007367 	.word	0x08007367
 8007340:	08007377 	.word	0x08007377
 8007344:	08007377 	.word	0x08007377
 8007348:	08007377 	.word	0x08007377
 800734c:	0800736f 	.word	0x0800736f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007350:	f7fe fe08 	bl	8005f64 <HAL_RCC_GetPCLK1Freq>
 8007354:	6178      	str	r0, [r7, #20]
        break;
 8007356:	e013      	b.n	8007380 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007358:	f7fe fe1a 	bl	8005f90 <HAL_RCC_GetPCLK2Freq>
 800735c:	6178      	str	r0, [r7, #20]
        break;
 800735e:	e00f      	b.n	8007380 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007360:	4b1b      	ldr	r3, [pc, #108]	; (80073d0 <UART_SetConfig+0x510>)
 8007362:	617b      	str	r3, [r7, #20]
        break;
 8007364:	e00c      	b.n	8007380 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007366:	f7fe fd65 	bl	8005e34 <HAL_RCC_GetSysClockFreq>
 800736a:	6178      	str	r0, [r7, #20]
        break;
 800736c:	e008      	b.n	8007380 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800736e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007372:	617b      	str	r3, [r7, #20]
        break;
 8007374:	e004      	b.n	8007380 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8007376:	2300      	movs	r3, #0
 8007378:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	76bb      	strb	r3, [r7, #26]
        break;
 800737e:	bf00      	nop
    }

    if (pclk != 0U)
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d018      	beq.n	80073b8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	085a      	lsrs	r2, r3, #1
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	441a      	add	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	fbb2 f3f3 	udiv	r3, r2, r3
 8007398:	b29b      	uxth	r3, r3
 800739a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	2b0f      	cmp	r3, #15
 80073a0:	d908      	bls.n	80073b4 <UART_SetConfig+0x4f4>
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073a8:	d204      	bcs.n	80073b4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	693a      	ldr	r2, [r7, #16]
 80073b0:	60da      	str	r2, [r3, #12]
 80073b2:	e001      	b.n	80073b8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80073c4:	7ebb      	ldrb	r3, [r7, #26]
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3720      	adds	r7, #32
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bdb0      	pop	{r4, r5, r7, pc}
 80073ce:	bf00      	nop
 80073d0:	00f42400 	.word	0x00f42400

080073d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e0:	f003 0301 	and.w	r3, r3, #1
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00a      	beq.n	80073fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	430a      	orrs	r2, r1
 80073fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007402:	f003 0302 	and.w	r3, r3, #2
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00a      	beq.n	8007420 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	430a      	orrs	r2, r1
 800741e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007424:	f003 0304 	and.w	r3, r3, #4
 8007428:	2b00      	cmp	r3, #0
 800742a:	d00a      	beq.n	8007442 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	430a      	orrs	r2, r1
 8007440:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007446:	f003 0308 	and.w	r3, r3, #8
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00a      	beq.n	8007464 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	430a      	orrs	r2, r1
 8007462:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007468:	f003 0310 	and.w	r3, r3, #16
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00a      	beq.n	8007486 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	430a      	orrs	r2, r1
 8007484:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748a:	f003 0320 	and.w	r3, r3, #32
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00a      	beq.n	80074a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	430a      	orrs	r2, r1
 80074a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d01a      	beq.n	80074ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	430a      	orrs	r2, r1
 80074c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074d2:	d10a      	bne.n	80074ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	430a      	orrs	r2, r1
 80074e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00a      	beq.n	800750c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	430a      	orrs	r2, r1
 800750a:	605a      	str	r2, [r3, #4]
  }
}
 800750c:	bf00      	nop
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b086      	sub	sp, #24
 800751c:	af02      	add	r7, sp, #8
 800751e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007528:	f7fa fcb6 	bl	8001e98 <HAL_GetTick>
 800752c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0308 	and.w	r3, r3, #8
 8007538:	2b08      	cmp	r3, #8
 800753a:	d10e      	bne.n	800755a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800753c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007540:	9300      	str	r3, [sp, #0]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 f82d 	bl	80075aa <UART_WaitOnFlagUntilTimeout>
 8007550:	4603      	mov	r3, r0
 8007552:	2b00      	cmp	r3, #0
 8007554:	d001      	beq.n	800755a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007556:	2303      	movs	r3, #3
 8007558:	e023      	b.n	80075a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 0304 	and.w	r3, r3, #4
 8007564:	2b04      	cmp	r3, #4
 8007566:	d10e      	bne.n	8007586 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007568:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800756c:	9300      	str	r3, [sp, #0]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 f817 	bl	80075aa <UART_WaitOnFlagUntilTimeout>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d001      	beq.n	8007586 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007582:	2303      	movs	r3, #3
 8007584:	e00d      	b.n	80075a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2220      	movs	r2, #32
 800758a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2220      	movs	r2, #32
 8007590:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b084      	sub	sp, #16
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	60f8      	str	r0, [r7, #12]
 80075b2:	60b9      	str	r1, [r7, #8]
 80075b4:	603b      	str	r3, [r7, #0]
 80075b6:	4613      	mov	r3, r2
 80075b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075ba:	e05e      	b.n	800767a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c2:	d05a      	beq.n	800767a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075c4:	f7fa fc68 	bl	8001e98 <HAL_GetTick>
 80075c8:	4602      	mov	r2, r0
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	1ad3      	subs	r3, r2, r3
 80075ce:	69ba      	ldr	r2, [r7, #24]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d302      	bcc.n	80075da <UART_WaitOnFlagUntilTimeout+0x30>
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d11b      	bne.n	8007612 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80075e8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	689a      	ldr	r2, [r3, #8]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f022 0201 	bic.w	r2, r2, #1
 80075f8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2220      	movs	r2, #32
 80075fe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2220      	movs	r2, #32
 8007604:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	e043      	b.n	800769a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 0304 	and.w	r3, r3, #4
 800761c:	2b00      	cmp	r3, #0
 800761e:	d02c      	beq.n	800767a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	69db      	ldr	r3, [r3, #28]
 8007626:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800762a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800762e:	d124      	bne.n	800767a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007638:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007648:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	689a      	ldr	r2, [r3, #8]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f022 0201 	bic.w	r2, r2, #1
 8007658:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2220      	movs	r2, #32
 800765e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2220      	movs	r2, #32
 8007664:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2220      	movs	r2, #32
 800766a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007676:	2303      	movs	r3, #3
 8007678:	e00f      	b.n	800769a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	69da      	ldr	r2, [r3, #28]
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	4013      	ands	r3, r2
 8007684:	68ba      	ldr	r2, [r7, #8]
 8007686:	429a      	cmp	r2, r3
 8007688:	bf0c      	ite	eq
 800768a:	2301      	moveq	r3, #1
 800768c:	2300      	movne	r3, #0
 800768e:	b2db      	uxtb	r3, r3
 8007690:	461a      	mov	r2, r3
 8007692:	79fb      	ldrb	r3, [r7, #7]
 8007694:	429a      	cmp	r2, r3
 8007696:	d091      	beq.n	80075bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076a2:	b084      	sub	sp, #16
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	f107 001c 	add.w	r0, r7, #28
 80076b0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 fa23 	bl	8007b0c <USB_CoreReset>
 80076c6:	4603      	mov	r3, r0
 80076c8:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80076ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d106      	bne.n	80076de <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	639a      	str	r2, [r3, #56]	; 0x38
 80076dc:	e005      	b.n	80076ea <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80076ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3710      	adds	r7, #16
 80076f0:	46bd      	mov	sp, r7
 80076f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076f6:	b004      	add	sp, #16
 80076f8:	4770      	bx	lr

080076fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80076fa:	b480      	push	{r7}
 80076fc:	b083      	sub	sp, #12
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	f023 0201 	bic.w	r2, r3, #1
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	460b      	mov	r3, r1
 8007726:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007734:	78fb      	ldrb	r3, [r7, #3]
 8007736:	2b01      	cmp	r3, #1
 8007738:	d106      	bne.n	8007748 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	60da      	str	r2, [r3, #12]
 8007746:	e00b      	b.n	8007760 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007748:	78fb      	ldrb	r3, [r7, #3]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d106      	bne.n	800775c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	60da      	str	r2, [r3, #12]
 800775a:	e001      	b.n	8007760 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	e003      	b.n	8007768 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007760:	2032      	movs	r0, #50	; 0x32
 8007762:	f7fa fba5 	bl	8001eb0 <HAL_Delay>

  return HAL_OK;
 8007766:	2300      	movs	r3, #0
}
 8007768:	4618      	mov	r0, r3
 800776a:	3708      	adds	r7, #8
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007770:	b084      	sub	sp, #16
 8007772:	b580      	push	{r7, lr}
 8007774:	b086      	sub	sp, #24
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
 800777a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800777e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007782:	2300      	movs	r3, #0
 8007784:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800778a:	2300      	movs	r3, #0
 800778c:	613b      	str	r3, [r7, #16]
 800778e:	e009      	b.n	80077a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	3340      	adds	r3, #64	; 0x40
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	4413      	add	r3, r2
 800779a:	2200      	movs	r2, #0
 800779c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	3301      	adds	r3, #1
 80077a2:	613b      	str	r3, [r7, #16]
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	2b0e      	cmp	r3, #14
 80077a8:	d9f2      	bls.n	8007790 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80077aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d11c      	bne.n	80077ea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077be:	f043 0302 	orr.w	r3, r3, #2
 80077c2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	601a      	str	r2, [r3, #0]
 80077e8:	e005      	b.n	80077f6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077fc:	461a      	mov	r2, r3
 80077fe:	2300      	movs	r3, #0
 8007800:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007808:	4619      	mov	r1, r3
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007810:	461a      	mov	r2, r3
 8007812:	680b      	ldr	r3, [r1, #0]
 8007814:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007816:	2103      	movs	r1, #3
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 f93d 	bl	8007a98 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800781e:	2110      	movs	r1, #16
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 f8f1 	bl	8007a08 <USB_FlushTxFifo>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d001      	beq.n	8007830 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 f90f 	bl	8007a54 <USB_FlushRxFifo>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d001      	beq.n	8007840 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007846:	461a      	mov	r2, r3
 8007848:	2300      	movs	r3, #0
 800784a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007852:	461a      	mov	r2, r3
 8007854:	2300      	movs	r3, #0
 8007856:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800785e:	461a      	mov	r2, r3
 8007860:	2300      	movs	r3, #0
 8007862:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007864:	2300      	movs	r3, #0
 8007866:	613b      	str	r3, [r7, #16]
 8007868:	e043      	b.n	80078f2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	015a      	lsls	r2, r3, #5
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	4413      	add	r3, r2
 8007872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800787c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007880:	d118      	bne.n	80078b4 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d10a      	bne.n	800789e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	015a      	lsls	r2, r3, #5
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	4413      	add	r3, r2
 8007890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007894:	461a      	mov	r2, r3
 8007896:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800789a:	6013      	str	r3, [r2, #0]
 800789c:	e013      	b.n	80078c6 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	015a      	lsls	r2, r3, #5
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	4413      	add	r3, r2
 80078a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078aa:	461a      	mov	r2, r3
 80078ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80078b0:	6013      	str	r3, [r2, #0]
 80078b2:	e008      	b.n	80078c6 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	015a      	lsls	r2, r3, #5
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	4413      	add	r3, r2
 80078bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078c0:	461a      	mov	r2, r3
 80078c2:	2300      	movs	r3, #0
 80078c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	015a      	lsls	r2, r3, #5
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	4413      	add	r3, r2
 80078ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078d2:	461a      	mov	r2, r3
 80078d4:	2300      	movs	r3, #0
 80078d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	015a      	lsls	r2, r3, #5
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	4413      	add	r3, r2
 80078e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e4:	461a      	mov	r2, r3
 80078e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80078ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	3301      	adds	r3, #1
 80078f0:	613b      	str	r3, [r7, #16]
 80078f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f4:	693a      	ldr	r2, [r7, #16]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d3b7      	bcc.n	800786a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078fa:	2300      	movs	r3, #0
 80078fc:	613b      	str	r3, [r7, #16]
 80078fe:	e043      	b.n	8007988 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	015a      	lsls	r2, r3, #5
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	4413      	add	r3, r2
 8007908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007912:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007916:	d118      	bne.n	800794a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10a      	bne.n	8007934 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	015a      	lsls	r2, r3, #5
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	4413      	add	r3, r2
 8007926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800792a:	461a      	mov	r2, r3
 800792c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007930:	6013      	str	r3, [r2, #0]
 8007932:	e013      	b.n	800795c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	015a      	lsls	r2, r3, #5
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	4413      	add	r3, r2
 800793c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007940:	461a      	mov	r2, r3
 8007942:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007946:	6013      	str	r3, [r2, #0]
 8007948:	e008      	b.n	800795c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	015a      	lsls	r2, r3, #5
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	4413      	add	r3, r2
 8007952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007956:	461a      	mov	r2, r3
 8007958:	2300      	movs	r3, #0
 800795a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	015a      	lsls	r2, r3, #5
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	4413      	add	r3, r2
 8007964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007968:	461a      	mov	r2, r3
 800796a:	2300      	movs	r3, #0
 800796c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	015a      	lsls	r2, r3, #5
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	4413      	add	r3, r2
 8007976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800797a:	461a      	mov	r2, r3
 800797c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007980:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	3301      	adds	r3, #1
 8007986:	613b      	str	r3, [r7, #16]
 8007988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798a:	693a      	ldr	r2, [r7, #16]
 800798c:	429a      	cmp	r2, r3
 800798e:	d3b7      	bcc.n	8007900 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	68fa      	ldr	r2, [r7, #12]
 800799a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800799e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079a2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80079b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	699b      	ldr	r3, [r3, #24]
 80079b6:	f043 0210 	orr.w	r2, r3, #16
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	699a      	ldr	r2, [r3, #24]
 80079c2:	4b10      	ldr	r3, [pc, #64]	; (8007a04 <USB_DevInit+0x294>)
 80079c4:	4313      	orrs	r3, r2
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80079ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d005      	beq.n	80079dc <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	699b      	ldr	r3, [r3, #24]
 80079d4:	f043 0208 	orr.w	r2, r3, #8
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80079dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d107      	bne.n	80079f2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	699b      	ldr	r3, [r3, #24]
 80079e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80079ea:	f043 0304 	orr.w	r3, r3, #4
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80079f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3718      	adds	r7, #24
 80079f8:	46bd      	mov	sp, r7
 80079fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079fe:	b004      	add	sp, #16
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	803c3800 	.word	0x803c3800

08007a08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007a12:	2300      	movs	r3, #0
 8007a14:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	019b      	lsls	r3, r3, #6
 8007a1a:	f043 0220 	orr.w	r2, r3, #32
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	3301      	adds	r3, #1
 8007a26:	60fb      	str	r3, [r7, #12]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	4a09      	ldr	r2, [pc, #36]	; (8007a50 <USB_FlushTxFifo+0x48>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d901      	bls.n	8007a34 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007a30:	2303      	movs	r3, #3
 8007a32:	e006      	b.n	8007a42 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	f003 0320 	and.w	r3, r3, #32
 8007a3c:	2b20      	cmp	r3, #32
 8007a3e:	d0f0      	beq.n	8007a22 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007a40:	2300      	movs	r3, #0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3714      	adds	r7, #20
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	00030d40 	.word	0x00030d40

08007a54 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2210      	movs	r2, #16
 8007a64:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	60fb      	str	r3, [r7, #12]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	4a09      	ldr	r2, [pc, #36]	; (8007a94 <USB_FlushRxFifo+0x40>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d901      	bls.n	8007a78 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007a74:	2303      	movs	r3, #3
 8007a76:	e006      	b.n	8007a86 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	f003 0310 	and.w	r3, r3, #16
 8007a80:	2b10      	cmp	r3, #16
 8007a82:	d0f0      	beq.n	8007a66 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3714      	adds	r7, #20
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	00030d40 	.word	0x00030d40

08007a98 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	78fb      	ldrb	r3, [r7, #3]
 8007ab2:	68f9      	ldr	r1, [r7, #12]
 8007ab4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3714      	adds	r7, #20
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr

08007aca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007aca:	b480      	push	{r7}
 8007acc:	b085      	sub	sp, #20
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	68fa      	ldr	r2, [r7, #12]
 8007ae0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ae4:	f023 0303 	bic.w	r3, r3, #3
 8007ae8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007af8:	f043 0302 	orr.w	r3, r3, #2
 8007afc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3714      	adds	r7, #20
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007b14:	2300      	movs	r3, #0
 8007b16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	60fb      	str	r3, [r7, #12]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	4a13      	ldr	r2, [pc, #76]	; (8007b70 <USB_CoreReset+0x64>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d901      	bls.n	8007b2a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007b26:	2303      	movs	r3, #3
 8007b28:	e01b      	b.n	8007b62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	daf2      	bge.n	8007b18 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007b32:	2300      	movs	r3, #0
 8007b34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	f043 0201 	orr.w	r2, r3, #1
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	3301      	adds	r3, #1
 8007b46:	60fb      	str	r3, [r7, #12]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	4a09      	ldr	r2, [pc, #36]	; (8007b70 <USB_CoreReset+0x64>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d901      	bls.n	8007b54 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007b50:	2303      	movs	r3, #3
 8007b52:	e006      	b.n	8007b62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	f003 0301 	and.w	r3, r3, #1
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d0f0      	beq.n	8007b42 <USB_CoreReset+0x36>

  return HAL_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3714      	adds	r7, #20
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop
 8007b70:	00030d40 	.word	0x00030d40

08007b74 <__errno>:
 8007b74:	4b01      	ldr	r3, [pc, #4]	; (8007b7c <__errno+0x8>)
 8007b76:	6818      	ldr	r0, [r3, #0]
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	20000010 	.word	0x20000010

08007b80 <__libc_init_array>:
 8007b80:	b570      	push	{r4, r5, r6, lr}
 8007b82:	4d0d      	ldr	r5, [pc, #52]	; (8007bb8 <__libc_init_array+0x38>)
 8007b84:	4c0d      	ldr	r4, [pc, #52]	; (8007bbc <__libc_init_array+0x3c>)
 8007b86:	1b64      	subs	r4, r4, r5
 8007b88:	10a4      	asrs	r4, r4, #2
 8007b8a:	2600      	movs	r6, #0
 8007b8c:	42a6      	cmp	r6, r4
 8007b8e:	d109      	bne.n	8007ba4 <__libc_init_array+0x24>
 8007b90:	4d0b      	ldr	r5, [pc, #44]	; (8007bc0 <__libc_init_array+0x40>)
 8007b92:	4c0c      	ldr	r4, [pc, #48]	; (8007bc4 <__libc_init_array+0x44>)
 8007b94:	f000 fc62 	bl	800845c <_init>
 8007b98:	1b64      	subs	r4, r4, r5
 8007b9a:	10a4      	asrs	r4, r4, #2
 8007b9c:	2600      	movs	r6, #0
 8007b9e:	42a6      	cmp	r6, r4
 8007ba0:	d105      	bne.n	8007bae <__libc_init_array+0x2e>
 8007ba2:	bd70      	pop	{r4, r5, r6, pc}
 8007ba4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ba8:	4798      	blx	r3
 8007baa:	3601      	adds	r6, #1
 8007bac:	e7ee      	b.n	8007b8c <__libc_init_array+0xc>
 8007bae:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bb2:	4798      	blx	r3
 8007bb4:	3601      	adds	r6, #1
 8007bb6:	e7f2      	b.n	8007b9e <__libc_init_array+0x1e>
 8007bb8:	08008b64 	.word	0x08008b64
 8007bbc:	08008b64 	.word	0x08008b64
 8007bc0:	08008b64 	.word	0x08008b64
 8007bc4:	08008b68 	.word	0x08008b68

08007bc8 <memset>:
 8007bc8:	4402      	add	r2, r0
 8007bca:	4603      	mov	r3, r0
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d100      	bne.n	8007bd2 <memset+0xa>
 8007bd0:	4770      	bx	lr
 8007bd2:	f803 1b01 	strb.w	r1, [r3], #1
 8007bd6:	e7f9      	b.n	8007bcc <memset+0x4>

08007bd8 <sniprintf>:
 8007bd8:	b40c      	push	{r2, r3}
 8007bda:	b530      	push	{r4, r5, lr}
 8007bdc:	4b17      	ldr	r3, [pc, #92]	; (8007c3c <sniprintf+0x64>)
 8007bde:	1e0c      	subs	r4, r1, #0
 8007be0:	681d      	ldr	r5, [r3, #0]
 8007be2:	b09d      	sub	sp, #116	; 0x74
 8007be4:	da08      	bge.n	8007bf8 <sniprintf+0x20>
 8007be6:	238b      	movs	r3, #139	; 0x8b
 8007be8:	602b      	str	r3, [r5, #0]
 8007bea:	f04f 30ff 	mov.w	r0, #4294967295
 8007bee:	b01d      	add	sp, #116	; 0x74
 8007bf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007bf4:	b002      	add	sp, #8
 8007bf6:	4770      	bx	lr
 8007bf8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007bfc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007c00:	bf14      	ite	ne
 8007c02:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007c06:	4623      	moveq	r3, r4
 8007c08:	9304      	str	r3, [sp, #16]
 8007c0a:	9307      	str	r3, [sp, #28]
 8007c0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007c10:	9002      	str	r0, [sp, #8]
 8007c12:	9006      	str	r0, [sp, #24]
 8007c14:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007c18:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007c1a:	ab21      	add	r3, sp, #132	; 0x84
 8007c1c:	a902      	add	r1, sp, #8
 8007c1e:	4628      	mov	r0, r5
 8007c20:	9301      	str	r3, [sp, #4]
 8007c22:	f000 f869 	bl	8007cf8 <_svfiprintf_r>
 8007c26:	1c43      	adds	r3, r0, #1
 8007c28:	bfbc      	itt	lt
 8007c2a:	238b      	movlt	r3, #139	; 0x8b
 8007c2c:	602b      	strlt	r3, [r5, #0]
 8007c2e:	2c00      	cmp	r4, #0
 8007c30:	d0dd      	beq.n	8007bee <sniprintf+0x16>
 8007c32:	9b02      	ldr	r3, [sp, #8]
 8007c34:	2200      	movs	r2, #0
 8007c36:	701a      	strb	r2, [r3, #0]
 8007c38:	e7d9      	b.n	8007bee <sniprintf+0x16>
 8007c3a:	bf00      	nop
 8007c3c:	20000010 	.word	0x20000010

08007c40 <__ssputs_r>:
 8007c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c44:	688e      	ldr	r6, [r1, #8]
 8007c46:	429e      	cmp	r6, r3
 8007c48:	4682      	mov	sl, r0
 8007c4a:	460c      	mov	r4, r1
 8007c4c:	4690      	mov	r8, r2
 8007c4e:	461f      	mov	r7, r3
 8007c50:	d838      	bhi.n	8007cc4 <__ssputs_r+0x84>
 8007c52:	898a      	ldrh	r2, [r1, #12]
 8007c54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c58:	d032      	beq.n	8007cc0 <__ssputs_r+0x80>
 8007c5a:	6825      	ldr	r5, [r4, #0]
 8007c5c:	6909      	ldr	r1, [r1, #16]
 8007c5e:	eba5 0901 	sub.w	r9, r5, r1
 8007c62:	6965      	ldr	r5, [r4, #20]
 8007c64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	444b      	add	r3, r9
 8007c70:	106d      	asrs	r5, r5, #1
 8007c72:	429d      	cmp	r5, r3
 8007c74:	bf38      	it	cc
 8007c76:	461d      	movcc	r5, r3
 8007c78:	0553      	lsls	r3, r2, #21
 8007c7a:	d531      	bpl.n	8007ce0 <__ssputs_r+0xa0>
 8007c7c:	4629      	mov	r1, r5
 8007c7e:	f000 fb47 	bl	8008310 <_malloc_r>
 8007c82:	4606      	mov	r6, r0
 8007c84:	b950      	cbnz	r0, 8007c9c <__ssputs_r+0x5c>
 8007c86:	230c      	movs	r3, #12
 8007c88:	f8ca 3000 	str.w	r3, [sl]
 8007c8c:	89a3      	ldrh	r3, [r4, #12]
 8007c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c92:	81a3      	strh	r3, [r4, #12]
 8007c94:	f04f 30ff 	mov.w	r0, #4294967295
 8007c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c9c:	6921      	ldr	r1, [r4, #16]
 8007c9e:	464a      	mov	r2, r9
 8007ca0:	f000 fabe 	bl	8008220 <memcpy>
 8007ca4:	89a3      	ldrh	r3, [r4, #12]
 8007ca6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cae:	81a3      	strh	r3, [r4, #12]
 8007cb0:	6126      	str	r6, [r4, #16]
 8007cb2:	6165      	str	r5, [r4, #20]
 8007cb4:	444e      	add	r6, r9
 8007cb6:	eba5 0509 	sub.w	r5, r5, r9
 8007cba:	6026      	str	r6, [r4, #0]
 8007cbc:	60a5      	str	r5, [r4, #8]
 8007cbe:	463e      	mov	r6, r7
 8007cc0:	42be      	cmp	r6, r7
 8007cc2:	d900      	bls.n	8007cc6 <__ssputs_r+0x86>
 8007cc4:	463e      	mov	r6, r7
 8007cc6:	4632      	mov	r2, r6
 8007cc8:	6820      	ldr	r0, [r4, #0]
 8007cca:	4641      	mov	r1, r8
 8007ccc:	f000 fab6 	bl	800823c <memmove>
 8007cd0:	68a3      	ldr	r3, [r4, #8]
 8007cd2:	6822      	ldr	r2, [r4, #0]
 8007cd4:	1b9b      	subs	r3, r3, r6
 8007cd6:	4432      	add	r2, r6
 8007cd8:	60a3      	str	r3, [r4, #8]
 8007cda:	6022      	str	r2, [r4, #0]
 8007cdc:	2000      	movs	r0, #0
 8007cde:	e7db      	b.n	8007c98 <__ssputs_r+0x58>
 8007ce0:	462a      	mov	r2, r5
 8007ce2:	f000 fb6f 	bl	80083c4 <_realloc_r>
 8007ce6:	4606      	mov	r6, r0
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	d1e1      	bne.n	8007cb0 <__ssputs_r+0x70>
 8007cec:	6921      	ldr	r1, [r4, #16]
 8007cee:	4650      	mov	r0, sl
 8007cf0:	f000 fabe 	bl	8008270 <_free_r>
 8007cf4:	e7c7      	b.n	8007c86 <__ssputs_r+0x46>
	...

08007cf8 <_svfiprintf_r>:
 8007cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cfc:	4698      	mov	r8, r3
 8007cfe:	898b      	ldrh	r3, [r1, #12]
 8007d00:	061b      	lsls	r3, r3, #24
 8007d02:	b09d      	sub	sp, #116	; 0x74
 8007d04:	4607      	mov	r7, r0
 8007d06:	460d      	mov	r5, r1
 8007d08:	4614      	mov	r4, r2
 8007d0a:	d50e      	bpl.n	8007d2a <_svfiprintf_r+0x32>
 8007d0c:	690b      	ldr	r3, [r1, #16]
 8007d0e:	b963      	cbnz	r3, 8007d2a <_svfiprintf_r+0x32>
 8007d10:	2140      	movs	r1, #64	; 0x40
 8007d12:	f000 fafd 	bl	8008310 <_malloc_r>
 8007d16:	6028      	str	r0, [r5, #0]
 8007d18:	6128      	str	r0, [r5, #16]
 8007d1a:	b920      	cbnz	r0, 8007d26 <_svfiprintf_r+0x2e>
 8007d1c:	230c      	movs	r3, #12
 8007d1e:	603b      	str	r3, [r7, #0]
 8007d20:	f04f 30ff 	mov.w	r0, #4294967295
 8007d24:	e0d1      	b.n	8007eca <_svfiprintf_r+0x1d2>
 8007d26:	2340      	movs	r3, #64	; 0x40
 8007d28:	616b      	str	r3, [r5, #20]
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d2e:	2320      	movs	r3, #32
 8007d30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d34:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d38:	2330      	movs	r3, #48	; 0x30
 8007d3a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007ee4 <_svfiprintf_r+0x1ec>
 8007d3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d42:	f04f 0901 	mov.w	r9, #1
 8007d46:	4623      	mov	r3, r4
 8007d48:	469a      	mov	sl, r3
 8007d4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d4e:	b10a      	cbz	r2, 8007d54 <_svfiprintf_r+0x5c>
 8007d50:	2a25      	cmp	r2, #37	; 0x25
 8007d52:	d1f9      	bne.n	8007d48 <_svfiprintf_r+0x50>
 8007d54:	ebba 0b04 	subs.w	fp, sl, r4
 8007d58:	d00b      	beq.n	8007d72 <_svfiprintf_r+0x7a>
 8007d5a:	465b      	mov	r3, fp
 8007d5c:	4622      	mov	r2, r4
 8007d5e:	4629      	mov	r1, r5
 8007d60:	4638      	mov	r0, r7
 8007d62:	f7ff ff6d 	bl	8007c40 <__ssputs_r>
 8007d66:	3001      	adds	r0, #1
 8007d68:	f000 80aa 	beq.w	8007ec0 <_svfiprintf_r+0x1c8>
 8007d6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d6e:	445a      	add	r2, fp
 8007d70:	9209      	str	r2, [sp, #36]	; 0x24
 8007d72:	f89a 3000 	ldrb.w	r3, [sl]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	f000 80a2 	beq.w	8007ec0 <_svfiprintf_r+0x1c8>
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8007d82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d86:	f10a 0a01 	add.w	sl, sl, #1
 8007d8a:	9304      	str	r3, [sp, #16]
 8007d8c:	9307      	str	r3, [sp, #28]
 8007d8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d92:	931a      	str	r3, [sp, #104]	; 0x68
 8007d94:	4654      	mov	r4, sl
 8007d96:	2205      	movs	r2, #5
 8007d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d9c:	4851      	ldr	r0, [pc, #324]	; (8007ee4 <_svfiprintf_r+0x1ec>)
 8007d9e:	f7f8 fa1f 	bl	80001e0 <memchr>
 8007da2:	9a04      	ldr	r2, [sp, #16]
 8007da4:	b9d8      	cbnz	r0, 8007dde <_svfiprintf_r+0xe6>
 8007da6:	06d0      	lsls	r0, r2, #27
 8007da8:	bf44      	itt	mi
 8007daa:	2320      	movmi	r3, #32
 8007dac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007db0:	0711      	lsls	r1, r2, #28
 8007db2:	bf44      	itt	mi
 8007db4:	232b      	movmi	r3, #43	; 0x2b
 8007db6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dba:	f89a 3000 	ldrb.w	r3, [sl]
 8007dbe:	2b2a      	cmp	r3, #42	; 0x2a
 8007dc0:	d015      	beq.n	8007dee <_svfiprintf_r+0xf6>
 8007dc2:	9a07      	ldr	r2, [sp, #28]
 8007dc4:	4654      	mov	r4, sl
 8007dc6:	2000      	movs	r0, #0
 8007dc8:	f04f 0c0a 	mov.w	ip, #10
 8007dcc:	4621      	mov	r1, r4
 8007dce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dd2:	3b30      	subs	r3, #48	; 0x30
 8007dd4:	2b09      	cmp	r3, #9
 8007dd6:	d94e      	bls.n	8007e76 <_svfiprintf_r+0x17e>
 8007dd8:	b1b0      	cbz	r0, 8007e08 <_svfiprintf_r+0x110>
 8007dda:	9207      	str	r2, [sp, #28]
 8007ddc:	e014      	b.n	8007e08 <_svfiprintf_r+0x110>
 8007dde:	eba0 0308 	sub.w	r3, r0, r8
 8007de2:	fa09 f303 	lsl.w	r3, r9, r3
 8007de6:	4313      	orrs	r3, r2
 8007de8:	9304      	str	r3, [sp, #16]
 8007dea:	46a2      	mov	sl, r4
 8007dec:	e7d2      	b.n	8007d94 <_svfiprintf_r+0x9c>
 8007dee:	9b03      	ldr	r3, [sp, #12]
 8007df0:	1d19      	adds	r1, r3, #4
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	9103      	str	r1, [sp, #12]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	bfbb      	ittet	lt
 8007dfa:	425b      	neglt	r3, r3
 8007dfc:	f042 0202 	orrlt.w	r2, r2, #2
 8007e00:	9307      	strge	r3, [sp, #28]
 8007e02:	9307      	strlt	r3, [sp, #28]
 8007e04:	bfb8      	it	lt
 8007e06:	9204      	strlt	r2, [sp, #16]
 8007e08:	7823      	ldrb	r3, [r4, #0]
 8007e0a:	2b2e      	cmp	r3, #46	; 0x2e
 8007e0c:	d10c      	bne.n	8007e28 <_svfiprintf_r+0x130>
 8007e0e:	7863      	ldrb	r3, [r4, #1]
 8007e10:	2b2a      	cmp	r3, #42	; 0x2a
 8007e12:	d135      	bne.n	8007e80 <_svfiprintf_r+0x188>
 8007e14:	9b03      	ldr	r3, [sp, #12]
 8007e16:	1d1a      	adds	r2, r3, #4
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	9203      	str	r2, [sp, #12]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	bfb8      	it	lt
 8007e20:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e24:	3402      	adds	r4, #2
 8007e26:	9305      	str	r3, [sp, #20]
 8007e28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007ef4 <_svfiprintf_r+0x1fc>
 8007e2c:	7821      	ldrb	r1, [r4, #0]
 8007e2e:	2203      	movs	r2, #3
 8007e30:	4650      	mov	r0, sl
 8007e32:	f7f8 f9d5 	bl	80001e0 <memchr>
 8007e36:	b140      	cbz	r0, 8007e4a <_svfiprintf_r+0x152>
 8007e38:	2340      	movs	r3, #64	; 0x40
 8007e3a:	eba0 000a 	sub.w	r0, r0, sl
 8007e3e:	fa03 f000 	lsl.w	r0, r3, r0
 8007e42:	9b04      	ldr	r3, [sp, #16]
 8007e44:	4303      	orrs	r3, r0
 8007e46:	3401      	adds	r4, #1
 8007e48:	9304      	str	r3, [sp, #16]
 8007e4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e4e:	4826      	ldr	r0, [pc, #152]	; (8007ee8 <_svfiprintf_r+0x1f0>)
 8007e50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e54:	2206      	movs	r2, #6
 8007e56:	f7f8 f9c3 	bl	80001e0 <memchr>
 8007e5a:	2800      	cmp	r0, #0
 8007e5c:	d038      	beq.n	8007ed0 <_svfiprintf_r+0x1d8>
 8007e5e:	4b23      	ldr	r3, [pc, #140]	; (8007eec <_svfiprintf_r+0x1f4>)
 8007e60:	bb1b      	cbnz	r3, 8007eaa <_svfiprintf_r+0x1b2>
 8007e62:	9b03      	ldr	r3, [sp, #12]
 8007e64:	3307      	adds	r3, #7
 8007e66:	f023 0307 	bic.w	r3, r3, #7
 8007e6a:	3308      	adds	r3, #8
 8007e6c:	9303      	str	r3, [sp, #12]
 8007e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e70:	4433      	add	r3, r6
 8007e72:	9309      	str	r3, [sp, #36]	; 0x24
 8007e74:	e767      	b.n	8007d46 <_svfiprintf_r+0x4e>
 8007e76:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e7a:	460c      	mov	r4, r1
 8007e7c:	2001      	movs	r0, #1
 8007e7e:	e7a5      	b.n	8007dcc <_svfiprintf_r+0xd4>
 8007e80:	2300      	movs	r3, #0
 8007e82:	3401      	adds	r4, #1
 8007e84:	9305      	str	r3, [sp, #20]
 8007e86:	4619      	mov	r1, r3
 8007e88:	f04f 0c0a 	mov.w	ip, #10
 8007e8c:	4620      	mov	r0, r4
 8007e8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e92:	3a30      	subs	r2, #48	; 0x30
 8007e94:	2a09      	cmp	r2, #9
 8007e96:	d903      	bls.n	8007ea0 <_svfiprintf_r+0x1a8>
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d0c5      	beq.n	8007e28 <_svfiprintf_r+0x130>
 8007e9c:	9105      	str	r1, [sp, #20]
 8007e9e:	e7c3      	b.n	8007e28 <_svfiprintf_r+0x130>
 8007ea0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ea4:	4604      	mov	r4, r0
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e7f0      	b.n	8007e8c <_svfiprintf_r+0x194>
 8007eaa:	ab03      	add	r3, sp, #12
 8007eac:	9300      	str	r3, [sp, #0]
 8007eae:	462a      	mov	r2, r5
 8007eb0:	4b0f      	ldr	r3, [pc, #60]	; (8007ef0 <_svfiprintf_r+0x1f8>)
 8007eb2:	a904      	add	r1, sp, #16
 8007eb4:	4638      	mov	r0, r7
 8007eb6:	f3af 8000 	nop.w
 8007eba:	1c42      	adds	r2, r0, #1
 8007ebc:	4606      	mov	r6, r0
 8007ebe:	d1d6      	bne.n	8007e6e <_svfiprintf_r+0x176>
 8007ec0:	89ab      	ldrh	r3, [r5, #12]
 8007ec2:	065b      	lsls	r3, r3, #25
 8007ec4:	f53f af2c 	bmi.w	8007d20 <_svfiprintf_r+0x28>
 8007ec8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007eca:	b01d      	add	sp, #116	; 0x74
 8007ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ed0:	ab03      	add	r3, sp, #12
 8007ed2:	9300      	str	r3, [sp, #0]
 8007ed4:	462a      	mov	r2, r5
 8007ed6:	4b06      	ldr	r3, [pc, #24]	; (8007ef0 <_svfiprintf_r+0x1f8>)
 8007ed8:	a904      	add	r1, sp, #16
 8007eda:	4638      	mov	r0, r7
 8007edc:	f000 f87a 	bl	8007fd4 <_printf_i>
 8007ee0:	e7eb      	b.n	8007eba <_svfiprintf_r+0x1c2>
 8007ee2:	bf00      	nop
 8007ee4:	08008b28 	.word	0x08008b28
 8007ee8:	08008b32 	.word	0x08008b32
 8007eec:	00000000 	.word	0x00000000
 8007ef0:	08007c41 	.word	0x08007c41
 8007ef4:	08008b2e 	.word	0x08008b2e

08007ef8 <_printf_common>:
 8007ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007efc:	4616      	mov	r6, r2
 8007efe:	4699      	mov	r9, r3
 8007f00:	688a      	ldr	r2, [r1, #8]
 8007f02:	690b      	ldr	r3, [r1, #16]
 8007f04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	bfb8      	it	lt
 8007f0c:	4613      	movlt	r3, r2
 8007f0e:	6033      	str	r3, [r6, #0]
 8007f10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f14:	4607      	mov	r7, r0
 8007f16:	460c      	mov	r4, r1
 8007f18:	b10a      	cbz	r2, 8007f1e <_printf_common+0x26>
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	6033      	str	r3, [r6, #0]
 8007f1e:	6823      	ldr	r3, [r4, #0]
 8007f20:	0699      	lsls	r1, r3, #26
 8007f22:	bf42      	ittt	mi
 8007f24:	6833      	ldrmi	r3, [r6, #0]
 8007f26:	3302      	addmi	r3, #2
 8007f28:	6033      	strmi	r3, [r6, #0]
 8007f2a:	6825      	ldr	r5, [r4, #0]
 8007f2c:	f015 0506 	ands.w	r5, r5, #6
 8007f30:	d106      	bne.n	8007f40 <_printf_common+0x48>
 8007f32:	f104 0a19 	add.w	sl, r4, #25
 8007f36:	68e3      	ldr	r3, [r4, #12]
 8007f38:	6832      	ldr	r2, [r6, #0]
 8007f3a:	1a9b      	subs	r3, r3, r2
 8007f3c:	42ab      	cmp	r3, r5
 8007f3e:	dc26      	bgt.n	8007f8e <_printf_common+0x96>
 8007f40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f44:	1e13      	subs	r3, r2, #0
 8007f46:	6822      	ldr	r2, [r4, #0]
 8007f48:	bf18      	it	ne
 8007f4a:	2301      	movne	r3, #1
 8007f4c:	0692      	lsls	r2, r2, #26
 8007f4e:	d42b      	bmi.n	8007fa8 <_printf_common+0xb0>
 8007f50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f54:	4649      	mov	r1, r9
 8007f56:	4638      	mov	r0, r7
 8007f58:	47c0      	blx	r8
 8007f5a:	3001      	adds	r0, #1
 8007f5c:	d01e      	beq.n	8007f9c <_printf_common+0xa4>
 8007f5e:	6823      	ldr	r3, [r4, #0]
 8007f60:	68e5      	ldr	r5, [r4, #12]
 8007f62:	6832      	ldr	r2, [r6, #0]
 8007f64:	f003 0306 	and.w	r3, r3, #6
 8007f68:	2b04      	cmp	r3, #4
 8007f6a:	bf08      	it	eq
 8007f6c:	1aad      	subeq	r5, r5, r2
 8007f6e:	68a3      	ldr	r3, [r4, #8]
 8007f70:	6922      	ldr	r2, [r4, #16]
 8007f72:	bf0c      	ite	eq
 8007f74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f78:	2500      	movne	r5, #0
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	bfc4      	itt	gt
 8007f7e:	1a9b      	subgt	r3, r3, r2
 8007f80:	18ed      	addgt	r5, r5, r3
 8007f82:	2600      	movs	r6, #0
 8007f84:	341a      	adds	r4, #26
 8007f86:	42b5      	cmp	r5, r6
 8007f88:	d11a      	bne.n	8007fc0 <_printf_common+0xc8>
 8007f8a:	2000      	movs	r0, #0
 8007f8c:	e008      	b.n	8007fa0 <_printf_common+0xa8>
 8007f8e:	2301      	movs	r3, #1
 8007f90:	4652      	mov	r2, sl
 8007f92:	4649      	mov	r1, r9
 8007f94:	4638      	mov	r0, r7
 8007f96:	47c0      	blx	r8
 8007f98:	3001      	adds	r0, #1
 8007f9a:	d103      	bne.n	8007fa4 <_printf_common+0xac>
 8007f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fa4:	3501      	adds	r5, #1
 8007fa6:	e7c6      	b.n	8007f36 <_printf_common+0x3e>
 8007fa8:	18e1      	adds	r1, r4, r3
 8007faa:	1c5a      	adds	r2, r3, #1
 8007fac:	2030      	movs	r0, #48	; 0x30
 8007fae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007fb2:	4422      	add	r2, r4
 8007fb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007fb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007fbc:	3302      	adds	r3, #2
 8007fbe:	e7c7      	b.n	8007f50 <_printf_common+0x58>
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	4622      	mov	r2, r4
 8007fc4:	4649      	mov	r1, r9
 8007fc6:	4638      	mov	r0, r7
 8007fc8:	47c0      	blx	r8
 8007fca:	3001      	adds	r0, #1
 8007fcc:	d0e6      	beq.n	8007f9c <_printf_common+0xa4>
 8007fce:	3601      	adds	r6, #1
 8007fd0:	e7d9      	b.n	8007f86 <_printf_common+0x8e>
	...

08007fd4 <_printf_i>:
 8007fd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fd8:	460c      	mov	r4, r1
 8007fda:	4691      	mov	r9, r2
 8007fdc:	7e27      	ldrb	r7, [r4, #24]
 8007fde:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007fe0:	2f78      	cmp	r7, #120	; 0x78
 8007fe2:	4680      	mov	r8, r0
 8007fe4:	469a      	mov	sl, r3
 8007fe6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fea:	d807      	bhi.n	8007ffc <_printf_i+0x28>
 8007fec:	2f62      	cmp	r7, #98	; 0x62
 8007fee:	d80a      	bhi.n	8008006 <_printf_i+0x32>
 8007ff0:	2f00      	cmp	r7, #0
 8007ff2:	f000 80d8 	beq.w	80081a6 <_printf_i+0x1d2>
 8007ff6:	2f58      	cmp	r7, #88	; 0x58
 8007ff8:	f000 80a3 	beq.w	8008142 <_printf_i+0x16e>
 8007ffc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008000:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008004:	e03a      	b.n	800807c <_printf_i+0xa8>
 8008006:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800800a:	2b15      	cmp	r3, #21
 800800c:	d8f6      	bhi.n	8007ffc <_printf_i+0x28>
 800800e:	a001      	add	r0, pc, #4	; (adr r0, 8008014 <_printf_i+0x40>)
 8008010:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008014:	0800806d 	.word	0x0800806d
 8008018:	08008081 	.word	0x08008081
 800801c:	08007ffd 	.word	0x08007ffd
 8008020:	08007ffd 	.word	0x08007ffd
 8008024:	08007ffd 	.word	0x08007ffd
 8008028:	08007ffd 	.word	0x08007ffd
 800802c:	08008081 	.word	0x08008081
 8008030:	08007ffd 	.word	0x08007ffd
 8008034:	08007ffd 	.word	0x08007ffd
 8008038:	08007ffd 	.word	0x08007ffd
 800803c:	08007ffd 	.word	0x08007ffd
 8008040:	0800818d 	.word	0x0800818d
 8008044:	080080b1 	.word	0x080080b1
 8008048:	0800816f 	.word	0x0800816f
 800804c:	08007ffd 	.word	0x08007ffd
 8008050:	08007ffd 	.word	0x08007ffd
 8008054:	080081af 	.word	0x080081af
 8008058:	08007ffd 	.word	0x08007ffd
 800805c:	080080b1 	.word	0x080080b1
 8008060:	08007ffd 	.word	0x08007ffd
 8008064:	08007ffd 	.word	0x08007ffd
 8008068:	08008177 	.word	0x08008177
 800806c:	680b      	ldr	r3, [r1, #0]
 800806e:	1d1a      	adds	r2, r3, #4
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	600a      	str	r2, [r1, #0]
 8008074:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008078:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800807c:	2301      	movs	r3, #1
 800807e:	e0a3      	b.n	80081c8 <_printf_i+0x1f4>
 8008080:	6825      	ldr	r5, [r4, #0]
 8008082:	6808      	ldr	r0, [r1, #0]
 8008084:	062e      	lsls	r6, r5, #24
 8008086:	f100 0304 	add.w	r3, r0, #4
 800808a:	d50a      	bpl.n	80080a2 <_printf_i+0xce>
 800808c:	6805      	ldr	r5, [r0, #0]
 800808e:	600b      	str	r3, [r1, #0]
 8008090:	2d00      	cmp	r5, #0
 8008092:	da03      	bge.n	800809c <_printf_i+0xc8>
 8008094:	232d      	movs	r3, #45	; 0x2d
 8008096:	426d      	negs	r5, r5
 8008098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800809c:	485e      	ldr	r0, [pc, #376]	; (8008218 <_printf_i+0x244>)
 800809e:	230a      	movs	r3, #10
 80080a0:	e019      	b.n	80080d6 <_printf_i+0x102>
 80080a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80080a6:	6805      	ldr	r5, [r0, #0]
 80080a8:	600b      	str	r3, [r1, #0]
 80080aa:	bf18      	it	ne
 80080ac:	b22d      	sxthne	r5, r5
 80080ae:	e7ef      	b.n	8008090 <_printf_i+0xbc>
 80080b0:	680b      	ldr	r3, [r1, #0]
 80080b2:	6825      	ldr	r5, [r4, #0]
 80080b4:	1d18      	adds	r0, r3, #4
 80080b6:	6008      	str	r0, [r1, #0]
 80080b8:	0628      	lsls	r0, r5, #24
 80080ba:	d501      	bpl.n	80080c0 <_printf_i+0xec>
 80080bc:	681d      	ldr	r5, [r3, #0]
 80080be:	e002      	b.n	80080c6 <_printf_i+0xf2>
 80080c0:	0669      	lsls	r1, r5, #25
 80080c2:	d5fb      	bpl.n	80080bc <_printf_i+0xe8>
 80080c4:	881d      	ldrh	r5, [r3, #0]
 80080c6:	4854      	ldr	r0, [pc, #336]	; (8008218 <_printf_i+0x244>)
 80080c8:	2f6f      	cmp	r7, #111	; 0x6f
 80080ca:	bf0c      	ite	eq
 80080cc:	2308      	moveq	r3, #8
 80080ce:	230a      	movne	r3, #10
 80080d0:	2100      	movs	r1, #0
 80080d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80080d6:	6866      	ldr	r6, [r4, #4]
 80080d8:	60a6      	str	r6, [r4, #8]
 80080da:	2e00      	cmp	r6, #0
 80080dc:	bfa2      	ittt	ge
 80080de:	6821      	ldrge	r1, [r4, #0]
 80080e0:	f021 0104 	bicge.w	r1, r1, #4
 80080e4:	6021      	strge	r1, [r4, #0]
 80080e6:	b90d      	cbnz	r5, 80080ec <_printf_i+0x118>
 80080e8:	2e00      	cmp	r6, #0
 80080ea:	d04d      	beq.n	8008188 <_printf_i+0x1b4>
 80080ec:	4616      	mov	r6, r2
 80080ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80080f2:	fb03 5711 	mls	r7, r3, r1, r5
 80080f6:	5dc7      	ldrb	r7, [r0, r7]
 80080f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80080fc:	462f      	mov	r7, r5
 80080fe:	42bb      	cmp	r3, r7
 8008100:	460d      	mov	r5, r1
 8008102:	d9f4      	bls.n	80080ee <_printf_i+0x11a>
 8008104:	2b08      	cmp	r3, #8
 8008106:	d10b      	bne.n	8008120 <_printf_i+0x14c>
 8008108:	6823      	ldr	r3, [r4, #0]
 800810a:	07df      	lsls	r7, r3, #31
 800810c:	d508      	bpl.n	8008120 <_printf_i+0x14c>
 800810e:	6923      	ldr	r3, [r4, #16]
 8008110:	6861      	ldr	r1, [r4, #4]
 8008112:	4299      	cmp	r1, r3
 8008114:	bfde      	ittt	le
 8008116:	2330      	movle	r3, #48	; 0x30
 8008118:	f806 3c01 	strble.w	r3, [r6, #-1]
 800811c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008120:	1b92      	subs	r2, r2, r6
 8008122:	6122      	str	r2, [r4, #16]
 8008124:	f8cd a000 	str.w	sl, [sp]
 8008128:	464b      	mov	r3, r9
 800812a:	aa03      	add	r2, sp, #12
 800812c:	4621      	mov	r1, r4
 800812e:	4640      	mov	r0, r8
 8008130:	f7ff fee2 	bl	8007ef8 <_printf_common>
 8008134:	3001      	adds	r0, #1
 8008136:	d14c      	bne.n	80081d2 <_printf_i+0x1fe>
 8008138:	f04f 30ff 	mov.w	r0, #4294967295
 800813c:	b004      	add	sp, #16
 800813e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008142:	4835      	ldr	r0, [pc, #212]	; (8008218 <_printf_i+0x244>)
 8008144:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008148:	6823      	ldr	r3, [r4, #0]
 800814a:	680e      	ldr	r6, [r1, #0]
 800814c:	061f      	lsls	r7, r3, #24
 800814e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008152:	600e      	str	r6, [r1, #0]
 8008154:	d514      	bpl.n	8008180 <_printf_i+0x1ac>
 8008156:	07d9      	lsls	r1, r3, #31
 8008158:	bf44      	itt	mi
 800815a:	f043 0320 	orrmi.w	r3, r3, #32
 800815e:	6023      	strmi	r3, [r4, #0]
 8008160:	b91d      	cbnz	r5, 800816a <_printf_i+0x196>
 8008162:	6823      	ldr	r3, [r4, #0]
 8008164:	f023 0320 	bic.w	r3, r3, #32
 8008168:	6023      	str	r3, [r4, #0]
 800816a:	2310      	movs	r3, #16
 800816c:	e7b0      	b.n	80080d0 <_printf_i+0xfc>
 800816e:	6823      	ldr	r3, [r4, #0]
 8008170:	f043 0320 	orr.w	r3, r3, #32
 8008174:	6023      	str	r3, [r4, #0]
 8008176:	2378      	movs	r3, #120	; 0x78
 8008178:	4828      	ldr	r0, [pc, #160]	; (800821c <_printf_i+0x248>)
 800817a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800817e:	e7e3      	b.n	8008148 <_printf_i+0x174>
 8008180:	065e      	lsls	r6, r3, #25
 8008182:	bf48      	it	mi
 8008184:	b2ad      	uxthmi	r5, r5
 8008186:	e7e6      	b.n	8008156 <_printf_i+0x182>
 8008188:	4616      	mov	r6, r2
 800818a:	e7bb      	b.n	8008104 <_printf_i+0x130>
 800818c:	680b      	ldr	r3, [r1, #0]
 800818e:	6826      	ldr	r6, [r4, #0]
 8008190:	6960      	ldr	r0, [r4, #20]
 8008192:	1d1d      	adds	r5, r3, #4
 8008194:	600d      	str	r5, [r1, #0]
 8008196:	0635      	lsls	r5, r6, #24
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	d501      	bpl.n	80081a0 <_printf_i+0x1cc>
 800819c:	6018      	str	r0, [r3, #0]
 800819e:	e002      	b.n	80081a6 <_printf_i+0x1d2>
 80081a0:	0671      	lsls	r1, r6, #25
 80081a2:	d5fb      	bpl.n	800819c <_printf_i+0x1c8>
 80081a4:	8018      	strh	r0, [r3, #0]
 80081a6:	2300      	movs	r3, #0
 80081a8:	6123      	str	r3, [r4, #16]
 80081aa:	4616      	mov	r6, r2
 80081ac:	e7ba      	b.n	8008124 <_printf_i+0x150>
 80081ae:	680b      	ldr	r3, [r1, #0]
 80081b0:	1d1a      	adds	r2, r3, #4
 80081b2:	600a      	str	r2, [r1, #0]
 80081b4:	681e      	ldr	r6, [r3, #0]
 80081b6:	6862      	ldr	r2, [r4, #4]
 80081b8:	2100      	movs	r1, #0
 80081ba:	4630      	mov	r0, r6
 80081bc:	f7f8 f810 	bl	80001e0 <memchr>
 80081c0:	b108      	cbz	r0, 80081c6 <_printf_i+0x1f2>
 80081c2:	1b80      	subs	r0, r0, r6
 80081c4:	6060      	str	r0, [r4, #4]
 80081c6:	6863      	ldr	r3, [r4, #4]
 80081c8:	6123      	str	r3, [r4, #16]
 80081ca:	2300      	movs	r3, #0
 80081cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081d0:	e7a8      	b.n	8008124 <_printf_i+0x150>
 80081d2:	6923      	ldr	r3, [r4, #16]
 80081d4:	4632      	mov	r2, r6
 80081d6:	4649      	mov	r1, r9
 80081d8:	4640      	mov	r0, r8
 80081da:	47d0      	blx	sl
 80081dc:	3001      	adds	r0, #1
 80081de:	d0ab      	beq.n	8008138 <_printf_i+0x164>
 80081e0:	6823      	ldr	r3, [r4, #0]
 80081e2:	079b      	lsls	r3, r3, #30
 80081e4:	d413      	bmi.n	800820e <_printf_i+0x23a>
 80081e6:	68e0      	ldr	r0, [r4, #12]
 80081e8:	9b03      	ldr	r3, [sp, #12]
 80081ea:	4298      	cmp	r0, r3
 80081ec:	bfb8      	it	lt
 80081ee:	4618      	movlt	r0, r3
 80081f0:	e7a4      	b.n	800813c <_printf_i+0x168>
 80081f2:	2301      	movs	r3, #1
 80081f4:	4632      	mov	r2, r6
 80081f6:	4649      	mov	r1, r9
 80081f8:	4640      	mov	r0, r8
 80081fa:	47d0      	blx	sl
 80081fc:	3001      	adds	r0, #1
 80081fe:	d09b      	beq.n	8008138 <_printf_i+0x164>
 8008200:	3501      	adds	r5, #1
 8008202:	68e3      	ldr	r3, [r4, #12]
 8008204:	9903      	ldr	r1, [sp, #12]
 8008206:	1a5b      	subs	r3, r3, r1
 8008208:	42ab      	cmp	r3, r5
 800820a:	dcf2      	bgt.n	80081f2 <_printf_i+0x21e>
 800820c:	e7eb      	b.n	80081e6 <_printf_i+0x212>
 800820e:	2500      	movs	r5, #0
 8008210:	f104 0619 	add.w	r6, r4, #25
 8008214:	e7f5      	b.n	8008202 <_printf_i+0x22e>
 8008216:	bf00      	nop
 8008218:	08008b39 	.word	0x08008b39
 800821c:	08008b4a 	.word	0x08008b4a

08008220 <memcpy>:
 8008220:	440a      	add	r2, r1
 8008222:	4291      	cmp	r1, r2
 8008224:	f100 33ff 	add.w	r3, r0, #4294967295
 8008228:	d100      	bne.n	800822c <memcpy+0xc>
 800822a:	4770      	bx	lr
 800822c:	b510      	push	{r4, lr}
 800822e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008232:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008236:	4291      	cmp	r1, r2
 8008238:	d1f9      	bne.n	800822e <memcpy+0xe>
 800823a:	bd10      	pop	{r4, pc}

0800823c <memmove>:
 800823c:	4288      	cmp	r0, r1
 800823e:	b510      	push	{r4, lr}
 8008240:	eb01 0402 	add.w	r4, r1, r2
 8008244:	d902      	bls.n	800824c <memmove+0x10>
 8008246:	4284      	cmp	r4, r0
 8008248:	4623      	mov	r3, r4
 800824a:	d807      	bhi.n	800825c <memmove+0x20>
 800824c:	1e43      	subs	r3, r0, #1
 800824e:	42a1      	cmp	r1, r4
 8008250:	d008      	beq.n	8008264 <memmove+0x28>
 8008252:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008256:	f803 2f01 	strb.w	r2, [r3, #1]!
 800825a:	e7f8      	b.n	800824e <memmove+0x12>
 800825c:	4402      	add	r2, r0
 800825e:	4601      	mov	r1, r0
 8008260:	428a      	cmp	r2, r1
 8008262:	d100      	bne.n	8008266 <memmove+0x2a>
 8008264:	bd10      	pop	{r4, pc}
 8008266:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800826a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800826e:	e7f7      	b.n	8008260 <memmove+0x24>

08008270 <_free_r>:
 8008270:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008272:	2900      	cmp	r1, #0
 8008274:	d048      	beq.n	8008308 <_free_r+0x98>
 8008276:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800827a:	9001      	str	r0, [sp, #4]
 800827c:	2b00      	cmp	r3, #0
 800827e:	f1a1 0404 	sub.w	r4, r1, #4
 8008282:	bfb8      	it	lt
 8008284:	18e4      	addlt	r4, r4, r3
 8008286:	f000 f8d3 	bl	8008430 <__malloc_lock>
 800828a:	4a20      	ldr	r2, [pc, #128]	; (800830c <_free_r+0x9c>)
 800828c:	9801      	ldr	r0, [sp, #4]
 800828e:	6813      	ldr	r3, [r2, #0]
 8008290:	4615      	mov	r5, r2
 8008292:	b933      	cbnz	r3, 80082a2 <_free_r+0x32>
 8008294:	6063      	str	r3, [r4, #4]
 8008296:	6014      	str	r4, [r2, #0]
 8008298:	b003      	add	sp, #12
 800829a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800829e:	f000 b8cd 	b.w	800843c <__malloc_unlock>
 80082a2:	42a3      	cmp	r3, r4
 80082a4:	d90b      	bls.n	80082be <_free_r+0x4e>
 80082a6:	6821      	ldr	r1, [r4, #0]
 80082a8:	1862      	adds	r2, r4, r1
 80082aa:	4293      	cmp	r3, r2
 80082ac:	bf04      	itt	eq
 80082ae:	681a      	ldreq	r2, [r3, #0]
 80082b0:	685b      	ldreq	r3, [r3, #4]
 80082b2:	6063      	str	r3, [r4, #4]
 80082b4:	bf04      	itt	eq
 80082b6:	1852      	addeq	r2, r2, r1
 80082b8:	6022      	streq	r2, [r4, #0]
 80082ba:	602c      	str	r4, [r5, #0]
 80082bc:	e7ec      	b.n	8008298 <_free_r+0x28>
 80082be:	461a      	mov	r2, r3
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	b10b      	cbz	r3, 80082c8 <_free_r+0x58>
 80082c4:	42a3      	cmp	r3, r4
 80082c6:	d9fa      	bls.n	80082be <_free_r+0x4e>
 80082c8:	6811      	ldr	r1, [r2, #0]
 80082ca:	1855      	adds	r5, r2, r1
 80082cc:	42a5      	cmp	r5, r4
 80082ce:	d10b      	bne.n	80082e8 <_free_r+0x78>
 80082d0:	6824      	ldr	r4, [r4, #0]
 80082d2:	4421      	add	r1, r4
 80082d4:	1854      	adds	r4, r2, r1
 80082d6:	42a3      	cmp	r3, r4
 80082d8:	6011      	str	r1, [r2, #0]
 80082da:	d1dd      	bne.n	8008298 <_free_r+0x28>
 80082dc:	681c      	ldr	r4, [r3, #0]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	6053      	str	r3, [r2, #4]
 80082e2:	4421      	add	r1, r4
 80082e4:	6011      	str	r1, [r2, #0]
 80082e6:	e7d7      	b.n	8008298 <_free_r+0x28>
 80082e8:	d902      	bls.n	80082f0 <_free_r+0x80>
 80082ea:	230c      	movs	r3, #12
 80082ec:	6003      	str	r3, [r0, #0]
 80082ee:	e7d3      	b.n	8008298 <_free_r+0x28>
 80082f0:	6825      	ldr	r5, [r4, #0]
 80082f2:	1961      	adds	r1, r4, r5
 80082f4:	428b      	cmp	r3, r1
 80082f6:	bf04      	itt	eq
 80082f8:	6819      	ldreq	r1, [r3, #0]
 80082fa:	685b      	ldreq	r3, [r3, #4]
 80082fc:	6063      	str	r3, [r4, #4]
 80082fe:	bf04      	itt	eq
 8008300:	1949      	addeq	r1, r1, r5
 8008302:	6021      	streq	r1, [r4, #0]
 8008304:	6054      	str	r4, [r2, #4]
 8008306:	e7c7      	b.n	8008298 <_free_r+0x28>
 8008308:	b003      	add	sp, #12
 800830a:	bd30      	pop	{r4, r5, pc}
 800830c:	200000c0 	.word	0x200000c0

08008310 <_malloc_r>:
 8008310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008312:	1ccd      	adds	r5, r1, #3
 8008314:	f025 0503 	bic.w	r5, r5, #3
 8008318:	3508      	adds	r5, #8
 800831a:	2d0c      	cmp	r5, #12
 800831c:	bf38      	it	cc
 800831e:	250c      	movcc	r5, #12
 8008320:	2d00      	cmp	r5, #0
 8008322:	4606      	mov	r6, r0
 8008324:	db01      	blt.n	800832a <_malloc_r+0x1a>
 8008326:	42a9      	cmp	r1, r5
 8008328:	d903      	bls.n	8008332 <_malloc_r+0x22>
 800832a:	230c      	movs	r3, #12
 800832c:	6033      	str	r3, [r6, #0]
 800832e:	2000      	movs	r0, #0
 8008330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008332:	f000 f87d 	bl	8008430 <__malloc_lock>
 8008336:	4921      	ldr	r1, [pc, #132]	; (80083bc <_malloc_r+0xac>)
 8008338:	680a      	ldr	r2, [r1, #0]
 800833a:	4614      	mov	r4, r2
 800833c:	b99c      	cbnz	r4, 8008366 <_malloc_r+0x56>
 800833e:	4f20      	ldr	r7, [pc, #128]	; (80083c0 <_malloc_r+0xb0>)
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	b923      	cbnz	r3, 800834e <_malloc_r+0x3e>
 8008344:	4621      	mov	r1, r4
 8008346:	4630      	mov	r0, r6
 8008348:	f000 f862 	bl	8008410 <_sbrk_r>
 800834c:	6038      	str	r0, [r7, #0]
 800834e:	4629      	mov	r1, r5
 8008350:	4630      	mov	r0, r6
 8008352:	f000 f85d 	bl	8008410 <_sbrk_r>
 8008356:	1c43      	adds	r3, r0, #1
 8008358:	d123      	bne.n	80083a2 <_malloc_r+0x92>
 800835a:	230c      	movs	r3, #12
 800835c:	6033      	str	r3, [r6, #0]
 800835e:	4630      	mov	r0, r6
 8008360:	f000 f86c 	bl	800843c <__malloc_unlock>
 8008364:	e7e3      	b.n	800832e <_malloc_r+0x1e>
 8008366:	6823      	ldr	r3, [r4, #0]
 8008368:	1b5b      	subs	r3, r3, r5
 800836a:	d417      	bmi.n	800839c <_malloc_r+0x8c>
 800836c:	2b0b      	cmp	r3, #11
 800836e:	d903      	bls.n	8008378 <_malloc_r+0x68>
 8008370:	6023      	str	r3, [r4, #0]
 8008372:	441c      	add	r4, r3
 8008374:	6025      	str	r5, [r4, #0]
 8008376:	e004      	b.n	8008382 <_malloc_r+0x72>
 8008378:	6863      	ldr	r3, [r4, #4]
 800837a:	42a2      	cmp	r2, r4
 800837c:	bf0c      	ite	eq
 800837e:	600b      	streq	r3, [r1, #0]
 8008380:	6053      	strne	r3, [r2, #4]
 8008382:	4630      	mov	r0, r6
 8008384:	f000 f85a 	bl	800843c <__malloc_unlock>
 8008388:	f104 000b 	add.w	r0, r4, #11
 800838c:	1d23      	adds	r3, r4, #4
 800838e:	f020 0007 	bic.w	r0, r0, #7
 8008392:	1ac2      	subs	r2, r0, r3
 8008394:	d0cc      	beq.n	8008330 <_malloc_r+0x20>
 8008396:	1a1b      	subs	r3, r3, r0
 8008398:	50a3      	str	r3, [r4, r2]
 800839a:	e7c9      	b.n	8008330 <_malloc_r+0x20>
 800839c:	4622      	mov	r2, r4
 800839e:	6864      	ldr	r4, [r4, #4]
 80083a0:	e7cc      	b.n	800833c <_malloc_r+0x2c>
 80083a2:	1cc4      	adds	r4, r0, #3
 80083a4:	f024 0403 	bic.w	r4, r4, #3
 80083a8:	42a0      	cmp	r0, r4
 80083aa:	d0e3      	beq.n	8008374 <_malloc_r+0x64>
 80083ac:	1a21      	subs	r1, r4, r0
 80083ae:	4630      	mov	r0, r6
 80083b0:	f000 f82e 	bl	8008410 <_sbrk_r>
 80083b4:	3001      	adds	r0, #1
 80083b6:	d1dd      	bne.n	8008374 <_malloc_r+0x64>
 80083b8:	e7cf      	b.n	800835a <_malloc_r+0x4a>
 80083ba:	bf00      	nop
 80083bc:	200000c0 	.word	0x200000c0
 80083c0:	200000c4 	.word	0x200000c4

080083c4 <_realloc_r>:
 80083c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083c6:	4607      	mov	r7, r0
 80083c8:	4614      	mov	r4, r2
 80083ca:	460e      	mov	r6, r1
 80083cc:	b921      	cbnz	r1, 80083d8 <_realloc_r+0x14>
 80083ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80083d2:	4611      	mov	r1, r2
 80083d4:	f7ff bf9c 	b.w	8008310 <_malloc_r>
 80083d8:	b922      	cbnz	r2, 80083e4 <_realloc_r+0x20>
 80083da:	f7ff ff49 	bl	8008270 <_free_r>
 80083de:	4625      	mov	r5, r4
 80083e0:	4628      	mov	r0, r5
 80083e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083e4:	f000 f830 	bl	8008448 <_malloc_usable_size_r>
 80083e8:	42a0      	cmp	r0, r4
 80083ea:	d20f      	bcs.n	800840c <_realloc_r+0x48>
 80083ec:	4621      	mov	r1, r4
 80083ee:	4638      	mov	r0, r7
 80083f0:	f7ff ff8e 	bl	8008310 <_malloc_r>
 80083f4:	4605      	mov	r5, r0
 80083f6:	2800      	cmp	r0, #0
 80083f8:	d0f2      	beq.n	80083e0 <_realloc_r+0x1c>
 80083fa:	4631      	mov	r1, r6
 80083fc:	4622      	mov	r2, r4
 80083fe:	f7ff ff0f 	bl	8008220 <memcpy>
 8008402:	4631      	mov	r1, r6
 8008404:	4638      	mov	r0, r7
 8008406:	f7ff ff33 	bl	8008270 <_free_r>
 800840a:	e7e9      	b.n	80083e0 <_realloc_r+0x1c>
 800840c:	4635      	mov	r5, r6
 800840e:	e7e7      	b.n	80083e0 <_realloc_r+0x1c>

08008410 <_sbrk_r>:
 8008410:	b538      	push	{r3, r4, r5, lr}
 8008412:	4d06      	ldr	r5, [pc, #24]	; (800842c <_sbrk_r+0x1c>)
 8008414:	2300      	movs	r3, #0
 8008416:	4604      	mov	r4, r0
 8008418:	4608      	mov	r0, r1
 800841a:	602b      	str	r3, [r5, #0]
 800841c:	f7f9 fc42 	bl	8001ca4 <_sbrk>
 8008420:	1c43      	adds	r3, r0, #1
 8008422:	d102      	bne.n	800842a <_sbrk_r+0x1a>
 8008424:	682b      	ldr	r3, [r5, #0]
 8008426:	b103      	cbz	r3, 800842a <_sbrk_r+0x1a>
 8008428:	6023      	str	r3, [r4, #0]
 800842a:	bd38      	pop	{r3, r4, r5, pc}
 800842c:	20000798 	.word	0x20000798

08008430 <__malloc_lock>:
 8008430:	4801      	ldr	r0, [pc, #4]	; (8008438 <__malloc_lock+0x8>)
 8008432:	f000 b811 	b.w	8008458 <__retarget_lock_acquire_recursive>
 8008436:	bf00      	nop
 8008438:	200007a0 	.word	0x200007a0

0800843c <__malloc_unlock>:
 800843c:	4801      	ldr	r0, [pc, #4]	; (8008444 <__malloc_unlock+0x8>)
 800843e:	f000 b80c 	b.w	800845a <__retarget_lock_release_recursive>
 8008442:	bf00      	nop
 8008444:	200007a0 	.word	0x200007a0

08008448 <_malloc_usable_size_r>:
 8008448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800844c:	1f18      	subs	r0, r3, #4
 800844e:	2b00      	cmp	r3, #0
 8008450:	bfbc      	itt	lt
 8008452:	580b      	ldrlt	r3, [r1, r0]
 8008454:	18c0      	addlt	r0, r0, r3
 8008456:	4770      	bx	lr

08008458 <__retarget_lock_acquire_recursive>:
 8008458:	4770      	bx	lr

0800845a <__retarget_lock_release_recursive>:
 800845a:	4770      	bx	lr

0800845c <_init>:
 800845c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800845e:	bf00      	nop
 8008460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008462:	bc08      	pop	{r3}
 8008464:	469e      	mov	lr, r3
 8008466:	4770      	bx	lr

08008468 <_fini>:
 8008468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800846a:	bf00      	nop
 800846c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800846e:	bc08      	pop	{r3}
 8008470:	469e      	mov	lr, r3
 8008472:	4770      	bx	lr
